
motorcontrol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010964  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001744  08010b38  08010b38  00020b38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801227c  0801227c  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  0801227c  0801227c  0002227c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012284  08012284  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012284  08012284  00022284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012288  08012288  00022288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0801228c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a850  20000220  080124ac  00030220  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000aa70  080124ac  0003aa70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029b0a  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000507c  00000000  00000000  00059d5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  0005edd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001610  00000000  00000000  000605e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029e9c  00000000  00000000  00061bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ffbd  00000000  00000000  0008ba94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e877c  00000000  00000000  000aba51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001941cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b08  00000000  00000000  00194220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010b1c 	.word	0x08010b1c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	08010b1c 	.word	0x08010b1c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a4 	b.w	8001048 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468c      	mov	ip, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f040 8083 	bne.w	8000e9a <__udivmoddi4+0x116>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4617      	mov	r7, r2
 8000d98:	d947      	bls.n	8000e2a <__udivmoddi4+0xa6>
 8000d9a:	fab2 f282 	clz	r2, r2
 8000d9e:	b142      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000da0:	f1c2 0020 	rsb	r0, r2, #32
 8000da4:	fa24 f000 	lsr.w	r0, r4, r0
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4097      	lsls	r7, r2
 8000dac:	ea40 0c01 	orr.w	ip, r0, r1
 8000db0:	4094      	lsls	r4, r2
 8000db2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000db6:	0c23      	lsrs	r3, r4, #16
 8000db8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dbc:	fa1f fe87 	uxth.w	lr, r7
 8000dc0:	fb08 c116 	mls	r1, r8, r6, ip
 8000dc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x60>
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dd6:	f080 8119 	bcs.w	800100c <__udivmoddi4+0x288>
 8000dda:	4299      	cmp	r1, r3
 8000ddc:	f240 8116 	bls.w	800100c <__udivmoddi4+0x288>
 8000de0:	3e02      	subs	r6, #2
 8000de2:	443b      	add	r3, r7
 8000de4:	1a5b      	subs	r3, r3, r1
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dec:	fb08 3310 	mls	r3, r8, r0, r3
 8000df0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d909      	bls.n	8000e10 <__udivmoddi4+0x8c>
 8000dfc:	193c      	adds	r4, r7, r4
 8000dfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e02:	f080 8105 	bcs.w	8001010 <__udivmoddi4+0x28c>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f240 8102 	bls.w	8001010 <__udivmoddi4+0x28c>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	443c      	add	r4, r7
 8000e10:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e14:	eba4 040e 	sub.w	r4, r4, lr
 8000e18:	2600      	movs	r6, #0
 8000e1a:	b11d      	cbz	r5, 8000e24 <__udivmoddi4+0xa0>
 8000e1c:	40d4      	lsrs	r4, r2
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e9c5 4300 	strd	r4, r3, [r5]
 8000e24:	4631      	mov	r1, r6
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	b902      	cbnz	r2, 8000e2e <__udivmoddi4+0xaa>
 8000e2c:	deff      	udf	#255	; 0xff
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	d150      	bne.n	8000ed8 <__udivmoddi4+0x154>
 8000e36:	1bcb      	subs	r3, r1, r7
 8000e38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3c:	fa1f f887 	uxth.w	r8, r7
 8000e40:	2601      	movs	r6, #1
 8000e42:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e46:	0c21      	lsrs	r1, r4, #16
 8000e48:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e50:	fb08 f30c 	mul.w	r3, r8, ip
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0xe4>
 8000e58:	1879      	adds	r1, r7, r1
 8000e5a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0xe2>
 8000e60:	428b      	cmp	r3, r1
 8000e62:	f200 80e9 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e66:	4684      	mov	ip, r0
 8000e68:	1ac9      	subs	r1, r1, r3
 8000e6a:	b2a3      	uxth	r3, r4
 8000e6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e70:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e74:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e78:	fb08 f800 	mul.w	r8, r8, r0
 8000e7c:	45a0      	cmp	r8, r4
 8000e7e:	d907      	bls.n	8000e90 <__udivmoddi4+0x10c>
 8000e80:	193c      	adds	r4, r7, r4
 8000e82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x10a>
 8000e88:	45a0      	cmp	r8, r4
 8000e8a:	f200 80d9 	bhi.w	8001040 <__udivmoddi4+0x2bc>
 8000e8e:	4618      	mov	r0, r3
 8000e90:	eba4 0408 	sub.w	r4, r4, r8
 8000e94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e98:	e7bf      	b.n	8000e1a <__udivmoddi4+0x96>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d909      	bls.n	8000eb2 <__udivmoddi4+0x12e>
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	f000 80b1 	beq.w	8001006 <__udivmoddi4+0x282>
 8000ea4:	2600      	movs	r6, #0
 8000ea6:	e9c5 0100 	strd	r0, r1, [r5]
 8000eaa:	4630      	mov	r0, r6
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	fab3 f683 	clz	r6, r3
 8000eb6:	2e00      	cmp	r6, #0
 8000eb8:	d14a      	bne.n	8000f50 <__udivmoddi4+0x1cc>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d302      	bcc.n	8000ec4 <__udivmoddi4+0x140>
 8000ebe:	4282      	cmp	r2, r0
 8000ec0:	f200 80b8 	bhi.w	8001034 <__udivmoddi4+0x2b0>
 8000ec4:	1a84      	subs	r4, r0, r2
 8000ec6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eca:	2001      	movs	r0, #1
 8000ecc:	468c      	mov	ip, r1
 8000ece:	2d00      	cmp	r5, #0
 8000ed0:	d0a8      	beq.n	8000e24 <__udivmoddi4+0xa0>
 8000ed2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ed6:	e7a5      	b.n	8000e24 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ee0:	4097      	lsls	r7, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eea:	40d9      	lsrs	r1, r3
 8000eec:	4330      	orrs	r0, r6
 8000eee:	0c03      	lsrs	r3, r0, #16
 8000ef0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ef4:	fa1f f887 	uxth.w	r8, r7
 8000ef8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000efc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f00:	fb06 f108 	mul.w	r1, r6, r8
 8000f04:	4299      	cmp	r1, r3
 8000f06:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0a:	d909      	bls.n	8000f20 <__udivmoddi4+0x19c>
 8000f0c:	18fb      	adds	r3, r7, r3
 8000f0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f12:	f080 808d 	bcs.w	8001030 <__udivmoddi4+0x2ac>
 8000f16:	4299      	cmp	r1, r3
 8000f18:	f240 808a 	bls.w	8001030 <__udivmoddi4+0x2ac>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	443b      	add	r3, r7
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b281      	uxth	r1, r0
 8000f24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f30:	fb00 f308 	mul.w	r3, r0, r8
 8000f34:	428b      	cmp	r3, r1
 8000f36:	d907      	bls.n	8000f48 <__udivmoddi4+0x1c4>
 8000f38:	1879      	adds	r1, r7, r1
 8000f3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3e:	d273      	bcs.n	8001028 <__udivmoddi4+0x2a4>
 8000f40:	428b      	cmp	r3, r1
 8000f42:	d971      	bls.n	8001028 <__udivmoddi4+0x2a4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4439      	add	r1, r7
 8000f48:	1acb      	subs	r3, r1, r3
 8000f4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f4e:	e778      	b.n	8000e42 <__udivmoddi4+0xbe>
 8000f50:	f1c6 0c20 	rsb	ip, r6, #32
 8000f54:	fa03 f406 	lsl.w	r4, r3, r6
 8000f58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f5c:	431c      	orrs	r4, r3
 8000f5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f62:	fa01 f306 	lsl.w	r3, r1, r6
 8000f66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f6e:	431f      	orrs	r7, r3
 8000f70:	0c3b      	lsrs	r3, r7, #16
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fa1f f884 	uxth.w	r8, r4
 8000f7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f82:	fb09 fa08 	mul.w	sl, r9, r8
 8000f86:	458a      	cmp	sl, r1
 8000f88:	fa02 f206 	lsl.w	r2, r2, r6
 8000f8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x220>
 8000f92:	1861      	adds	r1, r4, r1
 8000f94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f98:	d248      	bcs.n	800102c <__udivmoddi4+0x2a8>
 8000f9a:	458a      	cmp	sl, r1
 8000f9c:	d946      	bls.n	800102c <__udivmoddi4+0x2a8>
 8000f9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000fa2:	4421      	add	r1, r4
 8000fa4:	eba1 010a 	sub.w	r1, r1, sl
 8000fa8:	b2bf      	uxth	r7, r7
 8000faa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fb2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fb6:	fb00 f808 	mul.w	r8, r0, r8
 8000fba:	45b8      	cmp	r8, r7
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x24a>
 8000fbe:	19e7      	adds	r7, r4, r7
 8000fc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fc4:	d22e      	bcs.n	8001024 <__udivmoddi4+0x2a0>
 8000fc6:	45b8      	cmp	r8, r7
 8000fc8:	d92c      	bls.n	8001024 <__udivmoddi4+0x2a0>
 8000fca:	3802      	subs	r0, #2
 8000fcc:	4427      	add	r7, r4
 8000fce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fd2:	eba7 0708 	sub.w	r7, r7, r8
 8000fd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fda:	454f      	cmp	r7, r9
 8000fdc:	46c6      	mov	lr, r8
 8000fde:	4649      	mov	r1, r9
 8000fe0:	d31a      	bcc.n	8001018 <__udivmoddi4+0x294>
 8000fe2:	d017      	beq.n	8001014 <__udivmoddi4+0x290>
 8000fe4:	b15d      	cbz	r5, 8000ffe <__udivmoddi4+0x27a>
 8000fe6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fea:	eb67 0701 	sbc.w	r7, r7, r1
 8000fee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ff2:	40f2      	lsrs	r2, r6
 8000ff4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ff8:	40f7      	lsrs	r7, r6
 8000ffa:	e9c5 2700 	strd	r2, r7, [r5]
 8000ffe:	2600      	movs	r6, #0
 8001000:	4631      	mov	r1, r6
 8001002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e70b      	b.n	8000e24 <__udivmoddi4+0xa0>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e9      	b.n	8000de4 <__udivmoddi4+0x60>
 8001010:	4618      	mov	r0, r3
 8001012:	e6fd      	b.n	8000e10 <__udivmoddi4+0x8c>
 8001014:	4543      	cmp	r3, r8
 8001016:	d2e5      	bcs.n	8000fe4 <__udivmoddi4+0x260>
 8001018:	ebb8 0e02 	subs.w	lr, r8, r2
 800101c:	eb69 0104 	sbc.w	r1, r9, r4
 8001020:	3801      	subs	r0, #1
 8001022:	e7df      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001024:	4608      	mov	r0, r1
 8001026:	e7d2      	b.n	8000fce <__udivmoddi4+0x24a>
 8001028:	4660      	mov	r0, ip
 800102a:	e78d      	b.n	8000f48 <__udivmoddi4+0x1c4>
 800102c:	4681      	mov	r9, r0
 800102e:	e7b9      	b.n	8000fa4 <__udivmoddi4+0x220>
 8001030:	4666      	mov	r6, ip
 8001032:	e775      	b.n	8000f20 <__udivmoddi4+0x19c>
 8001034:	4630      	mov	r0, r6
 8001036:	e74a      	b.n	8000ece <__udivmoddi4+0x14a>
 8001038:	f1ac 0c02 	sub.w	ip, ip, #2
 800103c:	4439      	add	r1, r7
 800103e:	e713      	b.n	8000e68 <__udivmoddi4+0xe4>
 8001040:	3802      	subs	r0, #2
 8001042:	443c      	add	r4, r7
 8001044:	e724      	b.n	8000e90 <__udivmoddi4+0x10c>
 8001046:	bf00      	nop

08001048 <__aeabi_idiv0>:
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800106a:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <MX_ADC1_Init+0xc8>)
 800106c:	4a2a      	ldr	r2, [pc, #168]	; (8001118 <MX_ADC1_Init+0xcc>)
 800106e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001070:	4b28      	ldr	r3, [pc, #160]	; (8001114 <MX_ADC1_Init+0xc8>)
 8001072:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001076:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001078:	4b26      	ldr	r3, [pc, #152]	; (8001114 <MX_ADC1_Init+0xc8>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800107e:	4b25      	ldr	r3, [pc, #148]	; (8001114 <MX_ADC1_Init+0xc8>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001084:	4b23      	ldr	r3, [pc, #140]	; (8001114 <MX_ADC1_Init+0xc8>)
 8001086:	2200      	movs	r2, #0
 8001088:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800108a:	4b22      	ldr	r3, [pc, #136]	; (8001114 <MX_ADC1_Init+0xc8>)
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001092:	4b20      	ldr	r3, [pc, #128]	; (8001114 <MX_ADC1_Init+0xc8>)
 8001094:	2200      	movs	r2, #0
 8001096:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001098:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <MX_ADC1_Init+0xc8>)
 800109a:	4a20      	ldr	r2, [pc, #128]	; (800111c <MX_ADC1_Init+0xd0>)
 800109c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800109e:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <MX_ADC1_Init+0xc8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <MX_ADC1_Init+0xc8>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <MX_ADC1_Init+0xc8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <MX_ADC1_Init+0xc8>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b8:	4816      	ldr	r0, [pc, #88]	; (8001114 <MX_ADC1_Init+0xc8>)
 80010ba:	f006 f9bd 	bl	8007438 <HAL_ADC_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80010c4:	f004 f84c 	bl	8005160 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 80010c8:	2316      	movs	r3, #22
 80010ca:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	4619      	mov	r1, r3
 80010da:	480e      	ldr	r0, [pc, #56]	; (8001114 <MX_ADC1_Init+0xc8>)
 80010dc:	f006 fd88 	bl	8007bf0 <HAL_ADCEx_MultiModeConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80010e6:	f004 f83b 	bl	8005160 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010ea:	230a      	movs	r3, #10
 80010ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 80010ee:	2301      	movs	r3, #1
 80010f0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	4619      	mov	r1, r3
 80010fa:	4806      	ldr	r0, [pc, #24]	; (8001114 <MX_ADC1_Init+0xc8>)
 80010fc:	f006 fb4a 	bl	8007794 <HAL_ADC_ConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8001106:	f004 f82b 	bl	8005160 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	3720      	adds	r7, #32
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000370 	.word	0x20000370
 8001118:	40012000 	.word	0x40012000
 800111c:	0f000001 	.word	0x0f000001

08001120 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001126:	463b      	mov	r3, r7
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001132:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <MX_ADC2_Init+0x8c>)
 8001134:	4a1e      	ldr	r2, [pc, #120]	; (80011b0 <MX_ADC2_Init+0x90>)
 8001136:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001138:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <MX_ADC2_Init+0x8c>)
 800113a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800113e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001140:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <MX_ADC2_Init+0x8c>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <MX_ADC2_Init+0x8c>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800114c:	4b17      	ldr	r3, [pc, #92]	; (80011ac <MX_ADC2_Init+0x8c>)
 800114e:	2200      	movs	r2, #0
 8001150:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001152:	4b16      	ldr	r3, [pc, #88]	; (80011ac <MX_ADC2_Init+0x8c>)
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <MX_ADC2_Init+0x8c>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_ADC2_Init+0x8c>)
 8001162:	2201      	movs	r2, #1
 8001164:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_ADC2_Init+0x8c>)
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_ADC2_Init+0x8c>)
 8001170:	2201      	movs	r2, #1
 8001172:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001174:	480d      	ldr	r0, [pc, #52]	; (80011ac <MX_ADC2_Init+0x8c>)
 8001176:	f006 f95f 	bl	8007438 <HAL_ADC_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 8001180:	f003 ffee 	bl	8005160 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001184:	230b      	movs	r3, #11
 8001186:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001188:	2301      	movs	r3, #1
 800118a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001190:	463b      	mov	r3, r7
 8001192:	4619      	mov	r1, r3
 8001194:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_ADC2_Init+0x8c>)
 8001196:	f006 fafd 	bl	8007794 <HAL_ADC_ConfigChannel>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80011a0:	f003 ffde 	bl	8005160 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000328 	.word	0x20000328
 80011b0:	40012100 	.word	0x40012100

080011b4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ba:	463b      	mov	r3, r7
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80011c6:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <MX_ADC3_Init+0x8c>)
 80011c8:	4a1e      	ldr	r2, [pc, #120]	; (8001244 <MX_ADC3_Init+0x90>)
 80011ca:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011cc:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <MX_ADC3_Init+0x8c>)
 80011ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011d2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <MX_ADC3_Init+0x8c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <MX_ADC3_Init+0x8c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011e0:	4b17      	ldr	r3, [pc, #92]	; (8001240 <MX_ADC3_Init+0x8c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011e6:	4b16      	ldr	r3, [pc, #88]	; (8001240 <MX_ADC3_Init+0x8c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_ADC3_Init+0x8c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <MX_ADC3_Init+0x8c>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_ADC3_Init+0x8c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_ADC3_Init+0x8c>)
 8001204:	2201      	movs	r2, #1
 8001206:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001208:	480d      	ldr	r0, [pc, #52]	; (8001240 <MX_ADC3_Init+0x8c>)
 800120a:	f006 f915 	bl	8007438 <HAL_ADC_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_ADC3_Init+0x64>
  {
    Error_Handler();
 8001214:	f003 ffa4 	bl	8005160 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001218:	2300      	movs	r3, #0
 800121a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800121c:	2301      	movs	r3, #1
 800121e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001224:	463b      	mov	r3, r7
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_ADC3_Init+0x8c>)
 800122a:	f006 fab3 	bl	8007794 <HAL_ADC_ConfigChannel>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8001234:	f003 ff94 	bl	8005160 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200003b8 	.word	0x200003b8
 8001244:	40012200 	.word	0x40012200

08001248 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08e      	sub	sp, #56	; 0x38
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a45      	ldr	r2, [pc, #276]	; (800137c <HAL_ADC_MspInit+0x134>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d128      	bne.n	80012bc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	4b44      	ldr	r3, [pc, #272]	; (8001380 <HAL_ADC_MspInit+0x138>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	4a43      	ldr	r2, [pc, #268]	; (8001380 <HAL_ADC_MspInit+0x138>)
 8001274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001278:	6453      	str	r3, [r2, #68]	; 0x44
 800127a:	4b41      	ldr	r3, [pc, #260]	; (8001380 <HAL_ADC_MspInit+0x138>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001282:	623b      	str	r3, [r7, #32]
 8001284:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	4b3d      	ldr	r3, [pc, #244]	; (8001380 <HAL_ADC_MspInit+0x138>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a3c      	ldr	r2, [pc, #240]	; (8001380 <HAL_ADC_MspInit+0x138>)
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b3a      	ldr	r3, [pc, #232]	; (8001380 <HAL_ADC_MspInit+0x138>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012a2:	2301      	movs	r3, #1
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a6:	2303      	movs	r3, #3
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b2:	4619      	mov	r1, r3
 80012b4:	4833      	ldr	r0, [pc, #204]	; (8001384 <HAL_ADC_MspInit+0x13c>)
 80012b6:	f007 fccb 	bl	8008c50 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80012ba:	e05a      	b.n	8001372 <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC2)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a31      	ldr	r2, [pc, #196]	; (8001388 <HAL_ADC_MspInit+0x140>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d128      	bne.n	8001318 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
 80012ca:	4b2d      	ldr	r3, [pc, #180]	; (8001380 <HAL_ADC_MspInit+0x138>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	4a2c      	ldr	r2, [pc, #176]	; (8001380 <HAL_ADC_MspInit+0x138>)
 80012d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012d4:	6453      	str	r3, [r2, #68]	; 0x44
 80012d6:	4b2a      	ldr	r3, [pc, #168]	; (8001380 <HAL_ADC_MspInit+0x138>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012de:	61bb      	str	r3, [r7, #24]
 80012e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
 80012e6:	4b26      	ldr	r3, [pc, #152]	; (8001380 <HAL_ADC_MspInit+0x138>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a25      	ldr	r2, [pc, #148]	; (8001380 <HAL_ADC_MspInit+0x138>)
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b23      	ldr	r3, [pc, #140]	; (8001380 <HAL_ADC_MspInit+0x138>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012fe:	2302      	movs	r3, #2
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001302:	2303      	movs	r3, #3
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130e:	4619      	mov	r1, r3
 8001310:	481c      	ldr	r0, [pc, #112]	; (8001384 <HAL_ADC_MspInit+0x13c>)
 8001312:	f007 fc9d 	bl	8008c50 <HAL_GPIO_Init>
}
 8001316:	e02c      	b.n	8001372 <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC3)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a1b      	ldr	r2, [pc, #108]	; (800138c <HAL_ADC_MspInit+0x144>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d127      	bne.n	8001372 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <HAL_ADC_MspInit+0x138>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	4a15      	ldr	r2, [pc, #84]	; (8001380 <HAL_ADC_MspInit+0x138>)
 800132c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001330:	6453      	str	r3, [r2, #68]	; 0x44
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <HAL_ADC_MspInit+0x138>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <HAL_ADC_MspInit+0x138>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <HAL_ADC_MspInit+0x138>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <HAL_ADC_MspInit+0x138>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800135a:	2301      	movs	r3, #1
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800135e:	2303      	movs	r3, #3
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136a:	4619      	mov	r1, r3
 800136c:	4808      	ldr	r0, [pc, #32]	; (8001390 <HAL_ADC_MspInit+0x148>)
 800136e:	f007 fc6f 	bl	8008c50 <HAL_GPIO_Init>
}
 8001372:	bf00      	nop
 8001374:	3738      	adds	r7, #56	; 0x38
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40012000 	.word	0x40012000
 8001380:	40023800 	.word	0x40023800
 8001384:	40020800 	.word	0x40020800
 8001388:	40012100 	.word	0x40012100
 800138c:	40012200 	.word	0x40012200
 8001390:	40020000 	.word	0x40020000

08001394 <order_phases>:
#include <stdio.h>
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001394:	b5b0      	push	{r4, r5, r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af02      	add	r7, sp, #8
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
 80013a0:	603b      	str	r3, [r7, #0]
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 80013a2:	4b76      	ldr	r3, [pc, #472]	; (800157c <order_phases+0x1e8>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]

	if(!cal->started){
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7c1b      	ldrb	r3, [r3, #16]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d108      	bne.n	80013c2 <order_phases+0x2e>
		printf("Checking phase sign, pole pairs\r\n");
 80013b0:	4873      	ldr	r0, [pc, #460]	; (8001580 <order_phases+0x1ec>)
 80013b2:	f00b fe07 	bl	800cfc4 <puts>
		cal->started = 1;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	60da      	str	r2, [r3, #12]
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	ee07 3a90 	vmov	s15, r3
 80013ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d2:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001584 <order_phases+0x1f0>
 80013d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	edd3 7a05 	vldr	s15, [r3, #20]
 80013e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f2:	d528      	bpl.n	8001446 <order_phases+0xb2>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001406:	3388      	adds	r3, #136	; 0x88
 8001408:	601a      	str	r2, [r3, #0]
        cal->cal_position.elec_velocity = 0;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001410:	3390      	adds	r3, #144	; 0x90
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
        controller->i_d_des = I_CAL;
 8001418:	4b5b      	ldr	r3, [pc, #364]	; (8001588 <order_phases+0x1f4>)
 800141a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        controller->i_q_des = 0.0f;
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        commutate(controller, &cal->cal_position);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001432:	332c      	adds	r3, #44	; 0x2c
 8001434:	4619      	mov	r1, r3
 8001436:	68b8      	ldr	r0, [r7, #8]
 8001438:	f001 fdc2 	bl	8002fc0 <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	68da      	ldr	r2, [r3, #12]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	619a      	str	r2, [r3, #24]
    	return;
 8001444:	e096      	b.n	8001574 <order_phases+0x1e0>
    }

    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	edd3 7a05 	vldr	s15, [r3, #20]
 800144c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800158c <order_phases+0x1f8>
 8001450:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001458:	d51d      	bpl.n	8001496 <order_phases+0x102>
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001460:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001464:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001468:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800146c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	edc3 7a02 	vstr	s15, [r3, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001480:	3388      	adds	r3, #136	; 0x88
 8001482:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800148a:	332c      	adds	r3, #44	; 0x2c
 800148c:	4619      	mov	r1, r3
 800148e:	68b8      	ldr	r0, [r7, #8]
 8001490:	f001 fd96 	bl	8002fc0 <commutate>
    	return;
 8001494:	e06e      	b.n	8001574 <order_phases+0x1e0>
    }

	reset_foc(controller);
 8001496:	68b8      	ldr	r0, [r7, #8]
 8001498:	f001 fc78 	bl	8002d8c <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	617b      	str	r3, [r7, #20]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80014a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80014ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b0:	eef0 7ae7 	vabs.f32	s15, s15
 80014b4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001590 <order_phases+0x1fc>
 80014b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014bc:	ee16 0a90 	vmov	r0, s13
 80014c0:	f7ff f872 	bl	80005a8 <__aeabi_f2d>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	ec43 2b10 	vmov	d0, r2, r3
 80014cc:	f00a fd2e 	bl	800bf2c <round>
 80014d0:	ec53 2b10 	vmov	r2, r3, d0
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f7ff fb96 	bl	8000c08 <__aeabi_d2uiz>
 80014dc:	4603      	mov	r3, r0
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	701a      	strb	r2, [r3, #0]

	if(cal->theta_start < theta_end){
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	edd3 7a06 	vldr	s15, [r3, #24]
 80014ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80014ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f6:	dd07      	ble.n	8001508 <order_phases+0x174>
		cal->phase_order = 0;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Phase order correct\r\n");
 8001500:	4824      	ldr	r0, [pc, #144]	; (8001594 <order_phases+0x200>)
 8001502:	f00b fd5f 	bl	800cfc4 <puts>
 8001506:	e006      	b.n	8001516 <order_phases+0x182>
	}
	else{
		cal->phase_order = 1;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Swapping phase sign\r\n");
 8001510:	4821      	ldr	r0, [pc, #132]	; (8001598 <order_phases+0x204>)
 8001512:	f00b fd57 	bl	800cfc4 <puts>
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	4619      	mov	r1, r3
 800151c:	481f      	ldr	r0, [pc, #124]	; (800159c <order_phases+0x208>)
 800151e:	f00b fccb 	bl	800ceb8 <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f83e 	bl	80005a8 <__aeabi_f2d>
 800152c:	4604      	mov	r4, r0
 800152e:	460d      	mov	r5, r1
 8001530:	6978      	ldr	r0, [r7, #20]
 8001532:	f7ff f839 	bl	80005a8 <__aeabi_f2d>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	e9cd 2300 	strd	r2, r3, [sp]
 800153e:	4622      	mov	r2, r4
 8001540:	462b      	mov	r3, r5
 8001542:	4817      	ldr	r0, [pc, #92]	; (80015a0 <order_phases+0x20c>)
 8001544:	f00b fcb8 	bl	800ceb8 <iprintf>
    PHASE_ORDER = cal->phase_order;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800154e:	461a      	mov	r2, r3
 8001550:	4b0a      	ldr	r3, [pc, #40]	; (800157c <order_phases+0x1e8>)
 8001552:	601a      	str	r2, [r3, #0]
    PPAIRS = (float)cal->ppairs;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	ee07 3a90 	vmov	s15, r3
 800155c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <order_phases+0x1f4>)
 8001562:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    cal->started = 0;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	741a      	strb	r2, [r3, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bdb0      	pop	{r4, r5, r7, pc}
 800157a:	bf00      	nop
 800157c:	20009074 	.word	0x20009074
 8001580:	08010b38 	.word	0x08010b38
 8001584:	37d1b717 	.word	0x37d1b717
 8001588:	2000075c 	.word	0x2000075c
 800158c:	3fd06cbe 	.word	0x3fd06cbe
 8001590:	40c90fdb 	.word	0x40c90fdb
 8001594:	08010b5c 	.word	0x08010b5c
 8001598:	08010b74 	.word	0x08010b74
 800159c:	08010b8c 	.word	0x08010b8c
 80015a0:	08010ba0 	.word	0x08010ba0

080015a4 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 80015a4:	b5b0      	push	{r4, r5, r7, lr}
 80015a6:	b094      	sub	sp, #80	; 0x50
 80015a8:	af02      	add	r7, sp, #8
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	603b      	str	r3, [r7, #0]
	/* Calibrates e-zero and encoder nonliearity */

	if(!cal->started){
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	7c1b      	ldrb	r3, [r3, #16]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10f      	bne.n	80015da <calibrate_encoder+0x36>
			printf("Starting offset cal and linearization\r\n");
 80015ba:	489e      	ldr	r0, [pc, #632]	; (8001834 <calibrate_encoder+0x290>)
 80015bc:	f00b fd02 	bl	800cfc4 <puts>
			cal->started = 1;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	741a      	strb	r2, [r3, #16]
			cal->start_count = loop_count;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	60da      	str	r2, [r3, #12]
			cal->next_sample_time = T1;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015d2:	629a      	str	r2, [r3, #40]	; 0x28
			cal->sample_count = 0;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	849a      	strh	r2, [r3, #36]	; 0x24
		}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	ee07 3a90 	vmov	s15, r3
 80015e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ea:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001838 <calibrate_encoder+0x294>
 80015ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80015fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001602:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160a:	d525      	bpl.n	8001658 <calibrate_encoder+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800161e:	3388      	adds	r3, #136	; 0x88
 8001620:	601a      	str	r2, [r3, #0]
        controller->i_d_des = I_CAL;
 8001622:	4b86      	ldr	r3, [pc, #536]	; (800183c <calibrate_encoder+0x298>)
 8001624:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        controller->i_q_des = 0.0f;
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        commutate(controller, &cal->cal_position);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800163c:	332c      	adds	r3, #44	; 0x2c
 800163e:	4619      	mov	r1, r3
 8001640:	68b8      	ldr	r0, [r7, #8]
 8001642:	f001 fcbd 	bl	8002fc0 <commutate>

    	cal->theta_start = encoder->angle_multiturn[0];
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	68da      	ldr	r2, [r3, #12]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	619a      	str	r2, [r3, #24]
    	cal->next_sample_time = cal->time;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695a      	ldr	r2, [r3, #20]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 8001656:	e259      	b.n	8001b0c <calibrate_encoder+0x568>
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	ed93 7a05 	vldr	s14, [r3, #20]
 800165e:	4b77      	ldr	r3, [pc, #476]	; (800183c <calibrate_encoder+0x298>)
 8001660:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001664:	eddf 6a76 	vldr	s13, [pc, #472]	; 8001840 <calibrate_encoder+0x29c>
 8001668:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800166c:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8001670:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001674:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001678:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800167c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001684:	f140 808f 	bpl.w	80017a6 <calibrate_encoder+0x202>
    	// rotate voltage vector through one mechanical rotation in the positive direction
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	edd3 7a02 	vldr	s15, [r3, #8]
 800168e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001844 <calibrate_encoder+0x2a0>
 8001692:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	edc3 7a02 	vstr	s15, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80016a6:	3388      	adds	r3, #136	; 0x88
 80016a8:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80016b0:	332c      	adds	r3, #44	; 0x2c
 80016b2:	4619      	mov	r1, r3
 80016b4:	68b8      	ldr	r0, [r7, #8]
 80016b6:	f001 fc83 	bl	8002fc0 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if(cal->time > cal->next_sample_time){
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	ed93 7a05 	vldr	s14, [r3, #20]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ce:	dc00      	bgt.n	80016d2 <calibrate_encoder+0x12e>
				return;
			}
			cal->sample_count++;

		}
		return;
 80016d0:	e21c      	b.n	8001b0c <calibrate_encoder+0x568>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80016d8:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001858 <calibrate_encoder+0x2b4>
 80016dc:	ee67 6a87 	vmul.f32	s13, s15, s14
 80016e0:	4b56      	ldr	r3, [pc, #344]	; (800183c <calibrate_encoder+0x298>)
 80016e2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016e6:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001840 <calibrate_encoder+0x29c>
 80016ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016f6:	ee17 3a90 	vmov	r3, s15
 80016fa:	61bb      	str	r3, [r7, #24]
			int error = encoder->raw - count_ref;//- encoder->raw;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	617b      	str	r3, [r7, #20]
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	13db      	asrs	r3, r3, #15
 800170a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001712:	4618      	mov	r0, r3
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	441a      	add	r2, r3
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	f100 030a 	add.w	r3, r0, #10
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	605a      	str	r2, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001728:	461d      	mov	r5, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	330a      	adds	r3, #10
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	685c      	ldr	r4, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe ff33 	bl	80005a8 <__aeabi_f2d>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	e9cd 2300 	strd	r2, r3, [sp]
 800174a:	4623      	mov	r3, r4
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4629      	mov	r1, r5
 8001750:	483d      	ldr	r0, [pc, #244]	; (8001848 <calibrate_encoder+0x2a4>)
 8001752:	f00b fbb1 	bl	800ceb8 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800175c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800184c <calibrate_encoder+0x2a8>
 8001760:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800176e:	ee07 3a90 	vmov	s15, r3
 8001772:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001776:	4b31      	ldr	r3, [pc, #196]	; (800183c <calibrate_encoder+0x298>)
 8001778:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800177c:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001850 <calibrate_encoder+0x2ac>
 8001780:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001784:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001788:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800178c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001794:	f000 81b7 	beq.w	8001b06 <calibrate_encoder+0x562>
			cal->sample_count++;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800179c:	3301      	adds	r3, #1
 800179e:	b29a      	uxth	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	849a      	strh	r2, [r3, #36]	; 0x24
		return;
 80017a4:	e1b2      	b.n	8001b0c <calibrate_encoder+0x568>
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	ed93 7a05 	vldr	s14, [r3, #20]
 80017ac:	4b23      	ldr	r3, [pc, #140]	; (800183c <calibrate_encoder+0x298>)
 80017ae:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80017b2:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001854 <calibrate_encoder+0x2b0>
 80017b6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80017ba:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 80017be:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80017c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80017ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d2:	f140 80a9 	bpl.w	8001928 <calibrate_encoder+0x384>
		// rotate voltage vector through one mechanical rotation in the negative direction
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80017dc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001844 <calibrate_encoder+0x2a0>
 80017e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	edc3 7a02 	vstr	s15, [r3, #8]
		controller->i_d_des = I_CAL;
 80017ea:	4b14      	ldr	r3, [pc, #80]	; (800183c <calibrate_encoder+0x298>)
 80017ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		controller->i_q_des = 0.0f;
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		cal->cal_position.elec_angle = cal->theta_ref;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001808:	3388      	adds	r3, #136	; 0x88
 800180a:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001812:	332c      	adds	r3, #44	; 0x2c
 8001814:	4619      	mov	r1, r3
 8001816:	68b8      	ldr	r0, [r7, #8]
 8001818:	f001 fbd2 	bl	8002fc0 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800182c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001830:	dc14      	bgt.n	800185c <calibrate_encoder+0x2b8>
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
			cal->sample_count--;
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
 8001832:	e16a      	b.n	8001b0a <calibrate_encoder+0x566>
 8001834:	08010bbc 	.word	0x08010bbc
 8001838:	37d1b717 	.word	0x37d1b717
 800183c:	2000075c 	.word	0x2000075c
 8001840:	40c90fdb 	.word	0x40c90fdb
 8001844:	3983126e 	.word	0x3983126e
 8001848:	08010be4 	.word	0x08010be4
 800184c:	3ba0d97c 	.word	0x3ba0d97c
 8001850:	43000000 	.word	0x43000000
 8001854:	41490fdb 	.word	0x41490fdb
 8001858:	47800000 	.word	0x47800000
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 8152 	beq.w	8001b0a <calibrate_encoder+0x566>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	edd3 7a02 	vldr	s15, [r3, #8]
 800186c:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8001858 <calibrate_encoder+0x2b4>
 8001870:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001874:	4ba7      	ldr	r3, [pc, #668]	; (8001b14 <calibrate_encoder+0x570>)
 8001876:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800187a:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8001b18 <calibrate_encoder+0x574>
 800187e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001882:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001886:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800188a:	ee17 3a90 	vmov	r3, s15
 800188e:	623b      	str	r3, [r7, #32]
			int error = encoder->raw - count_ref;// - encoder->raw;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	61fb      	str	r3, [r7, #28]
			error = error + ENC_CPR*(error<0);
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	13db      	asrs	r3, r3, #15
 800189e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	4413      	add	r3, r2
 80018a6:	61fb      	str	r3, [r7, #28]
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	330a      	adds	r3, #10
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	4413      	add	r3, r2
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80018be:	4610      	mov	r0, r2
 80018c0:	0fda      	lsrs	r2, r3, #31
 80018c2:	4413      	add	r3, r2
 80018c4:	105b      	asrs	r3, r3, #1
 80018c6:	4619      	mov	r1, r3
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	f100 030a 	add.w	r3, r0, #10
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	6059      	str	r1, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018d8:	461d      	mov	r5, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	330a      	adds	r3, #10
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	685c      	ldr	r4, [r3, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fe5b 	bl	80005a8 <__aeabi_f2d>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	e9cd 2300 	strd	r2, r3, [sp]
 80018fa:	4623      	mov	r3, r4
 80018fc:	6a3a      	ldr	r2, [r7, #32]
 80018fe:	4629      	mov	r1, r5
 8001900:	4886      	ldr	r0, [pc, #536]	; (8001b1c <calibrate_encoder+0x578>)
 8001902:	f00b fad9 	bl	800ceb8 <iprintf>
			cal->sample_count--;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800190a:	3b01      	subs	r3, #1
 800190c:	b29a      	uxth	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	849a      	strh	r2, [r3, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001918:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001b20 <calibrate_encoder+0x57c>
 800191c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		return;
 8001926:	e0f0      	b.n	8001b0a <calibrate_encoder+0x566>
    }

    reset_foc(controller);
 8001928:	68b8      	ldr	r0, [r7, #8]
 800192a:	f001 fa2f 	bl	8002d8c <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8001932:	2300      	movs	r3, #0
 8001934:	643b      	str	r3, [r7, #64]	; 0x40
 8001936:	e00b      	b.n	8001950 <calibrate_encoder+0x3ac>
		ezero_mean += cal->error_arr[i];
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800193c:	330a      	adds	r3, #10
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001946:	4413      	add	r3, r2
 8001948:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 800194a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800194c:	3301      	adds	r3, #1
 800194e:	643b      	str	r3, [r7, #64]	; 0x40
 8001950:	4b70      	ldr	r3, [pc, #448]	; (8001b14 <calibrate_encoder+0x570>)
 8001952:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001956:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800195a:	ee17 3a90 	vmov	r3, s15
 800195e:	01db      	lsls	r3, r3, #7
 8001960:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001962:	429a      	cmp	r2, r3
 8001964:	dbe8      	blt.n	8001938 <calibrate_encoder+0x394>
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 8001966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001968:	ee07 3a90 	vmov	s15, r3
 800196c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001970:	4b68      	ldr	r3, [pc, #416]	; (8001b14 <calibrate_encoder+0x570>)
 8001972:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001976:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001b24 <calibrate_encoder+0x580>
 800197a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800197e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001986:	ee17 2a90 	vmov	r2, s15
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	61da      	str	r2, [r3, #28]

	// Moving average to filter out cogging ripple

	int window = SAMPLES_PER_PPAIR;
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
	int lut_offset = (ENC_CPR-cal->error_arr[0])*N_LUT/ENC_CPR;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 800199a:	2b00      	cmp	r3, #0
 800199c:	da01      	bge.n	80019a2 <calibrate_encoder+0x3fe>
 800199e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80019a2:	125b      	asrs	r3, r3, #9
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i<N_LUT; i++){
 80019a6:	2300      	movs	r3, #0
 80019a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019aa:	e0a0      	b.n	8001aee <calibrate_encoder+0x54a>
			int moving_avg = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 80019b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b2:	0fda      	lsrs	r2, r3, #31
 80019b4:	4413      	add	r3, r2
 80019b6:	105b      	asrs	r3, r3, #1
 80019b8:	425b      	negs	r3, r3
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
 80019bc:	e068      	b.n	8001a90 <calibrate_encoder+0x4ec>
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 80019be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c8:	4b52      	ldr	r3, [pc, #328]	; (8001b14 <calibrate_encoder+0x570>)
 80019ca:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d2:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001b24 <calibrate_encoder+0x580>
 80019d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019da:	eddf 6a52 	vldr	s13, [pc, #328]	; 8001b24 <calibrate_encoder+0x580>
 80019de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019f4:	ee17 3a90 	vmov	r3, s15
 80019f8:	633b      	str	r3, [r7, #48]	; 0x30
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 80019fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	da13      	bge.n	8001a28 <calibrate_encoder+0x484>
 8001a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a02:	ee07 3a90 	vmov	s15, r3
 8001a06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a0a:	4b42      	ldr	r3, [pc, #264]	; (8001b14 <calibrate_encoder+0x570>)
 8001a0c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a10:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001b24 <calibrate_encoder+0x580>
 8001a14:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a20:	ee17 3a90 	vmov	r3, s15
 8001a24:	633b      	str	r3, [r7, #48]	; 0x30
 8001a26:	e027      	b.n	8001a78 <calibrate_encoder+0x4d4>
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a2a:	ee07 3a90 	vmov	s15, r3
 8001a2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a32:	4b38      	ldr	r3, [pc, #224]	; (8001b14 <calibrate_encoder+0x570>)
 8001a34:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a38:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001b24 <calibrate_encoder+0x580>
 8001a3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a44:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001a48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a50:	dd12      	ble.n	8001a78 <calibrate_encoder+0x4d4>
 8001a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a54:	ee07 3a90 	vmov	s15, r3
 8001a58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a5c:	4b2d      	ldr	r3, [pc, #180]	; (8001b14 <calibrate_encoder+0x570>)
 8001a5e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a62:	eddf 6a30 	vldr	s13, [pc, #192]	; 8001b24 <calibrate_encoder+0x580>
 8001a66:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a72:	ee17 3a90 	vmov	r3, s15
 8001a76:	633b      	str	r3, [r7, #48]	; 0x30
				moving_avg += cal->error_arr[index];
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a7c:	330a      	adds	r3, #10
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a86:	4413      	add	r3, r2
 8001a88:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8001a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a92:	0fda      	lsrs	r2, r3, #31
 8001a94:	4413      	add	r3, r2
 8001a96:	105b      	asrs	r3, r3, #1
 8001a98:	461a      	mov	r2, r3
 8001a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	db8e      	blt.n	80019be <calibrate_encoder+0x41a>
			}
			moving_avg = moving_avg/window;
 8001aa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa4:	fb92 f3f3 	sdiv	r3, r2, r3
 8001aa8:	63bb      	str	r3, [r7, #56]	; 0x38
			int lut_index = lut_offset + i;
 8001aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aae:	4413      	add	r3, r2
 8001ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8001ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab4:	2b7f      	cmp	r3, #127	; 0x7f
 8001ab6:	dd02      	ble.n	8001abe <calibrate_encoder+0x51a>
 8001ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aba:	3b80      	subs	r3, #128	; 0x80
 8001abc:	62fb      	str	r3, [r7, #44]	; 0x2c
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ac4:	1ad2      	subs	r2, r2, r3
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001ace:	330a      	adds	r3, #10
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	461a      	mov	r2, r3
 8001ae0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ae2:	4811      	ldr	r0, [pc, #68]	; (8001b28 <calibrate_encoder+0x584>)
 8001ae4:	f00b f9e8 	bl	800ceb8 <iprintf>
	for(int i = 0; i<N_LUT; i++){
 8001ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aea:	3301      	adds	r3, #1
 8001aec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001af0:	2b7f      	cmp	r3, #127	; 0x7f
 8001af2:	f77f af5b 	ble.w	80019ac <calibrate_encoder+0x408>

		}

	cal->started = 0;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	741a      	strb	r2, [r3, #16]
	cal->done_cal = 1;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001b04:	e002      	b.n	8001b0c <calibrate_encoder+0x568>
				return;
 8001b06:	bf00      	nop
 8001b08:	e000      	b.n	8001b0c <calibrate_encoder+0x568>
		return;
 8001b0a:	bf00      	nop
}
 8001b0c:	3748      	adds	r7, #72	; 0x48
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bdb0      	pop	{r4, r5, r7, pc}
 8001b12:	bf00      	nop
 8001b14:	2000075c 	.word	0x2000075c
 8001b18:	40c90fdb 	.word	0x40c90fdb
 8001b1c:	08010be4 	.word	0x08010be4
 8001b20:	3ba0d97c 	.word	0x3ba0d97c
 8001b24:	43000000 	.word	0x43000000
 8001b28:	08010bf4 	.word	0x08010bf4

08001b2c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <MX_CAN1_Init+0x64>)
 8001b32:	4a18      	ldr	r2, [pc, #96]	; (8001b94 <MX_CAN1_Init+0x68>)
 8001b34:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001b36:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <MX_CAN1_Init+0x64>)
 8001b38:	2203      	movs	r2, #3
 8001b3a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001b3c:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <MX_CAN1_Init+0x64>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b42:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <MX_CAN1_Init+0x64>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_CAN1_Init+0x64>)
 8001b4a:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8001b4e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <MX_CAN1_Init+0x64>)
 8001b52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b56:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001b58:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <MX_CAN1_Init+0x64>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <MX_CAN1_Init+0x64>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001b64:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <MX_CAN1_Init+0x64>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <MX_CAN1_Init+0x64>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001b70:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <MX_CAN1_Init+0x64>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <MX_CAN1_Init+0x64>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001b7c:	4804      	ldr	r0, [pc, #16]	; (8001b90 <MX_CAN1_Init+0x64>)
 8001b7e:	f006 f87d 	bl	8007c7c <HAL_CAN_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001b88:	f003 faea 	bl	8005160 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000400 	.word	0x20000400
 8001b94:	40006400 	.word	0x40006400

08001b98 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	; 0x28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a1d      	ldr	r2, [pc, #116]	; (8001c2c <HAL_CAN_MspInit+0x94>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d134      	bne.n	8001c24 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <HAL_CAN_MspInit+0x98>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	4a1b      	ldr	r2, [pc, #108]	; (8001c30 <HAL_CAN_MspInit+0x98>)
 8001bc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bca:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <HAL_CAN_MspInit+0x98>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <HAL_CAN_MspInit+0x98>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <HAL_CAN_MspInit+0x98>)
 8001be0:	f043 0302 	orr.w	r3, r3, #2
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_CAN_MspInit+0x98>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bf2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c00:	2303      	movs	r3, #3
 8001c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c04:	2309      	movs	r3, #9
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4809      	ldr	r0, [pc, #36]	; (8001c34 <HAL_CAN_MspInit+0x9c>)
 8001c10:	f007 f81e 	bl	8008c50 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2100      	movs	r1, #0
 8001c18:	2014      	movs	r0, #20
 8001c1a:	f006 ff50 	bl	8008abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001c1e:	2014      	movs	r0, #20
 8001c20:	f006 ff69 	bl	8008af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001c24:	bf00      	nop
 8001c26:	3728      	adds	r7, #40	; 0x28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40006400 	.word	0x40006400
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40020400 	.word	0x40020400

08001c38 <can_rx_init>:
  }
}

/* USER CODE BEGIN 1 */

void can_rx_init(CANRxMessage *msg){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	msg->filter.FilterFIFOAssignment=CAN_FILTER_FIFO0; 	// set fifo assignment
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	63da      	str	r2, [r3, #60]	; 0x3c
	msg->filter.FilterIdHigh=CAN_ID<<5;         // CAN ID
 8001c46:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <can_rx_init+0x58>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	015b      	lsls	r3, r3, #5
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	62da      	str	r2, [r3, #44]	; 0x2c
	msg->filter.FilterIdLow=0x0;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	631a      	str	r2, [r3, #48]	; 0x30
	msg->filter.FilterMaskIdHigh=0xFFF;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001c5e:	635a      	str	r2, [r3, #52]	; 0x34
	msg->filter.FilterMaskIdLow=0xFFFF;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c66:	639a      	str	r2, [r3, #56]	; 0x38
	msg->filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	645a      	str	r2, [r3, #68]	; 0x44
	msg->filter.FilterScale=CAN_FILTERSCALE_16BIT;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	649a      	str	r2, [r3, #72]	; 0x48
	msg->filter.FilterActivation=ENABLE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	64da      	str	r2, [r3, #76]	; 0x4c
	HAL_CAN_ConfigFilter(&CAN_H, &msg->filter);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	332c      	adds	r3, #44	; 0x2c
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4804      	ldr	r0, [pc, #16]	; (8001c94 <can_rx_init+0x5c>)
 8001c82:	f006 f8f7 	bl	8007e74 <HAL_CAN_ConfigFilter>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20009074 	.word	0x20009074
 8001c94:	20000400 	.word	0x20000400

08001c98 <can_tx_init>:

void can_tx_init(CANTxMessage *msg){
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
	msg->tx_header.DLC = 8; 			// message size of 8 byte
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2208      	movs	r2, #8
 8001ca4:	61da      	str	r2, [r3, #28]
	msg->tx_header.IDE=CAN_ID_STD; 		// set identifier to standard
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	615a      	str	r2, [r3, #20]
	msg->tx_header.RTR=CAN_RTR_DATA; 	// set data type to remote transmission request?
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	619a      	str	r2, [r3, #24]
	msg->tx_header.StdId = CAN_MASTER;  // recipient CAN ID
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <can_tx_init+0x30>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	60da      	str	r2, [r3, #12]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	20009074 	.word	0x20009074

08001ccc <pack_reply_default>:
/// 0: [position[15-8]]
/// 1: [position[7-0]]
/// 2: [velocity[11-4]]
/// 3: [velocity[3-0], current[11-8]]
/// 4: [current[7-0]]
void pack_reply_default(CANRxMessage rx_msg, CANTxMessage *tx_msg, float p, float v, float t, int version, int calibrate_finish, int state){
 8001ccc:	b084      	sub	sp, #16
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b088      	sub	sp, #32
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001cd8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8001cdc:	ed87 0a03 	vstr	s0, [r7, #12]
 8001ce0:	edc7 0a02 	vstr	s1, [r7, #8]
 8001ce4:	ed87 1a01 	vstr	s2, [r7, #4]
    int p_int = float_to_uint(p, P_REPLY_MIN, P_REPLY_MAX, 16);
 8001ce8:	2010      	movs	r0, #16
 8001cea:	ed9f 1a35 	vldr	s2, [pc, #212]	; 8001dc0 <pack_reply_default+0xf4>
 8001cee:	eddf 0a35 	vldr	s1, [pc, #212]	; 8001dc4 <pack_reply_default+0xf8>
 8001cf2:	ed97 0a03 	vldr	s0, [r7, #12]
 8001cf6:	f003 fb23 	bl	8005340 <float_to_uint>
 8001cfa:	61f8      	str	r0, [r7, #28]
    int v_int = float_to_uint(v, V_MIN, V_MAX, 16);
 8001cfc:	4b32      	ldr	r3, [pc, #200]	; (8001dc8 <pack_reply_default+0xfc>)
 8001cfe:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001d02:	4b31      	ldr	r3, [pc, #196]	; (8001dc8 <pack_reply_default+0xfc>)
 8001d04:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001d08:	2010      	movs	r0, #16
 8001d0a:	eeb0 1a47 	vmov.f32	s2, s14
 8001d0e:	eef0 0a67 	vmov.f32	s1, s15
 8001d12:	ed97 0a02 	vldr	s0, [r7, #8]
 8001d16:	f003 fb13 	bl	8005340 <float_to_uint>
 8001d1a:	61b8      	str	r0, [r7, #24]
//    int t_int = float_to_uint(t, -(I_MAX+SENSE_BUFFER)*KT*GR, (I_MAX+SENSE_BUFFER)*KT*GR, 16);
    int t_int = float_to_uint(t, T_MIN, T_MAX, 16);
 8001d1c:	4b2a      	ldr	r3, [pc, #168]	; (8001dc8 <pack_reply_default+0xfc>)
 8001d1e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001d22:	4b29      	ldr	r3, [pc, #164]	; (8001dc8 <pack_reply_default+0xfc>)
 8001d24:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8001d28:	2010      	movs	r0, #16
 8001d2a:	eeb0 1a47 	vmov.f32	s2, s14
 8001d2e:	eef0 0a67 	vmov.f32	s1, s15
 8001d32:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d36:	f003 fb03 	bl	8005340 <float_to_uint>
 8001d3a:	6178      	str	r0, [r7, #20]

    tx_msg->data[0] = p_int>>8;
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	121b      	asrs	r3, r3, #8
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d46:	705a      	strb	r2, [r3, #1]
    tx_msg->data[1] = p_int&0xFF;
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d50:	709a      	strb	r2, [r3, #2]
    tx_msg->data[2] = v_int>>8;
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	121b      	asrs	r3, r3, #8
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d5c:	70da      	strb	r2, [r3, #3]
    tx_msg->data[3] = v_int&0xFF;
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d66:	711a      	strb	r2, [r3, #4]
    tx_msg->data[4] = t_int>>8;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	121b      	asrs	r3, r3, #8
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d72:	715a      	strb	r2, [r3, #5]
    tx_msg->data[5] = t_int&0xFF;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d7c:	719a      	strb	r2, [r3, #6]
    tx_msg->data[6] = 0x0 + (calibrate_finish&0xF);
 8001d7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	f003 030f 	and.w	r3, r3, #15
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d8e:	71da      	strb	r2, [r3, #7]
    tx_msg->data[7] = (version<<4) + (state&0xF);
 8001d90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	011b      	lsls	r3, r3, #4
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	f003 030f 	and.w	r3, r3, #15
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	4413      	add	r3, r2
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dae:	721a      	strb	r2, [r3, #8]
}
 8001db0:	bf00      	nop
 8001db2:	3720      	adds	r7, #32
 8001db4:	46bd      	mov	sp, r7
 8001db6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001dba:	b004      	add	sp, #16
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	42bc7edd 	.word	0x42bc7edd
 8001dc4:	c2bc7edd 	.word	0xc2bc7edd
 8001dc8:	2000075c 	.word	0x2000075c

08001dcc <pack_reply_config>:

void pack_reply_config(CANRxMessage rx_msg, CANTxMessage *tx_msg, int version, int state){
 8001dcc:	b084      	sub	sp, #16
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b098      	sub	sp, #96	; 0x60
 8001dd2:	af12      	add	r7, sp, #72	; 0x48
 8001dd4:	f107 0c20 	add.w	ip, r7, #32
 8001dd8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int func_type = rx_msg.data[0];
 8001ddc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001de0:	613b      	str	r3, [r7, #16]
	int reg_type = rx_msg.data[1];
 8001de2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001de6:	60fb      	str	r3, [r7, #12]
	int target_addr = rx_msg.data[2];
 8001de8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001dec:	60bb      	str	r3, [r7, #8]
	union RegData reg_data;
	int config_state;

	if (func_type == 1){
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d114      	bne.n	8001e1e <pack_reply_config+0x52>
		if (state == MOTOR_MODE){
 8001df4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d102      	bne.n	8001e02 <pack_reply_config+0x36>
			config_state = CODE_READ_ONLY;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	e02d      	b.n	8001e5e <pack_reply_config+0x92>
		}
		else{
		config_state = unpack_config_cmd(rx_msg);
 8001e02:	4668      	mov	r0, sp
 8001e04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e08:	2248      	movs	r2, #72	; 0x48
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f00a fbd4 	bl	800c5b8 <memcpy>
 8001e10:	f107 0320 	add.w	r3, r7, #32
 8001e14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e16:	f000 f967 	bl	80020e8 <unpack_config_cmd>
 8001e1a:	6178      	str	r0, [r7, #20]
 8001e1c:	e01f      	b.n	8001e5e <pack_reply_config+0x92>
		}
	}
	else if ((reg_type == 0 && (target_addr < 0 || target_addr >= INT_REG_LENGTH)) ||
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d105      	bne.n	8001e30 <pack_reply_config+0x64>
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	db0b      	blt.n	8001e42 <pack_reply_config+0x76>
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2bff      	cmp	r3, #255	; 0xff
 8001e2e:	dc08      	bgt.n	8001e42 <pack_reply_config+0x76>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d108      	bne.n	8001e48 <pack_reply_config+0x7c>
			 (reg_type == 1 && (target_addr < 0 || target_addr >= FLOAT_REG_LENGTH))){
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	db02      	blt.n	8001e42 <pack_reply_config+0x76>
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b3f      	cmp	r3, #63	; 0x3f
 8001e40:	dd02      	ble.n	8001e48 <pack_reply_config+0x7c>
		config_state = CODE_INVALID_ADDR;
 8001e42:	2303      	movs	r3, #3
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	e00a      	b.n	8001e5e <pack_reply_config+0x92>
	}
	else if (reg_type != 0 && reg_type != 1){
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <pack_reply_config+0x8e>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d002      	beq.n	8001e5a <pack_reply_config+0x8e>
		config_state = CODE_INVALID_CMD;
 8001e54:	2304      	movs	r3, #4
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	e001      	b.n	8001e5e <pack_reply_config+0x92>
	}
	else{
		config_state = CODE_CONFIG_SUCCESS;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
	}

	if (config_state != CODE_INVALID_ADDR){
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d019      	beq.n	8001e98 <pack_reply_config+0xcc>
		if (reg_type == 0 ){
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d109      	bne.n	8001e7e <pack_reply_config+0xb2>
	        reg_data.intValue = __int_reg[target_addr];
 8001e6a:	4a22      	ldr	r2, [pc, #136]	; (8001ef4 <pack_reply_config+0x128>)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e72:	607b      	str	r3, [r7, #4]
	        memcpy(&(tx_msg->data[3]), &(reg_data.intValue), sizeof(int));
 8001e74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e76:	3304      	adds	r3, #4
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	e00c      	b.n	8001e98 <pack_reply_config+0xcc>
		}
		else if (reg_type == 1){
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d109      	bne.n	8001e98 <pack_reply_config+0xcc>
            reg_data.floatValue = __float_reg[target_addr];
 8001e84:	4a1c      	ldr	r2, [pc, #112]	; (8001ef8 <pack_reply_config+0x12c>)
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	607b      	str	r3, [r7, #4]
            memcpy(&(tx_msg->data[3]), &(reg_data.floatValue), sizeof(float));
 8001e90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e92:	3304      	adds	r3, #4
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	601a      	str	r2, [r3, #0]
		}
	}

    if (config_state == CODE_INVALID_ADDR || config_state == CODE_INVALID_CMD) {
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d002      	beq.n	8001ea4 <pack_reply_config+0xd8>
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d105      	bne.n	8001eb0 <pack_reply_config+0xe4>
        int zeroData = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	603b      	str	r3, [r7, #0]
        memcpy(&(tx_msg->data[3]), &zeroData, sizeof(int));
 8001ea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eaa:	3304      	adds	r3, #4
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	601a      	str	r2, [r3, #0]
    }

	tx_msg->data[0] = config_state;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eb6:	705a      	strb	r2, [r3, #1]
	tx_msg->data[1] = reg_type;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ebe:	709a      	strb	r2, [r3, #2]
	tx_msg->data[2] = target_addr;
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ec6:	70da      	strb	r2, [r3, #3]
	tx_msg->data[7] = (version<<4) + (state&0xF);
 8001ec8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	4413      	add	r3, r2
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ee2:	721a      	strb	r2, [r3, #8]
}
 8001ee4:	bf00      	nop
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001eee:	b004      	add	sp, #16
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	20009074 	.word	0x20009074
 8001ef8:	2000075c 	.word	0x2000075c

08001efc <pack_reply_hall_cal>:

void pack_reply_hall_cal(CANRxMessage rx_msg, CANTxMessage *tx_msg, int version, int state){
 8001efc:	b084      	sub	sp, #16
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b094      	sub	sp, #80	; 0x50
 8001f02:	af12      	add	r7, sp, #72	; 0x48
 8001f04:	f107 0c10 	add.w	ip, r7, #16
 8001f08:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int config_state;

	if (rx_msg.data[0] == 1){
 8001f0c:	7e3b      	ldrb	r3, [r7, #24]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d10d      	bne.n	8001f2e <pack_reply_hall_cal+0x32>
		config_state = unpack_hall_cal_cmd(rx_msg);
 8001f12:	4668      	mov	r0, sp
 8001f14:	f107 0320 	add.w	r3, r7, #32
 8001f18:	2248      	movs	r2, #72	; 0x48
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f00a fb4c 	bl	800c5b8 <memcpy>
 8001f20:	f107 0310 	add.w	r3, r7, #16
 8001f24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f26:	f000 f913 	bl	8002150 <unpack_hall_cal_cmd>
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	e001      	b.n	8001f32 <pack_reply_hall_cal+0x36>
	}
	else{
		config_state = CODE_CONFIG_SUCCESS;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	607b      	str	r3, [r7, #4]
	}

	tx_msg->data[0] = config_state;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f38:	705a      	strb	r2, [r3, #1]
	tx_msg->data[1] = 0;
 8001f3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	709a      	strb	r2, [r3, #2]
	tx_msg->data[2] = 0;
 8001f40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f42:	2200      	movs	r2, #0
 8001f44:	70da      	strb	r2, [r3, #3]

	memcpy((void*)&(tx_msg->data[3]), (void*)&__float_reg[ADDR_HALL_CAL_OFFSET], sizeof(float));
 8001f46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f48:	3304      	adds	r3, #4
 8001f4a:	4a0b      	ldr	r2, [pc, #44]	; (8001f78 <pack_reply_hall_cal+0x7c>)
 8001f4c:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8001f4e:	601a      	str	r2, [r3, #0]

	tx_msg->data[7] = (version<<4) + (state&0xF);
 8001f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	4413      	add	r3, r2
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f68:	721a      	strb	r2, [r3, #8]
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f74:	b004      	add	sp, #16
 8001f76:	4770      	bx	lr
 8001f78:	2000075c 	.word	0x2000075c

08001f7c <unpack_control_cmd>:
/// 3: [velocity[3-0], kp[11-8]]
/// 4: [kp[7-0]]
/// 5: [kd[11-4]]
/// 6: [kd[3-0], torque[11-8]]
/// 7: [torque[7-0]]
void unpack_control_cmd(CANRxMessage rx_msg, float *commands){// ControllerStruct * controller){
 8001f7c:	b084      	sub	sp, #16
 8001f7e:	b590      	push	{r4, r7, lr}
 8001f80:	b087      	sub	sp, #28
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001f88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        int p_int = (rx_msg.data[0]<<8)|rx_msg.data[1];
 8001f8c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001f90:	021b      	lsls	r3, r3, #8
 8001f92:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8001f96:	4313      	orrs	r3, r2
 8001f98:	617b      	str	r3, [r7, #20]
        int kp_int = (rx_msg.data[2]<<4)|(rx_msg.data[3]>>4);
 8001f9a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8001fa4:	0912      	lsrs	r2, r2, #4
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        int ki_int = ((rx_msg.data[3]&0xF)<<8)|rx_msg.data[4];
 8001fac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fb0:	021b      	lsls	r3, r3, #8
 8001fb2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001fb6:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
        int kd_int = (rx_msg.data[5]<<4)|(rx_msg.data[6]>>4);
 8001fbe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001fc8:	0912      	lsrs	r2, r2, #4
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	60bb      	str	r3, [r7, #8]
        int t_int = ((rx_msg.data[6]&0xF)<<8)|rx_msg.data[7];
 8001fd0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001fda:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	607b      	str	r3, [r7, #4]

        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001fe2:	4b3f      	ldr	r3, [pc, #252]	; (80020e0 <unpack_control_cmd+0x164>)
 8001fe4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001fe8:	4b3d      	ldr	r3, [pc, #244]	; (80020e0 <unpack_control_cmd+0x164>)
 8001fea:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8001fee:	2110      	movs	r1, #16
 8001ff0:	eef0 0a47 	vmov.f32	s1, s14
 8001ff4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff8:	6978      	ldr	r0, [r7, #20]
 8001ffa:	f003 f9d4 	bl	80053a6 <uint_to_float>
 8001ffe:	eef0 7a40 	vmov.f32	s15, s0
 8002002:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002006:	edc3 7a00 	vstr	s15, [r3]
        commands[1] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 800200a:	4b35      	ldr	r3, [pc, #212]	; (80020e0 <unpack_control_cmd+0x164>)
 800200c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002010:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002014:	1d1c      	adds	r4, r3, #4
 8002016:	210c      	movs	r1, #12
 8002018:	eef0 0a67 	vmov.f32	s1, s15
 800201c:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80020e4 <unpack_control_cmd+0x168>
 8002020:	6938      	ldr	r0, [r7, #16]
 8002022:	f003 f9c0 	bl	80053a6 <uint_to_float>
 8002026:	eef0 7a40 	vmov.f32	s15, s0
 800202a:	edc4 7a00 	vstr	s15, [r4]
        commands[2] = uint_to_float(ki_int, KI_MIN, KI_MAX, 12);
 800202e:	4b2c      	ldr	r3, [pc, #176]	; (80020e0 <unpack_control_cmd+0x164>)
 8002030:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002034:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002038:	f103 0408 	add.w	r4, r3, #8
 800203c:	210c      	movs	r1, #12
 800203e:	eef0 0a67 	vmov.f32	s1, s15
 8002042:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80020e4 <unpack_control_cmd+0x168>
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f003 f9ad 	bl	80053a6 <uint_to_float>
 800204c:	eef0 7a40 	vmov.f32	s15, s0
 8002050:	edc4 7a00 	vstr	s15, [r4]
        commands[3] = uint_to_float(kd_int, KD_MIN, KD_MAX, 12);
 8002054:	4b22      	ldr	r3, [pc, #136]	; (80020e0 <unpack_control_cmd+0x164>)
 8002056:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800205a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800205e:	f103 040c 	add.w	r4, r3, #12
 8002062:	210c      	movs	r1, #12
 8002064:	eef0 0a67 	vmov.f32	s1, s15
 8002068:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80020e4 <unpack_control_cmd+0x168>
 800206c:	68b8      	ldr	r0, [r7, #8]
 800206e:	f003 f99a 	bl	80053a6 <uint_to_float>
 8002072:	eef0 7a40 	vmov.f32	s15, s0
 8002076:	edc4 7a00 	vstr	s15, [r4]
        commands[4] = uint_to_float(t_int, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 800207a:	4b19      	ldr	r3, [pc, #100]	; (80020e0 <unpack_control_cmd+0x164>)
 800207c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002080:	eeb1 7a67 	vneg.f32	s14, s15
 8002084:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <unpack_control_cmd+0x164>)
 8002086:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800208a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800208e:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <unpack_control_cmd+0x164>)
 8002090:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002094:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002098:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <unpack_control_cmd+0x164>)
 800209a:	ed93 7a03 	vldr	s14, [r3, #12]
 800209e:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <unpack_control_cmd+0x164>)
 80020a0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80020a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020a8:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <unpack_control_cmd+0x164>)
 80020aa:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80020ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020b6:	f103 0410 	add.w	r4, r3, #16
 80020ba:	210c      	movs	r1, #12
 80020bc:	eef0 0a67 	vmov.f32	s1, s15
 80020c0:	eeb0 0a66 	vmov.f32	s0, s13
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f003 f96e 	bl	80053a6 <uint_to_float>
 80020ca:	eef0 7a40 	vmov.f32	s15, s0
 80020ce:	edc4 7a00 	vstr	s15, [r4]
    //printf("Received   ");
    //printf("%.3f  %.3f  %.3f  %.3f  %.3f   %.3f", controller->p_des, controller->v_des, controller->kp, controller->kd, controller->t_ff, controller->i_q_ref);
    //printf("\n\r");
}
 80020d2:	bf00      	nop
 80020d4:	371c      	adds	r7, #28
 80020d6:	46bd      	mov	sp, r7
 80020d8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80020dc:	b004      	add	sp, #16
 80020de:	4770      	bx	lr
 80020e0:	2000075c 	.word	0x2000075c
 80020e4:	00000000 	.word	0x00000000

080020e8 <unpack_config_cmd>:

int unpack_config_cmd(CANRxMessage rx_msg){
 80020e8:	b084      	sub	sp, #16
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b084      	sub	sp, #16
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	f107 0c18 	add.w	ip, r7, #24
 80020f4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int reg_type = rx_msg.data[1];
 80020f8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80020fc:	60bb      	str	r3, [r7, #8]
	int target_addr = rx_msg.data[2];
 80020fe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002102:	607b      	str	r3, [r7, #4]
	int config_state;

	union RegData new_data;

	if (reg_type == 0){
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d109      	bne.n	800211e <unpack_config_cmd+0x36>
 800210a:	f8d7 3023 	ldr.w	r3, [r7, #35]	; 0x23
		memcpy((void*)&(new_data.intValue), (void*)&(rx_msg.data[3]), sizeof(int));
 800210e:	603b      	str	r3, [r7, #0]
		config_state = int_reg_update_can(target_addr, new_data.intValue);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	4619      	mov	r1, r3
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f005 f86b 	bl	80071f0 <int_reg_update_can>
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	e010      	b.n	8002140 <unpack_config_cmd+0x58>
	}
	else if (reg_type == 1){
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d10b      	bne.n	800213c <unpack_config_cmd+0x54>
 8002124:	f8d7 3023 	ldr.w	r3, [r7, #35]	; 0x23
		memcpy((void*)&(new_data.floatValue), (void*)&(rx_msg.data[3]), sizeof(float));
 8002128:	603b      	str	r3, [r7, #0]
		config_state = float_reg_update_can(target_addr, new_data.floatValue);
 800212a:	edd7 7a00 	vldr	s15, [r7]
 800212e:	eeb0 0a67 	vmov.f32	s0, s15
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f004 ff9a 	bl	800706c <float_reg_update_can>
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	e001      	b.n	8002140 <unpack_config_cmd+0x58>
	}
	else{
		config_state = CODE_INVALID_CMD;
 800213c:	2304      	movs	r3, #4
 800213e:	60fb      	str	r3, [r7, #12]
	}

	return config_state;
 8002140:	68fb      	ldr	r3, [r7, #12]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800214c:	b004      	add	sp, #16
 800214e:	4770      	bx	lr

08002150 <unpack_hall_cal_cmd>:

int unpack_hall_cal_cmd(CANRxMessage rx_msg){
 8002150:	b084      	sub	sp, #16
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	f107 0c10 	add.w	ip, r7, #16
 800215c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float new_data = 0;
 8002160:	f04f 0300 	mov.w	r3, #0
 8002164:	603b      	str	r3, [r7, #0]
 8002166:	f8d7 3019 	ldr.w	r3, [r7, #25]
	int config_state;

	memcpy((void*)&new_data, (void*)&(rx_msg.data[1]), sizeof(float));
 800216a:	603b      	str	r3, [r7, #0]

	config_state = float_reg_update_can(ADDR_HALL_CAL_OFFSET, new_data);
 800216c:	edd7 7a00 	vldr	s15, [r7]
 8002170:	eeb0 0a67 	vmov.f32	s0, s15
 8002174:	201c      	movs	r0, #28
 8002176:	f004 ff79 	bl	800706c <float_reg_update_can>
 800217a:	6078      	str	r0, [r7, #4]

	return config_state;
 800217c:	687b      	ldr	r3, [r7, #4]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002188:	b004      	add	sp, #16
 800218a:	4770      	bx	lr

0800218c <drv_spi_write>:
#include "drv8323.h"
#include <stdio.h>
#include "usart.h"
#include "hw_config.h"

uint16_t drv_spi_write(DRVStruct * drv, uint16_t val){
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af02      	add	r7, sp, #8
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	807b      	strh	r3, [r7, #2]
	drv->spi_tx_word = val;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	887a      	ldrh	r2, [r7, #2]
 800219c:	801a      	strh	r2, [r3, #0]
	DRV_CS_LOW; 	// CS low
 800219e:	2200      	movs	r2, #0
 80021a0:	2110      	movs	r1, #16
 80021a2:	480f      	ldr	r0, [pc, #60]	; (80021e0 <drv_spi_write+0x54>)
 80021a4:	f006 ff00 	bl	8008fa8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	1c9a      	adds	r2, r3, #2
 80021ae:	2364      	movs	r3, #100	; 0x64
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	2301      	movs	r3, #1
 80021b4:	480b      	ldr	r0, [pc, #44]	; (80021e4 <drv_spi_write+0x58>)
 80021b6:	f007 fd54 	bl	8009c62 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 80021ba:	bf00      	nop
 80021bc:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <drv_spi_write+0x58>)
 80021be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d0f9      	beq.n	80021bc <drv_spi_write+0x30>
	DRV_CS_HIGH; 	// CS high
 80021c8:	2201      	movs	r2, #1
 80021ca:	2110      	movs	r1, #16
 80021cc:	4804      	ldr	r0, [pc, #16]	; (80021e0 <drv_spi_write+0x54>)
 80021ce:	f006 feeb 	bl	8008fa8 <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	885b      	ldrh	r3, [r3, #2]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40020000 	.word	0x40020000
 80021e4:	20009578 	.word	0x20009578

080021e8 <drv_read_register>:

uint16_t drv_read_FSR2(DRVStruct drv){
	return drv_spi_write(&drv, (1<<15)|FSR2);
}

uint16_t drv_read_register(DRVStruct drv, int reg){
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	f107 0308 	add.w	r3, r7, #8
 80021f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80021f6:	607a      	str	r2, [r7, #4]
	return drv_spi_write(&drv, (1<<15)|(reg<<11));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	02db      	lsls	r3, r3, #11
 80021fc:	b21b      	sxth	r3, r3
 80021fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002202:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002206:	b21b      	sxth	r3, r3
 8002208:	b29a      	uxth	r2, r3
 800220a:	f107 0308 	add.w	r3, r7, #8
 800220e:	4611      	mov	r1, r2
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff ffbb 	bl	800218c <drv_spi_write>
 8002216:	4603      	mov	r3, r0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <drv_write_register>:
void drv_write_register(DRVStruct drv, int reg, int val){
 8002220:	b590      	push	{r4, r7, lr}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	f107 0408 	add.w	r4, r7, #8
 800222a:	e884 0003 	stmia.w	r4, {r0, r1}
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
	drv_spi_write(&drv, (reg<<11)|val);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	02db      	lsls	r3, r3, #11
 8002236:	b21a      	sxth	r2, r3
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	b21b      	sxth	r3, r3
 800223c:	4313      	orrs	r3, r2
 800223e:	b21b      	sxth	r3, r3
 8002240:	b29a      	uxth	r2, r3
 8002242:	f107 0308 	add.w	r3, r7, #8
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff9f 	bl	800218c <drv_spi_write>
}
 800224e:	bf00      	nop
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	bd90      	pop	{r4, r7, pc}

08002256 <drv_write_DCR>:
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 8002256:	b590      	push	{r4, r7, lr}
 8002258:	b087      	sub	sp, #28
 800225a:	af00      	add	r7, sp, #0
 800225c:	f107 0408 	add.w	r4, r7, #8
 8002260:	e884 0003 	stmia.w	r4, {r0, r1}
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	603b      	str	r3, [r7, #0]
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	025b      	lsls	r3, r3, #9
 800226c:	b21b      	sxth	r3, r3
 800226e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002272:	b21a      	sxth	r2, r3
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	b21b      	sxth	r3, r3
 800227a:	4313      	orrs	r3, r2
 800227c:	b21a      	sxth	r2, r3
 800227e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002280:	01db      	lsls	r3, r3, #7
 8002282:	b21b      	sxth	r3, r3
 8002284:	4313      	orrs	r3, r2
 8002286:	b21a      	sxth	r2, r3
 8002288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228a:	015b      	lsls	r3, r3, #5
 800228c:	b21b      	sxth	r3, r3
 800228e:	4313      	orrs	r3, r2
 8002290:	b21a      	sxth	r2, r3
 8002292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	b21b      	sxth	r3, r3
 8002298:	4313      	orrs	r3, r2
 800229a:	b21a      	sxth	r2, r3
 800229c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	b21b      	sxth	r3, r3
 80022a2:	4313      	orrs	r3, r2
 80022a4:	b21a      	sxth	r2, r3
 80022a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	b21b      	sxth	r3, r3
 80022ac:	4313      	orrs	r3, r2
 80022ae:	b21a      	sxth	r2, r3
 80022b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	b21b      	sxth	r3, r3
 80022b6:	4313      	orrs	r3, r2
 80022b8:	b21a      	sxth	r2, r3
 80022ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022bc:	b21b      	sxth	r3, r3
 80022be:	4313      	orrs	r3, r2
 80022c0:	b21b      	sxth	r3, r3
 80022c2:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 80022c4:	8afa      	ldrh	r2, [r7, #22]
 80022c6:	f107 0308 	add.w	r3, r7, #8
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff5d 	bl	800218c <drv_spi_write>
}
 80022d2:	bf00      	nop
 80022d4:	371c      	adds	r7, #28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd90      	pop	{r4, r7, pc}

080022da <drv_write_OCPCR>:
}
void drv_write_LSR(DRVStruct drv, int CBC, int TDRIVE, int IDRIVEP_LS, int IDRIVEN_LS){
	uint16_t val = (LSR<<11) | (CBC<<10) | (TDRIVE<<8) | (IDRIVEP_LS<<4) | IDRIVEN_LS;
	drv_spi_write(&drv, val);
}
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 80022da:	b590      	push	{r4, r7, lr}
 80022dc:	b087      	sub	sp, #28
 80022de:	af00      	add	r7, sp, #0
 80022e0:	f107 0408 	add.w	r4, r7, #8
 80022e4:	e884 0003 	stmia.w	r4, {r0, r1}
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	603b      	str	r3, [r7, #0]
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	029b      	lsls	r3, r3, #10
 80022f0:	b21b      	sxth	r3, r3
 80022f2:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80022f6:	b21a      	sxth	r2, r3
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	021b      	lsls	r3, r3, #8
 80022fc:	b21b      	sxth	r3, r3
 80022fe:	4313      	orrs	r3, r2
 8002300:	b21a      	sxth	r2, r3
 8002302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002304:	019b      	lsls	r3, r3, #6
 8002306:	b21b      	sxth	r3, r3
 8002308:	4313      	orrs	r3, r2
 800230a:	b21a      	sxth	r2, r3
 800230c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	b21b      	sxth	r3, r3
 8002312:	4313      	orrs	r3, r2
 8002314:	b21a      	sxth	r2, r3
 8002316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002318:	b21b      	sxth	r3, r3
 800231a:	4313      	orrs	r3, r2
 800231c:	b21b      	sxth	r3, r3
 800231e:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8002320:	8afa      	ldrh	r2, [r7, #22]
 8002322:	f107 0308 	add.w	r3, r7, #8
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff ff2f 	bl	800218c <drv_spi_write>
}
 800232e:	bf00      	nop
 8002330:	371c      	adds	r7, #28
 8002332:	46bd      	mov	sp, r7
 8002334:	bd90      	pop	{r4, r7, pc}

08002336 <drv_write_CSACR>:
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 8002336:	b590      	push	{r4, r7, lr}
 8002338:	b087      	sub	sp, #28
 800233a:	af00      	add	r7, sp, #0
 800233c:	f107 0408 	add.w	r4, r7, #8
 8002340:	e884 0003 	stmia.w	r4, {r0, r1}
 8002344:	607a      	str	r2, [r7, #4]
 8002346:	603b      	str	r3, [r7, #0]
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	029b      	lsls	r3, r3, #10
 800234c:	b21b      	sxth	r3, r3
 800234e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002352:	b21a      	sxth	r2, r3
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	025b      	lsls	r3, r3, #9
 8002358:	b21b      	sxth	r3, r3
 800235a:	4313      	orrs	r3, r2
 800235c:	b21a      	sxth	r2, r3
 800235e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002360:	021b      	lsls	r3, r3, #8
 8002362:	b21b      	sxth	r3, r3
 8002364:	4313      	orrs	r3, r2
 8002366:	b21a      	sxth	r2, r3
 8002368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236a:	019b      	lsls	r3, r3, #6
 800236c:	b21b      	sxth	r3, r3
 800236e:	4313      	orrs	r3, r2
 8002370:	b21a      	sxth	r2, r3
 8002372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002374:	015b      	lsls	r3, r3, #5
 8002376:	b21b      	sxth	r3, r3
 8002378:	4313      	orrs	r3, r2
 800237a:	b21a      	sxth	r2, r3
 800237c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	b21b      	sxth	r3, r3
 8002382:	4313      	orrs	r3, r2
 8002384:	b21a      	sxth	r2, r3
 8002386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	b21b      	sxth	r3, r3
 800238c:	4313      	orrs	r3, r2
 800238e:	b21a      	sxth	r2, r3
 8002390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	b21b      	sxth	r3, r3
 8002396:	4313      	orrs	r3, r2
 8002398:	b21a      	sxth	r2, r3
 800239a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800239c:	b21b      	sxth	r3, r3
 800239e:	4313      	orrs	r3, r2
 80023a0:	b21b      	sxth	r3, r3
 80023a2:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 80023a4:	8afa      	ldrh	r2, [r7, #22]
 80023a6:	f107 0308 	add.w	r3, r7, #8
 80023aa:	4611      	mov	r1, r2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff feed 	bl	800218c <drv_spi_write>
}
 80023b2:	bf00      	nop
 80023b4:	371c      	adds	r7, #28
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd90      	pop	{r4, r7, pc}

080023ba <drv_enable_gd>:
void drv_enable_gd(DRVStruct drv){
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b084      	sub	sp, #16
 80023be:	af00      	add	r7, sp, #0
 80023c0:	463b      	mov	r3, r7
 80023c2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
 80023c6:	2202      	movs	r2, #2
 80023c8:	463b      	mov	r3, r7
 80023ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80023ce:	f7ff ff0b 	bl	80021e8 <drv_read_register>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f023 0304 	bic.w	r3, r3, #4
 80023d8:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 80023da:	89fb      	ldrh	r3, [r7, #14]
 80023dc:	2202      	movs	r2, #2
 80023de:	4639      	mov	r1, r7
 80023e0:	c903      	ldmia	r1, {r0, r1}
 80023e2:	f7ff ff1d 	bl	8002220 <drv_write_register>
}
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <drv_disable_gd>:
void drv_disable_gd(DRVStruct drv){
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	463b      	mov	r3, r7
 80023f6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) | (0x1<<2);
 80023fa:	2202      	movs	r2, #2
 80023fc:	463b      	mov	r3, r7
 80023fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002402:	f7ff fef1 	bl	80021e8 <drv_read_register>
 8002406:	4603      	mov	r3, r0
 8002408:	f043 0304 	orr.w	r3, r3, #4
 800240c:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 800240e:	89fb      	ldrh	r3, [r7, #14]
 8002410:	2202      	movs	r2, #2
 8002412:	4639      	mov	r1, r7
 8002414:	c903      	ldmia	r1, {r0, r1}
 8002416:	f7ff ff03 	bl	8002220 <drv_write_register>
}
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <drv_calibrate>:
void drv_calibrate(DRVStruct drv){
 8002422:	b580      	push	{r7, lr}
 8002424:	b084      	sub	sp, #16
 8002426:	af00      	add	r7, sp, #0
 8002428:	463b      	mov	r3, r7
 800242a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (0x1<<4) + (0x1<<3) + (0x1<<2);
 800242e:	231c      	movs	r3, #28
 8002430:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, CSACR, val);
 8002432:	89fb      	ldrh	r3, [r7, #14]
 8002434:	2206      	movs	r2, #6
 8002436:	4639      	mov	r1, r7
 8002438:	c903      	ldmia	r1, {r0, r1}
 800243a:	f7ff fef1 	bl	8002220 <drv_write_register>
}
 800243e:	bf00      	nop
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <flash_writer_init>:
#include "flash_writer.h"




void flash_writer_init(FlashWriter *fw, uint32_t sector) {
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
	if(sector>7) sector = 7;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b07      	cmp	r3, #7
 8002456:	d901      	bls.n	800245c <flash_writer_init+0x14>
 8002458:	2307      	movs	r3, #7
 800245a:	603b      	str	r3, [r7, #0]
	fw->sector = sector;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	609a      	str	r2, [r3, #8]
	fw->base = __SECTOR_ADDRS[sector];
 8002462:	4a07      	ldr	r2, [pc, #28]	; (8002480 <flash_writer_init+0x38>)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	605a      	str	r2, [r3, #4]
	fw->ready = false;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	20000000 	.word	0x20000000

08002484 <flash_writer_open>:
bool flash_writer_ready(FlashWriter fw) {
    return fw.ready;
}

void flash_writer_open(FlashWriter * fw) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
    FLASH_Unlock();
 800248c:	f003 fbcc 	bl	8005c28 <FLASH_Unlock>
    FLASH_ClearFlag( FLASH_FLAG_EOP |  FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 8002490:	20f1      	movs	r0, #241	; 0xf1
 8002492:	f003 fc85 	bl	8005da0 <FLASH_ClearFlag>
    FLASH_EraseSector(__SECTORS[fw->sector], VoltageRange_3);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	4a07      	ldr	r2, [pc, #28]	; (80024b8 <flash_writer_open+0x34>)
 800249c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a0:	2102      	movs	r1, #2
 80024a2:	4618      	mov	r0, r3
 80024a4:	f003 fbe8 	bl	8005c78 <FLASH_EraseSector>
    fw->ready = true;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	701a      	strb	r2, [r3, #0]
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000020 	.word	0x20000020

080024bc <flash_writer_write_int>:

void flash_writer_write_int(FlashWriter fw, uint32_t index, int x) {
 80024bc:	b590      	push	{r4, r7, lr}
 80024be:	b087      	sub	sp, #28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	1d3c      	adds	r4, r7, #4
 80024c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80024c8:	603b      	str	r3, [r7, #0]
    union UN {int a; uint32_t b;};
    union UN un;
    un.a = x;
 80024ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024cc:	617b      	str	r3, [r7, #20]
    FLASH_ProgramWord(fw.base + 4 * index, un.b);
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4611      	mov	r1, r2
 80024da:	4618      	mov	r0, r3
 80024dc:	f003 fc2c 	bl	8005d38 <FLASH_ProgramWord>
}
 80024e0:	bf00      	nop
 80024e2:	371c      	adds	r7, #28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd90      	pop	{r4, r7, pc}

080024e8 <flash_writer_write_float>:

void flash_writer_write_uint(FlashWriter fw, uint32_t index, unsigned int x) {
    FLASH_ProgramWord(fw.base + 4 * index, x);
}

void flash_writer_write_float(FlashWriter fw, uint32_t index, float x) {
 80024e8:	b590      	push	{r4, r7, lr}
 80024ea:	b089      	sub	sp, #36	; 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	f107 040c 	add.w	r4, r7, #12
 80024f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	ed87 0a01 	vstr	s0, [r7, #4]
    union UN {float a; uint32_t b;};
    union UN un;
    un.a = x;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	61fb      	str	r3, [r7, #28]
    FLASH_ProgramWord(fw.base + 4 * index, un.b);
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	69fa      	ldr	r2, [r7, #28]
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f003 fc13 	bl	8005d38 <FLASH_ProgramWord>
}
 8002512:	bf00      	nop
 8002514:	3724      	adds	r7, #36	; 0x24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd90      	pop	{r4, r7, pc}

0800251a <flash_writer_close>:

void flash_writer_close(FlashWriter * fw) {
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
    FLASH_Lock();
 8002522:	f003 fb99 	bl	8005c58 <FLASH_Lock>
    fw->ready = false;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
}
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <flash_read_int>:

int flash_read_int(FlashWriter fw, uint32_t index) {
 8002534:	b490      	push	{r4, r7}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	1d3c      	adds	r4, r7, #4
 800253c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002540:	603b      	str	r3, [r7, #0]
    return *(int*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4a05      	ldr	r2, [pc, #20]	; (800255c <flash_read_int+0x28>)
 8002546:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	681b      	ldr	r3, [r3, #0]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bc90      	pop	{r4, r7}
 800255a:	4770      	bx	lr
 800255c:	20000000 	.word	0x20000000

08002560 <flash_read_float>:

uint32_t flash_read_uint(FlashWriter fw, uint32_t index) {
    return *(uint32_t*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
}

float flash_read_float(FlashWriter fw, uint32_t index) {
 8002560:	b490      	push	{r4, r7}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	1d3c      	adds	r4, r7, #4
 8002568:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800256c:	603b      	str	r3, [r7, #0]
    return *(float*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4a07      	ldr	r2, [pc, #28]	; (8002590 <flash_read_float+0x30>)
 8002572:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	ee07 3a90 	vmov	s15, r3
}
 8002582:	eeb0 0a67 	vmov.f32	s0, s15
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bc90      	pop	{r4, r7}
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20000000 	.word	0x20000000

08002594 <set_dtc>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void set_dtc(ControllerStruct *controller){
 8002594:	b480      	push	{r7}
 8002596:	b087      	sub	sp, #28
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a0:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a6:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025ac:	60fb      	str	r3, [r7, #12]

	if(INVERT_DTC){
		dtc_u = 1.0f - controller->dtc_u;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80025b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025bc:	edc7 7a05 	vstr	s15, [r7, #20]
		dtc_v = 1.0f - controller->dtc_v;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80025c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ce:	edc7 7a04 	vstr	s15, [r7, #16]
		dtc_w = 1.0f - controller->dtc_w;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80025d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e0:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 80025e4:	4b3b      	ldr	r3, [pc, #236]	; (80026d4 <set_dtc+0x140>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d136      	bne.n	800265a <set_dtc+0xc6>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 80025ec:	4b3a      	ldr	r3, [pc, #232]	; (80026d8 <set_dtc+0x144>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80025fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002602:	4b35      	ldr	r3, [pc, #212]	; (80026d8 <set_dtc+0x144>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800260a:	ee17 2a90 	vmov	r2, s15
 800260e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 8002610:	4b31      	ldr	r3, [pc, #196]	; (80026d8 <set_dtc+0x144>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002616:	ee07 3a90 	vmov	s15, r3
 800261a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800261e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002626:	4b2c      	ldr	r3, [pc, #176]	; (80026d8 <set_dtc+0x144>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800262e:	ee17 2a90 	vmov	r2, s15
 8002632:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 8002634:	4b28      	ldr	r3, [pc, #160]	; (80026d8 <set_dtc+0x144>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	ee07 3a90 	vmov	s15, r3
 800263e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002642:	edd7 7a03 	vldr	s15, [r7, #12]
 8002646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800264a:	4b23      	ldr	r3, [pc, #140]	; (80026d8 <set_dtc+0x144>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002652:	ee17 2a90 	vmov	r2, s15
 8002656:	63da      	str	r2, [r3, #60]	; 0x3c
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
	}
}
 8002658:	e035      	b.n	80026c6 <set_dtc+0x132>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
 800265a:	4b1f      	ldr	r3, [pc, #124]	; (80026d8 <set_dtc+0x144>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	ee07 3a90 	vmov	s15, r3
 8002664:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002668:	edd7 7a05 	vldr	s15, [r7, #20]
 800266c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002670:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <set_dtc+0x144>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002678:	ee17 2a90 	vmov	r2, s15
 800267c:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
 800267e:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <set_dtc+0x144>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002684:	ee07 3a90 	vmov	s15, r3
 8002688:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800268c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002694:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <set_dtc+0x144>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800269c:	ee17 2a90 	vmov	r2, s15
 80026a0:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 80026a2:	4b0d      	ldr	r3, [pc, #52]	; (80026d8 <set_dtc+0x144>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	ee07 3a90 	vmov	s15, r3
 80026ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80026b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b8:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <set_dtc+0x144>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026c0:	ee17 2a90 	vmov	r2, s15
 80026c4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80026c6:	bf00      	nop
 80026c8:	371c      	adds	r7, #28
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20009074 	.word	0x20009074
 80026d8:	200095d0 	.word	0x200095d0

080026dc <analog_sample>:

void analog_sample (ControllerStruct *controller){
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
	/* Sampe ADCs */
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 80026e4:	4b38      	ldr	r3, [pc, #224]	; (80027c8 <analog_sample+0xec>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10e      	bne.n	800270a <analog_sample+0x2e>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 80026ec:	4837      	ldr	r0, [pc, #220]	; (80027cc <analog_sample+0xf0>)
 80026ee:	f005 f844 	bl	800777a <HAL_ADC_GetValue>
 80026f2:	4603      	mov	r3, r0
 80026f4:	461a      	mov	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 80026fa:	4835      	ldr	r0, [pc, #212]	; (80027d0 <analog_sample+0xf4>)
 80026fc:	f005 f83d 	bl	800777a <HAL_ADC_GetValue>
 8002700:	4603      	mov	r3, r0
 8002702:	461a      	mov	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	e00d      	b.n	8002726 <analog_sample+0x4a>
		//adc_ch_ic = ADC_CH_IC;
	}
	else{
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 800270a:	4831      	ldr	r0, [pc, #196]	; (80027d0 <analog_sample+0xf4>)
 800270c:	f005 f835 	bl	800777a <HAL_ADC_GetValue>
 8002710:	4603      	mov	r3, r0
 8002712:	461a      	mov	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 8002718:	482c      	ldr	r0, [pc, #176]	; (80027cc <analog_sample+0xf0>)
 800271a:	f005 f82e 	bl	800777a <HAL_ADC_GetValue>
 800271e:	4603      	mov	r3, r0
 8002720:	461a      	mov	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	609a      	str	r2, [r3, #8]
		//adc_ch_ic = ADC_CH_IB;
	}


	HAL_ADC_Start(&ADC_CH_MAIN);
 8002726:	4829      	ldr	r0, [pc, #164]	; (80027cc <analog_sample+0xf0>)
 8002728:	f004 feca 	bl	80074c0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&ADC_CH_MAIN, HAL_MAX_DELAY);
 800272c:	f04f 31ff 	mov.w	r1, #4294967295
 8002730:	4826      	ldr	r0, [pc, #152]	; (80027cc <analog_sample+0xf0>)
 8002732:	f004 ff97 	bl	8007664 <HAL_ADC_PollForConversion>

	controller->adc_vbus_raw = HAL_ADC_GetValue(&ADC_CH_VBUS);
 8002736:	4827      	ldr	r0, [pc, #156]	; (80027d4 <analog_sample+0xf8>)
 8002738:	f005 f81f 	bl	800777a <HAL_ADC_GetValue>
 800273c:	4603      	mov	r3, r0
 800273e:	461a      	mov	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	611a      	str	r2, [r3, #16]
	controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	ee07 3a90 	vmov	s15, r3
 800274c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002750:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80027d8 <analog_sample+0xfc>
 8002754:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	edc3 7a08 	vstr	s15, [r3, #32]

    controller->i_a = controller->i_scale*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	ee07 3a90 	vmov	s15, r3
 8002774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	edc3 7a05 	vstr	s15, [r3, #20]
    controller->i_b = controller->i_scale*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	ee07 3a90 	vmov	s15, r3
 8002798:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800279c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	edc3 7a06 	vstr	s15, [r3, #24]
    controller->i_c = -controller->i_a - controller->i_b;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	edd3 7a05 	vldr	s15, [r3, #20]
 80027ac:	eeb1 7a67 	vneg.f32	s14, s15
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	edd3 7a06 	vldr	s15, [r3, #24]
 80027b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	edc3 7a07 	vstr	s15, [r3, #28]

}
 80027c0:	bf00      	nop
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20009074 	.word	0x20009074
 80027cc:	20000370 	.word	0x20000370
 80027d0:	20000328 	.word	0x20000328
 80027d4:	200003b8 	.word	0x200003b8
 80027d8:	3c533318 	.word	0x3c533318

080027dc <abc>:

void abc( float theta, float d, float q, float *a, float *b, float *c){
 80027dc:	b580      	push	{r7, lr}
 80027de:	b088      	sub	sp, #32
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	ed87 0a05 	vstr	s0, [r7, #20]
 80027e6:	edc7 0a04 	vstr	s1, [r7, #16]
 80027ea:	ed87 1a03 	vstr	s2, [r7, #12]
 80027ee:	60b8      	str	r0, [r7, #8]
 80027f0:	6079      	str	r1, [r7, #4]
 80027f2:	603a      	str	r2, [r7, #0]
    /* Inverse DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1 */

    float cf = cos_lut(theta);
 80027f4:	ed97 0a05 	vldr	s0, [r7, #20]
 80027f8:	f002 fe42 	bl	8005480 <cos_lut>
 80027fc:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002800:	ed97 0a05 	vldr	s0, [r7, #20]
 8002804:	f002 fe02 	bl	800540c <sin_lut>
 8002808:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 800280c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002810:	edd7 7a04 	vldr	s15, [r7, #16]
 8002814:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002818:	edd7 6a06 	vldr	s13, [r7, #24]
 800281c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002820:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002824:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 800282e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002832:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80028dc <abc+0x100>
 8002836:	ee27 7a87 	vmul.f32	s14, s15, s14
 800283a:	edd7 7a07 	vldr	s15, [r7, #28]
 800283e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002842:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002846:	ee37 7a67 	vsub.f32	s14, s14, s15
 800284a:	edd7 7a04 	vldr	s15, [r7, #16]
 800284e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002852:	edd7 7a07 	vldr	s15, [r7, #28]
 8002856:	eddf 6a22 	vldr	s13, [pc, #136]	; 80028e0 <abc+0x104>
 800285a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800285e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002862:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002866:	ee67 7a86 	vmul.f32	s15, s15, s12
 800286a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800286e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002872:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002876:	ee77 7a67 	vsub.f32	s15, s14, s15
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	edc3 7a00 	vstr	s15, [r3]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 8002880:	edd7 7a06 	vldr	s15, [r7, #24]
 8002884:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80028e0 <abc+0x104>
 8002888:	ee27 7a87 	vmul.f32	s14, s15, s14
 800288c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002890:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002894:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002898:	ee37 7a67 	vsub.f32	s14, s14, s15
 800289c:	edd7 7a04 	vldr	s15, [r7, #16]
 80028a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80028a8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80028dc <abc+0x100>
 80028ac:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80028b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80028b4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80028b8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80028bc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80028c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80028c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	edc3 7a00 	vstr	s15, [r3]
    }
 80028d2:	bf00      	nop
 80028d4:	3720      	adds	r7, #32
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	3f5db3d7 	.word	0x3f5db3d7
 80028e0:	bf5db3d7 	.word	0xbf5db3d7

080028e4 <dq0>:


void dq0(float theta, float a, float b, float c, float *d, float *q){
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	ed87 0a05 	vstr	s0, [r7, #20]
 80028ee:	edc7 0a04 	vstr	s1, [r7, #16]
 80028f2:	ed87 1a03 	vstr	s2, [r7, #12]
 80028f6:	edc7 1a02 	vstr	s3, [r7, #8]
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
    /* DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1*/

    float cf = cos_lut(theta);
 80028fe:	ed97 0a05 	vldr	s0, [r7, #20]
 8002902:	f002 fdbd 	bl	8005480 <cos_lut>
 8002906:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 800290a:	ed97 0a05 	vldr	s0, [r7, #20]
 800290e:	f002 fd7d 	bl	800540c <sin_lut>
 8002912:	ed87 0a06 	vstr	s0, [r7, #24]

    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002916:	ed97 7a07 	vldr	s14, [r7, #28]
 800291a:	edd7 7a04 	vldr	s15, [r7, #16]
 800291e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002922:	edd7 7a06 	vldr	s15, [r7, #24]
 8002926:	eddf 6a34 	vldr	s13, [pc, #208]	; 80029f8 <dq0+0x114>
 800292a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800292e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002932:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002936:	ee67 7a86 	vmul.f32	s15, s15, s12
 800293a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800293e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002942:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002946:	ee37 7a27 	vadd.f32	s14, s14, s15
 800294a:	edd7 7a06 	vldr	s15, [r7, #24]
 800294e:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80029fc <dq0+0x118>
 8002952:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002956:	edd7 7a07 	vldr	s15, [r7, #28]
 800295a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800295e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002962:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002966:	edd7 7a02 	vldr	s15, [r7, #8]
 800296a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800296e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002972:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002a00 <dq0+0x11c>
 8002976:	ee67 7a87 	vmul.f32	s15, s15, s14
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002980:	edd7 7a06 	vldr	s15, [r7, #24]
 8002984:	eeb1 7a67 	vneg.f32	s14, s15
 8002988:	edd7 7a04 	vldr	s15, [r7, #16]
 800298c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002990:	edd7 7a07 	vldr	s15, [r7, #28]
 8002994:	eddf 6a19 	vldr	s13, [pc, #100]	; 80029fc <dq0+0x118>
 8002998:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800299c:	edd7 7a06 	vldr	s15, [r7, #24]
 80029a0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80029a4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80029a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80029ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80029b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80029bc:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80029f8 <dq0+0x114>
 80029c0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80029c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80029c8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80029cc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80029d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80029d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80029d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029e0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002a00 <dq0+0x11c>
 80029e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	edc3 7a00 	vstr	s15, [r3]

    }
 80029ee:	bf00      	nop
 80029f0:	3720      	adds	r7, #32
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	3f5db3d7 	.word	0x3f5db3d7
 80029fc:	bf5db3d7 	.word	0xbf5db3d7
 8002a00:	3f2aaaab 	.word	0x3f2aaaab

08002a04 <svm>:

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 8002a04:	b580      	push	{r7, lr}
 8002a06:	ed2d 8b02 	vpush	{d8}
 8002a0a:	b08a      	sub	sp, #40	; 0x28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	ed87 0a07 	vstr	s0, [r7, #28]
 8002a12:	edc7 0a06 	vstr	s1, [r7, #24]
 8002a16:	ed87 1a05 	vstr	s2, [r7, #20]
 8002a1a:	edc7 1a04 	vstr	s3, [r7, #16]
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 8002a24:	ed97 1a04 	vldr	s2, [r7, #16]
 8002a28:	edd7 0a05 	vldr	s1, [r7, #20]
 8002a2c:	ed97 0a06 	vldr	s0, [r7, #24]
 8002a30:	f002 fc09 	bl	8005246 <fminf3>
 8002a34:	eeb0 8a40 	vmov.f32	s16, s0
 8002a38:	ed97 1a04 	vldr	s2, [r7, #16]
 8002a3c:	edd7 0a05 	vldr	s1, [r7, #20]
 8002a40:	ed97 0a06 	vldr	s0, [r7, #24]
 8002a44:	f002 fbcb 	bl	80051de <fmaxf3>
 8002a48:	eef0 7a40 	vmov.f32	s15, s0
 8002a4c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002a50:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a58:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);
 8002a5c:	4b41      	ldr	r3, [pc, #260]	; (8002b64 <svm+0x160>)
 8002a5e:	623b      	str	r3, [r7, #32]

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002a60:	ed97 7a06 	vldr	s14, [r7, #24]
 8002a64:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a6c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a74:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002b68 <svm+0x164>
 8002a78:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002a7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a84:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a8c:	eddf 0a37 	vldr	s1, [pc, #220]	; 8002b6c <svm+0x168>
 8002a90:	eeb0 0a67 	vmov.f32	s0, s15
 8002a94:	f002 fb6b 	bl	800516e <fast_fmaxf>
 8002a98:	eef0 7a40 	vmov.f32	s15, s0
 8002a9c:	eddf 0a34 	vldr	s1, [pc, #208]	; 8002b70 <svm+0x16c>
 8002aa0:	eeb0 0a67 	vmov.f32	s0, s15
 8002aa4:	f002 fb7f 	bl	80051a6 <fast_fminf>
 8002aa8:	eef0 7a40 	vmov.f32	s15, s0
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002ab2:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ab6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002abe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ac2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ac6:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002b68 <svm+0x164>
 8002aca:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002ace:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ad6:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ade:	eddf 0a23 	vldr	s1, [pc, #140]	; 8002b6c <svm+0x168>
 8002ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ae6:	f002 fb42 	bl	800516e <fast_fmaxf>
 8002aea:	eef0 7a40 	vmov.f32	s15, s0
 8002aee:	eddf 0a20 	vldr	s1, [pc, #128]	; 8002b70 <svm+0x16c>
 8002af2:	eeb0 0a67 	vmov.f32	s0, s15
 8002af6:	f002 fb56 	bl	80051a6 <fast_fminf>
 8002afa:	eef0 7a40 	vmov.f32	s15, s0
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002b04:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b08:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b10:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b18:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002b68 <svm+0x164>
 8002b1c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002b20:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b28:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b30:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8002b6c <svm+0x168>
 8002b34:	eeb0 0a67 	vmov.f32	s0, s15
 8002b38:	f002 fb19 	bl	800516e <fast_fmaxf>
 8002b3c:	eef0 7a40 	vmov.f32	s15, s0
 8002b40:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002b70 <svm+0x16c>
 8002b44:	eeb0 0a67 	vmov.f32	s0, s15
 8002b48:	f002 fb2d 	bl	80051a6 <fast_fminf>
 8002b4c:	eef0 7a40 	vmov.f32	s15, s0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	edc3 7a00 	vstr	s15, [r3]

    }
 8002b56:	bf00      	nop
 8002b58:	3728      	adds	r7, #40	; 0x28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	ecbd 8b02 	vpop	{d8}
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	3ef0a3d7 	.word	0x3ef0a3d7
 8002b68:	3f933333 	.word	0x3f933333
 8002b6c:	00000000 	.word	0x00000000
 8002b70:	3f70a3d7 	.word	0x3f70a3d7

08002b74 <zero_current>:

void zero_current(ControllerStruct *controller){
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
    int adc_b_offset = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	613b      	str	r3, [r7, #16]
    int n = 1000;
 8002b84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b88:	60bb      	str	r3, [r7, #8]
    controller->dtc_u = 0.f;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	65da      	str	r2, [r3, #92]	; 0x5c
    controller->dtc_v = 0.f;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	661a      	str	r2, [r3, #96]	; 0x60
    controller->dtc_w = 0.f;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	665a      	str	r2, [r3, #100]	; 0x64
    set_dtc(controller);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7ff fcf6 	bl	8002594 <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	e00f      	b.n	8002bce <zero_current+0x5a>
    	analog_sample(controller);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff fd94 	bl	80026dc <analog_sample>
    	adc_a_offset +=  controller->adc_a_raw;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	4413      	add	r3, r2
 8002bbc:	617b      	str	r3, [r7, #20]
    	adc_b_offset += controller->adc_b_raw;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
    for (int i = 0; i<n; i++){               // Average n samples
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	dbeb      	blt.n	8002bae <zero_current+0x3a>
     }
    controller->adc_a_offset = adc_a_offset/n;
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	fb92 f2f3 	sdiv	r2, r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    controller->adc_b_offset = adc_b_offset/n;
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	fb92 f2f3 	sdiv	r2, r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

    }
 8002bf2:	bf00      	nop
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a53      	ldr	r2, [pc, #332]	; (8002d54 <init_controller_params+0x158>)
 8002c08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    controller->ki_q = KI_Q;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a51      	ldr	r2, [pc, #324]	; (8002d54 <init_controller_params+0x158>)
 8002c10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    controller->k_d = K_SCALE*I_BW;
 8002c14:	4b50      	ldr	r3, [pc, #320]	; (8002d58 <init_controller_params+0x15c>)
 8002c16:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c1a:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8002d5c <init_controller_params+0x160>
 8002c1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
    controller->k_q = K_SCALE*I_BW;
 8002c28:	4b4b      	ldr	r3, [pc, #300]	; (8002d58 <init_controller_params+0x15c>)
 8002c2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c2e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002d5c <init_controller_params+0x160>
 8002c32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8002c3c:	4b46      	ldr	r3, [pc, #280]	; (8002d58 <init_controller_params+0x15c>)
 8002c3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c42:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002d60 <init_controller_params+0x164>
 8002c46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c4a:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002d64 <init_controller_params+0x168>
 8002c4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
    controller->ki_fw = .1f*controller->ki_d;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002c76:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002d68 <init_controller_params+0x16c>
 8002c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
    controller->phase_order = PHASE_ORDER;
 8002c84:	4b39      	ldr	r3, [pc, #228]	; (8002d6c <init_controller_params+0x170>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    controller->flux_linkage = KT/(1.5f*PPAIRS);
 8002c8e:	4b32      	ldr	r3, [pc, #200]	; (8002d58 <init_controller_params+0x15c>)
 8002c90:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002c94:	4b30      	ldr	r3, [pc, #192]	; (8002d58 <init_controller_params+0x15c>)
 8002c96:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002c9a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002c9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
    if(I_MAX <= 40.0f){controller->i_scale = I_SCALE;}
 8002cac:	4b2a      	ldr	r3, [pc, #168]	; (8002d58 <init_controller_params+0x15c>)
 8002cae:	edd3 7a03 	vldr	s15, [r3, #12]
 8002cb2:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002d70 <init_controller_params+0x174>
 8002cb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cbe:	d803      	bhi.n	8002cc8 <init_controller_params+0xcc>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a2c      	ldr	r2, [pc, #176]	; (8002d74 <init_controller_params+0x178>)
 8002cc4:	675a      	str	r2, [r3, #116]	; 0x74
 8002cc6:	e002      	b.n	8002cce <init_controller_params+0xd2>
    else{controller->i_scale = 2.0f*I_SCALE;}
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a2b      	ldr	r2, [pc, #172]	; (8002d78 <init_controller_params+0x17c>)
 8002ccc:	675a      	str	r2, [r3, #116]	; 0x74
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	e036      	b.n	8002d42 <init_controller_params+0x146>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	ee07 3a90 	vmov	s15, r3
 8002cda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cde:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002d7c <init_controller_params+0x180>
 8002ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ce6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002d80 <init_controller_params+0x184>
 8002cea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002cee:	ee16 0a90 	vmov	r0, s13
 8002cf2:	f7fd fc59 	bl	80005a8 <__aeabi_f2d>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	ec43 2b10 	vmov	d0, r2, r3
 8002cfe:	f009 f97f 	bl	800c000 <exp>
 8002d02:	ec51 0b10 	vmov	r0, r1, d0
 8002d06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d0a:	4b1e      	ldr	r3, [pc, #120]	; (8002d84 <init_controller_params+0x188>)
 8002d0c:	f7fd fca4 	bl	8000658 <__aeabi_dmul>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4610      	mov	r0, r2
 8002d16:	4619      	mov	r1, r3
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	4b1a      	ldr	r3, [pc, #104]	; (8002d88 <init_controller_params+0x18c>)
 8002d1e:	f7fd fae5 	bl	80002ec <__adddf3>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	f7fd ff8d 	bl	8000c48 <__aeabi_d2f>
 8002d2e:	4601      	mov	r1, r0
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	3342      	adds	r3, #66	; 0x42
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2b7f      	cmp	r3, #127	; 0x7f
 8002d46:	ddc5      	ble.n	8002cd4 <init_controller_params+0xd8>
    }

    }
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	3cd0e560 	.word	0x3cd0e560
 8002d58:	2000075c 	.word	0x2000075c
 8002d5c:	38fba882 	.word	0x38fba882
 8002d60:	37d1b717 	.word	0x37d1b717
 8002d64:	40c90fdb 	.word	0x40c90fdb
 8002d68:	3dcccccd 	.word	0x3dcccccd
 8002d6c:	20009074 	.word	0x20009074
 8002d70:	42200000 	.word	0x42200000
 8002d74:	3ca4ffff 	.word	0x3ca4ffff
 8002d78:	3d24ffff 	.word	0x3d24ffff
 8002d7c:	bc000000 	.word	0xbc000000
 8002d80:	3d03126f 	.word	0x3d03126f
 8002d84:	3ff33333 	.word	0x3ff33333
 8002d88:	3ff00000 	.word	0x3ff00000

08002d8c <reset_foc>:

void reset_foc(ControllerStruct *controller){
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]

	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002d94:	4b36      	ldr	r3, [pc, #216]	; (8002e70 <reset_foc+0xe4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9a:	ee07 3a90 	vmov	s15, r3
 8002d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002da6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002daa:	4b31      	ldr	r3, [pc, #196]	; (8002e70 <reset_foc+0xe4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002db2:	ee17 2a90 	vmov	r2, s15
 8002db6:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002db8:	4b2d      	ldr	r3, [pc, #180]	; (8002e70 <reset_foc+0xe4>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	ee07 3a90 	vmov	s15, r3
 8002dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dc6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002dca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dce:	4b28      	ldr	r3, [pc, #160]	; (8002e70 <reset_foc+0xe4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dd6:	ee17 2a90 	vmov	r2, s15
 8002dda:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002ddc:	4b24      	ldr	r3, [pc, #144]	; (8002e70 <reset_foc+0xe4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de2:	ee07 3a90 	vmov	s15, r3
 8002de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002dee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002df2:	4b1f      	ldr	r3, [pc, #124]	; (8002e70 <reset_foc+0xe4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dfa:	ee17 2a90 	vmov	r2, s15
 8002dfe:	639a      	str	r2, [r3, #56]	; 0x38
    controller->i_d_des = 0;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    controller->i_q_des = 0;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    controller->i_d = 0;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	63da      	str	r2, [r3, #60]	; 0x3c
    controller->i_q = 0;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	641a      	str	r2, [r3, #64]	; 0x40
    controller->i_q_filt = 0;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	645a      	str	r2, [r3, #68]	; 0x44
    controller->q_int = 0;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    controller->d_int = 0;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    controller->v_q = 0;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	659a      	str	r2, [r3, #88]	; 0x58
    controller->v_d = 0;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	655a      	str	r2, [r3, #84]	; 0x54
    controller->fw_int = 0;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    controller->otw_flag = 0;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

    }
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	200095d0 	.word	0x200095d0

08002e74 <field_weaken>:
    float val2 = controller->inverter_tab[index+1];
    return val1 + (val2 - val1)*(duty*128.0f - (float)index);
}

void field_weaken(ControllerStruct *controller)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
       /// Field Weakening ///

       controller->fw_int += controller->ki_fw*(controller->v_max - 1.0f - controller->v_ref);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8002e8e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002e92:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8002e9c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8
       controller->fw_int = fast_fmaxf(fast_fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 8002eb4:	eddf 0a40 	vldr	s1, [pc, #256]	; 8002fb8 <field_weaken+0x144>
 8002eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ebc:	f002 f973 	bl	80051a6 <fast_fminf>
 8002ec0:	eeb0 7a40 	vmov.f32	s14, s0
 8002ec4:	4b3d      	ldr	r3, [pc, #244]	; (8002fbc <field_weaken+0x148>)
 8002ec6:	edd3 7a06 	vldr	s15, [r3, #24]
 8002eca:	eef1 7a67 	vneg.f32	s15, s15
 8002ece:	eef0 0a67 	vmov.f32	s1, s15
 8002ed2:	eeb0 0a47 	vmov.f32	s0, s14
 8002ed6:	f002 f94a 	bl	800516e <fast_fmaxf>
 8002eda:	eef0 7a40 	vmov.f32	s15, s0
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8
       controller->i_q_des = controller->i_q_des + (controller->i_q_des > 0)*controller->fw_int + (controller->i_q_des < 0)*controller->fw_int;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002ef0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef8:	dd02      	ble.n	8002f00 <field_weaken+0x8c>
 8002efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002efe:	e001      	b.n	8002f04 <field_weaken+0x90>
 8002f00:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8002fb8 <field_weaken+0x144>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 8002f0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002f18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f20:	d502      	bpl.n	8002f28 <field_weaken+0xb4>
 8002f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f26:	e001      	b.n	8002f2c <field_weaken+0xb8>
 8002f28:	eddf 6a23 	vldr	s13, [pc, #140]	; 8002fb8 <field_weaken+0x144>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 8002f32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
       controller->i_d_des = controller->fw_int;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	ed93 7a41 	vldr	s14, [r3, #260]	; 0x104
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8002f58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	edd3 6a2b 	vldr	s13, [r3, #172]	; 0xac
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8002f68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f70:	eeb0 0a67 	vmov.f32	s0, s15
 8002f74:	f009 f8be 	bl	800c0f4 <sqrtf>
 8002f78:	ed87 0a03 	vstr	s0, [r7, #12]
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002f82:	edd7 0a03 	vldr	s1, [r7, #12]
 8002f86:	eeb0 0a67 	vmov.f32	s0, s15
 8002f8a:	f002 f90c 	bl	80051a6 <fast_fminf>
 8002f8e:	eeb0 7a40 	vmov.f32	s14, s0
 8002f92:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f96:	eef1 7a67 	vneg.f32	s15, s15
 8002f9a:	eef0 0a67 	vmov.f32	s1, s15
 8002f9e:	eeb0 0a47 	vmov.f32	s0, s14
 8002fa2:	f002 f8e4 	bl	800516e <fast_fmaxf>
 8002fa6:	eef0 7a40 	vmov.f32	s15, s0
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0


}
 8002fb0:	bf00      	nop
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	00000000 	.word	0x00000000
 8002fbc:	2000075c 	.word	0x2000075c

08002fc0 <commutate>:
void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	62da      	str	r2, [r3, #44]	; 0x2c
		controller->dtheta_elec = encoder->elec_velocity;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	635a      	str	r2, [r3, #52]	; 0x34
		controller->dtheta_mech = encoder->velocity/GR;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8002fe0:	4b5e      	ldr	r3, [pc, #376]	; (800315c <commutate+0x19c>)
 8002fe2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002fe6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	edd3 6a03 	vldr	s13, [r3, #12]
 8002ff6:	4b59      	ldr	r3, [pc, #356]	; (800315c <commutate+0x19c>)
 8002ff8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002ffc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	ed93 7a05 	vldr	s14, [r3, #20]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	edd3 6a06 	vldr	s13, [r3, #24]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	ed93 6a07 	vldr	s12, [r3, #28]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3340      	adds	r3, #64	; 0x40
 8003028:	4619      	mov	r1, r3
 800302a:	4610      	mov	r0, r2
 800302c:	eef0 1a46 	vmov.f32	s3, s12
 8003030:	eeb0 1a66 	vmov.f32	s2, s13
 8003034:	eef0 0a47 	vmov.f32	s1, s14
 8003038:	eeb0 0a67 	vmov.f32	s0, s15
 800303c:	f7ff fc52 	bl	80028e4 <dq0>

       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003046:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8003160 <commutate+0x1a0>
 800304a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003054:	eddf 6a43 	vldr	s13, [pc, #268]	; 8003164 <commutate+0x1a4>
 8003058:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800305c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800306c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003160 <commutate+0x1a0>
 8003070:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800307a:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8003164 <commutate+0x1a4>
 800307e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003082:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003092:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003160 <commutate+0x1a0>
 8003096:	ee27 7a87 	vmul.f32	s14, s15, s14
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	edd3 7a08 	vldr	s15, [r3, #32]
 80030a0:	eddf 6a30 	vldr	s13, [pc, #192]	; 8003164 <commutate+0x1a4>
 80030a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80030b8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003168 <commutate+0x1a8>
 80030bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030c0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800316c <commutate+0x1ac>
 80030c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030c8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003170 <commutate+0x1b0>
 80030cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
       controller->v_margin = controller->v_max - controller->v_ref;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 80030e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	edc3 7a3f 	vstr	s15, [r3, #252]	; 0xfc
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 80030ec:	4b1b      	ldr	r3, [pc, #108]	; (800315c <commutate+0x19c>)
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8003108:	eeb0 0a67 	vmov.f32	s0, s15
 800310c:	4610      	mov	r0, r2
 800310e:	f002 f8ce 	bl	80052ae <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800311e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003122:	edc7 7a07 	vstr	s15, [r7, #28]
       float i_q_error = controller->i_q_des - controller->i_q;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003132:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003136:	edc7 7a06 	vstr	s15, [r7, #24]

       if(controller->i_q > controller->i_mag_max){
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003146:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800314a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800314e:	dd13      	ble.n	8003178 <commutate+0x1b8>
    	   controller->i_mag_max = controller->i_q;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	651a      	str	r2, [r3, #80]	; 0x50
 8003158:	e00e      	b.n	8003178 <commutate+0x1b8>
 800315a:	bf00      	nop
 800315c:	2000075c 	.word	0x2000075c
 8003160:	3f666666 	.word	0x3f666666
 8003164:	3dcccccd 	.word	0x3dcccccd
 8003168:	3f933333 	.word	0x3f933333
 800316c:	3f70a3d7 	.word	0x3f70a3d7
 8003170:	3f13cd3a 	.word	0x3f13cd3a
 8003174:	381d4951 	.word	0x381d4951
       }


       // Calculate decoupling feed-forward voltages //

       float v_d_ff = 0.0f;//-SQRT3*controller->dtheta_elec*L_Q*controller->i_q;
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
       float v_q_ff = 0.0f;//SQRT3*controller->dtheta_elec*(0.0f*L_D*controller->i_d + controller->flux_linkage);
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	613b      	str	r3, [r7, #16]

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800318a:	edd7 7a07 	vldr	s15, [r7, #28]
 800318e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8003198:	ee37 7a27 	vadd.f32	s14, s14, s15
 800319c:	edd7 7a05 	vldr	s15, [r7, #20]
 80031a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 80031b6:	eef0 0a47 	vmov.f32	s1, s14
 80031ba:	eeb0 0a67 	vmov.f32	s0, s15
 80031be:	f001 fff2 	bl	80051a6 <fast_fminf>
 80031c2:	eeb0 7a40 	vmov.f32	s14, s0
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 80031cc:	eef1 7a67 	vneg.f32	s15, s15
 80031d0:	eef0 0a67 	vmov.f32	s1, s15
 80031d4:	eeb0 0a47 	vmov.f32	s0, s14
 80031d8:	f001 ffc9 	bl	800516e <fast_fmaxf>
 80031dc:	eef0 7a40 	vmov.f32	s15, s0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80031f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8003200:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003204:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 800321a:	eef0 0a47 	vmov.f32	s1, s14
 800321e:	eeb0 0a67 	vmov.f32	s0, s15
 8003222:	f001 ffc0 	bl	80051a6 <fast_fminf>
 8003226:	eeb0 7a40 	vmov.f32	s14, s0
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8003230:	eef1 7a67 	vneg.f32	s15, s15
 8003234:	eef0 0a67 	vmov.f32	s1, s15
 8003238:	eeb0 0a47 	vmov.f32	s0, s14
 800323c:	f001 ff97 	bl	800516e <fast_fmaxf>
 8003240:	eef0 7a40 	vmov.f32	s15, s0
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
       float vq_max = controller->v_max;//sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003250:	60fb      	str	r3, [r7, #12]

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8003258:	edd7 7a06 	vldr	s15, [r7, #24]
 800325c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8003266:	ee37 7a27 	vadd.f32	s14, s14, s15
 800326a:	edd7 7a04 	vldr	s15, [r7, #16]
 800326e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800328a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800328e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003292:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 80032ac:	eef0 0a47 	vmov.f32	s1, s14
 80032b0:	eeb0 0a67 	vmov.f32	s0, s15
 80032b4:	f001 ff77 	bl	80051a6 <fast_fminf>
 80032b8:	eeb0 7a40 	vmov.f32	s14, s0
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 80032c2:	eef1 7a67 	vneg.f32	s15, s15
 80032c6:	eef0 0a67 	vmov.f32	s1, s15
 80032ca:	eeb0 0a47 	vmov.f32	s0, s14
 80032ce:	f001 ff4e 	bl	800516e <fast_fmaxf>
 80032d2:	eef0 7a40 	vmov.f32	s15, s0
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80032e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80032f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003300:	eeb0 0a67 	vmov.f32	s0, s15
 8003304:	f008 fef6 	bl	800c0f4 <sqrtf>
 8003308:	eef0 7a40 	vmov.f32	s15, s0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003318:	edd7 0a03 	vldr	s1, [r7, #12]
 800331c:	eeb0 0a67 	vmov.f32	s0, s15
 8003320:	f001 ff41 	bl	80051a6 <fast_fminf>
 8003324:	eeb0 7a40 	vmov.f32	s14, s0
 8003328:	edd7 7a03 	vldr	s15, [r7, #12]
 800332c:	eef1 7a67 	vneg.f32	s15, s15
 8003330:	eef0 0a67 	vmov.f32	s1, s15
 8003334:	eeb0 0a47 	vmov.f32	s0, s14
 8003338:	f001 ff19 	bl	800516e <fast_fmaxf>
 800333c:	eef0 7a40 	vmov.f32	s15, s0
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8003358:	eeb0 0a67 	vmov.f32	s0, s15
 800335c:	4610      	mov	r0, r2
 800335e:	f001 ffa6 	bl	80052ae <limit_norm>

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800336e:	ed5f 6a7f 	vldr	s13, [pc, #-508]	; 8003174 <commutate+0x1b4>
 8003372:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3370      	adds	r3, #112	; 0x70
 8003396:	461a      	mov	r2, r3
 8003398:	eeb0 1a66 	vmov.f32	s2, s13
 800339c:	eef0 0a47 	vmov.f32	s1, s14
 80033a0:	eeb0 0a67 	vmov.f32	s0, s15
 80033a4:	f7ff fa1a 	bl	80027dc <abc>
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	ed93 6a1c 	vldr	s12, [r3, #112]	; 0x70
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f103 0160 	add.w	r1, r3, #96	; 0x60
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3364      	adds	r3, #100	; 0x64
 80033d0:	461a      	mov	r2, r3
 80033d2:	eef0 1a46 	vmov.f32	s3, s12
 80033d6:	eeb0 1a66 	vmov.f32	s2, s13
 80033da:	eef0 0a47 	vmov.f32	s1, s14
 80033de:	eeb0 0a67 	vmov.f32	s0, s15
 80033e2:	f7ff fb0f 	bl	8002a04 <svm>

       set_dtc(controller);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff f8d4 	bl	8002594 <set_dtc>

    }
 80033ec:	bf00      	nop
 80033ee:	3720      	adds	r7, #32
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <torque_control>:


void torque_control(ControllerStruct *controller){
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
	/*----- convert theta_mech to 0~359.9999deg -----*/
	static float pos, round;
	pos = controller->theta_mech;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	4a76      	ldr	r2, [pc, #472]	; (80035dc <torque_control+0x1e8>)
 8003402:	6013      	str	r3, [r2, #0]
	modff(pos/(2*PI_F),&round);
 8003404:	4b75      	ldr	r3, [pc, #468]	; (80035dc <torque_control+0x1e8>)
 8003406:	edd3 7a00 	vldr	s15, [r3]
 800340a:	eddf 6a75 	vldr	s13, [pc, #468]	; 80035e0 <torque_control+0x1ec>
 800340e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003412:	4874      	ldr	r0, [pc, #464]	; (80035e4 <torque_control+0x1f0>)
 8003414:	eeb0 0a47 	vmov.f32	s0, s14
 8003418:	f008 fdce 	bl	800bfb8 <modff>
	pos = pos - round*2*PI_F;
 800341c:	4b6f      	ldr	r3, [pc, #444]	; (80035dc <torque_control+0x1e8>)
 800341e:	ed93 7a00 	vldr	s14, [r3]
 8003422:	4b70      	ldr	r3, [pc, #448]	; (80035e4 <torque_control+0x1f0>)
 8003424:	edd3 7a00 	vldr	s15, [r3]
 8003428:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800342c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80035e8 <torque_control+0x1f4>
 8003430:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003434:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003438:	4b68      	ldr	r3, [pc, #416]	; (80035dc <torque_control+0x1e8>)
 800343a:	edc3 7a00 	vstr	s15, [r3]
	if(pos < 0){
 800343e:	4b67      	ldr	r3, [pc, #412]	; (80035dc <torque_control+0x1e8>)
 8003440:	edd3 7a00 	vldr	s15, [r3]
 8003444:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800344c:	d509      	bpl.n	8003462 <torque_control+0x6e>
		pos = pos + 2*PI_F;
 800344e:	4b63      	ldr	r3, [pc, #396]	; (80035dc <torque_control+0x1e8>)
 8003450:	edd3 7a00 	vldr	s15, [r3]
 8003454:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80035e0 <torque_control+0x1ec>
 8003458:	ee77 7a87 	vadd.f32	s15, s15, s14
 800345c:	4b5f      	ldr	r3, [pc, #380]	; (80035dc <torque_control+0x1e8>)
 800345e:	edc3 7a00 	vstr	s15, [r3]
	}

	/*----- position PID control -----*/
	static float err = 0; //integral of position error

	if(controller->p_des < pos){
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 8003468:	4b5c      	ldr	r3, [pc, #368]	; (80035dc <torque_control+0x1e8>)
 800346a:	edd3 7a00 	vldr	s15, [r3]
 800346e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003476:	d534      	bpl.n	80034e2 <torque_control+0xee>
		if((controller->p_des + 2*PI_F - pos) < (pos - controller->p_des)){
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 800347e:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80035e0 <torque_control+0x1ec>
 8003482:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003486:	4b55      	ldr	r3, [pc, #340]	; (80035dc <torque_control+0x1e8>)
 8003488:	edd3 7a00 	vldr	s15, [r3]
 800348c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003490:	4b52      	ldr	r3, [pc, #328]	; (80035dc <torque_control+0x1e8>)
 8003492:	edd3 6a00 	vldr	s13, [r3]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 800349c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80034a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a8:	d50f      	bpl.n	80034ca <torque_control+0xd6>
			err = 2*PI_F - pos + controller->p_des;
 80034aa:	4b4c      	ldr	r3, [pc, #304]	; (80035dc <torque_control+0x1e8>)
 80034ac:	edd3 7a00 	vldr	s15, [r3]
 80034b0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80035e0 <torque_control+0x1ec>
 80034b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 80034be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c2:	4b4a      	ldr	r3, [pc, #296]	; (80035ec <torque_control+0x1f8>)
 80034c4:	edc3 7a00 	vstr	s15, [r3]
 80034c8:	e03f      	b.n	800354a <torque_control+0x156>
		}
		else{
			err = controller->p_des - pos;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 80034d0:	4b42      	ldr	r3, [pc, #264]	; (80035dc <torque_control+0x1e8>)
 80034d2:	edd3 7a00 	vldr	s15, [r3]
 80034d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034da:	4b44      	ldr	r3, [pc, #272]	; (80035ec <torque_control+0x1f8>)
 80034dc:	edc3 7a00 	vstr	s15, [r3]
 80034e0:	e033      	b.n	800354a <torque_control+0x156>
		}
	}
	else{
		if((pos + 2*PI_F - controller->p_des) < (controller->p_des - pos)){
 80034e2:	4b3e      	ldr	r3, [pc, #248]	; (80035dc <torque_control+0x1e8>)
 80034e4:	edd3 7a00 	vldr	s15, [r3]
 80034e8:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80035e0 <torque_control+0x1ec>
 80034ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 80034f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003500:	4b36      	ldr	r3, [pc, #216]	; (80035dc <torque_control+0x1e8>)
 8003502:	edd3 7a00 	vldr	s15, [r3]
 8003506:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800350a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800350e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003512:	d50f      	bpl.n	8003534 <torque_control+0x140>
			err = controller->p_des - 2*PI_F - pos;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 800351a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80035e0 <torque_control+0x1ec>
 800351e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003522:	4b2e      	ldr	r3, [pc, #184]	; (80035dc <torque_control+0x1e8>)
 8003524:	edd3 7a00 	vldr	s15, [r3]
 8003528:	ee77 7a67 	vsub.f32	s15, s14, s15
 800352c:	4b2f      	ldr	r3, [pc, #188]	; (80035ec <torque_control+0x1f8>)
 800352e:	edc3 7a00 	vstr	s15, [r3]
 8003532:	e00a      	b.n	800354a <torque_control+0x156>
		}
		else{
			err = controller->p_des - pos;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 800353a:	4b28      	ldr	r3, [pc, #160]	; (80035dc <torque_control+0x1e8>)
 800353c:	edd3 7a00 	vldr	s15, [r3]
 8003540:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003544:	4b29      	ldr	r3, [pc, #164]	; (80035ec <torque_control+0x1f8>)
 8003546:	edc3 7a00 	vstr	s15, [r3]
		}
	}
	in_err = in_err + err;
 800354a:	4b29      	ldr	r3, [pc, #164]	; (80035f0 <torque_control+0x1fc>)
 800354c:	ed93 7a00 	vldr	s14, [r3]
 8003550:	4b26      	ldr	r3, [pc, #152]	; (80035ec <torque_control+0x1f8>)
 8003552:	edd3 7a00 	vldr	s15, [r3]
 8003556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800355a:	4b25      	ldr	r3, [pc, #148]	; (80035f0 <torque_control+0x1fc>)
 800355c:	edc3 7a00 	vstr	s15, [r3]

    float torque_ref = controller->kp*(err) + controller->t_ff + controller->ki*(in_err) + controller->kd*(-controller->dtheta_mech);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8003566:	4b21      	ldr	r3, [pc, #132]	; (80035ec <torque_control+0x1f8>)
 8003568:	edd3 7a00 	vldr	s15, [r3]
 800356c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 8003576:	ee37 7a27 	vadd.f32	s14, s14, s15
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	edd3 6a38 	vldr	s13, [r3, #224]	; 0xe0
 8003580:	4b1b      	ldr	r3, [pc, #108]	; (80035f0 <torque_control+0x1fc>)
 8003582:	edd3 7a00 	vldr	s15, [r3]
 8003586:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800358a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	edd3 6a39 	vldr	s13, [r3, #228]	; 0xe4
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800359a:	eef1 7a67 	vneg.f32	s15, s15
 800359e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035a6:	edc7 7a03 	vstr	s15, [r7, #12]
    controller->i_q_des = torque_ref/(KT*GR);
 80035aa:	4b12      	ldr	r3, [pc, #72]	; (80035f4 <torque_control+0x200>)
 80035ac:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80035b0:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <torque_control+0x200>)
 80035b2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80035b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035ba:	edd7 6a03 	vldr	s13, [r7, #12]
 80035be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
	controller->i_d_des = 0.0f;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    
    }
 80035d2:	bf00      	nop
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20000240 	.word	0x20000240
 80035e0:	40c90fdb 	.word	0x40c90fdb
 80035e4:	20000244 	.word	0x20000244
 80035e8:	40490fdb 	.word	0x40490fdb
 80035ec:	20000248 	.word	0x20000248
 80035f0:	2000023c 	.word	0x2000023c
 80035f4:	2000075c 	.word	0x2000075c

080035f8 <zero_commands>:



void zero_commands(ControllerStruct * controller){
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
	controller->t_ff = 0;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	controller->kp = 0;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	controller->ki = 0;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	controller->kd = 0;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	controller->p_des = 0;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	controller->v_des = 0;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	controller->i_q_des = 0;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
	...

08003654 <run_fsm>:
#include "foc.h"
#include "math_ops.h"
#include "position_sensor.h"
#include "drv8323.h"

 void run_fsm(FSMStruct * fsmstate){
 8003654:	b590      	push	{r4, r7, lr}
 8003656:	b085      	sub	sp, #20
 8003658:	af02      	add	r7, sp, #8
 800365a:	6078      	str	r0, [r7, #4]
	 /* run_fsm is run every commutation interrupt cycle */

	 /* state transition management */
	 if(fsmstate->next_state != fsmstate->state){
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	785a      	ldrb	r2, [r3, #1]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d00d      	beq.n	8003684 <run_fsm+0x30>
		 fsm_exit_state(fsmstate);		// safely exit the old state
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f9b1 	bl	80039d0 <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	78db      	ldrb	r3, [r3, #3]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d006      	beq.n	8003684 <run_fsm+0x30>
			 fsmstate->state = fsmstate->next_state;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	785a      	ldrb	r2, [r3, #1]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	701a      	strb	r2, [r3, #0]
			 fsm_enter_state(fsmstate);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f8f2 	bl	8003868 <fsm_enter_state>
		 }
	 }

	 switch(fsmstate->state){
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b06      	cmp	r3, #6
 800368a:	f200 80d9 	bhi.w	8003840 <run_fsm+0x1ec>
 800368e:	a201      	add	r2, pc, #4	; (adr r2, 8003694 <run_fsm+0x40>)
 8003690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003694:	0800383f 	.word	0x0800383f
 8003698:	080037ff 	.word	0x080037ff
 800369c:	080037b5 	.word	0x080037b5
 80036a0:	08003841 	.word	0x08003841
 80036a4:	0800383f 	.word	0x0800383f
 80036a8:	080036b1 	.word	0x080036b1
 80036ac:	080037f5 	.word	0x080037f5
		 case MENU_MODE:
			 break;

		 case ENCODER_CALIBRATE:
			 if(!comm_encoder_cal.done_ordering){
 80036b0:	4b65      	ldr	r3, [pc, #404]	; (8003848 <run_fsm+0x1f4>)
 80036b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d108      	bne.n	80036cc <run_fsm+0x78>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 80036ba:	4b64      	ldr	r3, [pc, #400]	; (800384c <run_fsm+0x1f8>)
 80036bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80036c0:	4a61      	ldr	r2, [pc, #388]	; (8003848 <run_fsm+0x1f4>)
 80036c2:	4962      	ldr	r1, [pc, #392]	; (800384c <run_fsm+0x1f8>)
 80036c4:	4862      	ldr	r0, [pc, #392]	; (8003850 <run_fsm+0x1fc>)
 80036c6:	f7fd fe65 	bl	8001394 <order_phases>
				 preference_writer_close(&prefs);
				 preference_writer_load(prefs);
				 update_fsm(fsmstate, 27);
			 }

			 break;
 80036ca:	e0b9      	b.n	8003840 <run_fsm+0x1ec>
			 else if(!comm_encoder_cal.done_cal){
 80036cc:	4b5e      	ldr	r3, [pc, #376]	; (8003848 <run_fsm+0x1f4>)
 80036ce:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d108      	bne.n	80036e8 <run_fsm+0x94>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 80036d6:	4b5d      	ldr	r3, [pc, #372]	; (800384c <run_fsm+0x1f8>)
 80036d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80036dc:	4a5a      	ldr	r2, [pc, #360]	; (8003848 <run_fsm+0x1f4>)
 80036de:	495b      	ldr	r1, [pc, #364]	; (800384c <run_fsm+0x1f8>)
 80036e0:	485b      	ldr	r0, [pc, #364]	; (8003850 <run_fsm+0x1fc>)
 80036e2:	f7fd ff5f 	bl	80015a4 <calibrate_encoder>
			 break;
 80036e6:	e0ab      	b.n	8003840 <run_fsm+0x1ec>
				 E_ZERO = comm_encoder_cal.ezero;
 80036e8:	4b57      	ldr	r3, [pc, #348]	; (8003848 <run_fsm+0x1f4>)
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	4a59      	ldr	r2, [pc, #356]	; (8003854 <run_fsm+0x200>)
 80036ee:	6153      	str	r3, [r2, #20]
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 80036f0:	4b58      	ldr	r3, [pc, #352]	; (8003854 <run_fsm+0x200>)
 80036f2:	695c      	ldr	r4, [r3, #20]
 80036f4:	4b56      	ldr	r3, [pc, #344]	; (8003850 <run_fsm+0x1fc>)
 80036f6:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80036fa:	4b56      	ldr	r3, [pc, #344]	; (8003854 <run_fsm+0x200>)
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	425b      	negs	r3, r3
 8003700:	ee07 3a90 	vmov	s15, r3
 8003704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800370c:	eddf 6a52 	vldr	s13, [pc, #328]	; 8003858 <run_fsm+0x204>
 8003710:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003714:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003718:	eeb0 0a47 	vmov.f32	s0, s14
 800371c:	f008 fcbe 	bl	800c09c <fmodf>
 8003720:	eef0 7a40 	vmov.f32	s15, s0
 8003724:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800385c <run_fsm+0x208>
 8003728:	ee67 7a87 	vmul.f32	s15, s15, s14
 800372c:	ee17 0a90 	vmov	r0, s15
 8003730:	f7fc ff3a 	bl	80005a8 <__aeabi_f2d>
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	4621      	mov	r1, r4
 800373a:	4849      	ldr	r0, [pc, #292]	; (8003860 <run_fsm+0x20c>)
 800373c:	f009 fbbc 	bl	800ceb8 <iprintf>
				 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 8003740:	4a43      	ldr	r2, [pc, #268]	; (8003850 <run_fsm+0x1fc>)
 8003742:	4b41      	ldr	r3, [pc, #260]	; (8003848 <run_fsm+0x1f4>)
 8003744:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003748:	332c      	adds	r3, #44	; 0x2c
 800374a:	f102 00dc 	add.w	r0, r2, #220	; 0xdc
 800374e:	4619      	mov	r1, r3
 8003750:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003754:	461a      	mov	r2, r3
 8003756:	f008 ff2f 	bl	800c5b8 <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 800375a:	4a3e      	ldr	r2, [pc, #248]	; (8003854 <run_fsm+0x200>)
 800375c:	4b3a      	ldr	r3, [pc, #232]	; (8003848 <run_fsm+0x1f4>)
 800375e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003762:	332c      	adds	r3, #44	; 0x2c
 8003764:	f102 001c 	add.w	r0, r2, #28
 8003768:	4619      	mov	r1, r3
 800376a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800376e:	461a      	mov	r2, r3
 8003770:	f008 ff22 	bl	800c5b8 <memcpy>
				 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 8003774:	4b3b      	ldr	r3, [pc, #236]	; (8003864 <run_fsm+0x210>)
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	9200      	str	r2, [sp, #0]
 800377a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800377c:	f002 f8ca 	bl	8005914 <preference_writer_ready>
 8003780:	4603      	mov	r3, r0
 8003782:	f083 0301 	eor.w	r3, r3, #1
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <run_fsm+0x13e>
 800378c:	4835      	ldr	r0, [pc, #212]	; (8003864 <run_fsm+0x210>)
 800378e:	f002 f8b2 	bl	80058f6 <preference_writer_open>
				 preference_writer_flush(&prefs);
 8003792:	4834      	ldr	r0, [pc, #208]	; (8003864 <run_fsm+0x210>)
 8003794:	f002 f8cc 	bl	8005930 <preference_writer_flush>
				 preference_writer_close(&prefs);
 8003798:	4832      	ldr	r0, [pc, #200]	; (8003864 <run_fsm+0x210>)
 800379a:	f002 f947 	bl	8005a2c <preference_writer_close>
				 preference_writer_load(prefs);
 800379e:	4b31      	ldr	r3, [pc, #196]	; (8003864 <run_fsm+0x210>)
 80037a0:	691a      	ldr	r2, [r3, #16]
 80037a2:	9200      	str	r2, [sp, #0]
 80037a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037a6:	f002 f8ff 	bl	80059a8 <preference_writer_load>
				 update_fsm(fsmstate, 27);
 80037aa:	211b      	movs	r1, #27
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f9c9 	bl	8003b44 <update_fsm>
			 break;
 80037b2:	e045      	b.n	8003840 <run_fsm+0x1ec>

		 case MOTOR_MODE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 80037b4:	4b27      	ldr	r3, [pc, #156]	; (8003854 <run_fsm+0x200>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	dd09      	ble.n	80037d0 <run_fsm+0x17c>
 80037bc:	4b23      	ldr	r3, [pc, #140]	; (800384c <run_fsm+0x1f8>)
 80037be:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80037c2:	4b24      	ldr	r3, [pc, #144]	; (8003854 <run_fsm+0x200>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	dd02      	ble.n	80037d0 <run_fsm+0x17c>
				 zero_commands(&controller);
 80037ca:	4820      	ldr	r0, [pc, #128]	; (800384c <run_fsm+0x1f8>)
 80037cc:	f7ff ff14 	bl	80035f8 <zero_commands>
			 }
			 /* Otherwise, commutate */

			 torque_control(&controller);
 80037d0:	481e      	ldr	r0, [pc, #120]	; (800384c <run_fsm+0x1f8>)
 80037d2:	f7ff fe0f 	bl	80033f4 <torque_control>
			 field_weaken(&controller);
 80037d6:	481d      	ldr	r0, [pc, #116]	; (800384c <run_fsm+0x1f8>)
 80037d8:	f7ff fb4c 	bl	8002e74 <field_weaken>
			 commutate(&controller, &comm_encoder);
 80037dc:	491c      	ldr	r1, [pc, #112]	; (8003850 <run_fsm+0x1fc>)
 80037de:	481b      	ldr	r0, [pc, #108]	; (800384c <run_fsm+0x1f8>)
 80037e0:	f7ff fbee 	bl	8002fc0 <commutate>

			 controller.timeout ++;
 80037e4:	4b19      	ldr	r3, [pc, #100]	; (800384c <run_fsm+0x1f8>)
 80037e6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80037ea:	3301      	adds	r3, #1
 80037ec:	4a17      	ldr	r2, [pc, #92]	; (800384c <run_fsm+0x1f8>)
 80037ee:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
			 break;
 80037f2:	e025      	b.n	8003840 <run_fsm+0x1ec>

		 case SETUP_MODE:
			 break;

		 case ENCODER_MODE:
			 ps_print(&comm_encoder, 100);
 80037f4:	2164      	movs	r1, #100	; 0x64
 80037f6:	4816      	ldr	r0, [pc, #88]	; (8003850 <run_fsm+0x1fc>)
 80037f8:	f002 f826 	bl	8005848 <ps_print>
			 break;
 80037fc:	e020      	b.n	8003840 <run_fsm+0x1ec>

		 case HALL_CALIBRATE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 80037fe:	4b15      	ldr	r3, [pc, #84]	; (8003854 <run_fsm+0x200>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	dd09      	ble.n	800381a <run_fsm+0x1c6>
 8003806:	4b11      	ldr	r3, [pc, #68]	; (800384c <run_fsm+0x1f8>)
 8003808:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800380c:	4b11      	ldr	r3, [pc, #68]	; (8003854 <run_fsm+0x200>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	429a      	cmp	r2, r3
 8003812:	dd02      	ble.n	800381a <run_fsm+0x1c6>
				 zero_commands(&controller);
 8003814:	480d      	ldr	r0, [pc, #52]	; (800384c <run_fsm+0x1f8>)
 8003816:	f7ff feef 	bl	80035f8 <zero_commands>
			 }
			 /* Otherwise, commutate */

			 /* Calibrate Hall Sensor */
			 hall_calibrate(fsmstate);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fd3a 	bl	8004294 <hall_calibrate>

			 torque_control(&controller);
 8003820:	480a      	ldr	r0, [pc, #40]	; (800384c <run_fsm+0x1f8>)
 8003822:	f7ff fde7 	bl	80033f4 <torque_control>
			 commutate(&controller, &comm_encoder);
 8003826:	490a      	ldr	r1, [pc, #40]	; (8003850 <run_fsm+0x1fc>)
 8003828:	4808      	ldr	r0, [pc, #32]	; (800384c <run_fsm+0x1f8>)
 800382a:	f7ff fbc9 	bl	8002fc0 <commutate>

			 controller.timeout ++;
 800382e:	4b07      	ldr	r3, [pc, #28]	; (800384c <run_fsm+0x1f8>)
 8003830:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003834:	3301      	adds	r3, #1
 8003836:	4a05      	ldr	r2, [pc, #20]	; (800384c <run_fsm+0x1f8>)
 8003838:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
			 break;
 800383c:	e000      	b.n	8003840 <run_fsm+0x1ec>
			 break;
 800383e:	bf00      	nop
	 }

 }
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	bd90      	pop	{r4, r7, pc}
 8003848:	20000b68 	.word	0x20000b68
 800384c:	2000085c 	.word	0x2000085c
 8003850:	20000428 	.word	0x20000428
 8003854:	20009074 	.word	0x20009074
 8003858:	47800000 	.word	0x47800000
 800385c:	40c90fdb 	.word	0x40c90fdb
 8003860:	08010c00 	.word	0x08010c00
 8003864:	20000748 	.word	0x20000748

08003868 <fsm_enter_state>:

 void fsm_enter_state(FSMStruct * fsmstate){
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
	 /* Called when entering a new state
	  * Do necessary setup   */

		switch(fsmstate->state){
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b06      	cmp	r3, #6
 8003876:	f200 808d 	bhi.w	8003994 <fsm_enter_state+0x12c>
 800387a:	a201      	add	r2, pc, #4	; (adr r2, 8003880 <fsm_enter_state+0x18>)
 800387c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003880:	0800389d 	.word	0x0800389d
 8003884:	0800395f 	.word	0x0800395f
 8003888:	080038d1 	.word	0x080038d1
 800388c:	08003995 	.word	0x08003995
 8003890:	080038ad 	.word	0x080038ad
 8003894:	08003901 	.word	0x08003901
 8003898:	080038c1 	.word	0x080038c1
			case MENU_MODE:
				if (fsmstate->print_uart_msg){
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	791b      	ldrb	r3, [r3, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d074      	beq.n	800398e <fsm_enter_state+0x126>
					printf("\r\nEntering Main Menu\r\n");
 80038a4:	483d      	ldr	r0, [pc, #244]	; (800399c <fsm_enter_state+0x134>)
 80038a6:	f009 fb8d 	bl	800cfc4 <puts>
				}
				break;
 80038aa:	e070      	b.n	800398e <fsm_enter_state+0x126>
			case SETUP_MODE:
				if (fsmstate->print_uart_msg){
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	791b      	ldrb	r3, [r3, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <fsm_enter_state+0x52>
					printf("\r\nEntering Setup\r\n");
 80038b4:	483a      	ldr	r0, [pc, #232]	; (80039a0 <fsm_enter_state+0x138>)
 80038b6:	f009 fb85 	bl	800cfc4 <puts>
				}
				enter_setup_state();
 80038ba:	f000 fa1f 	bl	8003cfc <enter_setup_state>
				break;
 80038be:	e069      	b.n	8003994 <fsm_enter_state+0x12c>
			case ENCODER_MODE:
				if (fsmstate->print_uart_msg){
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	791b      	ldrb	r3, [r3, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d064      	beq.n	8003992 <fsm_enter_state+0x12a>
					printf("\r\nEntering Encoder Mode\r\n");
 80038c8:	4836      	ldr	r0, [pc, #216]	; (80039a4 <fsm_enter_state+0x13c>)
 80038ca:	f009 fb7b 	bl	800cfc4 <puts>
				}
				break;
 80038ce:	e060      	b.n	8003992 <fsm_enter_state+0x12a>
			case MOTOR_MODE:
				if (fsmstate->print_uart_msg){
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	791b      	ldrb	r3, [r3, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <fsm_enter_state+0x76>
					printf("\r\nEntering Motor Mode\r\n");
 80038d8:	4833      	ldr	r0, [pc, #204]	; (80039a8 <fsm_enter_state+0x140>)
 80038da:	f009 fb73 	bl	800cfc4 <puts>
				}
				controller.kp = 5.0f ;
 80038de:	4b33      	ldr	r3, [pc, #204]	; (80039ac <fsm_enter_state+0x144>)
 80038e0:	4a33      	ldr	r2, [pc, #204]	; (80039b0 <fsm_enter_state+0x148>)
 80038e2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
				controller.ki = 0.0f ;
 80038e6:	4b31      	ldr	r3, [pc, #196]	; (80039ac <fsm_enter_state+0x144>)
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
				controller.kd = 1.0f ;
 80038f0:	4b2e      	ldr	r3, [pc, #184]	; (80039ac <fsm_enter_state+0x144>)
 80038f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80038f6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				enter_motor_mode();
 80038fa:	f000 fc47 	bl	800418c <enter_motor_mode>
				break;
 80038fe:	e049      	b.n	8003994 <fsm_enter_state+0x12c>
			case ENCODER_CALIBRATE:
				if (fsmstate->print_uart_msg){
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	791b      	ldrb	r3, [r3, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <fsm_enter_state+0xa6>
					printf("\r\nEntering Encoder Calibration Mode\r\n");
 8003908:	482a      	ldr	r0, [pc, #168]	; (80039b4 <fsm_enter_state+0x14c>)
 800390a:	f009 fb5b 	bl	800cfc4 <puts>
				}
				/* zero out all calibrations before starting */

				comm_encoder_cal.done_cal = 0;
 800390e:	4b2a      	ldr	r3, [pc, #168]	; (80039b8 <fsm_enter_state+0x150>)
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 8003916:	4b28      	ldr	r3, [pc, #160]	; (80039b8 <fsm_enter_state+0x150>)
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				comm_encoder_cal.started = 0;
 800391e:	4b26      	ldr	r3, [pc, #152]	; (80039b8 <fsm_enter_state+0x150>)
 8003920:	2200      	movs	r2, #0
 8003922:	741a      	strb	r2, [r3, #16]
				comm_encoder.e_zero = 0;
 8003924:	4b25      	ldr	r3, [pc, #148]	; (80039bc <fsm_enter_state+0x154>)
 8003926:	2200      	movs	r2, #0
 8003928:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 800392c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003930:	2100      	movs	r1, #0
 8003932:	4823      	ldr	r0, [pc, #140]	; (80039c0 <fsm_enter_state+0x158>)
 8003934:	f008 fe4e 	bl	800c5d4 <memset>
				drv_enable_gd(drv);
 8003938:	4b22      	ldr	r3, [pc, #136]	; (80039c4 <fsm_enter_state+0x15c>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	2100      	movs	r1, #0
 800393e:	4611      	mov	r1, r2
 8003940:	889a      	ldrh	r2, [r3, #4]
 8003942:	2300      	movs	r3, #0
 8003944:	f362 030f 	bfi	r3, r2, #0, #16
 8003948:	4608      	mov	r0, r1
 800394a:	4619      	mov	r1, r3
 800394c:	f7fe fd35 	bl	80023ba <drv_enable_gd>
				GPIO_ENABLE;
 8003950:	2201      	movs	r2, #1
 8003952:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003956:	481c      	ldr	r0, [pc, #112]	; (80039c8 <fsm_enter_state+0x160>)
 8003958:	f005 fb26 	bl	8008fa8 <HAL_GPIO_WritePin>
				break;
 800395c:	e01a      	b.n	8003994 <fsm_enter_state+0x12c>
			case HALL_CALIBRATE:
				if (fsmstate->print_uart_msg){
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	791b      	ldrb	r3, [r3, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <fsm_enter_state+0x104>
					printf("\r\nEntering Hall Calibration Mode\r\n");
 8003966:	4819      	ldr	r0, [pc, #100]	; (80039cc <fsm_enter_state+0x164>)
 8003968:	f009 fb2c 	bl	800cfc4 <puts>
				}
				controller.kp = 5.0f ;
 800396c:	4b0f      	ldr	r3, [pc, #60]	; (80039ac <fsm_enter_state+0x144>)
 800396e:	4a10      	ldr	r2, [pc, #64]	; (80039b0 <fsm_enter_state+0x148>)
 8003970:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
				controller.ki = 0.0f ;
 8003974:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <fsm_enter_state+0x144>)
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
				controller.kd = 1.0f ;
 800397e:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <fsm_enter_state+0x144>)
 8003980:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003984:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				enter_motor_mode();
 8003988:	f000 fc00 	bl	800418c <enter_motor_mode>
				break;
 800398c:	e002      	b.n	8003994 <fsm_enter_state+0x12c>
				break;
 800398e:	bf00      	nop
 8003990:	e000      	b.n	8003994 <fsm_enter_state+0x12c>
				break;
 8003992:	bf00      	nop

		}
 }
 8003994:	bf00      	nop
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	08010c14 	.word	0x08010c14
 80039a0:	08010c2c 	.word	0x08010c2c
 80039a4:	08010c40 	.word	0x08010c40
 80039a8:	08010c5c 	.word	0x08010c5c
 80039ac:	2000085c 	.word	0x2000085c
 80039b0:	40a00000 	.word	0x40a00000
 80039b4:	08010c74 	.word	0x08010c74
 80039b8:	20000b68 	.word	0x20000b68
 80039bc:	20000428 	.word	0x20000428
 80039c0:	20000504 	.word	0x20000504
 80039c4:	20009498 	.word	0x20009498
 80039c8:	40020000 	.word	0x40020000
 80039cc:	08010c9c 	.word	0x08010c9c

080039d0 <fsm_exit_state>:

 void fsm_exit_state(FSMStruct * fsmstate){
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
	 /* Called when exiting the current state
	  * Do necessary cleanup  */

		switch(fsmstate->state){
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b06      	cmp	r3, #6
 80039de:	f200 8099 	bhi.w	8003b14 <fsm_exit_state+0x144>
 80039e2:	a201      	add	r2, pc, #4	; (adr r2, 80039e8 <fsm_exit_state+0x18>)
 80039e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e8:	08003a05 	.word	0x08003a05
 80039ec:	08003ad1 	.word	0x08003ad1
 80039f0:	08003a47 	.word	0x08003a47
 80039f4:	08003b15 	.word	0x08003b15
 80039f8:	08003a1b 	.word	0x08003a1b
 80039fc:	08003a97 	.word	0x08003a97
 8003a00:	08003a31 	.word	0x08003a31
			case MENU_MODE:
				if (fsmstate->print_uart_msg){
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	791b      	ldrb	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <fsm_exit_state+0x42>
					printf("\r\nLeaving Main Menu\r\n");
 8003a0c:	4843      	ldr	r0, [pc, #268]	; (8003b1c <fsm_exit_state+0x14c>)
 8003a0e:	f009 fad9 	bl	800cfc4 <puts>
				}
				fsmstate->ready = 1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	70da      	strb	r2, [r3, #3]
				break;
 8003a18:	e07c      	b.n	8003b14 <fsm_exit_state+0x144>
			case SETUP_MODE:
				if (fsmstate->print_uart_msg){
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	791b      	ldrb	r3, [r3, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <fsm_exit_state+0x58>
					printf("\r\nLeaving Setup Menu\r\n");
 8003a22:	483f      	ldr	r0, [pc, #252]	; (8003b20 <fsm_exit_state+0x150>)
 8003a24:	f009 face 	bl	800cfc4 <puts>
				}
				fsmstate->ready = 1;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	70da      	strb	r2, [r3, #3]
				break;
 8003a2e:	e071      	b.n	8003b14 <fsm_exit_state+0x144>
			case ENCODER_MODE:
				if (fsmstate->print_uart_msg){
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	791b      	ldrb	r3, [r3, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d002      	beq.n	8003a3e <fsm_exit_state+0x6e>
					printf("\r\nLeaving Encoder Mode\r\n");
 8003a38:	483a      	ldr	r0, [pc, #232]	; (8003b24 <fsm_exit_state+0x154>)
 8003a3a:	f009 fac3 	bl	800cfc4 <puts>
				}
				fsmstate->ready = 1;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	70da      	strb	r2, [r3, #3]
				break;
 8003a44:	e066      	b.n	8003b14 <fsm_exit_state+0x144>
			case MOTOR_MODE:
				/* Don't stop commutating if there are high currents or FW happening */
				//if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
				if (fsmstate->print_uart_msg){
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	791b      	ldrb	r3, [r3, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <fsm_exit_state+0x84>
					printf("\r\nLeaving Motor Mode\r\n");
 8003a4e:	4836      	ldr	r0, [pc, #216]	; (8003b28 <fsm_exit_state+0x158>)
 8003a50:	f009 fab8 	bl	800cfc4 <puts>
				}
				fsmstate->ready = 1;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	70da      	strb	r2, [r3, #3]
				drv_disable_gd(drv);
 8003a5a:	4b34      	ldr	r3, [pc, #208]	; (8003b2c <fsm_exit_state+0x15c>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	2100      	movs	r1, #0
 8003a60:	4611      	mov	r1, r2
 8003a62:	889a      	ldrh	r2, [r3, #4]
 8003a64:	2300      	movs	r3, #0
 8003a66:	f362 030f 	bfi	r3, r2, #0, #16
 8003a6a:	4608      	mov	r0, r1
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	f7fe fcbe 	bl	80023ee <drv_disable_gd>
				reset_foc(&controller);
 8003a72:	482f      	ldr	r0, [pc, #188]	; (8003b30 <fsm_exit_state+0x160>)
 8003a74:	f7ff f98a 	bl	8002d8c <reset_foc>
				GPIO_DISABLE;
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a7e:	482d      	ldr	r0, [pc, #180]	; (8003b34 <fsm_exit_state+0x164>)
 8003a80:	f005 fa92 	bl	8008fa8 <HAL_GPIO_WritePin>
				LED_LOW;
 8003a84:	2200      	movs	r2, #0
 8003a86:	2120      	movs	r1, #32
 8003a88:	482b      	ldr	r0, [pc, #172]	; (8003b38 <fsm_exit_state+0x168>)
 8003a8a:	f005 fa8d 	bl	8008fa8 <HAL_GPIO_WritePin>
				//}
				zero_commands(&controller);		// Set commands to zero
 8003a8e:	4828      	ldr	r0, [pc, #160]	; (8003b30 <fsm_exit_state+0x160>)
 8003a90:	f7ff fdb2 	bl	80035f8 <zero_commands>
				break;
 8003a94:	e03e      	b.n	8003b14 <fsm_exit_state+0x144>
			case ENCODER_CALIBRATE:
				if (fsmstate->print_uart_msg){
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	791b      	ldrb	r3, [r3, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <fsm_exit_state+0xd4>
					printf("\r\nExiting Encoder Calibration Mode\r\n");
 8003a9e:	4827      	ldr	r0, [pc, #156]	; (8003b3c <fsm_exit_state+0x16c>)
 8003aa0:	f009 fa90 	bl	800cfc4 <puts>
				}
				GPIO_DISABLE;
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003aaa:	4822      	ldr	r0, [pc, #136]	; (8003b34 <fsm_exit_state+0x164>)
 8003aac:	f005 fa7c 	bl	8008fa8 <HAL_GPIO_WritePin>
				drv_disable_gd(drv);
 8003ab0:	4b1e      	ldr	r3, [pc, #120]	; (8003b2c <fsm_exit_state+0x15c>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	889a      	ldrh	r2, [r3, #4]
 8003aba:	2300      	movs	r3, #0
 8003abc:	f362 030f 	bfi	r3, r2, #0, #16
 8003ac0:	4608      	mov	r0, r1
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	f7fe fc93 	bl	80023ee <drv_disable_gd>
				//free(error_array);
				//free(lut_array);

				fsmstate->ready = 1;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	70da      	strb	r2, [r3, #3]
				break;
 8003ace:	e021      	b.n	8003b14 <fsm_exit_state+0x144>
			case HALL_CALIBRATE:
				if (fsmstate->print_uart_msg){
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	791b      	ldrb	r3, [r3, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <fsm_exit_state+0x10e>
					printf("\r\nExiting Hall Calibration Mode\r\n");
 8003ad8:	4819      	ldr	r0, [pc, #100]	; (8003b40 <fsm_exit_state+0x170>)
 8003ada:	f009 fa73 	bl	800cfc4 <puts>
				}
				GPIO_DISABLE;
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ae4:	4813      	ldr	r0, [pc, #76]	; (8003b34 <fsm_exit_state+0x164>)
 8003ae6:	f005 fa5f 	bl	8008fa8 <HAL_GPIO_WritePin>
				LED_LOW;
 8003aea:	2200      	movs	r2, #0
 8003aec:	2120      	movs	r1, #32
 8003aee:	4812      	ldr	r0, [pc, #72]	; (8003b38 <fsm_exit_state+0x168>)
 8003af0:	f005 fa5a 	bl	8008fa8 <HAL_GPIO_WritePin>
				drv_disable_gd(drv);
 8003af4:	4b0d      	ldr	r3, [pc, #52]	; (8003b2c <fsm_exit_state+0x15c>)
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	2100      	movs	r1, #0
 8003afa:	4611      	mov	r1, r2
 8003afc:	889a      	ldrh	r2, [r3, #4]
 8003afe:	2300      	movs	r3, #0
 8003b00:	f362 030f 	bfi	r3, r2, #0, #16
 8003b04:	4608      	mov	r0, r1
 8003b06:	4619      	mov	r1, r3
 8003b08:	f7fe fc71 	bl	80023ee <drv_disable_gd>
				fsmstate->ready = 1;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	70da      	strb	r2, [r3, #3]
				break;
 8003b12:	bf00      	nop
		}

 }
 8003b14:	bf00      	nop
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	08010cc0 	.word	0x08010cc0
 8003b20:	08010cd8 	.word	0x08010cd8
 8003b24:	08010cf0 	.word	0x08010cf0
 8003b28:	08010d08 	.word	0x08010d08
 8003b2c:	20009498 	.word	0x20009498
 8003b30:	2000085c 	.word	0x2000085c
 8003b34:	40020000 	.word	0x40020000
 8003b38:	40020800 	.word	0x40020800
 8003b3c:	08010d20 	.word	0x08010d20
 8003b40:	08010d44 	.word	0x08010d44

08003b44 <update_fsm>:

 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
	if(fsm_input == MENU_CMD){	// escape to exit to rest mode
 8003b50:	78fb      	ldrb	r3, [r7, #3]
 8003b52:	2b1b      	cmp	r3, #27
 8003b54:	d10d      	bne.n	8003b72 <update_fsm+0x2e>
		fsmstate->next_state = MENU_MODE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	705a      	strb	r2, [r3, #1]
		fsmstate->ready = 0;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	70da      	strb	r2, [r3, #3]
		if (fsmstate->print_uart_msg){
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	791b      	ldrb	r3, [r3, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 8097 	beq.w	8003c9a <update_fsm+0x156>
			enter_menu_state();
 8003b6c:	f000 f89a 	bl	8003ca4 <enter_menu_state>
		}
		return;
 8003b70:	e093      	b.n	8003c9a <update_fsm+0x156>
	}
	switch(fsmstate->state){
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2b06      	cmp	r3, #6
 8003b78:	f200 8090 	bhi.w	8003c9c <update_fsm+0x158>
 8003b7c:	a201      	add	r2, pc, #4	; (adr r2, 8003b84 <update_fsm+0x40>)
 8003b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b82:	bf00      	nop
 8003b84:	08003ba1 	.word	0x08003ba1
 8003b88:	08003c9d 	.word	0x08003c9d
 8003b8c:	08003c9d 	.word	0x08003c9d
 8003b90:	08003c9d 	.word	0x08003c9d
 8003b94:	08003c61 	.word	0x08003c61
 8003b98:	08003c9d 	.word	0x08003c9d
 8003b9c:	08003c9d 	.word	0x08003c9d
		case MENU_MODE:
			switch (fsm_input){
 8003ba0:	78fb      	ldrb	r3, [r7, #3]
 8003ba2:	3b63      	subs	r3, #99	; 0x63
 8003ba4:	2b17      	cmp	r3, #23
 8003ba6:	d859      	bhi.n	8003c5c <update_fsm+0x118>
 8003ba8:	a201      	add	r2, pc, #4	; (adr r2, 8003bb0 <update_fsm+0x6c>)
 8003baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bae:	bf00      	nop
 8003bb0:	08003c11 	.word	0x08003c11
 8003bb4:	08003c5d 	.word	0x08003c5d
 8003bb8:	08003c2d 	.word	0x08003c2d
 8003bbc:	08003c5d 	.word	0x08003c5d
 8003bc0:	08003c5d 	.word	0x08003c5d
 8003bc4:	08003c4f 	.word	0x08003c4f
 8003bc8:	08003c5d 	.word	0x08003c5d
 8003bcc:	08003c5d 	.word	0x08003c5d
 8003bd0:	08003c5d 	.word	0x08003c5d
 8003bd4:	08003c5d 	.word	0x08003c5d
 8003bd8:	08003c1f 	.word	0x08003c1f
 8003bdc:	08003c5d 	.word	0x08003c5d
 8003be0:	08003c5d 	.word	0x08003c5d
 8003be4:	08003c5d 	.word	0x08003c5d
 8003be8:	08003c5d 	.word	0x08003c5d
 8003bec:	08003c5d 	.word	0x08003c5d
 8003bf0:	08003c3b 	.word	0x08003c3b
 8003bf4:	08003c5d 	.word	0x08003c5d
 8003bf8:	08003c5d 	.word	0x08003c5d
 8003bfc:	08003c5d 	.word	0x08003c5d
 8003c00:	08003c5d 	.word	0x08003c5d
 8003c04:	08003c5d 	.word	0x08003c5d
 8003c08:	08003c5d 	.word	0x08003c5d
 8003c0c:	08003c49 	.word	0x08003c49
				case ENCODER_CAL_CMD:
					fsmstate->next_state = ENCODER_CALIBRATE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2205      	movs	r2, #5
 8003c14:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	70da      	strb	r2, [r3, #3]
					break;
 8003c1c:	e01f      	b.n	8003c5e <update_fsm+0x11a>
				case MOTOR_CMD:
					fsmstate->next_state = MOTOR_MODE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2202      	movs	r2, #2
 8003c22:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	70da      	strb	r2, [r3, #3]
					break;
 8003c2a:	e018      	b.n	8003c5e <update_fsm+0x11a>
				case ENCODER_CMD:
					fsmstate->next_state = ENCODER_MODE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2206      	movs	r2, #6
 8003c30:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	70da      	strb	r2, [r3, #3]
					break;
 8003c38:	e011      	b.n	8003c5e <update_fsm+0x11a>
				case SETUP_CMD:
					fsmstate->next_state = SETUP_MODE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	70da      	strb	r2, [r3, #3]
					break;
 8003c46:	e00a      	b.n	8003c5e <update_fsm+0x11a>
				case ZERO_CMD:
					encoder_set_zero();
 8003c48:	f000 fafe 	bl	8004248 <encoder_set_zero>
					break;
 8003c4c:	e007      	b.n	8003c5e <update_fsm+0x11a>
				case HALL_CAL_CMD:
					fsmstate->next_state = HALL_CALIBRATE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	70da      	strb	r2, [r3, #3]
					break;
 8003c5a:	e000      	b.n	8003c5e <update_fsm+0x11a>
				default:
					break;
 8003c5c:	bf00      	nop
				}
			break;
 8003c5e:	e01d      	b.n	8003c9c <update_fsm+0x158>
		case SETUP_MODE:
			if(fsm_input == ENTER_CMD){
 8003c60:	78fb      	ldrb	r3, [r7, #3]
 8003c62:	2b0d      	cmp	r3, #13
 8003c64:	d103      	bne.n	8003c6e <update_fsm+0x12a>
				process_user_input(fsmstate);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fa34 	bl	80040d4 <process_user_input>
				break;
 8003c6c:	e016      	b.n	8003c9c <update_fsm+0x158>
			}
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	7b5b      	ldrb	r3, [r3, #13]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d103      	bne.n	8003c7e <update_fsm+0x13a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	78fa      	ldrb	r2, [r7, #3]
 8003c7a:	739a      	strb	r2, [r3, #14]
 8003c7c:	e006      	b.n	8003c8c <update_fsm+0x148>
			else{
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	7b5b      	ldrb	r3, [r3, #13]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	4413      	add	r3, r2
 8003c88:	78fa      	ldrb	r2, [r7, #3]
 8003c8a:	715a      	strb	r2, [r3, #5]
				//fsmstate->bytecount = fsmstate->bytecount%(sizeof(fsmstate->cmd_buff)/sizeof(fsmstate->cmd_buff[0])); // reset when buffer is full
			}
			fsmstate->bytecount++;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	7b5b      	ldrb	r3, [r3, #13]
 8003c90:	3301      	adds	r3, #1
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	735a      	strb	r2, [r3, #13]
			/* If enter is typed, process user input */

			break;
 8003c98:	e000      	b.n	8003c9c <update_fsm+0x158>
		return;
 8003c9a:	bf00      	nop
			break;
		case MOTOR_MODE:
			break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop

08003ca4 <enter_menu_state>:


 void enter_menu_state(void){
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r");
 8003ca8:	480c      	ldr	r0, [pc, #48]	; (8003cdc <enter_menu_state+0x38>)
 8003caa:	f009 f905 	bl	800ceb8 <iprintf>
	    printf(" Commands:\n\r");
 8003cae:	480c      	ldr	r0, [pc, #48]	; (8003ce0 <enter_menu_state+0x3c>)
 8003cb0:	f009 f902 	bl	800ceb8 <iprintf>
	    printf(" m - Motor Mode\n\r");
 8003cb4:	480b      	ldr	r0, [pc, #44]	; (8003ce4 <enter_menu_state+0x40>)
 8003cb6:	f009 f8ff 	bl	800ceb8 <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 8003cba:	480b      	ldr	r0, [pc, #44]	; (8003ce8 <enter_menu_state+0x44>)
 8003cbc:	f009 f8fc 	bl	800ceb8 <iprintf>
	    printf(" s - Setup\n\r");
 8003cc0:	480a      	ldr	r0, [pc, #40]	; (8003cec <enter_menu_state+0x48>)
 8003cc2:	f009 f8f9 	bl	800ceb8 <iprintf>
	    printf(" e - Display Encoder\n\r");
 8003cc6:	480a      	ldr	r0, [pc, #40]	; (8003cf0 <enter_menu_state+0x4c>)
 8003cc8:	f009 f8f6 	bl	800ceb8 <iprintf>
	    printf(" z - Set Zero Position\n\r");
 8003ccc:	4809      	ldr	r0, [pc, #36]	; (8003cf4 <enter_menu_state+0x50>)
 8003cce:	f009 f8f3 	bl	800ceb8 <iprintf>
	    printf(" esc - Exit to Menu\n\r");
 8003cd2:	4809      	ldr	r0, [pc, #36]	; (8003cf8 <enter_menu_state+0x54>)
 8003cd4:	f009 f8f0 	bl	800ceb8 <iprintf>

	    //gpio.led->write(0);
 }
 8003cd8:	bf00      	nop
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	08010d68 	.word	0x08010d68
 8003ce0:	08010d6c 	.word	0x08010d6c
 8003ce4:	08010d7c 	.word	0x08010d7c
 8003ce8:	08010d90 	.word	0x08010d90
 8003cec:	08010dac 	.word	0x08010dac
 8003cf0:	08010dbc 	.word	0x08010dbc
 8003cf4:	08010dd4 	.word	0x08010dd4
 8003cf8:	08010df0 	.word	0x08010df0

08003cfc <enter_setup_state>:

 void enter_setup_state(void){
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af04      	add	r7, sp, #16
	    printf("\r\n Configuration Options \n\r");
 8003d02:	4899      	ldr	r0, [pc, #612]	; (8003f68 <enter_setup_state+0x26c>)
 8003d04:	f009 f8d8 	bl	800ceb8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 8003d08:	4b98      	ldr	r3, [pc, #608]	; (8003f6c <enter_setup_state+0x270>)
 8003d0a:	9301      	str	r3, [sp, #4]
 8003d0c:	4b98      	ldr	r3, [pc, #608]	; (8003f70 <enter_setup_state+0x274>)
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	4b98      	ldr	r3, [pc, #608]	; (8003f74 <enter_setup_state+0x278>)
 8003d12:	4a99      	ldr	r2, [pc, #612]	; (8003f78 <enter_setup_state+0x27c>)
 8003d14:	4999      	ldr	r1, [pc, #612]	; (8003f7c <enter_setup_state+0x280>)
 8003d16:	489a      	ldr	r0, [pc, #616]	; (8003f80 <enter_setup_state+0x284>)
 8003d18:	f009 f8ce 	bl	800ceb8 <iprintf>
	    printf("\r\n Motor:\r\n");
 8003d1c:	4899      	ldr	r0, [pc, #612]	; (8003f84 <enter_setup_state+0x288>)
 8003d1e:	f009 f951 	bl	800cfc4 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio",                                "0",   "-",      GR);
 8003d22:	4b99      	ldr	r3, [pc, #612]	; (8003f88 <enter_setup_state+0x28c>)
 8003d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fc fc3e 	bl	80005a8 <__aeabi_f2d>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d34:	4b95      	ldr	r3, [pc, #596]	; (8003f8c <enter_setup_state+0x290>)
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	4b95      	ldr	r3, [pc, #596]	; (8003f90 <enter_setup_state+0x294>)
 8003d3a:	4a96      	ldr	r2, [pc, #600]	; (8003f94 <enter_setup_state+0x298>)
 8003d3c:	4996      	ldr	r1, [pc, #600]	; (8003f98 <enter_setup_state+0x29c>)
 8003d3e:	4897      	ldr	r0, [pc, #604]	; (8003f9c <enter_setup_state+0x2a0>)
 8003d40:	f009 f8ba 	bl	800ceb8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "t", "Torque Constant (N-m/A)",                   "0",   "-",      KT);
 8003d44:	4b90      	ldr	r3, [pc, #576]	; (8003f88 <enter_setup_state+0x28c>)
 8003d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fc fc2d 	bl	80005a8 <__aeabi_f2d>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d56:	4b8d      	ldr	r3, [pc, #564]	; (8003f8c <enter_setup_state+0x290>)
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	4b8d      	ldr	r3, [pc, #564]	; (8003f90 <enter_setup_state+0x294>)
 8003d5c:	4a90      	ldr	r2, [pc, #576]	; (8003fa0 <enter_setup_state+0x2a4>)
 8003d5e:	4991      	ldr	r1, [pc, #580]	; (8003fa4 <enter_setup_state+0x2a8>)
 8003d60:	4891      	ldr	r0, [pc, #580]	; (8003fa8 <enter_setup_state+0x2ac>)
 8003d62:	f009 f8a9 	bl	800ceb8 <iprintf>
	    printf("\r\n Control:\r\n");
 8003d66:	4891      	ldr	r0, [pc, #580]	; (8003fac <enter_setup_state+0x2b0>)
 8003d68:	f009 f92c 	bl	800cfc4 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "b", "Current Bandwidth (Hz)",                    "100", "2000",   I_BW);
 8003d6c:	4b86      	ldr	r3, [pc, #536]	; (8003f88 <enter_setup_state+0x28c>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fc fc19 	bl	80005a8 <__aeabi_f2d>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d7e:	4b8c      	ldr	r3, [pc, #560]	; (8003fb0 <enter_setup_state+0x2b4>)
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	4b8c      	ldr	r3, [pc, #560]	; (8003fb4 <enter_setup_state+0x2b8>)
 8003d84:	4a8c      	ldr	r2, [pc, #560]	; (8003fb8 <enter_setup_state+0x2bc>)
 8003d86:	498d      	ldr	r1, [pc, #564]	; (8003fbc <enter_setup_state+0x2c0>)
 8003d88:	4884      	ldr	r0, [pc, #528]	; (8003f9c <enter_setup_state+0x2a0>)
 8003d8a:	f009 f895 	bl	800ceb8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "l", "Current Limit (A)",                         "0.0", "75.0",   I_MAX);
 8003d8e:	4b7e      	ldr	r3, [pc, #504]	; (8003f88 <enter_setup_state+0x28c>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fc fc08 	bl	80005a8 <__aeabi_f2d>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003da0:	4b87      	ldr	r3, [pc, #540]	; (8003fc0 <enter_setup_state+0x2c4>)
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	4b87      	ldr	r3, [pc, #540]	; (8003fc4 <enter_setup_state+0x2c8>)
 8003da6:	4a88      	ldr	r2, [pc, #544]	; (8003fc8 <enter_setup_state+0x2cc>)
 8003da8:	4988      	ldr	r1, [pc, #544]	; (8003fcc <enter_setup_state+0x2d0>)
 8003daa:	487c      	ldr	r0, [pc, #496]	; (8003f9c <enter_setup_state+0x2a0>)
 8003dac:	f009 f884 	bl	800ceb8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "p", "Max Position Setpoint (rad)",               "-",   "-",      P_MAX);
 8003db0:	4b75      	ldr	r3, [pc, #468]	; (8003f88 <enter_setup_state+0x28c>)
 8003db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fc fbf7 	bl	80005a8 <__aeabi_f2d>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003dc2:	4b72      	ldr	r3, [pc, #456]	; (8003f8c <enter_setup_state+0x290>)
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	4b71      	ldr	r3, [pc, #452]	; (8003f8c <enter_setup_state+0x290>)
 8003dc8:	4a81      	ldr	r2, [pc, #516]	; (8003fd0 <enter_setup_state+0x2d4>)
 8003dca:	4982      	ldr	r1, [pc, #520]	; (8003fd4 <enter_setup_state+0x2d8>)
 8003dcc:	4873      	ldr	r0, [pc, #460]	; (8003f9c <enter_setup_state+0x2a0>)
 8003dce:	f009 f873 	bl	800ceb8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "v", "Max Velocity Setpoint (rad)/s",             "-",   "-",      V_MAX);
 8003dd2:	4b6d      	ldr	r3, [pc, #436]	; (8003f88 <enter_setup_state+0x28c>)
 8003dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fc fbe6 	bl	80005a8 <__aeabi_f2d>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003de4:	4b69      	ldr	r3, [pc, #420]	; (8003f8c <enter_setup_state+0x290>)
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	4b68      	ldr	r3, [pc, #416]	; (8003f8c <enter_setup_state+0x290>)
 8003dea:	4a7b      	ldr	r2, [pc, #492]	; (8003fd8 <enter_setup_state+0x2dc>)
 8003dec:	497b      	ldr	r1, [pc, #492]	; (8003fdc <enter_setup_state+0x2e0>)
 8003dee:	486b      	ldr	r0, [pc, #428]	; (8003f9c <enter_setup_state+0x2a0>)
 8003df0:	f009 f862 	bl	800ceb8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "T", "Max Torque Setpoint (rad)/s",               "-",   "-",      T_MAX);
 8003df4:	4b64      	ldr	r3, [pc, #400]	; (8003f88 <enter_setup_state+0x28c>)
 8003df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fc fbd5 	bl	80005a8 <__aeabi_f2d>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e06:	4b61      	ldr	r3, [pc, #388]	; (8003f8c <enter_setup_state+0x290>)
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	4b60      	ldr	r3, [pc, #384]	; (8003f8c <enter_setup_state+0x290>)
 8003e0c:	4a74      	ldr	r2, [pc, #464]	; (8003fe0 <enter_setup_state+0x2e4>)
 8003e0e:	4975      	ldr	r1, [pc, #468]	; (8003fe4 <enter_setup_state+0x2e8>)
 8003e10:	4862      	ldr	r0, [pc, #392]	; (8003f9c <enter_setup_state+0x2a0>)
 8003e12:	f009 f851 	bl	800ceb8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "k", "Max Gain for Position (N-m/rad)",           "0.0", "1000.0", KP_MAX);
 8003e16:	4b5c      	ldr	r3, [pc, #368]	; (8003f88 <enter_setup_state+0x28c>)
 8003e18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fc fbc4 	bl	80005a8 <__aeabi_f2d>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e28:	4b6f      	ldr	r3, [pc, #444]	; (8003fe8 <enter_setup_state+0x2ec>)
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	4b65      	ldr	r3, [pc, #404]	; (8003fc4 <enter_setup_state+0x2c8>)
 8003e2e:	4a6f      	ldr	r2, [pc, #444]	; (8003fec <enter_setup_state+0x2f0>)
 8003e30:	496f      	ldr	r1, [pc, #444]	; (8003ff0 <enter_setup_state+0x2f4>)
 8003e32:	485a      	ldr	r0, [pc, #360]	; (8003f9c <enter_setup_state+0x2a0>)
 8003e34:	f009 f840 	bl	800ceb8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "i", "Max Integral Gain for Position (N-m*s/rad)","0.0", "10.0",   KI_MAX);
 8003e38:	4b53      	ldr	r3, [pc, #332]	; (8003f88 <enter_setup_state+0x28c>)
 8003e3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fc fbb3 	bl	80005a8 <__aeabi_f2d>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e4a:	4b6a      	ldr	r3, [pc, #424]	; (8003ff4 <enter_setup_state+0x2f8>)
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	4b5d      	ldr	r3, [pc, #372]	; (8003fc4 <enter_setup_state+0x2c8>)
 8003e50:	4a69      	ldr	r2, [pc, #420]	; (8003ff8 <enter_setup_state+0x2fc>)
 8003e52:	496a      	ldr	r1, [pc, #424]	; (8003ffc <enter_setup_state+0x300>)
 8003e54:	4851      	ldr	r0, [pc, #324]	; (8003f9c <enter_setup_state+0x2a0>)
 8003e56:	f009 f82f 	bl	800ceb8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "d", "Max Gain for Velocity (N-m/rad/s)",         "0.0", "5.0",    KD_MAX);
 8003e5a:	4b4b      	ldr	r3, [pc, #300]	; (8003f88 <enter_setup_state+0x28c>)
 8003e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fc fba2 	bl	80005a8 <__aeabi_f2d>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e6c:	4b64      	ldr	r3, [pc, #400]	; (8004000 <enter_setup_state+0x304>)
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	4b54      	ldr	r3, [pc, #336]	; (8003fc4 <enter_setup_state+0x2c8>)
 8003e72:	4a64      	ldr	r2, [pc, #400]	; (8004004 <enter_setup_state+0x308>)
 8003e74:	4964      	ldr	r1, [pc, #400]	; (8004008 <enter_setup_state+0x30c>)
 8003e76:	4849      	ldr	r0, [pc, #292]	; (8003f9c <enter_setup_state+0x2a0>)
 8003e78:	f009 f81e 	bl	800ceb8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "f", "FW Current Limit (A)",                      "0.0", "33.0",   I_FW_MAX);
 8003e7c:	4b42      	ldr	r3, [pc, #264]	; (8003f88 <enter_setup_state+0x28c>)
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fc fb91 	bl	80005a8 <__aeabi_f2d>
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e8e:	4b5f      	ldr	r3, [pc, #380]	; (800400c <enter_setup_state+0x310>)
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	4b4c      	ldr	r3, [pc, #304]	; (8003fc4 <enter_setup_state+0x2c8>)
 8003e94:	4a5e      	ldr	r2, [pc, #376]	; (8004010 <enter_setup_state+0x314>)
 8003e96:	495f      	ldr	r1, [pc, #380]	; (8004014 <enter_setup_state+0x318>)
 8003e98:	4840      	ldr	r0, [pc, #256]	; (8003f9c <enter_setup_state+0x2a0>)
 8003e9a:	f009 f80d 	bl	800ceb8 <iprintf>
//	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)",                "0",   "150",    TEMP_MAX);
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "c", "Continuous Current (A)",                    "0.0", "40.0",   I_MAX_CONT);
 8003e9e:	4b3a      	ldr	r3, [pc, #232]	; (8003f88 <enter_setup_state+0x28c>)
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fc fb80 	bl	80005a8 <__aeabi_f2d>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003eb0:	4b59      	ldr	r3, [pc, #356]	; (8004018 <enter_setup_state+0x31c>)
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	4b43      	ldr	r3, [pc, #268]	; (8003fc4 <enter_setup_state+0x2c8>)
 8003eb6:	4a59      	ldr	r2, [pc, #356]	; (800401c <enter_setup_state+0x320>)
 8003eb8:	4959      	ldr	r1, [pc, #356]	; (8004020 <enter_setup_state+0x324>)
 8003eba:	4838      	ldr	r0, [pc, #224]	; (8003f9c <enter_setup_state+0x2a0>)
 8003ebc:	f008 fffc 	bl	800ceb8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "a", "Calibration Current (A)",                   "0.0", "20.0",   I_CAL);
 8003ec0:	4b31      	ldr	r3, [pc, #196]	; (8003f88 <enter_setup_state+0x28c>)
 8003ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7fc fb6f 	bl	80005a8 <__aeabi_f2d>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ed2:	4b54      	ldr	r3, [pc, #336]	; (8004024 <enter_setup_state+0x328>)
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	4b3b      	ldr	r3, [pc, #236]	; (8003fc4 <enter_setup_state+0x2c8>)
 8003ed8:	4a53      	ldr	r2, [pc, #332]	; (8004028 <enter_setup_state+0x32c>)
 8003eda:	4954      	ldr	r1, [pc, #336]	; (800402c <enter_setup_state+0x330>)
 8003edc:	482f      	ldr	r0, [pc, #188]	; (8003f9c <enter_setup_state+0x2a0>)
 8003ede:	f008 ffeb 	bl	800ceb8 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %d\n\r",   "r", "Hall Calibration Direction",                "-1",  "1",      HALL_CAL_DIR);
 8003ee2:	4b53      	ldr	r3, [pc, #332]	; (8004030 <enter_setup_state+0x334>)
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	9301      	str	r3, [sp, #4]
 8003ee8:	4b52      	ldr	r3, [pc, #328]	; (8004034 <enter_setup_state+0x338>)
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	4b52      	ldr	r3, [pc, #328]	; (8004038 <enter_setup_state+0x33c>)
 8003eee:	4a53      	ldr	r2, [pc, #332]	; (800403c <enter_setup_state+0x340>)
 8003ef0:	4953      	ldr	r1, [pc, #332]	; (8004040 <enter_setup_state+0x344>)
 8003ef2:	4854      	ldr	r0, [pc, #336]	; (8004044 <enter_setup_state+0x348>)
 8003ef4:	f008 ffe0 	bl	800ceb8 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "e", "Hall Calibration offset",                   "0.0", "143.0",  HALL_CAL_OFFSET);
 8003ef8:	4b23      	ldr	r3, [pc, #140]	; (8003f88 <enter_setup_state+0x28c>)
 8003efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fc fb53 	bl	80005a8 <__aeabi_f2d>
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f0a:	4b4f      	ldr	r3, [pc, #316]	; (8004048 <enter_setup_state+0x34c>)
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	4b2d      	ldr	r3, [pc, #180]	; (8003fc4 <enter_setup_state+0x2c8>)
 8003f10:	4a4e      	ldr	r2, [pc, #312]	; (800404c <enter_setup_state+0x350>)
 8003f12:	494f      	ldr	r1, [pc, #316]	; (8004050 <enter_setup_state+0x354>)
 8003f14:	484f      	ldr	r0, [pc, #316]	; (8004054 <enter_setup_state+0x358>)
 8003f16:	f008 ffcf 	bl	800ceb8 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Hall Calibration Speed",                    "0.0", "10.0",   HALL_CAL_SPEED);
 8003f1a:	4b1b      	ldr	r3, [pc, #108]	; (8003f88 <enter_setup_state+0x28c>)
 8003f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fc fb42 	bl	80005a8 <__aeabi_f2d>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f2c:	4b31      	ldr	r3, [pc, #196]	; (8003ff4 <enter_setup_state+0x2f8>)
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	4b24      	ldr	r3, [pc, #144]	; (8003fc4 <enter_setup_state+0x2c8>)
 8003f32:	4a49      	ldr	r2, [pc, #292]	; (8004058 <enter_setup_state+0x35c>)
 8003f34:	4949      	ldr	r1, [pc, #292]	; (800405c <enter_setup_state+0x360>)
 8003f36:	4847      	ldr	r0, [pc, #284]	; (8004054 <enter_setup_state+0x358>)
 8003f38:	f008 ffbe 	bl	800ceb8 <iprintf>
	    printf("\r\n CAN:\r\n");
 8003f3c:	4848      	ldr	r0, [pc, #288]	; (8004060 <enter_setup_state+0x364>)
 8003f3e:	f009 f841 	bl	800cfc4 <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "n", "CAN ID",                                    "0",   "127",    CAN_ID);
 8003f42:	4b3b      	ldr	r3, [pc, #236]	; (8004030 <enter_setup_state+0x334>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	9301      	str	r3, [sp, #4]
 8003f48:	4b46      	ldr	r3, [pc, #280]	; (8004064 <enter_setup_state+0x368>)
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	4b10      	ldr	r3, [pc, #64]	; (8003f90 <enter_setup_state+0x294>)
 8003f4e:	4a46      	ldr	r2, [pc, #280]	; (8004068 <enter_setup_state+0x36c>)
 8003f50:	4946      	ldr	r1, [pc, #280]	; (800406c <enter_setup_state+0x370>)
 8003f52:	4847      	ldr	r0, [pc, #284]	; (8004070 <enter_setup_state+0x374>)
 8003f54:	f008 ffb0 	bl	800ceb8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN TX ID",                                 "0",   "127",    CAN_MASTER);
 8003f58:	4b35      	ldr	r3, [pc, #212]	; (8004030 <enter_setup_state+0x334>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	9301      	str	r3, [sp, #4]
 8003f5e:	4b41      	ldr	r3, [pc, #260]	; (8004064 <enter_setup_state+0x368>)
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <enter_setup_state+0x294>)
 8003f64:	e086      	b.n	8004074 <enter_setup_state+0x378>
 8003f66:	bf00      	nop
 8003f68:	08010e08 	.word	0x08010e08
 8003f6c:	08010e5c 	.word	0x08010e5c
 8003f70:	08010e6c 	.word	0x08010e6c
 8003f74:	08010e24 	.word	0x08010e24
 8003f78:	08010e28 	.word	0x08010e28
 8003f7c:	08010e34 	.word	0x08010e34
 8003f80:	08010e3c 	.word	0x08010e3c
 8003f84:	08010e70 	.word	0x08010e70
 8003f88:	2000075c 	.word	0x2000075c
 8003f8c:	08010eb0 	.word	0x08010eb0
 8003f90:	08010e7c 	.word	0x08010e7c
 8003f94:	08010e80 	.word	0x08010e80
 8003f98:	08010e8c 	.word	0x08010e8c
 8003f9c:	08010e90 	.word	0x08010e90
 8003fa0:	08010eb4 	.word	0x08010eb4
 8003fa4:	08010ecc 	.word	0x08010ecc
 8003fa8:	08010ed0 	.word	0x08010ed0
 8003fac:	08010ef0 	.word	0x08010ef0
 8003fb0:	08010f20 	.word	0x08010f20
 8003fb4:	08010f00 	.word	0x08010f00
 8003fb8:	08010f04 	.word	0x08010f04
 8003fbc:	08010f1c 	.word	0x08010f1c
 8003fc0:	08010f44 	.word	0x08010f44
 8003fc4:	08010f28 	.word	0x08010f28
 8003fc8:	08010f2c 	.word	0x08010f2c
 8003fcc:	08010f40 	.word	0x08010f40
 8003fd0:	08010f4c 	.word	0x08010f4c
 8003fd4:	08010f68 	.word	0x08010f68
 8003fd8:	08010f6c 	.word	0x08010f6c
 8003fdc:	08010f8c 	.word	0x08010f8c
 8003fe0:	08010f90 	.word	0x08010f90
 8003fe4:	08010fac 	.word	0x08010fac
 8003fe8:	08010fd4 	.word	0x08010fd4
 8003fec:	08010fb0 	.word	0x08010fb0
 8003ff0:	08010fd0 	.word	0x08010fd0
 8003ff4:	0801100c 	.word	0x0801100c
 8003ff8:	08010fdc 	.word	0x08010fdc
 8003ffc:	08011008 	.word	0x08011008
 8004000:	0801103c 	.word	0x0801103c
 8004004:	08011014 	.word	0x08011014
 8004008:	08011038 	.word	0x08011038
 800400c:	0801105c 	.word	0x0801105c
 8004010:	08011040 	.word	0x08011040
 8004014:	08011058 	.word	0x08011058
 8004018:	08011080 	.word	0x08011080
 800401c:	08011064 	.word	0x08011064
 8004020:	0801107c 	.word	0x0801107c
 8004024:	080110a4 	.word	0x080110a4
 8004028:	08011088 	.word	0x08011088
 800402c:	080110a0 	.word	0x080110a0
 8004030:	20009074 	.word	0x20009074
 8004034:	080110ec 	.word	0x080110ec
 8004038:	080110ac 	.word	0x080110ac
 800403c:	080110b0 	.word	0x080110b0
 8004040:	080110cc 	.word	0x080110cc
 8004044:	080110d0 	.word	0x080110d0
 8004048:	0801112c 	.word	0x0801112c
 800404c:	080110f0 	.word	0x080110f0
 8004050:	08011108 	.word	0x08011108
 8004054:	0801110c 	.word	0x0801110c
 8004058:	08011134 	.word	0x08011134
 800405c:	0801114c 	.word	0x0801114c
 8004060:	08011150 	.word	0x08011150
 8004064:	08011188 	.word	0x08011188
 8004068:	0801115c 	.word	0x0801115c
 800406c:	08011164 	.word	0x08011164
 8004070:	08011168 	.word	0x08011168
 8004074:	4a0c      	ldr	r2, [pc, #48]	; (80040a8 <enter_setup_state+0x3ac>)
 8004076:	490d      	ldr	r1, [pc, #52]	; (80040ac <enter_setup_state+0x3b0>)
 8004078:	480d      	ldr	r0, [pc, #52]	; (80040b0 <enter_setup_state+0x3b4>)
 800407a:	f008 ff1d 	bl	800ceb8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r",   "o", "CAN Timeout (cycles)(0 = none)",            "0",   "100000", CAN_TIMEOUT);
 800407e:	4b0d      	ldr	r3, [pc, #52]	; (80040b4 <enter_setup_state+0x3b8>)
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	9301      	str	r3, [sp, #4]
 8004084:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <enter_setup_state+0x3bc>)
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <enter_setup_state+0x3c0>)
 800408a:	4a0d      	ldr	r2, [pc, #52]	; (80040c0 <enter_setup_state+0x3c4>)
 800408c:	490d      	ldr	r1, [pc, #52]	; (80040c4 <enter_setup_state+0x3c8>)
 800408e:	480e      	ldr	r0, [pc, #56]	; (80040c8 <enter_setup_state+0x3cc>)
 8004090:	f008 ff12 	bl	800ceb8 <iprintf>
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 8004094:	480d      	ldr	r0, [pc, #52]	; (80040cc <enter_setup_state+0x3d0>)
 8004096:	f008 ff0f 	bl	800ceb8 <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 800409a:	480d      	ldr	r0, [pc, #52]	; (80040d0 <enter_setup_state+0x3d4>)
 800409c:	f008 ff0c 	bl	800ceb8 <iprintf>
 }
 80040a0:	bf00      	nop
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	0801118c 	.word	0x0801118c
 80040ac:	08011198 	.word	0x08011198
 80040b0:	08011168 	.word	0x08011168
 80040b4:	20009074 	.word	0x20009074
 80040b8:	080111c0 	.word	0x080111c0
 80040bc:	08010e7c 	.word	0x08010e7c
 80040c0:	0801119c 	.word	0x0801119c
 80040c4:	080111bc 	.word	0x080111bc
 80040c8:	080110d0 	.word	0x080110d0
 80040cc:	080111c8 	.word	0x080111c8
 80040d0:	08011214 	.word	0x08011214

080040d4 <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af02      	add	r7, sp, #8
 80040da:	6078      	str	r0, [r7, #4]
	 /* Collects user input from serial (maybe eventually CAN) and updates settings */

	 static char* response;  // Static buffer for the response
	 response = float_reg_update_uart(fsmstate->cmd_id, fsmstate->cmd_buff);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	7b9a      	ldrb	r2, [r3, #14]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3305      	adds	r3, #5
 80040e4:	4619      	mov	r1, r3
 80040e6:	4610      	mov	r0, r2
 80040e8:	f002 ff14 	bl	8006f14 <float_reg_update_uart>
 80040ec:	4603      	mov	r3, r0
 80040ee:	4a24      	ldr	r2, [pc, #144]	; (8004180 <process_user_input+0xac>)
 80040f0:	6013      	str	r3, [r2, #0]
	 if (strcmp(response, STR_INVALID_CMD) == 0){
 80040f2:	4b23      	ldr	r3, [pc, #140]	; (8004180 <process_user_input+0xac>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4923      	ldr	r1, [pc, #140]	; (8004184 <process_user_input+0xb0>)
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fc f889 	bl	8000210 <strcmp>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10a      	bne.n	800411a <process_user_input+0x46>
		 response = int_reg_update_uart(fsmstate->cmd_id, fsmstate->cmd_buff);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	7b9a      	ldrb	r2, [r3, #14]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3305      	adds	r3, #5
 800410c:	4619      	mov	r1, r3
 800410e:	4610      	mov	r0, r2
 8004110:	f003 f81c 	bl	800714c <int_reg_update_uart>
 8004114:	4603      	mov	r3, r0
 8004116:	4a1a      	ldr	r2, [pc, #104]	; (8004180 <process_user_input+0xac>)
 8004118:	6013      	str	r3, [r2, #0]
	 }
	 printf(response);
 800411a:	4b19      	ldr	r3, [pc, #100]	; (8004180 <process_user_input+0xac>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f008 feca 	bl	800ceb8 <iprintf>
		 }
	*/

	 /* Write new settings to flash */

	 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 8004124:	4b18      	ldr	r3, [pc, #96]	; (8004188 <process_user_input+0xb4>)
 8004126:	691a      	ldr	r2, [r3, #16]
 8004128:	9200      	str	r2, [sp, #0]
 800412a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800412c:	f001 fbf2 	bl	8005914 <preference_writer_ready>
 8004130:	4603      	mov	r3, r0
 8004132:	f083 0301 	eor.w	r3, r3, #1
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d002      	beq.n	8004142 <process_user_input+0x6e>
 800413c:	4812      	ldr	r0, [pc, #72]	; (8004188 <process_user_input+0xb4>)
 800413e:	f001 fbda 	bl	80058f6 <preference_writer_open>
	 preference_writer_flush(&prefs);
 8004142:	4811      	ldr	r0, [pc, #68]	; (8004188 <process_user_input+0xb4>)
 8004144:	f001 fbf4 	bl	8005930 <preference_writer_flush>
	 preference_writer_close(&prefs);
 8004148:	480f      	ldr	r0, [pc, #60]	; (8004188 <process_user_input+0xb4>)
 800414a:	f001 fc6f 	bl	8005a2c <preference_writer_close>
	 preference_writer_load(prefs);
 800414e:	4b0e      	ldr	r3, [pc, #56]	; (8004188 <process_user_input+0xb4>)
 8004150:	691a      	ldr	r2, [r3, #16]
 8004152:	9200      	str	r2, [sp, #0]
 8004154:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004156:	f001 fc27 	bl	80059a8 <preference_writer_load>

	 enter_setup_state();
 800415a:	f7ff fdcf 	bl	8003cfc <enter_setup_state>

	 fsmstate->bytecount = 0;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	735a      	strb	r2, [r3, #13]
	 fsmstate->cmd_id = 0;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	739a      	strb	r2, [r3, #14]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	3305      	adds	r3, #5
 800416e:	2208      	movs	r2, #8
 8004170:	2100      	movs	r1, #0
 8004172:	4618      	mov	r0, r3
 8004174:	f008 fa2e 	bl	800c5d4 <memset>
 }
 8004178:	bf00      	nop
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	2000024c 	.word	0x2000024c
 8004184:	08011240 	.word	0x08011240
 8004188:	20000748 	.word	0x20000748

0800418c <enter_motor_mode>:

 void enter_motor_mode(void){
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
	float _f_round, _f_p_des;
	_f_p_des = controller.theta_mech;
 8004192:	4b27      	ldr	r3, [pc, #156]	; (8004230 <enter_motor_mode+0xa4>)
 8004194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004196:	607b      	str	r3, [r7, #4]
	modff(_f_p_des/(2*PI_F),&_f_round);
 8004198:	edd7 7a01 	vldr	s15, [r7, #4]
 800419c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004234 <enter_motor_mode+0xa8>
 80041a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80041a4:	463b      	mov	r3, r7
 80041a6:	4618      	mov	r0, r3
 80041a8:	eeb0 0a47 	vmov.f32	s0, s14
 80041ac:	f007 ff04 	bl	800bfb8 <modff>
	_f_p_des = _f_p_des - _f_round*2*PI_F;
 80041b0:	edd7 7a00 	vldr	s15, [r7]
 80041b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80041b8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004238 <enter_motor_mode+0xac>
 80041bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80041c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041c8:	edc7 7a01 	vstr	s15, [r7, #4]
	if(_f_p_des < 0) _f_p_des = _f_p_des + 2*PI_F;
 80041cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80041d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d8:	d507      	bpl.n	80041ea <enter_motor_mode+0x5e>
 80041da:	edd7 7a01 	vldr	s15, [r7, #4]
 80041de:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004234 <enter_motor_mode+0xa8>
 80041e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041e6:	edc7 7a01 	vstr	s15, [r7, #4]
	controller.p_des = _f_p_des;
 80041ea:	4a11      	ldr	r2, [pc, #68]	; (8004230 <enter_motor_mode+0xa4>)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8

	GPIO_ENABLE;
 80041f2:	2201      	movs	r2, #1
 80041f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80041f8:	4810      	ldr	r0, [pc, #64]	; (800423c <enter_motor_mode+0xb0>)
 80041fa:	f004 fed5 	bl	8008fa8 <HAL_GPIO_WritePin>
	LED_HIGH;
 80041fe:	2201      	movs	r2, #1
 8004200:	2120      	movs	r1, #32
 8004202:	480f      	ldr	r0, [pc, #60]	; (8004240 <enter_motor_mode+0xb4>)
 8004204:	f004 fed0 	bl	8008fa8 <HAL_GPIO_WritePin>
	reset_foc(&controller);
 8004208:	4809      	ldr	r0, [pc, #36]	; (8004230 <enter_motor_mode+0xa4>)
 800420a:	f7fe fdbf 	bl	8002d8c <reset_foc>
	drv_enable_gd(drv);
 800420e:	4b0d      	ldr	r3, [pc, #52]	; (8004244 <enter_motor_mode+0xb8>)
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	2100      	movs	r1, #0
 8004214:	4611      	mov	r1, r2
 8004216:	889a      	ldrh	r2, [r3, #4]
 8004218:	2300      	movs	r3, #0
 800421a:	f362 030f 	bfi	r3, r2, #0, #16
 800421e:	4608      	mov	r0, r1
 8004220:	4619      	mov	r1, r3
 8004222:	f7fe f8ca 	bl	80023ba <drv_enable_gd>
 }
 8004226:	bf00      	nop
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	2000085c 	.word	0x2000085c
 8004234:	40c90fdb 	.word	0x40c90fdb
 8004238:	40490fdb 	.word	0x40490fdb
 800423c:	40020000 	.word	0x40020000
 8004240:	40020800 	.word	0x40020800
 8004244:	20009498 	.word	0x20009498

08004248 <encoder_set_zero>:


 void encoder_set_zero(void){
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
	comm_encoder.m_zero = 0;
 800424e:	4b0d      	ldr	r3, [pc, #52]	; (8004284 <encoder_set_zero+0x3c>)
 8004250:	2200      	movs	r2, #0
 8004252:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	comm_encoder.first_sample = 0;
 8004256:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <encoder_set_zero+0x3c>)
 8004258:	2200      	movs	r2, #0
 800425a:	f883 22dc 	strb.w	r2, [r3, #732]	; 0x2dc
	int zero_count = comm_encoder.count;
 800425e:	4b09      	ldr	r3, [pc, #36]	; (8004284 <encoder_set_zero+0x3c>)
 8004260:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004262:	607b      	str	r3, [r7, #4]
	M_ZERO = zero_count;
 8004264:	4a08      	ldr	r2, [pc, #32]	; (8004288 <encoder_set_zero+0x40>)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6113      	str	r3, [r2, #16]
	ps_sample(&comm_encoder, DT);
 800426a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800428c <encoder_set_zero+0x44>
 800426e:	4805      	ldr	r0, [pc, #20]	; (8004284 <encoder_set_zero+0x3c>)
 8004270:	f001 f956 	bl	8005520 <ps_sample>
	controller.theta_mech = 0;
 8004274:	4b06      	ldr	r3, [pc, #24]	; (8004290 <encoder_set_zero+0x48>)
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	629a      	str	r2, [r3, #40]	; 0x28
 }
 800427c:	bf00      	nop
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20000428 	.word	0x20000428
 8004288:	20009074 	.word	0x20009074
 800428c:	37d1b717 	.word	0x37d1b717
 8004290:	2000085c 	.word	0x2000085c

08004294 <hall_calibrate>:


 void hall_calibrate(FSMStruct * fsmstate){
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
     if(hall_cal.hall_cal_state == CODE_HALL_UNCALIBRATED || hall_cal.hall_cal_state >= CODE_HALL_CAL_SUCCESS );
 800429c:	4bb9      	ldr	r3, [pc, #740]	; (8004584 <hall_calibrate+0x2f0>)
 800429e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 81cf 	beq.w	8004644 <hall_calibrate+0x3b0>
 80042a6:	4bb7      	ldr	r3, [pc, #732]	; (8004584 <hall_calibrate+0x2f0>)
 80042a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	f300 81ca 	bgt.w	8004644 <hall_calibrate+0x3b0>
     else{
    	 // read hall sensor
    	 hall_cal.hall_input = HAL_GPIO_ReadPin(HALL_IO);
 80042b0:	2140      	movs	r1, #64	; 0x40
 80042b2:	48b5      	ldr	r0, [pc, #724]	; (8004588 <hall_calibrate+0x2f4>)
 80042b4:	f004 fe60 	bl	8008f78 <HAL_GPIO_ReadPin>
 80042b8:	4603      	mov	r3, r0
 80042ba:	461a      	mov	r2, r3
 80042bc:	4bb1      	ldr	r3, [pc, #708]	; (8004584 <hall_calibrate+0x2f0>)
 80042be:	601a      	str	r2, [r3, #0]
    	 // calculate new position
    	 if((HALL_CAL_DIR == 1 && controller.theta_mech >= hall_cal.hall_present_pos + 2*PI_F) || (HALL_CAL_DIR == -1 && controller.theta_mech <= hall_cal.hall_present_pos - 2*PI_F)){
 80042c0:	4bb2      	ldr	r3, [pc, #712]	; (800458c <hall_calibrate+0x2f8>)
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d10e      	bne.n	80042e6 <hall_calibrate+0x52>
 80042c8:	4bb1      	ldr	r3, [pc, #708]	; (8004590 <hall_calibrate+0x2fc>)
 80042ca:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80042ce:	4bad      	ldr	r3, [pc, #692]	; (8004584 <hall_calibrate+0x2f0>)
 80042d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80042d4:	eddf 6aaf 	vldr	s13, [pc, #700]	; 8004594 <hall_calibrate+0x300>
 80042d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e4:	da13      	bge.n	800430e <hall_calibrate+0x7a>
 80042e6:	4ba9      	ldr	r3, [pc, #676]	; (800458c <hall_calibrate+0x2f8>)
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ee:	d115      	bne.n	800431c <hall_calibrate+0x88>
 80042f0:	4ba7      	ldr	r3, [pc, #668]	; (8004590 <hall_calibrate+0x2fc>)
 80042f2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80042f6:	4ba3      	ldr	r3, [pc, #652]	; (8004584 <hall_calibrate+0x2f0>)
 80042f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80042fc:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8004594 <hall_calibrate+0x300>
 8004300:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004304:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800430c:	d806      	bhi.n	800431c <hall_calibrate+0x88>
    		 hall_cal.hall_cal_state = CODE_HALL_CAL_FAIL ;
 800430e:	4b9d      	ldr	r3, [pc, #628]	; (8004584 <hall_calibrate+0x2f0>)
 8004310:	2203      	movs	r2, #3
 8004312:	629a      	str	r2, [r3, #40]	; 0x28
    		 fsmstate->next_state = MENU_MODE ;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	705a      	strb	r2, [r3, #1]
 800431a:	e18f      	b.n	800463c <hall_calibrate+0x3a8>
         else{
        	 // rotate the motor forward and backward to read the hall sensor (1: no magnet detected, 0: magnet detected)
        	 // record the position at the moment from 1 to 0 (in_pos), and keep rotating
        	 // record the position at the moment from 0 to 1 (out_pos), and stop rotating.
        	 // calculate the average value of in_pos and out_pos, and rotate the motor to that position slowly
        	 if(hall_cal.hall_input != hall_cal.hall_preinput ) {
 800431c:	4b99      	ldr	r3, [pc, #612]	; (8004584 <hall_calibrate+0x2f0>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	4b98      	ldr	r3, [pc, #608]	; (8004584 <hall_calibrate+0x2f0>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	429a      	cmp	r2, r3
 8004326:	d020      	beq.n	800436a <hall_calibrate+0xd6>
        		 hall_cal.hall_cal_count += 1 ;
 8004328:	4b96      	ldr	r3, [pc, #600]	; (8004584 <hall_calibrate+0x2f0>)
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	3301      	adds	r3, #1
 800432e:	4a95      	ldr	r2, [pc, #596]	; (8004584 <hall_calibrate+0x2f0>)
 8004330:	6253      	str	r3, [r2, #36]	; 0x24
        		 if(hall_cal.hall_input == 0) hall_cal.hall_in_pos = controller.theta_mech ;
 8004332:	4b94      	ldr	r3, [pc, #592]	; (8004584 <hall_calibrate+0x2f0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d104      	bne.n	8004344 <hall_calibrate+0xb0>
 800433a:	4b95      	ldr	r3, [pc, #596]	; (8004590 <hall_calibrate+0x2fc>)
 800433c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433e:	4a91      	ldr	r2, [pc, #580]	; (8004584 <hall_calibrate+0x2f0>)
 8004340:	6153      	str	r3, [r2, #20]
 8004342:	e012      	b.n	800436a <hall_calibrate+0xd6>
        		 else{
        			 hall_cal.hall_out_pos = controller.theta_mech ;
 8004344:	4b92      	ldr	r3, [pc, #584]	; (8004590 <hall_calibrate+0x2fc>)
 8004346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004348:	4a8e      	ldr	r2, [pc, #568]	; (8004584 <hall_calibrate+0x2f0>)
 800434a:	6193      	str	r3, [r2, #24]
        			 hall_cal.hall_mid_pos = (hall_cal.hall_in_pos + hall_cal.hall_out_pos)/2.0f ;
 800434c:	4b8d      	ldr	r3, [pc, #564]	; (8004584 <hall_calibrate+0x2f0>)
 800434e:	ed93 7a05 	vldr	s14, [r3, #20]
 8004352:	4b8c      	ldr	r3, [pc, #560]	; (8004584 <hall_calibrate+0x2f0>)
 8004354:	edd3 7a06 	vldr	s15, [r3, #24]
 8004358:	ee37 7a27 	vadd.f32	s14, s14, s15
 800435c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004360:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004364:	4b87      	ldr	r3, [pc, #540]	; (8004584 <hall_calibrate+0x2f0>)
 8004366:	edc3 7a07 	vstr	s15, [r3, #28]
                 }
             }
             if(hall_cal.hall_cal_count <= 1) hall_cal.hall_cal_pcmd = hall_cal.hall_cal_pcmd + HALL_CAL_DIR*(1.0f/(40000.0f)*HALL_CAL_SPEED ) ;
 800436a:	4b86      	ldr	r3, [pc, #536]	; (8004584 <hall_calibrate+0x2f0>)
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	2b01      	cmp	r3, #1
 8004370:	dc17      	bgt.n	80043a2 <hall_calibrate+0x10e>
 8004372:	4b84      	ldr	r3, [pc, #528]	; (8004584 <hall_calibrate+0x2f0>)
 8004374:	ed93 7a02 	vldr	s14, [r3, #8]
 8004378:	4b84      	ldr	r3, [pc, #528]	; (800458c <hall_calibrate+0x2f8>)
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	ee07 3a90 	vmov	s15, r3
 8004380:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004384:	4b84      	ldr	r3, [pc, #528]	; (8004598 <hall_calibrate+0x304>)
 8004386:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800438a:	ed9f 6a84 	vldr	s12, [pc, #528]	; 800459c <hall_calibrate+0x308>
 800438e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004392:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004396:	ee77 7a27 	vadd.f32	s15, s14, s15
 800439a:	4b7a      	ldr	r3, [pc, #488]	; (8004584 <hall_calibrate+0x2f0>)
 800439c:	edc3 7a02 	vstr	s15, [r3, #8]
 80043a0:	e113      	b.n	80045ca <hall_calibrate+0x336>
             else{
                 if(HALL_CAL_DIR == 1 ){
 80043a2:	4b7a      	ldr	r3, [pc, #488]	; (800458c <hall_calibrate+0x2f8>)
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d17a      	bne.n	80044a0 <hall_calibrate+0x20c>
                     if(HALL_CAL_OFFSET == 0){
 80043aa:	4b7b      	ldr	r3, [pc, #492]	; (8004598 <hall_calibrate+0x304>)
 80043ac:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80043b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80043b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b8:	d132      	bne.n	8004420 <hall_calibrate+0x18c>
                    	 // keep turning
                    	 if(controller.theta_mech >= hall_cal.hall_mid_pos) hall_cal.hall_cal_pcmd = hall_cal.hall_cal_pcmd - HALL_CAL_DIR*1.0f/40000.0f*HALL_CAL_SPEED ;
 80043ba:	4b75      	ldr	r3, [pc, #468]	; (8004590 <hall_calibrate+0x2fc>)
 80043bc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80043c0:	4b70      	ldr	r3, [pc, #448]	; (8004584 <hall_calibrate+0x2f0>)
 80043c2:	edd3 7a07 	vldr	s15, [r3, #28]
 80043c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ce:	db17      	blt.n	8004400 <hall_calibrate+0x16c>
 80043d0:	4b6c      	ldr	r3, [pc, #432]	; (8004584 <hall_calibrate+0x2f0>)
 80043d2:	ed93 7a02 	vldr	s14, [r3, #8]
 80043d6:	4b6d      	ldr	r3, [pc, #436]	; (800458c <hall_calibrate+0x2f8>)
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043e2:	ed9f 6a6f 	vldr	s12, [pc, #444]	; 80045a0 <hall_calibrate+0x30c>
 80043e6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80043ea:	4b6b      	ldr	r3, [pc, #428]	; (8004598 <hall_calibrate+0x304>)
 80043ec:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80043f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043f8:	4b62      	ldr	r3, [pc, #392]	; (8004584 <hall_calibrate+0x2f0>)
 80043fa:	edc3 7a02 	vstr	s15, [r3, #8]
 80043fe:	e0e4      	b.n	80045ca <hall_calibrate+0x336>
                    	 else{
                    		 // stop
                    		 hall_cal.hall_cal_pcmd = 0.0f;
 8004400:	4b60      	ldr	r3, [pc, #384]	; (8004584 <hall_calibrate+0x2f0>)
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	609a      	str	r2, [r3, #8]
                    		 hall_cal.hall_cal_state = CODE_HALL_CAL_SUCCESS; // success
 8004408:	4b5e      	ldr	r3, [pc, #376]	; (8004584 <hall_calibrate+0x2f0>)
 800440a:	2202      	movs	r2, #2
 800440c:	629a      	str	r2, [r3, #40]	; 0x28
                             // zero
                    		 hall_cal.hall_cal_count = 0 ;
 800440e:	4b5d      	ldr	r3, [pc, #372]	; (8004584 <hall_calibrate+0x2f0>)
 8004410:	2200      	movs	r2, #0
 8004412:	625a      	str	r2, [r3, #36]	; 0x24
                    		 encoder_set_zero();
 8004414:	f7ff ff18 	bl	8004248 <encoder_set_zero>
                    		 fsmstate->next_state = MOTOR_MODE ;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	705a      	strb	r2, [r3, #1]
 800441e:	e0d4      	b.n	80045ca <hall_calibrate+0x336>
                         }
                     }
                     else{
                         if(controller.theta_mech <= hall_cal.hall_mid_pos + HALL_CAL_OFFSET*PI_F/180)  hall_cal.hall_cal_pcmd = hall_cal.hall_cal_pcmd + HALL_CAL_DIR*1.0f/40000.0f*HALL_CAL_SPEED ;
 8004420:	4b5b      	ldr	r3, [pc, #364]	; (8004590 <hall_calibrate+0x2fc>)
 8004422:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004426:	4b57      	ldr	r3, [pc, #348]	; (8004584 <hall_calibrate+0x2f0>)
 8004428:	edd3 6a07 	vldr	s13, [r3, #28]
 800442c:	4b5a      	ldr	r3, [pc, #360]	; (8004598 <hall_calibrate+0x304>)
 800442e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8004432:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 80045a4 <hall_calibrate+0x310>
 8004436:	ee27 6a86 	vmul.f32	s12, s15, s12
 800443a:	eddf 5a5b 	vldr	s11, [pc, #364]	; 80045a8 <hall_calibrate+0x314>
 800443e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004446:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800444a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800444e:	d817      	bhi.n	8004480 <hall_calibrate+0x1ec>
 8004450:	4b4c      	ldr	r3, [pc, #304]	; (8004584 <hall_calibrate+0x2f0>)
 8004452:	ed93 7a02 	vldr	s14, [r3, #8]
 8004456:	4b4d      	ldr	r3, [pc, #308]	; (800458c <hall_calibrate+0x2f8>)
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	ee07 3a90 	vmov	s15, r3
 800445e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004462:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 80045a0 <hall_calibrate+0x30c>
 8004466:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800446a:	4b4b      	ldr	r3, [pc, #300]	; (8004598 <hall_calibrate+0x304>)
 800446c:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004470:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004478:	4b42      	ldr	r3, [pc, #264]	; (8004584 <hall_calibrate+0x2f0>)
 800447a:	edc3 7a02 	vstr	s15, [r3, #8]
 800447e:	e0a4      	b.n	80045ca <hall_calibrate+0x336>
                         else{
                        	 // stop
                        	 hall_cal.hall_cal_pcmd = 0.0f;
 8004480:	4b40      	ldr	r3, [pc, #256]	; (8004584 <hall_calibrate+0x2f0>)
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	609a      	str	r2, [r3, #8]
                        	 hall_cal.hall_cal_state = CODE_HALL_CAL_SUCCESS; // success
 8004488:	4b3e      	ldr	r3, [pc, #248]	; (8004584 <hall_calibrate+0x2f0>)
 800448a:	2202      	movs	r2, #2
 800448c:	629a      	str	r2, [r3, #40]	; 0x28
                             // zero
                             hall_cal.hall_cal_count = 0 ;
 800448e:	4b3d      	ldr	r3, [pc, #244]	; (8004584 <hall_calibrate+0x2f0>)
 8004490:	2200      	movs	r2, #0
 8004492:	625a      	str	r2, [r3, #36]	; 0x24
                    		 encoder_set_zero();
 8004494:	f7ff fed8 	bl	8004248 <encoder_set_zero>
                    		 fsmstate->next_state = MOTOR_MODE ;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	705a      	strb	r2, [r3, #1]
 800449e:	e094      	b.n	80045ca <hall_calibrate+0x336>
                         }
                     }
                 }
                 else if(HALL_CAL_DIR == -1){
 80044a0:	4b3a      	ldr	r3, [pc, #232]	; (800458c <hall_calibrate+0x2f8>)
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a8:	f040 808f 	bne.w	80045ca <hall_calibrate+0x336>
                     if(HALL_CAL_OFFSET == 0){
 80044ac:	4b3a      	ldr	r3, [pc, #232]	; (8004598 <hall_calibrate+0x304>)
 80044ae:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80044b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80044b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ba:	d132      	bne.n	8004522 <hall_calibrate+0x28e>
                    	 // keep turning
                         if(controller.theta_mech <= hall_cal.hall_mid_pos) hall_cal.hall_cal_pcmd = hall_cal.hall_cal_pcmd - HALL_CAL_DIR*1.0f/40000.0f*HALL_CAL_SPEED ;
 80044bc:	4b34      	ldr	r3, [pc, #208]	; (8004590 <hall_calibrate+0x2fc>)
 80044be:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80044c2:	4b30      	ldr	r3, [pc, #192]	; (8004584 <hall_calibrate+0x2f0>)
 80044c4:	edd3 7a07 	vldr	s15, [r3, #28]
 80044c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d0:	d817      	bhi.n	8004502 <hall_calibrate+0x26e>
 80044d2:	4b2c      	ldr	r3, [pc, #176]	; (8004584 <hall_calibrate+0x2f0>)
 80044d4:	ed93 7a02 	vldr	s14, [r3, #8]
 80044d8:	4b2c      	ldr	r3, [pc, #176]	; (800458c <hall_calibrate+0x2f8>)
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	ee07 3a90 	vmov	s15, r3
 80044e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044e4:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 80045a0 <hall_calibrate+0x30c>
 80044e8:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80044ec:	4b2a      	ldr	r3, [pc, #168]	; (8004598 <hall_calibrate+0x304>)
 80044ee:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80044f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044fa:	4b22      	ldr	r3, [pc, #136]	; (8004584 <hall_calibrate+0x2f0>)
 80044fc:	edc3 7a02 	vstr	s15, [r3, #8]
 8004500:	e063      	b.n	80045ca <hall_calibrate+0x336>
                         else{
                        	 // stop
                        	 hall_cal.hall_cal_pcmd = 0.0f;
 8004502:	4b20      	ldr	r3, [pc, #128]	; (8004584 <hall_calibrate+0x2f0>)
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	609a      	str	r2, [r3, #8]
                        	 hall_cal.hall_cal_state = CODE_HALL_CAL_SUCCESS; // success
 800450a:	4b1e      	ldr	r3, [pc, #120]	; (8004584 <hall_calibrate+0x2f0>)
 800450c:	2202      	movs	r2, #2
 800450e:	629a      	str	r2, [r3, #40]	; 0x28
                             // zero
                             hall_cal.hall_cal_count = 0 ;
 8004510:	4b1c      	ldr	r3, [pc, #112]	; (8004584 <hall_calibrate+0x2f0>)
 8004512:	2200      	movs	r2, #0
 8004514:	625a      	str	r2, [r3, #36]	; 0x24
                    		 encoder_set_zero();
 8004516:	f7ff fe97 	bl	8004248 <encoder_set_zero>
                    		 fsmstate->next_state = MOTOR_MODE ;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2202      	movs	r2, #2
 800451e:	705a      	strb	r2, [r3, #1]
 8004520:	e053      	b.n	80045ca <hall_calibrate+0x336>
                         }
                     }
                     else{
                    	 // calibrate_offset != 0
                         if(controller.theta_mech >= hall_cal.hall_mid_pos - HALL_CAL_OFFSET*PI_F/180)  hall_cal.hall_cal_pcmd = hall_cal.hall_cal_pcmd + HALL_CAL_DIR*1.0f/40000.0f*HALL_CAL_SPEED ;
 8004522:	4b1b      	ldr	r3, [pc, #108]	; (8004590 <hall_calibrate+0x2fc>)
 8004524:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004528:	4b16      	ldr	r3, [pc, #88]	; (8004584 <hall_calibrate+0x2f0>)
 800452a:	edd3 6a07 	vldr	s13, [r3, #28]
 800452e:	4b1a      	ldr	r3, [pc, #104]	; (8004598 <hall_calibrate+0x304>)
 8004530:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8004534:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 80045a4 <hall_calibrate+0x310>
 8004538:	ee27 6a86 	vmul.f32	s12, s15, s12
 800453c:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80045a8 <hall_calibrate+0x314>
 8004540:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004544:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004548:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800454c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004550:	db2c      	blt.n	80045ac <hall_calibrate+0x318>
 8004552:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <hall_calibrate+0x2f0>)
 8004554:	ed93 7a02 	vldr	s14, [r3, #8]
 8004558:	4b0c      	ldr	r3, [pc, #48]	; (800458c <hall_calibrate+0x2f8>)
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	ee07 3a90 	vmov	s15, r3
 8004560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004564:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 80045a0 <hall_calibrate+0x30c>
 8004568:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800456c:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <hall_calibrate+0x304>)
 800456e:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004572:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800457a:	4b02      	ldr	r3, [pc, #8]	; (8004584 <hall_calibrate+0x2f0>)
 800457c:	edc3 7a02 	vstr	s15, [r3, #8]
 8004580:	e023      	b.n	80045ca <hall_calibrate+0x336>
 8004582:	bf00      	nop
 8004584:	20000708 	.word	0x20000708
 8004588:	40020800 	.word	0x40020800
 800458c:	20009074 	.word	0x20009074
 8004590:	2000085c 	.word	0x2000085c
 8004594:	40c90fdb 	.word	0x40c90fdb
 8004598:	2000075c 	.word	0x2000075c
 800459c:	37d1b717 	.word	0x37d1b717
 80045a0:	471c4000 	.word	0x471c4000
 80045a4:	40490fdb 	.word	0x40490fdb
 80045a8:	43340000 	.word	0x43340000
                         else{
                        	 // stop
                        	 hall_cal.hall_cal_pcmd = 0.0f;
 80045ac:	4b27      	ldr	r3, [pc, #156]	; (800464c <hall_calibrate+0x3b8>)
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	609a      	str	r2, [r3, #8]
                        	 hall_cal.hall_cal_state = CODE_HALL_CAL_SUCCESS; // success
 80045b4:	4b25      	ldr	r3, [pc, #148]	; (800464c <hall_calibrate+0x3b8>)
 80045b6:	2202      	movs	r2, #2
 80045b8:	629a      	str	r2, [r3, #40]	; 0x28
                             // zero
                             hall_cal.hall_cal_count = 0 ;
 80045ba:	4b24      	ldr	r3, [pc, #144]	; (800464c <hall_calibrate+0x3b8>)
 80045bc:	2200      	movs	r2, #0
 80045be:	625a      	str	r2, [r3, #36]	; 0x24
                    		 encoder_set_zero();
 80045c0:	f7ff fe42 	bl	8004248 <encoder_set_zero>
                    		 fsmstate->next_state = MOTOR_MODE ;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	705a      	strb	r2, [r3, #1]
                         }
                     }
                 }
             }
             hall_cal.hall_cal_pcmd = (hall_cal.hall_cal_pcmd>2*PI_F) ? hall_cal.hall_cal_pcmd-=2*PI_F : hall_cal.hall_cal_pcmd ;
 80045ca:	4b20      	ldr	r3, [pc, #128]	; (800464c <hall_calibrate+0x3b8>)
 80045cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80045d0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004650 <hall_calibrate+0x3bc>
 80045d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045dc:	dd0c      	ble.n	80045f8 <hall_calibrate+0x364>
 80045de:	4b1b      	ldr	r3, [pc, #108]	; (800464c <hall_calibrate+0x3b8>)
 80045e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80045e4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004650 <hall_calibrate+0x3bc>
 80045e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80045ec:	4b17      	ldr	r3, [pc, #92]	; (800464c <hall_calibrate+0x3b8>)
 80045ee:	edc3 7a02 	vstr	s15, [r3, #8]
 80045f2:	4b16      	ldr	r3, [pc, #88]	; (800464c <hall_calibrate+0x3b8>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	e001      	b.n	80045fc <hall_calibrate+0x368>
 80045f8:	4b14      	ldr	r3, [pc, #80]	; (800464c <hall_calibrate+0x3b8>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	4a13      	ldr	r2, [pc, #76]	; (800464c <hall_calibrate+0x3b8>)
 80045fe:	6093      	str	r3, [r2, #8]
             hall_cal.hall_cal_pcmd = (hall_cal.hall_cal_pcmd < 0)  ? hall_cal.hall_cal_pcmd+=2*PI_F : hall_cal.hall_cal_pcmd ;
 8004600:	4b12      	ldr	r3, [pc, #72]	; (800464c <hall_calibrate+0x3b8>)
 8004602:	edd3 7a02 	vldr	s15, [r3, #8]
 8004606:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800460a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800460e:	d50c      	bpl.n	800462a <hall_calibrate+0x396>
 8004610:	4b0e      	ldr	r3, [pc, #56]	; (800464c <hall_calibrate+0x3b8>)
 8004612:	edd3 7a02 	vldr	s15, [r3, #8]
 8004616:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004650 <hall_calibrate+0x3bc>
 800461a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800461e:	4b0b      	ldr	r3, [pc, #44]	; (800464c <hall_calibrate+0x3b8>)
 8004620:	edc3 7a02 	vstr	s15, [r3, #8]
 8004624:	4b09      	ldr	r3, [pc, #36]	; (800464c <hall_calibrate+0x3b8>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	e001      	b.n	800462e <hall_calibrate+0x39a>
 800462a:	4b08      	ldr	r3, [pc, #32]	; (800464c <hall_calibrate+0x3b8>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	4a07      	ldr	r2, [pc, #28]	; (800464c <hall_calibrate+0x3b8>)
 8004630:	6093      	str	r3, [r2, #8]
             controller.p_des = hall_cal.hall_cal_pcmd ;
 8004632:	4b06      	ldr	r3, [pc, #24]	; (800464c <hall_calibrate+0x3b8>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	4a07      	ldr	r2, [pc, #28]	; (8004654 <hall_calibrate+0x3c0>)
 8004638:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
         }
         hall_cal.hall_preinput = hall_cal.hall_input ;
 800463c:	4b03      	ldr	r3, [pc, #12]	; (800464c <hall_calibrate+0x3b8>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a02      	ldr	r2, [pc, #8]	; (800464c <hall_calibrate+0x3b8>)
 8004642:	6053      	str	r3, [r2, #4]
     }
 }
 8004644:	bf00      	nop
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	20000708 	.word	0x20000708
 8004650:	40c90fdb 	.word	0x40c90fdb
 8004654:	2000085c 	.word	0x2000085c

08004658 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b08a      	sub	sp, #40	; 0x28
 800465c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800465e:	f107 0314 	add.w	r3, r7, #20
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	605a      	str	r2, [r3, #4]
 8004668:	609a      	str	r2, [r3, #8]
 800466a:	60da      	str	r2, [r3, #12]
 800466c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800466e:	2300      	movs	r3, #0
 8004670:	613b      	str	r3, [r7, #16]
 8004672:	4b3d      	ldr	r3, [pc, #244]	; (8004768 <MX_GPIO_Init+0x110>)
 8004674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004676:	4a3c      	ldr	r2, [pc, #240]	; (8004768 <MX_GPIO_Init+0x110>)
 8004678:	f043 0304 	orr.w	r3, r3, #4
 800467c:	6313      	str	r3, [r2, #48]	; 0x30
 800467e:	4b3a      	ldr	r3, [pc, #232]	; (8004768 <MX_GPIO_Init+0x110>)
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	f003 0304 	and.w	r3, r3, #4
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	4b36      	ldr	r3, [pc, #216]	; (8004768 <MX_GPIO_Init+0x110>)
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	4a35      	ldr	r2, [pc, #212]	; (8004768 <MX_GPIO_Init+0x110>)
 8004694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004698:	6313      	str	r3, [r2, #48]	; 0x30
 800469a:	4b33      	ldr	r3, [pc, #204]	; (8004768 <MX_GPIO_Init+0x110>)
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046a6:	2300      	movs	r3, #0
 80046a8:	60bb      	str	r3, [r7, #8]
 80046aa:	4b2f      	ldr	r3, [pc, #188]	; (8004768 <MX_GPIO_Init+0x110>)
 80046ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ae:	4a2e      	ldr	r2, [pc, #184]	; (8004768 <MX_GPIO_Init+0x110>)
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	6313      	str	r3, [r2, #48]	; 0x30
 80046b6:	4b2c      	ldr	r3, [pc, #176]	; (8004768 <MX_GPIO_Init+0x110>)
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	60bb      	str	r3, [r7, #8]
 80046c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046c2:	2300      	movs	r3, #0
 80046c4:	607b      	str	r3, [r7, #4]
 80046c6:	4b28      	ldr	r3, [pc, #160]	; (8004768 <MX_GPIO_Init+0x110>)
 80046c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ca:	4a27      	ldr	r2, [pc, #156]	; (8004768 <MX_GPIO_Init+0x110>)
 80046cc:	f043 0302 	orr.w	r3, r3, #2
 80046d0:	6313      	str	r3, [r2, #48]	; 0x30
 80046d2:	4b25      	ldr	r3, [pc, #148]	; (8004768 <MX_GPIO_Init+0x110>)
 80046d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	607b      	str	r3, [r7, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 80046de:	2200      	movs	r2, #0
 80046e0:	f648 0110 	movw	r1, #34832	; 0x8810
 80046e4:	4821      	ldr	r0, [pc, #132]	; (800476c <MX_GPIO_Init+0x114>)
 80046e6:	f004 fc5f 	bl	8008fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80046ea:	2200      	movs	r2, #0
 80046ec:	2120      	movs	r1, #32
 80046ee:	4820      	ldr	r0, [pc, #128]	; (8004770 <MX_GPIO_Init+0x118>)
 80046f0:	f004 fc5a 	bl	8008fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80046f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80046fa:	4b1e      	ldr	r3, [pc, #120]	; (8004774 <MX_GPIO_Init+0x11c>)
 80046fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046fe:	2300      	movs	r3, #0
 8004700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004702:	f107 0314 	add.w	r3, r7, #20
 8004706:	4619      	mov	r1, r3
 8004708:	4819      	ldr	r0, [pc, #100]	; (8004770 <MX_GPIO_Init+0x118>)
 800470a:	f004 faa1 	bl	8008c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15;
 800470e:	f648 0310 	movw	r3, #34832	; 0x8810
 8004712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004714:	2301      	movs	r3, #1
 8004716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004718:	2300      	movs	r3, #0
 800471a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800471c:	2303      	movs	r3, #3
 800471e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004720:	f107 0314 	add.w	r3, r7, #20
 8004724:	4619      	mov	r1, r3
 8004726:	4811      	ldr	r0, [pc, #68]	; (800476c <MX_GPIO_Init+0x114>)
 8004728:	f004 fa92 	bl	8008c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800472c:	2320      	movs	r3, #32
 800472e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004730:	2301      	movs	r3, #1
 8004732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004734:	2300      	movs	r3, #0
 8004736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004738:	2303      	movs	r3, #3
 800473a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800473c:	f107 0314 	add.w	r3, r7, #20
 8004740:	4619      	mov	r1, r3
 8004742:	480b      	ldr	r0, [pc, #44]	; (8004770 <MX_GPIO_Init+0x118>)
 8004744:	f004 fa84 	bl	8008c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004748:	2340      	movs	r3, #64	; 0x40
 800474a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800474c:	2300      	movs	r3, #0
 800474e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004750:	2300      	movs	r3, #0
 8004752:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004754:	f107 0314 	add.w	r3, r7, #20
 8004758:	4619      	mov	r1, r3
 800475a:	4805      	ldr	r0, [pc, #20]	; (8004770 <MX_GPIO_Init+0x118>)
 800475c:	f004 fa78 	bl	8008c50 <HAL_GPIO_Init>

}
 8004760:	bf00      	nop
 8004762:	3728      	adds	r7, #40	; 0x28
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40023800 	.word	0x40023800
 800476c:	40020000 	.word	0x40020000
 8004770:	40020800 	.word	0x40020800
 8004774:	10210000 	.word	0x10210000

08004778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800477e:	f002 fdc5 	bl	800730c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004782:	f000 fc7b 	bl	800507c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004786:	f7ff ff67 	bl	8004658 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800478a:	f002 f859 	bl	8006840 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800478e:	f001 ff3d 	bl	800660c <MX_TIM1_Init>
  MX_CAN1_Init();
 8004792:	f7fd f9cb 	bl	8001b2c <MX_CAN1_Init>
  MX_SPI1_Init();
 8004796:	f001 f959 	bl	8005a4c <MX_SPI1_Init>
  MX_SPI3_Init();
 800479a:	f001 f98f 	bl	8005abc <MX_SPI3_Init>
  MX_ADC1_Init();
 800479e:	f7fc fc55 	bl	800104c <MX_ADC1_Init>
  MX_ADC2_Init();
 80047a2:	f7fc fcbd 	bl	8001120 <MX_ADC2_Init>
  MX_ADC3_Init();
 80047a6:	f7fc fd05 	bl	80011b4 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  /* Load settings from flash */
  preference_writer_init(&prefs, 6);
 80047aa:	2106      	movs	r1, #6
 80047ac:	48c1      	ldr	r0, [pc, #772]	; (8004ab4 <main+0x33c>)
 80047ae:	f001 f891 	bl	80058d4 <preference_writer_init>
  preference_writer_load(prefs);
 80047b2:	4bc0      	ldr	r3, [pc, #768]	; (8004ab4 <main+0x33c>)
 80047b4:	691a      	ldr	r2, [r3, #16]
 80047b6:	9200      	str	r2, [sp, #0]
 80047b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047ba:	f001 f8f5 	bl	80059a8 <preference_writer_load>

  /* Sanitize configs in case flash is empty or is wrong value*/
  if(                          MIN_E_ZERO > E_ZERO                   || MAX_E_ZERO < E_ZERO)                   {E_ZERO = 0;}
 80047be:	4bbe      	ldr	r3, [pc, #760]	; (8004ab8 <main+0x340>)
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047c6:	d102      	bne.n	80047ce <main+0x56>
 80047c8:	4bbb      	ldr	r3, [pc, #748]	; (8004ab8 <main+0x340>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	615a      	str	r2, [r3, #20]
  if(                          MIN_M_ZERO > M_ZERO                   || MAX_M_ZERO < M_ZERO)                   {M_ZERO = 0;}
 80047ce:	4bba      	ldr	r3, [pc, #744]	; (8004ab8 <main+0x340>)
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047d6:	d102      	bne.n	80047de <main+0x66>
 80047d8:	4bb7      	ldr	r3, [pc, #732]	; (8004ab8 <main+0x340>)
 80047da:	2200      	movs	r2, #0
 80047dc:	611a      	str	r2, [r3, #16]
  if(isnan(GR)              || MIN_GR > GR		                     || MAX_GR < GR)                 		   {GR = 6.0f;}
 80047de:	4bb7      	ldr	r3, [pc, #732]	; (8004abc <main+0x344>)
 80047e0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80047e4:	eef4 7a67 	vcmp.f32	s15, s15
 80047e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ec:	d613      	bvs.n	8004816 <main+0x9e>
 80047ee:	4bb3      	ldr	r3, [pc, #716]	; (8004abc <main+0x344>)
 80047f0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80047f4:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8004ac0 <main+0x348>
 80047f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004800:	d409      	bmi.n	8004816 <main+0x9e>
 8004802:	4bae      	ldr	r3, [pc, #696]	; (8004abc <main+0x344>)
 8004804:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004808:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8004ac4 <main+0x34c>
 800480c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004814:	dd02      	ble.n	800481c <main+0xa4>
 8004816:	4ba9      	ldr	r3, [pc, #676]	; (8004abc <main+0x344>)
 8004818:	4aab      	ldr	r2, [pc, #684]	; (8004ac8 <main+0x350>)
 800481a:	645a      	str	r2, [r3, #68]	; 0x44
  if(isnan(KT)	            || MIN_KT > KT                           || MAX_KT < KT)                           {KT = 0.08f;}
 800481c:	4ba7      	ldr	r3, [pc, #668]	; (8004abc <main+0x344>)
 800481e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004822:	eef4 7a67 	vcmp.f32	s15, s15
 8004826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800482a:	d613      	bvs.n	8004854 <main+0xdc>
 800482c:	4ba3      	ldr	r3, [pc, #652]	; (8004abc <main+0x344>)
 800482e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004832:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8004acc <main+0x354>
 8004836:	eef4 7ac7 	vcmpe.f32	s15, s14
 800483a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800483e:	d409      	bmi.n	8004854 <main+0xdc>
 8004840:	4b9e      	ldr	r3, [pc, #632]	; (8004abc <main+0x344>)
 8004842:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004846:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8004ac4 <main+0x34c>
 800484a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800484e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004852:	dd02      	ble.n	800485a <main+0xe2>
 8004854:	4b99      	ldr	r3, [pc, #612]	; (8004abc <main+0x344>)
 8004856:	4a9e      	ldr	r2, [pc, #632]	; (8004ad0 <main+0x358>)
 8004858:	639a      	str	r2, [r3, #56]	; 0x38
  if(isnan(I_BW)            || MIN_I_BW > I_BW                       || MAX_I_BW < I_BW)				       {I_BW = 1000;}
 800485a:	4b98      	ldr	r3, [pc, #608]	; (8004abc <main+0x344>)
 800485c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004860:	eef4 7a67 	vcmp.f32	s15, s15
 8004864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004868:	d613      	bvs.n	8004892 <main+0x11a>
 800486a:	4b94      	ldr	r3, [pc, #592]	; (8004abc <main+0x344>)
 800486c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004870:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8004ad4 <main+0x35c>
 8004874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800487c:	d409      	bmi.n	8004892 <main+0x11a>
 800487e:	4b8f      	ldr	r3, [pc, #572]	; (8004abc <main+0x344>)
 8004880:	edd3 7a02 	vldr	s15, [r3, #8]
 8004884:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8004ad8 <main+0x360>
 8004888:	eef4 7ac7 	vcmpe.f32	s15, s14
 800488c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004890:	dd02      	ble.n	8004898 <main+0x120>
 8004892:	4b8a      	ldr	r3, [pc, #552]	; (8004abc <main+0x344>)
 8004894:	4a91      	ldr	r2, [pc, #580]	; (8004adc <main+0x364>)
 8004896:	609a      	str	r2, [r3, #8]
  if(isnan(I_MAX)           || MIN_I_MAX > I_MAX                     || MAX_I_MAX < I_MAX)					   {I_MAX = 40;}
 8004898:	4b88      	ldr	r3, [pc, #544]	; (8004abc <main+0x344>)
 800489a:	edd3 7a03 	vldr	s15, [r3, #12]
 800489e:	eef4 7a67 	vcmp.f32	s15, s15
 80048a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a6:	d611      	bvs.n	80048cc <main+0x154>
 80048a8:	4b84      	ldr	r3, [pc, #528]	; (8004abc <main+0x344>)
 80048aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80048ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b6:	d409      	bmi.n	80048cc <main+0x154>
 80048b8:	4b80      	ldr	r3, [pc, #512]	; (8004abc <main+0x344>)
 80048ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80048be:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8004ae0 <main+0x368>
 80048c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ca:	dd02      	ble.n	80048d2 <main+0x15a>
 80048cc:	4b7b      	ldr	r3, [pc, #492]	; (8004abc <main+0x344>)
 80048ce:	4a85      	ldr	r2, [pc, #532]	; (8004ae4 <main+0x36c>)
 80048d0:	60da      	str	r2, [r3, #12]
  if(isnan(P_MAX)           || MIN_P_MAX > P_MAX                     || MAX_P_MAX < P_MAX)	                   {P_MAX = 6.283f;}
 80048d2:	4b7a      	ldr	r3, [pc, #488]	; (8004abc <main+0x344>)
 80048d4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80048d8:	eef4 7a67 	vcmp.f32	s15, s15
 80048dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048e0:	d611      	bvs.n	8004906 <main+0x18e>
 80048e2:	4b76      	ldr	r3, [pc, #472]	; (8004abc <main+0x344>)
 80048e4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80048e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f0:	d409      	bmi.n	8004906 <main+0x18e>
 80048f2:	4b72      	ldr	r3, [pc, #456]	; (8004abc <main+0x344>)
 80048f4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80048f8:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8004ac4 <main+0x34c>
 80048fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004904:	dd02      	ble.n	800490c <main+0x194>
 8004906:	4b6d      	ldr	r3, [pc, #436]	; (8004abc <main+0x344>)
 8004908:	4a77      	ldr	r2, [pc, #476]	; (8004ae8 <main+0x370>)
 800490a:	651a      	str	r2, [r3, #80]	; 0x50
  if(isnan(P_MIN)           || MIN_P_MIN > P_MIN                     || MAX_P_MIN < P_MIN)	                   {P_MIN = 0.0f;}
 800490c:	4b6b      	ldr	r3, [pc, #428]	; (8004abc <main+0x344>)
 800490e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004912:	eef4 7a67 	vcmp.f32	s15, s15
 8004916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800491a:	d611      	bvs.n	8004940 <main+0x1c8>
 800491c:	4b67      	ldr	r3, [pc, #412]	; (8004abc <main+0x344>)
 800491e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004922:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8004aec <main+0x374>
 8004926:	eef4 7ac7 	vcmpe.f32	s15, s14
 800492a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800492e:	d407      	bmi.n	8004940 <main+0x1c8>
 8004930:	4b62      	ldr	r3, [pc, #392]	; (8004abc <main+0x344>)
 8004932:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004936:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800493a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800493e:	dd03      	ble.n	8004948 <main+0x1d0>
 8004940:	4b5e      	ldr	r3, [pc, #376]	; (8004abc <main+0x344>)
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	64da      	str	r2, [r3, #76]	; 0x4c
  if(isnan(V_MAX)           || MIN_V_MAX > V_MAX                     || MAX_V_MAX < V_MAX)	                   {V_MAX = 45.0f;}
 8004948:	4b5c      	ldr	r3, [pc, #368]	; (8004abc <main+0x344>)
 800494a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800494e:	eef4 7a67 	vcmp.f32	s15, s15
 8004952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004956:	d611      	bvs.n	800497c <main+0x204>
 8004958:	4b58      	ldr	r3, [pc, #352]	; (8004abc <main+0x344>)
 800495a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800495e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004966:	d409      	bmi.n	800497c <main+0x204>
 8004968:	4b54      	ldr	r3, [pc, #336]	; (8004abc <main+0x344>)
 800496a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800496e:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8004ac4 <main+0x34c>
 8004972:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800497a:	dd02      	ble.n	8004982 <main+0x20a>
 800497c:	4b4f      	ldr	r3, [pc, #316]	; (8004abc <main+0x344>)
 800497e:	4a5c      	ldr	r2, [pc, #368]	; (8004af0 <main+0x378>)
 8004980:	659a      	str	r2, [r3, #88]	; 0x58
  if(isnan(V_MIN)           || MIN_V_MIN > V_MIN                     || MAX_V_MIN < V_MIN)	                   {V_MIN = -45.0f;}
 8004982:	4b4e      	ldr	r3, [pc, #312]	; (8004abc <main+0x344>)
 8004984:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004988:	eef4 7a67 	vcmp.f32	s15, s15
 800498c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004990:	d611      	bvs.n	80049b6 <main+0x23e>
 8004992:	4b4a      	ldr	r3, [pc, #296]	; (8004abc <main+0x344>)
 8004994:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004998:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8004aec <main+0x374>
 800499c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a4:	d407      	bmi.n	80049b6 <main+0x23e>
 80049a6:	4b45      	ldr	r3, [pc, #276]	; (8004abc <main+0x344>)
 80049a8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80049ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b4:	dd02      	ble.n	80049bc <main+0x244>
 80049b6:	4b41      	ldr	r3, [pc, #260]	; (8004abc <main+0x344>)
 80049b8:	4a4e      	ldr	r2, [pc, #312]	; (8004af4 <main+0x37c>)
 80049ba:	655a      	str	r2, [r3, #84]	; 0x54
  if(isnan(T_MAX)           || MIN_T_MAX > T_MAX                     || MAX_T_MAX < T_MAX)                     {T_MAX = 20.0f;}
 80049bc:	4b3f      	ldr	r3, [pc, #252]	; (8004abc <main+0x344>)
 80049be:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80049c2:	eef4 7a67 	vcmp.f32	s15, s15
 80049c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ca:	d611      	bvs.n	80049f0 <main+0x278>
 80049cc:	4b3b      	ldr	r3, [pc, #236]	; (8004abc <main+0x344>)
 80049ce:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80049d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049da:	d409      	bmi.n	80049f0 <main+0x278>
 80049dc:	4b37      	ldr	r3, [pc, #220]	; (8004abc <main+0x344>)
 80049de:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80049e2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8004ac4 <main+0x34c>
 80049e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ee:	dd02      	ble.n	80049f6 <main+0x27e>
 80049f0:	4b32      	ldr	r3, [pc, #200]	; (8004abc <main+0x344>)
 80049f2:	4a41      	ldr	r2, [pc, #260]	; (8004af8 <main+0x380>)
 80049f4:	661a      	str	r2, [r3, #96]	; 0x60
  if(isnan(T_MIN)           || MIN_T_MIN > T_MIN                     || MAX_T_MIN < T_MIN)	                   {T_MIN = -20.0f;}
 80049f6:	4b31      	ldr	r3, [pc, #196]	; (8004abc <main+0x344>)
 80049f8:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80049fc:	eef4 7a67 	vcmp.f32	s15, s15
 8004a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a04:	d611      	bvs.n	8004a2a <main+0x2b2>
 8004a06:	4b2d      	ldr	r3, [pc, #180]	; (8004abc <main+0x344>)
 8004a08:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004a0c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8004aec <main+0x374>
 8004a10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a18:	d407      	bmi.n	8004a2a <main+0x2b2>
 8004a1a:	4b28      	ldr	r3, [pc, #160]	; (8004abc <main+0x344>)
 8004a1c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004a20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a28:	dd02      	ble.n	8004a30 <main+0x2b8>
 8004a2a:	4b24      	ldr	r3, [pc, #144]	; (8004abc <main+0x344>)
 8004a2c:	4a33      	ldr	r2, [pc, #204]	; (8004afc <main+0x384>)
 8004a2e:	65da      	str	r2, [r3, #92]	; 0x5c
  if(isnan(KP_MAX)          || MIN_KP_MAX > KP_MAX                   || MAX_KP_MAX < KP_MAX)			       {KP_MAX = 500.0f;}
 8004a30:	4b22      	ldr	r3, [pc, #136]	; (8004abc <main+0x344>)
 8004a32:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004a36:	eef4 7a67 	vcmp.f32	s15, s15
 8004a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a3e:	d611      	bvs.n	8004a64 <main+0x2ec>
 8004a40:	4b1e      	ldr	r3, [pc, #120]	; (8004abc <main+0x344>)
 8004a42:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004a46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a4e:	d409      	bmi.n	8004a64 <main+0x2ec>
 8004a50:	4b1a      	ldr	r3, [pc, #104]	; (8004abc <main+0x344>)
 8004a52:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004a56:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8004ac4 <main+0x34c>
 8004a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a62:	dd02      	ble.n	8004a6a <main+0x2f2>
 8004a64:	4b15      	ldr	r3, [pc, #84]	; (8004abc <main+0x344>)
 8004a66:	4a26      	ldr	r2, [pc, #152]	; (8004b00 <main+0x388>)
 8004a68:	665a      	str	r2, [r3, #100]	; 0x64
  if(isnan(KI_MAX)          || MIN_KI_MAX > KI_MAX                   || MAX_KI_MAX < KI_MAX)      			   {KI_MAX = 0.0f;}
 8004a6a:	4b14      	ldr	r3, [pc, #80]	; (8004abc <main+0x344>)
 8004a6c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8004a70:	eef4 7a67 	vcmp.f32	s15, s15
 8004a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a78:	d611      	bvs.n	8004a9e <main+0x326>
 8004a7a:	4b10      	ldr	r3, [pc, #64]	; (8004abc <main+0x344>)
 8004a7c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8004a80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a88:	d409      	bmi.n	8004a9e <main+0x326>
 8004a8a:	4b0c      	ldr	r3, [pc, #48]	; (8004abc <main+0x344>)
 8004a8c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8004a90:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004ac4 <main+0x34c>
 8004a94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a9c:	dd03      	ble.n	8004aa6 <main+0x32e>
 8004a9e:	4b07      	ldr	r3, [pc, #28]	; (8004abc <main+0x344>)
 8004aa0:	f04f 0200 	mov.w	r2, #0
 8004aa4:	669a      	str	r2, [r3, #104]	; 0x68
  if(isnan(KD_MAX)          || MIN_KD_MAX > KD_MAX                   || MAX_KD_MAX < KD_MAX)				   {KD_MAX = 5.0f;}
 8004aa6:	4b05      	ldr	r3, [pc, #20]	; (8004abc <main+0x344>)
 8004aa8:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8004aac:	eef4 7a67 	vcmp.f32	s15, s15
 8004ab0:	e028      	b.n	8004b04 <main+0x38c>
 8004ab2:	bf00      	nop
 8004ab4:	20000748 	.word	0x20000748
 8004ab8:	20009074 	.word	0x20009074
 8004abc:	2000075c 	.word	0x2000075c
 8004ac0:	3a83126f 	.word	0x3a83126f
 8004ac4:	4f000000 	.word	0x4f000000
 8004ac8:	40c00000 	.word	0x40c00000
 8004acc:	38d1b717 	.word	0x38d1b717
 8004ad0:	3da3d70a 	.word	0x3da3d70a
 8004ad4:	42c80000 	.word	0x42c80000
 8004ad8:	44fa0000 	.word	0x44fa0000
 8004adc:	447a0000 	.word	0x447a0000
 8004ae0:	42960000 	.word	0x42960000
 8004ae4:	42200000 	.word	0x42200000
 8004ae8:	40c90e56 	.word	0x40c90e56
 8004aec:	cf000000 	.word	0xcf000000
 8004af0:	42340000 	.word	0x42340000
 8004af4:	c2340000 	.word	0xc2340000
 8004af8:	41a00000 	.word	0x41a00000
 8004afc:	c1a00000 	.word	0xc1a00000
 8004b00:	43fa0000 	.word	0x43fa0000
 8004b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b08:	d611      	bvs.n	8004b2e <main+0x3b6>
 8004b0a:	4bbb      	ldr	r3, [pc, #748]	; (8004df8 <main+0x680>)
 8004b0c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8004b10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b18:	d409      	bmi.n	8004b2e <main+0x3b6>
 8004b1a:	4bb7      	ldr	r3, [pc, #732]	; (8004df8 <main+0x680>)
 8004b1c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8004b20:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8004dfc <main+0x684>
 8004b24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b2c:	dd02      	ble.n	8004b34 <main+0x3bc>
 8004b2e:	4bb2      	ldr	r3, [pc, #712]	; (8004df8 <main+0x680>)
 8004b30:	4ab3      	ldr	r2, [pc, #716]	; (8004e00 <main+0x688>)
 8004b32:	66da      	str	r2, [r3, #108]	; 0x6c
  if(isnan(I_FW_MAX)        || MIN_I_FW_MAX > I_FW_MAX               || MAX_I_FW_MAX < I_FW_MAX)			   {I_FW_MAX = 0.0f;}
 8004b34:	4bb0      	ldr	r3, [pc, #704]	; (8004df8 <main+0x680>)
 8004b36:	edd3 7a06 	vldr	s15, [r3, #24]
 8004b3a:	eef4 7a67 	vcmp.f32	s15, s15
 8004b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b42:	d611      	bvs.n	8004b68 <main+0x3f0>
 8004b44:	4bac      	ldr	r3, [pc, #688]	; (8004df8 <main+0x680>)
 8004b46:	edd3 7a06 	vldr	s15, [r3, #24]
 8004b4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b52:	d409      	bmi.n	8004b68 <main+0x3f0>
 8004b54:	4ba8      	ldr	r3, [pc, #672]	; (8004df8 <main+0x680>)
 8004b56:	edd3 7a06 	vldr	s15, [r3, #24]
 8004b5a:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8004e04 <main+0x68c>
 8004b5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b66:	dd03      	ble.n	8004b70 <main+0x3f8>
 8004b68:	4ba3      	ldr	r3, [pc, #652]	; (8004df8 <main+0x680>)
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	619a      	str	r2, [r3, #24]
  if(isnan(I_MAX_CONT)      || MIN_I_MAX_CONT > I_MAX_CONT           || MAX_I_MAX_CONT < I_MAX_CONT)           {I_MAX_CONT = 14.0f;}
 8004b70:	4ba1      	ldr	r3, [pc, #644]	; (8004df8 <main+0x680>)
 8004b72:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004b76:	eef4 7a67 	vcmp.f32	s15, s15
 8004b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b7e:	d613      	bvs.n	8004ba8 <main+0x430>
 8004b80:	4b9d      	ldr	r3, [pc, #628]	; (8004df8 <main+0x680>)
 8004b82:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004b86:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8004e08 <main+0x690>
 8004b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b92:	d409      	bmi.n	8004ba8 <main+0x430>
 8004b94:	4b98      	ldr	r3, [pc, #608]	; (8004df8 <main+0x680>)
 8004b96:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004b9a:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8004dfc <main+0x684>
 8004b9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba6:	dd02      	ble.n	8004bae <main+0x436>
 8004ba8:	4b93      	ldr	r3, [pc, #588]	; (8004df8 <main+0x680>)
 8004baa:	4a98      	ldr	r2, [pc, #608]	; (8004e0c <main+0x694>)
 8004bac:	625a      	str	r2, [r3, #36]	; 0x24
  if(isnan(I_CAL)           || MIN_I_CAL > I_CAL                     || MAX_I_CAL < I_CAL)					   {I_CAL = 5.0f;}
 8004bae:	4b92      	ldr	r3, [pc, #584]	; (8004df8 <main+0x680>)
 8004bb0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004bb4:	eef4 7a67 	vcmp.f32	s15, s15
 8004bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bbc:	d611      	bvs.n	8004be2 <main+0x46a>
 8004bbe:	4b8e      	ldr	r3, [pc, #568]	; (8004df8 <main+0x680>)
 8004bc0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004bc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bcc:	d409      	bmi.n	8004be2 <main+0x46a>
 8004bce:	4b8a      	ldr	r3, [pc, #552]	; (8004df8 <main+0x680>)
 8004bd0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004bd4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004bd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be0:	dd02      	ble.n	8004be8 <main+0x470>
 8004be2:	4b85      	ldr	r3, [pc, #532]	; (8004df8 <main+0x680>)
 8004be4:	4a86      	ldr	r2, [pc, #536]	; (8004e00 <main+0x688>)
 8004be6:	649a      	str	r2, [r3, #72]	; 0x48
  if(HALL_CAL_DIR != 1 && HALL_CAL_DIR != -1)												      			   {HALL_CAL_DIR = 1;}
 8004be8:	4b89      	ldr	r3, [pc, #548]	; (8004e10 <main+0x698>)
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d007      	beq.n	8004c00 <main+0x488>
 8004bf0:	4b87      	ldr	r3, [pc, #540]	; (8004e10 <main+0x698>)
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf8:	d002      	beq.n	8004c00 <main+0x488>
 8004bfa:	4b85      	ldr	r3, [pc, #532]	; (8004e10 <main+0x698>)
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	619a      	str	r2, [r3, #24]
  if(isnan(HALL_CAL_OFFSET) || MIN_HALL_CAL_OFFSET > HALL_CAL_OFFSET || MAX_HALL_CAL_OFFSET < HALL_CAL_OFFSET) {HALL_CAL_OFFSET = 0.0f;}
 8004c00:	4b7d      	ldr	r3, [pc, #500]	; (8004df8 <main+0x680>)
 8004c02:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8004c06:	eef4 7a67 	vcmp.f32	s15, s15
 8004c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c0e:	d611      	bvs.n	8004c34 <main+0x4bc>
 8004c10:	4b79      	ldr	r3, [pc, #484]	; (8004df8 <main+0x680>)
 8004c12:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8004c16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c1e:	d409      	bmi.n	8004c34 <main+0x4bc>
 8004c20:	4b75      	ldr	r3, [pc, #468]	; (8004df8 <main+0x680>)
 8004c22:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8004c26:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8004e14 <main+0x69c>
 8004c2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c32:	dd03      	ble.n	8004c3c <main+0x4c4>
 8004c34:	4b70      	ldr	r3, [pc, #448]	; (8004df8 <main+0x680>)
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	671a      	str	r2, [r3, #112]	; 0x70
  if(isnan(HALL_CAL_SPEED)  || MIN_HALL_CAL_SPEED > HALL_CAL_SPEED   || MAX_HALL_CAL_SPEED < HALL_CAL_SPEED)   {HALL_CAL_SPEED = 0.25f;}
 8004c3c:	4b6e      	ldr	r3, [pc, #440]	; (8004df8 <main+0x680>)
 8004c3e:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004c42:	eef4 7a67 	vcmp.f32	s15, s15
 8004c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c4a:	d611      	bvs.n	8004c70 <main+0x4f8>
 8004c4c:	4b6a      	ldr	r3, [pc, #424]	; (8004df8 <main+0x680>)
 8004c4e:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004c52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c5a:	d409      	bmi.n	8004c70 <main+0x4f8>
 8004c5c:	4b66      	ldr	r3, [pc, #408]	; (8004df8 <main+0x680>)
 8004c5e:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004c62:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c6e:	dd03      	ble.n	8004c78 <main+0x500>
 8004c70:	4b61      	ldr	r3, [pc, #388]	; (8004df8 <main+0x680>)
 8004c72:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8004c76:	675a      	str	r2, [r3, #116]	; 0x74
  if(						   MIN_CAN_ID > CAN_ID                   || MAX_CAN_ID < CAN_ID)                   {CAN_ID = 1;}
 8004c78:	4b65      	ldr	r3, [pc, #404]	; (8004e10 <main+0x698>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	dd03      	ble.n	8004c88 <main+0x510>
 8004c80:	4b63      	ldr	r3, [pc, #396]	; (8004e10 <main+0x698>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2b7f      	cmp	r3, #127	; 0x7f
 8004c86:	dd02      	ble.n	8004c8e <main+0x516>
 8004c88:	4b61      	ldr	r3, [pc, #388]	; (8004e10 <main+0x698>)
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	605a      	str	r2, [r3, #4]
  if(                          MIN_CAN_MASTER > CAN_MASTER           || MAX_CAN_MASTER < CAN_MASTER)           {CAN_MASTER = 0;}
 8004c8e:	4b60      	ldr	r3, [pc, #384]	; (8004e10 <main+0x698>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	db03      	blt.n	8004c9e <main+0x526>
 8004c96:	4b5e      	ldr	r3, [pc, #376]	; (8004e10 <main+0x698>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	2b7f      	cmp	r3, #127	; 0x7f
 8004c9c:	dd02      	ble.n	8004ca4 <main+0x52c>
 8004c9e:	4b5c      	ldr	r3, [pc, #368]	; (8004e10 <main+0x698>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	609a      	str	r2, [r3, #8]
  if(                          MIN_CAN_TIMEOUT > CAN_TIMEOUT         || MAX_CAN_TIMEOUT < CAN_TIMEOUT)         {CAN_TIMEOUT = 0;}
 8004ca4:	4b5a      	ldr	r3, [pc, #360]	; (8004e10 <main+0x698>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	db04      	blt.n	8004cb6 <main+0x53e>
 8004cac:	4b58      	ldr	r3, [pc, #352]	; (8004e10 <main+0x698>)
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	4a59      	ldr	r2, [pc, #356]	; (8004e18 <main+0x6a0>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	dd02      	ble.n	8004cbc <main+0x544>
 8004cb6:	4b56      	ldr	r3, [pc, #344]	; (8004e10 <main+0x698>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	60da      	str	r2, [r3, #12]
  if(isnan(R_NOMINAL)       || MIN_R_NOMINAL > R_NOMINAL             || MAX_R_NOMINAL < R_NOMINAL)             {R_NOMINAL = 0.0f;}
 8004cbc:	4b4e      	ldr	r3, [pc, #312]	; (8004df8 <main+0x680>)
 8004cbe:	edd3 7a07 	vldr	s15, [r3, #28]
 8004cc2:	eef4 7a67 	vcmp.f32	s15, s15
 8004cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cca:	d613      	bvs.n	8004cf4 <main+0x57c>
 8004ccc:	4b4a      	ldr	r3, [pc, #296]	; (8004df8 <main+0x680>)
 8004cce:	edd3 7a07 	vldr	s15, [r3, #28]
 8004cd2:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8004e08 <main+0x690>
 8004cd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cde:	d409      	bmi.n	8004cf4 <main+0x57c>
 8004ce0:	4b45      	ldr	r3, [pc, #276]	; (8004df8 <main+0x680>)
 8004ce2:	edd3 7a07 	vldr	s15, [r3, #28]
 8004ce6:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004dfc <main+0x684>
 8004cea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf2:	dd03      	ble.n	8004cfc <main+0x584>
 8004cf4:	4b40      	ldr	r3, [pc, #256]	; (8004df8 <main+0x680>)
 8004cf6:	f04f 0200 	mov.w	r2, #0
 8004cfa:	61da      	str	r2, [r3, #28]
  if(isnan(TEMP_MAX)        || MIN_TEMP_MAX > TEMP_MAX               || MAX_TEMP_MAX < TEMP_MAX)               {TEMP_MAX = 125.0f;}
 8004cfc:	4b3e      	ldr	r3, [pc, #248]	; (8004df8 <main+0x680>)
 8004cfe:	edd3 7a08 	vldr	s15, [r3, #32]
 8004d02:	eef4 7a67 	vcmp.f32	s15, s15
 8004d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d0a:	d613      	bvs.n	8004d34 <main+0x5bc>
 8004d0c:	4b3a      	ldr	r3, [pc, #232]	; (8004df8 <main+0x680>)
 8004d0e:	edd3 7a08 	vldr	s15, [r3, #32]
 8004d12:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8004e08 <main+0x690>
 8004d16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d1e:	d409      	bmi.n	8004d34 <main+0x5bc>
 8004d20:	4b35      	ldr	r3, [pc, #212]	; (8004df8 <main+0x680>)
 8004d22:	edd3 7a08 	vldr	s15, [r3, #32]
 8004d26:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8004dfc <main+0x684>
 8004d2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d32:	dd02      	ble.n	8004d3a <main+0x5c2>
 8004d34:	4b30      	ldr	r3, [pc, #192]	; (8004df8 <main+0x680>)
 8004d36:	4a39      	ldr	r2, [pc, #228]	; (8004e1c <main+0x6a4>)
 8004d38:	621a      	str	r2, [r3, #32]
  if(isnan(PPAIRS)          || MIN_PPAIRS > PPAIRS                   || MAX_PPAIRS < PPAIRS)                   {PPAIRS = 21.0f;}
 8004d3a:	4b2f      	ldr	r3, [pc, #188]	; (8004df8 <main+0x680>)
 8004d3c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004d40:	eef4 7a67 	vcmp.f32	s15, s15
 8004d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d48:	d613      	bvs.n	8004d72 <main+0x5fa>
 8004d4a:	4b2b      	ldr	r3, [pc, #172]	; (8004df8 <main+0x680>)
 8004d4c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004d50:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8004e08 <main+0x690>
 8004d54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d5c:	d409      	bmi.n	8004d72 <main+0x5fa>
 8004d5e:	4b26      	ldr	r3, [pc, #152]	; (8004df8 <main+0x680>)
 8004d60:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004d64:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8004dfc <main+0x684>
 8004d68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d70:	dd02      	ble.n	8004d78 <main+0x600>
 8004d72:	4b21      	ldr	r3, [pc, #132]	; (8004df8 <main+0x680>)
 8004d74:	4a2a      	ldr	r2, [pc, #168]	; (8004e20 <main+0x6a8>)
 8004d76:	629a      	str	r2, [r3, #40]	; 0x28

  user_config_initialize();
 8004d78:	f001 fe00 	bl	800697c <user_config_initialize>

//  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
  printf("\r\n= = = = = Version Information = = = = =\r\n");
 8004d7c:	4829      	ldr	r0, [pc, #164]	; (8004e24 <main+0x6ac>)
 8004d7e:	f008 f921 	bl	800cfc4 <puts>
  printf("\r\nFirmware Version:  %s\r\n", FIRMWARE_VERSION);
 8004d82:	4929      	ldr	r1, [pc, #164]	; (8004e28 <main+0x6b0>)
 8004d84:	4829      	ldr	r0, [pc, #164]	; (8004e2c <main+0x6b4>)
 8004d86:	f008 f897 	bl	800ceb8 <iprintf>
  printf("\r\nBuild Date:  %s\r\n", FIRMWARE_DATE);
 8004d8a:	4929      	ldr	r1, [pc, #164]	; (8004e30 <main+0x6b8>)
 8004d8c:	4829      	ldr	r0, [pc, #164]	; (8004e34 <main+0x6bc>)
 8004d8e:	f008 f893 	bl	800ceb8 <iprintf>
  printf("Build Time:  %s\r\n", FIRMWARE_TIME);
 8004d92:	4929      	ldr	r1, [pc, #164]	; (8004e38 <main+0x6c0>)
 8004d94:	4829      	ldr	r0, [pc, #164]	; (8004e3c <main+0x6c4>)
 8004d96:	f008 f88f 	bl	800ceb8 <iprintf>
  printf("\r\nAuthor:  %s\r\n", AUTHOR_NAME);
 8004d9a:	4929      	ldr	r1, [pc, #164]	; (8004e40 <main+0x6c8>)
 8004d9c:	4829      	ldr	r0, [pc, #164]	; (8004e44 <main+0x6cc>)
 8004d9e:	f008 f88b 	bl	800ceb8 <iprintf>
  printf("\r\nModification Info:  %s\r\n", MODIFICATION_INFO);
 8004da2:	4929      	ldr	r1, [pc, #164]	; (8004e48 <main+0x6d0>)
 8004da4:	4829      	ldr	r0, [pc, #164]	; (8004e4c <main+0x6d4>)
 8004da6:	f008 f887 	bl	800ceb8 <iprintf>
  printf("\r\n= = = = = Program Started = = = = =\r\n");
 8004daa:	4829      	ldr	r0, [pc, #164]	; (8004e50 <main+0x6d8>)
 8004dac:	f008 f90a 	bl	800cfc4 <puts>
  }
  else{

  }

  init_controller_params(&controller);
 8004db0:	4828      	ldr	r0, [pc, #160]	; (8004e54 <main+0x6dc>)
 8004db2:	f7fd ff23 	bl	8002bfc <init_controller_params>

  /* calibration "encoder" zeroing */
  memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 8004db6:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8004dba:	2100      	movs	r1, #0
 8004dbc:	4826      	ldr	r0, [pc, #152]	; (8004e58 <main+0x6e0>)
 8004dbe:	f007 fc09 	bl	800c5d4 <memset>

  /* initialize the parameters of hall sensor */
  hall_cal.hall_input = 1;
 8004dc2:	4b26      	ldr	r3, [pc, #152]	; (8004e5c <main+0x6e4>)
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]
  hall_cal.hall_preinput = 1;
 8004dc8:	4b24      	ldr	r3, [pc, #144]	; (8004e5c <main+0x6e4>)
 8004dca:	2201      	movs	r2, #1
 8004dcc:	605a      	str	r2, [r3, #4]
  hall_cal.hall_cal_pcmd = 0;
 8004dce:	4b23      	ldr	r3, [pc, #140]	; (8004e5c <main+0x6e4>)
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	609a      	str	r2, [r3, #8]
  hall_cal.hall_cal_speed = 0.25; // rad/s
 8004dd6:	4b21      	ldr	r3, [pc, #132]	; (8004e5c <main+0x6e4>)
 8004dd8:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8004ddc:	60da      	str	r2, [r3, #12]
  hall_cal.hall_present_pos = 0; // calibrate the previous position of encoder
 8004dde:	4b1f      	ldr	r3, [pc, #124]	; (8004e5c <main+0x6e4>)
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	611a      	str	r2, [r3, #16]
  hall_cal.hall_in_pos = 0;  // read the position from 1 to 0 (magnet enters the area of hall sensor)
 8004de6:	4b1d      	ldr	r3, [pc, #116]	; (8004e5c <main+0x6e4>)
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	615a      	str	r2, [r3, #20]
  hall_cal.hall_out_pos = 0; // read the position from 0 to 1 (magnet exits the area of hall sensor)
 8004dee:	4b1b      	ldr	r3, [pc, #108]	; (8004e5c <main+0x6e4>)
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	e034      	b.n	8004e60 <main+0x6e8>
 8004df6:	bf00      	nop
 8004df8:	2000075c 	.word	0x2000075c
 8004dfc:	4f000000 	.word	0x4f000000
 8004e00:	40a00000 	.word	0x40a00000
 8004e04:	42040000 	.word	0x42040000
 8004e08:	cf000000 	.word	0xcf000000
 8004e0c:	41600000 	.word	0x41600000
 8004e10:	20009074 	.word	0x20009074
 8004e14:	430f0000 	.word	0x430f0000
 8004e18:	000186a0 	.word	0x000186a0
 8004e1c:	42fa0000 	.word	0x42fa0000
 8004e20:	41a80000 	.word	0x41a80000
 8004e24:	08011258 	.word	0x08011258
 8004e28:	08011284 	.word	0x08011284
 8004e2c:	0801128c 	.word	0x0801128c
 8004e30:	080112a8 	.word	0x080112a8
 8004e34:	080112b4 	.word	0x080112b4
 8004e38:	080112c8 	.word	0x080112c8
 8004e3c:	080112d4 	.word	0x080112d4
 8004e40:	080112e8 	.word	0x080112e8
 8004e44:	08011304 	.word	0x08011304
 8004e48:	08011314 	.word	0x08011314
 8004e4c:	0801133c 	.word	0x0801133c
 8004e50:	08011358 	.word	0x08011358
 8004e54:	2000085c 	.word	0x2000085c
 8004e58:	20008d94 	.word	0x20008d94
 8004e5c:	20000708 	.word	0x20000708
 8004e60:	619a      	str	r2, [r3, #24]
  hall_cal.hall_mid_pos = 0;
 8004e62:	4b75      	ldr	r3, [pc, #468]	; (8005038 <main+0x8c0>)
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	61da      	str	r2, [r3, #28]
  hall_cal. hall_cal_offset = 0; // rad
 8004e6a:	4b73      	ldr	r3, [pc, #460]	; (8005038 <main+0x8c0>)
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	621a      	str	r2, [r3, #32]
  hall_cal.hall_cal_count = 0;
 8004e72:	4b71      	ldr	r3, [pc, #452]	; (8005038 <main+0x8c0>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	625a      	str	r2, [r3, #36]	; 0x24
  hall_cal.hall_cal_state = CODE_HALL_UNCALIBRATED;
 8004e78:	4b6f      	ldr	r3, [pc, #444]	; (8005038 <main+0x8c0>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	629a      	str	r2, [r3, #40]	; 0x28

  /* commutation encoder setup */
  comm_encoder.m_zero = M_ZERO;
 8004e7e:	4b6f      	ldr	r3, [pc, #444]	; (800503c <main+0x8c4>)
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	4a6f      	ldr	r2, [pc, #444]	; (8005040 <main+0x8c8>)
 8004e84:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  comm_encoder.e_zero = E_ZERO;
 8004e88:	4b6c      	ldr	r3, [pc, #432]	; (800503c <main+0x8c4>)
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	4a6c      	ldr	r2, [pc, #432]	; (8005040 <main+0x8c8>)
 8004e8e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  comm_encoder.ppairs = PPAIRS;
 8004e92:	4b6c      	ldr	r3, [pc, #432]	; (8005044 <main+0x8cc>)
 8004e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e96:	4a6a      	ldr	r2, [pc, #424]	; (8005040 <main+0x8c8>)
 8004e98:	6693      	str	r3, [r2, #104]	; 0x68

  if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
 8004e9a:	4b69      	ldr	r3, [pc, #420]	; (8005040 <main+0x8c8>)
 8004e9c:	4a67      	ldr	r2, [pc, #412]	; (800503c <main+0x8c4>)
 8004e9e:	33dc      	adds	r3, #220	; 0xdc
 8004ea0:	f102 011c 	add.w	r1, r2, #28
 8004ea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f007 fb85 	bl	800c5b8 <memcpy>
  else{memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));}
  ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 8004eae:	2164      	movs	r1, #100	; 0x64
 8004eb0:	4863      	ldr	r0, [pc, #396]	; (8005040 <main+0x8c8>)
 8004eb2:	f000 fafd 	bl	80054b0 <ps_warmup>

  //for(int i = 0; i<128; i++){printf("%d\r\n", comm_encoder.offset_lut[i]);}

  /* Turn on ADCs */
  HAL_ADC_Start(&hadc1);
 8004eb6:	4864      	ldr	r0, [pc, #400]	; (8005048 <main+0x8d0>)
 8004eb8:	f002 fb02 	bl	80074c0 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8004ebc:	4863      	ldr	r0, [pc, #396]	; (800504c <main+0x8d4>)
 8004ebe:	f002 faff 	bl	80074c0 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 8004ec2:	4863      	ldr	r0, [pc, #396]	; (8005050 <main+0x8d8>)
 8004ec4:	f002 fafc 	bl	80074c0 <HAL_ADC_Start>

  /* DRV8323 setup */
  DRV_CS_HIGH; 	// CS high
 8004ec8:	2201      	movs	r2, #1
 8004eca:	2110      	movs	r1, #16
 8004ecc:	4861      	ldr	r0, [pc, #388]	; (8005054 <main+0x8dc>)
 8004ece:	f004 f86b 	bl	8008fa8 <HAL_GPIO_WritePin>
  GPIO_ENABLE;   // GPIO ENABLE_PIN HIGH
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ed8:	485e      	ldr	r0, [pc, #376]	; (8005054 <main+0x8dc>)
 8004eda:	f004 f865 	bl	8008fa8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8004ede:	2001      	movs	r0, #1
 8004ee0:	f002 fa86 	bl	80073f0 <HAL_Delay>
  drv_calibrate(drv);
 8004ee4:	4b5c      	ldr	r3, [pc, #368]	; (8005058 <main+0x8e0>)
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	2100      	movs	r1, #0
 8004eea:	4611      	mov	r1, r2
 8004eec:	889a      	ldrh	r2, [r3, #4]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	f362 030f 	bfi	r3, r2, #0, #16
 8004ef4:	4608      	mov	r0, r1
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	f7fd fa93 	bl	8002422 <drv_calibrate>
  HAL_Delay(1);
 8004efc:	2001      	movs	r0, #1
 8004efe:	f002 fa77 	bl	80073f0 <HAL_Delay>
  drv_write_DCR(drv, 0x0, 0x0, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 8004f02:	4b55      	ldr	r3, [pc, #340]	; (8005058 <main+0x8e0>)
 8004f04:	2201      	movs	r2, #1
 8004f06:	9206      	str	r2, [sp, #24]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	9205      	str	r2, [sp, #20]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	9204      	str	r2, [sp, #16]
 8004f10:	2200      	movs	r2, #0
 8004f12:	9203      	str	r2, [sp, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	9202      	str	r2, [sp, #8]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	9201      	str	r2, [sp, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	9200      	str	r2, [sp, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	2000      	movs	r0, #0
 8004f24:	4610      	mov	r0, r2
 8004f26:	889b      	ldrh	r3, [r3, #4]
 8004f28:	2100      	movs	r1, #0
 8004f2a:	f363 010f 	bfi	r1, r3, #0, #16
 8004f2e:	2300      	movs	r3, #0
 8004f30:	2200      	movs	r2, #0
 8004f32:	f7fd f990 	bl	8002256 <drv_write_DCR>
  HAL_Delay(1);
 8004f36:	2001      	movs	r0, #1
 8004f38:	f002 fa5a 	bl	80073f0 <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x0, 0x0, 0x0, SEN_LVL_1_0);
 8004f3c:	4b46      	ldr	r3, [pc, #280]	; (8005058 <main+0x8e0>)
 8004f3e:	2203      	movs	r2, #3
 8004f40:	9206      	str	r2, [sp, #24]
 8004f42:	2200      	movs	r2, #0
 8004f44:	9205      	str	r2, [sp, #20]
 8004f46:	2200      	movs	r2, #0
 8004f48:	9204      	str	r2, [sp, #16]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	9203      	str	r2, [sp, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	9202      	str	r2, [sp, #8]
 8004f52:	2203      	movs	r2, #3
 8004f54:	9201      	str	r2, [sp, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	9200      	str	r2, [sp, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	4610      	mov	r0, r2
 8004f60:	889b      	ldrh	r3, [r3, #4]
 8004f62:	2100      	movs	r1, #0
 8004f64:	f363 010f 	bfi	r1, r3, #0, #16
 8004f68:	2301      	movs	r3, #1
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f7fd f9e3 	bl	8002336 <drv_write_CSACR>
  HAL_Delay(1);
 8004f70:	2001      	movs	r0, #1
 8004f72:	f002 fa3d 	bl	80073f0 <HAL_Delay>
  drv_write_OCPCR(drv, TRETRY_4MS, DEADTIME_200NS, OCP_RETRY, OCP_DEG_8US, VDS_LVL_1_88);
 8004f76:	4b38      	ldr	r3, [pc, #224]	; (8005058 <main+0x8e0>)
 8004f78:	220f      	movs	r2, #15
 8004f7a:	9202      	str	r2, [sp, #8]
 8004f7c:	2203      	movs	r2, #3
 8004f7e:	9201      	str	r2, [sp, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	9200      	str	r2, [sp, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	2000      	movs	r0, #0
 8004f88:	4610      	mov	r0, r2
 8004f8a:	889b      	ldrh	r3, [r3, #4]
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	f363 010f 	bfi	r1, r3, #0, #16
 8004f92:	2302      	movs	r3, #2
 8004f94:	2200      	movs	r2, #0
 8004f96:	f7fd f9a0 	bl	80022da <drv_write_OCPCR>
  zero_current(&controller);
 8004f9a:	4830      	ldr	r0, [pc, #192]	; (800505c <main+0x8e4>)
 8004f9c:	f7fd fdea 	bl	8002b74 <zero_current>
  drv_enable_gd(drv);
 8004fa0:	4b2d      	ldr	r3, [pc, #180]	; (8005058 <main+0x8e0>)
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	4611      	mov	r1, r2
 8004fa8:	889a      	ldrh	r2, [r3, #4]
 8004faa:	2300      	movs	r3, #0
 8004fac:	f362 030f 	bfi	r3, r2, #0, #16
 8004fb0:	4608      	mov	r0, r1
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	f7fd fa01 	bl	80023ba <drv_enable_gd>
  GPIO_DISABLE;
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004fbe:	4825      	ldr	r0, [pc, #148]	; (8005054 <main+0x8dc>)
 8004fc0:	f003 fff2 	bl	8008fa8 <HAL_GPIO_WritePin>
//  printf("ADC A OFFSET: %d     ADC B OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset);

  /* Turn on PWM */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	4826      	ldr	r0, [pc, #152]	; (8005060 <main+0x8e8>)
 8004fc8:	f005 f9d2 	bl	800a370 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8004fcc:	2104      	movs	r1, #4
 8004fce:	4824      	ldr	r0, [pc, #144]	; (8005060 <main+0x8e8>)
 8004fd0:	f005 f9ce 	bl	800a370 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8004fd4:	2108      	movs	r1, #8
 8004fd6:	4822      	ldr	r0, [pc, #136]	; (8005060 <main+0x8e8>)
 8004fd8:	f005 f9ca 	bl	800a370 <HAL_TIM_PWM_Start>

  /* CAN setup */
  can_rx_init(&can_rx);
 8004fdc:	4821      	ldr	r0, [pc, #132]	; (8005064 <main+0x8ec>)
 8004fde:	f7fc fe2b 	bl	8001c38 <can_rx_init>
  can_tx_init(&can_tx);
 8004fe2:	4821      	ldr	r0, [pc, #132]	; (8005068 <main+0x8f0>)
 8004fe4:	f7fc fe58 	bl	8001c98 <can_tx_init>
  HAL_CAN_Start(&CAN_H); //start CAN
 8004fe8:	4820      	ldr	r0, [pc, #128]	; (800506c <main+0x8f4>)
 8004fea:	f003 f823 	bl	8008034 <HAL_CAN_Start>
  //__HAL_CAN_ENABLE_IT(&CAN_H, CAN_IT_RX_FIFO0_MSG_PENDING); // Start can interrupt

  /* Set Interrupt Priorities */
  HAL_NVIC_SetPriority(PWM_ISR, 0x0,0x0); // commutation > communication
 8004fee:	2200      	movs	r2, #0
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	2019      	movs	r0, #25
 8004ff4:	f003 fd63 	bl	8008abe <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(CAN_ISR, 0x01, 0x01);
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	2014      	movs	r0, #20
 8004ffe:	f003 fd5e 	bl	8008abe <HAL_NVIC_SetPriority>

  /* Start the FSM */
  state.state = MENU_MODE;
 8005002:	4b1b      	ldr	r3, [pc, #108]	; (8005070 <main+0x8f8>)
 8005004:	2200      	movs	r2, #0
 8005006:	701a      	strb	r2, [r3, #0]
  state.next_state = MENU_MODE;
 8005008:	4b19      	ldr	r3, [pc, #100]	; (8005070 <main+0x8f8>)
 800500a:	2200      	movs	r2, #0
 800500c:	705a      	strb	r2, [r3, #1]
  state.ready = 1;
 800500e:	4b18      	ldr	r3, [pc, #96]	; (8005070 <main+0x8f8>)
 8005010:	2201      	movs	r2, #1
 8005012:	70da      	strb	r2, [r3, #3]
  state.print_uart_msg = 0;
 8005014:	4b16      	ldr	r3, [pc, #88]	; (8005070 <main+0x8f8>)
 8005016:	2200      	movs	r2, #0
 8005018:	711a      	strb	r2, [r3, #4]
  enter_menu_state();
 800501a:	f7fe fe43 	bl	8003ca4 <enter_menu_state>


  /* Turn on interrupts */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 800501e:	2201      	movs	r2, #1
 8005020:	4914      	ldr	r1, [pc, #80]	; (8005074 <main+0x8fc>)
 8005022:	4815      	ldr	r0, [pc, #84]	; (8005078 <main+0x900>)
 8005024:	f006 f9f9 	bl	800b41a <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8005028:	480d      	ldr	r0, [pc, #52]	; (8005060 <main+0x8e8>)
 800502a:	f005 f8d7 	bl	800a1dc <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(100);
 800502e:	2064      	movs	r0, #100	; 0x64
 8005030:	f002 f9de 	bl	80073f0 <HAL_Delay>
 8005034:	e7fb      	b.n	800502e <main+0x8b6>
 8005036:	bf00      	nop
 8005038:	20000708 	.word	0x20000708
 800503c:	20009074 	.word	0x20009074
 8005040:	20000428 	.word	0x20000428
 8005044:	2000075c 	.word	0x2000075c
 8005048:	20000370 	.word	0x20000370
 800504c:	20000328 	.word	0x20000328
 8005050:	200003b8 	.word	0x200003b8
 8005054:	40020000 	.word	0x40020000
 8005058:	20009498 	.word	0x20009498
 800505c:	2000085c 	.word	0x2000085c
 8005060:	200095d0 	.word	0x200095d0
 8005064:	200094a0 	.word	0x200094a0
 8005068:	20009474 	.word	0x20009474
 800506c:	20000400 	.word	0x20000400
 8005070:	20000738 	.word	0x20000738
 8005074:	20000734 	.word	0x20000734
 8005078:	20009618 	.word	0x20009618

0800507c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b094      	sub	sp, #80	; 0x50
 8005080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005082:	f107 031c 	add.w	r3, r7, #28
 8005086:	2234      	movs	r2, #52	; 0x34
 8005088:	2100      	movs	r1, #0
 800508a:	4618      	mov	r0, r3
 800508c:	f007 faa2 	bl	800c5d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005090:	f107 0308 	add.w	r3, r7, #8
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	605a      	str	r2, [r3, #4]
 800509a:	609a      	str	r2, [r3, #8]
 800509c:	60da      	str	r2, [r3, #12]
 800509e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80050a0:	2300      	movs	r3, #0
 80050a2:	607b      	str	r3, [r7, #4]
 80050a4:	4b2c      	ldr	r3, [pc, #176]	; (8005158 <SystemClock_Config+0xdc>)
 80050a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a8:	4a2b      	ldr	r2, [pc, #172]	; (8005158 <SystemClock_Config+0xdc>)
 80050aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ae:	6413      	str	r3, [r2, #64]	; 0x40
 80050b0:	4b29      	ldr	r3, [pc, #164]	; (8005158 <SystemClock_Config+0xdc>)
 80050b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b8:	607b      	str	r3, [r7, #4]
 80050ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80050bc:	2300      	movs	r3, #0
 80050be:	603b      	str	r3, [r7, #0]
 80050c0:	4b26      	ldr	r3, [pc, #152]	; (800515c <SystemClock_Config+0xe0>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a25      	ldr	r2, [pc, #148]	; (800515c <SystemClock_Config+0xe0>)
 80050c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	4b23      	ldr	r3, [pc, #140]	; (800515c <SystemClock_Config+0xe0>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80050d4:	603b      	str	r3, [r7, #0]
 80050d6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80050d8:	2301      	movs	r3, #1
 80050da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80050dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80050e2:	2302      	movs	r3, #2
 80050e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80050e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80050ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80050ec:	2304      	movs	r3, #4
 80050ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80050f0:	23b4      	movs	r3, #180	; 0xb4
 80050f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80050f4:	2302      	movs	r3, #2
 80050f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80050f8:	2302      	movs	r3, #2
 80050fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80050fc:	2302      	movs	r3, #2
 80050fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005100:	f107 031c 	add.w	r3, r7, #28
 8005104:	4618      	mov	r0, r3
 8005106:	f004 fa85 	bl	8009614 <HAL_RCC_OscConfig>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8005110:	f000 f826 	bl	8005160 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005114:	f003 ff62 	bl	8008fdc <HAL_PWREx_EnableOverDrive>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800511e:	f000 f81f 	bl	8005160 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005122:	230f      	movs	r3, #15
 8005124:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005126:	2302      	movs	r3, #2
 8005128:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800512a:	2300      	movs	r3, #0
 800512c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800512e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005132:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005138:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800513a:	f107 0308 	add.w	r3, r7, #8
 800513e:	2105      	movs	r1, #5
 8005140:	4618      	mov	r0, r3
 8005142:	f003 ff9b 	bl	800907c <HAL_RCC_ClockConfig>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800514c:	f000 f808 	bl	8005160 <Error_Handler>
  }
}
 8005150:	bf00      	nop
 8005152:	3750      	adds	r7, #80	; 0x50
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40023800 	.word	0x40023800
 800515c:	40007000 	.word	0x40007000

08005160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005164:	bf00      	nop
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <fast_fmaxf>:

#include "math_ops.h"
#include "lookup.h"


float fast_fmaxf(float x, float y){
 800516e:	b480      	push	{r7}
 8005170:	b083      	sub	sp, #12
 8005172:	af00      	add	r7, sp, #0
 8005174:	ed87 0a01 	vstr	s0, [r7, #4]
 8005178:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 800517c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005180:	edd7 7a00 	vldr	s15, [r7]
 8005184:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518c:	dd01      	ble.n	8005192 <fast_fmaxf+0x24>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	e000      	b.n	8005194 <fast_fmaxf+0x26>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	ee07 3a90 	vmov	s15, r3
    }
 8005198:	eeb0 0a67 	vmov.f32	s0, s15
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <fast_fminf>:

float fast_fminf(float x, float y){
 80051a6:	b480      	push	{r7}
 80051a8:	b083      	sub	sp, #12
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	ed87 0a01 	vstr	s0, [r7, #4]
 80051b0:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 80051b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80051b8:	edd7 7a00 	vldr	s15, [r7]
 80051bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c4:	d501      	bpl.n	80051ca <fast_fminf+0x24>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	e000      	b.n	80051cc <fast_fminf+0x26>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	ee07 3a90 	vmov	s15, r3
    }
 80051d0:	eeb0 0a67 	vmov.f32	s0, s15
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <fmaxf3>:

float fmaxf3(float x, float y, float z){
 80051de:	b480      	push	{r7}
 80051e0:	b085      	sub	sp, #20
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	ed87 0a03 	vstr	s0, [r7, #12]
 80051e8:	edc7 0a02 	vstr	s1, [r7, #8]
 80051ec:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 80051f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80051f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80051f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005200:	dd0c      	ble.n	800521c <fmaxf3+0x3e>
 8005202:	ed97 7a03 	vldr	s14, [r7, #12]
 8005206:	edd7 7a01 	vldr	s15, [r7, #4]
 800520a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800520e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005212:	dd01      	ble.n	8005218 <fmaxf3+0x3a>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	e00d      	b.n	8005234 <fmaxf3+0x56>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	e00b      	b.n	8005234 <fmaxf3+0x56>
 800521c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005220:	edd7 7a01 	vldr	s15, [r7, #4]
 8005224:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800522c:	dd01      	ble.n	8005232 <fmaxf3+0x54>
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	e000      	b.n	8005234 <fmaxf3+0x56>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	ee07 3a90 	vmov	s15, r3
    }
 8005238:	eeb0 0a67 	vmov.f32	s0, s15
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <fminf3>:

float fminf3(float x, float y, float z){
 8005246:	b480      	push	{r7}
 8005248:	b085      	sub	sp, #20
 800524a:	af00      	add	r7, sp, #0
 800524c:	ed87 0a03 	vstr	s0, [r7, #12]
 8005250:	edc7 0a02 	vstr	s1, [r7, #8]
 8005254:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 8005258:	ed97 7a03 	vldr	s14, [r7, #12]
 800525c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005260:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005268:	d50c      	bpl.n	8005284 <fminf3+0x3e>
 800526a:	ed97 7a03 	vldr	s14, [r7, #12]
 800526e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005272:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800527a:	d501      	bpl.n	8005280 <fminf3+0x3a>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	e00d      	b.n	800529c <fminf3+0x56>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	e00b      	b.n	800529c <fminf3+0x56>
 8005284:	ed97 7a02 	vldr	s14, [r7, #8]
 8005288:	edd7 7a01 	vldr	s15, [r7, #4]
 800528c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005294:	d501      	bpl.n	800529a <fminf3+0x54>
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	e000      	b.n	800529c <fminf3+0x56>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	ee07 3a90 	vmov	s15, r3
    }
 80052a0:	eeb0 0a67 	vmov.f32	s0, s15
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <limit_norm>:
float roundf(float x){
    /// Returns nearest integer ///
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b086      	sub	sp, #24
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	ed87 0a01 	vstr	s0, [r7, #4]
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	ed93 7a00 	vldr	s14, [r3]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	edd3 7a00 	vldr	s15, [r3]
 80052c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	edd3 6a00 	vldr	s13, [r3]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	edd3 7a00 	vldr	s15, [r3]
 80052d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052e0:	eeb0 0a67 	vmov.f32	s0, s15
 80052e4:	f006 ff06 	bl	800c0f4 <sqrtf>
 80052e8:	ed87 0a05 	vstr	s0, [r7, #20]
    if(norm > limit){
 80052ec:	ed97 7a05 	vldr	s14, [r7, #20]
 80052f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80052f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052fc:	dc00      	bgt.n	8005300 <limit_norm+0x52>
        *x = *x * limit/norm;
        *y = *y * limit/norm;
        }
    }
 80052fe:	e01b      	b.n	8005338 <limit_norm+0x8a>
        *x = *x * limit/norm;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	ed93 7a00 	vldr	s14, [r3]
 8005306:	edd7 7a01 	vldr	s15, [r7, #4]
 800530a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800530e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	edc3 7a00 	vstr	s15, [r3]
        *y = *y * limit/norm;
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	ed93 7a00 	vldr	s14, [r3]
 8005322:	edd7 7a01 	vldr	s15, [r7, #4]
 8005326:	ee67 6a27 	vmul.f32	s13, s14, s15
 800532a:	ed97 7a05 	vldr	s14, [r7, #20]
 800532e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	edc3 7a00 	vstr	s15, [r3]
    }
 8005338:	bf00      	nop
 800533a:	3718      	adds	r7, #24
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <float_to_uint>:
    
void limit(float *x, float min, float max){
    *x = fast_fmaxf(fast_fminf(*x, max), min);
    }

int float_to_uint(float x, float x_min, float x_max, int bits){
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	ed87 0a03 	vstr	s0, [r7, #12]
 800534a:	edc7 0a02 	vstr	s1, [r7, #8]
 800534e:	ed87 1a01 	vstr	s2, [r7, #4]
 8005352:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 8005354:	ed97 7a01 	vldr	s14, [r7, #4]
 8005358:	edd7 7a02 	vldr	s15, [r7, #8]
 800535c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005360:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 8005368:	ed97 7a03 	vldr	s14, [r7, #12]
 800536c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005370:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005374:	2201      	movs	r2, #1
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	fa02 f303 	lsl.w	r3, r2, r3
 800537c:	3b01      	subs	r3, #1
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005386:	ee67 6a27 	vmul.f32	s13, s14, s15
 800538a:	ed97 7a05 	vldr	s14, [r7, #20]
 800538e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005392:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005396:	ee17 3a90 	vmov	r3, s15
    }
 800539a:	4618      	mov	r0, r3
 800539c:	371c      	adds	r7, #28
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <uint_to_float>:
    
    
float uint_to_float(int x_int, float x_min, float x_max, int bits){
 80053a6:	b480      	push	{r7}
 80053a8:	b087      	sub	sp, #28
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	60f8      	str	r0, [r7, #12]
 80053ae:	ed87 0a02 	vstr	s0, [r7, #8]
 80053b2:	edc7 0a01 	vstr	s1, [r7, #4]
 80053b6:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 80053b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80053bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80053c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053c4:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	ee07 3a90 	vmov	s15, r3
 80053d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80053da:	ee67 6a27 	vmul.f32	s13, s14, s15
 80053de:	2201      	movs	r2, #1
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	fa02 f303 	lsl.w	r3, r2, r3
 80053e6:	3b01      	subs	r3, #1
 80053e8:	ee07 3a90 	vmov	s15, r3
 80053ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80053f8:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 80053fc:	eeb0 0a67 	vmov.f32	s0, s15
 8005400:	371c      	adds	r7, #28
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
	...

0800540c <sin_lut>:

float sin_lut(float theta){
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWO_PI_F);
 8005416:	eddf 0a17 	vldr	s1, [pc, #92]	; 8005474 <sin_lut+0x68>
 800541a:	ed97 0a01 	vldr	s0, [r7, #4]
 800541e:	f006 fe3d 	bl	800c09c <fmodf>
 8005422:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = theta<0 ? theta + TWO_PI_F : theta;
 8005426:	edd7 7a01 	vldr	s15, [r7, #4]
 800542a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800542e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005432:	d506      	bpl.n	8005442 <sin_lut+0x36>
 8005434:	edd7 7a01 	vldr	s15, [r7, #4]
 8005438:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005474 <sin_lut+0x68>
 800543c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005440:	e001      	b.n	8005446 <sin_lut+0x3a>
 8005442:	edd7 7a01 	vldr	s15, [r7, #4]
 8005446:	edc7 7a01 	vstr	s15, [r7, #4]

	return sin_tab[(int) (LUT_MULT*theta)];
 800544a:	edd7 7a01 	vldr	s15, [r7, #4]
 800544e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8005478 <sin_lut+0x6c>
 8005452:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005456:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800545a:	ee17 3a90 	vmov	r3, s15
 800545e:	4a07      	ldr	r2, [pc, #28]	; (800547c <sin_lut+0x70>)
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	ee07 3a90 	vmov	s15, r3
}
 800546a:	eeb0 0a67 	vmov.f32	s0, s15
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	40c90fdb 	.word	0x40c90fdb
 8005478:	42a2f983 	.word	0x42a2f983
 800547c:	0801157c 	.word	0x0801157c

08005480 <cos_lut>:

float cos_lut(float theta){
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lut(PI_OVER_2_F - theta);
 800548a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80054ac <cos_lut+0x2c>
 800548e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005492:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005496:	eeb0 0a67 	vmov.f32	s0, s15
 800549a:	f7ff ffb7 	bl	800540c <sin_lut>
 800549e:	eef0 7a40 	vmov.f32	s15, s0
}
 80054a2:	eeb0 0a67 	vmov.f32	s0, s15
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	3fc90fdb 	.word	0x3fc90fdb

080054b0 <ps_warmup>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void ps_warmup(EncoderStruct * encoder, int n){
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af02      	add	r7, sp, #8
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
	for(int i = 0; i<n; i++){
 80054ba:	2300      	movs	r3, #0
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	e021      	b.n	8005504 <ps_warmup+0x54>
		encoder->spi_tx_word = 0x0000;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	801a      	strh	r2, [r3, #0]
		ENC_CS_LOW; 	// CS low
 80054c6:	2200      	movs	r2, #0
 80054c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054cc:	4812      	ldr	r0, [pc, #72]	; (8005518 <ps_warmup+0x68>)
 80054ce:	f003 fd6b 	bl	8008fa8 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 80054d2:	6879      	ldr	r1, [r7, #4]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	1c9a      	adds	r2, r3, #2
 80054d8:	2364      	movs	r3, #100	; 0x64
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	2301      	movs	r3, #1
 80054de:	480f      	ldr	r0, [pc, #60]	; (800551c <ps_warmup+0x6c>)
 80054e0:	f004 fbbf 	bl	8009c62 <HAL_SPI_TransmitReceive>
		while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 80054e4:	bf00      	nop
 80054e6:	4b0d      	ldr	r3, [pc, #52]	; (800551c <ps_warmup+0x6c>)
 80054e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d0f9      	beq.n	80054e6 <ps_warmup+0x36>
		ENC_CS_HIGH; 	// CS high
 80054f2:	2201      	movs	r2, #1
 80054f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054f8:	4807      	ldr	r0, [pc, #28]	; (8005518 <ps_warmup+0x68>)
 80054fa:	f003 fd55 	bl	8008fa8 <HAL_GPIO_WritePin>
	for(int i = 0; i<n; i++){
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	3301      	adds	r3, #1
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	429a      	cmp	r2, r3
 800550a:	dbd9      	blt.n	80054c0 <ps_warmup+0x10>
	}
}
 800550c:	bf00      	nop
 800550e:	bf00      	nop
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	40020000 	.word	0x40020000
 800551c:	20009520 	.word	0x20009520

08005520 <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 8005520:	b580      	push	{r7, lr}
 8005522:	b08c      	sub	sp, #48	; 0x30
 8005524:	af02      	add	r7, sp, #8
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	ed87 0a00 	vstr	s0, [r7]
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	609a      	str	r2, [r3, #8]
	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
 8005534:	2313      	movs	r3, #19
 8005536:	627b      	str	r3, [r7, #36]	; 0x24
 8005538:	e011      	b.n	800555e <ps_sample+0x3e>
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	3b01      	subs	r3, #1
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	3302      	adds	r3, #2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	3304      	adds	r3, #4
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	6879      	ldr	r1, [r7, #4]
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	3302      	adds	r3, #2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	440b      	add	r3, r1
 8005554:	3304      	adds	r3, #4
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555a:	3b01      	subs	r3, #1
 800555c:	627b      	str	r3, [r7, #36]	; 0x24
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	2b00      	cmp	r3, #0
 8005562:	dcea      	bgt.n	800553a <ps_sample+0x1a>
	//for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->count_buff[i] = encoder->count_buff[i-1];}
	//memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float)); // this is much slower for some reason

	/* SPI read/write */
	encoder->spi_tx_word = ENC_READ_WORD;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	801a      	strh	r2, [r3, #0]
	ENC_CS_LOW; 	// CS low
 800556a:	2200      	movs	r2, #0
 800556c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005570:	48ac      	ldr	r0, [pc, #688]	; (8005824 <ps_sample+0x304>)
 8005572:	f003 fd19 	bl	8008fa8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 8005576:	6879      	ldr	r1, [r7, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	1c9a      	adds	r2, r3, #2
 800557c:	2364      	movs	r3, #100	; 0x64
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	2301      	movs	r3, #1
 8005582:	48a9      	ldr	r0, [pc, #676]	; (8005828 <ps_sample+0x308>)
 8005584:	f004 fb6d 	bl	8009c62 <HAL_SPI_TransmitReceive>
	while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8005588:	bf00      	nop
 800558a:	4ba7      	ldr	r3, [pc, #668]	; (8005828 <ps_sample+0x308>)
 800558c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d0f9      	beq.n	800558a <ps_sample+0x6a>
	ENC_CS_HIGH; 	// CS high
 8005596:	2201      	movs	r2, #1
 8005598:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800559c:	48a1      	ldr	r0, [pc, #644]	; (8005824 <ps_sample+0x304>)
 800559e:	f003 fd03 	bl	8008fa8 <HAL_GPIO_WritePin>
	encoder->raw = encoder ->spi_rx_word;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	885b      	ldrh	r3, [r3, #2]
 80055a6:	461a      	mov	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	675a      	str	r2, [r3, #116]	; 0x74

	/* Linearization */
	int off_1 = encoder->offset_lut[(encoder->raw)>>9];				// lookup table lower entry
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b0:	125b      	asrs	r3, r3, #9
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	3336      	adds	r3, #54	; 0x36
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	61fb      	str	r3, [r7, #28]
	int off_2 = encoder->offset_lut[((encoder->raw>>9)+1)%128];		// lookup table higher entry
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055c2:	125b      	asrs	r3, r3, #9
 80055c4:	3301      	adds	r3, #1
 80055c6:	425a      	negs	r2, r3
 80055c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80055d0:	bf58      	it	pl
 80055d2:	4253      	negpl	r3, r2
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	3336      	adds	r3, #54	; 0x36
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	61bb      	str	r3, [r7, #24]
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>9)<<9))>>9);     // Interpolate between lookup table entries
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80055ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055ee:	fb02 f303 	mul.w	r3, r2, r3
 80055f2:	125b      	asrs	r3, r3, #9
 80055f4:	69fa      	ldr	r2, [r7, #28]
 80055f6:	4413      	add	r3, r2
 80055f8:	617b      	str	r3, [r7, #20]
	encoder->count = encoder->raw + off_interp;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	441a      	add	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	679a      	str	r2, [r3, #120]	; 0x78


	/* Real angles in radians */
	encoder->angle_singleturn = ((float)(encoder->count-M_ZERO))/((float)ENC_CPR);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800560a:	4b88      	ldr	r3, [pc, #544]	; (800582c <ps_sample+0x30c>)
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	ee07 3a90 	vmov	s15, r3
 8005614:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005618:	eddf 6a85 	vldr	s13, [pc, #532]	; 8005830 <ps_sample+0x310>
 800561c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	edc3 7a01 	vstr	s15, [r3, #4]
	int int_angle = encoder->angle_singleturn;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	edd3 7a01 	vldr	s15, [r3, #4]
 800562c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005630:	ee17 3a90 	vmov	r3, s15
 8005634:	613b      	str	r3, [r7, #16]
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	ed93 7a01 	vldr	s14, [r3, #4]
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	ee07 3a90 	vmov	s15, r3
 8005642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005646:	ee77 7a67 	vsub.f32	s15, s14, s15
 800564a:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8005834 <ps_sample+0x314>
 800564e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	edc3 7a01 	vstr	s15, [r3, #4]
	//encoder->angle_singleturn = TWO_PI_F*fmodf(((float)(encoder->count-M_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	edd3 7a01 	vldr	s15, [r3, #4]
 800565e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005666:	d507      	bpl.n	8005678 <ps_sample+0x158>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	edd3 7a01 	vldr	s15, [r3, #4]
 800566e:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8005834 <ps_sample+0x314>
 8005672:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005676:	e002      	b.n	800567e <ps_sample+0x15e>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	edd3 7a01 	vldr	s15, [r3, #4]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	edc3 7a01 	vstr	s15, [r3, #4]

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800568e:	4b67      	ldr	r3, [pc, #412]	; (800582c <ps_sample+0x30c>)
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	ee07 3a90 	vmov	s15, r3
 8005698:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800569c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056a0:	eddf 6a63 	vldr	s13, [pc, #396]	; 8005830 <ps_sample+0x310>
 80056a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	int_angle = (int)encoder->elec_angle;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80056b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056b8:	ee17 3a90 	vmov	r3, s15
 80056bc:	613b      	str	r3, [r7, #16]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	ee07 3a90 	vmov	s15, r3
 80056ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056d2:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8005834 <ps_sample+0x314>
 80056d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	//encoder->elec_angle = TWO_PI_F*fmodf((encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80056e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80056ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ee:	d507      	bpl.n	8005700 <ps_sample+0x1e0>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80056f6:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8005834 <ps_sample+0x314>
 80056fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056fe:	e002      	b.n	8005706 <ps_sample+0x1e6>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	/* Rollover */
	int rollover = 0;
 800570c:	2300      	movs	r3, #0
 800570e:	623b      	str	r3, [r7, #32]
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	ed93 7a01 	vldr	s14, [r3, #4]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	edd3 7a02 	vldr	s15, [r3, #8]
 800571c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005720:	edc7 7a03 	vstr	s15, [r7, #12]
	if(angle_diff > PI_F){rollover = -1;}
 8005724:	edd7 7a03 	vldr	s15, [r7, #12]
 8005728:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8005838 <ps_sample+0x318>
 800572c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005734:	dd03      	ble.n	800573e <ps_sample+0x21e>
 8005736:	f04f 33ff 	mov.w	r3, #4294967295
 800573a:	623b      	str	r3, [r7, #32]
 800573c:	e00a      	b.n	8005754 <ps_sample+0x234>
	else if(angle_diff < -PI_F){rollover = 1;}
 800573e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005742:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800583c <ps_sample+0x31c>
 8005746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800574a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800574e:	d501      	bpl.n	8005754 <ps_sample+0x234>
 8005750:	2301      	movs	r3, #1
 8005752:	623b      	str	r3, [r7, #32]
	encoder->turns += rollover;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	441a      	add	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if(!encoder->first_sample){
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 32dc 	ldrb.w	r3, [r3, #732]	; 0x2dc
 800576a:	2b00      	cmp	r3, #0
 800576c:	d125      	bne.n	80057ba <ps_sample+0x29a>
		encoder->turns = 0;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		if(encoder->angle_singleturn > PI_OVER_2_F){encoder->turns = -1;}
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	edd3 7a01 	vldr	s15, [r3, #4]
 800577c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005840 <ps_sample+0x320>
 8005780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005788:	dd05      	ble.n	8005796 <ps_sample+0x276>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f04f 32ff 	mov.w	r2, #4294967295
 8005790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005794:	e00d      	b.n	80057b2 <ps_sample+0x292>
		else if(encoder->angle_singleturn < -PI_OVER_2_F){encoder->turns = 1;}
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	edd3 7a01 	vldr	s15, [r3, #4]
 800579c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8005844 <ps_sample+0x324>
 80057a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057a8:	d503      	bpl.n	80057b2 <ps_sample+0x292>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		encoder->first_sample = 1;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 22dc 	strb.w	r2, [r3, #732]	; 0x2dc
	}



	/* Multi-turn position */
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057c6:	ee07 3a90 	vmov	s15, r3
 80057ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057ce:	eddf 6a19 	vldr	s13, [pc, #100]	; 8005834 <ps_sample+0x314>
 80057d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80057d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	edc3 7a03 	vstr	s15, [r3, #12]
			c1 += encoder->angle_multiturn[i]*q*(i - ibar);
		}
		encoder->vel2 = -c1/dt;
*/
	//encoder->velocity = vel2
	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	ed93 7a03 	vldr	s14, [r3, #12]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80057ec:	ee77 6a67 	vsub.f32	s13, s14, s15
 80057f0:	edd7 7a00 	vldr	s15, [r7]
 80057f4:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80057f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80057fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8005812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

}
 800581c:	bf00      	nop
 800581e:	3728      	adds	r7, #40	; 0x28
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	40020000 	.word	0x40020000
 8005828:	20009520 	.word	0x20009520
 800582c:	20009074 	.word	0x20009074
 8005830:	47800000 	.word	0x47800000
 8005834:	40c90fdb 	.word	0x40c90fdb
 8005838:	40490fdb 	.word	0x40490fdb
 800583c:	c0490fdb 	.word	0xc0490fdb
 8005840:	3fc90fdb 	.word	0x3fc90fdb
 8005844:	bfc90fdb 	.word	0xbfc90fdb

08005848 <ps_print>:

void ps_print(EncoderStruct * encoder, int dt_ms){
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
	printf("Raw: %d", encoder->raw);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005856:	4619      	mov	r1, r3
 8005858:	4818      	ldr	r0, [pc, #96]	; (80058bc <ps_print+0x74>)
 800585a:	f007 fb2d 	bl	800ceb8 <iprintf>
	printf("   Linearized Count: %d", encoder->count);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005862:	4619      	mov	r1, r3
 8005864:	4816      	ldr	r0, [pc, #88]	; (80058c0 <ps_print+0x78>)
 8005866:	f007 fb27 	bl	800ceb8 <iprintf>
	printf("   Single Turn: %f", encoder->angle_singleturn);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	4618      	mov	r0, r3
 8005870:	f7fa fe9a 	bl	80005a8 <__aeabi_f2d>
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	4812      	ldr	r0, [pc, #72]	; (80058c4 <ps_print+0x7c>)
 800587a:	f007 fb1d 	bl	800ceb8 <iprintf>
	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	4618      	mov	r0, r3
 8005884:	f7fa fe90 	bl	80005a8 <__aeabi_f2d>
 8005888:	4602      	mov	r2, r0
 800588a:	460b      	mov	r3, r1
 800588c:	480e      	ldr	r0, [pc, #56]	; (80058c8 <ps_print+0x80>)
 800588e:	f007 fb13 	bl	800ceb8 <iprintf>
	printf("   Electrical: %f", encoder->elec_angle);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005896:	4618      	mov	r0, r3
 8005898:	f7fa fe86 	bl	80005a8 <__aeabi_f2d>
 800589c:	4602      	mov	r2, r0
 800589e:	460b      	mov	r3, r1
 80058a0:	480a      	ldr	r0, [pc, #40]	; (80058cc <ps_print+0x84>)
 80058a2:	f007 fb09 	bl	800ceb8 <iprintf>
	printf("   Turns:  %d\r\n", encoder->turns);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058ac:	4619      	mov	r1, r3
 80058ae:	4808      	ldr	r0, [pc, #32]	; (80058d0 <ps_print+0x88>)
 80058b0:	f007 fb02 	bl	800ceb8 <iprintf>
	//HAL_Delay(dt_ms);
}
 80058b4:	bf00      	nop
 80058b6:	3708      	adds	r7, #8
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	08011380 	.word	0x08011380
 80058c0:	08011388 	.word	0x08011388
 80058c4:	080113a0 	.word	0x080113a0
 80058c8:	080113b4 	.word	0x080113b4
 80058cc:	080113c8 	.word	0x080113c8
 80058d0:	080113dc 	.word	0x080113dc

080058d4 <preference_writer_init>:
    __sector = sector;
    __ready = false;
}
*/

void preference_writer_init(PreferenceWriter * pr, uint32_t sector){
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
	flash_writer_init(&pr->fw, sector);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6839      	ldr	r1, [r7, #0]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fc fdb0 	bl	8002448 <flash_writer_init>
	pr->sector = sector;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	60da      	str	r2, [r3, #12]
}
 80058ee:	bf00      	nop
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <preference_writer_open>:


void preference_writer_open(PreferenceWriter * pr) {
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b082      	sub	sp, #8
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
    flash_writer_open(&pr->fw);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4618      	mov	r0, r3
 8005902:	f7fc fdbf 	bl	8002484 <flash_writer_open>
    pr->ready = true;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	741a      	strb	r2, [r3, #16]
}
 800590c:	bf00      	nop
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <preference_writer_ready>:

bool  preference_writer_ready(PreferenceWriter pr) {
 8005914:	b084      	sub	sp, #16
 8005916:	b490      	push	{r4, r7}
 8005918:	af00      	add	r7, sp, #0
 800591a:	f107 0408 	add.w	r4, r7, #8
 800591e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return pr.ready;
 8005922:	7e3b      	ldrb	r3, [r7, #24]
}
 8005924:	4618      	mov	r0, r3
 8005926:	46bd      	mov	sp, r7
 8005928:	bc90      	pop	{r4, r7}
 800592a:	b004      	add	sp, #16
 800592c:	4770      	bx	lr
	...

08005930 <preference_writer_flush>:

void preference_writer_write_float(float x, int index) {
    __float_reg[index] = x;
}

void preference_writer_flush(PreferenceWriter * pr) {
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af02      	add	r7, sp, #8
 8005936:	6078      	str	r0, [r7, #4]
    int offs;
    for (offs = 0; offs < 256; offs++) {
 8005938:	2300      	movs	r3, #0
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	e00d      	b.n	800595a <preference_writer_flush+0x2a>
        flash_writer_write_int(pr->fw, offs, __int_reg[offs]);
 800593e:	68f9      	ldr	r1, [r7, #12]
 8005940:	4a17      	ldr	r2, [pc, #92]	; (80059a0 <preference_writer_flush+0x70>)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	460b      	mov	r3, r1
 800594e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005950:	f7fc fdb4 	bl	80024bc <flash_writer_write_int>
    for (offs = 0; offs < 256; offs++) {
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	3301      	adds	r3, #1
 8005958:	60fb      	str	r3, [r7, #12]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2bff      	cmp	r3, #255	; 0xff
 800595e:	ddee      	ble.n	800593e <preference_writer_flush+0xe>
    }
    for (; offs < 320; offs++) {
 8005960:	e012      	b.n	8005988 <preference_writer_flush+0x58>
        flash_writer_write_float(pr->fw, offs, __float_reg[offs - 256]);
 8005962:	68f9      	ldr	r1, [r7, #12]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800596a:	4a0e      	ldr	r2, [pc, #56]	; (80059a4 <preference_writer_flush+0x74>)
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	edd3 7a00 	vldr	s15, [r3]
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	eeb0 0a67 	vmov.f32	s0, s15
 800597a:	460b      	mov	r3, r1
 800597c:	ca07      	ldmia	r2, {r0, r1, r2}
 800597e:	f7fc fdb3 	bl	80024e8 <flash_writer_write_float>
    for (; offs < 320; offs++) {
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	3301      	adds	r3, #1
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800598e:	dbe8      	blt.n	8005962 <preference_writer_flush+0x32>
    }
    pr->ready = false;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	741a      	strb	r2, [r3, #16]
}
 8005996:	bf00      	nop
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	20009074 	.word	0x20009074
 80059a4:	2000075c 	.word	0x2000075c

080059a8 <preference_writer_load>:

void preference_writer_load(PreferenceWriter pr) {
 80059a8:	b084      	sub	sp, #16
 80059aa:	b590      	push	{r4, r7, lr}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	f107 0418 	add.w	r4, r7, #24
 80059b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int offs;
    for (offs = 0; offs < 256; offs++) {
 80059b8:	2300      	movs	r3, #0
 80059ba:	607b      	str	r3, [r7, #4]
 80059bc:	e00d      	b.n	80059da <preference_writer_load+0x32>
        __int_reg[offs] = flash_read_int(pr.fw, offs);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f107 0218 	add.w	r2, r7, #24
 80059c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80059c6:	f7fc fdb5 	bl	8002534 <flash_read_int>
 80059ca:	4602      	mov	r2, r0
 80059cc:	4915      	ldr	r1, [pc, #84]	; (8005a24 <preference_writer_load+0x7c>)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (offs = 0; offs < 256; offs++) {
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3301      	adds	r3, #1
 80059d8:	607b      	str	r3, [r7, #4]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2bff      	cmp	r3, #255	; 0xff
 80059de:	ddee      	ble.n	80059be <preference_writer_load+0x16>
    }
    for(; offs < 320; offs++) {
 80059e0:	e013      	b.n	8005a0a <preference_writer_load+0x62>
        __float_reg[offs - 256] = flash_read_float(pr.fw, offs);
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f5a3 7480 	sub.w	r4, r3, #256	; 0x100
 80059ea:	4613      	mov	r3, r2
 80059ec:	f107 0218 	add.w	r2, r7, #24
 80059f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80059f2:	f7fc fdb5 	bl	8002560 <flash_read_float>
 80059f6:	eef0 7a40 	vmov.f32	s15, s0
 80059fa:	4a0b      	ldr	r2, [pc, #44]	; (8005a28 <preference_writer_load+0x80>)
 80059fc:	00a3      	lsls	r3, r4, #2
 80059fe:	4413      	add	r3, r2
 8005a00:	edc3 7a00 	vstr	s15, [r3]
    for(; offs < 320; offs++) {
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	3301      	adds	r3, #1
 8005a08:	607b      	str	r3, [r7, #4]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005a10:	dbe7      	blt.n	80059e2 <preference_writer_load+0x3a>
    }
}
 8005a12:	bf00      	nop
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005a1e:	b004      	add	sp, #16
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	20009074 	.word	0x20009074
 8005a28:	2000075c 	.word	0x2000075c

08005a2c <preference_writer_close>:

void preference_writer_close(PreferenceWriter *pr) {
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
    pr->ready = false;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	741a      	strb	r2, [r3, #16]
    flash_writer_close(&pr->fw);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fc fd6c 	bl	800251a <flash_writer_close>
}
 8005a42:	bf00      	nop
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005a50:	4b18      	ldr	r3, [pc, #96]	; (8005ab4 <MX_SPI1_Init+0x68>)
 8005a52:	4a19      	ldr	r2, [pc, #100]	; (8005ab8 <MX_SPI1_Init+0x6c>)
 8005a54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005a56:	4b17      	ldr	r3, [pc, #92]	; (8005ab4 <MX_SPI1_Init+0x68>)
 8005a58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005a5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005a5e:	4b15      	ldr	r3, [pc, #84]	; (8005ab4 <MX_SPI1_Init+0x68>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8005a64:	4b13      	ldr	r3, [pc, #76]	; (8005ab4 <MX_SPI1_Init+0x68>)
 8005a66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a6a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a6c:	4b11      	ldr	r3, [pc, #68]	; (8005ab4 <MX_SPI1_Init+0x68>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005a72:	4b10      	ldr	r3, [pc, #64]	; (8005ab4 <MX_SPI1_Init+0x68>)
 8005a74:	2201      	movs	r2, #1
 8005a76:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005a78:	4b0e      	ldr	r3, [pc, #56]	; (8005ab4 <MX_SPI1_Init+0x68>)
 8005a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a7e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005a80:	4b0c      	ldr	r3, [pc, #48]	; (8005ab4 <MX_SPI1_Init+0x68>)
 8005a82:	2228      	movs	r2, #40	; 0x28
 8005a84:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005a86:	4b0b      	ldr	r3, [pc, #44]	; (8005ab4 <MX_SPI1_Init+0x68>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005a8c:	4b09      	ldr	r3, [pc, #36]	; (8005ab4 <MX_SPI1_Init+0x68>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a92:	4b08      	ldr	r3, [pc, #32]	; (8005ab4 <MX_SPI1_Init+0x68>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005a98:	4b06      	ldr	r3, [pc, #24]	; (8005ab4 <MX_SPI1_Init+0x68>)
 8005a9a:	220a      	movs	r2, #10
 8005a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005a9e:	4805      	ldr	r0, [pc, #20]	; (8005ab4 <MX_SPI1_Init+0x68>)
 8005aa0:	f004 f856 	bl	8009b50 <HAL_SPI_Init>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8005aaa:	f7ff fb59 	bl	8005160 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005aae:	bf00      	nop
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20009578 	.word	0x20009578
 8005ab8:	40013000 	.word	0x40013000

08005abc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8005ac0:	4b18      	ldr	r3, [pc, #96]	; (8005b24 <MX_SPI3_Init+0x68>)
 8005ac2:	4a19      	ldr	r2, [pc, #100]	; (8005b28 <MX_SPI3_Init+0x6c>)
 8005ac4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005ac6:	4b17      	ldr	r3, [pc, #92]	; (8005b24 <MX_SPI3_Init+0x68>)
 8005ac8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005acc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005ace:	4b15      	ldr	r3, [pc, #84]	; (8005b24 <MX_SPI3_Init+0x68>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8005ad4:	4b13      	ldr	r3, [pc, #76]	; (8005b24 <MX_SPI3_Init+0x68>)
 8005ad6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ada:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005adc:	4b11      	ldr	r3, [pc, #68]	; (8005b24 <MX_SPI3_Init+0x68>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005ae2:	4b10      	ldr	r3, [pc, #64]	; (8005b24 <MX_SPI3_Init+0x68>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005ae8:	4b0e      	ldr	r3, [pc, #56]	; (8005b24 <MX_SPI3_Init+0x68>)
 8005aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aee:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005af0:	4b0c      	ldr	r3, [pc, #48]	; (8005b24 <MX_SPI3_Init+0x68>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005af6:	4b0b      	ldr	r3, [pc, #44]	; (8005b24 <MX_SPI3_Init+0x68>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005afc:	4b09      	ldr	r3, [pc, #36]	; (8005b24 <MX_SPI3_Init+0x68>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b02:	4b08      	ldr	r3, [pc, #32]	; (8005b24 <MX_SPI3_Init+0x68>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8005b08:	4b06      	ldr	r3, [pc, #24]	; (8005b24 <MX_SPI3_Init+0x68>)
 8005b0a:	220a      	movs	r2, #10
 8005b0c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005b0e:	4805      	ldr	r0, [pc, #20]	; (8005b24 <MX_SPI3_Init+0x68>)
 8005b10:	f004 f81e 	bl	8009b50 <HAL_SPI_Init>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8005b1a:	f7ff fb21 	bl	8005160 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005b1e:	bf00      	nop
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	20009520 	.word	0x20009520
 8005b28:	40003c00 	.word	0x40003c00

08005b2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b08c      	sub	sp, #48	; 0x30
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b34:	f107 031c 	add.w	r3, r7, #28
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	605a      	str	r2, [r3, #4]
 8005b3e:	609a      	str	r2, [r3, #8]
 8005b40:	60da      	str	r2, [r3, #12]
 8005b42:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a32      	ldr	r2, [pc, #200]	; (8005c14 <HAL_SPI_MspInit+0xe8>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d12c      	bne.n	8005ba8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61bb      	str	r3, [r7, #24]
 8005b52:	4b31      	ldr	r3, [pc, #196]	; (8005c18 <HAL_SPI_MspInit+0xec>)
 8005b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b56:	4a30      	ldr	r2, [pc, #192]	; (8005c18 <HAL_SPI_MspInit+0xec>)
 8005b58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8005b5e:	4b2e      	ldr	r3, [pc, #184]	; (8005c18 <HAL_SPI_MspInit+0xec>)
 8005b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b66:	61bb      	str	r3, [r7, #24]
 8005b68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	617b      	str	r3, [r7, #20]
 8005b6e:	4b2a      	ldr	r3, [pc, #168]	; (8005c18 <HAL_SPI_MspInit+0xec>)
 8005b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b72:	4a29      	ldr	r2, [pc, #164]	; (8005c18 <HAL_SPI_MspInit+0xec>)
 8005b74:	f043 0301 	orr.w	r3, r3, #1
 8005b78:	6313      	str	r3, [r2, #48]	; 0x30
 8005b7a:	4b27      	ldr	r3, [pc, #156]	; (8005c18 <HAL_SPI_MspInit+0xec>)
 8005b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005b86:	23e0      	movs	r3, #224	; 0xe0
 8005b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b92:	2303      	movs	r3, #3
 8005b94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005b96:	2305      	movs	r3, #5
 8005b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b9a:	f107 031c 	add.w	r3, r7, #28
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	481e      	ldr	r0, [pc, #120]	; (8005c1c <HAL_SPI_MspInit+0xf0>)
 8005ba2:	f003 f855 	bl	8008c50 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005ba6:	e031      	b.n	8005c0c <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI3)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a1c      	ldr	r2, [pc, #112]	; (8005c20 <HAL_SPI_MspInit+0xf4>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d12c      	bne.n	8005c0c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	613b      	str	r3, [r7, #16]
 8005bb6:	4b18      	ldr	r3, [pc, #96]	; (8005c18 <HAL_SPI_MspInit+0xec>)
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bba:	4a17      	ldr	r2, [pc, #92]	; (8005c18 <HAL_SPI_MspInit+0xec>)
 8005bbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8005bc2:	4b15      	ldr	r3, [pc, #84]	; (8005c18 <HAL_SPI_MspInit+0xec>)
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bca:	613b      	str	r3, [r7, #16]
 8005bcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	4b11      	ldr	r3, [pc, #68]	; (8005c18 <HAL_SPI_MspInit+0xec>)
 8005bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd6:	4a10      	ldr	r2, [pc, #64]	; (8005c18 <HAL_SPI_MspInit+0xec>)
 8005bd8:	f043 0304 	orr.w	r3, r3, #4
 8005bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8005bde:	4b0e      	ldr	r3, [pc, #56]	; (8005c18 <HAL_SPI_MspInit+0xec>)
 8005be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be2:	f003 0304 	and.w	r3, r3, #4
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005bea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005bfc:	2306      	movs	r3, #6
 8005bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c00:	f107 031c 	add.w	r3, r7, #28
 8005c04:	4619      	mov	r1, r3
 8005c06:	4807      	ldr	r0, [pc, #28]	; (8005c24 <HAL_SPI_MspInit+0xf8>)
 8005c08:	f003 f822 	bl	8008c50 <HAL_GPIO_Init>
}
 8005c0c:	bf00      	nop
 8005c0e:	3730      	adds	r7, #48	; 0x30
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	40013000 	.word	0x40013000
 8005c18:	40023800 	.word	0x40023800
 8005c1c:	40020000 	.word	0x40020000
 8005c20:	40003c00 	.word	0x40003c00
 8005c24:	40020800 	.word	0x40020800

08005c28 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8005c2c:	4b07      	ldr	r3, [pc, #28]	; (8005c4c <FLASH_Unlock+0x24>)
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	da05      	bge.n	8005c40 <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8005c34:	4b05      	ldr	r3, [pc, #20]	; (8005c4c <FLASH_Unlock+0x24>)
 8005c36:	4a06      	ldr	r2, [pc, #24]	; (8005c50 <FLASH_Unlock+0x28>)
 8005c38:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8005c3a:	4b04      	ldr	r3, [pc, #16]	; (8005c4c <FLASH_Unlock+0x24>)
 8005c3c:	4a05      	ldr	r2, [pc, #20]	; (8005c54 <FLASH_Unlock+0x2c>)
 8005c3e:	605a      	str	r2, [r3, #4]
  }  
}
 8005c40:	bf00      	nop
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	40023c00 	.word	0x40023c00
 8005c50:	45670123 	.word	0x45670123
 8005c54:	cdef89ab 	.word	0xcdef89ab

08005c58 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005c5c:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <FLASH_Lock+0x1c>)
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	4a04      	ldr	r2, [pc, #16]	; (8005c74 <FLASH_Lock+0x1c>)
 8005c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c66:	6113      	str	r3, [r2, #16]
}
 8005c68:	bf00      	nop
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	40023c00 	.word	0x40023c00

08005c78 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	460b      	mov	r3, r1
 8005c82:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 8005c84:	2300      	movs	r3, #0
 8005c86:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE2;
 8005c88:	2309      	movs	r3, #9
 8005c8a:	72fb      	strb	r3, [r7, #11]
 
  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8005c8c:	78fb      	ldrb	r3, [r7, #3]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d102      	bne.n	8005c98 <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8005c92:	2300      	movs	r3, #0
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	e010      	b.n	8005cba <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 8005c98:	78fb      	ldrb	r3, [r7, #3]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d103      	bne.n	8005ca6 <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	e009      	b.n	8005cba <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 8005ca6:	78fb      	ldrb	r3, [r7, #3]
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d103      	bne.n	8005cb4 <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005cac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	e002      	b.n	8005cba <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005cb4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005cb8:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation2();
 8005cba:	f000 f8bf 	bl	8005e3c <FLASH_WaitForLastOperation2>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE2)
 8005cc2:	7afb      	ldrb	r3, [r7, #11]
 8005cc4:	2b09      	cmp	r3, #9
 8005cc6:	d12f      	bne.n	8005d28 <FLASH_EraseSector+0xb0>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 8005cc8:	4b1a      	ldr	r3, [pc, #104]	; (8005d34 <FLASH_EraseSector+0xbc>)
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	4a19      	ldr	r2, [pc, #100]	; (8005d34 <FLASH_EraseSector+0xbc>)
 8005cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cd2:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 8005cd4:	4b17      	ldr	r3, [pc, #92]	; (8005d34 <FLASH_EraseSector+0xbc>)
 8005cd6:	691a      	ldr	r2, [r3, #16]
 8005cd8:	4916      	ldr	r1, [pc, #88]	; (8005d34 <FLASH_EraseSector+0xbc>)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	610b      	str	r3, [r1, #16]
    FLASH->CR &= SECTOR_MASK;
 8005ce0:	4b14      	ldr	r3, [pc, #80]	; (8005d34 <FLASH_EraseSector+0xbc>)
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	4a13      	ldr	r2, [pc, #76]	; (8005d34 <FLASH_EraseSector+0xbc>)
 8005ce6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005cea:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8005cec:	4b11      	ldr	r3, [pc, #68]	; (8005d34 <FLASH_EraseSector+0xbc>)
 8005cee:	691a      	ldr	r2, [r3, #16]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	4a0f      	ldr	r2, [pc, #60]	; (8005d34 <FLASH_EraseSector+0xbc>)
 8005cf6:	f043 0302 	orr.w	r3, r3, #2
 8005cfa:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8005cfc:	4b0d      	ldr	r3, [pc, #52]	; (8005d34 <FLASH_EraseSector+0xbc>)
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	4a0c      	ldr	r2, [pc, #48]	; (8005d34 <FLASH_EraseSector+0xbc>)
 8005d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d06:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation2();
 8005d08:	f000 f898 	bl	8005e3c <FLASH_WaitForLastOperation2>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 8005d10:	4b08      	ldr	r3, [pc, #32]	; (8005d34 <FLASH_EraseSector+0xbc>)
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	4a07      	ldr	r2, [pc, #28]	; (8005d34 <FLASH_EraseSector+0xbc>)
 8005d16:	f023 0302 	bic.w	r3, r3, #2
 8005d1a:	6113      	str	r3, [r2, #16]
    FLASH->CR &= SECTOR_MASK; 
 8005d1c:	4b05      	ldr	r3, [pc, #20]	; (8005d34 <FLASH_EraseSector+0xbc>)
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	4a04      	ldr	r2, [pc, #16]	; (8005d34 <FLASH_EraseSector+0xbc>)
 8005d22:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005d26:	6113      	str	r3, [r2, #16]
  }
  /* Return the Erase Status */
  return status;
 8005d28:	7afb      	ldrb	r3, [r7, #11]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	40023c00 	.word	0x40023c00

08005d38 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE2;
 8005d42:	2309      	movs	r3, #9
 8005d44:	73fb      	strb	r3, [r7, #15]
 
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation2();
 8005d46:	f000 f879 	bl	8005e3c <FLASH_WaitForLastOperation2>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE2)
 8005d4e:	7bfb      	ldrb	r3, [r7, #15]
 8005d50:	2b09      	cmp	r3, #9
 8005d52:	d11e      	bne.n	8005d92 <FLASH_ProgramWord+0x5a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8005d54:	4b11      	ldr	r3, [pc, #68]	; (8005d9c <FLASH_ProgramWord+0x64>)
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	4a10      	ldr	r2, [pc, #64]	; (8005d9c <FLASH_ProgramWord+0x64>)
 8005d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d5e:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 8005d60:	4b0e      	ldr	r3, [pc, #56]	; (8005d9c <FLASH_ProgramWord+0x64>)
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	4a0d      	ldr	r2, [pc, #52]	; (8005d9c <FLASH_ProgramWord+0x64>)
 8005d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d6a:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 8005d6c:	4b0b      	ldr	r3, [pc, #44]	; (8005d9c <FLASH_ProgramWord+0x64>)
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	4a0a      	ldr	r2, [pc, #40]	; (8005d9c <FLASH_ProgramWord+0x64>)
 8005d72:	f043 0301 	orr.w	r3, r3, #1
 8005d76:	6113      	str	r3, [r2, #16]
  
    *(__IO uint32_t*)Address = Data;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation2();
 8005d7e:	f000 f85d 	bl	8005e3c <FLASH_WaitForLastOperation2>
 8005d82:	4603      	mov	r3, r0
 8005d84:	73fb      	strb	r3, [r7, #15]
 
    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8005d86:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <FLASH_ProgramWord+0x64>)
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	4a04      	ldr	r2, [pc, #16]	; (8005d9c <FLASH_ProgramWord+0x64>)
 8005d8c:	f023 0301 	bic.w	r3, r3, #1
 8005d90:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	40023c00 	.word	0x40023c00

08005da0 <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42xx/43xxx and STM32F401xx/411xE devices)   
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8005da8:	4a04      	ldr	r2, [pc, #16]	; (8005dbc <FLASH_ClearFlag+0x1c>)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	60d3      	str	r3, [r2, #12]
}
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	40023c00 	.word	0x40023c00

08005dc0 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_RD2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE2;
 8005dc6:	2309      	movs	r3, #9
 8005dc8:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8005dca:	4b1b      	ldr	r3, [pc, #108]	; (8005e38 <FLASH_GetStatus+0x78>)
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd6:	d102      	bne.n	8005dde <FLASH_GetStatus+0x1e>
  {
    flashstatus = FLASH_BUSY2;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	71fb      	strb	r3, [r7, #7]
 8005ddc:	e025      	b.n	8005e2a <FLASH_GetStatus+0x6a>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 8005dde:	4b16      	ldr	r3, [pc, #88]	; (8005e38 <FLASH_GetStatus+0x78>)
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	f003 0310 	and.w	r3, r3, #16
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d002      	beq.n	8005df0 <FLASH_GetStatus+0x30>
    { 
      flashstatus = FLASH_ERROR_WRP2;
 8005dea:	2306      	movs	r3, #6
 8005dec:	71fb      	strb	r3, [r7, #7]
 8005dee:	e01c      	b.n	8005e2a <FLASH_GetStatus+0x6a>
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 8005df0:	4b11      	ldr	r3, [pc, #68]	; (8005e38 <FLASH_GetStatus+0x78>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <FLASH_GetStatus+0x42>
      { 
        flashstatus = FLASH_ERROR_RD2;
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	71fb      	strb	r3, [r7, #7]
 8005e00:	e013      	b.n	8005e2a <FLASH_GetStatus+0x6a>
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
 8005e02:	4b0d      	ldr	r3, [pc, #52]	; (8005e38 <FLASH_GetStatus+0x78>)
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d002      	beq.n	8005e14 <FLASH_GetStatus+0x54>
        {
          flashstatus = FLASH_ERROR_PROGRAM2; 
 8005e0e:	2307      	movs	r3, #7
 8005e10:	71fb      	strb	r3, [r7, #7]
 8005e12:	e00a      	b.n	8005e2a <FLASH_GetStatus+0x6a>
        }
        else
        {
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 8005e14:	4b08      	ldr	r3, [pc, #32]	; (8005e38 <FLASH_GetStatus+0x78>)
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f003 0302 	and.w	r3, r3, #2
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <FLASH_GetStatus+0x66>
          {
            flashstatus = FLASH_ERROR_OPERATION2;
 8005e20:	2308      	movs	r3, #8
 8005e22:	71fb      	strb	r3, [r7, #7]
 8005e24:	e001      	b.n	8005e2a <FLASH_GetStatus+0x6a>
          }
          else
          {
            flashstatus = FLASH_COMPLETE2;
 8005e26:	2309      	movs	r3, #9
 8005e28:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 8005e2a:	79fb      	ldrb	r3, [r7, #7]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	40023c00 	.word	0x40023c00

08005e3c <FLASH_WaitForLastOperation2>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_WaitForLastOperation2(void)
{ 
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE2;
 8005e42:	2309      	movs	r3, #9
 8005e44:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 8005e46:	f7ff ffbb 	bl	8005dc0 <FLASH_GetStatus>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	71fb      	strb	r3, [r7, #7]
 
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY2)
 8005e4e:	e003      	b.n	8005e58 <FLASH_WaitForLastOperation2+0x1c>
  {
    status = FLASH_GetStatus();
 8005e50:	f7ff ffb6 	bl	8005dc0 <FLASH_GetStatus>
 8005e54:	4603      	mov	r3, r0
 8005e56:	71fb      	strb	r3, [r7, #7]
  while(status == FLASH_BUSY2)
 8005e58:	79fb      	ldrb	r3, [r7, #7]
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d0f7      	beq.n	8005e50 <FLASH_WaitForLastOperation2+0x14>
  }
  /* Return the operation status */
  return status;
 8005e60:	79fb      	ldrb	r3, [r7, #7]
 8005e62:	b2db      	uxtb	r3, r3
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e72:	2300      	movs	r3, #0
 8005e74:	607b      	str	r3, [r7, #4]
 8005e76:	4b10      	ldr	r3, [pc, #64]	; (8005eb8 <HAL_MspInit+0x4c>)
 8005e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7a:	4a0f      	ldr	r2, [pc, #60]	; (8005eb8 <HAL_MspInit+0x4c>)
 8005e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e80:	6453      	str	r3, [r2, #68]	; 0x44
 8005e82:	4b0d      	ldr	r3, [pc, #52]	; (8005eb8 <HAL_MspInit+0x4c>)
 8005e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e8a:	607b      	str	r3, [r7, #4]
 8005e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e8e:	2300      	movs	r3, #0
 8005e90:	603b      	str	r3, [r7, #0]
 8005e92:	4b09      	ldr	r3, [pc, #36]	; (8005eb8 <HAL_MspInit+0x4c>)
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	4a08      	ldr	r2, [pc, #32]	; (8005eb8 <HAL_MspInit+0x4c>)
 8005e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8005e9e:	4b06      	ldr	r3, [pc, #24]	; (8005eb8 <HAL_MspInit+0x4c>)
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea6:	603b      	str	r3, [r7, #0]
 8005ea8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8005eaa:	2006      	movs	r0, #6
 8005eac:	f002 fdfc 	bl	8008aa8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005eb0:	bf00      	nop
 8005eb2:	3708      	adds	r7, #8
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	40023800 	.word	0x40023800

08005ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005ec0:	bf00      	nop
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ece:	e7fe      	b.n	8005ece <HardFault_Handler+0x4>

08005ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ed4:	e7fe      	b.n	8005ed4 <MemManage_Handler+0x4>

08005ed6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005eda:	e7fe      	b.n	8005eda <BusFault_Handler+0x4>

08005edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005edc:	b480      	push	{r7}
 8005ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ee0:	e7fe      	b.n	8005ee0 <UsageFault_Handler+0x4>

08005ee2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005ee6:	bf00      	nop
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005ef4:	bf00      	nop
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005efe:	b480      	push	{r7}
 8005f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005f02:	bf00      	nop
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f10:	f001 fa4e 	bl	80073b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f14:	bf00      	nop
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005f1c:	4803      	ldr	r0, [pc, #12]	; (8005f2c <CAN1_RX0_IRQHandler+0x14>)
 8005f1e:	f002 faba 	bl	8008496 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  can_tx_rx();
 8005f22:	f000 f849 	bl	8005fb8 <can_tx_rx>

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8005f26:	bf00      	nop
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	20000400 	.word	0x20000400

08005f30 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	//LED_HIGH	// Useful for timing

	/* Sample ADCs */
	analog_sample(&controller);
 8005f34:	480c      	ldr	r0, [pc, #48]	; (8005f68 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8005f36:	f7fc fbd1 	bl	80026dc <analog_sample>

	/* Sample position sensor */
	ps_sample(&comm_encoder, DT);
 8005f3a:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8005f6c <TIM1_UP_TIM10_IRQHandler+0x3c>
 8005f3e:	480c      	ldr	r0, [pc, #48]	; (8005f70 <TIM1_UP_TIM10_IRQHandler+0x40>)
 8005f40:	f7ff faee 	bl	8005520 <ps_sample>

	/* Run Finite State Machine */
	run_fsm(&state);
 8005f44:	480b      	ldr	r0, [pc, #44]	; (8005f74 <TIM1_UP_TIM10_IRQHandler+0x44>)
 8005f46:	f7fd fb85 	bl	8003654 <run_fsm>

	/* Check for CAN messages */
	can_tx_rx();
 8005f4a:	f000 f835 	bl	8005fb8 <can_tx_rx>

	/* increment loop count */
	controller.loop_count++;
 8005f4e:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8005f50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005f54:	3301      	adds	r3, #1
 8005f56:	4a04      	ldr	r2, [pc, #16]	; (8005f68 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8005f58:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	//LED_LOW;

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005f5c:	4806      	ldr	r0, [pc, #24]	; (8005f78 <TIM1_UP_TIM10_IRQHandler+0x48>)
 8005f5e:	f004 facf 	bl	800a500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005f62:	bf00      	nop
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	2000085c 	.word	0x2000085c
 8005f6c:	37d1b717 	.word	0x37d1b717
 8005f70:	20000428 	.word	0x20000428
 8005f74:	20000738 	.word	0x20000738
 8005f78:	200095d0 	.word	0x200095d0

08005f7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8005f82:	480a      	ldr	r0, [pc, #40]	; (8005fac <USART2_IRQHandler+0x30>)
 8005f84:	f005 fa7a 	bl	800b47c <HAL_UART_IRQHandler>
	state.print_uart_msg = 1;
 8005f88:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <USART2_IRQHandler+0x34>)
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	711a      	strb	r2, [r3, #4]

	char c = Serial2RxBuffer[0];
 8005f8e:	4b09      	ldr	r3, [pc, #36]	; (8005fb4 <USART2_IRQHandler+0x38>)
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	71fb      	strb	r3, [r7, #7]
	update_fsm(&state, c);
 8005f94:	79fb      	ldrb	r3, [r7, #7]
 8005f96:	4619      	mov	r1, r3
 8005f98:	4805      	ldr	r0, [pc, #20]	; (8005fb0 <USART2_IRQHandler+0x34>)
 8005f9a:	f7fd fdd3 	bl	8003b44 <update_fsm>

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005f9e:	4803      	ldr	r0, [pc, #12]	; (8005fac <USART2_IRQHandler+0x30>)
 8005fa0:	f005 fa6c 	bl	800b47c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8005fa4:	bf00      	nop
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	20009618 	.word	0x20009618
 8005fb0:	20000738 	.word	0x20000738
 8005fb4:	20000734 	.word	0x20000734

08005fb8 <can_tx_rx>:

/* USER CODE BEGIN 1 */

void can_tx_rx(void){
 8005fb8:	b590      	push	{r4, r7, lr}
 8005fba:	ed2d 8b04 	vpush	{d8-d9}
 8005fbe:	b099      	sub	sp, #100	; 0x64
 8005fc0:	af16      	add	r7, sp, #88	; 0x58

	int no_mesage = HAL_CAN_GetRxMessage(&CAN_H, CAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Read CAN
 8005fc2:	4ba4      	ldr	r3, [pc, #656]	; (8006254 <can_tx_rx+0x29c>)
 8005fc4:	4aa4      	ldr	r2, [pc, #656]	; (8006258 <can_tx_rx+0x2a0>)
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	48a4      	ldr	r0, [pc, #656]	; (800625c <can_tx_rx+0x2a4>)
 8005fca:	f002 f952 	bl	8008272 <HAL_CAN_GetRxMessage>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	607b      	str	r3, [r7, #4]
	if(!no_mesage){
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f040 822b 	bne.w	8006430 <can_tx_rx+0x478>
		state.print_uart_msg = 0;
 8005fda:	4ba1      	ldr	r3, [pc, #644]	; (8006260 <can_tx_rx+0x2a8>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	711a      	strb	r2, [r3, #4]
		uint32_t TxMailbox;

		/* Check for special commands by function code*/
		switch (can_rx.rx_header.StdId >> 7)
 8005fe0:	4ba0      	ldr	r3, [pc, #640]	; (8006264 <can_tx_rx+0x2ac>)
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	09db      	lsrs	r3, r3, #7
 8005fe6:	2b05      	cmp	r3, #5
 8005fe8:	f200 81dc 	bhi.w	80063a4 <can_tx_rx+0x3ec>
 8005fec:	a201      	add	r2, pc, #4	; (adr r2, 8005ff4 <can_tx_rx+0x3c>)
 8005fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff2:	bf00      	nop
 8005ff4:	0800600d 	.word	0x0800600d
 8005ff8:	08006089 	.word	0x08006089
 8005ffc:	0800612d 	.word	0x0800612d
 8006000:	080061a9 	.word	0x080061a9
 8006004:	08006289 	.word	0x08006289
 8006008:	08006305 	.word	0x08006305
			{
				case FC_RESET:
					update_fsm(&state, MENU_CMD);
 800600c:	211b      	movs	r1, #27
 800600e:	4894      	ldr	r0, [pc, #592]	; (8006260 <can_tx_rx+0x2a8>)
 8006010:	f7fd fd98 	bl	8003b44 <update_fsm>
					pack_reply_default(can_rx, &can_tx, comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, VERSION_NUM, hall_cal.hall_cal_state, state.state);	// Pack response
 8006014:	4b94      	ldr	r3, [pc, #592]	; (8006268 <can_tx_rx+0x2b0>)
 8006016:	ed93 7a03 	vldr	s14, [r3, #12]
 800601a:	4b94      	ldr	r3, [pc, #592]	; (800626c <can_tx_rx+0x2b4>)
 800601c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006020:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8006024:	4b90      	ldr	r3, [pc, #576]	; (8006268 <can_tx_rx+0x2b0>)
 8006026:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800602a:	4b90      	ldr	r3, [pc, #576]	; (800626c <can_tx_rx+0x2b4>)
 800602c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006030:	eec7 8a27 	vdiv.f32	s17, s14, s15
 8006034:	4b8e      	ldr	r3, [pc, #568]	; (8006270 <can_tx_rx+0x2b8>)
 8006036:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800603a:	4b8c      	ldr	r3, [pc, #560]	; (800626c <can_tx_rx+0x2b4>)
 800603c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006040:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006044:	4b89      	ldr	r3, [pc, #548]	; (800626c <can_tx_rx+0x2b4>)
 8006046:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800604a:	ee27 9a27 	vmul.f32	s18, s14, s15
 800604e:	4b89      	ldr	r3, [pc, #548]	; (8006274 <can_tx_rx+0x2bc>)
 8006050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006052:	4a83      	ldr	r2, [pc, #524]	; (8006260 <can_tx_rx+0x2a8>)
 8006054:	7812      	ldrb	r2, [r2, #0]
 8006056:	4c83      	ldr	r4, [pc, #524]	; (8006264 <can_tx_rx+0x2ac>)
 8006058:	9215      	str	r2, [sp, #84]	; 0x54
 800605a:	9314      	str	r3, [sp, #80]	; 0x50
 800605c:	2305      	movs	r3, #5
 800605e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006060:	4b85      	ldr	r3, [pc, #532]	; (8006278 <can_tx_rx+0x2c0>)
 8006062:	9312      	str	r3, [sp, #72]	; 0x48
 8006064:	4668      	mov	r0, sp
 8006066:	f104 0310 	add.w	r3, r4, #16
 800606a:	2248      	movs	r2, #72	; 0x48
 800606c:	4619      	mov	r1, r3
 800606e:	f006 faa3 	bl	800c5b8 <memcpy>
 8006072:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006076:	eeb0 1a49 	vmov.f32	s2, s18
 800607a:	eef0 0a68 	vmov.f32	s1, s17
 800607e:	eeb0 0a48 	vmov.f32	s0, s16
 8006082:	f7fb fe23 	bl	8001ccc <pack_reply_default>
					break;
 8006086:	e1c7      	b.n	8006418 <can_tx_rx+0x460>

				case FC_MANAGE_CONFIG:
					if (can_rx.data[0] <= 1){
 8006088:	4b76      	ldr	r3, [pc, #472]	; (8006264 <can_tx_rx+0x2ac>)
 800608a:	7a1b      	ldrb	r3, [r3, #8]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d813      	bhi.n	80060b8 <can_tx_rx+0x100>
						pack_reply_config(can_rx, &can_tx, VERSION_NUM, state.state);
 8006090:	4b73      	ldr	r3, [pc, #460]	; (8006260 <can_tx_rx+0x2a8>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	4c73      	ldr	r4, [pc, #460]	; (8006264 <can_tx_rx+0x2ac>)
 8006096:	9314      	str	r3, [sp, #80]	; 0x50
 8006098:	2305      	movs	r3, #5
 800609a:	9313      	str	r3, [sp, #76]	; 0x4c
 800609c:	4b76      	ldr	r3, [pc, #472]	; (8006278 <can_tx_rx+0x2c0>)
 800609e:	9312      	str	r3, [sp, #72]	; 0x48
 80060a0:	4668      	mov	r0, sp
 80060a2:	f104 0310 	add.w	r3, r4, #16
 80060a6:	2248      	movs	r2, #72	; 0x48
 80060a8:	4619      	mov	r1, r3
 80060aa:	f006 fa85 	bl	800c5b8 <memcpy>
 80060ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80060b2:	f7fb fe8b 	bl	8001dcc <pack_reply_config>
					}
					else{
						pack_reply_default(can_rx, &can_tx, comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, VERSION_NUM, hall_cal.hall_cal_state, state.state);
					}
					break;
 80060b6:	e1af      	b.n	8006418 <can_tx_rx+0x460>
						pack_reply_default(can_rx, &can_tx, comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, VERSION_NUM, hall_cal.hall_cal_state, state.state);
 80060b8:	4b6b      	ldr	r3, [pc, #428]	; (8006268 <can_tx_rx+0x2b0>)
 80060ba:	ed93 7a03 	vldr	s14, [r3, #12]
 80060be:	4b6b      	ldr	r3, [pc, #428]	; (800626c <can_tx_rx+0x2b4>)
 80060c0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80060c4:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80060c8:	4b67      	ldr	r3, [pc, #412]	; (8006268 <can_tx_rx+0x2b0>)
 80060ca:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80060ce:	4b67      	ldr	r3, [pc, #412]	; (800626c <can_tx_rx+0x2b4>)
 80060d0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80060d4:	eec7 8a27 	vdiv.f32	s17, s14, s15
 80060d8:	4b65      	ldr	r3, [pc, #404]	; (8006270 <can_tx_rx+0x2b8>)
 80060da:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80060de:	4b63      	ldr	r3, [pc, #396]	; (800626c <can_tx_rx+0x2b4>)
 80060e0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80060e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060e8:	4b60      	ldr	r3, [pc, #384]	; (800626c <can_tx_rx+0x2b4>)
 80060ea:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80060ee:	ee27 9a27 	vmul.f32	s18, s14, s15
 80060f2:	4b60      	ldr	r3, [pc, #384]	; (8006274 <can_tx_rx+0x2bc>)
 80060f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f6:	4a5a      	ldr	r2, [pc, #360]	; (8006260 <can_tx_rx+0x2a8>)
 80060f8:	7812      	ldrb	r2, [r2, #0]
 80060fa:	4c5a      	ldr	r4, [pc, #360]	; (8006264 <can_tx_rx+0x2ac>)
 80060fc:	9215      	str	r2, [sp, #84]	; 0x54
 80060fe:	9314      	str	r3, [sp, #80]	; 0x50
 8006100:	2305      	movs	r3, #5
 8006102:	9313      	str	r3, [sp, #76]	; 0x4c
 8006104:	4b5c      	ldr	r3, [pc, #368]	; (8006278 <can_tx_rx+0x2c0>)
 8006106:	9312      	str	r3, [sp, #72]	; 0x48
 8006108:	4668      	mov	r0, sp
 800610a:	f104 0310 	add.w	r3, r4, #16
 800610e:	2248      	movs	r2, #72	; 0x48
 8006110:	4619      	mov	r1, r3
 8006112:	f006 fa51 	bl	800c5b8 <memcpy>
 8006116:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800611a:	eeb0 1a49 	vmov.f32	s2, s18
 800611e:	eef0 0a68 	vmov.f32	s1, s17
 8006122:	eeb0 0a48 	vmov.f32	s0, s16
 8006126:	f7fb fdd1 	bl	8001ccc <pack_reply_default>
					break;
 800612a:	e175      	b.n	8006418 <can_tx_rx+0x460>

				case FC_SET_ZERO:
					update_fsm(&state, ZERO_CMD);
 800612c:	217a      	movs	r1, #122	; 0x7a
 800612e:	484c      	ldr	r0, [pc, #304]	; (8006260 <can_tx_rx+0x2a8>)
 8006130:	f7fd fd08 	bl	8003b44 <update_fsm>
					pack_reply_default(can_rx, &can_tx, comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, VERSION_NUM, hall_cal.hall_cal_state, state.state);
 8006134:	4b4c      	ldr	r3, [pc, #304]	; (8006268 <can_tx_rx+0x2b0>)
 8006136:	ed93 7a03 	vldr	s14, [r3, #12]
 800613a:	4b4c      	ldr	r3, [pc, #304]	; (800626c <can_tx_rx+0x2b4>)
 800613c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006140:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8006144:	4b48      	ldr	r3, [pc, #288]	; (8006268 <can_tx_rx+0x2b0>)
 8006146:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800614a:	4b48      	ldr	r3, [pc, #288]	; (800626c <can_tx_rx+0x2b4>)
 800614c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006150:	eec7 8a27 	vdiv.f32	s17, s14, s15
 8006154:	4b46      	ldr	r3, [pc, #280]	; (8006270 <can_tx_rx+0x2b8>)
 8006156:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800615a:	4b44      	ldr	r3, [pc, #272]	; (800626c <can_tx_rx+0x2b4>)
 800615c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006160:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006164:	4b41      	ldr	r3, [pc, #260]	; (800626c <can_tx_rx+0x2b4>)
 8006166:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800616a:	ee27 9a27 	vmul.f32	s18, s14, s15
 800616e:	4b41      	ldr	r3, [pc, #260]	; (8006274 <can_tx_rx+0x2bc>)
 8006170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006172:	4a3b      	ldr	r2, [pc, #236]	; (8006260 <can_tx_rx+0x2a8>)
 8006174:	7812      	ldrb	r2, [r2, #0]
 8006176:	4c3b      	ldr	r4, [pc, #236]	; (8006264 <can_tx_rx+0x2ac>)
 8006178:	9215      	str	r2, [sp, #84]	; 0x54
 800617a:	9314      	str	r3, [sp, #80]	; 0x50
 800617c:	2305      	movs	r3, #5
 800617e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006180:	4b3d      	ldr	r3, [pc, #244]	; (8006278 <can_tx_rx+0x2c0>)
 8006182:	9312      	str	r3, [sp, #72]	; 0x48
 8006184:	4668      	mov	r0, sp
 8006186:	f104 0310 	add.w	r3, r4, #16
 800618a:	2248      	movs	r2, #72	; 0x48
 800618c:	4619      	mov	r1, r3
 800618e:	f006 fa13 	bl	800c5b8 <memcpy>
 8006192:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006196:	eeb0 1a49 	vmov.f32	s2, s18
 800619a:	eef0 0a68 	vmov.f32	s1, s17
 800619e:	eeb0 0a48 	vmov.f32	s0, s16
 80061a2:	f7fb fd93 	bl	8001ccc <pack_reply_default>
					break;
 80061a6:	e137      	b.n	8006418 <can_tx_rx+0x460>

				case FC_HALL_CAL:
					hall_cal.hall_cal_count = 0;
 80061a8:	4b32      	ldr	r3, [pc, #200]	; (8006274 <can_tx_rx+0x2bc>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	625a      	str	r2, [r3, #36]	; 0x24
					hall_cal.hall_cal_state = CODE_HALL_CALIBRATING; // calibrating
 80061ae:	4b31      	ldr	r3, [pc, #196]	; (8006274 <can_tx_rx+0x2bc>)
 80061b0:	2201      	movs	r2, #1
 80061b2:	629a      	str	r2, [r3, #40]	; 0x28
					/*----- convert theta_mech to 0~359.9999deg -----*/
					hall_cal.hall_present_pos = controller.theta_mech;
 80061b4:	4b2e      	ldr	r3, [pc, #184]	; (8006270 <can_tx_rx+0x2b8>)
 80061b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b8:	4a2e      	ldr	r2, [pc, #184]	; (8006274 <can_tx_rx+0x2bc>)
 80061ba:	6113      	str	r3, [r2, #16]
					hall_cal.hall_cal_pcmd = controller.theta_mech;
 80061bc:	4b2c      	ldr	r3, [pc, #176]	; (8006270 <can_tx_rx+0x2b8>)
 80061be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c0:	4a2c      	ldr	r2, [pc, #176]	; (8006274 <can_tx_rx+0x2bc>)
 80061c2:	6093      	str	r3, [r2, #8]
					static float _f_cal_round;
					modff(hall_cal.hall_cal_pcmd/(2*PI_F),&_f_cal_round);
 80061c4:	4b2b      	ldr	r3, [pc, #172]	; (8006274 <can_tx_rx+0x2bc>)
 80061c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80061ca:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800627c <can_tx_rx+0x2c4>
 80061ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80061d2:	482b      	ldr	r0, [pc, #172]	; (8006280 <can_tx_rx+0x2c8>)
 80061d4:	eeb0 0a47 	vmov.f32	s0, s14
 80061d8:	f005 feee 	bl	800bfb8 <modff>
					hall_cal.hall_cal_pcmd = hall_cal.hall_cal_pcmd - _f_cal_round*2*PI_F;
 80061dc:	4b25      	ldr	r3, [pc, #148]	; (8006274 <can_tx_rx+0x2bc>)
 80061de:	ed93 7a02 	vldr	s14, [r3, #8]
 80061e2:	4b27      	ldr	r3, [pc, #156]	; (8006280 <can_tx_rx+0x2c8>)
 80061e4:	edd3 7a00 	vldr	s15, [r3]
 80061e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80061ec:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006284 <can_tx_rx+0x2cc>
 80061f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80061f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061f8:	4b1e      	ldr	r3, [pc, #120]	; (8006274 <can_tx_rx+0x2bc>)
 80061fa:	edc3 7a02 	vstr	s15, [r3, #8]
					if(hall_cal.hall_cal_pcmd < 0) hall_cal.hall_cal_pcmd = hall_cal.hall_cal_pcmd + 2*PI_F;
 80061fe:	4b1d      	ldr	r3, [pc, #116]	; (8006274 <can_tx_rx+0x2bc>)
 8006200:	edd3 7a02 	vldr	s15, [r3, #8]
 8006204:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800620c:	d509      	bpl.n	8006222 <can_tx_rx+0x26a>
 800620e:	4b19      	ldr	r3, [pc, #100]	; (8006274 <can_tx_rx+0x2bc>)
 8006210:	edd3 7a02 	vldr	s15, [r3, #8]
 8006214:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800627c <can_tx_rx+0x2c4>
 8006218:	ee77 7a87 	vadd.f32	s15, s15, s14
 800621c:	4b15      	ldr	r3, [pc, #84]	; (8006274 <can_tx_rx+0x2bc>)
 800621e:	edc3 7a02 	vstr	s15, [r3, #8]
					update_fsm(&state, HALL_CAL_CMD);
 8006222:	2168      	movs	r1, #104	; 0x68
 8006224:	480e      	ldr	r0, [pc, #56]	; (8006260 <can_tx_rx+0x2a8>)
 8006226:	f7fd fc8d 	bl	8003b44 <update_fsm>
					pack_reply_hall_cal(can_rx, &can_tx, VERSION_NUM, state.state);
 800622a:	4b0d      	ldr	r3, [pc, #52]	; (8006260 <can_tx_rx+0x2a8>)
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	4c0d      	ldr	r4, [pc, #52]	; (8006264 <can_tx_rx+0x2ac>)
 8006230:	9314      	str	r3, [sp, #80]	; 0x50
 8006232:	2305      	movs	r3, #5
 8006234:	9313      	str	r3, [sp, #76]	; 0x4c
 8006236:	4b10      	ldr	r3, [pc, #64]	; (8006278 <can_tx_rx+0x2c0>)
 8006238:	9312      	str	r3, [sp, #72]	; 0x48
 800623a:	4668      	mov	r0, sp
 800623c:	f104 0310 	add.w	r3, r4, #16
 8006240:	2248      	movs	r2, #72	; 0x48
 8006242:	4619      	mov	r1, r3
 8006244:	f006 f9b8 	bl	800c5b8 <memcpy>
 8006248:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800624c:	f7fb fe56 	bl	8001efc <pack_reply_hall_cal>
					break;
 8006250:	e0e2      	b.n	8006418 <can_tx_rx+0x460>
 8006252:	bf00      	nop
 8006254:	200094a8 	.word	0x200094a8
 8006258:	200094b0 	.word	0x200094b0
 800625c:	20000400 	.word	0x20000400
 8006260:	20000738 	.word	0x20000738
 8006264:	200094a0 	.word	0x200094a0
 8006268:	20000428 	.word	0x20000428
 800626c:	2000075c 	.word	0x2000075c
 8006270:	2000085c 	.word	0x2000085c
 8006274:	20000708 	.word	0x20000708
 8006278:	20009474 	.word	0x20009474
 800627c:	40c90fdb 	.word	0x40c90fdb
 8006280:	20000250 	.word	0x20000250
 8006284:	40490fdb 	.word	0x40490fdb

				case FC_ENTER_MOTOR:
					update_fsm(&state, MOTOR_CMD);
 8006288:	216d      	movs	r1, #109	; 0x6d
 800628a:	486c      	ldr	r0, [pc, #432]	; (800643c <can_tx_rx+0x484>)
 800628c:	f7fd fc5a 	bl	8003b44 <update_fsm>
					pack_reply_default(can_rx, &can_tx, comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, VERSION_NUM, hall_cal.hall_cal_state, state.state);	// Pack response
 8006290:	4b6b      	ldr	r3, [pc, #428]	; (8006440 <can_tx_rx+0x488>)
 8006292:	ed93 7a03 	vldr	s14, [r3, #12]
 8006296:	4b6b      	ldr	r3, [pc, #428]	; (8006444 <can_tx_rx+0x48c>)
 8006298:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800629c:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80062a0:	4b67      	ldr	r3, [pc, #412]	; (8006440 <can_tx_rx+0x488>)
 80062a2:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80062a6:	4b67      	ldr	r3, [pc, #412]	; (8006444 <can_tx_rx+0x48c>)
 80062a8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80062ac:	eec7 8a27 	vdiv.f32	s17, s14, s15
 80062b0:	4b65      	ldr	r3, [pc, #404]	; (8006448 <can_tx_rx+0x490>)
 80062b2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80062b6:	4b63      	ldr	r3, [pc, #396]	; (8006444 <can_tx_rx+0x48c>)
 80062b8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80062bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062c0:	4b60      	ldr	r3, [pc, #384]	; (8006444 <can_tx_rx+0x48c>)
 80062c2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80062c6:	ee27 9a27 	vmul.f32	s18, s14, s15
 80062ca:	4b60      	ldr	r3, [pc, #384]	; (800644c <can_tx_rx+0x494>)
 80062cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ce:	4a5b      	ldr	r2, [pc, #364]	; (800643c <can_tx_rx+0x484>)
 80062d0:	7812      	ldrb	r2, [r2, #0]
 80062d2:	4c5f      	ldr	r4, [pc, #380]	; (8006450 <can_tx_rx+0x498>)
 80062d4:	9215      	str	r2, [sp, #84]	; 0x54
 80062d6:	9314      	str	r3, [sp, #80]	; 0x50
 80062d8:	2305      	movs	r3, #5
 80062da:	9313      	str	r3, [sp, #76]	; 0x4c
 80062dc:	4b5d      	ldr	r3, [pc, #372]	; (8006454 <can_tx_rx+0x49c>)
 80062de:	9312      	str	r3, [sp, #72]	; 0x48
 80062e0:	4668      	mov	r0, sp
 80062e2:	f104 0310 	add.w	r3, r4, #16
 80062e6:	2248      	movs	r2, #72	; 0x48
 80062e8:	4619      	mov	r1, r3
 80062ea:	f006 f965 	bl	800c5b8 <memcpy>
 80062ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80062f2:	eeb0 1a49 	vmov.f32	s2, s18
 80062f6:	eef0 0a68 	vmov.f32	s1, s17
 80062fa:	eeb0 0a48 	vmov.f32	s0, s16
 80062fe:	f7fb fce5 	bl	8001ccc <pack_reply_default>
					break;
 8006302:	e089      	b.n	8006418 <can_tx_rx+0x460>

				case FC_CONTROL_CMD:
					pack_reply_default(can_rx, &can_tx, comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, VERSION_NUM, hall_cal.hall_cal_state, state.state);	// Pack response
 8006304:	4b4e      	ldr	r3, [pc, #312]	; (8006440 <can_tx_rx+0x488>)
 8006306:	ed93 7a03 	vldr	s14, [r3, #12]
 800630a:	4b4e      	ldr	r3, [pc, #312]	; (8006444 <can_tx_rx+0x48c>)
 800630c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006310:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8006314:	4b4a      	ldr	r3, [pc, #296]	; (8006440 <can_tx_rx+0x488>)
 8006316:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800631a:	4b4a      	ldr	r3, [pc, #296]	; (8006444 <can_tx_rx+0x48c>)
 800631c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006320:	eec7 8a27 	vdiv.f32	s17, s14, s15
 8006324:	4b48      	ldr	r3, [pc, #288]	; (8006448 <can_tx_rx+0x490>)
 8006326:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800632a:	4b46      	ldr	r3, [pc, #280]	; (8006444 <can_tx_rx+0x48c>)
 800632c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006330:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006334:	4b43      	ldr	r3, [pc, #268]	; (8006444 <can_tx_rx+0x48c>)
 8006336:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800633a:	ee27 9a27 	vmul.f32	s18, s14, s15
 800633e:	4b43      	ldr	r3, [pc, #268]	; (800644c <can_tx_rx+0x494>)
 8006340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006342:	4a3e      	ldr	r2, [pc, #248]	; (800643c <can_tx_rx+0x484>)
 8006344:	7812      	ldrb	r2, [r2, #0]
 8006346:	4c42      	ldr	r4, [pc, #264]	; (8006450 <can_tx_rx+0x498>)
 8006348:	9215      	str	r2, [sp, #84]	; 0x54
 800634a:	9314      	str	r3, [sp, #80]	; 0x50
 800634c:	2305      	movs	r3, #5
 800634e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006350:	4b40      	ldr	r3, [pc, #256]	; (8006454 <can_tx_rx+0x49c>)
 8006352:	9312      	str	r3, [sp, #72]	; 0x48
 8006354:	4668      	mov	r0, sp
 8006356:	f104 0310 	add.w	r3, r4, #16
 800635a:	2248      	movs	r2, #72	; 0x48
 800635c:	4619      	mov	r1, r3
 800635e:	f006 f92b 	bl	800c5b8 <memcpy>
 8006362:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006366:	eeb0 1a49 	vmov.f32	s2, s18
 800636a:	eef0 0a68 	vmov.f32	s1, s17
 800636e:	eeb0 0a48 	vmov.f32	s0, s16
 8006372:	f7fb fcab 	bl	8001ccc <pack_reply_default>
					unpack_control_cmd(can_rx, controller.commands);	// Unpack commands
 8006376:	4c36      	ldr	r4, [pc, #216]	; (8006450 <can_tx_rx+0x498>)
 8006378:	4b37      	ldr	r3, [pc, #220]	; (8006458 <can_tx_rx+0x4a0>)
 800637a:	9312      	str	r3, [sp, #72]	; 0x48
 800637c:	4668      	mov	r0, sp
 800637e:	f104 0310 	add.w	r3, r4, #16
 8006382:	2248      	movs	r2, #72	; 0x48
 8006384:	4619      	mov	r1, r3
 8006386:	f006 f917 	bl	800c5b8 <memcpy>
 800638a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800638e:	f7fb fdf5 	bl	8001f7c <unpack_control_cmd>

					controller.timeout = 0;					    // Reset timeout counter
 8006392:	4b2d      	ldr	r3, [pc, #180]	; (8006448 <can_tx_rx+0x490>)
 8006394:	2200      	movs	r2, #0
 8006396:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					controller.i_mag_max = controller.i_q;
 800639a:	4b2b      	ldr	r3, [pc, #172]	; (8006448 <can_tx_rx+0x490>)
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	4a2a      	ldr	r2, [pc, #168]	; (8006448 <can_tx_rx+0x490>)
 80063a0:	6513      	str	r3, [r2, #80]	; 0x50
					break;
 80063a2:	e039      	b.n	8006418 <can_tx_rx+0x460>

				default:
					pack_reply_default(can_rx, &can_tx, comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, VERSION_NUM, hall_cal.hall_cal_state, state.state);	// Pack response
 80063a4:	4b26      	ldr	r3, [pc, #152]	; (8006440 <can_tx_rx+0x488>)
 80063a6:	ed93 7a03 	vldr	s14, [r3, #12]
 80063aa:	4b26      	ldr	r3, [pc, #152]	; (8006444 <can_tx_rx+0x48c>)
 80063ac:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80063b0:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80063b4:	4b22      	ldr	r3, [pc, #136]	; (8006440 <can_tx_rx+0x488>)
 80063b6:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80063ba:	4b22      	ldr	r3, [pc, #136]	; (8006444 <can_tx_rx+0x48c>)
 80063bc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80063c0:	eec7 8a27 	vdiv.f32	s17, s14, s15
 80063c4:	4b20      	ldr	r3, [pc, #128]	; (8006448 <can_tx_rx+0x490>)
 80063c6:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80063ca:	4b1e      	ldr	r3, [pc, #120]	; (8006444 <can_tx_rx+0x48c>)
 80063cc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80063d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063d4:	4b1b      	ldr	r3, [pc, #108]	; (8006444 <can_tx_rx+0x48c>)
 80063d6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80063da:	ee27 9a27 	vmul.f32	s18, s14, s15
 80063de:	4b1b      	ldr	r3, [pc, #108]	; (800644c <can_tx_rx+0x494>)
 80063e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e2:	4a16      	ldr	r2, [pc, #88]	; (800643c <can_tx_rx+0x484>)
 80063e4:	7812      	ldrb	r2, [r2, #0]
 80063e6:	4c1a      	ldr	r4, [pc, #104]	; (8006450 <can_tx_rx+0x498>)
 80063e8:	9215      	str	r2, [sp, #84]	; 0x54
 80063ea:	9314      	str	r3, [sp, #80]	; 0x50
 80063ec:	2305      	movs	r3, #5
 80063ee:	9313      	str	r3, [sp, #76]	; 0x4c
 80063f0:	4b18      	ldr	r3, [pc, #96]	; (8006454 <can_tx_rx+0x49c>)
 80063f2:	9312      	str	r3, [sp, #72]	; 0x48
 80063f4:	4668      	mov	r0, sp
 80063f6:	f104 0310 	add.w	r3, r4, #16
 80063fa:	2248      	movs	r2, #72	; 0x48
 80063fc:	4619      	mov	r1, r3
 80063fe:	f006 f8db 	bl	800c5b8 <memcpy>
 8006402:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006406:	eeb0 1a49 	vmov.f32	s2, s18
 800640a:	eef0 0a68 	vmov.f32	s1, s17
 800640e:	eeb0 0a48 	vmov.f32	s0, s16
 8006412:	f7fb fc5b 	bl	8001ccc <pack_reply_default>
					break;
 8006416:	bf00      	nop
			}

		can_tx.tx_header.StdId = can_rx.rx_header.StdId | 0x400;
 8006418:	4b0d      	ldr	r3, [pc, #52]	; (8006450 <can_tx_rx+0x498>)
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006420:	4a0c      	ldr	r2, [pc, #48]	; (8006454 <can_tx_rx+0x49c>)
 8006422:	60d3      	str	r3, [r2, #12]
		HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 8006424:	463b      	mov	r3, r7
 8006426:	4a0d      	ldr	r2, [pc, #52]	; (800645c <can_tx_rx+0x4a4>)
 8006428:	490d      	ldr	r1, [pc, #52]	; (8006460 <can_tx_rx+0x4a8>)
 800642a:	480e      	ldr	r0, [pc, #56]	; (8006464 <can_tx_rx+0x4ac>)
 800642c:	f001 fe46 	bl	80080bc <HAL_CAN_AddTxMessage>
	}

}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	ecbd 8b04 	vpop	{d8-d9}
 800643a:	bd90      	pop	{r4, r7, pc}
 800643c:	20000738 	.word	0x20000738
 8006440:	20000428 	.word	0x20000428
 8006444:	2000075c 	.word	0x2000075c
 8006448:	2000085c 	.word	0x2000085c
 800644c:	20000708 	.word	0x20000708
 8006450:	200094a0 	.word	0x200094a0
 8006454:	20009474 	.word	0x20009474
 8006458:	20000934 	.word	0x20000934
 800645c:	20009475 	.word	0x20009475
 8006460:	20009480 	.word	0x20009480
 8006464:	20000400 	.word	0x20000400

08006468 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
	return 1;
 800646c:	2301      	movs	r3, #1
}
 800646e:	4618      	mov	r0, r3
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <_kill>:

int _kill(int pid, int sig)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006482:	f006 f86f 	bl	800c564 <__errno>
 8006486:	4603      	mov	r3, r0
 8006488:	2216      	movs	r2, #22
 800648a:	601a      	str	r2, [r3, #0]
	return -1;
 800648c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006490:	4618      	mov	r0, r3
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <_exit>:

void _exit (int status)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80064a0:	f04f 31ff 	mov.w	r1, #4294967295
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f7ff ffe7 	bl	8006478 <_kill>
	while (1) {}		/* Make sure we hang here */
 80064aa:	e7fe      	b.n	80064aa <_exit+0x12>

080064ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064b8:	2300      	movs	r3, #0
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	e00a      	b.n	80064d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80064be:	f3af 8000 	nop.w
 80064c2:	4601      	mov	r1, r0
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	1c5a      	adds	r2, r3, #1
 80064c8:	60ba      	str	r2, [r7, #8]
 80064ca:	b2ca      	uxtb	r2, r1
 80064cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	3301      	adds	r3, #1
 80064d2:	617b      	str	r3, [r7, #20]
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	429a      	cmp	r2, r3
 80064da:	dbf0      	blt.n	80064be <_read+0x12>
	}

return len;
 80064dc:	687b      	ldr	r3, [r7, #4]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3718      	adds	r7, #24
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b086      	sub	sp, #24
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	60f8      	str	r0, [r7, #12]
 80064ee:	60b9      	str	r1, [r7, #8]
 80064f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064f2:	2300      	movs	r3, #0
 80064f4:	617b      	str	r3, [r7, #20]
 80064f6:	e009      	b.n	800650c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	1c5a      	adds	r2, r3, #1
 80064fc:	60ba      	str	r2, [r7, #8]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fa17 	bl	8006934 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	3301      	adds	r3, #1
 800650a:	617b      	str	r3, [r7, #20]
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	429a      	cmp	r2, r3
 8006512:	dbf1      	blt.n	80064f8 <_write+0x12>
	}
	return len;
 8006514:	687b      	ldr	r3, [r7, #4]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3718      	adds	r7, #24
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <_close>:

int _close(int file)
{
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
	return -1;
 8006526:	f04f 33ff 	mov.w	r3, #4294967295
}
 800652a:	4618      	mov	r0, r3
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006536:	b480      	push	{r7}
 8006538:	b083      	sub	sp, #12
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006546:	605a      	str	r2, [r3, #4]
	return 0;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <_isatty>:

int _isatty(int file)
{
 8006556:	b480      	push	{r7}
 8006558:	b083      	sub	sp, #12
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
	return 1;
 800655e:	2301      	movs	r3, #1
}
 8006560:	4618      	mov	r0, r3
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
	return 0;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
	...

08006588 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006590:	4b11      	ldr	r3, [pc, #68]	; (80065d8 <_sbrk+0x50>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d102      	bne.n	800659e <_sbrk+0x16>
		heap_end = &end;
 8006598:	4b0f      	ldr	r3, [pc, #60]	; (80065d8 <_sbrk+0x50>)
 800659a:	4a10      	ldr	r2, [pc, #64]	; (80065dc <_sbrk+0x54>)
 800659c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800659e:	4b0e      	ldr	r3, [pc, #56]	; (80065d8 <_sbrk+0x50>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80065a4:	4b0c      	ldr	r3, [pc, #48]	; (80065d8 <_sbrk+0x50>)
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4413      	add	r3, r2
 80065ac:	466a      	mov	r2, sp
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d907      	bls.n	80065c2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80065b2:	f005 ffd7 	bl	800c564 <__errno>
 80065b6:	4603      	mov	r3, r0
 80065b8:	220c      	movs	r2, #12
 80065ba:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80065bc:	f04f 33ff 	mov.w	r3, #4294967295
 80065c0:	e006      	b.n	80065d0 <_sbrk+0x48>
	}

	heap_end += incr;
 80065c2:	4b05      	ldr	r3, [pc, #20]	; (80065d8 <_sbrk+0x50>)
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4413      	add	r3, r2
 80065ca:	4a03      	ldr	r2, [pc, #12]	; (80065d8 <_sbrk+0x50>)
 80065cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80065ce:	68fb      	ldr	r3, [r7, #12]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	20000254 	.word	0x20000254
 80065dc:	2000aa70 	.word	0x2000aa70

080065e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80065e0:	b480      	push	{r7}
 80065e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80065e4:	4b08      	ldr	r3, [pc, #32]	; (8006608 <SystemInit+0x28>)
 80065e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ea:	4a07      	ldr	r2, [pc, #28]	; (8006608 <SystemInit+0x28>)
 80065ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80065f4:	4b04      	ldr	r3, [pc, #16]	; (8006608 <SystemInit+0x28>)
 80065f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80065fa:	609a      	str	r2, [r3, #8]
#endif
}
 80065fc:	bf00      	nop
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	e000ed00 	.word	0xe000ed00

0800660c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b096      	sub	sp, #88	; 0x58
 8006610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006612:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006616:	2200      	movs	r2, #0
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	605a      	str	r2, [r3, #4]
 800661c:	609a      	str	r2, [r3, #8]
 800661e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006620:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006624:	2200      	movs	r2, #0
 8006626:	601a      	str	r2, [r3, #0]
 8006628:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800662a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800662e:	2200      	movs	r2, #0
 8006630:	601a      	str	r2, [r3, #0]
 8006632:	605a      	str	r2, [r3, #4]
 8006634:	609a      	str	r2, [r3, #8]
 8006636:	60da      	str	r2, [r3, #12]
 8006638:	611a      	str	r2, [r3, #16]
 800663a:	615a      	str	r2, [r3, #20]
 800663c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800663e:	1d3b      	adds	r3, r7, #4
 8006640:	2220      	movs	r2, #32
 8006642:	2100      	movs	r1, #0
 8006644:	4618      	mov	r0, r3
 8006646:	f005 ffc5 	bl	800c5d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800664a:	4b4a      	ldr	r3, [pc, #296]	; (8006774 <MX_TIM1_Init+0x168>)
 800664c:	4a4a      	ldr	r2, [pc, #296]	; (8006778 <MX_TIM1_Init+0x16c>)
 800664e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006650:	4b48      	ldr	r3, [pc, #288]	; (8006774 <MX_TIM1_Init+0x168>)
 8006652:	2200      	movs	r2, #0
 8006654:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8006656:	4b47      	ldr	r3, [pc, #284]	; (8006774 <MX_TIM1_Init+0x168>)
 8006658:	2220      	movs	r2, #32
 800665a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0x8CA;
 800665c:	4b45      	ldr	r3, [pc, #276]	; (8006774 <MX_TIM1_Init+0x168>)
 800665e:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8006662:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006664:	4b43      	ldr	r3, [pc, #268]	; (8006774 <MX_TIM1_Init+0x168>)
 8006666:	2200      	movs	r2, #0
 8006668:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 800666a:	4b42      	ldr	r3, [pc, #264]	; (8006774 <MX_TIM1_Init+0x168>)
 800666c:	2201      	movs	r2, #1
 800666e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006670:	4b40      	ldr	r3, [pc, #256]	; (8006774 <MX_TIM1_Init+0x168>)
 8006672:	2280      	movs	r2, #128	; 0x80
 8006674:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006676:	483f      	ldr	r0, [pc, #252]	; (8006774 <MX_TIM1_Init+0x168>)
 8006678:	f003 fd60 	bl	800a13c <HAL_TIM_Base_Init>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8006682:	f7fe fd6d 	bl	8005160 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800668a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800668c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006690:	4619      	mov	r1, r3
 8006692:	4838      	ldr	r0, [pc, #224]	; (8006774 <MX_TIM1_Init+0x168>)
 8006694:	f004 f8fa 	bl	800a88c <HAL_TIM_ConfigClockSource>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800669e:	f7fe fd5f 	bl	8005160 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80066a2:	4834      	ldr	r0, [pc, #208]	; (8006774 <MX_TIM1_Init+0x168>)
 80066a4:	f003 fe0a 	bl	800a2bc <HAL_TIM_PWM_Init>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d001      	beq.n	80066b2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80066ae:	f7fe fd57 	bl	8005160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066b2:	2300      	movs	r3, #0
 80066b4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066b6:	2300      	movs	r3, #0
 80066b8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80066ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80066be:	4619      	mov	r1, r3
 80066c0:	482c      	ldr	r0, [pc, #176]	; (8006774 <MX_TIM1_Init+0x168>)
 80066c2:	f004 fce9 	bl	800b098 <HAL_TIMEx_MasterConfigSynchronization>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d001      	beq.n	80066d0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80066cc:	f7fe fd48 	bl	8005160 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80066d0:	2360      	movs	r3, #96	; 0x60
 80066d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80066d4:	2300      	movs	r3, #0
 80066d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80066d8:	2302      	movs	r3, #2
 80066da:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80066dc:	2300      	movs	r3, #0
 80066de:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80066e0:	2304      	movs	r3, #4
 80066e2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80066e4:	2300      	movs	r3, #0
 80066e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80066e8:	2300      	movs	r3, #0
 80066ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80066ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066f0:	2200      	movs	r2, #0
 80066f2:	4619      	mov	r1, r3
 80066f4:	481f      	ldr	r0, [pc, #124]	; (8006774 <MX_TIM1_Init+0x168>)
 80066f6:	f004 f80b 	bl	800a710 <HAL_TIM_PWM_ConfigChannel>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8006700:	f7fe fd2e 	bl	8005160 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006708:	2204      	movs	r2, #4
 800670a:	4619      	mov	r1, r3
 800670c:	4819      	ldr	r0, [pc, #100]	; (8006774 <MX_TIM1_Init+0x168>)
 800670e:	f003 ffff 	bl	800a710 <HAL_TIM_PWM_ConfigChannel>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8006718:	f7fe fd22 	bl	8005160 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800671c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006720:	2208      	movs	r2, #8
 8006722:	4619      	mov	r1, r3
 8006724:	4813      	ldr	r0, [pc, #76]	; (8006774 <MX_TIM1_Init+0x168>)
 8006726:	f003 fff3 	bl	800a710 <HAL_TIM_PWM_ConfigChannel>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d001      	beq.n	8006734 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8006730:	f7fe fd16 	bl	8005160 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006734:	2300      	movs	r3, #0
 8006736:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006738:	2300      	movs	r3, #0
 800673a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800673c:	2300      	movs	r3, #0
 800673e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006740:	2300      	movs	r3, #0
 8006742:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006744:	2300      	movs	r3, #0
 8006746:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800674c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800674e:	2300      	movs	r3, #0
 8006750:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006752:	1d3b      	adds	r3, r7, #4
 8006754:	4619      	mov	r1, r3
 8006756:	4807      	ldr	r0, [pc, #28]	; (8006774 <MX_TIM1_Init+0x168>)
 8006758:	f004 fd1a 	bl	800b190 <HAL_TIMEx_ConfigBreakDeadTime>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8006762:	f7fe fcfd 	bl	8005160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006766:	4803      	ldr	r0, [pc, #12]	; (8006774 <MX_TIM1_Init+0x168>)
 8006768:	f000 f830 	bl	80067cc <HAL_TIM_MspPostInit>

}
 800676c:	bf00      	nop
 800676e:	3758      	adds	r7, #88	; 0x58
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	200095d0 	.word	0x200095d0
 8006778:	40010000 	.word	0x40010000

0800677c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a0e      	ldr	r2, [pc, #56]	; (80067c4 <HAL_TIM_Base_MspInit+0x48>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d115      	bne.n	80067ba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800678e:	2300      	movs	r3, #0
 8006790:	60fb      	str	r3, [r7, #12]
 8006792:	4b0d      	ldr	r3, [pc, #52]	; (80067c8 <HAL_TIM_Base_MspInit+0x4c>)
 8006794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006796:	4a0c      	ldr	r2, [pc, #48]	; (80067c8 <HAL_TIM_Base_MspInit+0x4c>)
 8006798:	f043 0301 	orr.w	r3, r3, #1
 800679c:	6453      	str	r3, [r2, #68]	; 0x44
 800679e:	4b0a      	ldr	r3, [pc, #40]	; (80067c8 <HAL_TIM_Base_MspInit+0x4c>)
 80067a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	60fb      	str	r3, [r7, #12]
 80067a8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80067aa:	2200      	movs	r2, #0
 80067ac:	2100      	movs	r1, #0
 80067ae:	2019      	movs	r0, #25
 80067b0:	f002 f985 	bl	8008abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80067b4:	2019      	movs	r0, #25
 80067b6:	f002 f99e 	bl	8008af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80067ba:	bf00      	nop
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	40010000 	.word	0x40010000
 80067c8:	40023800 	.word	0x40023800

080067cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b088      	sub	sp, #32
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067d4:	f107 030c 	add.w	r3, r7, #12
 80067d8:	2200      	movs	r2, #0
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	605a      	str	r2, [r3, #4]
 80067de:	609a      	str	r2, [r3, #8]
 80067e0:	60da      	str	r2, [r3, #12]
 80067e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a12      	ldr	r2, [pc, #72]	; (8006834 <HAL_TIM_MspPostInit+0x68>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d11e      	bne.n	800682c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067ee:	2300      	movs	r3, #0
 80067f0:	60bb      	str	r3, [r7, #8]
 80067f2:	4b11      	ldr	r3, [pc, #68]	; (8006838 <HAL_TIM_MspPostInit+0x6c>)
 80067f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f6:	4a10      	ldr	r2, [pc, #64]	; (8006838 <HAL_TIM_MspPostInit+0x6c>)
 80067f8:	f043 0301 	orr.w	r3, r3, #1
 80067fc:	6313      	str	r3, [r2, #48]	; 0x30
 80067fe:	4b0e      	ldr	r3, [pc, #56]	; (8006838 <HAL_TIM_MspPostInit+0x6c>)
 8006800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	60bb      	str	r3, [r7, #8]
 8006808:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800680a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800680e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006810:	2302      	movs	r3, #2
 8006812:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006814:	2300      	movs	r3, #0
 8006816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006818:	2303      	movs	r3, #3
 800681a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800681c:	2301      	movs	r3, #1
 800681e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006820:	f107 030c 	add.w	r3, r7, #12
 8006824:	4619      	mov	r1, r3
 8006826:	4805      	ldr	r0, [pc, #20]	; (800683c <HAL_TIM_MspPostInit+0x70>)
 8006828:	f002 fa12 	bl	8008c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800682c:	bf00      	nop
 800682e:	3720      	adds	r7, #32
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	40010000 	.word	0x40010000
 8006838:	40023800 	.word	0x40023800
 800683c:	40020000 	.word	0x40020000

08006840 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006844:	4b11      	ldr	r3, [pc, #68]	; (800688c <MX_USART2_UART_Init+0x4c>)
 8006846:	4a12      	ldr	r2, [pc, #72]	; (8006890 <MX_USART2_UART_Init+0x50>)
 8006848:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800684a:	4b10      	ldr	r3, [pc, #64]	; (800688c <MX_USART2_UART_Init+0x4c>)
 800684c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006850:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006852:	4b0e      	ldr	r3, [pc, #56]	; (800688c <MX_USART2_UART_Init+0x4c>)
 8006854:	2200      	movs	r2, #0
 8006856:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006858:	4b0c      	ldr	r3, [pc, #48]	; (800688c <MX_USART2_UART_Init+0x4c>)
 800685a:	2200      	movs	r2, #0
 800685c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800685e:	4b0b      	ldr	r3, [pc, #44]	; (800688c <MX_USART2_UART_Init+0x4c>)
 8006860:	2200      	movs	r2, #0
 8006862:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006864:	4b09      	ldr	r3, [pc, #36]	; (800688c <MX_USART2_UART_Init+0x4c>)
 8006866:	220c      	movs	r2, #12
 8006868:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800686a:	4b08      	ldr	r3, [pc, #32]	; (800688c <MX_USART2_UART_Init+0x4c>)
 800686c:	2200      	movs	r2, #0
 800686e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006870:	4b06      	ldr	r3, [pc, #24]	; (800688c <MX_USART2_UART_Init+0x4c>)
 8006872:	2200      	movs	r2, #0
 8006874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006876:	4805      	ldr	r0, [pc, #20]	; (800688c <MX_USART2_UART_Init+0x4c>)
 8006878:	f004 fcf0 	bl	800b25c <HAL_UART_Init>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006882:	f7fe fc6d 	bl	8005160 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006886:	bf00      	nop
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	20009618 	.word	0x20009618
 8006890:	40004400 	.word	0x40004400

08006894 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b08a      	sub	sp, #40	; 0x28
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800689c:	f107 0314 	add.w	r3, r7, #20
 80068a0:	2200      	movs	r2, #0
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	605a      	str	r2, [r3, #4]
 80068a6:	609a      	str	r2, [r3, #8]
 80068a8:	60da      	str	r2, [r3, #12]
 80068aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a1d      	ldr	r2, [pc, #116]	; (8006928 <HAL_UART_MspInit+0x94>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d133      	bne.n	800691e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80068b6:	2300      	movs	r3, #0
 80068b8:	613b      	str	r3, [r7, #16]
 80068ba:	4b1c      	ldr	r3, [pc, #112]	; (800692c <HAL_UART_MspInit+0x98>)
 80068bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068be:	4a1b      	ldr	r2, [pc, #108]	; (800692c <HAL_UART_MspInit+0x98>)
 80068c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068c4:	6413      	str	r3, [r2, #64]	; 0x40
 80068c6:	4b19      	ldr	r3, [pc, #100]	; (800692c <HAL_UART_MspInit+0x98>)
 80068c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ce:	613b      	str	r3, [r7, #16]
 80068d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068d2:	2300      	movs	r3, #0
 80068d4:	60fb      	str	r3, [r7, #12]
 80068d6:	4b15      	ldr	r3, [pc, #84]	; (800692c <HAL_UART_MspInit+0x98>)
 80068d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068da:	4a14      	ldr	r2, [pc, #80]	; (800692c <HAL_UART_MspInit+0x98>)
 80068dc:	f043 0301 	orr.w	r3, r3, #1
 80068e0:	6313      	str	r3, [r2, #48]	; 0x30
 80068e2:	4b12      	ldr	r3, [pc, #72]	; (800692c <HAL_UART_MspInit+0x98>)
 80068e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	60fb      	str	r3, [r7, #12]
 80068ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80068ee:	230c      	movs	r3, #12
 80068f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068f2:	2302      	movs	r3, #2
 80068f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80068f6:	2302      	movs	r3, #2
 80068f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068fa:	2303      	movs	r3, #3
 80068fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80068fe:	2307      	movs	r3, #7
 8006900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006902:	f107 0314 	add.w	r3, r7, #20
 8006906:	4619      	mov	r1, r3
 8006908:	4809      	ldr	r0, [pc, #36]	; (8006930 <HAL_UART_MspInit+0x9c>)
 800690a:	f002 f9a1 	bl	8008c50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800690e:	2200      	movs	r2, #0
 8006910:	2101      	movs	r1, #1
 8006912:	2026      	movs	r0, #38	; 0x26
 8006914:	f002 f8d3 	bl	8008abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006918:	2026      	movs	r0, #38	; 0x26
 800691a:	f002 f8ec 	bl	8008af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800691e:	bf00      	nop
 8006920:	3728      	adds	r7, #40	; 0x28
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	40004400 	.word	0x40004400
 800692c:	40023800 	.word	0x40023800
 8006930:	40020000 	.word	0x40020000

08006934 <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 800693c:	1d39      	adds	r1, r7, #4
 800693e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006942:	2201      	movs	r2, #1
 8006944:	4803      	ldr	r0, [pc, #12]	; (8006954 <__io_putchar+0x20>)
 8006946:	f004 fcd6 	bl	800b2f6 <HAL_UART_Transmit>
return 0;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	20009618 	.word	0x20009618

08006958 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8006960:	2201      	movs	r2, #1
 8006962:	4904      	ldr	r1, [pc, #16]	; (8006974 <HAL_UART_RxCpltCallback+0x1c>)
 8006964:	4804      	ldr	r0, [pc, #16]	; (8006978 <HAL_UART_RxCpltCallback+0x20>)
 8006966:	f004 fd58 	bl	800b41a <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800696a:	bf00      	nop
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20000734 	.word	0x20000734
 8006978:	20009618 	.word	0x20009618

0800697c <user_config_initialize>:
#include <stdio.h>

struct FloatRegConfig float_reg_config[FLOAT_REG_LENGTH];
struct IntRegConfig int_reg_config[INT_REG_LENGTH];

void user_config_initialize(void){
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
	for (int i=0; i<FLOAT_REG_LENGTH; i++){
 8006982:	2300      	movs	r3, #0
 8006984:	607b      	str	r3, [r7, #4]
 8006986:	e01f      	b.n	80069c8 <user_config_initialize+0x4c>
		float_reg_config[i].name = "";
 8006988:	4a12      	ldr	r2, [pc, #72]	; (80069d4 <user_config_initialize+0x58>)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	011b      	lsls	r3, r3, #4
 800698e:	4413      	add	r3, r2
 8006990:	4a11      	ldr	r2, [pc, #68]	; (80069d8 <user_config_initialize+0x5c>)
 8006992:	601a      	str	r2, [r3, #0]
		float_reg_config[i].cmd = ' ';
 8006994:	4a0f      	ldr	r2, [pc, #60]	; (80069d4 <user_config_initialize+0x58>)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	011b      	lsls	r3, r3, #4
 800699a:	4413      	add	r3, r2
 800699c:	3304      	adds	r3, #4
 800699e:	2220      	movs	r2, #32
 80069a0:	701a      	strb	r2, [r3, #0]
		float_reg_config[i].f_MIN = 0;
 80069a2:	4a0c      	ldr	r2, [pc, #48]	; (80069d4 <user_config_initialize+0x58>)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	011b      	lsls	r3, r3, #4
 80069a8:	4413      	add	r3, r2
 80069aa:	3308      	adds	r3, #8
 80069ac:	f04f 0200 	mov.w	r2, #0
 80069b0:	601a      	str	r2, [r3, #0]
		float_reg_config[i].f_MAX = 0;
 80069b2:	4a08      	ldr	r2, [pc, #32]	; (80069d4 <user_config_initialize+0x58>)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	011b      	lsls	r3, r3, #4
 80069b8:	4413      	add	r3, r2
 80069ba:	330c      	adds	r3, #12
 80069bc:	f04f 0200 	mov.w	r2, #0
 80069c0:	601a      	str	r2, [r3, #0]
	for (int i=0; i<FLOAT_REG_LENGTH; i++){
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	3301      	adds	r3, #1
 80069c6:	607b      	str	r3, [r7, #4]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b3f      	cmp	r3, #63	; 0x3f
 80069cc:	dddc      	ble.n	8006988 <user_config_initialize+0xc>
	}

	for (int i=0; i<INT_REG_LENGTH; i++){
 80069ce:	2300      	movs	r3, #0
 80069d0:	603b      	str	r3, [r7, #0]
 80069d2:	e021      	b.n	8006a18 <user_config_initialize+0x9c>
 80069d4:	2000965c 	.word	0x2000965c
 80069d8:	080113ec 	.word	0x080113ec
		int_reg_config[i].name = "";
 80069dc:	4ab7      	ldr	r2, [pc, #732]	; (8006cbc <user_config_initialize+0x340>)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	011b      	lsls	r3, r3, #4
 80069e2:	4413      	add	r3, r2
 80069e4:	4ab6      	ldr	r2, [pc, #728]	; (8006cc0 <user_config_initialize+0x344>)
 80069e6:	601a      	str	r2, [r3, #0]
		int_reg_config[i].cmd = ' ';
 80069e8:	4ab4      	ldr	r2, [pc, #720]	; (8006cbc <user_config_initialize+0x340>)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	011b      	lsls	r3, r3, #4
 80069ee:	4413      	add	r3, r2
 80069f0:	3304      	adds	r3, #4
 80069f2:	2220      	movs	r2, #32
 80069f4:	701a      	strb	r2, [r3, #0]
		int_reg_config[i].i_MIN = 0;
 80069f6:	4ab1      	ldr	r2, [pc, #708]	; (8006cbc <user_config_initialize+0x340>)
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	011b      	lsls	r3, r3, #4
 80069fc:	4413      	add	r3, r2
 80069fe:	3308      	adds	r3, #8
 8006a00:	2200      	movs	r2, #0
 8006a02:	601a      	str	r2, [r3, #0]
		int_reg_config[i].i_MAX = 0;
 8006a04:	4aad      	ldr	r2, [pc, #692]	; (8006cbc <user_config_initialize+0x340>)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	011b      	lsls	r3, r3, #4
 8006a0a:	4413      	add	r3, r2
 8006a0c:	330c      	adds	r3, #12
 8006a0e:	2200      	movs	r2, #0
 8006a10:	601a      	str	r2, [r3, #0]
	for (int i=0; i<INT_REG_LENGTH; i++){
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	3301      	adds	r3, #1
 8006a16:	603b      	str	r3, [r7, #0]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	2bff      	cmp	r3, #255	; 0xff
 8006a1c:	ddde      	ble.n	80069dc <user_config_initialize+0x60>
	}

	// initialize the float_reg_config array
	float_reg_config[ADDR_I_BW].name				= NAME_I_BW;
 8006a1e:	4ba9      	ldr	r3, [pc, #676]	; (8006cc4 <user_config_initialize+0x348>)
 8006a20:	4aa9      	ldr	r2, [pc, #676]	; (8006cc8 <user_config_initialize+0x34c>)
 8006a22:	621a      	str	r2, [r3, #32]
	float_reg_config[ADDR_I_BW].cmd					= CMD_I_BW;
 8006a24:	4ba7      	ldr	r3, [pc, #668]	; (8006cc4 <user_config_initialize+0x348>)
 8006a26:	2262      	movs	r2, #98	; 0x62
 8006a28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	float_reg_config[ADDR_I_BW].f_MIN				= MIN_I_BW;
 8006a2c:	4ba5      	ldr	r3, [pc, #660]	; (8006cc4 <user_config_initialize+0x348>)
 8006a2e:	4aa7      	ldr	r2, [pc, #668]	; (8006ccc <user_config_initialize+0x350>)
 8006a30:	629a      	str	r2, [r3, #40]	; 0x28
	float_reg_config[ADDR_I_BW].f_MAX				= MAX_I_BW;
 8006a32:	4ba4      	ldr	r3, [pc, #656]	; (8006cc4 <user_config_initialize+0x348>)
 8006a34:	4aa6      	ldr	r2, [pc, #664]	; (8006cd0 <user_config_initialize+0x354>)
 8006a36:	62da      	str	r2, [r3, #44]	; 0x2c

	float_reg_config[ADDR_I_MAX].name				= NAME_I_MAX;
 8006a38:	4ba2      	ldr	r3, [pc, #648]	; (8006cc4 <user_config_initialize+0x348>)
 8006a3a:	4aa6      	ldr	r2, [pc, #664]	; (8006cd4 <user_config_initialize+0x358>)
 8006a3c:	631a      	str	r2, [r3, #48]	; 0x30
	float_reg_config[ADDR_I_MAX].cmd				= CMD_I_MAX;
 8006a3e:	4ba1      	ldr	r3, [pc, #644]	; (8006cc4 <user_config_initialize+0x348>)
 8006a40:	226c      	movs	r2, #108	; 0x6c
 8006a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	float_reg_config[ADDR_I_MAX].f_MIN				= MIN_I_MAX;
 8006a46:	4b9f      	ldr	r3, [pc, #636]	; (8006cc4 <user_config_initialize+0x348>)
 8006a48:	f04f 0200 	mov.w	r2, #0
 8006a4c:	639a      	str	r2, [r3, #56]	; 0x38
	float_reg_config[ADDR_I_MAX].f_MAX				= MAX_I_MAX;
 8006a4e:	4b9d      	ldr	r3, [pc, #628]	; (8006cc4 <user_config_initialize+0x348>)
 8006a50:	4aa1      	ldr	r2, [pc, #644]	; (8006cd8 <user_config_initialize+0x35c>)
 8006a52:	63da      	str	r2, [r3, #60]	; 0x3c

	float_reg_config[ADDR_THETA_MIN].name			= NAME_THETA_MIN;
 8006a54:	4b9b      	ldr	r3, [pc, #620]	; (8006cc4 <user_config_initialize+0x348>)
 8006a56:	4aa1      	ldr	r2, [pc, #644]	; (8006cdc <user_config_initialize+0x360>)
 8006a58:	641a      	str	r2, [r3, #64]	; 0x40
	float_reg_config[ADDR_THETA_MIN].cmd			= CMD_THETA_MIN;
 8006a5a:	4b9a      	ldr	r3, [pc, #616]	; (8006cc4 <user_config_initialize+0x348>)
 8006a5c:	2220      	movs	r2, #32
 8006a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	float_reg_config[ADDR_THETA_MIN].f_MIN			= MIN_THETA_MIN;
 8006a62:	4b98      	ldr	r3, [pc, #608]	; (8006cc4 <user_config_initialize+0x348>)
 8006a64:	f04f 424f 	mov.w	r2, #3472883712	; 0xcf000000
 8006a68:	649a      	str	r2, [r3, #72]	; 0x48
	float_reg_config[ADDR_THETA_MIN].f_MAX			= MAX_THETA_MIN;
 8006a6a:	4b96      	ldr	r3, [pc, #600]	; (8006cc4 <user_config_initialize+0x348>)
 8006a6c:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006a70:	64da      	str	r2, [r3, #76]	; 0x4c

	float_reg_config[ADDR_THETA_MAX].name			= NAME_THETA_MAX;
 8006a72:	4b94      	ldr	r3, [pc, #592]	; (8006cc4 <user_config_initialize+0x348>)
 8006a74:	4a9a      	ldr	r2, [pc, #616]	; (8006ce0 <user_config_initialize+0x364>)
 8006a76:	651a      	str	r2, [r3, #80]	; 0x50
	float_reg_config[ADDR_THETA_MAX].cmd			= CMD_THETA_MAX;
 8006a78:	4b92      	ldr	r3, [pc, #584]	; (8006cc4 <user_config_initialize+0x348>)
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	float_reg_config[ADDR_THETA_MAX].f_MIN			= MIN_THETA_MAX;
 8006a80:	4b90      	ldr	r3, [pc, #576]	; (8006cc4 <user_config_initialize+0x348>)
 8006a82:	f04f 424f 	mov.w	r2, #3472883712	; 0xcf000000
 8006a86:	659a      	str	r2, [r3, #88]	; 0x58
	float_reg_config[ADDR_THETA_MAX].f_MAX			= MAX_THETA_MAX;
 8006a88:	4b8e      	ldr	r3, [pc, #568]	; (8006cc4 <user_config_initialize+0x348>)
 8006a8a:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006a8e:	65da      	str	r2, [r3, #92]	; 0x5c

	float_reg_config[ADDR_I_FW_MAX].name			= NAME_I_FW_MAX;
 8006a90:	4b8c      	ldr	r3, [pc, #560]	; (8006cc4 <user_config_initialize+0x348>)
 8006a92:	4a94      	ldr	r2, [pc, #592]	; (8006ce4 <user_config_initialize+0x368>)
 8006a94:	661a      	str	r2, [r3, #96]	; 0x60
	float_reg_config[ADDR_I_FW_MAX].cmd				= CMD_I_FW_MAX;
 8006a96:	4b8b      	ldr	r3, [pc, #556]	; (8006cc4 <user_config_initialize+0x348>)
 8006a98:	2266      	movs	r2, #102	; 0x66
 8006a9a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	float_reg_config[ADDR_I_FW_MAX].f_MIN			= MIN_I_FW_MAX;
 8006a9e:	4b89      	ldr	r3, [pc, #548]	; (8006cc4 <user_config_initialize+0x348>)
 8006aa0:	f04f 0200 	mov.w	r2, #0
 8006aa4:	669a      	str	r2, [r3, #104]	; 0x68
	float_reg_config[ADDR_I_FW_MAX].f_MAX			= MAX_I_FW_MAX;
 8006aa6:	4b87      	ldr	r3, [pc, #540]	; (8006cc4 <user_config_initialize+0x348>)
 8006aa8:	4a8f      	ldr	r2, [pc, #572]	; (8006ce8 <user_config_initialize+0x36c>)
 8006aaa:	66da      	str	r2, [r3, #108]	; 0x6c

	float_reg_config[ADDR_R_NOMINAL].name			= NAME_R_NOMINAL;
 8006aac:	4b85      	ldr	r3, [pc, #532]	; (8006cc4 <user_config_initialize+0x348>)
 8006aae:	4a8f      	ldr	r2, [pc, #572]	; (8006cec <user_config_initialize+0x370>)
 8006ab0:	671a      	str	r2, [r3, #112]	; 0x70
	float_reg_config[ADDR_R_NOMINAL].cmd			= CMD_R_NOMINAL;
 8006ab2:	4b84      	ldr	r3, [pc, #528]	; (8006cc4 <user_config_initialize+0x348>)
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	float_reg_config[ADDR_R_NOMINAL].f_MIN			= MIN_R_NOMINAL;
 8006aba:	4b82      	ldr	r3, [pc, #520]	; (8006cc4 <user_config_initialize+0x348>)
 8006abc:	f04f 424f 	mov.w	r2, #3472883712	; 0xcf000000
 8006ac0:	679a      	str	r2, [r3, #120]	; 0x78
	float_reg_config[ADDR_R_NOMINAL].f_MAX			= MAX_R_NOMINAL;
 8006ac2:	4b80      	ldr	r3, [pc, #512]	; (8006cc4 <user_config_initialize+0x348>)
 8006ac4:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006ac8:	67da      	str	r2, [r3, #124]	; 0x7c

	float_reg_config[ADDR_TEMP_MAX].name			= NAME_TEMP_MAX;
 8006aca:	4b7e      	ldr	r3, [pc, #504]	; (8006cc4 <user_config_initialize+0x348>)
 8006acc:	4a88      	ldr	r2, [pc, #544]	; (8006cf0 <user_config_initialize+0x374>)
 8006ace:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	float_reg_config[ADDR_TEMP_MAX].cmd				= CMD_TEMP_MAX;
 8006ad2:	4b7c      	ldr	r3, [pc, #496]	; (8006cc4 <user_config_initialize+0x348>)
 8006ad4:	2220      	movs	r2, #32
 8006ad6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	float_reg_config[ADDR_TEMP_MAX].f_MIN			= MIN_TEMP_MAX;
 8006ada:	4b7a      	ldr	r3, [pc, #488]	; (8006cc4 <user_config_initialize+0x348>)
 8006adc:	f04f 424f 	mov.w	r2, #3472883712	; 0xcf000000
 8006ae0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	float_reg_config[ADDR_TEMP_MAX].f_MAX			= MAX_TEMP_MAX;
 8006ae4:	4b77      	ldr	r3, [pc, #476]	; (8006cc4 <user_config_initialize+0x348>)
 8006ae6:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006aea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	float_reg_config[ADDR_I_MAX_CONT].name			= NAME_I_MAX_CONT;
 8006aee:	4b75      	ldr	r3, [pc, #468]	; (8006cc4 <user_config_initialize+0x348>)
 8006af0:	4a80      	ldr	r2, [pc, #512]	; (8006cf4 <user_config_initialize+0x378>)
 8006af2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	float_reg_config[ADDR_I_MAX_CONT].cmd			= CMD_I_MAX_CONT;
 8006af6:	4b73      	ldr	r3, [pc, #460]	; (8006cc4 <user_config_initialize+0x348>)
 8006af8:	2263      	movs	r2, #99	; 0x63
 8006afa:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	float_reg_config[ADDR_I_MAX_CONT].f_MIN			= MIN_I_MAX_CONT;
 8006afe:	4b71      	ldr	r3, [pc, #452]	; (8006cc4 <user_config_initialize+0x348>)
 8006b00:	f04f 424f 	mov.w	r2, #3472883712	; 0xcf000000
 8006b04:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	float_reg_config[ADDR_I_MAX_CONT].f_MAX			= MAX_I_MAX_CONT;
 8006b08:	4b6e      	ldr	r3, [pc, #440]	; (8006cc4 <user_config_initialize+0x348>)
 8006b0a:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006b0e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	float_reg_config[ADDR_PPAIRS].name				= NAME_PPAIRS;
 8006b12:	4b6c      	ldr	r3, [pc, #432]	; (8006cc4 <user_config_initialize+0x348>)
 8006b14:	4a78      	ldr	r2, [pc, #480]	; (8006cf8 <user_config_initialize+0x37c>)
 8006b16:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	float_reg_config[ADDR_PPAIRS].cmd				= CMD_PPAIRS;
 8006b1a:	4b6a      	ldr	r3, [pc, #424]	; (8006cc4 <user_config_initialize+0x348>)
 8006b1c:	2220      	movs	r2, #32
 8006b1e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	float_reg_config[ADDR_PPAIRS].f_MIN				= MIN_PPAIRS;
 8006b22:	4b68      	ldr	r3, [pc, #416]	; (8006cc4 <user_config_initialize+0x348>)
 8006b24:	f04f 424f 	mov.w	r2, #3472883712	; 0xcf000000
 8006b28:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	float_reg_config[ADDR_PPAIRS].f_MAX				= MAX_PPAIRS;
 8006b2c:	4b65      	ldr	r3, [pc, #404]	; (8006cc4 <user_config_initialize+0x348>)
 8006b2e:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006b32:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	//	float_reg_config[ADDR_L_Q].name				= NAME_L_Q;
	//	float_reg_config[ADDR_L_Q].cmd				= CMD_L_Q;
	//	float_reg_config[ADDR_L_Q].f_MIN			= MIN_L_Q;
	//	float_reg_config[ADDR_L_Q].f_MAX			= MAX_L_Q;

	float_reg_config[ADDR_R_PHASE].name				= NAME_R_PHASE;
 8006b36:	4b63      	ldr	r3, [pc, #396]	; (8006cc4 <user_config_initialize+0x348>)
 8006b38:	4a70      	ldr	r2, [pc, #448]	; (8006cfc <user_config_initialize+0x380>)
 8006b3a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	float_reg_config[ADDR_R_PHASE].cmd				= CMD_R_PHASE;
 8006b3e:	4b61      	ldr	r3, [pc, #388]	; (8006cc4 <user_config_initialize+0x348>)
 8006b40:	2220      	movs	r2, #32
 8006b42:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	float_reg_config[ADDR_R_PHASE].f_MIN			= MIN_R_PHASE;
 8006b46:	4b5f      	ldr	r3, [pc, #380]	; (8006cc4 <user_config_initialize+0x348>)
 8006b48:	f04f 424f 	mov.w	r2, #3472883712	; 0xcf000000
 8006b4c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	float_reg_config[ADDR_R_PHASE].f_MAX			= MAX_R_PHASE;
 8006b50:	4b5c      	ldr	r3, [pc, #368]	; (8006cc4 <user_config_initialize+0x348>)
 8006b52:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006b56:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

	float_reg_config[ADDR_KT].name					= NAME_KT;
 8006b5a:	4b5a      	ldr	r3, [pc, #360]	; (8006cc4 <user_config_initialize+0x348>)
 8006b5c:	4a68      	ldr	r2, [pc, #416]	; (8006d00 <user_config_initialize+0x384>)
 8006b5e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	float_reg_config[ADDR_KT].cmd					= CMD_KT;
 8006b62:	4b58      	ldr	r3, [pc, #352]	; (8006cc4 <user_config_initialize+0x348>)
 8006b64:	2274      	movs	r2, #116	; 0x74
 8006b66:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
	float_reg_config[ADDR_KT].f_MIN					= MIN_KT;
 8006b6a:	4b56      	ldr	r3, [pc, #344]	; (8006cc4 <user_config_initialize+0x348>)
 8006b6c:	4a65      	ldr	r2, [pc, #404]	; (8006d04 <user_config_initialize+0x388>)
 8006b6e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	float_reg_config[ADDR_KT].f_MAX					= MAX_KT;
 8006b72:	4b54      	ldr	r3, [pc, #336]	; (8006cc4 <user_config_initialize+0x348>)
 8006b74:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006b78:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	float_reg_config[ADDR_R_TH].name				= NAME_R_TH;
 8006b7c:	4b51      	ldr	r3, [pc, #324]	; (8006cc4 <user_config_initialize+0x348>)
 8006b7e:	4a62      	ldr	r2, [pc, #392]	; (8006d08 <user_config_initialize+0x38c>)
 8006b80:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	float_reg_config[ADDR_R_TH].cmd					= CMD_R_TH;
 8006b84:	4b4f      	ldr	r3, [pc, #316]	; (8006cc4 <user_config_initialize+0x348>)
 8006b86:	2220      	movs	r2, #32
 8006b88:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
	float_reg_config[ADDR_R_TH].f_MIN				= MIN_R_TH;
 8006b8c:	4b4d      	ldr	r3, [pc, #308]	; (8006cc4 <user_config_initialize+0x348>)
 8006b8e:	f04f 424f 	mov.w	r2, #3472883712	; 0xcf000000
 8006b92:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	float_reg_config[ADDR_R_TH].f_MAX				= MAX_R_TH;
 8006b96:	4b4b      	ldr	r3, [pc, #300]	; (8006cc4 <user_config_initialize+0x348>)
 8006b98:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006b9c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

	float_reg_config[ADDR_C_TH].name				= NAME_C_TH;
 8006ba0:	4b48      	ldr	r3, [pc, #288]	; (8006cc4 <user_config_initialize+0x348>)
 8006ba2:	4a5a      	ldr	r2, [pc, #360]	; (8006d0c <user_config_initialize+0x390>)
 8006ba4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	float_reg_config[ADDR_C_TH].cmd					= CMD_C_TH;
 8006ba8:	4b46      	ldr	r3, [pc, #280]	; (8006cc4 <user_config_initialize+0x348>)
 8006baa:	2220      	movs	r2, #32
 8006bac:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	float_reg_config[ADDR_C_TH].f_MIN				= MIN_C_TH;
 8006bb0:	4b44      	ldr	r3, [pc, #272]	; (8006cc4 <user_config_initialize+0x348>)
 8006bb2:	f04f 424f 	mov.w	r2, #3472883712	; 0xcf000000
 8006bb6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	float_reg_config[ADDR_C_TH].f_MAX				= MAX_C_TH;
 8006bba:	4b42      	ldr	r3, [pc, #264]	; (8006cc4 <user_config_initialize+0x348>)
 8006bbc:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006bc0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	float_reg_config[ADDR_GR].name					= NAME_GR;
 8006bc4:	4b3f      	ldr	r3, [pc, #252]	; (8006cc4 <user_config_initialize+0x348>)
 8006bc6:	4a52      	ldr	r2, [pc, #328]	; (8006d10 <user_config_initialize+0x394>)
 8006bc8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	float_reg_config[ADDR_GR].cmd					= CMD_GR;
 8006bcc:	4b3d      	ldr	r3, [pc, #244]	; (8006cc4 <user_config_initialize+0x348>)
 8006bce:	2267      	movs	r2, #103	; 0x67
 8006bd0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
	float_reg_config[ADDR_GR].f_MIN					= MIN_GR;
 8006bd4:	4b3b      	ldr	r3, [pc, #236]	; (8006cc4 <user_config_initialize+0x348>)
 8006bd6:	4a4f      	ldr	r2, [pc, #316]	; (8006d14 <user_config_initialize+0x398>)
 8006bd8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	float_reg_config[ADDR_GR].f_MAX					= MAX_GR;
 8006bdc:	4b39      	ldr	r3, [pc, #228]	; (8006cc4 <user_config_initialize+0x348>)
 8006bde:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006be2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	float_reg_config[ADDR_P_MIN].name				= NAME_P_MIN;
 8006be6:	4b37      	ldr	r3, [pc, #220]	; (8006cc4 <user_config_initialize+0x348>)
 8006be8:	4a4b      	ldr	r2, [pc, #300]	; (8006d18 <user_config_initialize+0x39c>)
 8006bea:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	float_reg_config[ADDR_P_MIN].cmd				= CMD_P_MIN;
 8006bee:	4b35      	ldr	r3, [pc, #212]	; (8006cc4 <user_config_initialize+0x348>)
 8006bf0:	225f      	movs	r2, #95	; 0x5f
 8006bf2:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
	float_reg_config[ADDR_P_MIN].f_MIN				= MIN_P_MIN;
 8006bf6:	4b33      	ldr	r3, [pc, #204]	; (8006cc4 <user_config_initialize+0x348>)
 8006bf8:	f04f 424f 	mov.w	r2, #3472883712	; 0xcf000000
 8006bfc:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	float_reg_config[ADDR_P_MIN].f_MAX				= MAX_P_MIN;
 8006c00:	4b30      	ldr	r3, [pc, #192]	; (8006cc4 <user_config_initialize+0x348>)
 8006c02:	f04f 0200 	mov.w	r2, #0
 8006c06:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

	float_reg_config[ADDR_P_MAX].name				= NAME_P_MAX;
 8006c0a:	4b2e      	ldr	r3, [pc, #184]	; (8006cc4 <user_config_initialize+0x348>)
 8006c0c:	4a43      	ldr	r2, [pc, #268]	; (8006d1c <user_config_initialize+0x3a0>)
 8006c0e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	float_reg_config[ADDR_P_MAX].cmd				= CMD_P_MAX;
 8006c12:	4b2c      	ldr	r3, [pc, #176]	; (8006cc4 <user_config_initialize+0x348>)
 8006c14:	2270      	movs	r2, #112	; 0x70
 8006c16:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	float_reg_config[ADDR_P_MAX].f_MIN				= MIN_P_MAX;
 8006c1a:	4b2a      	ldr	r3, [pc, #168]	; (8006cc4 <user_config_initialize+0x348>)
 8006c1c:	f04f 0200 	mov.w	r2, #0
 8006c20:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	float_reg_config[ADDR_P_MAX].f_MAX				= MAX_P_MAX;
 8006c24:	4b27      	ldr	r3, [pc, #156]	; (8006cc4 <user_config_initialize+0x348>)
 8006c26:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006c2a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

	float_reg_config[ADDR_V_MIN].name				= NAME_V_MIN;
 8006c2e:	4b25      	ldr	r3, [pc, #148]	; (8006cc4 <user_config_initialize+0x348>)
 8006c30:	4a3b      	ldr	r2, [pc, #236]	; (8006d20 <user_config_initialize+0x3a4>)
 8006c32:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	float_reg_config[ADDR_V_MIN].cmd				= CMD_V_MIN;
 8006c36:	4b23      	ldr	r3, [pc, #140]	; (8006cc4 <user_config_initialize+0x348>)
 8006c38:	225f      	movs	r2, #95	; 0x5f
 8006c3a:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	float_reg_config[ADDR_V_MIN].f_MIN				= MIN_V_MIN;
 8006c3e:	4b21      	ldr	r3, [pc, #132]	; (8006cc4 <user_config_initialize+0x348>)
 8006c40:	f04f 424f 	mov.w	r2, #3472883712	; 0xcf000000
 8006c44:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	float_reg_config[ADDR_V_MIN].f_MAX				= MAX_V_MIN;
 8006c48:	4b1e      	ldr	r3, [pc, #120]	; (8006cc4 <user_config_initialize+0x348>)
 8006c4a:	f04f 0200 	mov.w	r2, #0
 8006c4e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

	float_reg_config[ADDR_V_MAX].name				= NAME_V_MAX;
 8006c52:	4b1c      	ldr	r3, [pc, #112]	; (8006cc4 <user_config_initialize+0x348>)
 8006c54:	4a33      	ldr	r2, [pc, #204]	; (8006d24 <user_config_initialize+0x3a8>)
 8006c56:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	float_reg_config[ADDR_V_MAX].cmd				= CMD_V_MAX;
 8006c5a:	4b1a      	ldr	r3, [pc, #104]	; (8006cc4 <user_config_initialize+0x348>)
 8006c5c:	2276      	movs	r2, #118	; 0x76
 8006c5e:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
	float_reg_config[ADDR_V_MAX].f_MIN				= MIN_V_MAX;
 8006c62:	4b18      	ldr	r3, [pc, #96]	; (8006cc4 <user_config_initialize+0x348>)
 8006c64:	f04f 0200 	mov.w	r2, #0
 8006c68:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	float_reg_config[ADDR_V_MAX].f_MAX				= MAX_V_MAX;
 8006c6c:	4b15      	ldr	r3, [pc, #84]	; (8006cc4 <user_config_initialize+0x348>)
 8006c6e:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006c72:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

	float_reg_config[ADDR_T_MIN].name				= NAME_T_MIN;
 8006c76:	4b13      	ldr	r3, [pc, #76]	; (8006cc4 <user_config_initialize+0x348>)
 8006c78:	4a2b      	ldr	r2, [pc, #172]	; (8006d28 <user_config_initialize+0x3ac>)
 8006c7a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	float_reg_config[ADDR_T_MIN].cmd				= CMD_T_MIN;
 8006c7e:	4b11      	ldr	r3, [pc, #68]	; (8006cc4 <user_config_initialize+0x348>)
 8006c80:	225f      	movs	r2, #95	; 0x5f
 8006c82:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
	float_reg_config[ADDR_T_MIN].f_MIN				= MIN_T_MIN;
 8006c86:	4b0f      	ldr	r3, [pc, #60]	; (8006cc4 <user_config_initialize+0x348>)
 8006c88:	f04f 424f 	mov.w	r2, #3472883712	; 0xcf000000
 8006c8c:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	float_reg_config[ADDR_T_MIN].f_MAX				= MAX_T_MIN;
 8006c90:	4b0c      	ldr	r3, [pc, #48]	; (8006cc4 <user_config_initialize+0x348>)
 8006c92:	f04f 0200 	mov.w	r2, #0
 8006c96:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	float_reg_config[ADDR_T_MAX].name				= NAME_T_MAX;
 8006c9a:	4b0a      	ldr	r3, [pc, #40]	; (8006cc4 <user_config_initialize+0x348>)
 8006c9c:	4a23      	ldr	r2, [pc, #140]	; (8006d2c <user_config_initialize+0x3b0>)
 8006c9e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	float_reg_config[ADDR_T_MAX].cmd				= CMD_T_MAX;
 8006ca2:	4b08      	ldr	r3, [pc, #32]	; (8006cc4 <user_config_initialize+0x348>)
 8006ca4:	2254      	movs	r2, #84	; 0x54
 8006ca6:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
	float_reg_config[ADDR_T_MAX].f_MIN				= MIN_T_MAX;
 8006caa:	4b06      	ldr	r3, [pc, #24]	; (8006cc4 <user_config_initialize+0x348>)
 8006cac:	f04f 0200 	mov.w	r2, #0
 8006cb0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	float_reg_config[ADDR_T_MAX].f_MAX				= MAX_T_MAX;
 8006cb4:	4b03      	ldr	r3, [pc, #12]	; (8006cc4 <user_config_initialize+0x348>)
 8006cb6:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006cba:	e039      	b.n	8006d30 <user_config_initialize+0x3b4>
 8006cbc:	20009a5c 	.word	0x20009a5c
 8006cc0:	080113ec 	.word	0x080113ec
 8006cc4:	2000965c 	.word	0x2000965c
 8006cc8:	080113f0 	.word	0x080113f0
 8006ccc:	42c80000 	.word	0x42c80000
 8006cd0:	44fa0000 	.word	0x44fa0000
 8006cd4:	080113f8 	.word	0x080113f8
 8006cd8:	42960000 	.word	0x42960000
 8006cdc:	08011400 	.word	0x08011400
 8006ce0:	0801140c 	.word	0x0801140c
 8006ce4:	08011418 	.word	0x08011418
 8006ce8:	42040000 	.word	0x42040000
 8006cec:	08011424 	.word	0x08011424
 8006cf0:	08011430 	.word	0x08011430
 8006cf4:	0801143c 	.word	0x0801143c
 8006cf8:	08011448 	.word	0x08011448
 8006cfc:	08011450 	.word	0x08011450
 8006d00:	08011458 	.word	0x08011458
 8006d04:	38d1b717 	.word	0x38d1b717
 8006d08:	0801145c 	.word	0x0801145c
 8006d0c:	08011464 	.word	0x08011464
 8006d10:	0801146c 	.word	0x0801146c
 8006d14:	3a83126f 	.word	0x3a83126f
 8006d18:	08011470 	.word	0x08011470
 8006d1c:	08011478 	.word	0x08011478
 8006d20:	08011480 	.word	0x08011480
 8006d24:	08011488 	.word	0x08011488
 8006d28:	08011490 	.word	0x08011490
 8006d2c:	08011498 	.word	0x08011498
 8006d30:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

	float_reg_config[ADDR_KP_MAX].name				= NAME_KP_MAX;
 8006d34:	4b64      	ldr	r3, [pc, #400]	; (8006ec8 <user_config_initialize+0x54c>)
 8006d36:	4a65      	ldr	r2, [pc, #404]	; (8006ecc <user_config_initialize+0x550>)
 8006d38:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	float_reg_config[ADDR_KP_MAX].cmd				= CMD_KP_MAX;
 8006d3c:	4b62      	ldr	r3, [pc, #392]	; (8006ec8 <user_config_initialize+0x54c>)
 8006d3e:	226b      	movs	r2, #107	; 0x6b
 8006d40:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	float_reg_config[ADDR_KP_MAX].f_MIN				= MIN_KP_MAX;
 8006d44:	4b60      	ldr	r3, [pc, #384]	; (8006ec8 <user_config_initialize+0x54c>)
 8006d46:	f04f 0200 	mov.w	r2, #0
 8006d4a:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	float_reg_config[ADDR_KP_MAX].f_MAX				= MAX_KP_MAX;
 8006d4e:	4b5e      	ldr	r3, [pc, #376]	; (8006ec8 <user_config_initialize+0x54c>)
 8006d50:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006d54:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

	float_reg_config[ADDR_KI_MAX].name				= NAME_KI_MAX;
 8006d58:	4b5b      	ldr	r3, [pc, #364]	; (8006ec8 <user_config_initialize+0x54c>)
 8006d5a:	4a5d      	ldr	r2, [pc, #372]	; (8006ed0 <user_config_initialize+0x554>)
 8006d5c:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	float_reg_config[ADDR_KI_MAX].cmd				= CMD_KI_MAX;
 8006d60:	4b59      	ldr	r3, [pc, #356]	; (8006ec8 <user_config_initialize+0x54c>)
 8006d62:	2269      	movs	r2, #105	; 0x69
 8006d64:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
	float_reg_config[ADDR_KI_MAX].f_MIN				= MIN_KI_MAX;
 8006d68:	4b57      	ldr	r3, [pc, #348]	; (8006ec8 <user_config_initialize+0x54c>)
 8006d6a:	f04f 0200 	mov.w	r2, #0
 8006d6e:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	float_reg_config[ADDR_KI_MAX].f_MAX				= MAX_KI_MAX;
 8006d72:	4b55      	ldr	r3, [pc, #340]	; (8006ec8 <user_config_initialize+0x54c>)
 8006d74:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006d78:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

	float_reg_config[ADDR_KD_MAX].name				= NAME_KD_MAX;
 8006d7c:	4b52      	ldr	r3, [pc, #328]	; (8006ec8 <user_config_initialize+0x54c>)
 8006d7e:	4a55      	ldr	r2, [pc, #340]	; (8006ed4 <user_config_initialize+0x558>)
 8006d80:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	float_reg_config[ADDR_KD_MAX].cmd				= CMD_KD_MAX;
 8006d84:	4b50      	ldr	r3, [pc, #320]	; (8006ec8 <user_config_initialize+0x54c>)
 8006d86:	2264      	movs	r2, #100	; 0x64
 8006d88:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	float_reg_config[ADDR_KD_MAX].f_MIN				= MIN_KD_MAX;
 8006d8c:	4b4e      	ldr	r3, [pc, #312]	; (8006ec8 <user_config_initialize+0x54c>)
 8006d8e:	f04f 0200 	mov.w	r2, #0
 8006d92:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	float_reg_config[ADDR_KD_MAX].f_MAX				= MAX_KD_MAX;
 8006d96:	4b4c      	ldr	r3, [pc, #304]	; (8006ec8 <user_config_initialize+0x54c>)
 8006d98:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006d9c:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc

	float_reg_config[ADDR_HALL_CAL_OFFSET].name		= NAME_HALL_CAL_OFFSET;
 8006da0:	4b49      	ldr	r3, [pc, #292]	; (8006ec8 <user_config_initialize+0x54c>)
 8006da2:	4a4d      	ldr	r2, [pc, #308]	; (8006ed8 <user_config_initialize+0x55c>)
 8006da4:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
	float_reg_config[ADDR_HALL_CAL_OFFSET].cmd		= CMD_HALL_CAL_OFFSET;
 8006da8:	4b47      	ldr	r3, [pc, #284]	; (8006ec8 <user_config_initialize+0x54c>)
 8006daa:	2265      	movs	r2, #101	; 0x65
 8006dac:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
	float_reg_config[ADDR_HALL_CAL_OFFSET].f_MIN	= MIN_HALL_CAL_OFFSET;
 8006db0:	4b45      	ldr	r3, [pc, #276]	; (8006ec8 <user_config_initialize+0x54c>)
 8006db2:	f04f 0200 	mov.w	r2, #0
 8006db6:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
	float_reg_config[ADDR_HALL_CAL_OFFSET].f_MAX	= MAX_HALL_CAL_OFFSET;
 8006dba:	4b43      	ldr	r3, [pc, #268]	; (8006ec8 <user_config_initialize+0x54c>)
 8006dbc:	4a47      	ldr	r2, [pc, #284]	; (8006edc <user_config_initialize+0x560>)
 8006dbe:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc

	float_reg_config[ADDR_HALL_CAL_SPEED].name		= NAME_HALL_CAL_SPEED;
 8006dc2:	4b41      	ldr	r3, [pc, #260]	; (8006ec8 <user_config_initialize+0x54c>)
 8006dc4:	4a46      	ldr	r2, [pc, #280]	; (8006ee0 <user_config_initialize+0x564>)
 8006dc6:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	float_reg_config[ADDR_HALL_CAL_SPEED].cmd		= CMD_HALL_CAL_SPEED;
 8006dca:	4b3f      	ldr	r3, [pc, #252]	; (8006ec8 <user_config_initialize+0x54c>)
 8006dcc:	2268      	movs	r2, #104	; 0x68
 8006dce:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	float_reg_config[ADDR_HALL_CAL_SPEED].f_MIN		= MIN_HALL_CAL_SPEED;
 8006dd2:	4b3d      	ldr	r3, [pc, #244]	; (8006ec8 <user_config_initialize+0x54c>)
 8006dd4:	f04f 0200 	mov.w	r2, #0
 8006dd8:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	float_reg_config[ADDR_HALL_CAL_SPEED].f_MAX		= MAX_HALL_CAL_SPEED;
 8006ddc:	4b3a      	ldr	r3, [pc, #232]	; (8006ec8 <user_config_initialize+0x54c>)
 8006dde:	4a41      	ldr	r2, [pc, #260]	; (8006ee4 <user_config_initialize+0x568>)
 8006de0:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc

	// initialize the int_reg_config array
	int_reg_config[ADDR_PHASE_ORDER].name			= NAME_PHASE_ORDER;
 8006de4:	4b40      	ldr	r3, [pc, #256]	; (8006ee8 <user_config_initialize+0x56c>)
 8006de6:	4a41      	ldr	r2, [pc, #260]	; (8006eec <user_config_initialize+0x570>)
 8006de8:	601a      	str	r2, [r3, #0]
	int_reg_config[ADDR_PHASE_ORDER].cmd			= CMD_PHASE_ORDER;
 8006dea:	4b3f      	ldr	r3, [pc, #252]	; (8006ee8 <user_config_initialize+0x56c>)
 8006dec:	2220      	movs	r2, #32
 8006dee:	711a      	strb	r2, [r3, #4]
	int_reg_config[ADDR_PHASE_ORDER].i_MIN			= MIN_PHASE_ORDER;
 8006df0:	4b3d      	ldr	r3, [pc, #244]	; (8006ee8 <user_config_initialize+0x56c>)
 8006df2:	4a3f      	ldr	r2, [pc, #252]	; (8006ef0 <user_config_initialize+0x574>)
 8006df4:	609a      	str	r2, [r3, #8]
	int_reg_config[ADDR_PHASE_ORDER].i_MAX			= MAX_PHASE_ORDER;
 8006df6:	4b3c      	ldr	r3, [pc, #240]	; (8006ee8 <user_config_initialize+0x56c>)
 8006df8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006dfc:	60da      	str	r2, [r3, #12]

	int_reg_config[ADDR_CAN_ID].name				= NAME_CAN_ID;
 8006dfe:	4b3a      	ldr	r3, [pc, #232]	; (8006ee8 <user_config_initialize+0x56c>)
 8006e00:	4a3c      	ldr	r2, [pc, #240]	; (8006ef4 <user_config_initialize+0x578>)
 8006e02:	611a      	str	r2, [r3, #16]
	int_reg_config[ADDR_CAN_ID].cmd					= CMD_CAN_ID;
 8006e04:	4b38      	ldr	r3, [pc, #224]	; (8006ee8 <user_config_initialize+0x56c>)
 8006e06:	226e      	movs	r2, #110	; 0x6e
 8006e08:	751a      	strb	r2, [r3, #20]
	int_reg_config[ADDR_CAN_ID].i_MIN				= MIN_CAN_ID;
 8006e0a:	4b37      	ldr	r3, [pc, #220]	; (8006ee8 <user_config_initialize+0x56c>)
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	619a      	str	r2, [r3, #24]
	int_reg_config[ADDR_CAN_ID].i_MAX				= MAX_CAN_ID;
 8006e10:	4b35      	ldr	r3, [pc, #212]	; (8006ee8 <user_config_initialize+0x56c>)
 8006e12:	227f      	movs	r2, #127	; 0x7f
 8006e14:	61da      	str	r2, [r3, #28]

	int_reg_config[ADDR_CAN_MASTER].name			= NAME_CAN_MASTER;
 8006e16:	4b34      	ldr	r3, [pc, #208]	; (8006ee8 <user_config_initialize+0x56c>)
 8006e18:	4a37      	ldr	r2, [pc, #220]	; (8006ef8 <user_config_initialize+0x57c>)
 8006e1a:	621a      	str	r2, [r3, #32]
	int_reg_config[ADDR_CAN_MASTER].cmd				= CMD_CAN_MASTER;
 8006e1c:	4b32      	ldr	r3, [pc, #200]	; (8006ee8 <user_config_initialize+0x56c>)
 8006e1e:	226d      	movs	r2, #109	; 0x6d
 8006e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	int_reg_config[ADDR_CAN_MASTER].i_MIN			= MIN_CAN_MASTER;
 8006e24:	4b30      	ldr	r3, [pc, #192]	; (8006ee8 <user_config_initialize+0x56c>)
 8006e26:	2200      	movs	r2, #0
 8006e28:	629a      	str	r2, [r3, #40]	; 0x28
	int_reg_config[ADDR_CAN_MASTER].i_MAX			= MAX_CAN_MASTER;
 8006e2a:	4b2f      	ldr	r3, [pc, #188]	; (8006ee8 <user_config_initialize+0x56c>)
 8006e2c:	227f      	movs	r2, #127	; 0x7f
 8006e2e:	62da      	str	r2, [r3, #44]	; 0x2c

	int_reg_config[ADDR_CAN_TIMEOUT].name			= NAME_CAN_TIMEOUT;
 8006e30:	4b2d      	ldr	r3, [pc, #180]	; (8006ee8 <user_config_initialize+0x56c>)
 8006e32:	4a32      	ldr	r2, [pc, #200]	; (8006efc <user_config_initialize+0x580>)
 8006e34:	631a      	str	r2, [r3, #48]	; 0x30
	int_reg_config[ADDR_CAN_TIMEOUT].cmd			= CMD_CAN_TIMEOUT;
 8006e36:	4b2c      	ldr	r3, [pc, #176]	; (8006ee8 <user_config_initialize+0x56c>)
 8006e38:	226f      	movs	r2, #111	; 0x6f
 8006e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	int_reg_config[ADDR_CAN_TIMEOUT].i_MIN			= MIN_CAN_TIMEOUT;
 8006e3e:	4b2a      	ldr	r3, [pc, #168]	; (8006ee8 <user_config_initialize+0x56c>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	639a      	str	r2, [r3, #56]	; 0x38
	int_reg_config[ADDR_CAN_TIMEOUT].i_MAX			= MAX_CAN_TIMEOUT;
 8006e44:	4b28      	ldr	r3, [pc, #160]	; (8006ee8 <user_config_initialize+0x56c>)
 8006e46:	4a2e      	ldr	r2, [pc, #184]	; (8006f00 <user_config_initialize+0x584>)
 8006e48:	63da      	str	r2, [r3, #60]	; 0x3c

	int_reg_config[ADDR_M_ZERO].name				= NAME_M_ZERO;
 8006e4a:	4b27      	ldr	r3, [pc, #156]	; (8006ee8 <user_config_initialize+0x56c>)
 8006e4c:	4a2d      	ldr	r2, [pc, #180]	; (8006f04 <user_config_initialize+0x588>)
 8006e4e:	641a      	str	r2, [r3, #64]	; 0x40
	int_reg_config[ADDR_M_ZERO].cmd					= CMD_M_ZERO;
 8006e50:	4b25      	ldr	r3, [pc, #148]	; (8006ee8 <user_config_initialize+0x56c>)
 8006e52:	2220      	movs	r2, #32
 8006e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	int_reg_config[ADDR_M_ZERO].i_MIN				= MIN_M_ZERO;
 8006e58:	4b23      	ldr	r3, [pc, #140]	; (8006ee8 <user_config_initialize+0x56c>)
 8006e5a:	4a25      	ldr	r2, [pc, #148]	; (8006ef0 <user_config_initialize+0x574>)
 8006e5c:	649a      	str	r2, [r3, #72]	; 0x48
	int_reg_config[ADDR_M_ZERO].i_MAX				= MAX_M_ZERO;
 8006e5e:	4b22      	ldr	r3, [pc, #136]	; (8006ee8 <user_config_initialize+0x56c>)
 8006e60:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006e64:	64da      	str	r2, [r3, #76]	; 0x4c

	int_reg_config[ADDR_E_ZERO].name				= NAME_E_ZERO;
 8006e66:	4b20      	ldr	r3, [pc, #128]	; (8006ee8 <user_config_initialize+0x56c>)
 8006e68:	4a27      	ldr	r2, [pc, #156]	; (8006f08 <user_config_initialize+0x58c>)
 8006e6a:	651a      	str	r2, [r3, #80]	; 0x50
	int_reg_config[ADDR_E_ZERO].cmd					= CMD_E_ZERO;
 8006e6c:	4b1e      	ldr	r3, [pc, #120]	; (8006ee8 <user_config_initialize+0x56c>)
 8006e6e:	2220      	movs	r2, #32
 8006e70:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	int_reg_config[ADDR_E_ZERO].i_MIN				= MIN_E_ZERO;
 8006e74:	4b1c      	ldr	r3, [pc, #112]	; (8006ee8 <user_config_initialize+0x56c>)
 8006e76:	4a1e      	ldr	r2, [pc, #120]	; (8006ef0 <user_config_initialize+0x574>)
 8006e78:	659a      	str	r2, [r3, #88]	; 0x58
	int_reg_config[ADDR_E_ZERO].i_MAX				= MAX_E_ZERO;
 8006e7a:	4b1b      	ldr	r3, [pc, #108]	; (8006ee8 <user_config_initialize+0x56c>)
 8006e7c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006e80:	65da      	str	r2, [r3, #92]	; 0x5c

	int_reg_config[ADDR_HALL_CAL_DIR].name			= NAME_HALL_CAL_DIR;
 8006e82:	4b19      	ldr	r3, [pc, #100]	; (8006ee8 <user_config_initialize+0x56c>)
 8006e84:	4a21      	ldr	r2, [pc, #132]	; (8006f0c <user_config_initialize+0x590>)
 8006e86:	661a      	str	r2, [r3, #96]	; 0x60
	int_reg_config[ADDR_HALL_CAL_DIR].cmd			= CMD_HALL_CAL_DIR;
 8006e88:	4b17      	ldr	r3, [pc, #92]	; (8006ee8 <user_config_initialize+0x56c>)
 8006e8a:	2272      	movs	r2, #114	; 0x72
 8006e8c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	int_reg_config[ADDR_HALL_CAL_DIR].i_MIN			= MIN_HALL_CAL_DIR;
 8006e90:	4b15      	ldr	r3, [pc, #84]	; (8006ee8 <user_config_initialize+0x56c>)
 8006e92:	f04f 32ff 	mov.w	r2, #4294967295
 8006e96:	669a      	str	r2, [r3, #104]	; 0x68
	int_reg_config[ADDR_HALL_CAL_DIR].i_MAX			= MAX_HALL_CAL_DIR;
 8006e98:	4b13      	ldr	r3, [pc, #76]	; (8006ee8 <user_config_initialize+0x56c>)
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	66da      	str	r2, [r3, #108]	; 0x6c

	int_reg_config[ADDR_ENCODER_LUT].name			= NAME_ENCODER_LUT;
 8006e9e:	4b12      	ldr	r3, [pc, #72]	; (8006ee8 <user_config_initialize+0x56c>)
 8006ea0:	4a1b      	ldr	r2, [pc, #108]	; (8006f10 <user_config_initialize+0x594>)
 8006ea2:	671a      	str	r2, [r3, #112]	; 0x70
	int_reg_config[ADDR_ENCODER_LUT].cmd			= CMD_ENCODER_LUT;
 8006ea4:	4b10      	ldr	r3, [pc, #64]	; (8006ee8 <user_config_initialize+0x56c>)
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	int_reg_config[ADDR_ENCODER_LUT].i_MIN			= MIN_ENCODER_LUT;
 8006eac:	4b0e      	ldr	r3, [pc, #56]	; (8006ee8 <user_config_initialize+0x56c>)
 8006eae:	4a10      	ldr	r2, [pc, #64]	; (8006ef0 <user_config_initialize+0x574>)
 8006eb0:	679a      	str	r2, [r3, #120]	; 0x78
	int_reg_config[ADDR_ENCODER_LUT].i_MAX			= MAX_ENCODER_LUT;
 8006eb2:	4b0d      	ldr	r3, [pc, #52]	; (8006ee8 <user_config_initialize+0x56c>)
 8006eb4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006eb8:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8006eba:	bf00      	nop
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	2000965c 	.word	0x2000965c
 8006ecc:	080114a0 	.word	0x080114a0
 8006ed0:	080114a8 	.word	0x080114a8
 8006ed4:	080114b0 	.word	0x080114b0
 8006ed8:	080114b8 	.word	0x080114b8
 8006edc:	430f0000 	.word	0x430f0000
 8006ee0:	080114c8 	.word	0x080114c8
 8006ee4:	41200000 	.word	0x41200000
 8006ee8:	20009a5c 	.word	0x20009a5c
 8006eec:	080114d8 	.word	0x080114d8
 8006ef0:	80000001 	.word	0x80000001
 8006ef4:	080114e4 	.word	0x080114e4
 8006ef8:	080114ec 	.word	0x080114ec
 8006efc:	080114f8 	.word	0x080114f8
 8006f00:	000186a0 	.word	0x000186a0
 8006f04:	08011504 	.word	0x08011504
 8006f08:	0801150c 	.word	0x0801150c
 8006f0c:	08011514 	.word	0x08011514
 8006f10:	08011524 	.word	0x08011524

08006f14 <float_reg_update_uart>:

char* float_reg_update_uart(char cmd, const char *c_data){
 8006f14:	b590      	push	{r4, r7, lr}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af02      	add	r7, sp, #8
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	6039      	str	r1, [r7, #0]
 8006f1e:	71fb      	strb	r3, [r7, #7]
    static char response[100];
	float f_data = atof(c_data);
 8006f20:	6838      	ldr	r0, [r7, #0]
 8006f22:	f005 fb17 	bl	800c554 <atof>
 8006f26:	ec53 2b10 	vmov	r2, r3, d0
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	f7f9 fe8b 	bl	8000c48 <__aeabi_d2f>
 8006f32:	4603      	mov	r3, r0
 8006f34:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<FLOAT_REG_LENGTH; i++){
 8006f36:	2300      	movs	r3, #0
 8006f38:	60fb      	str	r3, [r7, #12]
 8006f3a:	e082      	b.n	8007042 <float_reg_update_uart+0x12e>
		if (float_reg_config[i].cmd == cmd){
 8006f3c:	4a45      	ldr	r2, [pc, #276]	; (8007054 <float_reg_update_uart+0x140>)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	011b      	lsls	r3, r3, #4
 8006f42:	4413      	add	r3, r2
 8006f44:	3304      	adds	r3, #4
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	79fa      	ldrb	r2, [r7, #7]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d176      	bne.n	800703c <float_reg_update_uart+0x128>
			if ((float_reg_config[i].f_MIN > f_data) || (float_reg_config[i].f_MAX < f_data)){
 8006f4e:	4a41      	ldr	r2, [pc, #260]	; (8007054 <float_reg_update_uart+0x140>)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	011b      	lsls	r3, r3, #4
 8006f54:	4413      	add	r3, r2
 8006f56:	3308      	adds	r3, #8
 8006f58:	edd3 7a00 	vldr	s15, [r3]
 8006f5c:	ed97 7a02 	vldr	s14, [r7, #8]
 8006f60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f68:	d40d      	bmi.n	8006f86 <float_reg_update_uart+0x72>
 8006f6a:	4a3a      	ldr	r2, [pc, #232]	; (8007054 <float_reg_update_uart+0x140>)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	011b      	lsls	r3, r3, #4
 8006f70:	4413      	add	r3, r2
 8006f72:	330c      	adds	r3, #12
 8006f74:	edd3 7a00 	vldr	s15, [r3]
 8006f78:	ed97 7a02 	vldr	s14, [r7, #8]
 8006f7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f84:	dd01      	ble.n	8006f8a <float_reg_update_uart+0x76>
				return STR_INVALID_VALUE;
 8006f86:	4b34      	ldr	r3, [pc, #208]	; (8007058 <float_reg_update_uart+0x144>)
 8006f88:	e060      	b.n	800704c <float_reg_update_uart+0x138>
			}
			else if (i == ADDR_V_MAX){
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2b16      	cmp	r3, #22
 8006f8e:	d11c      	bne.n	8006fca <float_reg_update_uart+0xb6>
				__float_reg[ADDR_V_MAX] = f_data;
 8006f90:	4a32      	ldr	r2, [pc, #200]	; (800705c <float_reg_update_uart+0x148>)
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	6593      	str	r3, [r2, #88]	; 0x58
				__float_reg[ADDR_V_MIN] = -f_data;
 8006f96:	edd7 7a02 	vldr	s15, [r7, #8]
 8006f9a:	eef1 7a67 	vneg.f32	s15, s15
 8006f9e:	4b2f      	ldr	r3, [pc, #188]	; (800705c <float_reg_update_uart+0x148>)
 8006fa0:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
                sprintf(response, "%s set to %f\r\n", float_reg_config[i].name, f_data);
 8006fa4:	4a2b      	ldr	r2, [pc, #172]	; (8007054 <float_reg_update_uart+0x140>)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	011b      	lsls	r3, r3, #4
 8006faa:	4413      	add	r3, r2
 8006fac:	681c      	ldr	r4, [r3, #0]
 8006fae:	68b8      	ldr	r0, [r7, #8]
 8006fb0:	f7f9 fafa 	bl	80005a8 <__aeabi_f2d>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	e9cd 2300 	strd	r2, r3, [sp]
 8006fbc:	4622      	mov	r2, r4
 8006fbe:	4928      	ldr	r1, [pc, #160]	; (8007060 <float_reg_update_uart+0x14c>)
 8006fc0:	4828      	ldr	r0, [pc, #160]	; (8007064 <float_reg_update_uart+0x150>)
 8006fc2:	f006 f807 	bl	800cfd4 <siprintf>
				return response;
 8006fc6:	4b27      	ldr	r3, [pc, #156]	; (8007064 <float_reg_update_uart+0x150>)
 8006fc8:	e040      	b.n	800704c <float_reg_update_uart+0x138>
			}
			else if (i == ADDR_T_MAX){
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2b18      	cmp	r3, #24
 8006fce:	d11c      	bne.n	800700a <float_reg_update_uart+0xf6>
				__float_reg[ADDR_T_MAX] = f_data;
 8006fd0:	4a22      	ldr	r2, [pc, #136]	; (800705c <float_reg_update_uart+0x148>)
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	6613      	str	r3, [r2, #96]	; 0x60
				__float_reg[ADDR_T_MIN] = -f_data;
 8006fd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8006fda:	eef1 7a67 	vneg.f32	s15, s15
 8006fde:	4b1f      	ldr	r3, [pc, #124]	; (800705c <float_reg_update_uart+0x148>)
 8006fe0:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
                sprintf(response, "%s set to %f\r\n", float_reg_config[i].name, f_data);
 8006fe4:	4a1b      	ldr	r2, [pc, #108]	; (8007054 <float_reg_update_uart+0x140>)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	011b      	lsls	r3, r3, #4
 8006fea:	4413      	add	r3, r2
 8006fec:	681c      	ldr	r4, [r3, #0]
 8006fee:	68b8      	ldr	r0, [r7, #8]
 8006ff0:	f7f9 fada 	bl	80005a8 <__aeabi_f2d>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	e9cd 2300 	strd	r2, r3, [sp]
 8006ffc:	4622      	mov	r2, r4
 8006ffe:	4918      	ldr	r1, [pc, #96]	; (8007060 <float_reg_update_uart+0x14c>)
 8007000:	4818      	ldr	r0, [pc, #96]	; (8007064 <float_reg_update_uart+0x150>)
 8007002:	f005 ffe7 	bl	800cfd4 <siprintf>
				return response;
 8007006:	4b17      	ldr	r3, [pc, #92]	; (8007064 <float_reg_update_uart+0x150>)
 8007008:	e020      	b.n	800704c <float_reg_update_uart+0x138>
			}
			else{
				__float_reg[i] = f_data;
 800700a:	4a14      	ldr	r2, [pc, #80]	; (800705c <float_reg_update_uart+0x148>)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	601a      	str	r2, [r3, #0]
                sprintf(response, "%s set to %f\r\n", float_reg_config[i].name, f_data);
 8007016:	4a0f      	ldr	r2, [pc, #60]	; (8007054 <float_reg_update_uart+0x140>)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	011b      	lsls	r3, r3, #4
 800701c:	4413      	add	r3, r2
 800701e:	681c      	ldr	r4, [r3, #0]
 8007020:	68b8      	ldr	r0, [r7, #8]
 8007022:	f7f9 fac1 	bl	80005a8 <__aeabi_f2d>
 8007026:	4602      	mov	r2, r0
 8007028:	460b      	mov	r3, r1
 800702a:	e9cd 2300 	strd	r2, r3, [sp]
 800702e:	4622      	mov	r2, r4
 8007030:	490b      	ldr	r1, [pc, #44]	; (8007060 <float_reg_update_uart+0x14c>)
 8007032:	480c      	ldr	r0, [pc, #48]	; (8007064 <float_reg_update_uart+0x150>)
 8007034:	f005 ffce 	bl	800cfd4 <siprintf>
				return response;
 8007038:	4b0a      	ldr	r3, [pc, #40]	; (8007064 <float_reg_update_uart+0x150>)
 800703a:	e007      	b.n	800704c <float_reg_update_uart+0x138>
	for (int i=0; i<FLOAT_REG_LENGTH; i++){
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	3301      	adds	r3, #1
 8007040:	60fb      	str	r3, [r7, #12]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2b3f      	cmp	r3, #63	; 0x3f
 8007046:	f77f af79 	ble.w	8006f3c <float_reg_update_uart+0x28>
			}
		}
	}
	return STR_INVALID_CMD;
 800704a:	4b07      	ldr	r3, [pc, #28]	; (8007068 <float_reg_update_uart+0x154>)
}
 800704c:	4618      	mov	r0, r3
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	bd90      	pop	{r4, r7, pc}
 8007054:	2000965c 	.word	0x2000965c
 8007058:	08011530 	.word	0x08011530
 800705c:	2000075c 	.word	0x2000075c
 8007060:	08011544 	.word	0x08011544
 8007064:	20000258 	.word	0x20000258
 8007068:	08011554 	.word	0x08011554

0800706c <float_reg_update_can>:

int float_reg_update_can(int addr, float f_data){
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af02      	add	r7, sp, #8
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	ed87 0a00 	vstr	s0, [r7]
	if (addr < 0 || addr >= FLOAT_REG_LENGTH){
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	db02      	blt.n	8007084 <float_reg_update_can+0x18>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b3f      	cmp	r3, #63	; 0x3f
 8007082:	dd01      	ble.n	8007088 <float_reg_update_can+0x1c>
		return CODE_INVALID_ADDR;
 8007084:	2303      	movs	r3, #3
 8007086:	e056      	b.n	8007136 <float_reg_update_can+0xca>
	}
	else if (float_reg_config[addr].cmd == ' '){
 8007088:	4a2d      	ldr	r2, [pc, #180]	; (8007140 <float_reg_update_can+0xd4>)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	011b      	lsls	r3, r3, #4
 800708e:	4413      	add	r3, r2
 8007090:	3304      	adds	r3, #4
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	2b20      	cmp	r3, #32
 8007096:	d101      	bne.n	800709c <float_reg_update_can+0x30>
		return CODE_READ_ONLY;
 8007098:	2302      	movs	r3, #2
 800709a:	e04c      	b.n	8007136 <float_reg_update_can+0xca>
	}
	else if ((float_reg_config[addr].f_MIN > f_data) || (float_reg_config[addr].f_MAX < f_data)){
 800709c:	4a28      	ldr	r2, [pc, #160]	; (8007140 <float_reg_update_can+0xd4>)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	011b      	lsls	r3, r3, #4
 80070a2:	4413      	add	r3, r2
 80070a4:	3308      	adds	r3, #8
 80070a6:	edd3 7a00 	vldr	s15, [r3]
 80070aa:	ed97 7a00 	vldr	s14, [r7]
 80070ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80070b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070b6:	d40d      	bmi.n	80070d4 <float_reg_update_can+0x68>
 80070b8:	4a21      	ldr	r2, [pc, #132]	; (8007140 <float_reg_update_can+0xd4>)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	011b      	lsls	r3, r3, #4
 80070be:	4413      	add	r3, r2
 80070c0:	330c      	adds	r3, #12
 80070c2:	edd3 7a00 	vldr	s15, [r3]
 80070c6:	ed97 7a00 	vldr	s14, [r7]
 80070ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80070ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070d2:	dd01      	ble.n	80070d8 <float_reg_update_can+0x6c>
		return CODE_INVALID_VALUE;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e02e      	b.n	8007136 <float_reg_update_can+0xca>
	}
	else{
		if (__float_reg[addr] != f_data){
 80070d8:	4a1a      	ldr	r2, [pc, #104]	; (8007144 <float_reg_update_can+0xd8>)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4413      	add	r3, r2
 80070e0:	edd3 7a00 	vldr	s15, [r3]
 80070e4:	ed97 7a00 	vldr	s14, [r7]
 80070e8:	eeb4 7a67 	vcmp.f32	s14, s15
 80070ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070f0:	d020      	beq.n	8007134 <float_reg_update_can+0xc8>
			__float_reg[addr] = f_data;
 80070f2:	4a14      	ldr	r2, [pc, #80]	; (8007144 <float_reg_update_can+0xd8>)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	4413      	add	r3, r2
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	601a      	str	r2, [r3, #0]
			if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 80070fe:	4b12      	ldr	r3, [pc, #72]	; (8007148 <float_reg_update_can+0xdc>)
 8007100:	691a      	ldr	r2, [r3, #16]
 8007102:	9200      	str	r2, [sp, #0]
 8007104:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007106:	f7fe fc05 	bl	8005914 <preference_writer_ready>
 800710a:	4603      	mov	r3, r0
 800710c:	f083 0301 	eor.w	r3, r3, #1
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d002      	beq.n	800711c <float_reg_update_can+0xb0>
 8007116:	480c      	ldr	r0, [pc, #48]	; (8007148 <float_reg_update_can+0xdc>)
 8007118:	f7fe fbed 	bl	80058f6 <preference_writer_open>
			preference_writer_flush(&prefs);
 800711c:	480a      	ldr	r0, [pc, #40]	; (8007148 <float_reg_update_can+0xdc>)
 800711e:	f7fe fc07 	bl	8005930 <preference_writer_flush>
			preference_writer_close(&prefs);
 8007122:	4809      	ldr	r0, [pc, #36]	; (8007148 <float_reg_update_can+0xdc>)
 8007124:	f7fe fc82 	bl	8005a2c <preference_writer_close>
			preference_writer_load(prefs);
 8007128:	4b07      	ldr	r3, [pc, #28]	; (8007148 <float_reg_update_can+0xdc>)
 800712a:	691a      	ldr	r2, [r3, #16]
 800712c:	9200      	str	r2, [sp, #0]
 800712e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007130:	f7fe fc3a 	bl	80059a8 <preference_writer_load>
		}
		return CODE_CONFIG_SUCCESS;
 8007134:	2300      	movs	r3, #0
	}
}
 8007136:	4618      	mov	r0, r3
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	2000965c 	.word	0x2000965c
 8007144:	2000075c 	.word	0x2000075c
 8007148:	20000748 	.word	0x20000748

0800714c <int_reg_update_uart>:

char* int_reg_update_uart(char cmd, const char *c_data){
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	4603      	mov	r3, r0
 8007154:	6039      	str	r1, [r7, #0]
 8007156:	71fb      	strb	r3, [r7, #7]
    static char response[100];
	int i_data = atoi(c_data);
 8007158:	6838      	ldr	r0, [r7, #0]
 800715a:	f005 f9fe 	bl	800c55a <atoi>
 800715e:	60b8      	str	r0, [r7, #8]

	for (int i=0; i<INT_REG_LENGTH; i++){
 8007160:	2300      	movs	r3, #0
 8007162:	60fb      	str	r3, [r7, #12]
 8007164:	e030      	b.n	80071c8 <int_reg_update_uart+0x7c>
		if (int_reg_config[i].cmd == cmd){
 8007166:	4a1c      	ldr	r2, [pc, #112]	; (80071d8 <int_reg_update_uart+0x8c>)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	011b      	lsls	r3, r3, #4
 800716c:	4413      	add	r3, r2
 800716e:	3304      	adds	r3, #4
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	79fa      	ldrb	r2, [r7, #7]
 8007174:	429a      	cmp	r2, r3
 8007176:	d124      	bne.n	80071c2 <int_reg_update_uart+0x76>
			if ((int_reg_config[i].i_MIN > i_data) || (int_reg_config[i].i_MAX < i_data)){
 8007178:	4a17      	ldr	r2, [pc, #92]	; (80071d8 <int_reg_update_uart+0x8c>)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	011b      	lsls	r3, r3, #4
 800717e:	4413      	add	r3, r2
 8007180:	3308      	adds	r3, #8
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	429a      	cmp	r2, r3
 8007188:	db08      	blt.n	800719c <int_reg_update_uart+0x50>
 800718a:	4a13      	ldr	r2, [pc, #76]	; (80071d8 <int_reg_update_uart+0x8c>)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	011b      	lsls	r3, r3, #4
 8007190:	4413      	add	r3, r2
 8007192:	330c      	adds	r3, #12
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	429a      	cmp	r2, r3
 800719a:	dd01      	ble.n	80071a0 <int_reg_update_uart+0x54>
				return STR_INVALID_VALUE;
 800719c:	4b0f      	ldr	r3, [pc, #60]	; (80071dc <int_reg_update_uart+0x90>)
 800719e:	e017      	b.n	80071d0 <int_reg_update_uart+0x84>
			}
			else{
				__int_reg[i] = i_data;
 80071a0:	490f      	ldr	r1, [pc, #60]	; (80071e0 <int_reg_update_uart+0x94>)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                sprintf(response, "%s set to %d\r\n", int_reg_config[i].name, i_data);
 80071aa:	4a0b      	ldr	r2, [pc, #44]	; (80071d8 <int_reg_update_uart+0x8c>)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	011b      	lsls	r3, r3, #4
 80071b0:	4413      	add	r3, r2
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	490b      	ldr	r1, [pc, #44]	; (80071e4 <int_reg_update_uart+0x98>)
 80071b8:	480b      	ldr	r0, [pc, #44]	; (80071e8 <int_reg_update_uart+0x9c>)
 80071ba:	f005 ff0b 	bl	800cfd4 <siprintf>
				return response;
 80071be:	4b0a      	ldr	r3, [pc, #40]	; (80071e8 <int_reg_update_uart+0x9c>)
 80071c0:	e006      	b.n	80071d0 <int_reg_update_uart+0x84>
	for (int i=0; i<INT_REG_LENGTH; i++){
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	3301      	adds	r3, #1
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2bff      	cmp	r3, #255	; 0xff
 80071cc:	ddcb      	ble.n	8007166 <int_reg_update_uart+0x1a>
			}
		}
	}
	return STR_INVALID_CMD;
 80071ce:	4b07      	ldr	r3, [pc, #28]	; (80071ec <int_reg_update_uart+0xa0>)
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	20009a5c 	.word	0x20009a5c
 80071dc:	08011530 	.word	0x08011530
 80071e0:	20009074 	.word	0x20009074
 80071e4:	0801156c 	.word	0x0801156c
 80071e8:	200002bc 	.word	0x200002bc
 80071ec:	08011554 	.word	0x08011554

080071f0 <int_reg_update_can>:

int int_reg_update_can(int addr, int i_data){
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af02      	add	r7, sp, #8
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
	if (addr < 0 || addr >= INT_REG_LENGTH){
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	db02      	blt.n	8007206 <int_reg_update_can+0x16>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2bff      	cmp	r3, #255	; 0xff
 8007204:	dd01      	ble.n	800720a <int_reg_update_can+0x1a>
		return CODE_INVALID_ADDR;
 8007206:	2303      	movs	r3, #3
 8007208:	e04b      	b.n	80072a2 <int_reg_update_can+0xb2>
	}
	else if (int_reg_config[addr].cmd == ' '){
 800720a:	4a28      	ldr	r2, [pc, #160]	; (80072ac <int_reg_update_can+0xbc>)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	011b      	lsls	r3, r3, #4
 8007210:	4413      	add	r3, r2
 8007212:	3304      	adds	r3, #4
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	2b20      	cmp	r3, #32
 8007218:	d101      	bne.n	800721e <int_reg_update_can+0x2e>
		return CODE_READ_ONLY;
 800721a:	2302      	movs	r3, #2
 800721c:	e041      	b.n	80072a2 <int_reg_update_can+0xb2>
	}
	else if (((int_reg_config[addr].i_MIN > i_data) || (int_reg_config[addr].i_MAX < i_data)) ||
 800721e:	4a23      	ldr	r2, [pc, #140]	; (80072ac <int_reg_update_can+0xbc>)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	011b      	lsls	r3, r3, #4
 8007224:	4413      	add	r3, r2
 8007226:	3308      	adds	r3, #8
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	429a      	cmp	r2, r3
 800722e:	db0e      	blt.n	800724e <int_reg_update_can+0x5e>
 8007230:	4a1e      	ldr	r2, [pc, #120]	; (80072ac <int_reg_update_can+0xbc>)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	011b      	lsls	r3, r3, #4
 8007236:	4413      	add	r3, r2
 8007238:	330c      	adds	r3, #12
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	429a      	cmp	r2, r3
 8007240:	dc05      	bgt.n	800724e <int_reg_update_can+0x5e>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b06      	cmp	r3, #6
 8007246:	d104      	bne.n	8007252 <int_reg_update_can+0x62>
			((addr == ADDR_HALL_CAL_DIR) && (i_data == 0))){
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <int_reg_update_can+0x62>
		return CODE_INVALID_VALUE;
 800724e:	2301      	movs	r3, #1
 8007250:	e027      	b.n	80072a2 <int_reg_update_can+0xb2>
	}
	else{
		if (__int_reg[addr] != i_data){
 8007252:	4a17      	ldr	r2, [pc, #92]	; (80072b0 <int_reg_update_can+0xc0>)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	429a      	cmp	r2, r3
 800725e:	d01f      	beq.n	80072a0 <int_reg_update_can+0xb0>
			__int_reg[addr] = i_data;
 8007260:	4913      	ldr	r1, [pc, #76]	; (80072b0 <int_reg_update_can+0xc0>)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 800726a:	4b12      	ldr	r3, [pc, #72]	; (80072b4 <int_reg_update_can+0xc4>)
 800726c:	691a      	ldr	r2, [r3, #16]
 800726e:	9200      	str	r2, [sp, #0]
 8007270:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007272:	f7fe fb4f 	bl	8005914 <preference_writer_ready>
 8007276:	4603      	mov	r3, r0
 8007278:	f083 0301 	eor.w	r3, r3, #1
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b00      	cmp	r3, #0
 8007280:	d002      	beq.n	8007288 <int_reg_update_can+0x98>
 8007282:	480c      	ldr	r0, [pc, #48]	; (80072b4 <int_reg_update_can+0xc4>)
 8007284:	f7fe fb37 	bl	80058f6 <preference_writer_open>
			preference_writer_flush(&prefs);
 8007288:	480a      	ldr	r0, [pc, #40]	; (80072b4 <int_reg_update_can+0xc4>)
 800728a:	f7fe fb51 	bl	8005930 <preference_writer_flush>
			preference_writer_close(&prefs);
 800728e:	4809      	ldr	r0, [pc, #36]	; (80072b4 <int_reg_update_can+0xc4>)
 8007290:	f7fe fbcc 	bl	8005a2c <preference_writer_close>
			preference_writer_load(prefs);
 8007294:	4b07      	ldr	r3, [pc, #28]	; (80072b4 <int_reg_update_can+0xc4>)
 8007296:	691a      	ldr	r2, [r3, #16]
 8007298:	9200      	str	r2, [sp, #0]
 800729a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800729c:	f7fe fb84 	bl	80059a8 <preference_writer_load>
		}
		return CODE_CONFIG_SUCCESS;
 80072a0:	2300      	movs	r3, #0
	}
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	20009a5c 	.word	0x20009a5c
 80072b0:	20009074 	.word	0x20009074
 80072b4:	20000748 	.word	0x20000748

080072b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80072b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80072f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80072bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80072be:	e003      	b.n	80072c8 <LoopCopyDataInit>

080072c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80072c0:	4b0c      	ldr	r3, [pc, #48]	; (80072f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80072c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80072c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80072c6:	3104      	adds	r1, #4

080072c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80072c8:	480b      	ldr	r0, [pc, #44]	; (80072f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80072ca:	4b0c      	ldr	r3, [pc, #48]	; (80072fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80072cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80072ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80072d0:	d3f6      	bcc.n	80072c0 <CopyDataInit>
  ldr  r2, =_sbss
 80072d2:	4a0b      	ldr	r2, [pc, #44]	; (8007300 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80072d4:	e002      	b.n	80072dc <LoopFillZerobss>

080072d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80072d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80072d8:	f842 3b04 	str.w	r3, [r2], #4

080072dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80072dc:	4b09      	ldr	r3, [pc, #36]	; (8007304 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80072de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80072e0:	d3f9      	bcc.n	80072d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80072e2:	f7ff f97d 	bl	80065e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80072e6:	f005 f943 	bl	800c570 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80072ea:	f7fd fa45 	bl	8004778 <main>
  bx  lr    
 80072ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80072f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80072f4:	0801228c 	.word	0x0801228c
  ldr  r0, =_sdata
 80072f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80072fc:	20000220 	.word	0x20000220
  ldr  r2, =_sbss
 8007300:	20000220 	.word	0x20000220
  ldr  r3, = _ebss
 8007304:	2000aa70 	.word	0x2000aa70

08007308 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007308:	e7fe      	b.n	8007308 <ADC_IRQHandler>
	...

0800730c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007310:	4b0e      	ldr	r3, [pc, #56]	; (800734c <HAL_Init+0x40>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a0d      	ldr	r2, [pc, #52]	; (800734c <HAL_Init+0x40>)
 8007316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800731a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800731c:	4b0b      	ldr	r3, [pc, #44]	; (800734c <HAL_Init+0x40>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a0a      	ldr	r2, [pc, #40]	; (800734c <HAL_Init+0x40>)
 8007322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007326:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007328:	4b08      	ldr	r3, [pc, #32]	; (800734c <HAL_Init+0x40>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a07      	ldr	r2, [pc, #28]	; (800734c <HAL_Init+0x40>)
 800732e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007332:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007334:	2003      	movs	r0, #3
 8007336:	f001 fbb7 	bl	8008aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800733a:	2000      	movs	r0, #0
 800733c:	f000 f808 	bl	8007350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007340:	f7fe fd94 	bl	8005e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	40023c00 	.word	0x40023c00

08007350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007358:	4b12      	ldr	r3, [pc, #72]	; (80073a4 <HAL_InitTick+0x54>)
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	4b12      	ldr	r3, [pc, #72]	; (80073a8 <HAL_InitTick+0x58>)
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	4619      	mov	r1, r3
 8007362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007366:	fbb3 f3f1 	udiv	r3, r3, r1
 800736a:	fbb2 f3f3 	udiv	r3, r2, r3
 800736e:	4618      	mov	r0, r3
 8007370:	f001 fbcf 	bl	8008b12 <HAL_SYSTICK_Config>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e00e      	b.n	800739c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b0f      	cmp	r3, #15
 8007382:	d80a      	bhi.n	800739a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007384:	2200      	movs	r2, #0
 8007386:	6879      	ldr	r1, [r7, #4]
 8007388:	f04f 30ff 	mov.w	r0, #4294967295
 800738c:	f001 fb97 	bl	8008abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007390:	4a06      	ldr	r2, [pc, #24]	; (80073ac <HAL_InitTick+0x5c>)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007396:	2300      	movs	r3, #0
 8007398:	e000      	b.n	800739c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
}
 800739c:	4618      	mov	r0, r3
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	20000040 	.word	0x20000040
 80073a8:	20000048 	.word	0x20000048
 80073ac:	20000044 	.word	0x20000044

080073b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80073b0:	b480      	push	{r7}
 80073b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80073b4:	4b06      	ldr	r3, [pc, #24]	; (80073d0 <HAL_IncTick+0x20>)
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	461a      	mov	r2, r3
 80073ba:	4b06      	ldr	r3, [pc, #24]	; (80073d4 <HAL_IncTick+0x24>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4413      	add	r3, r2
 80073c0:	4a04      	ldr	r2, [pc, #16]	; (80073d4 <HAL_IncTick+0x24>)
 80073c2:	6013      	str	r3, [r2, #0]
}
 80073c4:	bf00      	nop
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	20000048 	.word	0x20000048
 80073d4:	2000aa5c 	.word	0x2000aa5c

080073d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80073d8:	b480      	push	{r7}
 80073da:	af00      	add	r7, sp, #0
  return uwTick;
 80073dc:	4b03      	ldr	r3, [pc, #12]	; (80073ec <HAL_GetTick+0x14>)
 80073de:	681b      	ldr	r3, [r3, #0]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	2000aa5c 	.word	0x2000aa5c

080073f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80073f8:	f7ff ffee 	bl	80073d8 <HAL_GetTick>
 80073fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007408:	d005      	beq.n	8007416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800740a:	4b0a      	ldr	r3, [pc, #40]	; (8007434 <HAL_Delay+0x44>)
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	461a      	mov	r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	4413      	add	r3, r2
 8007414:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007416:	bf00      	nop
 8007418:	f7ff ffde 	bl	80073d8 <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	429a      	cmp	r2, r3
 8007426:	d8f7      	bhi.n	8007418 <HAL_Delay+0x28>
  {
  }
}
 8007428:	bf00      	nop
 800742a:	bf00      	nop
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	20000048 	.word	0x20000048

08007438 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007440:	2300      	movs	r3, #0
 8007442:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d101      	bne.n	800744e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e033      	b.n	80074b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007452:	2b00      	cmp	r3, #0
 8007454:	d109      	bne.n	800746a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7f9 fef6 	bl	8001248 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746e:	f003 0310 	and.w	r3, r3, #16
 8007472:	2b00      	cmp	r3, #0
 8007474:	d118      	bne.n	80074a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800747e:	f023 0302 	bic.w	r3, r3, #2
 8007482:	f043 0202 	orr.w	r2, r3, #2
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fab4 	bl	80079f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749a:	f023 0303 	bic.w	r3, r3, #3
 800749e:	f043 0201 	orr.w	r2, r3, #1
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	641a      	str	r2, [r3, #64]	; 0x40
 80074a6:	e001      	b.n	80074ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
	...

080074c0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80074c8:	2300      	movs	r3, #0
 80074ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d101      	bne.n	80074da <HAL_ADC_Start+0x1a>
 80074d6:	2302      	movs	r3, #2
 80074d8:	e0b2      	b.n	8007640 <HAL_ADC_Start+0x180>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	f003 0301 	and.w	r3, r3, #1
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d018      	beq.n	8007522 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	689a      	ldr	r2, [r3, #8]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f042 0201 	orr.w	r2, r2, #1
 80074fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007500:	4b52      	ldr	r3, [pc, #328]	; (800764c <HAL_ADC_Start+0x18c>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a52      	ldr	r2, [pc, #328]	; (8007650 <HAL_ADC_Start+0x190>)
 8007506:	fba2 2303 	umull	r2, r3, r2, r3
 800750a:	0c9a      	lsrs	r2, r3, #18
 800750c:	4613      	mov	r3, r2
 800750e:	005b      	lsls	r3, r3, #1
 8007510:	4413      	add	r3, r2
 8007512:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007514:	e002      	b.n	800751c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	3b01      	subs	r3, #1
 800751a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1f9      	bne.n	8007516 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	2b01      	cmp	r3, #1
 800752e:	d17a      	bne.n	8007626 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007534:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007538:	f023 0301 	bic.w	r3, r3, #1
 800753c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800754e:	2b00      	cmp	r3, #0
 8007550:	d007      	beq.n	8007562 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007556:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800755a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007566:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800756a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800756e:	d106      	bne.n	800757e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007574:	f023 0206 	bic.w	r2, r3, #6
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	645a      	str	r2, [r3, #68]	; 0x44
 800757c:	e002      	b.n	8007584 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800758c:	4b31      	ldr	r3, [pc, #196]	; (8007654 <HAL_ADC_Start+0x194>)
 800758e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007598:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f003 031f 	and.w	r3, r3, #31
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d12a      	bne.n	80075fc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a2b      	ldr	r2, [pc, #172]	; (8007658 <HAL_ADC_Start+0x198>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d015      	beq.n	80075dc <HAL_ADC_Start+0x11c>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a29      	ldr	r2, [pc, #164]	; (800765c <HAL_ADC_Start+0x19c>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d105      	bne.n	80075c6 <HAL_ADC_Start+0x106>
 80075ba:	4b26      	ldr	r3, [pc, #152]	; (8007654 <HAL_ADC_Start+0x194>)
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f003 031f 	and.w	r3, r3, #31
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00a      	beq.n	80075dc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a25      	ldr	r2, [pc, #148]	; (8007660 <HAL_ADC_Start+0x1a0>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d136      	bne.n	800763e <HAL_ADC_Start+0x17e>
 80075d0:	4b20      	ldr	r3, [pc, #128]	; (8007654 <HAL_ADC_Start+0x194>)
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f003 0310 	and.w	r3, r3, #16
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d130      	bne.n	800763e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d129      	bne.n	800763e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689a      	ldr	r2, [r3, #8]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80075f8:	609a      	str	r2, [r3, #8]
 80075fa:	e020      	b.n	800763e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a15      	ldr	r2, [pc, #84]	; (8007658 <HAL_ADC_Start+0x198>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d11b      	bne.n	800763e <HAL_ADC_Start+0x17e>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d114      	bne.n	800763e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689a      	ldr	r2, [r3, #8]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007622:	609a      	str	r2, [r3, #8]
 8007624:	e00b      	b.n	800763e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762a:	f043 0210 	orr.w	r2, r3, #16
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007636:	f043 0201 	orr.w	r2, r3, #1
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	20000040 	.word	0x20000040
 8007650:	431bde83 	.word	0x431bde83
 8007654:	40012300 	.word	0x40012300
 8007658:	40012000 	.word	0x40012000
 800765c:	40012100 	.word	0x40012100
 8007660:	40012200 	.word	0x40012200

08007664 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800766e:	2300      	movs	r3, #0
 8007670:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800767c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007680:	d113      	bne.n	80076aa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800768c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007690:	d10b      	bne.n	80076aa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007696:	f043 0220 	orr.w	r2, r3, #32
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e063      	b.n	8007772 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80076aa:	f7ff fe95 	bl	80073d8 <HAL_GetTick>
 80076ae:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80076b0:	e021      	b.n	80076f6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b8:	d01d      	beq.n	80076f6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d007      	beq.n	80076d0 <HAL_ADC_PollForConversion+0x6c>
 80076c0:	f7ff fe8a 	bl	80073d8 <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	683a      	ldr	r2, [r7, #0]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d212      	bcs.n	80076f6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0302 	and.w	r3, r3, #2
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d00b      	beq.n	80076f6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e2:	f043 0204 	orr.w	r2, r3, #4
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	e03d      	b.n	8007772 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0302 	and.w	r3, r3, #2
 8007700:	2b02      	cmp	r3, #2
 8007702:	d1d6      	bne.n	80076b2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f06f 0212 	mvn.w	r2, #18
 800770c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007712:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007724:	2b00      	cmp	r3, #0
 8007726:	d123      	bne.n	8007770 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800772c:	2b00      	cmp	r3, #0
 800772e:	d11f      	bne.n	8007770 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007736:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800773a:	2b00      	cmp	r3, #0
 800773c:	d006      	beq.n	800774c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007748:	2b00      	cmp	r3, #0
 800774a:	d111      	bne.n	8007770 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007750:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d105      	bne.n	8007770 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007768:	f043 0201 	orr.w	r2, r3, #1
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800777a:	b480      	push	{r7}
 800777c:	b083      	sub	sp, #12
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8007788:	4618      	mov	r0, r3
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800779e:	2300      	movs	r3, #0
 80077a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d101      	bne.n	80077b0 <HAL_ADC_ConfigChannel+0x1c>
 80077ac:	2302      	movs	r3, #2
 80077ae:	e113      	b.n	80079d8 <HAL_ADC_ConfigChannel+0x244>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2b09      	cmp	r3, #9
 80077be:	d925      	bls.n	800780c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68d9      	ldr	r1, [r3, #12]
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	461a      	mov	r2, r3
 80077ce:	4613      	mov	r3, r2
 80077d0:	005b      	lsls	r3, r3, #1
 80077d2:	4413      	add	r3, r2
 80077d4:	3b1e      	subs	r3, #30
 80077d6:	2207      	movs	r2, #7
 80077d8:	fa02 f303 	lsl.w	r3, r2, r3
 80077dc:	43da      	mvns	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	400a      	ands	r2, r1
 80077e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68d9      	ldr	r1, [r3, #12]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	689a      	ldr	r2, [r3, #8]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	4618      	mov	r0, r3
 80077f8:	4603      	mov	r3, r0
 80077fa:	005b      	lsls	r3, r3, #1
 80077fc:	4403      	add	r3, r0
 80077fe:	3b1e      	subs	r3, #30
 8007800:	409a      	lsls	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	430a      	orrs	r2, r1
 8007808:	60da      	str	r2, [r3, #12]
 800780a:	e022      	b.n	8007852 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6919      	ldr	r1, [r3, #16]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	b29b      	uxth	r3, r3
 8007818:	461a      	mov	r2, r3
 800781a:	4613      	mov	r3, r2
 800781c:	005b      	lsls	r3, r3, #1
 800781e:	4413      	add	r3, r2
 8007820:	2207      	movs	r2, #7
 8007822:	fa02 f303 	lsl.w	r3, r2, r3
 8007826:	43da      	mvns	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	400a      	ands	r2, r1
 800782e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6919      	ldr	r1, [r3, #16]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	689a      	ldr	r2, [r3, #8]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	b29b      	uxth	r3, r3
 8007840:	4618      	mov	r0, r3
 8007842:	4603      	mov	r3, r0
 8007844:	005b      	lsls	r3, r3, #1
 8007846:	4403      	add	r3, r0
 8007848:	409a      	lsls	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	2b06      	cmp	r3, #6
 8007858:	d824      	bhi.n	80078a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	685a      	ldr	r2, [r3, #4]
 8007864:	4613      	mov	r3, r2
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	4413      	add	r3, r2
 800786a:	3b05      	subs	r3, #5
 800786c:	221f      	movs	r2, #31
 800786e:	fa02 f303 	lsl.w	r3, r2, r3
 8007872:	43da      	mvns	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	400a      	ands	r2, r1
 800787a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	b29b      	uxth	r3, r3
 8007888:	4618      	mov	r0, r3
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	685a      	ldr	r2, [r3, #4]
 800788e:	4613      	mov	r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4413      	add	r3, r2
 8007894:	3b05      	subs	r3, #5
 8007896:	fa00 f203 	lsl.w	r2, r0, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	430a      	orrs	r2, r1
 80078a0:	635a      	str	r2, [r3, #52]	; 0x34
 80078a2:	e04c      	b.n	800793e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	2b0c      	cmp	r3, #12
 80078aa:	d824      	bhi.n	80078f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	685a      	ldr	r2, [r3, #4]
 80078b6:	4613      	mov	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4413      	add	r3, r2
 80078bc:	3b23      	subs	r3, #35	; 0x23
 80078be:	221f      	movs	r2, #31
 80078c0:	fa02 f303 	lsl.w	r3, r2, r3
 80078c4:	43da      	mvns	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	400a      	ands	r2, r1
 80078cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	b29b      	uxth	r3, r3
 80078da:	4618      	mov	r0, r3
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	685a      	ldr	r2, [r3, #4]
 80078e0:	4613      	mov	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4413      	add	r3, r2
 80078e6:	3b23      	subs	r3, #35	; 0x23
 80078e8:	fa00 f203 	lsl.w	r2, r0, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	430a      	orrs	r2, r1
 80078f2:	631a      	str	r2, [r3, #48]	; 0x30
 80078f4:	e023      	b.n	800793e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	685a      	ldr	r2, [r3, #4]
 8007900:	4613      	mov	r3, r2
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	4413      	add	r3, r2
 8007906:	3b41      	subs	r3, #65	; 0x41
 8007908:	221f      	movs	r2, #31
 800790a:	fa02 f303 	lsl.w	r3, r2, r3
 800790e:	43da      	mvns	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	400a      	ands	r2, r1
 8007916:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	b29b      	uxth	r3, r3
 8007924:	4618      	mov	r0, r3
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	685a      	ldr	r2, [r3, #4]
 800792a:	4613      	mov	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	3b41      	subs	r3, #65	; 0x41
 8007932:	fa00 f203 	lsl.w	r2, r0, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	430a      	orrs	r2, r1
 800793c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800793e:	4b29      	ldr	r3, [pc, #164]	; (80079e4 <HAL_ADC_ConfigChannel+0x250>)
 8007940:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a28      	ldr	r2, [pc, #160]	; (80079e8 <HAL_ADC_ConfigChannel+0x254>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d10f      	bne.n	800796c <HAL_ADC_ConfigChannel+0x1d8>
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b12      	cmp	r3, #18
 8007952:	d10b      	bne.n	800796c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a1d      	ldr	r2, [pc, #116]	; (80079e8 <HAL_ADC_ConfigChannel+0x254>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d12b      	bne.n	80079ce <HAL_ADC_ConfigChannel+0x23a>
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a1c      	ldr	r2, [pc, #112]	; (80079ec <HAL_ADC_ConfigChannel+0x258>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d003      	beq.n	8007988 <HAL_ADC_ConfigChannel+0x1f4>
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b11      	cmp	r3, #17
 8007986:	d122      	bne.n	80079ce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a11      	ldr	r2, [pc, #68]	; (80079ec <HAL_ADC_ConfigChannel+0x258>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d111      	bne.n	80079ce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80079aa:	4b11      	ldr	r3, [pc, #68]	; (80079f0 <HAL_ADC_ConfigChannel+0x25c>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a11      	ldr	r2, [pc, #68]	; (80079f4 <HAL_ADC_ConfigChannel+0x260>)
 80079b0:	fba2 2303 	umull	r2, r3, r2, r3
 80079b4:	0c9a      	lsrs	r2, r3, #18
 80079b6:	4613      	mov	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	4413      	add	r3, r2
 80079bc:	005b      	lsls	r3, r3, #1
 80079be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80079c0:	e002      	b.n	80079c8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	3b01      	subs	r3, #1
 80079c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1f9      	bne.n	80079c2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3714      	adds	r7, #20
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	40012300 	.word	0x40012300
 80079e8:	40012000 	.word	0x40012000
 80079ec:	10000012 	.word	0x10000012
 80079f0:	20000040 	.word	0x20000040
 80079f4:	431bde83 	.word	0x431bde83

080079f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007a00:	4b79      	ldr	r3, [pc, #484]	; (8007be8 <ADC_Init+0x1f0>)
 8007a02:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	685a      	ldr	r2, [r3, #4]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	431a      	orrs	r2, r3
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	685a      	ldr	r2, [r3, #4]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	6859      	ldr	r1, [r3, #4]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	021a      	lsls	r2, r3, #8
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007a50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	6859      	ldr	r1, [r3, #4]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	689a      	ldr	r2, [r3, #8]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	430a      	orrs	r2, r1
 8007a62:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689a      	ldr	r2, [r3, #8]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	6899      	ldr	r1, [r3, #8]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	68da      	ldr	r2, [r3, #12]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	430a      	orrs	r2, r1
 8007a84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8a:	4a58      	ldr	r2, [pc, #352]	; (8007bec <ADC_Init+0x1f4>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d022      	beq.n	8007ad6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	689a      	ldr	r2, [r3, #8]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007a9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6899      	ldr	r1, [r3, #8]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	689a      	ldr	r2, [r3, #8]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007ac0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6899      	ldr	r1, [r3, #8]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	430a      	orrs	r2, r1
 8007ad2:	609a      	str	r2, [r3, #8]
 8007ad4:	e00f      	b.n	8007af6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	689a      	ldr	r2, [r3, #8]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007ae4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	689a      	ldr	r2, [r3, #8]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007af4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	689a      	ldr	r2, [r3, #8]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f022 0202 	bic.w	r2, r2, #2
 8007b04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	6899      	ldr	r1, [r3, #8]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	7e1b      	ldrb	r3, [r3, #24]
 8007b10:	005a      	lsls	r2, r3, #1
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d01b      	beq.n	8007b5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	685a      	ldr	r2, [r3, #4]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b32:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	685a      	ldr	r2, [r3, #4]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007b42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6859      	ldr	r1, [r3, #4]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	035a      	lsls	r2, r3, #13
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	430a      	orrs	r2, r1
 8007b58:	605a      	str	r2, [r3, #4]
 8007b5a:	e007      	b.n	8007b6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685a      	ldr	r2, [r3, #4]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	69db      	ldr	r3, [r3, #28]
 8007b86:	3b01      	subs	r3, #1
 8007b88:	051a      	lsls	r2, r3, #20
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	430a      	orrs	r2, r1
 8007b90:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	689a      	ldr	r2, [r3, #8]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007ba0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	6899      	ldr	r1, [r3, #8]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007bae:	025a      	lsls	r2, r3, #9
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	430a      	orrs	r2, r1
 8007bb6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	689a      	ldr	r2, [r3, #8]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6899      	ldr	r1, [r3, #8]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	029a      	lsls	r2, r3, #10
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	609a      	str	r2, [r3, #8]
}
 8007bdc:	bf00      	nop
 8007bde:	3714      	adds	r7, #20
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	40012300 	.word	0x40012300
 8007bec:	0f000001 	.word	0x0f000001

08007bf0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d101      	bne.n	8007c08 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8007c04:	2302      	movs	r3, #2
 8007c06:	e031      	b.n	8007c6c <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007c10:	4b19      	ldr	r3, [pc, #100]	; (8007c78 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8007c12:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	f023 021f 	bic.w	r2, r3, #31
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	431a      	orrs	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	431a      	orrs	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	685a      	ldr	r2, [r3, #4]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	431a      	orrs	r2, r3
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr
 8007c78:	40012300 	.word	0x40012300

08007c7c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d101      	bne.n	8007c8e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e0ed      	b.n	8007e6a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d102      	bne.n	8007ca0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7f9 ff7c 	bl	8001b98 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f022 0202 	bic.w	r2, r2, #2
 8007cae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007cb0:	f7ff fb92 	bl	80073d8 <HAL_GetTick>
 8007cb4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007cb6:	e012      	b.n	8007cde <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007cb8:	f7ff fb8e 	bl	80073d8 <HAL_GetTick>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	2b0a      	cmp	r3, #10
 8007cc4:	d90b      	bls.n	8007cde <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2205      	movs	r2, #5
 8007cd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e0c5      	b.n	8007e6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	f003 0302 	and.w	r3, r3, #2
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1e5      	bne.n	8007cb8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f042 0201 	orr.w	r2, r2, #1
 8007cfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007cfc:	f7ff fb6c 	bl	80073d8 <HAL_GetTick>
 8007d00:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007d02:	e012      	b.n	8007d2a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007d04:	f7ff fb68 	bl	80073d8 <HAL_GetTick>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	2b0a      	cmp	r3, #10
 8007d10:	d90b      	bls.n	8007d2a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2205      	movs	r2, #5
 8007d22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e09f      	b.n	8007e6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d0e5      	beq.n	8007d04 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	7e1b      	ldrb	r3, [r3, #24]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d108      	bne.n	8007d52 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d4e:	601a      	str	r2, [r3, #0]
 8007d50:	e007      	b.n	8007d62 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	7e5b      	ldrb	r3, [r3, #25]
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d108      	bne.n	8007d7c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d78:	601a      	str	r2, [r3, #0]
 8007d7a:	e007      	b.n	8007d8c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	7e9b      	ldrb	r3, [r3, #26]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d108      	bne.n	8007da6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f042 0220 	orr.w	r2, r2, #32
 8007da2:	601a      	str	r2, [r3, #0]
 8007da4:	e007      	b.n	8007db6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f022 0220 	bic.w	r2, r2, #32
 8007db4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	7edb      	ldrb	r3, [r3, #27]
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d108      	bne.n	8007dd0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f022 0210 	bic.w	r2, r2, #16
 8007dcc:	601a      	str	r2, [r3, #0]
 8007dce:	e007      	b.n	8007de0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f042 0210 	orr.w	r2, r2, #16
 8007dde:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	7f1b      	ldrb	r3, [r3, #28]
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d108      	bne.n	8007dfa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f042 0208 	orr.w	r2, r2, #8
 8007df6:	601a      	str	r2, [r3, #0]
 8007df8:	e007      	b.n	8007e0a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 0208 	bic.w	r2, r2, #8
 8007e08:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	7f5b      	ldrb	r3, [r3, #29]
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d108      	bne.n	8007e24 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f042 0204 	orr.w	r2, r2, #4
 8007e20:	601a      	str	r2, [r3, #0]
 8007e22:	e007      	b.n	8007e34 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f022 0204 	bic.w	r2, r2, #4
 8007e32:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	689a      	ldr	r2, [r3, #8]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	431a      	orrs	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	695b      	ldr	r3, [r3, #20]
 8007e48:	ea42 0103 	orr.w	r1, r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	1e5a      	subs	r2, r3, #1
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	430a      	orrs	r2, r1
 8007e58:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
	...

08007e74 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b087      	sub	sp, #28
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e8a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007e8c:	7cfb      	ldrb	r3, [r7, #19]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d003      	beq.n	8007e9a <HAL_CAN_ConfigFilter+0x26>
 8007e92:	7cfb      	ldrb	r3, [r7, #19]
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	f040 80be 	bne.w	8008016 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8007e9a:	4b65      	ldr	r3, [pc, #404]	; (8008030 <HAL_CAN_ConfigFilter+0x1bc>)
 8007e9c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ea4:	f043 0201 	orr.w	r2, r3, #1
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007eb4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec8:	021b      	lsls	r3, r3, #8
 8007eca:	431a      	orrs	r2, r3
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	f003 031f 	and.w	r3, r3, #31
 8007eda:	2201      	movs	r2, #1
 8007edc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	43db      	mvns	r3, r3
 8007eec:	401a      	ands	r2, r3
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	69db      	ldr	r3, [r3, #28]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d123      	bne.n	8007f44 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	43db      	mvns	r3, r3
 8007f06:	401a      	ands	r2, r3
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007f1e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	3248      	adds	r2, #72	; 0x48
 8007f24:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007f38:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007f3a:	6979      	ldr	r1, [r7, #20]
 8007f3c:	3348      	adds	r3, #72	; 0x48
 8007f3e:	00db      	lsls	r3, r3, #3
 8007f40:	440b      	add	r3, r1
 8007f42:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	69db      	ldr	r3, [r3, #28]
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d122      	bne.n	8007f92 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	431a      	orrs	r2, r3
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007f68:	683a      	ldr	r2, [r7, #0]
 8007f6a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007f6c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	3248      	adds	r2, #72	; 0x48
 8007f72:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007f86:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007f88:	6979      	ldr	r1, [r7, #20]
 8007f8a:	3348      	adds	r3, #72	; 0x48
 8007f8c:	00db      	lsls	r3, r3, #3
 8007f8e:	440b      	add	r3, r1
 8007f90:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d109      	bne.n	8007fae <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	43db      	mvns	r3, r3
 8007fa4:	401a      	ands	r2, r3
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007fac:	e007      	b.n	8007fbe <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	431a      	orrs	r2, r3
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d109      	bne.n	8007fda <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	43db      	mvns	r3, r3
 8007fd0:	401a      	ands	r2, r3
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007fd8:	e007      	b.n	8007fea <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	431a      	orrs	r2, r3
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d107      	bne.n	8008002 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	431a      	orrs	r2, r3
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008008:	f023 0201 	bic.w	r2, r3, #1
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8008012:	2300      	movs	r3, #0
 8008014:	e006      	b.n	8008024 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008022:	2301      	movs	r3, #1
  }
}
 8008024:	4618      	mov	r0, r3
 8008026:	371c      	adds	r7, #28
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr
 8008030:	40006400 	.word	0x40006400

08008034 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008042:	b2db      	uxtb	r3, r3
 8008044:	2b01      	cmp	r3, #1
 8008046:	d12e      	bne.n	80080a6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2202      	movs	r2, #2
 800804c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f022 0201 	bic.w	r2, r2, #1
 800805e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008060:	f7ff f9ba 	bl	80073d8 <HAL_GetTick>
 8008064:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8008066:	e012      	b.n	800808e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008068:	f7ff f9b6 	bl	80073d8 <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	2b0a      	cmp	r3, #10
 8008074:	d90b      	bls.n	800808e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2205      	movs	r2, #5
 8008086:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e012      	b.n	80080b4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	f003 0301 	and.w	r3, r3, #1
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1e5      	bne.n	8008068 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	e006      	b.n	80080b4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
  }
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80080bc:	b480      	push	{r7}
 80080be:	b089      	sub	sp, #36	; 0x24
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	607a      	str	r2, [r7, #4]
 80080c8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80080d0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80080da:	7ffb      	ldrb	r3, [r7, #31]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d003      	beq.n	80080e8 <HAL_CAN_AddTxMessage+0x2c>
 80080e0:	7ffb      	ldrb	r3, [r7, #31]
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	f040 80b8 	bne.w	8008258 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10a      	bne.n	8008108 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d105      	bne.n	8008108 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8008102:	2b00      	cmp	r3, #0
 8008104:	f000 80a0 	beq.w	8008248 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	0e1b      	lsrs	r3, r3, #24
 800810c:	f003 0303 	and.w	r3, r3, #3
 8008110:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	2b02      	cmp	r3, #2
 8008116:	d907      	bls.n	8008128 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	e09e      	b.n	8008266 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8008128:	2201      	movs	r2, #1
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	409a      	lsls	r2, r3
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10d      	bne.n	8008156 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8008144:	68f9      	ldr	r1, [r7, #12]
 8008146:	6809      	ldr	r1, [r1, #0]
 8008148:	431a      	orrs	r2, r3
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	3318      	adds	r3, #24
 800814e:	011b      	lsls	r3, r3, #4
 8008150:	440b      	add	r3, r1
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	e00f      	b.n	8008176 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008160:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008166:	68f9      	ldr	r1, [r7, #12]
 8008168:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800816a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	3318      	adds	r3, #24
 8008170:	011b      	lsls	r3, r3, #4
 8008172:	440b      	add	r3, r1
 8008174:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6819      	ldr	r1, [r3, #0]
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	691a      	ldr	r2, [r3, #16]
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	3318      	adds	r3, #24
 8008182:	011b      	lsls	r3, r3, #4
 8008184:	440b      	add	r3, r1
 8008186:	3304      	adds	r3, #4
 8008188:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	7d1b      	ldrb	r3, [r3, #20]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d111      	bne.n	80081b6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	3318      	adds	r3, #24
 800819a:	011b      	lsls	r3, r3, #4
 800819c:	4413      	add	r3, r2
 800819e:	3304      	adds	r3, #4
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	6811      	ldr	r1, [r2, #0]
 80081a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	3318      	adds	r3, #24
 80081ae:	011b      	lsls	r3, r3, #4
 80081b0:	440b      	add	r3, r1
 80081b2:	3304      	adds	r3, #4
 80081b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	3307      	adds	r3, #7
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	061a      	lsls	r2, r3, #24
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	3306      	adds	r3, #6
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	041b      	lsls	r3, r3, #16
 80081c6:	431a      	orrs	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	3305      	adds	r3, #5
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	021b      	lsls	r3, r3, #8
 80081d0:	4313      	orrs	r3, r2
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	3204      	adds	r2, #4
 80081d6:	7812      	ldrb	r2, [r2, #0]
 80081d8:	4610      	mov	r0, r2
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	6811      	ldr	r1, [r2, #0]
 80081de:	ea43 0200 	orr.w	r2, r3, r0
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	011b      	lsls	r3, r3, #4
 80081e6:	440b      	add	r3, r1
 80081e8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80081ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	3303      	adds	r3, #3
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	061a      	lsls	r2, r3, #24
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	3302      	adds	r3, #2
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	041b      	lsls	r3, r3, #16
 80081fe:	431a      	orrs	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	3301      	adds	r3, #1
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	021b      	lsls	r3, r3, #8
 8008208:	4313      	orrs	r3, r2
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	7812      	ldrb	r2, [r2, #0]
 800820e:	4610      	mov	r0, r2
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	6811      	ldr	r1, [r2, #0]
 8008214:	ea43 0200 	orr.w	r2, r3, r0
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	011b      	lsls	r3, r3, #4
 800821c:	440b      	add	r3, r1
 800821e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8008222:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	3318      	adds	r3, #24
 800822c:	011b      	lsls	r3, r3, #4
 800822e:	4413      	add	r3, r2
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	6811      	ldr	r1, [r2, #0]
 8008236:	f043 0201 	orr.w	r2, r3, #1
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	3318      	adds	r3, #24
 800823e:	011b      	lsls	r3, r3, #4
 8008240:	440b      	add	r3, r1
 8008242:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8008244:	2300      	movs	r3, #0
 8008246:	e00e      	b.n	8008266 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	e006      	b.n	8008266 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
  }
}
 8008266:	4618      	mov	r0, r3
 8008268:	3724      	adds	r7, #36	; 0x24
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr

08008272 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8008272:	b480      	push	{r7}
 8008274:	b087      	sub	sp, #28
 8008276:	af00      	add	r7, sp, #0
 8008278:	60f8      	str	r0, [r7, #12]
 800827a:	60b9      	str	r1, [r7, #8]
 800827c:	607a      	str	r2, [r7, #4]
 800827e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008286:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8008288:	7dfb      	ldrb	r3, [r7, #23]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d003      	beq.n	8008296 <HAL_CAN_GetRxMessage+0x24>
 800828e:	7dfb      	ldrb	r3, [r7, #23]
 8008290:	2b02      	cmp	r3, #2
 8008292:	f040 80f3 	bne.w	800847c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d10e      	bne.n	80082ba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	f003 0303 	and.w	r3, r3, #3
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d116      	bne.n	80082d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e0e7      	b.n	800848a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	f003 0303 	and.w	r3, r3, #3
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d107      	bne.n	80082d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	e0d8      	b.n	800848a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	331b      	adds	r3, #27
 80082e0:	011b      	lsls	r3, r3, #4
 80082e2:	4413      	add	r3, r2
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 0204 	and.w	r2, r3, #4
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d10c      	bne.n	8008310 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	331b      	adds	r3, #27
 80082fe:	011b      	lsls	r3, r3, #4
 8008300:	4413      	add	r3, r2
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	0d5b      	lsrs	r3, r3, #21
 8008306:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	601a      	str	r2, [r3, #0]
 800830e:	e00b      	b.n	8008328 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	331b      	adds	r3, #27
 8008318:	011b      	lsls	r3, r3, #4
 800831a:	4413      	add	r3, r2
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	08db      	lsrs	r3, r3, #3
 8008320:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	331b      	adds	r3, #27
 8008330:	011b      	lsls	r3, r3, #4
 8008332:	4413      	add	r3, r2
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 0202 	and.w	r2, r3, #2
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	331b      	adds	r3, #27
 8008346:	011b      	lsls	r3, r3, #4
 8008348:	4413      	add	r3, r2
 800834a:	3304      	adds	r3, #4
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 020f 	and.w	r2, r3, #15
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	331b      	adds	r3, #27
 800835e:	011b      	lsls	r3, r3, #4
 8008360:	4413      	add	r3, r2
 8008362:	3304      	adds	r3, #4
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	0a1b      	lsrs	r3, r3, #8
 8008368:	b2da      	uxtb	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	331b      	adds	r3, #27
 8008376:	011b      	lsls	r3, r3, #4
 8008378:	4413      	add	r3, r2
 800837a:	3304      	adds	r3, #4
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	0c1b      	lsrs	r3, r3, #16
 8008380:	b29a      	uxth	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	011b      	lsls	r3, r3, #4
 800838e:	4413      	add	r3, r2
 8008390:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	b2da      	uxtb	r2, r3
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	011b      	lsls	r3, r3, #4
 80083a4:	4413      	add	r3, r2
 80083a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	0a1a      	lsrs	r2, r3, #8
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	3301      	adds	r3, #1
 80083b2:	b2d2      	uxtb	r2, r2
 80083b4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	011b      	lsls	r3, r3, #4
 80083be:	4413      	add	r3, r2
 80083c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	0c1a      	lsrs	r2, r3, #16
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	3302      	adds	r3, #2
 80083cc:	b2d2      	uxtb	r2, r2
 80083ce:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	011b      	lsls	r3, r3, #4
 80083d8:	4413      	add	r3, r2
 80083da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	0e1a      	lsrs	r2, r3, #24
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	3303      	adds	r3, #3
 80083e6:	b2d2      	uxtb	r2, r2
 80083e8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	011b      	lsls	r3, r3, #4
 80083f2:	4413      	add	r3, r2
 80083f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	3304      	adds	r3, #4
 80083fe:	b2d2      	uxtb	r2, r2
 8008400:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	011b      	lsls	r3, r3, #4
 800840a:	4413      	add	r3, r2
 800840c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	0a1a      	lsrs	r2, r3, #8
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	3305      	adds	r3, #5
 8008418:	b2d2      	uxtb	r2, r2
 800841a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	011b      	lsls	r3, r3, #4
 8008424:	4413      	add	r3, r2
 8008426:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	0c1a      	lsrs	r2, r3, #16
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	3306      	adds	r3, #6
 8008432:	b2d2      	uxtb	r2, r2
 8008434:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	011b      	lsls	r3, r3, #4
 800843e:	4413      	add	r3, r2
 8008440:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	0e1a      	lsrs	r2, r3, #24
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	3307      	adds	r3, #7
 800844c:	b2d2      	uxtb	r2, r2
 800844e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d108      	bne.n	8008468 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68da      	ldr	r2, [r3, #12]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f042 0220 	orr.w	r2, r2, #32
 8008464:	60da      	str	r2, [r3, #12]
 8008466:	e007      	b.n	8008478 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	691a      	ldr	r2, [r3, #16]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f042 0220 	orr.w	r2, r2, #32
 8008476:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8008478:	2300      	movs	r3, #0
 800847a:	e006      	b.n	800848a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008480:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008488:	2301      	movs	r3, #1
  }
}
 800848a:	4618      	mov	r0, r3
 800848c:	371c      	adds	r7, #28
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr

08008496 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b08a      	sub	sp, #40	; 0x28
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800849e:	2300      	movs	r3, #0
 80084a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	695b      	ldr	r3, [r3, #20]
 80084a8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80084d2:	6a3b      	ldr	r3, [r7, #32]
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d07c      	beq.n	80085d6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	f003 0301 	and.w	r3, r3, #1
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d023      	beq.n	800852e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2201      	movs	r2, #1
 80084ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	f003 0302 	and.w	r3, r3, #2
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d003      	beq.n	8008500 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 f983 	bl	8008804 <HAL_CAN_TxMailbox0CompleteCallback>
 80084fe:	e016      	b.n	800852e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	f003 0304 	and.w	r3, r3, #4
 8008506:	2b00      	cmp	r3, #0
 8008508:	d004      	beq.n	8008514 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008510:	627b      	str	r3, [r7, #36]	; 0x24
 8008512:	e00c      	b.n	800852e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	f003 0308 	and.w	r3, r3, #8
 800851a:	2b00      	cmp	r3, #0
 800851c:	d004      	beq.n	8008528 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800851e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008520:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008524:	627b      	str	r3, [r7, #36]	; 0x24
 8008526:	e002      	b.n	800852e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 f989 	bl	8008840 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008534:	2b00      	cmp	r3, #0
 8008536:	d024      	beq.n	8008582 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008540:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008548:	2b00      	cmp	r3, #0
 800854a:	d003      	beq.n	8008554 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f963 	bl	8008818 <HAL_CAN_TxMailbox1CompleteCallback>
 8008552:	e016      	b.n	8008582 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800855a:	2b00      	cmp	r3, #0
 800855c:	d004      	beq.n	8008568 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800855e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008560:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008564:	627b      	str	r3, [r7, #36]	; 0x24
 8008566:	e00c      	b.n	8008582 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800856e:	2b00      	cmp	r3, #0
 8008570:	d004      	beq.n	800857c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8008572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008578:	627b      	str	r3, [r7, #36]	; 0x24
 800857a:	e002      	b.n	8008582 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 f969 	bl	8008854 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008588:	2b00      	cmp	r3, #0
 800858a:	d024      	beq.n	80085d6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008594:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800859c:	2b00      	cmp	r3, #0
 800859e:	d003      	beq.n	80085a8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 f943 	bl	800882c <HAL_CAN_TxMailbox2CompleteCallback>
 80085a6:	e016      	b.n	80085d6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d004      	beq.n	80085bc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80085b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085b8:	627b      	str	r3, [r7, #36]	; 0x24
 80085ba:	e00c      	b.n	80085d6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d004      	beq.n	80085d0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80085c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085cc:	627b      	str	r3, [r7, #36]	; 0x24
 80085ce:	e002      	b.n	80085d6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f949 	bl	8008868 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80085d6:	6a3b      	ldr	r3, [r7, #32]
 80085d8:	f003 0308 	and.w	r3, r3, #8
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00c      	beq.n	80085fa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	f003 0310 	and.w	r3, r3, #16
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d007      	beq.n	80085fa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80085ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80085f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2210      	movs	r2, #16
 80085f8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80085fa:	6a3b      	ldr	r3, [r7, #32]
 80085fc:	f003 0304 	and.w	r3, r3, #4
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00b      	beq.n	800861c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	f003 0308 	and.w	r3, r3, #8
 800860a:	2b00      	cmp	r3, #0
 800860c:	d006      	beq.n	800861c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2208      	movs	r2, #8
 8008614:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f93a 	bl	8008890 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800861c:	6a3b      	ldr	r3, [r7, #32]
 800861e:	f003 0302 	and.w	r3, r3, #2
 8008622:	2b00      	cmp	r3, #0
 8008624:	d009      	beq.n	800863a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	f003 0303 	and.w	r3, r3, #3
 8008630:	2b00      	cmp	r3, #0
 8008632:	d002      	beq.n	800863a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 f921 	bl	800887c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800863a:	6a3b      	ldr	r3, [r7, #32]
 800863c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00c      	beq.n	800865e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	f003 0310 	and.w	r3, r3, #16
 800864a:	2b00      	cmp	r3, #0
 800864c:	d007      	beq.n	800865e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800864e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008650:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008654:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2210      	movs	r2, #16
 800865c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800865e:	6a3b      	ldr	r3, [r7, #32]
 8008660:	f003 0320 	and.w	r3, r3, #32
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00b      	beq.n	8008680 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	f003 0308 	and.w	r3, r3, #8
 800866e:	2b00      	cmp	r3, #0
 8008670:	d006      	beq.n	8008680 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2208      	movs	r2, #8
 8008678:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f91c 	bl	80088b8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8008680:	6a3b      	ldr	r3, [r7, #32]
 8008682:	f003 0310 	and.w	r3, r3, #16
 8008686:	2b00      	cmp	r3, #0
 8008688:	d009      	beq.n	800869e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	f003 0303 	and.w	r3, r3, #3
 8008694:	2b00      	cmp	r3, #0
 8008696:	d002      	beq.n	800869e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f903 	bl	80088a4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800869e:	6a3b      	ldr	r3, [r7, #32]
 80086a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00b      	beq.n	80086c0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	f003 0310 	and.w	r3, r3, #16
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d006      	beq.n	80086c0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2210      	movs	r2, #16
 80086b8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f906 	bl	80088cc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80086c0:	6a3b      	ldr	r3, [r7, #32]
 80086c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00b      	beq.n	80086e2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	f003 0308 	and.w	r3, r3, #8
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d006      	beq.n	80086e2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2208      	movs	r2, #8
 80086da:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 f8ff 	bl	80088e0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80086e2:	6a3b      	ldr	r3, [r7, #32]
 80086e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d07b      	beq.n	80087e4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	f003 0304 	and.w	r3, r3, #4
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d072      	beq.n	80087dc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80086f6:	6a3b      	ldr	r3, [r7, #32]
 80086f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d008      	beq.n	8008712 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008706:	2b00      	cmp	r3, #0
 8008708:	d003      	beq.n	8008712 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800870a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870c:	f043 0301 	orr.w	r3, r3, #1
 8008710:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008712:	6a3b      	ldr	r3, [r7, #32]
 8008714:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008718:	2b00      	cmp	r3, #0
 800871a:	d008      	beq.n	800872e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008722:	2b00      	cmp	r3, #0
 8008724:	d003      	beq.n	800872e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8008726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008728:	f043 0302 	orr.w	r3, r3, #2
 800872c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800872e:	6a3b      	ldr	r3, [r7, #32]
 8008730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008734:	2b00      	cmp	r3, #0
 8008736:	d008      	beq.n	800874a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800873e:	2b00      	cmp	r3, #0
 8008740:	d003      	beq.n	800874a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8008742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008744:	f043 0304 	orr.w	r3, r3, #4
 8008748:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800874a:	6a3b      	ldr	r3, [r7, #32]
 800874c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008750:	2b00      	cmp	r3, #0
 8008752:	d043      	beq.n	80087dc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800875a:	2b00      	cmp	r3, #0
 800875c:	d03e      	beq.n	80087dc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008764:	2b60      	cmp	r3, #96	; 0x60
 8008766:	d02b      	beq.n	80087c0 <HAL_CAN_IRQHandler+0x32a>
 8008768:	2b60      	cmp	r3, #96	; 0x60
 800876a:	d82e      	bhi.n	80087ca <HAL_CAN_IRQHandler+0x334>
 800876c:	2b50      	cmp	r3, #80	; 0x50
 800876e:	d022      	beq.n	80087b6 <HAL_CAN_IRQHandler+0x320>
 8008770:	2b50      	cmp	r3, #80	; 0x50
 8008772:	d82a      	bhi.n	80087ca <HAL_CAN_IRQHandler+0x334>
 8008774:	2b40      	cmp	r3, #64	; 0x40
 8008776:	d019      	beq.n	80087ac <HAL_CAN_IRQHandler+0x316>
 8008778:	2b40      	cmp	r3, #64	; 0x40
 800877a:	d826      	bhi.n	80087ca <HAL_CAN_IRQHandler+0x334>
 800877c:	2b30      	cmp	r3, #48	; 0x30
 800877e:	d010      	beq.n	80087a2 <HAL_CAN_IRQHandler+0x30c>
 8008780:	2b30      	cmp	r3, #48	; 0x30
 8008782:	d822      	bhi.n	80087ca <HAL_CAN_IRQHandler+0x334>
 8008784:	2b10      	cmp	r3, #16
 8008786:	d002      	beq.n	800878e <HAL_CAN_IRQHandler+0x2f8>
 8008788:	2b20      	cmp	r3, #32
 800878a:	d005      	beq.n	8008798 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800878c:	e01d      	b.n	80087ca <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008790:	f043 0308 	orr.w	r3, r3, #8
 8008794:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008796:	e019      	b.n	80087cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8008798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879a:	f043 0310 	orr.w	r3, r3, #16
 800879e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80087a0:	e014      	b.n	80087cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80087a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a4:	f043 0320 	orr.w	r3, r3, #32
 80087a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80087aa:	e00f      	b.n	80087cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80087b4:	e00a      	b.n	80087cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80087b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80087be:	e005      	b.n	80087cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80087c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80087c8:	e000      	b.n	80087cc <HAL_CAN_IRQHandler+0x336>
            break;
 80087ca:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	699a      	ldr	r2, [r3, #24]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80087da:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2204      	movs	r2, #4
 80087e2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80087e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d008      	beq.n	80087fc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f0:	431a      	orrs	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f87c 	bl	80088f4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80087fc:	bf00      	nop
 80087fe:	3728      	adds	r7, #40	; 0x28
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800880c:	bf00      	nop
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80088d4:	bf00      	nop
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80088e8:	bf00      	nop
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80088fc:	bf00      	nop
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008908:	b480      	push	{r7}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f003 0307 	and.w	r3, r3, #7
 8008916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008918:	4b0c      	ldr	r3, [pc, #48]	; (800894c <__NVIC_SetPriorityGrouping+0x44>)
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008924:	4013      	ands	r3, r2
 8008926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800893a:	4a04      	ldr	r2, [pc, #16]	; (800894c <__NVIC_SetPriorityGrouping+0x44>)
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	60d3      	str	r3, [r2, #12]
}
 8008940:	bf00      	nop
 8008942:	3714      	adds	r7, #20
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr
 800894c:	e000ed00 	.word	0xe000ed00

08008950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008950:	b480      	push	{r7}
 8008952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008954:	4b04      	ldr	r3, [pc, #16]	; (8008968 <__NVIC_GetPriorityGrouping+0x18>)
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	0a1b      	lsrs	r3, r3, #8
 800895a:	f003 0307 	and.w	r3, r3, #7
}
 800895e:	4618      	mov	r0, r3
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr
 8008968:	e000ed00 	.word	0xe000ed00

0800896c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	4603      	mov	r3, r0
 8008974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800897a:	2b00      	cmp	r3, #0
 800897c:	db0b      	blt.n	8008996 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800897e:	79fb      	ldrb	r3, [r7, #7]
 8008980:	f003 021f 	and.w	r2, r3, #31
 8008984:	4907      	ldr	r1, [pc, #28]	; (80089a4 <__NVIC_EnableIRQ+0x38>)
 8008986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800898a:	095b      	lsrs	r3, r3, #5
 800898c:	2001      	movs	r0, #1
 800898e:	fa00 f202 	lsl.w	r2, r0, r2
 8008992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008996:	bf00      	nop
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	e000e100 	.word	0xe000e100

080089a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	4603      	mov	r3, r0
 80089b0:	6039      	str	r1, [r7, #0]
 80089b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	db0a      	blt.n	80089d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	b2da      	uxtb	r2, r3
 80089c0:	490c      	ldr	r1, [pc, #48]	; (80089f4 <__NVIC_SetPriority+0x4c>)
 80089c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089c6:	0112      	lsls	r2, r2, #4
 80089c8:	b2d2      	uxtb	r2, r2
 80089ca:	440b      	add	r3, r1
 80089cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80089d0:	e00a      	b.n	80089e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	b2da      	uxtb	r2, r3
 80089d6:	4908      	ldr	r1, [pc, #32]	; (80089f8 <__NVIC_SetPriority+0x50>)
 80089d8:	79fb      	ldrb	r3, [r7, #7]
 80089da:	f003 030f 	and.w	r3, r3, #15
 80089de:	3b04      	subs	r3, #4
 80089e0:	0112      	lsls	r2, r2, #4
 80089e2:	b2d2      	uxtb	r2, r2
 80089e4:	440b      	add	r3, r1
 80089e6:	761a      	strb	r2, [r3, #24]
}
 80089e8:	bf00      	nop
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr
 80089f4:	e000e100 	.word	0xe000e100
 80089f8:	e000ed00 	.word	0xe000ed00

080089fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b089      	sub	sp, #36	; 0x24
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f003 0307 	and.w	r3, r3, #7
 8008a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	f1c3 0307 	rsb	r3, r3, #7
 8008a16:	2b04      	cmp	r3, #4
 8008a18:	bf28      	it	cs
 8008a1a:	2304      	movcs	r3, #4
 8008a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	3304      	adds	r3, #4
 8008a22:	2b06      	cmp	r3, #6
 8008a24:	d902      	bls.n	8008a2c <NVIC_EncodePriority+0x30>
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	3b03      	subs	r3, #3
 8008a2a:	e000      	b.n	8008a2e <NVIC_EncodePriority+0x32>
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a30:	f04f 32ff 	mov.w	r2, #4294967295
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	fa02 f303 	lsl.w	r3, r2, r3
 8008a3a:	43da      	mvns	r2, r3
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	401a      	ands	r2, r3
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a44:	f04f 31ff 	mov.w	r1, #4294967295
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a4e:	43d9      	mvns	r1, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a54:	4313      	orrs	r3, r2
         );
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3724      	adds	r7, #36	; 0x24
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
	...

08008a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a74:	d301      	bcc.n	8008a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008a76:	2301      	movs	r3, #1
 8008a78:	e00f      	b.n	8008a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008a7a:	4a0a      	ldr	r2, [pc, #40]	; (8008aa4 <SysTick_Config+0x40>)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008a82:	210f      	movs	r1, #15
 8008a84:	f04f 30ff 	mov.w	r0, #4294967295
 8008a88:	f7ff ff8e 	bl	80089a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008a8c:	4b05      	ldr	r3, [pc, #20]	; (8008aa4 <SysTick_Config+0x40>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008a92:	4b04      	ldr	r3, [pc, #16]	; (8008aa4 <SysTick_Config+0x40>)
 8008a94:	2207      	movs	r2, #7
 8008a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3708      	adds	r7, #8
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	e000e010 	.word	0xe000e010

08008aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f7ff ff29 	bl	8008908 <__NVIC_SetPriorityGrouping>
}
 8008ab6:	bf00      	nop
 8008ab8:	3708      	adds	r7, #8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b086      	sub	sp, #24
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	60b9      	str	r1, [r7, #8]
 8008ac8:	607a      	str	r2, [r7, #4]
 8008aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008acc:	2300      	movs	r3, #0
 8008ace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008ad0:	f7ff ff3e 	bl	8008950 <__NVIC_GetPriorityGrouping>
 8008ad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	68b9      	ldr	r1, [r7, #8]
 8008ada:	6978      	ldr	r0, [r7, #20]
 8008adc:	f7ff ff8e 	bl	80089fc <NVIC_EncodePriority>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ae6:	4611      	mov	r1, r2
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7ff ff5d 	bl	80089a8 <__NVIC_SetPriority>
}
 8008aee:	bf00      	nop
 8008af0:	3718      	adds	r7, #24
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b082      	sub	sp, #8
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	4603      	mov	r3, r0
 8008afe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7ff ff31 	bl	800896c <__NVIC_EnableIRQ>
}
 8008b0a:	bf00      	nop
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b082      	sub	sp, #8
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f7ff ffa2 	bl	8008a64 <SysTick_Config>
 8008b20:	4603      	mov	r3, r0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b084      	sub	sp, #16
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b36:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008b38:	f7fe fc4e 	bl	80073d8 <HAL_GetTick>
 8008b3c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d008      	beq.n	8008b5c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2280      	movs	r2, #128	; 0x80
 8008b4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e052      	b.n	8008c02 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f022 0216 	bic.w	r2, r2, #22
 8008b6a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	695a      	ldr	r2, [r3, #20]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b7a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d103      	bne.n	8008b8c <HAL_DMA_Abort+0x62>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d007      	beq.n	8008b9c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f022 0208 	bic.w	r2, r2, #8
 8008b9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f022 0201 	bic.w	r2, r2, #1
 8008baa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008bac:	e013      	b.n	8008bd6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008bae:	f7fe fc13 	bl	80073d8 <HAL_GetTick>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	2b05      	cmp	r3, #5
 8008bba:	d90c      	bls.n	8008bd6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2220      	movs	r2, #32
 8008bc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2203      	movs	r2, #3
 8008bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	e015      	b.n	8008c02 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f003 0301 	and.w	r3, r3, #1
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d1e4      	bne.n	8008bae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008be8:	223f      	movs	r2, #63	; 0x3f
 8008bea:	409a      	lsls	r2, r3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008c0a:	b480      	push	{r7}
 8008c0c:	b083      	sub	sp, #12
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d004      	beq.n	8008c28 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2280      	movs	r2, #128	; 0x80
 8008c22:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e00c      	b.n	8008c42 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2205      	movs	r2, #5
 8008c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f022 0201 	bic.w	r2, r2, #1
 8008c3e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	370c      	adds	r7, #12
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr
	...

08008c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b089      	sub	sp, #36	; 0x24
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008c62:	2300      	movs	r3, #0
 8008c64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008c66:	2300      	movs	r3, #0
 8008c68:	61fb      	str	r3, [r7, #28]
 8008c6a:	e165      	b.n	8008f38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	fa02 f303 	lsl.w	r3, r2, r3
 8008c74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	4013      	ands	r3, r2
 8008c7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	f040 8154 	bne.w	8008f32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f003 0303 	and.w	r3, r3, #3
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d005      	beq.n	8008ca2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d130      	bne.n	8008d04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	005b      	lsls	r3, r3, #1
 8008cac:	2203      	movs	r2, #3
 8008cae:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb2:	43db      	mvns	r3, r3
 8008cb4:	69ba      	ldr	r2, [r7, #24]
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	68da      	ldr	r2, [r3, #12]
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	005b      	lsls	r3, r3, #1
 8008cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc6:	69ba      	ldr	r2, [r7, #24]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	69ba      	ldr	r2, [r7, #24]
 8008cd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008cd8:	2201      	movs	r2, #1
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce0:	43db      	mvns	r3, r3
 8008ce2:	69ba      	ldr	r2, [r7, #24]
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	091b      	lsrs	r3, r3, #4
 8008cee:	f003 0201 	and.w	r2, r3, #1
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf8:	69ba      	ldr	r2, [r7, #24]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	69ba      	ldr	r2, [r7, #24]
 8008d02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	f003 0303 	and.w	r3, r3, #3
 8008d0c:	2b03      	cmp	r3, #3
 8008d0e:	d017      	beq.n	8008d40 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	005b      	lsls	r3, r3, #1
 8008d1a:	2203      	movs	r2, #3
 8008d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d20:	43db      	mvns	r3, r3
 8008d22:	69ba      	ldr	r2, [r7, #24]
 8008d24:	4013      	ands	r3, r2
 8008d26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	689a      	ldr	r2, [r3, #8]
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	005b      	lsls	r3, r3, #1
 8008d30:	fa02 f303 	lsl.w	r3, r2, r3
 8008d34:	69ba      	ldr	r2, [r7, #24]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	69ba      	ldr	r2, [r7, #24]
 8008d3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	f003 0303 	and.w	r3, r3, #3
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d123      	bne.n	8008d94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	08da      	lsrs	r2, r3, #3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	3208      	adds	r2, #8
 8008d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	f003 0307 	and.w	r3, r3, #7
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	220f      	movs	r2, #15
 8008d64:	fa02 f303 	lsl.w	r3, r2, r3
 8008d68:	43db      	mvns	r3, r3
 8008d6a:	69ba      	ldr	r2, [r7, #24]
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	691a      	ldr	r2, [r3, #16]
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	f003 0307 	and.w	r3, r3, #7
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d80:	69ba      	ldr	r2, [r7, #24]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	08da      	lsrs	r2, r3, #3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	3208      	adds	r2, #8
 8008d8e:	69b9      	ldr	r1, [r7, #24]
 8008d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	005b      	lsls	r3, r3, #1
 8008d9e:	2203      	movs	r2, #3
 8008da0:	fa02 f303 	lsl.w	r3, r2, r3
 8008da4:	43db      	mvns	r3, r3
 8008da6:	69ba      	ldr	r2, [r7, #24]
 8008da8:	4013      	ands	r3, r2
 8008daa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	f003 0203 	and.w	r2, r3, #3
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	005b      	lsls	r3, r3, #1
 8008db8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dbc:	69ba      	ldr	r2, [r7, #24]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	69ba      	ldr	r2, [r7, #24]
 8008dc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f000 80ae 	beq.w	8008f32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	60fb      	str	r3, [r7, #12]
 8008dda:	4b5d      	ldr	r3, [pc, #372]	; (8008f50 <HAL_GPIO_Init+0x300>)
 8008ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dde:	4a5c      	ldr	r2, [pc, #368]	; (8008f50 <HAL_GPIO_Init+0x300>)
 8008de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008de4:	6453      	str	r3, [r2, #68]	; 0x44
 8008de6:	4b5a      	ldr	r3, [pc, #360]	; (8008f50 <HAL_GPIO_Init+0x300>)
 8008de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dee:	60fb      	str	r3, [r7, #12]
 8008df0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008df2:	4a58      	ldr	r2, [pc, #352]	; (8008f54 <HAL_GPIO_Init+0x304>)
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	089b      	lsrs	r3, r3, #2
 8008df8:	3302      	adds	r3, #2
 8008dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	f003 0303 	and.w	r3, r3, #3
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	220f      	movs	r2, #15
 8008e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e0e:	43db      	mvns	r3, r3
 8008e10:	69ba      	ldr	r2, [r7, #24]
 8008e12:	4013      	ands	r3, r2
 8008e14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a4f      	ldr	r2, [pc, #316]	; (8008f58 <HAL_GPIO_Init+0x308>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d025      	beq.n	8008e6a <HAL_GPIO_Init+0x21a>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a4e      	ldr	r2, [pc, #312]	; (8008f5c <HAL_GPIO_Init+0x30c>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d01f      	beq.n	8008e66 <HAL_GPIO_Init+0x216>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4a4d      	ldr	r2, [pc, #308]	; (8008f60 <HAL_GPIO_Init+0x310>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d019      	beq.n	8008e62 <HAL_GPIO_Init+0x212>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a4c      	ldr	r2, [pc, #304]	; (8008f64 <HAL_GPIO_Init+0x314>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d013      	beq.n	8008e5e <HAL_GPIO_Init+0x20e>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a4b      	ldr	r2, [pc, #300]	; (8008f68 <HAL_GPIO_Init+0x318>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d00d      	beq.n	8008e5a <HAL_GPIO_Init+0x20a>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a4a      	ldr	r2, [pc, #296]	; (8008f6c <HAL_GPIO_Init+0x31c>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d007      	beq.n	8008e56 <HAL_GPIO_Init+0x206>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a49      	ldr	r2, [pc, #292]	; (8008f70 <HAL_GPIO_Init+0x320>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d101      	bne.n	8008e52 <HAL_GPIO_Init+0x202>
 8008e4e:	2306      	movs	r3, #6
 8008e50:	e00c      	b.n	8008e6c <HAL_GPIO_Init+0x21c>
 8008e52:	2307      	movs	r3, #7
 8008e54:	e00a      	b.n	8008e6c <HAL_GPIO_Init+0x21c>
 8008e56:	2305      	movs	r3, #5
 8008e58:	e008      	b.n	8008e6c <HAL_GPIO_Init+0x21c>
 8008e5a:	2304      	movs	r3, #4
 8008e5c:	e006      	b.n	8008e6c <HAL_GPIO_Init+0x21c>
 8008e5e:	2303      	movs	r3, #3
 8008e60:	e004      	b.n	8008e6c <HAL_GPIO_Init+0x21c>
 8008e62:	2302      	movs	r3, #2
 8008e64:	e002      	b.n	8008e6c <HAL_GPIO_Init+0x21c>
 8008e66:	2301      	movs	r3, #1
 8008e68:	e000      	b.n	8008e6c <HAL_GPIO_Init+0x21c>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	69fa      	ldr	r2, [r7, #28]
 8008e6e:	f002 0203 	and.w	r2, r2, #3
 8008e72:	0092      	lsls	r2, r2, #2
 8008e74:	4093      	lsls	r3, r2
 8008e76:	69ba      	ldr	r2, [r7, #24]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e7c:	4935      	ldr	r1, [pc, #212]	; (8008f54 <HAL_GPIO_Init+0x304>)
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	089b      	lsrs	r3, r3, #2
 8008e82:	3302      	adds	r3, #2
 8008e84:	69ba      	ldr	r2, [r7, #24]
 8008e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008e8a:	4b3a      	ldr	r3, [pc, #232]	; (8008f74 <HAL_GPIO_Init+0x324>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	43db      	mvns	r3, r3
 8008e94:	69ba      	ldr	r2, [r7, #24]
 8008e96:	4013      	ands	r3, r2
 8008e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d003      	beq.n	8008eae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008ea6:	69ba      	ldr	r2, [r7, #24]
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008eae:	4a31      	ldr	r2, [pc, #196]	; (8008f74 <HAL_GPIO_Init+0x324>)
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008eb4:	4b2f      	ldr	r3, [pc, #188]	; (8008f74 <HAL_GPIO_Init+0x324>)
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	43db      	mvns	r3, r3
 8008ebe:	69ba      	ldr	r2, [r7, #24]
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d003      	beq.n	8008ed8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008ed0:	69ba      	ldr	r2, [r7, #24]
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008ed8:	4a26      	ldr	r2, [pc, #152]	; (8008f74 <HAL_GPIO_Init+0x324>)
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008ede:	4b25      	ldr	r3, [pc, #148]	; (8008f74 <HAL_GPIO_Init+0x324>)
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	43db      	mvns	r3, r3
 8008ee8:	69ba      	ldr	r2, [r7, #24]
 8008eea:	4013      	ands	r3, r2
 8008eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d003      	beq.n	8008f02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8008efa:	69ba      	ldr	r2, [r7, #24]
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008f02:	4a1c      	ldr	r2, [pc, #112]	; (8008f74 <HAL_GPIO_Init+0x324>)
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008f08:	4b1a      	ldr	r3, [pc, #104]	; (8008f74 <HAL_GPIO_Init+0x324>)
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	43db      	mvns	r3, r3
 8008f12:	69ba      	ldr	r2, [r7, #24]
 8008f14:	4013      	ands	r3, r2
 8008f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d003      	beq.n	8008f2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008f24:	69ba      	ldr	r2, [r7, #24]
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008f2c:	4a11      	ldr	r2, [pc, #68]	; (8008f74 <HAL_GPIO_Init+0x324>)
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	3301      	adds	r3, #1
 8008f36:	61fb      	str	r3, [r7, #28]
 8008f38:	69fb      	ldr	r3, [r7, #28]
 8008f3a:	2b0f      	cmp	r3, #15
 8008f3c:	f67f ae96 	bls.w	8008c6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008f40:	bf00      	nop
 8008f42:	bf00      	nop
 8008f44:	3724      	adds	r7, #36	; 0x24
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	40023800 	.word	0x40023800
 8008f54:	40013800 	.word	0x40013800
 8008f58:	40020000 	.word	0x40020000
 8008f5c:	40020400 	.word	0x40020400
 8008f60:	40020800 	.word	0x40020800
 8008f64:	40020c00 	.word	0x40020c00
 8008f68:	40021000 	.word	0x40021000
 8008f6c:	40021400 	.word	0x40021400
 8008f70:	40021800 	.word	0x40021800
 8008f74:	40013c00 	.word	0x40013c00

08008f78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	460b      	mov	r3, r1
 8008f82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	691a      	ldr	r2, [r3, #16]
 8008f88:	887b      	ldrh	r3, [r7, #2]
 8008f8a:	4013      	ands	r3, r2
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d002      	beq.n	8008f96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008f90:	2301      	movs	r3, #1
 8008f92:	73fb      	strb	r3, [r7, #15]
 8008f94:	e001      	b.n	8008f9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008f96:	2300      	movs	r3, #0
 8008f98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3714      	adds	r7, #20
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	807b      	strh	r3, [r7, #2]
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008fb8:	787b      	ldrb	r3, [r7, #1]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d003      	beq.n	8008fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008fbe:	887a      	ldrh	r2, [r7, #2]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008fc4:	e003      	b.n	8008fce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008fc6:	887b      	ldrh	r3, [r7, #2]
 8008fc8:	041a      	lsls	r2, r3, #16
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	619a      	str	r2, [r3, #24]
}
 8008fce:	bf00      	nop
 8008fd0:	370c      	adds	r7, #12
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr
	...

08008fdc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	603b      	str	r3, [r7, #0]
 8008fea:	4b20      	ldr	r3, [pc, #128]	; (800906c <HAL_PWREx_EnableOverDrive+0x90>)
 8008fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fee:	4a1f      	ldr	r2, [pc, #124]	; (800906c <HAL_PWREx_EnableOverDrive+0x90>)
 8008ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8008ff6:	4b1d      	ldr	r3, [pc, #116]	; (800906c <HAL_PWREx_EnableOverDrive+0x90>)
 8008ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ffe:	603b      	str	r3, [r7, #0]
 8009000:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009002:	4b1b      	ldr	r3, [pc, #108]	; (8009070 <HAL_PWREx_EnableOverDrive+0x94>)
 8009004:	2201      	movs	r2, #1
 8009006:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009008:	f7fe f9e6 	bl	80073d8 <HAL_GetTick>
 800900c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800900e:	e009      	b.n	8009024 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009010:	f7fe f9e2 	bl	80073d8 <HAL_GetTick>
 8009014:	4602      	mov	r2, r0
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	1ad3      	subs	r3, r2, r3
 800901a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800901e:	d901      	bls.n	8009024 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009020:	2303      	movs	r3, #3
 8009022:	e01f      	b.n	8009064 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009024:	4b13      	ldr	r3, [pc, #76]	; (8009074 <HAL_PWREx_EnableOverDrive+0x98>)
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800902c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009030:	d1ee      	bne.n	8009010 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009032:	4b11      	ldr	r3, [pc, #68]	; (8009078 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009034:	2201      	movs	r2, #1
 8009036:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009038:	f7fe f9ce 	bl	80073d8 <HAL_GetTick>
 800903c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800903e:	e009      	b.n	8009054 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009040:	f7fe f9ca 	bl	80073d8 <HAL_GetTick>
 8009044:	4602      	mov	r2, r0
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	1ad3      	subs	r3, r2, r3
 800904a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800904e:	d901      	bls.n	8009054 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009050:	2303      	movs	r3, #3
 8009052:	e007      	b.n	8009064 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009054:	4b07      	ldr	r3, [pc, #28]	; (8009074 <HAL_PWREx_EnableOverDrive+0x98>)
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800905c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009060:	d1ee      	bne.n	8009040 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	40023800 	.word	0x40023800
 8009070:	420e0040 	.word	0x420e0040
 8009074:	40007000 	.word	0x40007000
 8009078:	420e0044 	.word	0x420e0044

0800907c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d101      	bne.n	8009090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	e0cc      	b.n	800922a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009090:	4b68      	ldr	r3, [pc, #416]	; (8009234 <HAL_RCC_ClockConfig+0x1b8>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 030f 	and.w	r3, r3, #15
 8009098:	683a      	ldr	r2, [r7, #0]
 800909a:	429a      	cmp	r2, r3
 800909c:	d90c      	bls.n	80090b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800909e:	4b65      	ldr	r3, [pc, #404]	; (8009234 <HAL_RCC_ClockConfig+0x1b8>)
 80090a0:	683a      	ldr	r2, [r7, #0]
 80090a2:	b2d2      	uxtb	r2, r2
 80090a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090a6:	4b63      	ldr	r3, [pc, #396]	; (8009234 <HAL_RCC_ClockConfig+0x1b8>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 030f 	and.w	r3, r3, #15
 80090ae:	683a      	ldr	r2, [r7, #0]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d001      	beq.n	80090b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	e0b8      	b.n	800922a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f003 0302 	and.w	r3, r3, #2
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d020      	beq.n	8009106 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 0304 	and.w	r3, r3, #4
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d005      	beq.n	80090dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80090d0:	4b59      	ldr	r3, [pc, #356]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	4a58      	ldr	r2, [pc, #352]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 80090d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80090da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f003 0308 	and.w	r3, r3, #8
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d005      	beq.n	80090f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80090e8:	4b53      	ldr	r3, [pc, #332]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	4a52      	ldr	r2, [pc, #328]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 80090ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80090f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090f4:	4b50      	ldr	r3, [pc, #320]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	494d      	ldr	r1, [pc, #308]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 8009102:	4313      	orrs	r3, r2
 8009104:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f003 0301 	and.w	r3, r3, #1
 800910e:	2b00      	cmp	r3, #0
 8009110:	d044      	beq.n	800919c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	2b01      	cmp	r3, #1
 8009118:	d107      	bne.n	800912a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800911a:	4b47      	ldr	r3, [pc, #284]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009122:	2b00      	cmp	r3, #0
 8009124:	d119      	bne.n	800915a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	e07f      	b.n	800922a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	2b02      	cmp	r3, #2
 8009130:	d003      	beq.n	800913a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009136:	2b03      	cmp	r3, #3
 8009138:	d107      	bne.n	800914a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800913a:	4b3f      	ldr	r3, [pc, #252]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009142:	2b00      	cmp	r3, #0
 8009144:	d109      	bne.n	800915a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	e06f      	b.n	800922a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800914a:	4b3b      	ldr	r3, [pc, #236]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f003 0302 	and.w	r3, r3, #2
 8009152:	2b00      	cmp	r3, #0
 8009154:	d101      	bne.n	800915a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	e067      	b.n	800922a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800915a:	4b37      	ldr	r3, [pc, #220]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	f023 0203 	bic.w	r2, r3, #3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	4934      	ldr	r1, [pc, #208]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 8009168:	4313      	orrs	r3, r2
 800916a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800916c:	f7fe f934 	bl	80073d8 <HAL_GetTick>
 8009170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009172:	e00a      	b.n	800918a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009174:	f7fe f930 	bl	80073d8 <HAL_GetTick>
 8009178:	4602      	mov	r2, r0
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	1ad3      	subs	r3, r2, r3
 800917e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009182:	4293      	cmp	r3, r2
 8009184:	d901      	bls.n	800918a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009186:	2303      	movs	r3, #3
 8009188:	e04f      	b.n	800922a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800918a:	4b2b      	ldr	r3, [pc, #172]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	f003 020c 	and.w	r2, r3, #12
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	429a      	cmp	r2, r3
 800919a:	d1eb      	bne.n	8009174 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800919c:	4b25      	ldr	r3, [pc, #148]	; (8009234 <HAL_RCC_ClockConfig+0x1b8>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f003 030f 	and.w	r3, r3, #15
 80091a4:	683a      	ldr	r2, [r7, #0]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d20c      	bcs.n	80091c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091aa:	4b22      	ldr	r3, [pc, #136]	; (8009234 <HAL_RCC_ClockConfig+0x1b8>)
 80091ac:	683a      	ldr	r2, [r7, #0]
 80091ae:	b2d2      	uxtb	r2, r2
 80091b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091b2:	4b20      	ldr	r3, [pc, #128]	; (8009234 <HAL_RCC_ClockConfig+0x1b8>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f003 030f 	and.w	r3, r3, #15
 80091ba:	683a      	ldr	r2, [r7, #0]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d001      	beq.n	80091c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	e032      	b.n	800922a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f003 0304 	and.w	r3, r3, #4
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d008      	beq.n	80091e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80091d0:	4b19      	ldr	r3, [pc, #100]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	4916      	ldr	r1, [pc, #88]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 80091de:	4313      	orrs	r3, r2
 80091e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f003 0308 	and.w	r3, r3, #8
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d009      	beq.n	8009202 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80091ee:	4b12      	ldr	r3, [pc, #72]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	00db      	lsls	r3, r3, #3
 80091fc:	490e      	ldr	r1, [pc, #56]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 80091fe:	4313      	orrs	r3, r2
 8009200:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009202:	f000 f855 	bl	80092b0 <HAL_RCC_GetSysClockFreq>
 8009206:	4602      	mov	r2, r0
 8009208:	4b0b      	ldr	r3, [pc, #44]	; (8009238 <HAL_RCC_ClockConfig+0x1bc>)
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	091b      	lsrs	r3, r3, #4
 800920e:	f003 030f 	and.w	r3, r3, #15
 8009212:	490a      	ldr	r1, [pc, #40]	; (800923c <HAL_RCC_ClockConfig+0x1c0>)
 8009214:	5ccb      	ldrb	r3, [r1, r3]
 8009216:	fa22 f303 	lsr.w	r3, r2, r3
 800921a:	4a09      	ldr	r2, [pc, #36]	; (8009240 <HAL_RCC_ClockConfig+0x1c4>)
 800921c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800921e:	4b09      	ldr	r3, [pc, #36]	; (8009244 <HAL_RCC_ClockConfig+0x1c8>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4618      	mov	r0, r3
 8009224:	f7fe f894 	bl	8007350 <HAL_InitTick>

  return HAL_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	40023c00 	.word	0x40023c00
 8009238:	40023800 	.word	0x40023800
 800923c:	08011d7c 	.word	0x08011d7c
 8009240:	20000040 	.word	0x20000040
 8009244:	20000044 	.word	0x20000044

08009248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009248:	b480      	push	{r7}
 800924a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800924c:	4b03      	ldr	r3, [pc, #12]	; (800925c <HAL_RCC_GetHCLKFreq+0x14>)
 800924e:	681b      	ldr	r3, [r3, #0]
}
 8009250:	4618      	mov	r0, r3
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	20000040 	.word	0x20000040

08009260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009264:	f7ff fff0 	bl	8009248 <HAL_RCC_GetHCLKFreq>
 8009268:	4602      	mov	r2, r0
 800926a:	4b05      	ldr	r3, [pc, #20]	; (8009280 <HAL_RCC_GetPCLK1Freq+0x20>)
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	0a9b      	lsrs	r3, r3, #10
 8009270:	f003 0307 	and.w	r3, r3, #7
 8009274:	4903      	ldr	r1, [pc, #12]	; (8009284 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009276:	5ccb      	ldrb	r3, [r1, r3]
 8009278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800927c:	4618      	mov	r0, r3
 800927e:	bd80      	pop	{r7, pc}
 8009280:	40023800 	.word	0x40023800
 8009284:	08011d8c 	.word	0x08011d8c

08009288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800928c:	f7ff ffdc 	bl	8009248 <HAL_RCC_GetHCLKFreq>
 8009290:	4602      	mov	r2, r0
 8009292:	4b05      	ldr	r3, [pc, #20]	; (80092a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	0b5b      	lsrs	r3, r3, #13
 8009298:	f003 0307 	and.w	r3, r3, #7
 800929c:	4903      	ldr	r1, [pc, #12]	; (80092ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800929e:	5ccb      	ldrb	r3, [r1, r3]
 80092a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	40023800 	.word	0x40023800
 80092ac:	08011d8c 	.word	0x08011d8c

080092b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092b4:	b088      	sub	sp, #32
 80092b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80092b8:	2300      	movs	r3, #0
 80092ba:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80092bc:	2300      	movs	r3, #0
 80092be:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80092c0:	2300      	movs	r3, #0
 80092c2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80092c4:	2300      	movs	r3, #0
 80092c6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80092c8:	2300      	movs	r3, #0
 80092ca:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80092cc:	4bce      	ldr	r3, [pc, #824]	; (8009608 <HAL_RCC_GetSysClockFreq+0x358>)
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	f003 030c 	and.w	r3, r3, #12
 80092d4:	2b0c      	cmp	r3, #12
 80092d6:	f200 818d 	bhi.w	80095f4 <HAL_RCC_GetSysClockFreq+0x344>
 80092da:	a201      	add	r2, pc, #4	; (adr r2, 80092e0 <HAL_RCC_GetSysClockFreq+0x30>)
 80092dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e0:	08009315 	.word	0x08009315
 80092e4:	080095f5 	.word	0x080095f5
 80092e8:	080095f5 	.word	0x080095f5
 80092ec:	080095f5 	.word	0x080095f5
 80092f0:	0800931b 	.word	0x0800931b
 80092f4:	080095f5 	.word	0x080095f5
 80092f8:	080095f5 	.word	0x080095f5
 80092fc:	080095f5 	.word	0x080095f5
 8009300:	08009321 	.word	0x08009321
 8009304:	080095f5 	.word	0x080095f5
 8009308:	080095f5 	.word	0x080095f5
 800930c:	080095f5 	.word	0x080095f5
 8009310:	08009495 	.word	0x08009495
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009314:	4bbd      	ldr	r3, [pc, #756]	; (800960c <HAL_RCC_GetSysClockFreq+0x35c>)
 8009316:	61bb      	str	r3, [r7, #24]
       break;
 8009318:	e16f      	b.n	80095fa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800931a:	4bbd      	ldr	r3, [pc, #756]	; (8009610 <HAL_RCC_GetSysClockFreq+0x360>)
 800931c:	61bb      	str	r3, [r7, #24]
      break;
 800931e:	e16c      	b.n	80095fa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009320:	4bb9      	ldr	r3, [pc, #740]	; (8009608 <HAL_RCC_GetSysClockFreq+0x358>)
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009328:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800932a:	4bb7      	ldr	r3, [pc, #732]	; (8009608 <HAL_RCC_GetSysClockFreq+0x358>)
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009332:	2b00      	cmp	r3, #0
 8009334:	d053      	beq.n	80093de <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009336:	4bb4      	ldr	r3, [pc, #720]	; (8009608 <HAL_RCC_GetSysClockFreq+0x358>)
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	099b      	lsrs	r3, r3, #6
 800933c:	461a      	mov	r2, r3
 800933e:	f04f 0300 	mov.w	r3, #0
 8009342:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009346:	f04f 0100 	mov.w	r1, #0
 800934a:	ea02 0400 	and.w	r4, r2, r0
 800934e:	603c      	str	r4, [r7, #0]
 8009350:	400b      	ands	r3, r1
 8009352:	607b      	str	r3, [r7, #4]
 8009354:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009358:	4620      	mov	r0, r4
 800935a:	4629      	mov	r1, r5
 800935c:	f04f 0200 	mov.w	r2, #0
 8009360:	f04f 0300 	mov.w	r3, #0
 8009364:	014b      	lsls	r3, r1, #5
 8009366:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800936a:	0142      	lsls	r2, r0, #5
 800936c:	4610      	mov	r0, r2
 800936e:	4619      	mov	r1, r3
 8009370:	4623      	mov	r3, r4
 8009372:	1ac0      	subs	r0, r0, r3
 8009374:	462b      	mov	r3, r5
 8009376:	eb61 0103 	sbc.w	r1, r1, r3
 800937a:	f04f 0200 	mov.w	r2, #0
 800937e:	f04f 0300 	mov.w	r3, #0
 8009382:	018b      	lsls	r3, r1, #6
 8009384:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009388:	0182      	lsls	r2, r0, #6
 800938a:	1a12      	subs	r2, r2, r0
 800938c:	eb63 0301 	sbc.w	r3, r3, r1
 8009390:	f04f 0000 	mov.w	r0, #0
 8009394:	f04f 0100 	mov.w	r1, #0
 8009398:	00d9      	lsls	r1, r3, #3
 800939a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800939e:	00d0      	lsls	r0, r2, #3
 80093a0:	4602      	mov	r2, r0
 80093a2:	460b      	mov	r3, r1
 80093a4:	4621      	mov	r1, r4
 80093a6:	1852      	adds	r2, r2, r1
 80093a8:	4629      	mov	r1, r5
 80093aa:	eb43 0101 	adc.w	r1, r3, r1
 80093ae:	460b      	mov	r3, r1
 80093b0:	f04f 0000 	mov.w	r0, #0
 80093b4:	f04f 0100 	mov.w	r1, #0
 80093b8:	0259      	lsls	r1, r3, #9
 80093ba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80093be:	0250      	lsls	r0, r2, #9
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	4610      	mov	r0, r2
 80093c6:	4619      	mov	r1, r3
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	461a      	mov	r2, r3
 80093cc:	f04f 0300 	mov.w	r3, #0
 80093d0:	f7f7 fc8a 	bl	8000ce8 <__aeabi_uldivmod>
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	4613      	mov	r3, r2
 80093da:	61fb      	str	r3, [r7, #28]
 80093dc:	e04c      	b.n	8009478 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80093de:	4b8a      	ldr	r3, [pc, #552]	; (8009608 <HAL_RCC_GetSysClockFreq+0x358>)
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	099b      	lsrs	r3, r3, #6
 80093e4:	461a      	mov	r2, r3
 80093e6:	f04f 0300 	mov.w	r3, #0
 80093ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80093ee:	f04f 0100 	mov.w	r1, #0
 80093f2:	ea02 0a00 	and.w	sl, r2, r0
 80093f6:	ea03 0b01 	and.w	fp, r3, r1
 80093fa:	4650      	mov	r0, sl
 80093fc:	4659      	mov	r1, fp
 80093fe:	f04f 0200 	mov.w	r2, #0
 8009402:	f04f 0300 	mov.w	r3, #0
 8009406:	014b      	lsls	r3, r1, #5
 8009408:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800940c:	0142      	lsls	r2, r0, #5
 800940e:	4610      	mov	r0, r2
 8009410:	4619      	mov	r1, r3
 8009412:	ebb0 000a 	subs.w	r0, r0, sl
 8009416:	eb61 010b 	sbc.w	r1, r1, fp
 800941a:	f04f 0200 	mov.w	r2, #0
 800941e:	f04f 0300 	mov.w	r3, #0
 8009422:	018b      	lsls	r3, r1, #6
 8009424:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009428:	0182      	lsls	r2, r0, #6
 800942a:	1a12      	subs	r2, r2, r0
 800942c:	eb63 0301 	sbc.w	r3, r3, r1
 8009430:	f04f 0000 	mov.w	r0, #0
 8009434:	f04f 0100 	mov.w	r1, #0
 8009438:	00d9      	lsls	r1, r3, #3
 800943a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800943e:	00d0      	lsls	r0, r2, #3
 8009440:	4602      	mov	r2, r0
 8009442:	460b      	mov	r3, r1
 8009444:	eb12 020a 	adds.w	r2, r2, sl
 8009448:	eb43 030b 	adc.w	r3, r3, fp
 800944c:	f04f 0000 	mov.w	r0, #0
 8009450:	f04f 0100 	mov.w	r1, #0
 8009454:	0299      	lsls	r1, r3, #10
 8009456:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800945a:	0290      	lsls	r0, r2, #10
 800945c:	4602      	mov	r2, r0
 800945e:	460b      	mov	r3, r1
 8009460:	4610      	mov	r0, r2
 8009462:	4619      	mov	r1, r3
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	461a      	mov	r2, r3
 8009468:	f04f 0300 	mov.w	r3, #0
 800946c:	f7f7 fc3c 	bl	8000ce8 <__aeabi_uldivmod>
 8009470:	4602      	mov	r2, r0
 8009472:	460b      	mov	r3, r1
 8009474:	4613      	mov	r3, r2
 8009476:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009478:	4b63      	ldr	r3, [pc, #396]	; (8009608 <HAL_RCC_GetSysClockFreq+0x358>)
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	0c1b      	lsrs	r3, r3, #16
 800947e:	f003 0303 	and.w	r3, r3, #3
 8009482:	3301      	adds	r3, #1
 8009484:	005b      	lsls	r3, r3, #1
 8009486:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8009488:	69fa      	ldr	r2, [r7, #28]
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009490:	61bb      	str	r3, [r7, #24]
      break;
 8009492:	e0b2      	b.n	80095fa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009494:	4b5c      	ldr	r3, [pc, #368]	; (8009608 <HAL_RCC_GetSysClockFreq+0x358>)
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800949c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800949e:	4b5a      	ldr	r3, [pc, #360]	; (8009608 <HAL_RCC_GetSysClockFreq+0x358>)
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d04d      	beq.n	8009546 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80094aa:	4b57      	ldr	r3, [pc, #348]	; (8009608 <HAL_RCC_GetSysClockFreq+0x358>)
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	099b      	lsrs	r3, r3, #6
 80094b0:	461a      	mov	r2, r3
 80094b2:	f04f 0300 	mov.w	r3, #0
 80094b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80094ba:	f04f 0100 	mov.w	r1, #0
 80094be:	ea02 0800 	and.w	r8, r2, r0
 80094c2:	ea03 0901 	and.w	r9, r3, r1
 80094c6:	4640      	mov	r0, r8
 80094c8:	4649      	mov	r1, r9
 80094ca:	f04f 0200 	mov.w	r2, #0
 80094ce:	f04f 0300 	mov.w	r3, #0
 80094d2:	014b      	lsls	r3, r1, #5
 80094d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80094d8:	0142      	lsls	r2, r0, #5
 80094da:	4610      	mov	r0, r2
 80094dc:	4619      	mov	r1, r3
 80094de:	ebb0 0008 	subs.w	r0, r0, r8
 80094e2:	eb61 0109 	sbc.w	r1, r1, r9
 80094e6:	f04f 0200 	mov.w	r2, #0
 80094ea:	f04f 0300 	mov.w	r3, #0
 80094ee:	018b      	lsls	r3, r1, #6
 80094f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80094f4:	0182      	lsls	r2, r0, #6
 80094f6:	1a12      	subs	r2, r2, r0
 80094f8:	eb63 0301 	sbc.w	r3, r3, r1
 80094fc:	f04f 0000 	mov.w	r0, #0
 8009500:	f04f 0100 	mov.w	r1, #0
 8009504:	00d9      	lsls	r1, r3, #3
 8009506:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800950a:	00d0      	lsls	r0, r2, #3
 800950c:	4602      	mov	r2, r0
 800950e:	460b      	mov	r3, r1
 8009510:	eb12 0208 	adds.w	r2, r2, r8
 8009514:	eb43 0309 	adc.w	r3, r3, r9
 8009518:	f04f 0000 	mov.w	r0, #0
 800951c:	f04f 0100 	mov.w	r1, #0
 8009520:	0259      	lsls	r1, r3, #9
 8009522:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8009526:	0250      	lsls	r0, r2, #9
 8009528:	4602      	mov	r2, r0
 800952a:	460b      	mov	r3, r1
 800952c:	4610      	mov	r0, r2
 800952e:	4619      	mov	r1, r3
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	461a      	mov	r2, r3
 8009534:	f04f 0300 	mov.w	r3, #0
 8009538:	f7f7 fbd6 	bl	8000ce8 <__aeabi_uldivmod>
 800953c:	4602      	mov	r2, r0
 800953e:	460b      	mov	r3, r1
 8009540:	4613      	mov	r3, r2
 8009542:	61fb      	str	r3, [r7, #28]
 8009544:	e04a      	b.n	80095dc <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009546:	4b30      	ldr	r3, [pc, #192]	; (8009608 <HAL_RCC_GetSysClockFreq+0x358>)
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	099b      	lsrs	r3, r3, #6
 800954c:	461a      	mov	r2, r3
 800954e:	f04f 0300 	mov.w	r3, #0
 8009552:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009556:	f04f 0100 	mov.w	r1, #0
 800955a:	ea02 0400 	and.w	r4, r2, r0
 800955e:	ea03 0501 	and.w	r5, r3, r1
 8009562:	4620      	mov	r0, r4
 8009564:	4629      	mov	r1, r5
 8009566:	f04f 0200 	mov.w	r2, #0
 800956a:	f04f 0300 	mov.w	r3, #0
 800956e:	014b      	lsls	r3, r1, #5
 8009570:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009574:	0142      	lsls	r2, r0, #5
 8009576:	4610      	mov	r0, r2
 8009578:	4619      	mov	r1, r3
 800957a:	1b00      	subs	r0, r0, r4
 800957c:	eb61 0105 	sbc.w	r1, r1, r5
 8009580:	f04f 0200 	mov.w	r2, #0
 8009584:	f04f 0300 	mov.w	r3, #0
 8009588:	018b      	lsls	r3, r1, #6
 800958a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800958e:	0182      	lsls	r2, r0, #6
 8009590:	1a12      	subs	r2, r2, r0
 8009592:	eb63 0301 	sbc.w	r3, r3, r1
 8009596:	f04f 0000 	mov.w	r0, #0
 800959a:	f04f 0100 	mov.w	r1, #0
 800959e:	00d9      	lsls	r1, r3, #3
 80095a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80095a4:	00d0      	lsls	r0, r2, #3
 80095a6:	4602      	mov	r2, r0
 80095a8:	460b      	mov	r3, r1
 80095aa:	1912      	adds	r2, r2, r4
 80095ac:	eb45 0303 	adc.w	r3, r5, r3
 80095b0:	f04f 0000 	mov.w	r0, #0
 80095b4:	f04f 0100 	mov.w	r1, #0
 80095b8:	0299      	lsls	r1, r3, #10
 80095ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80095be:	0290      	lsls	r0, r2, #10
 80095c0:	4602      	mov	r2, r0
 80095c2:	460b      	mov	r3, r1
 80095c4:	4610      	mov	r0, r2
 80095c6:	4619      	mov	r1, r3
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	461a      	mov	r2, r3
 80095cc:	f04f 0300 	mov.w	r3, #0
 80095d0:	f7f7 fb8a 	bl	8000ce8 <__aeabi_uldivmod>
 80095d4:	4602      	mov	r2, r0
 80095d6:	460b      	mov	r3, r1
 80095d8:	4613      	mov	r3, r2
 80095da:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80095dc:	4b0a      	ldr	r3, [pc, #40]	; (8009608 <HAL_RCC_GetSysClockFreq+0x358>)
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	0f1b      	lsrs	r3, r3, #28
 80095e2:	f003 0307 	and.w	r3, r3, #7
 80095e6:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80095e8:	69fa      	ldr	r2, [r7, #28]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80095f0:	61bb      	str	r3, [r7, #24]
      break;
 80095f2:	e002      	b.n	80095fa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80095f4:	4b05      	ldr	r3, [pc, #20]	; (800960c <HAL_RCC_GetSysClockFreq+0x35c>)
 80095f6:	61bb      	str	r3, [r7, #24]
      break;
 80095f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80095fa:	69bb      	ldr	r3, [r7, #24]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3720      	adds	r7, #32
 8009600:	46bd      	mov	sp, r7
 8009602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009606:	bf00      	nop
 8009608:	40023800 	.word	0x40023800
 800960c:	00f42400 	.word	0x00f42400
 8009610:	007a1200 	.word	0x007a1200

08009614 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b086      	sub	sp, #24
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d101      	bne.n	8009626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	e28d      	b.n	8009b42 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f003 0301 	and.w	r3, r3, #1
 800962e:	2b00      	cmp	r3, #0
 8009630:	f000 8083 	beq.w	800973a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009634:	4b94      	ldr	r3, [pc, #592]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	f003 030c 	and.w	r3, r3, #12
 800963c:	2b04      	cmp	r3, #4
 800963e:	d019      	beq.n	8009674 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009640:	4b91      	ldr	r3, [pc, #580]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009648:	2b08      	cmp	r3, #8
 800964a:	d106      	bne.n	800965a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800964c:	4b8e      	ldr	r3, [pc, #568]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009654:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009658:	d00c      	beq.n	8009674 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800965a:	4b8b      	ldr	r3, [pc, #556]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009662:	2b0c      	cmp	r3, #12
 8009664:	d112      	bne.n	800968c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009666:	4b88      	ldr	r3, [pc, #544]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800966e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009672:	d10b      	bne.n	800968c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009674:	4b84      	ldr	r3, [pc, #528]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800967c:	2b00      	cmp	r3, #0
 800967e:	d05b      	beq.n	8009738 <HAL_RCC_OscConfig+0x124>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d157      	bne.n	8009738 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	e25a      	b.n	8009b42 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009694:	d106      	bne.n	80096a4 <HAL_RCC_OscConfig+0x90>
 8009696:	4b7c      	ldr	r3, [pc, #496]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a7b      	ldr	r2, [pc, #492]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 800969c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096a0:	6013      	str	r3, [r2, #0]
 80096a2:	e01d      	b.n	80096e0 <HAL_RCC_OscConfig+0xcc>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096ac:	d10c      	bne.n	80096c8 <HAL_RCC_OscConfig+0xb4>
 80096ae:	4b76      	ldr	r3, [pc, #472]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a75      	ldr	r2, [pc, #468]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 80096b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80096b8:	6013      	str	r3, [r2, #0]
 80096ba:	4b73      	ldr	r3, [pc, #460]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a72      	ldr	r2, [pc, #456]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 80096c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096c4:	6013      	str	r3, [r2, #0]
 80096c6:	e00b      	b.n	80096e0 <HAL_RCC_OscConfig+0xcc>
 80096c8:	4b6f      	ldr	r3, [pc, #444]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a6e      	ldr	r2, [pc, #440]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 80096ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096d2:	6013      	str	r3, [r2, #0]
 80096d4:	4b6c      	ldr	r3, [pc, #432]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a6b      	ldr	r2, [pc, #428]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 80096da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d013      	beq.n	8009710 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096e8:	f7fd fe76 	bl	80073d8 <HAL_GetTick>
 80096ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096ee:	e008      	b.n	8009702 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80096f0:	f7fd fe72 	bl	80073d8 <HAL_GetTick>
 80096f4:	4602      	mov	r2, r0
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	1ad3      	subs	r3, r2, r3
 80096fa:	2b64      	cmp	r3, #100	; 0x64
 80096fc:	d901      	bls.n	8009702 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80096fe:	2303      	movs	r3, #3
 8009700:	e21f      	b.n	8009b42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009702:	4b61      	ldr	r3, [pc, #388]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800970a:	2b00      	cmp	r3, #0
 800970c:	d0f0      	beq.n	80096f0 <HAL_RCC_OscConfig+0xdc>
 800970e:	e014      	b.n	800973a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009710:	f7fd fe62 	bl	80073d8 <HAL_GetTick>
 8009714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009716:	e008      	b.n	800972a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009718:	f7fd fe5e 	bl	80073d8 <HAL_GetTick>
 800971c:	4602      	mov	r2, r0
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	1ad3      	subs	r3, r2, r3
 8009722:	2b64      	cmp	r3, #100	; 0x64
 8009724:	d901      	bls.n	800972a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8009726:	2303      	movs	r3, #3
 8009728:	e20b      	b.n	8009b42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800972a:	4b57      	ldr	r3, [pc, #348]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009732:	2b00      	cmp	r3, #0
 8009734:	d1f0      	bne.n	8009718 <HAL_RCC_OscConfig+0x104>
 8009736:	e000      	b.n	800973a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f003 0302 	and.w	r3, r3, #2
 8009742:	2b00      	cmp	r3, #0
 8009744:	d06f      	beq.n	8009826 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009746:	4b50      	ldr	r3, [pc, #320]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	f003 030c 	and.w	r3, r3, #12
 800974e:	2b00      	cmp	r3, #0
 8009750:	d017      	beq.n	8009782 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009752:	4b4d      	ldr	r3, [pc, #308]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800975a:	2b08      	cmp	r3, #8
 800975c:	d105      	bne.n	800976a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800975e:	4b4a      	ldr	r3, [pc, #296]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00b      	beq.n	8009782 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800976a:	4b47      	ldr	r3, [pc, #284]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009772:	2b0c      	cmp	r3, #12
 8009774:	d11c      	bne.n	80097b0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009776:	4b44      	ldr	r3, [pc, #272]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800977e:	2b00      	cmp	r3, #0
 8009780:	d116      	bne.n	80097b0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009782:	4b41      	ldr	r3, [pc, #260]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 0302 	and.w	r3, r3, #2
 800978a:	2b00      	cmp	r3, #0
 800978c:	d005      	beq.n	800979a <HAL_RCC_OscConfig+0x186>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	2b01      	cmp	r3, #1
 8009794:	d001      	beq.n	800979a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	e1d3      	b.n	8009b42 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800979a:	4b3b      	ldr	r3, [pc, #236]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	00db      	lsls	r3, r3, #3
 80097a8:	4937      	ldr	r1, [pc, #220]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 80097aa:	4313      	orrs	r3, r2
 80097ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80097ae:	e03a      	b.n	8009826 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d020      	beq.n	80097fa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80097b8:	4b34      	ldr	r3, [pc, #208]	; (800988c <HAL_RCC_OscConfig+0x278>)
 80097ba:	2201      	movs	r2, #1
 80097bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097be:	f7fd fe0b 	bl	80073d8 <HAL_GetTick>
 80097c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097c4:	e008      	b.n	80097d8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80097c6:	f7fd fe07 	bl	80073d8 <HAL_GetTick>
 80097ca:	4602      	mov	r2, r0
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	1ad3      	subs	r3, r2, r3
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	d901      	bls.n	80097d8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80097d4:	2303      	movs	r3, #3
 80097d6:	e1b4      	b.n	8009b42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097d8:	4b2b      	ldr	r3, [pc, #172]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f003 0302 	and.w	r3, r3, #2
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d0f0      	beq.n	80097c6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097e4:	4b28      	ldr	r3, [pc, #160]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	00db      	lsls	r3, r3, #3
 80097f2:	4925      	ldr	r1, [pc, #148]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 80097f4:	4313      	orrs	r3, r2
 80097f6:	600b      	str	r3, [r1, #0]
 80097f8:	e015      	b.n	8009826 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80097fa:	4b24      	ldr	r3, [pc, #144]	; (800988c <HAL_RCC_OscConfig+0x278>)
 80097fc:	2200      	movs	r2, #0
 80097fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009800:	f7fd fdea 	bl	80073d8 <HAL_GetTick>
 8009804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009806:	e008      	b.n	800981a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009808:	f7fd fde6 	bl	80073d8 <HAL_GetTick>
 800980c:	4602      	mov	r2, r0
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	2b02      	cmp	r3, #2
 8009814:	d901      	bls.n	800981a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009816:	2303      	movs	r3, #3
 8009818:	e193      	b.n	8009b42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800981a:	4b1b      	ldr	r3, [pc, #108]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f003 0302 	and.w	r3, r3, #2
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1f0      	bne.n	8009808 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f003 0308 	and.w	r3, r3, #8
 800982e:	2b00      	cmp	r3, #0
 8009830:	d036      	beq.n	80098a0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	695b      	ldr	r3, [r3, #20]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d016      	beq.n	8009868 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800983a:	4b15      	ldr	r3, [pc, #84]	; (8009890 <HAL_RCC_OscConfig+0x27c>)
 800983c:	2201      	movs	r2, #1
 800983e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009840:	f7fd fdca 	bl	80073d8 <HAL_GetTick>
 8009844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009846:	e008      	b.n	800985a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009848:	f7fd fdc6 	bl	80073d8 <HAL_GetTick>
 800984c:	4602      	mov	r2, r0
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	2b02      	cmp	r3, #2
 8009854:	d901      	bls.n	800985a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8009856:	2303      	movs	r3, #3
 8009858:	e173      	b.n	8009b42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800985a:	4b0b      	ldr	r3, [pc, #44]	; (8009888 <HAL_RCC_OscConfig+0x274>)
 800985c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800985e:	f003 0302 	and.w	r3, r3, #2
 8009862:	2b00      	cmp	r3, #0
 8009864:	d0f0      	beq.n	8009848 <HAL_RCC_OscConfig+0x234>
 8009866:	e01b      	b.n	80098a0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009868:	4b09      	ldr	r3, [pc, #36]	; (8009890 <HAL_RCC_OscConfig+0x27c>)
 800986a:	2200      	movs	r2, #0
 800986c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800986e:	f7fd fdb3 	bl	80073d8 <HAL_GetTick>
 8009872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009874:	e00e      	b.n	8009894 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009876:	f7fd fdaf 	bl	80073d8 <HAL_GetTick>
 800987a:	4602      	mov	r2, r0
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	1ad3      	subs	r3, r2, r3
 8009880:	2b02      	cmp	r3, #2
 8009882:	d907      	bls.n	8009894 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8009884:	2303      	movs	r3, #3
 8009886:	e15c      	b.n	8009b42 <HAL_RCC_OscConfig+0x52e>
 8009888:	40023800 	.word	0x40023800
 800988c:	42470000 	.word	0x42470000
 8009890:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009894:	4b8a      	ldr	r3, [pc, #552]	; (8009ac0 <HAL_RCC_OscConfig+0x4ac>)
 8009896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009898:	f003 0302 	and.w	r3, r3, #2
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1ea      	bne.n	8009876 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f003 0304 	and.w	r3, r3, #4
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f000 8097 	beq.w	80099dc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80098ae:	2300      	movs	r3, #0
 80098b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80098b2:	4b83      	ldr	r3, [pc, #524]	; (8009ac0 <HAL_RCC_OscConfig+0x4ac>)
 80098b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d10f      	bne.n	80098de <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80098be:	2300      	movs	r3, #0
 80098c0:	60bb      	str	r3, [r7, #8]
 80098c2:	4b7f      	ldr	r3, [pc, #508]	; (8009ac0 <HAL_RCC_OscConfig+0x4ac>)
 80098c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c6:	4a7e      	ldr	r2, [pc, #504]	; (8009ac0 <HAL_RCC_OscConfig+0x4ac>)
 80098c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098cc:	6413      	str	r3, [r2, #64]	; 0x40
 80098ce:	4b7c      	ldr	r3, [pc, #496]	; (8009ac0 <HAL_RCC_OscConfig+0x4ac>)
 80098d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098d6:	60bb      	str	r3, [r7, #8]
 80098d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80098da:	2301      	movs	r3, #1
 80098dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098de:	4b79      	ldr	r3, [pc, #484]	; (8009ac4 <HAL_RCC_OscConfig+0x4b0>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d118      	bne.n	800991c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80098ea:	4b76      	ldr	r3, [pc, #472]	; (8009ac4 <HAL_RCC_OscConfig+0x4b0>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a75      	ldr	r2, [pc, #468]	; (8009ac4 <HAL_RCC_OscConfig+0x4b0>)
 80098f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80098f6:	f7fd fd6f 	bl	80073d8 <HAL_GetTick>
 80098fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098fc:	e008      	b.n	8009910 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098fe:	f7fd fd6b 	bl	80073d8 <HAL_GetTick>
 8009902:	4602      	mov	r2, r0
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	1ad3      	subs	r3, r2, r3
 8009908:	2b02      	cmp	r3, #2
 800990a:	d901      	bls.n	8009910 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800990c:	2303      	movs	r3, #3
 800990e:	e118      	b.n	8009b42 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009910:	4b6c      	ldr	r3, [pc, #432]	; (8009ac4 <HAL_RCC_OscConfig+0x4b0>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009918:	2b00      	cmp	r3, #0
 800991a:	d0f0      	beq.n	80098fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d106      	bne.n	8009932 <HAL_RCC_OscConfig+0x31e>
 8009924:	4b66      	ldr	r3, [pc, #408]	; (8009ac0 <HAL_RCC_OscConfig+0x4ac>)
 8009926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009928:	4a65      	ldr	r2, [pc, #404]	; (8009ac0 <HAL_RCC_OscConfig+0x4ac>)
 800992a:	f043 0301 	orr.w	r3, r3, #1
 800992e:	6713      	str	r3, [r2, #112]	; 0x70
 8009930:	e01c      	b.n	800996c <HAL_RCC_OscConfig+0x358>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	2b05      	cmp	r3, #5
 8009938:	d10c      	bne.n	8009954 <HAL_RCC_OscConfig+0x340>
 800993a:	4b61      	ldr	r3, [pc, #388]	; (8009ac0 <HAL_RCC_OscConfig+0x4ac>)
 800993c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800993e:	4a60      	ldr	r2, [pc, #384]	; (8009ac0 <HAL_RCC_OscConfig+0x4ac>)
 8009940:	f043 0304 	orr.w	r3, r3, #4
 8009944:	6713      	str	r3, [r2, #112]	; 0x70
 8009946:	4b5e      	ldr	r3, [pc, #376]	; (8009ac0 <HAL_RCC_OscConfig+0x4ac>)
 8009948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800994a:	4a5d      	ldr	r2, [pc, #372]	; (8009ac0 <HAL_RCC_OscConfig+0x4ac>)
 800994c:	f043 0301 	orr.w	r3, r3, #1
 8009950:	6713      	str	r3, [r2, #112]	; 0x70
 8009952:	e00b      	b.n	800996c <HAL_RCC_OscConfig+0x358>
 8009954:	4b5a      	ldr	r3, [pc, #360]	; (8009ac0 <HAL_RCC_OscConfig+0x4ac>)
 8009956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009958:	4a59      	ldr	r2, [pc, #356]	; (8009ac0 <HAL_RCC_OscConfig+0x4ac>)
 800995a:	f023 0301 	bic.w	r3, r3, #1
 800995e:	6713      	str	r3, [r2, #112]	; 0x70
 8009960:	4b57      	ldr	r3, [pc, #348]	; (8009ac0 <HAL_RCC_OscConfig+0x4ac>)
 8009962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009964:	4a56      	ldr	r2, [pc, #344]	; (8009ac0 <HAL_RCC_OscConfig+0x4ac>)
 8009966:	f023 0304 	bic.w	r3, r3, #4
 800996a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d015      	beq.n	80099a0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009974:	f7fd fd30 	bl	80073d8 <HAL_GetTick>
 8009978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800997a:	e00a      	b.n	8009992 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800997c:	f7fd fd2c 	bl	80073d8 <HAL_GetTick>
 8009980:	4602      	mov	r2, r0
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	1ad3      	subs	r3, r2, r3
 8009986:	f241 3288 	movw	r2, #5000	; 0x1388
 800998a:	4293      	cmp	r3, r2
 800998c:	d901      	bls.n	8009992 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800998e:	2303      	movs	r3, #3
 8009990:	e0d7      	b.n	8009b42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009992:	4b4b      	ldr	r3, [pc, #300]	; (8009ac0 <HAL_RCC_OscConfig+0x4ac>)
 8009994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009996:	f003 0302 	and.w	r3, r3, #2
 800999a:	2b00      	cmp	r3, #0
 800999c:	d0ee      	beq.n	800997c <HAL_RCC_OscConfig+0x368>
 800999e:	e014      	b.n	80099ca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099a0:	f7fd fd1a 	bl	80073d8 <HAL_GetTick>
 80099a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099a6:	e00a      	b.n	80099be <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099a8:	f7fd fd16 	bl	80073d8 <HAL_GetTick>
 80099ac:	4602      	mov	r2, r0
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	1ad3      	subs	r3, r2, r3
 80099b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d901      	bls.n	80099be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80099ba:	2303      	movs	r3, #3
 80099bc:	e0c1      	b.n	8009b42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099be:	4b40      	ldr	r3, [pc, #256]	; (8009ac0 <HAL_RCC_OscConfig+0x4ac>)
 80099c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099c2:	f003 0302 	and.w	r3, r3, #2
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1ee      	bne.n	80099a8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80099ca:	7dfb      	ldrb	r3, [r7, #23]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d105      	bne.n	80099dc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80099d0:	4b3b      	ldr	r3, [pc, #236]	; (8009ac0 <HAL_RCC_OscConfig+0x4ac>)
 80099d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d4:	4a3a      	ldr	r2, [pc, #232]	; (8009ac0 <HAL_RCC_OscConfig+0x4ac>)
 80099d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	699b      	ldr	r3, [r3, #24]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f000 80ad 	beq.w	8009b40 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80099e6:	4b36      	ldr	r3, [pc, #216]	; (8009ac0 <HAL_RCC_OscConfig+0x4ac>)
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	f003 030c 	and.w	r3, r3, #12
 80099ee:	2b08      	cmp	r3, #8
 80099f0:	d060      	beq.n	8009ab4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	699b      	ldr	r3, [r3, #24]
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	d145      	bne.n	8009a86 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099fa:	4b33      	ldr	r3, [pc, #204]	; (8009ac8 <HAL_RCC_OscConfig+0x4b4>)
 80099fc:	2200      	movs	r2, #0
 80099fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a00:	f7fd fcea 	bl	80073d8 <HAL_GetTick>
 8009a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a06:	e008      	b.n	8009a1a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a08:	f7fd fce6 	bl	80073d8 <HAL_GetTick>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	1ad3      	subs	r3, r2, r3
 8009a12:	2b02      	cmp	r3, #2
 8009a14:	d901      	bls.n	8009a1a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8009a16:	2303      	movs	r3, #3
 8009a18:	e093      	b.n	8009b42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a1a:	4b29      	ldr	r3, [pc, #164]	; (8009ac0 <HAL_RCC_OscConfig+0x4ac>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d1f0      	bne.n	8009a08 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	69da      	ldr	r2, [r3, #28]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6a1b      	ldr	r3, [r3, #32]
 8009a2e:	431a      	orrs	r2, r3
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a34:	019b      	lsls	r3, r3, #6
 8009a36:	431a      	orrs	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a3c:	085b      	lsrs	r3, r3, #1
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	041b      	lsls	r3, r3, #16
 8009a42:	431a      	orrs	r2, r3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a48:	061b      	lsls	r3, r3, #24
 8009a4a:	431a      	orrs	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a50:	071b      	lsls	r3, r3, #28
 8009a52:	491b      	ldr	r1, [pc, #108]	; (8009ac0 <HAL_RCC_OscConfig+0x4ac>)
 8009a54:	4313      	orrs	r3, r2
 8009a56:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009a58:	4b1b      	ldr	r3, [pc, #108]	; (8009ac8 <HAL_RCC_OscConfig+0x4b4>)
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a5e:	f7fd fcbb 	bl	80073d8 <HAL_GetTick>
 8009a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a64:	e008      	b.n	8009a78 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a66:	f7fd fcb7 	bl	80073d8 <HAL_GetTick>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	1ad3      	subs	r3, r2, r3
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	d901      	bls.n	8009a78 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009a74:	2303      	movs	r3, #3
 8009a76:	e064      	b.n	8009b42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a78:	4b11      	ldr	r3, [pc, #68]	; (8009ac0 <HAL_RCC_OscConfig+0x4ac>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d0f0      	beq.n	8009a66 <HAL_RCC_OscConfig+0x452>
 8009a84:	e05c      	b.n	8009b40 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a86:	4b10      	ldr	r3, [pc, #64]	; (8009ac8 <HAL_RCC_OscConfig+0x4b4>)
 8009a88:	2200      	movs	r2, #0
 8009a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a8c:	f7fd fca4 	bl	80073d8 <HAL_GetTick>
 8009a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a92:	e008      	b.n	8009aa6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a94:	f7fd fca0 	bl	80073d8 <HAL_GetTick>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	1ad3      	subs	r3, r2, r3
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d901      	bls.n	8009aa6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	e04d      	b.n	8009b42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009aa6:	4b06      	ldr	r3, [pc, #24]	; (8009ac0 <HAL_RCC_OscConfig+0x4ac>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1f0      	bne.n	8009a94 <HAL_RCC_OscConfig+0x480>
 8009ab2:	e045      	b.n	8009b40 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	699b      	ldr	r3, [r3, #24]
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d107      	bne.n	8009acc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	e040      	b.n	8009b42 <HAL_RCC_OscConfig+0x52e>
 8009ac0:	40023800 	.word	0x40023800
 8009ac4:	40007000 	.word	0x40007000
 8009ac8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009acc:	4b1f      	ldr	r3, [pc, #124]	; (8009b4c <HAL_RCC_OscConfig+0x538>)
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	699b      	ldr	r3, [r3, #24]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d030      	beq.n	8009b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d129      	bne.n	8009b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d122      	bne.n	8009b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009afc:	4013      	ands	r3, r2
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009b02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d119      	bne.n	8009b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b12:	085b      	lsrs	r3, r3, #1
 8009b14:	3b01      	subs	r3, #1
 8009b16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d10f      	bne.n	8009b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d107      	bne.n	8009b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b36:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d001      	beq.n	8009b40 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e000      	b.n	8009b42 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3718      	adds	r7, #24
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	40023800 	.word	0x40023800

08009b50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d101      	bne.n	8009b62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e07b      	b.n	8009c5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d108      	bne.n	8009b7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b72:	d009      	beq.n	8009b88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	61da      	str	r2, [r3, #28]
 8009b7a:	e005      	b.n	8009b88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d106      	bne.n	8009ba8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f7fb ffc2 	bl	8005b2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2202      	movs	r2, #2
 8009bac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009bd0:	431a      	orrs	r2, r3
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bda:	431a      	orrs	r2, r3
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	691b      	ldr	r3, [r3, #16]
 8009be0:	f003 0302 	and.w	r3, r3, #2
 8009be4:	431a      	orrs	r2, r3
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	695b      	ldr	r3, [r3, #20]
 8009bea:	f003 0301 	and.w	r3, r3, #1
 8009bee:	431a      	orrs	r2, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	699b      	ldr	r3, [r3, #24]
 8009bf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bf8:	431a      	orrs	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	69db      	ldr	r3, [r3, #28]
 8009bfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c02:	431a      	orrs	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6a1b      	ldr	r3, [r3, #32]
 8009c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c0c:	ea42 0103 	orr.w	r1, r2, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	430a      	orrs	r2, r1
 8009c1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	699b      	ldr	r3, [r3, #24]
 8009c24:	0c1b      	lsrs	r3, r3, #16
 8009c26:	f003 0104 	and.w	r1, r3, #4
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2e:	f003 0210 	and.w	r2, r3, #16
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	430a      	orrs	r2, r1
 8009c38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	69da      	ldr	r2, [r3, #28]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2201      	movs	r2, #1
 8009c54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3708      	adds	r7, #8
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b08c      	sub	sp, #48	; 0x30
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	60f8      	str	r0, [r7, #12]
 8009c6a:	60b9      	str	r1, [r7, #8]
 8009c6c:	607a      	str	r2, [r7, #4]
 8009c6e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009c70:	2301      	movs	r3, #1
 8009c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009c74:	2300      	movs	r3, #0
 8009c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d101      	bne.n	8009c88 <HAL_SPI_TransmitReceive+0x26>
 8009c84:	2302      	movs	r3, #2
 8009c86:	e18a      	b.n	8009f9e <HAL_SPI_TransmitReceive+0x33c>
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c90:	f7fd fba2 	bl	80073d8 <HAL_GetTick>
 8009c94:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009ca6:	887b      	ldrh	r3, [r7, #2]
 8009ca8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009caa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d00f      	beq.n	8009cd2 <HAL_SPI_TransmitReceive+0x70>
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009cb8:	d107      	bne.n	8009cca <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d103      	bne.n	8009cca <HAL_SPI_TransmitReceive+0x68>
 8009cc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009cc6:	2b04      	cmp	r3, #4
 8009cc8:	d003      	beq.n	8009cd2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009cca:	2302      	movs	r3, #2
 8009ccc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009cd0:	e15b      	b.n	8009f8a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d005      	beq.n	8009ce4 <HAL_SPI_TransmitReceive+0x82>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d002      	beq.n	8009ce4 <HAL_SPI_TransmitReceive+0x82>
 8009cde:	887b      	ldrh	r3, [r7, #2]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d103      	bne.n	8009cec <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009cea:	e14e      	b.n	8009f8a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	2b04      	cmp	r3, #4
 8009cf6:	d003      	beq.n	8009d00 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2205      	movs	r2, #5
 8009cfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2200      	movs	r2, #0
 8009d04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	887a      	ldrh	r2, [r7, #2]
 8009d10:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	887a      	ldrh	r2, [r7, #2]
 8009d16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	68ba      	ldr	r2, [r7, #8]
 8009d1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	887a      	ldrh	r2, [r7, #2]
 8009d22:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	887a      	ldrh	r2, [r7, #2]
 8009d28:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2200      	movs	r2, #0
 8009d34:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d40:	2b40      	cmp	r3, #64	; 0x40
 8009d42:	d007      	beq.n	8009d54 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d5c:	d178      	bne.n	8009e50 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d002      	beq.n	8009d6c <HAL_SPI_TransmitReceive+0x10a>
 8009d66:	8b7b      	ldrh	r3, [r7, #26]
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d166      	bne.n	8009e3a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d70:	881a      	ldrh	r2, [r3, #0]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d7c:	1c9a      	adds	r2, r3, #2
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	3b01      	subs	r3, #1
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d90:	e053      	b.n	8009e3a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	f003 0302 	and.w	r3, r3, #2
 8009d9c:	2b02      	cmp	r3, #2
 8009d9e:	d11b      	bne.n	8009dd8 <HAL_SPI_TransmitReceive+0x176>
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d016      	beq.n	8009dd8 <HAL_SPI_TransmitReceive+0x176>
 8009daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d113      	bne.n	8009dd8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db4:	881a      	ldrh	r2, [r3, #0]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc0:	1c9a      	adds	r2, r3, #2
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	b29a      	uxth	r2, r3
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	f003 0301 	and.w	r3, r3, #1
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d119      	bne.n	8009e1a <HAL_SPI_TransmitReceive+0x1b8>
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d014      	beq.n	8009e1a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	68da      	ldr	r2, [r3, #12]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dfa:	b292      	uxth	r2, r2
 8009dfc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e02:	1c9a      	adds	r2, r3, #2
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	b29a      	uxth	r2, r3
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009e16:	2301      	movs	r3, #1
 8009e18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009e1a:	f7fd fadd 	bl	80073d8 <HAL_GetTick>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e22:	1ad3      	subs	r3, r2, r3
 8009e24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d807      	bhi.n	8009e3a <HAL_SPI_TransmitReceive+0x1d8>
 8009e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e30:	d003      	beq.n	8009e3a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009e32:	2303      	movs	r3, #3
 8009e34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009e38:	e0a7      	b.n	8009f8a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1a6      	bne.n	8009d92 <HAL_SPI_TransmitReceive+0x130>
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d1a1      	bne.n	8009d92 <HAL_SPI_TransmitReceive+0x130>
 8009e4e:	e07c      	b.n	8009f4a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d002      	beq.n	8009e5e <HAL_SPI_TransmitReceive+0x1fc>
 8009e58:	8b7b      	ldrh	r3, [r7, #26]
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d16b      	bne.n	8009f36 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	330c      	adds	r3, #12
 8009e68:	7812      	ldrb	r2, [r2, #0]
 8009e6a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e70:	1c5a      	adds	r2, r3, #1
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	b29a      	uxth	r2, r3
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e84:	e057      	b.n	8009f36 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	f003 0302 	and.w	r3, r3, #2
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	d11c      	bne.n	8009ece <HAL_SPI_TransmitReceive+0x26c>
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d017      	beq.n	8009ece <HAL_SPI_TransmitReceive+0x26c>
 8009e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d114      	bne.n	8009ece <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	330c      	adds	r3, #12
 8009eae:	7812      	ldrb	r2, [r2, #0]
 8009eb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eb6:	1c5a      	adds	r2, r3, #1
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	b29a      	uxth	r2, r3
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	f003 0301 	and.w	r3, r3, #1
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d119      	bne.n	8009f10 <HAL_SPI_TransmitReceive+0x2ae>
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d014      	beq.n	8009f10 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	68da      	ldr	r2, [r3, #12]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef0:	b2d2      	uxtb	r2, r2
 8009ef2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef8:	1c5a      	adds	r2, r3, #1
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	3b01      	subs	r3, #1
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009f10:	f7fd fa62 	bl	80073d8 <HAL_GetTick>
 8009f14:	4602      	mov	r2, r0
 8009f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d803      	bhi.n	8009f28 <HAL_SPI_TransmitReceive+0x2c6>
 8009f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f26:	d102      	bne.n	8009f2e <HAL_SPI_TransmitReceive+0x2cc>
 8009f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d103      	bne.n	8009f36 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009f2e:	2303      	movs	r3, #3
 8009f30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009f34:	e029      	b.n	8009f8a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1a2      	bne.n	8009e86 <HAL_SPI_TransmitReceive+0x224>
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d19d      	bne.n	8009e86 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f4e:	68f8      	ldr	r0, [r7, #12]
 8009f50:	f000 f8b2 	bl	800a0b8 <SPI_EndRxTxTransaction>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d006      	beq.n	8009f68 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2220      	movs	r2, #32
 8009f64:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009f66:	e010      	b.n	8009f8a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d10b      	bne.n	8009f88 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009f70:	2300      	movs	r3, #0
 8009f72:	617b      	str	r3, [r7, #20]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	617b      	str	r3, [r7, #20]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	617b      	str	r3, [r7, #20]
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	e000      	b.n	8009f8a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009f88:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009f9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3730      	adds	r7, #48	; 0x30
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
	...

08009fa8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b088      	sub	sp, #32
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	603b      	str	r3, [r7, #0]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009fb8:	f7fd fa0e 	bl	80073d8 <HAL_GetTick>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc0:	1a9b      	subs	r3, r3, r2
 8009fc2:	683a      	ldr	r2, [r7, #0]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009fc8:	f7fd fa06 	bl	80073d8 <HAL_GetTick>
 8009fcc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009fce:	4b39      	ldr	r3, [pc, #228]	; (800a0b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	015b      	lsls	r3, r3, #5
 8009fd4:	0d1b      	lsrs	r3, r3, #20
 8009fd6:	69fa      	ldr	r2, [r7, #28]
 8009fd8:	fb02 f303 	mul.w	r3, r2, r3
 8009fdc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009fde:	e054      	b.n	800a08a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe6:	d050      	beq.n	800a08a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009fe8:	f7fd f9f6 	bl	80073d8 <HAL_GetTick>
 8009fec:	4602      	mov	r2, r0
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	1ad3      	subs	r3, r2, r3
 8009ff2:	69fa      	ldr	r2, [r7, #28]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d902      	bls.n	8009ffe <SPI_WaitFlagStateUntilTimeout+0x56>
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d13d      	bne.n	800a07a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	685a      	ldr	r2, [r3, #4]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a00c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a016:	d111      	bne.n	800a03c <SPI_WaitFlagStateUntilTimeout+0x94>
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a020:	d004      	beq.n	800a02c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a02a:	d107      	bne.n	800a03c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a03a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a044:	d10f      	bne.n	800a066 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a054:	601a      	str	r2, [r3, #0]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a064:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2201      	movs	r2, #1
 800a06a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2200      	movs	r2, #0
 800a072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a076:	2303      	movs	r3, #3
 800a078:	e017      	b.n	800a0aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d101      	bne.n	800a084 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a080:	2300      	movs	r3, #0
 800a082:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	3b01      	subs	r3, #1
 800a088:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	689a      	ldr	r2, [r3, #8]
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	4013      	ands	r3, r2
 800a094:	68ba      	ldr	r2, [r7, #8]
 800a096:	429a      	cmp	r2, r3
 800a098:	bf0c      	ite	eq
 800a09a:	2301      	moveq	r3, #1
 800a09c:	2300      	movne	r3, #0
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	79fb      	ldrb	r3, [r7, #7]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d19b      	bne.n	8009fe0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3720      	adds	r7, #32
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	20000040 	.word	0x20000040

0800a0b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b088      	sub	sp, #32
 800a0bc:	af02      	add	r7, sp, #8
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a0c4:	4b1b      	ldr	r3, [pc, #108]	; (800a134 <SPI_EndRxTxTransaction+0x7c>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a1b      	ldr	r2, [pc, #108]	; (800a138 <SPI_EndRxTxTransaction+0x80>)
 800a0ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ce:	0d5b      	lsrs	r3, r3, #21
 800a0d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a0d4:	fb02 f303 	mul.w	r3, r2, r3
 800a0d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a0e2:	d112      	bne.n	800a10a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	9300      	str	r3, [sp, #0]
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	2180      	movs	r1, #128	; 0x80
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f7ff ff5a 	bl	8009fa8 <SPI_WaitFlagStateUntilTimeout>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d016      	beq.n	800a128 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0fe:	f043 0220 	orr.w	r2, r3, #32
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a106:	2303      	movs	r3, #3
 800a108:	e00f      	b.n	800a12a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d00a      	beq.n	800a126 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	3b01      	subs	r3, #1
 800a114:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a120:	2b80      	cmp	r3, #128	; 0x80
 800a122:	d0f2      	beq.n	800a10a <SPI_EndRxTxTransaction+0x52>
 800a124:	e000      	b.n	800a128 <SPI_EndRxTxTransaction+0x70>
        break;
 800a126:	bf00      	nop
  }

  return HAL_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3718      	adds	r7, #24
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	20000040 	.word	0x20000040
 800a138:	165e9f81 	.word	0x165e9f81

0800a13c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d101      	bne.n	800a14e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	e041      	b.n	800a1d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a154:	b2db      	uxtb	r3, r3
 800a156:	2b00      	cmp	r3, #0
 800a158:	d106      	bne.n	800a168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f7fc fb0a 	bl	800677c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2202      	movs	r2, #2
 800a16c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	3304      	adds	r3, #4
 800a178:	4619      	mov	r1, r3
 800a17a:	4610      	mov	r0, r2
 800a17c:	f000 fc7c 	bl	800aa78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2201      	movs	r2, #1
 800a18c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2201      	movs	r2, #1
 800a194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2201      	movs	r2, #1
 800a19c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
	...

0800a1dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d001      	beq.n	800a1f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e04e      	b.n	800a292 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2202      	movs	r2, #2
 800a1f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	68da      	ldr	r2, [r3, #12]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f042 0201 	orr.w	r2, r2, #1
 800a20a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a23      	ldr	r2, [pc, #140]	; (800a2a0 <HAL_TIM_Base_Start_IT+0xc4>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d022      	beq.n	800a25c <HAL_TIM_Base_Start_IT+0x80>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a21e:	d01d      	beq.n	800a25c <HAL_TIM_Base_Start_IT+0x80>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a1f      	ldr	r2, [pc, #124]	; (800a2a4 <HAL_TIM_Base_Start_IT+0xc8>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d018      	beq.n	800a25c <HAL_TIM_Base_Start_IT+0x80>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a1e      	ldr	r2, [pc, #120]	; (800a2a8 <HAL_TIM_Base_Start_IT+0xcc>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d013      	beq.n	800a25c <HAL_TIM_Base_Start_IT+0x80>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a1c      	ldr	r2, [pc, #112]	; (800a2ac <HAL_TIM_Base_Start_IT+0xd0>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d00e      	beq.n	800a25c <HAL_TIM_Base_Start_IT+0x80>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a1b      	ldr	r2, [pc, #108]	; (800a2b0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d009      	beq.n	800a25c <HAL_TIM_Base_Start_IT+0x80>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a19      	ldr	r2, [pc, #100]	; (800a2b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d004      	beq.n	800a25c <HAL_TIM_Base_Start_IT+0x80>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a18      	ldr	r2, [pc, #96]	; (800a2b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d111      	bne.n	800a280 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	f003 0307 	and.w	r3, r3, #7
 800a266:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2b06      	cmp	r3, #6
 800a26c:	d010      	beq.n	800a290 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f042 0201 	orr.w	r2, r2, #1
 800a27c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a27e:	e007      	b.n	800a290 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f042 0201 	orr.w	r2, r2, #1
 800a28e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3714      	adds	r7, #20
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr
 800a29e:	bf00      	nop
 800a2a0:	40010000 	.word	0x40010000
 800a2a4:	40000400 	.word	0x40000400
 800a2a8:	40000800 	.word	0x40000800
 800a2ac:	40000c00 	.word	0x40000c00
 800a2b0:	40010400 	.word	0x40010400
 800a2b4:	40014000 	.word	0x40014000
 800a2b8:	40001800 	.word	0x40001800

0800a2bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d101      	bne.n	800a2ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e041      	b.n	800a352 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d106      	bne.n	800a2e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 f839 	bl	800a35a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2202      	movs	r2, #2
 800a2ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	3304      	adds	r3, #4
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	4610      	mov	r0, r2
 800a2fc:	f000 fbbc 	bl	800aa78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2201      	movs	r2, #1
 800a324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2201      	movs	r2, #1
 800a32c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2201      	movs	r2, #1
 800a334:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2201      	movs	r2, #1
 800a344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3708      	adds	r7, #8
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a35a:	b480      	push	{r7}
 800a35c:	b083      	sub	sp, #12
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a362:	bf00      	nop
 800a364:	370c      	adds	r7, #12
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr
	...

0800a370 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d109      	bne.n	800a394 <HAL_TIM_PWM_Start+0x24>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a386:	b2db      	uxtb	r3, r3
 800a388:	2b01      	cmp	r3, #1
 800a38a:	bf14      	ite	ne
 800a38c:	2301      	movne	r3, #1
 800a38e:	2300      	moveq	r3, #0
 800a390:	b2db      	uxtb	r3, r3
 800a392:	e022      	b.n	800a3da <HAL_TIM_PWM_Start+0x6a>
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	2b04      	cmp	r3, #4
 800a398:	d109      	bne.n	800a3ae <HAL_TIM_PWM_Start+0x3e>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	bf14      	ite	ne
 800a3a6:	2301      	movne	r3, #1
 800a3a8:	2300      	moveq	r3, #0
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	e015      	b.n	800a3da <HAL_TIM_PWM_Start+0x6a>
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	2b08      	cmp	r3, #8
 800a3b2:	d109      	bne.n	800a3c8 <HAL_TIM_PWM_Start+0x58>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	bf14      	ite	ne
 800a3c0:	2301      	movne	r3, #1
 800a3c2:	2300      	moveq	r3, #0
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	e008      	b.n	800a3da <HAL_TIM_PWM_Start+0x6a>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	bf14      	ite	ne
 800a3d4:	2301      	movne	r3, #1
 800a3d6:	2300      	moveq	r3, #0
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d001      	beq.n	800a3e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e07c      	b.n	800a4dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d104      	bne.n	800a3f2 <HAL_TIM_PWM_Start+0x82>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2202      	movs	r2, #2
 800a3ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3f0:	e013      	b.n	800a41a <HAL_TIM_PWM_Start+0xaa>
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	2b04      	cmp	r3, #4
 800a3f6:	d104      	bne.n	800a402 <HAL_TIM_PWM_Start+0x92>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2202      	movs	r2, #2
 800a3fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a400:	e00b      	b.n	800a41a <HAL_TIM_PWM_Start+0xaa>
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	2b08      	cmp	r3, #8
 800a406:	d104      	bne.n	800a412 <HAL_TIM_PWM_Start+0xa2>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2202      	movs	r2, #2
 800a40c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a410:	e003      	b.n	800a41a <HAL_TIM_PWM_Start+0xaa>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2202      	movs	r2, #2
 800a416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2201      	movs	r2, #1
 800a420:	6839      	ldr	r1, [r7, #0]
 800a422:	4618      	mov	r0, r3
 800a424:	f000 fe12 	bl	800b04c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a2d      	ldr	r2, [pc, #180]	; (800a4e4 <HAL_TIM_PWM_Start+0x174>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d004      	beq.n	800a43c <HAL_TIM_PWM_Start+0xcc>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a2c      	ldr	r2, [pc, #176]	; (800a4e8 <HAL_TIM_PWM_Start+0x178>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d101      	bne.n	800a440 <HAL_TIM_PWM_Start+0xd0>
 800a43c:	2301      	movs	r3, #1
 800a43e:	e000      	b.n	800a442 <HAL_TIM_PWM_Start+0xd2>
 800a440:	2300      	movs	r3, #0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d007      	beq.n	800a456 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a454:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a22      	ldr	r2, [pc, #136]	; (800a4e4 <HAL_TIM_PWM_Start+0x174>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d022      	beq.n	800a4a6 <HAL_TIM_PWM_Start+0x136>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a468:	d01d      	beq.n	800a4a6 <HAL_TIM_PWM_Start+0x136>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a1f      	ldr	r2, [pc, #124]	; (800a4ec <HAL_TIM_PWM_Start+0x17c>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d018      	beq.n	800a4a6 <HAL_TIM_PWM_Start+0x136>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a1d      	ldr	r2, [pc, #116]	; (800a4f0 <HAL_TIM_PWM_Start+0x180>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d013      	beq.n	800a4a6 <HAL_TIM_PWM_Start+0x136>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a1c      	ldr	r2, [pc, #112]	; (800a4f4 <HAL_TIM_PWM_Start+0x184>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d00e      	beq.n	800a4a6 <HAL_TIM_PWM_Start+0x136>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a16      	ldr	r2, [pc, #88]	; (800a4e8 <HAL_TIM_PWM_Start+0x178>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d009      	beq.n	800a4a6 <HAL_TIM_PWM_Start+0x136>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a18      	ldr	r2, [pc, #96]	; (800a4f8 <HAL_TIM_PWM_Start+0x188>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d004      	beq.n	800a4a6 <HAL_TIM_PWM_Start+0x136>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a16      	ldr	r2, [pc, #88]	; (800a4fc <HAL_TIM_PWM_Start+0x18c>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d111      	bne.n	800a4ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	f003 0307 	and.w	r3, r3, #7
 800a4b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2b06      	cmp	r3, #6
 800a4b6:	d010      	beq.n	800a4da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f042 0201 	orr.w	r2, r2, #1
 800a4c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4c8:	e007      	b.n	800a4da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f042 0201 	orr.w	r2, r2, #1
 800a4d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a4da:	2300      	movs	r3, #0
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3710      	adds	r7, #16
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}
 800a4e4:	40010000 	.word	0x40010000
 800a4e8:	40010400 	.word	0x40010400
 800a4ec:	40000400 	.word	0x40000400
 800a4f0:	40000800 	.word	0x40000800
 800a4f4:	40000c00 	.word	0x40000c00
 800a4f8:	40014000 	.word	0x40014000
 800a4fc:	40001800 	.word	0x40001800

0800a500 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	691b      	ldr	r3, [r3, #16]
 800a50e:	f003 0302 	and.w	r3, r3, #2
 800a512:	2b02      	cmp	r3, #2
 800a514:	d122      	bne.n	800a55c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	f003 0302 	and.w	r3, r3, #2
 800a520:	2b02      	cmp	r3, #2
 800a522:	d11b      	bne.n	800a55c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f06f 0202 	mvn.w	r2, #2
 800a52c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2201      	movs	r2, #1
 800a532:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	699b      	ldr	r3, [r3, #24]
 800a53a:	f003 0303 	and.w	r3, r3, #3
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d003      	beq.n	800a54a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 fa7a 	bl	800aa3c <HAL_TIM_IC_CaptureCallback>
 800a548:	e005      	b.n	800a556 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 fa6c 	bl	800aa28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 fa7d 	bl	800aa50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2200      	movs	r2, #0
 800a55a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	691b      	ldr	r3, [r3, #16]
 800a562:	f003 0304 	and.w	r3, r3, #4
 800a566:	2b04      	cmp	r3, #4
 800a568:	d122      	bne.n	800a5b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	f003 0304 	and.w	r3, r3, #4
 800a574:	2b04      	cmp	r3, #4
 800a576:	d11b      	bne.n	800a5b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f06f 0204 	mvn.w	r2, #4
 800a580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2202      	movs	r2, #2
 800a586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	699b      	ldr	r3, [r3, #24]
 800a58e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a592:	2b00      	cmp	r3, #0
 800a594:	d003      	beq.n	800a59e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 fa50 	bl	800aa3c <HAL_TIM_IC_CaptureCallback>
 800a59c:	e005      	b.n	800a5aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 fa42 	bl	800aa28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 fa53 	bl	800aa50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	691b      	ldr	r3, [r3, #16]
 800a5b6:	f003 0308 	and.w	r3, r3, #8
 800a5ba:	2b08      	cmp	r3, #8
 800a5bc:	d122      	bne.n	800a604 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	f003 0308 	and.w	r3, r3, #8
 800a5c8:	2b08      	cmp	r3, #8
 800a5ca:	d11b      	bne.n	800a604 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f06f 0208 	mvn.w	r2, #8
 800a5d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2204      	movs	r2, #4
 800a5da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	69db      	ldr	r3, [r3, #28]
 800a5e2:	f003 0303 	and.w	r3, r3, #3
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d003      	beq.n	800a5f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 fa26 	bl	800aa3c <HAL_TIM_IC_CaptureCallback>
 800a5f0:	e005      	b.n	800a5fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 fa18 	bl	800aa28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 fa29 	bl	800aa50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	691b      	ldr	r3, [r3, #16]
 800a60a:	f003 0310 	and.w	r3, r3, #16
 800a60e:	2b10      	cmp	r3, #16
 800a610:	d122      	bne.n	800a658 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	f003 0310 	and.w	r3, r3, #16
 800a61c:	2b10      	cmp	r3, #16
 800a61e:	d11b      	bne.n	800a658 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f06f 0210 	mvn.w	r2, #16
 800a628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2208      	movs	r2, #8
 800a62e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	69db      	ldr	r3, [r3, #28]
 800a636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d003      	beq.n	800a646 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 f9fc 	bl	800aa3c <HAL_TIM_IC_CaptureCallback>
 800a644:	e005      	b.n	800a652 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 f9ee 	bl	800aa28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f000 f9ff 	bl	800aa50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2200      	movs	r2, #0
 800a656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	691b      	ldr	r3, [r3, #16]
 800a65e:	f003 0301 	and.w	r3, r3, #1
 800a662:	2b01      	cmp	r3, #1
 800a664:	d10e      	bne.n	800a684 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	f003 0301 	and.w	r3, r3, #1
 800a670:	2b01      	cmp	r3, #1
 800a672:	d107      	bne.n	800a684 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f06f 0201 	mvn.w	r2, #1
 800a67c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f9c8 	bl	800aa14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	691b      	ldr	r3, [r3, #16]
 800a68a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a68e:	2b80      	cmp	r3, #128	; 0x80
 800a690:	d10e      	bne.n	800a6b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a69c:	2b80      	cmp	r3, #128	; 0x80
 800a69e:	d107      	bne.n	800a6b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a6a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 fdcc 	bl	800b248 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ba:	2b40      	cmp	r3, #64	; 0x40
 800a6bc:	d10e      	bne.n	800a6dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6c8:	2b40      	cmp	r3, #64	; 0x40
 800a6ca:	d107      	bne.n	800a6dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a6d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 f9c4 	bl	800aa64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	691b      	ldr	r3, [r3, #16]
 800a6e2:	f003 0320 	and.w	r3, r3, #32
 800a6e6:	2b20      	cmp	r3, #32
 800a6e8:	d10e      	bne.n	800a708 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	68db      	ldr	r3, [r3, #12]
 800a6f0:	f003 0320 	and.w	r3, r3, #32
 800a6f4:	2b20      	cmp	r3, #32
 800a6f6:	d107      	bne.n	800a708 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f06f 0220 	mvn.w	r2, #32
 800a700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 fd96 	bl	800b234 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a708:	bf00      	nop
 800a70a:	3708      	adds	r7, #8
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a722:	2b01      	cmp	r3, #1
 800a724:	d101      	bne.n	800a72a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a726:	2302      	movs	r3, #2
 800a728:	e0ac      	b.n	800a884 <HAL_TIM_PWM_ConfigChannel+0x174>
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2201      	movs	r2, #1
 800a72e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2b0c      	cmp	r3, #12
 800a736:	f200 809f 	bhi.w	800a878 <HAL_TIM_PWM_ConfigChannel+0x168>
 800a73a:	a201      	add	r2, pc, #4	; (adr r2, 800a740 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a740:	0800a775 	.word	0x0800a775
 800a744:	0800a879 	.word	0x0800a879
 800a748:	0800a879 	.word	0x0800a879
 800a74c:	0800a879 	.word	0x0800a879
 800a750:	0800a7b5 	.word	0x0800a7b5
 800a754:	0800a879 	.word	0x0800a879
 800a758:	0800a879 	.word	0x0800a879
 800a75c:	0800a879 	.word	0x0800a879
 800a760:	0800a7f7 	.word	0x0800a7f7
 800a764:	0800a879 	.word	0x0800a879
 800a768:	0800a879 	.word	0x0800a879
 800a76c:	0800a879 	.word	0x0800a879
 800a770:	0800a837 	.word	0x0800a837
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	68b9      	ldr	r1, [r7, #8]
 800a77a:	4618      	mov	r0, r3
 800a77c:	f000 fa1c 	bl	800abb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	699a      	ldr	r2, [r3, #24]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f042 0208 	orr.w	r2, r2, #8
 800a78e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	699a      	ldr	r2, [r3, #24]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f022 0204 	bic.w	r2, r2, #4
 800a79e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	6999      	ldr	r1, [r3, #24]
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	691a      	ldr	r2, [r3, #16]
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	430a      	orrs	r2, r1
 800a7b0:	619a      	str	r2, [r3, #24]
      break;
 800a7b2:	e062      	b.n	800a87a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	68b9      	ldr	r1, [r7, #8]
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f000 fa6c 	bl	800ac98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	699a      	ldr	r2, [r3, #24]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	699a      	ldr	r2, [r3, #24]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	6999      	ldr	r1, [r3, #24]
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	021a      	lsls	r2, r3, #8
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	430a      	orrs	r2, r1
 800a7f2:	619a      	str	r2, [r3, #24]
      break;
 800a7f4:	e041      	b.n	800a87a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	68b9      	ldr	r1, [r7, #8]
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f000 fac1 	bl	800ad84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	69da      	ldr	r2, [r3, #28]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f042 0208 	orr.w	r2, r2, #8
 800a810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	69da      	ldr	r2, [r3, #28]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f022 0204 	bic.w	r2, r2, #4
 800a820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	69d9      	ldr	r1, [r3, #28]
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	691a      	ldr	r2, [r3, #16]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	430a      	orrs	r2, r1
 800a832:	61da      	str	r2, [r3, #28]
      break;
 800a834:	e021      	b.n	800a87a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	68b9      	ldr	r1, [r7, #8]
 800a83c:	4618      	mov	r0, r3
 800a83e:	f000 fb15 	bl	800ae6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	69da      	ldr	r2, [r3, #28]
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	69da      	ldr	r2, [r3, #28]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	69d9      	ldr	r1, [r3, #28]
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	691b      	ldr	r3, [r3, #16]
 800a86c:	021a      	lsls	r2, r3, #8
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	430a      	orrs	r2, r1
 800a874:	61da      	str	r2, [r3, #28]
      break;
 800a876:	e000      	b.n	800a87a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800a878:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2200      	movs	r2, #0
 800a87e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	3710      	adds	r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d101      	bne.n	800a8a4 <HAL_TIM_ConfigClockSource+0x18>
 800a8a0:	2302      	movs	r3, #2
 800a8a2:	e0b3      	b.n	800aa0c <HAL_TIM_ConfigClockSource+0x180>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2202      	movs	r2, #2
 800a8b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	689b      	ldr	r3, [r3, #8]
 800a8ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a8c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a8ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	68fa      	ldr	r2, [r7, #12]
 800a8d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8dc:	d03e      	beq.n	800a95c <HAL_TIM_ConfigClockSource+0xd0>
 800a8de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8e2:	f200 8087 	bhi.w	800a9f4 <HAL_TIM_ConfigClockSource+0x168>
 800a8e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8ea:	f000 8085 	beq.w	800a9f8 <HAL_TIM_ConfigClockSource+0x16c>
 800a8ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8f2:	d87f      	bhi.n	800a9f4 <HAL_TIM_ConfigClockSource+0x168>
 800a8f4:	2b70      	cmp	r3, #112	; 0x70
 800a8f6:	d01a      	beq.n	800a92e <HAL_TIM_ConfigClockSource+0xa2>
 800a8f8:	2b70      	cmp	r3, #112	; 0x70
 800a8fa:	d87b      	bhi.n	800a9f4 <HAL_TIM_ConfigClockSource+0x168>
 800a8fc:	2b60      	cmp	r3, #96	; 0x60
 800a8fe:	d050      	beq.n	800a9a2 <HAL_TIM_ConfigClockSource+0x116>
 800a900:	2b60      	cmp	r3, #96	; 0x60
 800a902:	d877      	bhi.n	800a9f4 <HAL_TIM_ConfigClockSource+0x168>
 800a904:	2b50      	cmp	r3, #80	; 0x50
 800a906:	d03c      	beq.n	800a982 <HAL_TIM_ConfigClockSource+0xf6>
 800a908:	2b50      	cmp	r3, #80	; 0x50
 800a90a:	d873      	bhi.n	800a9f4 <HAL_TIM_ConfigClockSource+0x168>
 800a90c:	2b40      	cmp	r3, #64	; 0x40
 800a90e:	d058      	beq.n	800a9c2 <HAL_TIM_ConfigClockSource+0x136>
 800a910:	2b40      	cmp	r3, #64	; 0x40
 800a912:	d86f      	bhi.n	800a9f4 <HAL_TIM_ConfigClockSource+0x168>
 800a914:	2b30      	cmp	r3, #48	; 0x30
 800a916:	d064      	beq.n	800a9e2 <HAL_TIM_ConfigClockSource+0x156>
 800a918:	2b30      	cmp	r3, #48	; 0x30
 800a91a:	d86b      	bhi.n	800a9f4 <HAL_TIM_ConfigClockSource+0x168>
 800a91c:	2b20      	cmp	r3, #32
 800a91e:	d060      	beq.n	800a9e2 <HAL_TIM_ConfigClockSource+0x156>
 800a920:	2b20      	cmp	r3, #32
 800a922:	d867      	bhi.n	800a9f4 <HAL_TIM_ConfigClockSource+0x168>
 800a924:	2b00      	cmp	r3, #0
 800a926:	d05c      	beq.n	800a9e2 <HAL_TIM_ConfigClockSource+0x156>
 800a928:	2b10      	cmp	r3, #16
 800a92a:	d05a      	beq.n	800a9e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a92c:	e062      	b.n	800a9f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6818      	ldr	r0, [r3, #0]
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	6899      	ldr	r1, [r3, #8]
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	685a      	ldr	r2, [r3, #4]
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	f000 fb65 	bl	800b00c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a950:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	68fa      	ldr	r2, [r7, #12]
 800a958:	609a      	str	r2, [r3, #8]
      break;
 800a95a:	e04e      	b.n	800a9fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6818      	ldr	r0, [r3, #0]
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	6899      	ldr	r1, [r3, #8]
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	685a      	ldr	r2, [r3, #4]
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	68db      	ldr	r3, [r3, #12]
 800a96c:	f000 fb4e 	bl	800b00c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	689a      	ldr	r2, [r3, #8]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a97e:	609a      	str	r2, [r3, #8]
      break;
 800a980:	e03b      	b.n	800a9fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6818      	ldr	r0, [r3, #0]
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	6859      	ldr	r1, [r3, #4]
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	461a      	mov	r2, r3
 800a990:	f000 fac2 	bl	800af18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2150      	movs	r1, #80	; 0x50
 800a99a:	4618      	mov	r0, r3
 800a99c:	f000 fb1b 	bl	800afd6 <TIM_ITRx_SetConfig>
      break;
 800a9a0:	e02b      	b.n	800a9fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6818      	ldr	r0, [r3, #0]
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	6859      	ldr	r1, [r3, #4]
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	68db      	ldr	r3, [r3, #12]
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	f000 fae1 	bl	800af76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2160      	movs	r1, #96	; 0x60
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f000 fb0b 	bl	800afd6 <TIM_ITRx_SetConfig>
      break;
 800a9c0:	e01b      	b.n	800a9fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6818      	ldr	r0, [r3, #0]
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	6859      	ldr	r1, [r3, #4]
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	68db      	ldr	r3, [r3, #12]
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	f000 faa2 	bl	800af18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2140      	movs	r1, #64	; 0x40
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f000 fafb 	bl	800afd6 <TIM_ITRx_SetConfig>
      break;
 800a9e0:	e00b      	b.n	800a9fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	4610      	mov	r0, r2
 800a9ee:	f000 faf2 	bl	800afd6 <TIM_ITRx_SetConfig>
        break;
 800a9f2:	e002      	b.n	800a9fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a9f4:	bf00      	nop
 800a9f6:	e000      	b.n	800a9fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a9f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2200      	movs	r2, #0
 800aa06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa0a:	2300      	movs	r3, #0
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3710      	adds	r7, #16
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}

0800aa14 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800aa1c:	bf00      	nop
 800aa1e:	370c      	adds	r7, #12
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b083      	sub	sp, #12
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa30:	bf00      	nop
 800aa32:	370c      	adds	r7, #12
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr

0800aa3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa44:	bf00      	nop
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa58:	bf00      	nop
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b085      	sub	sp, #20
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	4a40      	ldr	r2, [pc, #256]	; (800ab8c <TIM_Base_SetConfig+0x114>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d013      	beq.n	800aab8 <TIM_Base_SetConfig+0x40>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa96:	d00f      	beq.n	800aab8 <TIM_Base_SetConfig+0x40>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	4a3d      	ldr	r2, [pc, #244]	; (800ab90 <TIM_Base_SetConfig+0x118>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d00b      	beq.n	800aab8 <TIM_Base_SetConfig+0x40>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	4a3c      	ldr	r2, [pc, #240]	; (800ab94 <TIM_Base_SetConfig+0x11c>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d007      	beq.n	800aab8 <TIM_Base_SetConfig+0x40>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	4a3b      	ldr	r2, [pc, #236]	; (800ab98 <TIM_Base_SetConfig+0x120>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d003      	beq.n	800aab8 <TIM_Base_SetConfig+0x40>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4a3a      	ldr	r2, [pc, #232]	; (800ab9c <TIM_Base_SetConfig+0x124>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d108      	bne.n	800aaca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aabe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	68fa      	ldr	r2, [r7, #12]
 800aac6:	4313      	orrs	r3, r2
 800aac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	4a2f      	ldr	r2, [pc, #188]	; (800ab8c <TIM_Base_SetConfig+0x114>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d02b      	beq.n	800ab2a <TIM_Base_SetConfig+0xb2>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aad8:	d027      	beq.n	800ab2a <TIM_Base_SetConfig+0xb2>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	4a2c      	ldr	r2, [pc, #176]	; (800ab90 <TIM_Base_SetConfig+0x118>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d023      	beq.n	800ab2a <TIM_Base_SetConfig+0xb2>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	4a2b      	ldr	r2, [pc, #172]	; (800ab94 <TIM_Base_SetConfig+0x11c>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d01f      	beq.n	800ab2a <TIM_Base_SetConfig+0xb2>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4a2a      	ldr	r2, [pc, #168]	; (800ab98 <TIM_Base_SetConfig+0x120>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d01b      	beq.n	800ab2a <TIM_Base_SetConfig+0xb2>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4a29      	ldr	r2, [pc, #164]	; (800ab9c <TIM_Base_SetConfig+0x124>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d017      	beq.n	800ab2a <TIM_Base_SetConfig+0xb2>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4a28      	ldr	r2, [pc, #160]	; (800aba0 <TIM_Base_SetConfig+0x128>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d013      	beq.n	800ab2a <TIM_Base_SetConfig+0xb2>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	4a27      	ldr	r2, [pc, #156]	; (800aba4 <TIM_Base_SetConfig+0x12c>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d00f      	beq.n	800ab2a <TIM_Base_SetConfig+0xb2>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	4a26      	ldr	r2, [pc, #152]	; (800aba8 <TIM_Base_SetConfig+0x130>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d00b      	beq.n	800ab2a <TIM_Base_SetConfig+0xb2>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	4a25      	ldr	r2, [pc, #148]	; (800abac <TIM_Base_SetConfig+0x134>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d007      	beq.n	800ab2a <TIM_Base_SetConfig+0xb2>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	4a24      	ldr	r2, [pc, #144]	; (800abb0 <TIM_Base_SetConfig+0x138>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d003      	beq.n	800ab2a <TIM_Base_SetConfig+0xb2>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	4a23      	ldr	r2, [pc, #140]	; (800abb4 <TIM_Base_SetConfig+0x13c>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d108      	bne.n	800ab3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	68fa      	ldr	r2, [r7, #12]
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	695b      	ldr	r3, [r3, #20]
 800ab46:	4313      	orrs	r3, r2
 800ab48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	689a      	ldr	r2, [r3, #8]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	4a0a      	ldr	r2, [pc, #40]	; (800ab8c <TIM_Base_SetConfig+0x114>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d003      	beq.n	800ab70 <TIM_Base_SetConfig+0xf8>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	4a0c      	ldr	r2, [pc, #48]	; (800ab9c <TIM_Base_SetConfig+0x124>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d103      	bne.n	800ab78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	691a      	ldr	r2, [r3, #16]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	615a      	str	r2, [r3, #20]
}
 800ab7e:	bf00      	nop
 800ab80:	3714      	adds	r7, #20
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr
 800ab8a:	bf00      	nop
 800ab8c:	40010000 	.word	0x40010000
 800ab90:	40000400 	.word	0x40000400
 800ab94:	40000800 	.word	0x40000800
 800ab98:	40000c00 	.word	0x40000c00
 800ab9c:	40010400 	.word	0x40010400
 800aba0:	40014000 	.word	0x40014000
 800aba4:	40014400 	.word	0x40014400
 800aba8:	40014800 	.word	0x40014800
 800abac:	40001800 	.word	0x40001800
 800abb0:	40001c00 	.word	0x40001c00
 800abb4:	40002000 	.word	0x40002000

0800abb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abb8:	b480      	push	{r7}
 800abba:	b087      	sub	sp, #28
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6a1b      	ldr	r3, [r3, #32]
 800abc6:	f023 0201 	bic.w	r2, r3, #1
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6a1b      	ldr	r3, [r3, #32]
 800abd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	699b      	ldr	r3, [r3, #24]
 800abde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f023 0303 	bic.w	r3, r3, #3
 800abee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	68fa      	ldr	r2, [r7, #12]
 800abf6:	4313      	orrs	r3, r2
 800abf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	f023 0302 	bic.w	r3, r3, #2
 800ac00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	689b      	ldr	r3, [r3, #8]
 800ac06:	697a      	ldr	r2, [r7, #20]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4a20      	ldr	r2, [pc, #128]	; (800ac90 <TIM_OC1_SetConfig+0xd8>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d003      	beq.n	800ac1c <TIM_OC1_SetConfig+0x64>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	4a1f      	ldr	r2, [pc, #124]	; (800ac94 <TIM_OC1_SetConfig+0xdc>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d10c      	bne.n	800ac36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	f023 0308 	bic.w	r3, r3, #8
 800ac22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	697a      	ldr	r2, [r7, #20]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	f023 0304 	bic.w	r3, r3, #4
 800ac34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	4a15      	ldr	r2, [pc, #84]	; (800ac90 <TIM_OC1_SetConfig+0xd8>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d003      	beq.n	800ac46 <TIM_OC1_SetConfig+0x8e>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	4a14      	ldr	r2, [pc, #80]	; (800ac94 <TIM_OC1_SetConfig+0xdc>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d111      	bne.n	800ac6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	695b      	ldr	r3, [r3, #20]
 800ac5a:	693a      	ldr	r2, [r7, #16]
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	699b      	ldr	r3, [r3, #24]
 800ac64:	693a      	ldr	r2, [r7, #16]
 800ac66:	4313      	orrs	r3, r2
 800ac68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	693a      	ldr	r2, [r7, #16]
 800ac6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	68fa      	ldr	r2, [r7, #12]
 800ac74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	685a      	ldr	r2, [r3, #4]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	697a      	ldr	r2, [r7, #20]
 800ac82:	621a      	str	r2, [r3, #32]
}
 800ac84:	bf00      	nop
 800ac86:	371c      	adds	r7, #28
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr
 800ac90:	40010000 	.word	0x40010000
 800ac94:	40010400 	.word	0x40010400

0800ac98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b087      	sub	sp, #28
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a1b      	ldr	r3, [r3, #32]
 800aca6:	f023 0210 	bic.w	r2, r3, #16
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6a1b      	ldr	r3, [r3, #32]
 800acb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	699b      	ldr	r3, [r3, #24]
 800acbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	021b      	lsls	r3, r3, #8
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	4313      	orrs	r3, r2
 800acda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	f023 0320 	bic.w	r3, r3, #32
 800ace2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	011b      	lsls	r3, r3, #4
 800acea:	697a      	ldr	r2, [r7, #20]
 800acec:	4313      	orrs	r3, r2
 800acee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	4a22      	ldr	r2, [pc, #136]	; (800ad7c <TIM_OC2_SetConfig+0xe4>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d003      	beq.n	800ad00 <TIM_OC2_SetConfig+0x68>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4a21      	ldr	r2, [pc, #132]	; (800ad80 <TIM_OC2_SetConfig+0xe8>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d10d      	bne.n	800ad1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	011b      	lsls	r3, r3, #4
 800ad0e:	697a      	ldr	r2, [r7, #20]
 800ad10:	4313      	orrs	r3, r2
 800ad12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	4a17      	ldr	r2, [pc, #92]	; (800ad7c <TIM_OC2_SetConfig+0xe4>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d003      	beq.n	800ad2c <TIM_OC2_SetConfig+0x94>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	4a16      	ldr	r2, [pc, #88]	; (800ad80 <TIM_OC2_SetConfig+0xe8>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d113      	bne.n	800ad54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ad32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	695b      	ldr	r3, [r3, #20]
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	693a      	ldr	r2, [r7, #16]
 800ad44:	4313      	orrs	r3, r2
 800ad46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	699b      	ldr	r3, [r3, #24]
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	693a      	ldr	r2, [r7, #16]
 800ad50:	4313      	orrs	r3, r2
 800ad52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	693a      	ldr	r2, [r7, #16]
 800ad58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	685a      	ldr	r2, [r3, #4]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	697a      	ldr	r2, [r7, #20]
 800ad6c:	621a      	str	r2, [r3, #32]
}
 800ad6e:	bf00      	nop
 800ad70:	371c      	adds	r7, #28
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr
 800ad7a:	bf00      	nop
 800ad7c:	40010000 	.word	0x40010000
 800ad80:	40010400 	.word	0x40010400

0800ad84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b087      	sub	sp, #28
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6a1b      	ldr	r3, [r3, #32]
 800ad92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6a1b      	ldr	r3, [r3, #32]
 800ad9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	69db      	ldr	r3, [r3, #28]
 800adaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f023 0303 	bic.w	r3, r3, #3
 800adba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	68fa      	ldr	r2, [r7, #12]
 800adc2:	4313      	orrs	r3, r2
 800adc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800adcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	021b      	lsls	r3, r3, #8
 800add4:	697a      	ldr	r2, [r7, #20]
 800add6:	4313      	orrs	r3, r2
 800add8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	4a21      	ldr	r2, [pc, #132]	; (800ae64 <TIM_OC3_SetConfig+0xe0>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d003      	beq.n	800adea <TIM_OC3_SetConfig+0x66>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	4a20      	ldr	r2, [pc, #128]	; (800ae68 <TIM_OC3_SetConfig+0xe4>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d10d      	bne.n	800ae06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800adf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	021b      	lsls	r3, r3, #8
 800adf8:	697a      	ldr	r2, [r7, #20]
 800adfa:	4313      	orrs	r3, r2
 800adfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	4a16      	ldr	r2, [pc, #88]	; (800ae64 <TIM_OC3_SetConfig+0xe0>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d003      	beq.n	800ae16 <TIM_OC3_SetConfig+0x92>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4a15      	ldr	r2, [pc, #84]	; (800ae68 <TIM_OC3_SetConfig+0xe4>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d113      	bne.n	800ae3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	695b      	ldr	r3, [r3, #20]
 800ae2a:	011b      	lsls	r3, r3, #4
 800ae2c:	693a      	ldr	r2, [r7, #16]
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	699b      	ldr	r3, [r3, #24]
 800ae36:	011b      	lsls	r3, r3, #4
 800ae38:	693a      	ldr	r2, [r7, #16]
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	693a      	ldr	r2, [r7, #16]
 800ae42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	68fa      	ldr	r2, [r7, #12]
 800ae48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	685a      	ldr	r2, [r3, #4]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	697a      	ldr	r2, [r7, #20]
 800ae56:	621a      	str	r2, [r3, #32]
}
 800ae58:	bf00      	nop
 800ae5a:	371c      	adds	r7, #28
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr
 800ae64:	40010000 	.word	0x40010000
 800ae68:	40010400 	.word	0x40010400

0800ae6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b087      	sub	sp, #28
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6a1b      	ldr	r3, [r3, #32]
 800ae7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6a1b      	ldr	r3, [r3, #32]
 800ae86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	69db      	ldr	r3, [r3, #28]
 800ae92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	021b      	lsls	r3, r3, #8
 800aeaa:	68fa      	ldr	r2, [r7, #12]
 800aeac:	4313      	orrs	r3, r2
 800aeae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aeb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	689b      	ldr	r3, [r3, #8]
 800aebc:	031b      	lsls	r3, r3, #12
 800aebe:	693a      	ldr	r2, [r7, #16]
 800aec0:	4313      	orrs	r3, r2
 800aec2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	4a12      	ldr	r2, [pc, #72]	; (800af10 <TIM_OC4_SetConfig+0xa4>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d003      	beq.n	800aed4 <TIM_OC4_SetConfig+0x68>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	4a11      	ldr	r2, [pc, #68]	; (800af14 <TIM_OC4_SetConfig+0xa8>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d109      	bne.n	800aee8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aeda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	695b      	ldr	r3, [r3, #20]
 800aee0:	019b      	lsls	r3, r3, #6
 800aee2:	697a      	ldr	r2, [r7, #20]
 800aee4:	4313      	orrs	r3, r2
 800aee6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	697a      	ldr	r2, [r7, #20]
 800aeec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	68fa      	ldr	r2, [r7, #12]
 800aef2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	685a      	ldr	r2, [r3, #4]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	693a      	ldr	r2, [r7, #16]
 800af00:	621a      	str	r2, [r3, #32]
}
 800af02:	bf00      	nop
 800af04:	371c      	adds	r7, #28
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr
 800af0e:	bf00      	nop
 800af10:	40010000 	.word	0x40010000
 800af14:	40010400 	.word	0x40010400

0800af18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af18:	b480      	push	{r7}
 800af1a:	b087      	sub	sp, #28
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	6a1b      	ldr	r3, [r3, #32]
 800af28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	6a1b      	ldr	r3, [r3, #32]
 800af2e:	f023 0201 	bic.w	r2, r3, #1
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	699b      	ldr	r3, [r3, #24]
 800af3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	011b      	lsls	r3, r3, #4
 800af48:	693a      	ldr	r2, [r7, #16]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	f023 030a 	bic.w	r3, r3, #10
 800af54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af56:	697a      	ldr	r2, [r7, #20]
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	4313      	orrs	r3, r2
 800af5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	693a      	ldr	r2, [r7, #16]
 800af62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	697a      	ldr	r2, [r7, #20]
 800af68:	621a      	str	r2, [r3, #32]
}
 800af6a:	bf00      	nop
 800af6c:	371c      	adds	r7, #28
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr

0800af76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af76:	b480      	push	{r7}
 800af78:	b087      	sub	sp, #28
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	60f8      	str	r0, [r7, #12]
 800af7e:	60b9      	str	r1, [r7, #8]
 800af80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6a1b      	ldr	r3, [r3, #32]
 800af86:	f023 0210 	bic.w	r2, r3, #16
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	699b      	ldr	r3, [r3, #24]
 800af92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	6a1b      	ldr	r3, [r3, #32]
 800af98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800afa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	031b      	lsls	r3, r3, #12
 800afa6:	697a      	ldr	r2, [r7, #20]
 800afa8:	4313      	orrs	r3, r2
 800afaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800afb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	011b      	lsls	r3, r3, #4
 800afb8:	693a      	ldr	r2, [r7, #16]
 800afba:	4313      	orrs	r3, r2
 800afbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	697a      	ldr	r2, [r7, #20]
 800afc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	693a      	ldr	r2, [r7, #16]
 800afc8:	621a      	str	r2, [r3, #32]
}
 800afca:	bf00      	nop
 800afcc:	371c      	adds	r7, #28
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr

0800afd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800afd6:	b480      	push	{r7}
 800afd8:	b085      	sub	sp, #20
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
 800afde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	689b      	ldr	r3, [r3, #8]
 800afe4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800afee:	683a      	ldr	r2, [r7, #0]
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	4313      	orrs	r3, r2
 800aff4:	f043 0307 	orr.w	r3, r3, #7
 800aff8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	68fa      	ldr	r2, [r7, #12]
 800affe:	609a      	str	r2, [r3, #8]
}
 800b000:	bf00      	nop
 800b002:	3714      	adds	r7, #20
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b087      	sub	sp, #28
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	607a      	str	r2, [r7, #4]
 800b018:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b026:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	021a      	lsls	r2, r3, #8
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	431a      	orrs	r2, r3
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	4313      	orrs	r3, r2
 800b034:	697a      	ldr	r2, [r7, #20]
 800b036:	4313      	orrs	r3, r2
 800b038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	697a      	ldr	r2, [r7, #20]
 800b03e:	609a      	str	r2, [r3, #8]
}
 800b040:	bf00      	nop
 800b042:	371c      	adds	r7, #28
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b087      	sub	sp, #28
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	f003 031f 	and.w	r3, r3, #31
 800b05e:	2201      	movs	r2, #1
 800b060:	fa02 f303 	lsl.w	r3, r2, r3
 800b064:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	6a1a      	ldr	r2, [r3, #32]
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	43db      	mvns	r3, r3
 800b06e:	401a      	ands	r2, r3
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	6a1a      	ldr	r2, [r3, #32]
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	f003 031f 	and.w	r3, r3, #31
 800b07e:	6879      	ldr	r1, [r7, #4]
 800b080:	fa01 f303 	lsl.w	r3, r1, r3
 800b084:	431a      	orrs	r2, r3
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	621a      	str	r2, [r3, #32]
}
 800b08a:	bf00      	nop
 800b08c:	371c      	adds	r7, #28
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr
	...

0800b098 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b098:	b480      	push	{r7}
 800b09a:	b085      	sub	sp, #20
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d101      	bne.n	800b0b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b0ac:	2302      	movs	r3, #2
 800b0ae:	e05a      	b.n	800b166 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2202      	movs	r2, #2
 800b0bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	689b      	ldr	r3, [r3, #8]
 800b0ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4a21      	ldr	r2, [pc, #132]	; (800b174 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d022      	beq.n	800b13a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0fc:	d01d      	beq.n	800b13a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a1d      	ldr	r2, [pc, #116]	; (800b178 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d018      	beq.n	800b13a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4a1b      	ldr	r2, [pc, #108]	; (800b17c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d013      	beq.n	800b13a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4a1a      	ldr	r2, [pc, #104]	; (800b180 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d00e      	beq.n	800b13a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a18      	ldr	r2, [pc, #96]	; (800b184 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d009      	beq.n	800b13a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4a17      	ldr	r2, [pc, #92]	; (800b188 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d004      	beq.n	800b13a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4a15      	ldr	r2, [pc, #84]	; (800b18c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d10c      	bne.n	800b154 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b140:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	68ba      	ldr	r2, [r7, #8]
 800b148:	4313      	orrs	r3, r2
 800b14a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	68ba      	ldr	r2, [r7, #8]
 800b152:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2201      	movs	r2, #1
 800b158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2200      	movs	r2, #0
 800b160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b164:	2300      	movs	r3, #0
}
 800b166:	4618      	mov	r0, r3
 800b168:	3714      	adds	r7, #20
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr
 800b172:	bf00      	nop
 800b174:	40010000 	.word	0x40010000
 800b178:	40000400 	.word	0x40000400
 800b17c:	40000800 	.word	0x40000800
 800b180:	40000c00 	.word	0x40000c00
 800b184:	40010400 	.word	0x40010400
 800b188:	40014000 	.word	0x40014000
 800b18c:	40001800 	.word	0x40001800

0800b190 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b190:	b480      	push	{r7}
 800b192:	b085      	sub	sp, #20
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b19a:	2300      	movs	r3, #0
 800b19c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d101      	bne.n	800b1ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b1a8:	2302      	movs	r3, #2
 800b1aa:	e03d      	b.n	800b228 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	689b      	ldr	r3, [r3, #8]
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	691b      	ldr	r3, [r3, #16]
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	695b      	ldr	r3, [r3, #20]
 800b204:	4313      	orrs	r3, r2
 800b206:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	69db      	ldr	r3, [r3, #28]
 800b212:	4313      	orrs	r3, r2
 800b214:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	68fa      	ldr	r2, [r7, #12]
 800b21c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b226:	2300      	movs	r3, #0
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3714      	adds	r7, #20
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr

0800b234 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b23c:	bf00      	nop
 800b23e:	370c      	adds	r7, #12
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr

0800b248 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b248:	b480      	push	{r7}
 800b24a:	b083      	sub	sp, #12
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b250:	bf00      	nop
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d101      	bne.n	800b26e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b26a:	2301      	movs	r3, #1
 800b26c:	e03f      	b.n	800b2ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b274:	b2db      	uxtb	r3, r3
 800b276:	2b00      	cmp	r3, #0
 800b278:	d106      	bne.n	800b288 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2200      	movs	r2, #0
 800b27e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f7fb fb06 	bl	8006894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2224      	movs	r2, #36	; 0x24
 800b28c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	68da      	ldr	r2, [r3, #12]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b29e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 fc7b 	bl	800bb9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	691a      	ldr	r2, [r3, #16]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b2b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	695a      	ldr	r2, [r3, #20]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b2c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	68da      	ldr	r2, [r3, #12]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b2d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2220      	movs	r2, #32
 800b2e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2220      	movs	r2, #32
 800b2e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b2ec:	2300      	movs	r3, #0
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3708      	adds	r7, #8
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b08a      	sub	sp, #40	; 0x28
 800b2fa:	af02      	add	r7, sp, #8
 800b2fc:	60f8      	str	r0, [r7, #12]
 800b2fe:	60b9      	str	r1, [r7, #8]
 800b300:	603b      	str	r3, [r7, #0]
 800b302:	4613      	mov	r3, r2
 800b304:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b306:	2300      	movs	r3, #0
 800b308:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b310:	b2db      	uxtb	r3, r3
 800b312:	2b20      	cmp	r3, #32
 800b314:	d17c      	bne.n	800b410 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d002      	beq.n	800b322 <HAL_UART_Transmit+0x2c>
 800b31c:	88fb      	ldrh	r3, [r7, #6]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d101      	bne.n	800b326 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b322:	2301      	movs	r3, #1
 800b324:	e075      	b.n	800b412 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d101      	bne.n	800b334 <HAL_UART_Transmit+0x3e>
 800b330:	2302      	movs	r3, #2
 800b332:	e06e      	b.n	800b412 <HAL_UART_Transmit+0x11c>
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2201      	movs	r2, #1
 800b338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2200      	movs	r2, #0
 800b340:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2221      	movs	r2, #33	; 0x21
 800b346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b34a:	f7fc f845 	bl	80073d8 <HAL_GetTick>
 800b34e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	88fa      	ldrh	r2, [r7, #6]
 800b354:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	88fa      	ldrh	r2, [r7, #6]
 800b35a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	689b      	ldr	r3, [r3, #8]
 800b360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b364:	d108      	bne.n	800b378 <HAL_UART_Transmit+0x82>
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	691b      	ldr	r3, [r3, #16]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d104      	bne.n	800b378 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b36e:	2300      	movs	r3, #0
 800b370:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	61bb      	str	r3, [r7, #24]
 800b376:	e003      	b.n	800b380 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b37c:	2300      	movs	r3, #0
 800b37e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2200      	movs	r2, #0
 800b384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b388:	e02a      	b.n	800b3e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	9300      	str	r3, [sp, #0]
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	2200      	movs	r2, #0
 800b392:	2180      	movs	r1, #128	; 0x80
 800b394:	68f8      	ldr	r0, [r7, #12]
 800b396:	f000 fa3d 	bl	800b814 <UART_WaitOnFlagUntilTimeout>
 800b39a:	4603      	mov	r3, r0
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d001      	beq.n	800b3a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b3a0:	2303      	movs	r3, #3
 800b3a2:	e036      	b.n	800b412 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d10b      	bne.n	800b3c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	881b      	ldrh	r3, [r3, #0]
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b3b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b3ba:	69bb      	ldr	r3, [r7, #24]
 800b3bc:	3302      	adds	r3, #2
 800b3be:	61bb      	str	r3, [r7, #24]
 800b3c0:	e007      	b.n	800b3d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b3c2:	69fb      	ldr	r3, [r7, #28]
 800b3c4:	781a      	ldrb	r2, [r3, #0]
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b3cc:	69fb      	ldr	r3, [r7, #28]
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b3d6:	b29b      	uxth	r3, r3
 800b3d8:	3b01      	subs	r3, #1
 800b3da:	b29a      	uxth	r2, r3
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d1cf      	bne.n	800b38a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	9300      	str	r3, [sp, #0]
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	2140      	movs	r1, #64	; 0x40
 800b3f4:	68f8      	ldr	r0, [r7, #12]
 800b3f6:	f000 fa0d 	bl	800b814 <UART_WaitOnFlagUntilTimeout>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d001      	beq.n	800b404 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b400:	2303      	movs	r3, #3
 800b402:	e006      	b.n	800b412 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2220      	movs	r2, #32
 800b408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b40c:	2300      	movs	r3, #0
 800b40e:	e000      	b.n	800b412 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b410:	2302      	movs	r3, #2
  }
}
 800b412:	4618      	mov	r0, r3
 800b414:	3720      	adds	r7, #32
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b084      	sub	sp, #16
 800b41e:	af00      	add	r7, sp, #0
 800b420:	60f8      	str	r0, [r7, #12]
 800b422:	60b9      	str	r1, [r7, #8]
 800b424:	4613      	mov	r3, r2
 800b426:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	2b20      	cmp	r3, #32
 800b432:	d11d      	bne.n	800b470 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d002      	beq.n	800b440 <HAL_UART_Receive_IT+0x26>
 800b43a:	88fb      	ldrh	r3, [r7, #6]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d101      	bne.n	800b444 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b440:	2301      	movs	r3, #1
 800b442:	e016      	b.n	800b472 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d101      	bne.n	800b452 <HAL_UART_Receive_IT+0x38>
 800b44e:	2302      	movs	r3, #2
 800b450:	e00f      	b.n	800b472 <HAL_UART_Receive_IT+0x58>
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2201      	movs	r2, #1
 800b456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2200      	movs	r2, #0
 800b45e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800b460:	88fb      	ldrh	r3, [r7, #6]
 800b462:	461a      	mov	r2, r3
 800b464:	68b9      	ldr	r1, [r7, #8]
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	f000 fa1e 	bl	800b8a8 <UART_Start_Receive_IT>
 800b46c:	4603      	mov	r3, r0
 800b46e:	e000      	b.n	800b472 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b470:	2302      	movs	r3, #2
  }
}
 800b472:	4618      	mov	r0, r3
 800b474:	3710      	adds	r7, #16
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
	...

0800b47c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b08a      	sub	sp, #40	; 0x28
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	695b      	ldr	r3, [r3, #20]
 800b49a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800b49c:	2300      	movs	r3, #0
 800b49e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a6:	f003 030f 	and.w	r3, r3, #15
 800b4aa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800b4ac:	69bb      	ldr	r3, [r7, #24]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d10d      	bne.n	800b4ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b4:	f003 0320 	and.w	r3, r3, #32
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d008      	beq.n	800b4ce <HAL_UART_IRQHandler+0x52>
 800b4bc:	6a3b      	ldr	r3, [r7, #32]
 800b4be:	f003 0320 	and.w	r3, r3, #32
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d003      	beq.n	800b4ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 fad1 	bl	800ba6e <UART_Receive_IT>
      return;
 800b4cc:	e17c      	b.n	800b7c8 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b4ce:	69bb      	ldr	r3, [r7, #24]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	f000 80b1 	beq.w	800b638 <HAL_UART_IRQHandler+0x1bc>
 800b4d6:	69fb      	ldr	r3, [r7, #28]
 800b4d8:	f003 0301 	and.w	r3, r3, #1
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d105      	bne.n	800b4ec <HAL_UART_IRQHandler+0x70>
 800b4e0:	6a3b      	ldr	r3, [r7, #32]
 800b4e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	f000 80a6 	beq.w	800b638 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ee:	f003 0301 	and.w	r3, r3, #1
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d00a      	beq.n	800b50c <HAL_UART_IRQHandler+0x90>
 800b4f6:	6a3b      	ldr	r3, [r7, #32]
 800b4f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d005      	beq.n	800b50c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b504:	f043 0201 	orr.w	r2, r3, #1
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50e:	f003 0304 	and.w	r3, r3, #4
 800b512:	2b00      	cmp	r3, #0
 800b514:	d00a      	beq.n	800b52c <HAL_UART_IRQHandler+0xb0>
 800b516:	69fb      	ldr	r3, [r7, #28]
 800b518:	f003 0301 	and.w	r3, r3, #1
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d005      	beq.n	800b52c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b524:	f043 0202 	orr.w	r2, r3, #2
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b52e:	f003 0302 	and.w	r3, r3, #2
 800b532:	2b00      	cmp	r3, #0
 800b534:	d00a      	beq.n	800b54c <HAL_UART_IRQHandler+0xd0>
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	f003 0301 	and.w	r3, r3, #1
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d005      	beq.n	800b54c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b544:	f043 0204 	orr.w	r2, r3, #4
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800b54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54e:	f003 0308 	and.w	r3, r3, #8
 800b552:	2b00      	cmp	r3, #0
 800b554:	d00f      	beq.n	800b576 <HAL_UART_IRQHandler+0xfa>
 800b556:	6a3b      	ldr	r3, [r7, #32]
 800b558:	f003 0320 	and.w	r3, r3, #32
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d104      	bne.n	800b56a <HAL_UART_IRQHandler+0xee>
 800b560:	69fb      	ldr	r3, [r7, #28]
 800b562:	f003 0301 	and.w	r3, r3, #1
 800b566:	2b00      	cmp	r3, #0
 800b568:	d005      	beq.n	800b576 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b56e:	f043 0208 	orr.w	r2, r3, #8
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	f000 811f 	beq.w	800b7be <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b582:	f003 0320 	and.w	r3, r3, #32
 800b586:	2b00      	cmp	r3, #0
 800b588:	d007      	beq.n	800b59a <HAL_UART_IRQHandler+0x11e>
 800b58a:	6a3b      	ldr	r3, [r7, #32]
 800b58c:	f003 0320 	and.w	r3, r3, #32
 800b590:	2b00      	cmp	r3, #0
 800b592:	d002      	beq.n	800b59a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 fa6a 	bl	800ba6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	695b      	ldr	r3, [r3, #20]
 800b5a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5a4:	2b40      	cmp	r3, #64	; 0x40
 800b5a6:	bf0c      	ite	eq
 800b5a8:	2301      	moveq	r3, #1
 800b5aa:	2300      	movne	r3, #0
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5b4:	f003 0308 	and.w	r3, r3, #8
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d102      	bne.n	800b5c2 <HAL_UART_IRQHandler+0x146>
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d031      	beq.n	800b626 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 f9aa 	bl	800b91c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	695b      	ldr	r3, [r3, #20]
 800b5ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5d2:	2b40      	cmp	r3, #64	; 0x40
 800b5d4:	d123      	bne.n	800b61e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	695a      	ldr	r2, [r3, #20]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5e4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d013      	beq.n	800b616 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5f2:	4a77      	ldr	r2, [pc, #476]	; (800b7d0 <HAL_UART_IRQHandler+0x354>)
 800b5f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7fd fb05 	bl	8008c0a <HAL_DMA_Abort_IT>
 800b600:	4603      	mov	r3, r0
 800b602:	2b00      	cmp	r3, #0
 800b604:	d016      	beq.n	800b634 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b60a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b610:	4610      	mov	r0, r2
 800b612:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b614:	e00e      	b.n	800b634 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 f8e6 	bl	800b7e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b61c:	e00a      	b.n	800b634 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 f8e2 	bl	800b7e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b624:	e006      	b.n	800b634 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 f8de 	bl	800b7e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2200      	movs	r2, #0
 800b630:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b632:	e0c4      	b.n	800b7be <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b634:	bf00      	nop
    return;
 800b636:	e0c2      	b.n	800b7be <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	f040 80a2 	bne.w	800b786 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800b642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b644:	f003 0310 	and.w	r3, r3, #16
 800b648:	2b00      	cmp	r3, #0
 800b64a:	f000 809c 	beq.w	800b786 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800b64e:	6a3b      	ldr	r3, [r7, #32]
 800b650:	f003 0310 	and.w	r3, r3, #16
 800b654:	2b00      	cmp	r3, #0
 800b656:	f000 8096 	beq.w	800b786 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b65a:	2300      	movs	r3, #0
 800b65c:	60fb      	str	r3, [r7, #12]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	60fb      	str	r3, [r7, #12]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	60fb      	str	r3, [r7, #12]
 800b66e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	695b      	ldr	r3, [r3, #20]
 800b676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b67a:	2b40      	cmp	r3, #64	; 0x40
 800b67c:	d14f      	bne.n	800b71e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800b688:	8a3b      	ldrh	r3, [r7, #16]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	f000 8099 	beq.w	800b7c2 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b694:	8a3a      	ldrh	r2, [r7, #16]
 800b696:	429a      	cmp	r2, r3
 800b698:	f080 8093 	bcs.w	800b7c2 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	8a3a      	ldrh	r2, [r7, #16]
 800b6a0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6a6:	69db      	ldr	r3, [r3, #28]
 800b6a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6ac:	d02b      	beq.n	800b706 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	68da      	ldr	r2, [r3, #12]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b6bc:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	695a      	ldr	r2, [r3, #20]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f022 0201 	bic.w	r2, r2, #1
 800b6cc:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	695a      	ldr	r2, [r3, #20]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b6dc:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2220      	movs	r2, #32
 800b6e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	68da      	ldr	r2, [r3, #12]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f022 0210 	bic.w	r2, r2, #16
 800b6fa:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b700:	4618      	mov	r0, r3
 800b702:	f7fd fa12 	bl	8008b2a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b70e:	b29b      	uxth	r3, r3
 800b710:	1ad3      	subs	r3, r2, r3
 800b712:	b29b      	uxth	r3, r3
 800b714:	4619      	mov	r1, r3
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 f870 	bl	800b7fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b71c:	e051      	b.n	800b7c2 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b726:	b29b      	uxth	r3, r3
 800b728:	1ad3      	subs	r3, r2, r3
 800b72a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b730:	b29b      	uxth	r3, r3
 800b732:	2b00      	cmp	r3, #0
 800b734:	d047      	beq.n	800b7c6 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800b736:	8a7b      	ldrh	r3, [r7, #18]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d044      	beq.n	800b7c6 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	68da      	ldr	r2, [r3, #12]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b74a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	695a      	ldr	r2, [r3, #20]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f022 0201 	bic.w	r2, r2, #1
 800b75a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2220      	movs	r2, #32
 800b760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	68da      	ldr	r2, [r3, #12]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f022 0210 	bic.w	r2, r2, #16
 800b778:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b77a:	8a7b      	ldrh	r3, [r7, #18]
 800b77c:	4619      	mov	r1, r3
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 f83c 	bl	800b7fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b784:	e01f      	b.n	800b7c6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d008      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x326>
 800b790:	6a3b      	ldr	r3, [r7, #32]
 800b792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b796:	2b00      	cmp	r3, #0
 800b798:	d003      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 f8ff 	bl	800b99e <UART_Transmit_IT>
    return;
 800b7a0:	e012      	b.n	800b7c8 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d00d      	beq.n	800b7c8 <HAL_UART_IRQHandler+0x34c>
 800b7ac:	6a3b      	ldr	r3, [r7, #32]
 800b7ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d008      	beq.n	800b7c8 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 f941 	bl	800ba3e <UART_EndTransmit_IT>
    return;
 800b7bc:	e004      	b.n	800b7c8 <HAL_UART_IRQHandler+0x34c>
    return;
 800b7be:	bf00      	nop
 800b7c0:	e002      	b.n	800b7c8 <HAL_UART_IRQHandler+0x34c>
      return;
 800b7c2:	bf00      	nop
 800b7c4:	e000      	b.n	800b7c8 <HAL_UART_IRQHandler+0x34c>
      return;
 800b7c6:	bf00      	nop
  }
}
 800b7c8:	3728      	adds	r7, #40	; 0x28
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
 800b7ce:	bf00      	nop
 800b7d0:	0800b977 	.word	0x0800b977

0800b7d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b083      	sub	sp, #12
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b7dc:	bf00      	nop
 800b7de:	370c      	adds	r7, #12
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr

0800b7e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b7f0:	bf00      	nop
 800b7f2:	370c      	adds	r7, #12
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr

0800b7fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	460b      	mov	r3, r1
 800b806:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b808:	bf00      	nop
 800b80a:	370c      	adds	r7, #12
 800b80c:	46bd      	mov	sp, r7
 800b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b812:	4770      	bx	lr

0800b814 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	60b9      	str	r1, [r7, #8]
 800b81e:	603b      	str	r3, [r7, #0]
 800b820:	4613      	mov	r3, r2
 800b822:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b824:	e02c      	b.n	800b880 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b826:	69bb      	ldr	r3, [r7, #24]
 800b828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b82c:	d028      	beq.n	800b880 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d007      	beq.n	800b844 <UART_WaitOnFlagUntilTimeout+0x30>
 800b834:	f7fb fdd0 	bl	80073d8 <HAL_GetTick>
 800b838:	4602      	mov	r2, r0
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	1ad3      	subs	r3, r2, r3
 800b83e:	69ba      	ldr	r2, [r7, #24]
 800b840:	429a      	cmp	r2, r3
 800b842:	d21d      	bcs.n	800b880 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	68da      	ldr	r2, [r3, #12]
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b852:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	695a      	ldr	r2, [r3, #20]
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f022 0201 	bic.w	r2, r2, #1
 800b862:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2220      	movs	r2, #32
 800b868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2220      	movs	r2, #32
 800b870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2200      	movs	r2, #0
 800b878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b87c:	2303      	movs	r3, #3
 800b87e:	e00f      	b.n	800b8a0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	4013      	ands	r3, r2
 800b88a:	68ba      	ldr	r2, [r7, #8]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	bf0c      	ite	eq
 800b890:	2301      	moveq	r3, #1
 800b892:	2300      	movne	r3, #0
 800b894:	b2db      	uxtb	r3, r3
 800b896:	461a      	mov	r2, r3
 800b898:	79fb      	ldrb	r3, [r7, #7]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d0c3      	beq.n	800b826 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b89e:	2300      	movs	r3, #0
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3710      	adds	r7, #16
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b085      	sub	sp, #20
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	68ba      	ldr	r2, [r7, #8]
 800b8ba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	88fa      	ldrh	r2, [r7, #6]
 800b8c0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	88fa      	ldrh	r2, [r7, #6]
 800b8c6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2222      	movs	r2, #34	; 0x22
 800b8d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	68da      	ldr	r2, [r3, #12]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b8ec:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	695a      	ldr	r2, [r3, #20]
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f042 0201 	orr.w	r2, r2, #1
 800b8fc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	68da      	ldr	r2, [r3, #12]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f042 0220 	orr.w	r2, r2, #32
 800b90c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b90e:	2300      	movs	r3, #0
}
 800b910:	4618      	mov	r0, r3
 800b912:	3714      	adds	r7, #20
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr

0800b91c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b083      	sub	sp, #12
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	68da      	ldr	r2, [r3, #12]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b932:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	695a      	ldr	r2, [r3, #20]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f022 0201 	bic.w	r2, r2, #1
 800b942:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d107      	bne.n	800b95c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	68da      	ldr	r2, [r3, #12]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f022 0210 	bic.w	r2, r2, #16
 800b95a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2220      	movs	r2, #32
 800b960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b96a:	bf00      	nop
 800b96c:	370c      	adds	r7, #12
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr

0800b976 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b976:	b580      	push	{r7, lr}
 800b978:	b084      	sub	sp, #16
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b982:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2200      	movs	r2, #0
 800b988:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2200      	movs	r2, #0
 800b98e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b990:	68f8      	ldr	r0, [r7, #12]
 800b992:	f7ff ff29 	bl	800b7e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b996:	bf00      	nop
 800b998:	3710      	adds	r7, #16
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}

0800b99e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b99e:	b480      	push	{r7}
 800b9a0:	b085      	sub	sp, #20
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	2b21      	cmp	r3, #33	; 0x21
 800b9b0:	d13e      	bne.n	800ba30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	689b      	ldr	r3, [r3, #8]
 800b9b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9ba:	d114      	bne.n	800b9e6 <UART_Transmit_IT+0x48>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	691b      	ldr	r3, [r3, #16]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d110      	bne.n	800b9e6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6a1b      	ldr	r3, [r3, #32]
 800b9c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	881b      	ldrh	r3, [r3, #0]
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b9d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6a1b      	ldr	r3, [r3, #32]
 800b9de:	1c9a      	adds	r2, r3, #2
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	621a      	str	r2, [r3, #32]
 800b9e4:	e008      	b.n	800b9f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6a1b      	ldr	r3, [r3, #32]
 800b9ea:	1c59      	adds	r1, r3, #1
 800b9ec:	687a      	ldr	r2, [r7, #4]
 800b9ee:	6211      	str	r1, [r2, #32]
 800b9f0:	781a      	ldrb	r2, [r3, #0]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	3b01      	subs	r3, #1
 800ba00:	b29b      	uxth	r3, r3
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	4619      	mov	r1, r3
 800ba06:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d10f      	bne.n	800ba2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	68da      	ldr	r2, [r3, #12]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	68da      	ldr	r2, [r3, #12]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	e000      	b.n	800ba32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ba30:	2302      	movs	r3, #2
  }
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3714      	adds	r7, #20
 800ba36:	46bd      	mov	sp, r7
 800ba38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3c:	4770      	bx	lr

0800ba3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ba3e:	b580      	push	{r7, lr}
 800ba40:	b082      	sub	sp, #8
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	68da      	ldr	r2, [r3, #12]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2220      	movs	r2, #32
 800ba5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f7ff feb8 	bl	800b7d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ba64:	2300      	movs	r3, #0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3708      	adds	r7, #8
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b084      	sub	sp, #16
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	2b22      	cmp	r3, #34	; 0x22
 800ba80:	f040 8087 	bne.w	800bb92 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba8c:	d117      	bne.n	800babe <UART_Receive_IT+0x50>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	691b      	ldr	r3, [r3, #16]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d113      	bne.n	800babe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ba96:	2300      	movs	r3, #0
 800ba98:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba9e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	b29b      	uxth	r3, r3
 800baa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800baac:	b29a      	uxth	r2, r3
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bab6:	1c9a      	adds	r2, r3, #2
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	629a      	str	r2, [r3, #40]	; 0x28
 800babc:	e026      	b.n	800bb0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bac2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800bac4:	2300      	movs	r3, #0
 800bac6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	689b      	ldr	r3, [r3, #8]
 800bacc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bad0:	d007      	beq.n	800bae2 <UART_Receive_IT+0x74>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	689b      	ldr	r3, [r3, #8]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d10a      	bne.n	800baf0 <UART_Receive_IT+0x82>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	691b      	ldr	r3, [r3, #16]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d106      	bne.n	800baf0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	b2da      	uxtb	r2, r3
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	701a      	strb	r2, [r3, #0]
 800baee:	e008      	b.n	800bb02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bafc:	b2da      	uxtb	r2, r3
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb06:	1c5a      	adds	r2, r3, #1
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	3b01      	subs	r3, #1
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	4619      	mov	r1, r3
 800bb1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d136      	bne.n	800bb8e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	68da      	ldr	r2, [r3, #12]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f022 0220 	bic.w	r2, r2, #32
 800bb2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	68da      	ldr	r2, [r3, #12]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bb3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	695a      	ldr	r2, [r3, #20]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f022 0201 	bic.w	r2, r2, #1
 800bb4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2220      	movs	r2, #32
 800bb54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d10e      	bne.n	800bb7e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	68da      	ldr	r2, [r3, #12]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f022 0210 	bic.w	r2, r2, #16
 800bb6e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bb74:	4619      	mov	r1, r3
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f7ff fe40 	bl	800b7fc <HAL_UARTEx_RxEventCallback>
 800bb7c:	e002      	b.n	800bb84 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f7fa feea 	bl	8006958 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2200      	movs	r2, #0
 800bb88:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	e002      	b.n	800bb94 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	e000      	b.n	800bb94 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800bb92:	2302      	movs	r3, #2
  }
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3710      	adds	r7, #16
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba0:	b09f      	sub	sp, #124	; 0x7c
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	691b      	ldr	r3, [r3, #16]
 800bbac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bbb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbb2:	68d9      	ldr	r1, [r3, #12]
 800bbb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbb6:	681a      	ldr	r2, [r3, #0]
 800bbb8:	ea40 0301 	orr.w	r3, r0, r1
 800bbbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bbbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbc0:	689a      	ldr	r2, [r3, #8]
 800bbc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbc4:	691b      	ldr	r3, [r3, #16]
 800bbc6:	431a      	orrs	r2, r3
 800bbc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbca:	695b      	ldr	r3, [r3, #20]
 800bbcc:	431a      	orrs	r2, r3
 800bbce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbd0:	69db      	ldr	r3, [r3, #28]
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800bbd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	68db      	ldr	r3, [r3, #12]
 800bbdc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bbe0:	f021 010c 	bic.w	r1, r1, #12
 800bbe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbe6:	681a      	ldr	r2, [r3, #0]
 800bbe8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bbea:	430b      	orrs	r3, r1
 800bbec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bbee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	695b      	ldr	r3, [r3, #20]
 800bbf4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bbf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbfa:	6999      	ldr	r1, [r3, #24]
 800bbfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbfe:	681a      	ldr	r2, [r3, #0]
 800bc00:	ea40 0301 	orr.w	r3, r0, r1
 800bc04:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bc06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	4bc5      	ldr	r3, [pc, #788]	; (800bf20 <UART_SetConfig+0x384>)
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d004      	beq.n	800bc1a <UART_SetConfig+0x7e>
 800bc10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	4bc3      	ldr	r3, [pc, #780]	; (800bf24 <UART_SetConfig+0x388>)
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d103      	bne.n	800bc22 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bc1a:	f7fd fb35 	bl	8009288 <HAL_RCC_GetPCLK2Freq>
 800bc1e:	6778      	str	r0, [r7, #116]	; 0x74
 800bc20:	e002      	b.n	800bc28 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bc22:	f7fd fb1d 	bl	8009260 <HAL_RCC_GetPCLK1Freq>
 800bc26:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc2a:	69db      	ldr	r3, [r3, #28]
 800bc2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc30:	f040 80b6 	bne.w	800bda0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bc34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc36:	461c      	mov	r4, r3
 800bc38:	f04f 0500 	mov.w	r5, #0
 800bc3c:	4622      	mov	r2, r4
 800bc3e:	462b      	mov	r3, r5
 800bc40:	1891      	adds	r1, r2, r2
 800bc42:	6439      	str	r1, [r7, #64]	; 0x40
 800bc44:	415b      	adcs	r3, r3
 800bc46:	647b      	str	r3, [r7, #68]	; 0x44
 800bc48:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bc4c:	1912      	adds	r2, r2, r4
 800bc4e:	eb45 0303 	adc.w	r3, r5, r3
 800bc52:	f04f 0000 	mov.w	r0, #0
 800bc56:	f04f 0100 	mov.w	r1, #0
 800bc5a:	00d9      	lsls	r1, r3, #3
 800bc5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bc60:	00d0      	lsls	r0, r2, #3
 800bc62:	4602      	mov	r2, r0
 800bc64:	460b      	mov	r3, r1
 800bc66:	1911      	adds	r1, r2, r4
 800bc68:	6639      	str	r1, [r7, #96]	; 0x60
 800bc6a:	416b      	adcs	r3, r5
 800bc6c:	667b      	str	r3, [r7, #100]	; 0x64
 800bc6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc70:	685b      	ldr	r3, [r3, #4]
 800bc72:	461a      	mov	r2, r3
 800bc74:	f04f 0300 	mov.w	r3, #0
 800bc78:	1891      	adds	r1, r2, r2
 800bc7a:	63b9      	str	r1, [r7, #56]	; 0x38
 800bc7c:	415b      	adcs	r3, r3
 800bc7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bc84:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800bc88:	f7f5 f82e 	bl	8000ce8 <__aeabi_uldivmod>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	460b      	mov	r3, r1
 800bc90:	4ba5      	ldr	r3, [pc, #660]	; (800bf28 <UART_SetConfig+0x38c>)
 800bc92:	fba3 2302 	umull	r2, r3, r3, r2
 800bc96:	095b      	lsrs	r3, r3, #5
 800bc98:	011e      	lsls	r6, r3, #4
 800bc9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc9c:	461c      	mov	r4, r3
 800bc9e:	f04f 0500 	mov.w	r5, #0
 800bca2:	4622      	mov	r2, r4
 800bca4:	462b      	mov	r3, r5
 800bca6:	1891      	adds	r1, r2, r2
 800bca8:	6339      	str	r1, [r7, #48]	; 0x30
 800bcaa:	415b      	adcs	r3, r3
 800bcac:	637b      	str	r3, [r7, #52]	; 0x34
 800bcae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800bcb2:	1912      	adds	r2, r2, r4
 800bcb4:	eb45 0303 	adc.w	r3, r5, r3
 800bcb8:	f04f 0000 	mov.w	r0, #0
 800bcbc:	f04f 0100 	mov.w	r1, #0
 800bcc0:	00d9      	lsls	r1, r3, #3
 800bcc2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bcc6:	00d0      	lsls	r0, r2, #3
 800bcc8:	4602      	mov	r2, r0
 800bcca:	460b      	mov	r3, r1
 800bccc:	1911      	adds	r1, r2, r4
 800bcce:	65b9      	str	r1, [r7, #88]	; 0x58
 800bcd0:	416b      	adcs	r3, r5
 800bcd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bcd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	461a      	mov	r2, r3
 800bcda:	f04f 0300 	mov.w	r3, #0
 800bcde:	1891      	adds	r1, r2, r2
 800bce0:	62b9      	str	r1, [r7, #40]	; 0x28
 800bce2:	415b      	adcs	r3, r3
 800bce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bce6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bcea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800bcee:	f7f4 fffb 	bl	8000ce8 <__aeabi_uldivmod>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	4b8c      	ldr	r3, [pc, #560]	; (800bf28 <UART_SetConfig+0x38c>)
 800bcf8:	fba3 1302 	umull	r1, r3, r3, r2
 800bcfc:	095b      	lsrs	r3, r3, #5
 800bcfe:	2164      	movs	r1, #100	; 0x64
 800bd00:	fb01 f303 	mul.w	r3, r1, r3
 800bd04:	1ad3      	subs	r3, r2, r3
 800bd06:	00db      	lsls	r3, r3, #3
 800bd08:	3332      	adds	r3, #50	; 0x32
 800bd0a:	4a87      	ldr	r2, [pc, #540]	; (800bf28 <UART_SetConfig+0x38c>)
 800bd0c:	fba2 2303 	umull	r2, r3, r2, r3
 800bd10:	095b      	lsrs	r3, r3, #5
 800bd12:	005b      	lsls	r3, r3, #1
 800bd14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bd18:	441e      	add	r6, r3
 800bd1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f04f 0100 	mov.w	r1, #0
 800bd22:	4602      	mov	r2, r0
 800bd24:	460b      	mov	r3, r1
 800bd26:	1894      	adds	r4, r2, r2
 800bd28:	623c      	str	r4, [r7, #32]
 800bd2a:	415b      	adcs	r3, r3
 800bd2c:	627b      	str	r3, [r7, #36]	; 0x24
 800bd2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bd32:	1812      	adds	r2, r2, r0
 800bd34:	eb41 0303 	adc.w	r3, r1, r3
 800bd38:	f04f 0400 	mov.w	r4, #0
 800bd3c:	f04f 0500 	mov.w	r5, #0
 800bd40:	00dd      	lsls	r5, r3, #3
 800bd42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bd46:	00d4      	lsls	r4, r2, #3
 800bd48:	4622      	mov	r2, r4
 800bd4a:	462b      	mov	r3, r5
 800bd4c:	1814      	adds	r4, r2, r0
 800bd4e:	653c      	str	r4, [r7, #80]	; 0x50
 800bd50:	414b      	adcs	r3, r1
 800bd52:	657b      	str	r3, [r7, #84]	; 0x54
 800bd54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	461a      	mov	r2, r3
 800bd5a:	f04f 0300 	mov.w	r3, #0
 800bd5e:	1891      	adds	r1, r2, r2
 800bd60:	61b9      	str	r1, [r7, #24]
 800bd62:	415b      	adcs	r3, r3
 800bd64:	61fb      	str	r3, [r7, #28]
 800bd66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bd6a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800bd6e:	f7f4 ffbb 	bl	8000ce8 <__aeabi_uldivmod>
 800bd72:	4602      	mov	r2, r0
 800bd74:	460b      	mov	r3, r1
 800bd76:	4b6c      	ldr	r3, [pc, #432]	; (800bf28 <UART_SetConfig+0x38c>)
 800bd78:	fba3 1302 	umull	r1, r3, r3, r2
 800bd7c:	095b      	lsrs	r3, r3, #5
 800bd7e:	2164      	movs	r1, #100	; 0x64
 800bd80:	fb01 f303 	mul.w	r3, r1, r3
 800bd84:	1ad3      	subs	r3, r2, r3
 800bd86:	00db      	lsls	r3, r3, #3
 800bd88:	3332      	adds	r3, #50	; 0x32
 800bd8a:	4a67      	ldr	r2, [pc, #412]	; (800bf28 <UART_SetConfig+0x38c>)
 800bd8c:	fba2 2303 	umull	r2, r3, r2, r3
 800bd90:	095b      	lsrs	r3, r3, #5
 800bd92:	f003 0207 	and.w	r2, r3, #7
 800bd96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4432      	add	r2, r6
 800bd9c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bd9e:	e0b9      	b.n	800bf14 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bda0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bda2:	461c      	mov	r4, r3
 800bda4:	f04f 0500 	mov.w	r5, #0
 800bda8:	4622      	mov	r2, r4
 800bdaa:	462b      	mov	r3, r5
 800bdac:	1891      	adds	r1, r2, r2
 800bdae:	6139      	str	r1, [r7, #16]
 800bdb0:	415b      	adcs	r3, r3
 800bdb2:	617b      	str	r3, [r7, #20]
 800bdb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bdb8:	1912      	adds	r2, r2, r4
 800bdba:	eb45 0303 	adc.w	r3, r5, r3
 800bdbe:	f04f 0000 	mov.w	r0, #0
 800bdc2:	f04f 0100 	mov.w	r1, #0
 800bdc6:	00d9      	lsls	r1, r3, #3
 800bdc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bdcc:	00d0      	lsls	r0, r2, #3
 800bdce:	4602      	mov	r2, r0
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	eb12 0804 	adds.w	r8, r2, r4
 800bdd6:	eb43 0905 	adc.w	r9, r3, r5
 800bdda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	4618      	mov	r0, r3
 800bde0:	f04f 0100 	mov.w	r1, #0
 800bde4:	f04f 0200 	mov.w	r2, #0
 800bde8:	f04f 0300 	mov.w	r3, #0
 800bdec:	008b      	lsls	r3, r1, #2
 800bdee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bdf2:	0082      	lsls	r2, r0, #2
 800bdf4:	4640      	mov	r0, r8
 800bdf6:	4649      	mov	r1, r9
 800bdf8:	f7f4 ff76 	bl	8000ce8 <__aeabi_uldivmod>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	460b      	mov	r3, r1
 800be00:	4b49      	ldr	r3, [pc, #292]	; (800bf28 <UART_SetConfig+0x38c>)
 800be02:	fba3 2302 	umull	r2, r3, r3, r2
 800be06:	095b      	lsrs	r3, r3, #5
 800be08:	011e      	lsls	r6, r3, #4
 800be0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be0c:	4618      	mov	r0, r3
 800be0e:	f04f 0100 	mov.w	r1, #0
 800be12:	4602      	mov	r2, r0
 800be14:	460b      	mov	r3, r1
 800be16:	1894      	adds	r4, r2, r2
 800be18:	60bc      	str	r4, [r7, #8]
 800be1a:	415b      	adcs	r3, r3
 800be1c:	60fb      	str	r3, [r7, #12]
 800be1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800be22:	1812      	adds	r2, r2, r0
 800be24:	eb41 0303 	adc.w	r3, r1, r3
 800be28:	f04f 0400 	mov.w	r4, #0
 800be2c:	f04f 0500 	mov.w	r5, #0
 800be30:	00dd      	lsls	r5, r3, #3
 800be32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800be36:	00d4      	lsls	r4, r2, #3
 800be38:	4622      	mov	r2, r4
 800be3a:	462b      	mov	r3, r5
 800be3c:	1814      	adds	r4, r2, r0
 800be3e:	64bc      	str	r4, [r7, #72]	; 0x48
 800be40:	414b      	adcs	r3, r1
 800be42:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	4618      	mov	r0, r3
 800be4a:	f04f 0100 	mov.w	r1, #0
 800be4e:	f04f 0200 	mov.w	r2, #0
 800be52:	f04f 0300 	mov.w	r3, #0
 800be56:	008b      	lsls	r3, r1, #2
 800be58:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800be5c:	0082      	lsls	r2, r0, #2
 800be5e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800be62:	f7f4 ff41 	bl	8000ce8 <__aeabi_uldivmod>
 800be66:	4602      	mov	r2, r0
 800be68:	460b      	mov	r3, r1
 800be6a:	4b2f      	ldr	r3, [pc, #188]	; (800bf28 <UART_SetConfig+0x38c>)
 800be6c:	fba3 1302 	umull	r1, r3, r3, r2
 800be70:	095b      	lsrs	r3, r3, #5
 800be72:	2164      	movs	r1, #100	; 0x64
 800be74:	fb01 f303 	mul.w	r3, r1, r3
 800be78:	1ad3      	subs	r3, r2, r3
 800be7a:	011b      	lsls	r3, r3, #4
 800be7c:	3332      	adds	r3, #50	; 0x32
 800be7e:	4a2a      	ldr	r2, [pc, #168]	; (800bf28 <UART_SetConfig+0x38c>)
 800be80:	fba2 2303 	umull	r2, r3, r2, r3
 800be84:	095b      	lsrs	r3, r3, #5
 800be86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be8a:	441e      	add	r6, r3
 800be8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be8e:	4618      	mov	r0, r3
 800be90:	f04f 0100 	mov.w	r1, #0
 800be94:	4602      	mov	r2, r0
 800be96:	460b      	mov	r3, r1
 800be98:	1894      	adds	r4, r2, r2
 800be9a:	603c      	str	r4, [r7, #0]
 800be9c:	415b      	adcs	r3, r3
 800be9e:	607b      	str	r3, [r7, #4]
 800bea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bea4:	1812      	adds	r2, r2, r0
 800bea6:	eb41 0303 	adc.w	r3, r1, r3
 800beaa:	f04f 0400 	mov.w	r4, #0
 800beae:	f04f 0500 	mov.w	r5, #0
 800beb2:	00dd      	lsls	r5, r3, #3
 800beb4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800beb8:	00d4      	lsls	r4, r2, #3
 800beba:	4622      	mov	r2, r4
 800bebc:	462b      	mov	r3, r5
 800bebe:	eb12 0a00 	adds.w	sl, r2, r0
 800bec2:	eb43 0b01 	adc.w	fp, r3, r1
 800bec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	4618      	mov	r0, r3
 800becc:	f04f 0100 	mov.w	r1, #0
 800bed0:	f04f 0200 	mov.w	r2, #0
 800bed4:	f04f 0300 	mov.w	r3, #0
 800bed8:	008b      	lsls	r3, r1, #2
 800beda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bede:	0082      	lsls	r2, r0, #2
 800bee0:	4650      	mov	r0, sl
 800bee2:	4659      	mov	r1, fp
 800bee4:	f7f4 ff00 	bl	8000ce8 <__aeabi_uldivmod>
 800bee8:	4602      	mov	r2, r0
 800beea:	460b      	mov	r3, r1
 800beec:	4b0e      	ldr	r3, [pc, #56]	; (800bf28 <UART_SetConfig+0x38c>)
 800beee:	fba3 1302 	umull	r1, r3, r3, r2
 800bef2:	095b      	lsrs	r3, r3, #5
 800bef4:	2164      	movs	r1, #100	; 0x64
 800bef6:	fb01 f303 	mul.w	r3, r1, r3
 800befa:	1ad3      	subs	r3, r2, r3
 800befc:	011b      	lsls	r3, r3, #4
 800befe:	3332      	adds	r3, #50	; 0x32
 800bf00:	4a09      	ldr	r2, [pc, #36]	; (800bf28 <UART_SetConfig+0x38c>)
 800bf02:	fba2 2303 	umull	r2, r3, r2, r3
 800bf06:	095b      	lsrs	r3, r3, #5
 800bf08:	f003 020f 	and.w	r2, r3, #15
 800bf0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4432      	add	r2, r6
 800bf12:	609a      	str	r2, [r3, #8]
}
 800bf14:	bf00      	nop
 800bf16:	377c      	adds	r7, #124	; 0x7c
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf1e:	bf00      	nop
 800bf20:	40011000 	.word	0x40011000
 800bf24:	40011400 	.word	0x40011400
 800bf28:	51eb851f 	.word	0x51eb851f

0800bf2c <round>:
 800bf2c:	ec51 0b10 	vmov	r0, r1, d0
 800bf30:	b570      	push	{r4, r5, r6, lr}
 800bf32:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800bf36:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800bf3a:	2c13      	cmp	r4, #19
 800bf3c:	ee10 2a10 	vmov	r2, s0
 800bf40:	460b      	mov	r3, r1
 800bf42:	dc19      	bgt.n	800bf78 <round+0x4c>
 800bf44:	2c00      	cmp	r4, #0
 800bf46:	da09      	bge.n	800bf5c <round+0x30>
 800bf48:	3401      	adds	r4, #1
 800bf4a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800bf4e:	d103      	bne.n	800bf58 <round+0x2c>
 800bf50:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bf54:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bf58:	2100      	movs	r1, #0
 800bf5a:	e028      	b.n	800bfae <round+0x82>
 800bf5c:	4d15      	ldr	r5, [pc, #84]	; (800bfb4 <round+0x88>)
 800bf5e:	4125      	asrs	r5, r4
 800bf60:	ea01 0605 	and.w	r6, r1, r5
 800bf64:	4332      	orrs	r2, r6
 800bf66:	d00e      	beq.n	800bf86 <round+0x5a>
 800bf68:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800bf6c:	fa42 f404 	asr.w	r4, r2, r4
 800bf70:	4423      	add	r3, r4
 800bf72:	ea23 0305 	bic.w	r3, r3, r5
 800bf76:	e7ef      	b.n	800bf58 <round+0x2c>
 800bf78:	2c33      	cmp	r4, #51	; 0x33
 800bf7a:	dd07      	ble.n	800bf8c <round+0x60>
 800bf7c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800bf80:	d101      	bne.n	800bf86 <round+0x5a>
 800bf82:	f7f4 f9b3 	bl	80002ec <__adddf3>
 800bf86:	ec41 0b10 	vmov	d0, r0, r1
 800bf8a:	bd70      	pop	{r4, r5, r6, pc}
 800bf8c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800bf90:	f04f 35ff 	mov.w	r5, #4294967295
 800bf94:	40f5      	lsrs	r5, r6
 800bf96:	4228      	tst	r0, r5
 800bf98:	d0f5      	beq.n	800bf86 <round+0x5a>
 800bf9a:	2101      	movs	r1, #1
 800bf9c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800bfa0:	fa01 f404 	lsl.w	r4, r1, r4
 800bfa4:	1912      	adds	r2, r2, r4
 800bfa6:	bf28      	it	cs
 800bfa8:	185b      	addcs	r3, r3, r1
 800bfaa:	ea22 0105 	bic.w	r1, r2, r5
 800bfae:	4608      	mov	r0, r1
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	e7e8      	b.n	800bf86 <round+0x5a>
 800bfb4:	000fffff 	.word	0x000fffff

0800bfb8 <modff>:
 800bfb8:	ee10 3a10 	vmov	r3, s0
 800bfbc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bfc0:	3a7f      	subs	r2, #127	; 0x7f
 800bfc2:	2a16      	cmp	r2, #22
 800bfc4:	dc0a      	bgt.n	800bfdc <modff+0x24>
 800bfc6:	2a00      	cmp	r2, #0
 800bfc8:	da03      	bge.n	800bfd2 <modff+0x1a>
 800bfca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bfce:	6003      	str	r3, [r0, #0]
 800bfd0:	4770      	bx	lr
 800bfd2:	490a      	ldr	r1, [pc, #40]	; (800bffc <modff+0x44>)
 800bfd4:	fa41 f202 	asr.w	r2, r1, r2
 800bfd8:	4213      	tst	r3, r2
 800bfda:	d106      	bne.n	800bfea <modff+0x32>
 800bfdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bfe0:	ed80 0a00 	vstr	s0, [r0]
 800bfe4:	ee00 3a10 	vmov	s0, r3
 800bfe8:	4770      	bx	lr
 800bfea:	ea23 0302 	bic.w	r3, r3, r2
 800bfee:	ee07 3a90 	vmov	s15, r3
 800bff2:	6003      	str	r3, [r0, #0]
 800bff4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop
 800bffc:	007fffff 	.word	0x007fffff

0800c000 <exp>:
 800c000:	b538      	push	{r3, r4, r5, lr}
 800c002:	ed2d 8b02 	vpush	{d8}
 800c006:	ec55 4b10 	vmov	r4, r5, d0
 800c00a:	f000 f899 	bl	800c140 <__ieee754_exp>
 800c00e:	4b22      	ldr	r3, [pc, #136]	; (800c098 <exp+0x98>)
 800c010:	eeb0 8a40 	vmov.f32	s16, s0
 800c014:	eef0 8a60 	vmov.f32	s17, s1
 800c018:	f993 3000 	ldrsb.w	r3, [r3]
 800c01c:	3301      	adds	r3, #1
 800c01e:	d012      	beq.n	800c046 <exp+0x46>
 800c020:	ec45 4b10 	vmov	d0, r4, r5
 800c024:	f000 fa8b 	bl	800c53e <finite>
 800c028:	b168      	cbz	r0, 800c046 <exp+0x46>
 800c02a:	a313      	add	r3, pc, #76	; (adr r3, 800c078 <exp+0x78>)
 800c02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c030:	4620      	mov	r0, r4
 800c032:	4629      	mov	r1, r5
 800c034:	f7f4 fda0 	bl	8000b78 <__aeabi_dcmpgt>
 800c038:	b160      	cbz	r0, 800c054 <exp+0x54>
 800c03a:	f000 fa93 	bl	800c564 <__errno>
 800c03e:	ed9f 8b10 	vldr	d8, [pc, #64]	; 800c080 <exp+0x80>
 800c042:	2322      	movs	r3, #34	; 0x22
 800c044:	6003      	str	r3, [r0, #0]
 800c046:	eeb0 0a48 	vmov.f32	s0, s16
 800c04a:	eef0 0a68 	vmov.f32	s1, s17
 800c04e:	ecbd 8b02 	vpop	{d8}
 800c052:	bd38      	pop	{r3, r4, r5, pc}
 800c054:	a30c      	add	r3, pc, #48	; (adr r3, 800c088 <exp+0x88>)
 800c056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05a:	4620      	mov	r0, r4
 800c05c:	4629      	mov	r1, r5
 800c05e:	f7f4 fd6d 	bl	8000b3c <__aeabi_dcmplt>
 800c062:	2800      	cmp	r0, #0
 800c064:	d0ef      	beq.n	800c046 <exp+0x46>
 800c066:	f000 fa7d 	bl	800c564 <__errno>
 800c06a:	2322      	movs	r3, #34	; 0x22
 800c06c:	ed9f 8b08 	vldr	d8, [pc, #32]	; 800c090 <exp+0x90>
 800c070:	6003      	str	r3, [r0, #0]
 800c072:	e7e8      	b.n	800c046 <exp+0x46>
 800c074:	f3af 8000 	nop.w
 800c078:	fefa39ef 	.word	0xfefa39ef
 800c07c:	40862e42 	.word	0x40862e42
 800c080:	00000000 	.word	0x00000000
 800c084:	7ff00000 	.word	0x7ff00000
 800c088:	d52d3051 	.word	0xd52d3051
 800c08c:	c0874910 	.word	0xc0874910
	...
 800c098:	20000049 	.word	0x20000049

0800c09c <fmodf>:
 800c09c:	b508      	push	{r3, lr}
 800c09e:	ed2d 8b02 	vpush	{d8}
 800c0a2:	eef0 8a40 	vmov.f32	s17, s0
 800c0a6:	eeb0 8a60 	vmov.f32	s16, s1
 800c0aa:	f000 f9c3 	bl	800c434 <__ieee754_fmodf>
 800c0ae:	4b0f      	ldr	r3, [pc, #60]	; (800c0ec <fmodf+0x50>)
 800c0b0:	f993 3000 	ldrsb.w	r3, [r3]
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	d016      	beq.n	800c0e6 <fmodf+0x4a>
 800c0b8:	eeb4 8a48 	vcmp.f32	s16, s16
 800c0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0c0:	d611      	bvs.n	800c0e6 <fmodf+0x4a>
 800c0c2:	eef4 8a68 	vcmp.f32	s17, s17
 800c0c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0ca:	d60c      	bvs.n	800c0e6 <fmodf+0x4a>
 800c0cc:	eddf 8a08 	vldr	s17, [pc, #32]	; 800c0f0 <fmodf+0x54>
 800c0d0:	eeb4 8a68 	vcmp.f32	s16, s17
 800c0d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0d8:	d105      	bne.n	800c0e6 <fmodf+0x4a>
 800c0da:	f000 fa43 	bl	800c564 <__errno>
 800c0de:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c0e2:	2321      	movs	r3, #33	; 0x21
 800c0e4:	6003      	str	r3, [r0, #0]
 800c0e6:	ecbd 8b02 	vpop	{d8}
 800c0ea:	bd08      	pop	{r3, pc}
 800c0ec:	20000049 	.word	0x20000049
 800c0f0:	00000000 	.word	0x00000000

0800c0f4 <sqrtf>:
 800c0f4:	b508      	push	{r3, lr}
 800c0f6:	ed2d 8b02 	vpush	{d8}
 800c0fa:	eeb0 8a40 	vmov.f32	s16, s0
 800c0fe:	f000 fa1b 	bl	800c538 <__ieee754_sqrtf>
 800c102:	4b0d      	ldr	r3, [pc, #52]	; (800c138 <sqrtf+0x44>)
 800c104:	f993 3000 	ldrsb.w	r3, [r3]
 800c108:	3301      	adds	r3, #1
 800c10a:	d011      	beq.n	800c130 <sqrtf+0x3c>
 800c10c:	eeb4 8a48 	vcmp.f32	s16, s16
 800c110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c114:	d60c      	bvs.n	800c130 <sqrtf+0x3c>
 800c116:	eddf 8a09 	vldr	s17, [pc, #36]	; 800c13c <sqrtf+0x48>
 800c11a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c11e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c122:	d505      	bpl.n	800c130 <sqrtf+0x3c>
 800c124:	f000 fa1e 	bl	800c564 <__errno>
 800c128:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c12c:	2321      	movs	r3, #33	; 0x21
 800c12e:	6003      	str	r3, [r0, #0]
 800c130:	ecbd 8b02 	vpop	{d8}
 800c134:	bd08      	pop	{r3, pc}
 800c136:	bf00      	nop
 800c138:	20000049 	.word	0x20000049
 800c13c:	00000000 	.word	0x00000000

0800c140 <__ieee754_exp>:
 800c140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c144:	ec55 4b10 	vmov	r4, r5, d0
 800c148:	49b1      	ldr	r1, [pc, #708]	; (800c410 <__ieee754_exp+0x2d0>)
 800c14a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c14e:	428b      	cmp	r3, r1
 800c150:	ed2d 8b04 	vpush	{d8-d9}
 800c154:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800c158:	d937      	bls.n	800c1ca <__ieee754_exp+0x8a>
 800c15a:	49ae      	ldr	r1, [pc, #696]	; (800c414 <__ieee754_exp+0x2d4>)
 800c15c:	428b      	cmp	r3, r1
 800c15e:	d916      	bls.n	800c18e <__ieee754_exp+0x4e>
 800c160:	ee10 3a10 	vmov	r3, s0
 800c164:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800c168:	4313      	orrs	r3, r2
 800c16a:	d009      	beq.n	800c180 <__ieee754_exp+0x40>
 800c16c:	ee10 2a10 	vmov	r2, s0
 800c170:	462b      	mov	r3, r5
 800c172:	4620      	mov	r0, r4
 800c174:	4629      	mov	r1, r5
 800c176:	f7f4 f8b9 	bl	80002ec <__adddf3>
 800c17a:	4604      	mov	r4, r0
 800c17c:	460d      	mov	r5, r1
 800c17e:	e000      	b.n	800c182 <__ieee754_exp+0x42>
 800c180:	bb06      	cbnz	r6, 800c1c4 <__ieee754_exp+0x84>
 800c182:	ecbd 8b04 	vpop	{d8-d9}
 800c186:	ec45 4b10 	vmov	d0, r4, r5
 800c18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c18e:	a38a      	add	r3, pc, #552	; (adr r3, 800c3b8 <__ieee754_exp+0x278>)
 800c190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c194:	ee10 0a10 	vmov	r0, s0
 800c198:	4629      	mov	r1, r5
 800c19a:	f7f4 fced 	bl	8000b78 <__aeabi_dcmpgt>
 800c19e:	b138      	cbz	r0, 800c1b0 <__ieee754_exp+0x70>
 800c1a0:	a387      	add	r3, pc, #540	; (adr r3, 800c3c0 <__ieee754_exp+0x280>)
 800c1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a6:	4610      	mov	r0, r2
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	f7f4 fa55 	bl	8000658 <__aeabi_dmul>
 800c1ae:	e7e4      	b.n	800c17a <__ieee754_exp+0x3a>
 800c1b0:	a385      	add	r3, pc, #532	; (adr r3, 800c3c8 <__ieee754_exp+0x288>)
 800c1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	4629      	mov	r1, r5
 800c1ba:	f7f4 fcbf 	bl	8000b3c <__aeabi_dcmplt>
 800c1be:	2800      	cmp	r0, #0
 800c1c0:	f000 8087 	beq.w	800c2d2 <__ieee754_exp+0x192>
 800c1c4:	2400      	movs	r4, #0
 800c1c6:	2500      	movs	r5, #0
 800c1c8:	e7db      	b.n	800c182 <__ieee754_exp+0x42>
 800c1ca:	4a93      	ldr	r2, [pc, #588]	; (800c418 <__ieee754_exp+0x2d8>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	f240 80ac 	bls.w	800c32a <__ieee754_exp+0x1ea>
 800c1d2:	4a92      	ldr	r2, [pc, #584]	; (800c41c <__ieee754_exp+0x2dc>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d87c      	bhi.n	800c2d2 <__ieee754_exp+0x192>
 800c1d8:	4b91      	ldr	r3, [pc, #580]	; (800c420 <__ieee754_exp+0x2e0>)
 800c1da:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e2:	ee10 0a10 	vmov	r0, s0
 800c1e6:	4629      	mov	r1, r5
 800c1e8:	f7f4 f87e 	bl	80002e8 <__aeabi_dsub>
 800c1ec:	4b8d      	ldr	r3, [pc, #564]	; (800c424 <__ieee754_exp+0x2e4>)
 800c1ee:	00f7      	lsls	r7, r6, #3
 800c1f0:	443b      	add	r3, r7
 800c1f2:	ed93 7b00 	vldr	d7, [r3]
 800c1f6:	f1c6 0a01 	rsb	sl, r6, #1
 800c1fa:	4680      	mov	r8, r0
 800c1fc:	4689      	mov	r9, r1
 800c1fe:	ebaa 0a06 	sub.w	sl, sl, r6
 800c202:	eeb0 8a47 	vmov.f32	s16, s14
 800c206:	eef0 8a67 	vmov.f32	s17, s15
 800c20a:	ec53 2b18 	vmov	r2, r3, d8
 800c20e:	4640      	mov	r0, r8
 800c210:	4649      	mov	r1, r9
 800c212:	f7f4 f869 	bl	80002e8 <__aeabi_dsub>
 800c216:	4604      	mov	r4, r0
 800c218:	460d      	mov	r5, r1
 800c21a:	4622      	mov	r2, r4
 800c21c:	462b      	mov	r3, r5
 800c21e:	4620      	mov	r0, r4
 800c220:	4629      	mov	r1, r5
 800c222:	f7f4 fa19 	bl	8000658 <__aeabi_dmul>
 800c226:	a36a      	add	r3, pc, #424	; (adr r3, 800c3d0 <__ieee754_exp+0x290>)
 800c228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22c:	4606      	mov	r6, r0
 800c22e:	460f      	mov	r7, r1
 800c230:	f7f4 fa12 	bl	8000658 <__aeabi_dmul>
 800c234:	a368      	add	r3, pc, #416	; (adr r3, 800c3d8 <__ieee754_exp+0x298>)
 800c236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c23a:	f7f4 f855 	bl	80002e8 <__aeabi_dsub>
 800c23e:	4632      	mov	r2, r6
 800c240:	463b      	mov	r3, r7
 800c242:	f7f4 fa09 	bl	8000658 <__aeabi_dmul>
 800c246:	a366      	add	r3, pc, #408	; (adr r3, 800c3e0 <__ieee754_exp+0x2a0>)
 800c248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24c:	f7f4 f84e 	bl	80002ec <__adddf3>
 800c250:	4632      	mov	r2, r6
 800c252:	463b      	mov	r3, r7
 800c254:	f7f4 fa00 	bl	8000658 <__aeabi_dmul>
 800c258:	a363      	add	r3, pc, #396	; (adr r3, 800c3e8 <__ieee754_exp+0x2a8>)
 800c25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25e:	f7f4 f843 	bl	80002e8 <__aeabi_dsub>
 800c262:	4632      	mov	r2, r6
 800c264:	463b      	mov	r3, r7
 800c266:	f7f4 f9f7 	bl	8000658 <__aeabi_dmul>
 800c26a:	a361      	add	r3, pc, #388	; (adr r3, 800c3f0 <__ieee754_exp+0x2b0>)
 800c26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c270:	f7f4 f83c 	bl	80002ec <__adddf3>
 800c274:	4632      	mov	r2, r6
 800c276:	463b      	mov	r3, r7
 800c278:	f7f4 f9ee 	bl	8000658 <__aeabi_dmul>
 800c27c:	4602      	mov	r2, r0
 800c27e:	460b      	mov	r3, r1
 800c280:	4620      	mov	r0, r4
 800c282:	4629      	mov	r1, r5
 800c284:	f7f4 f830 	bl	80002e8 <__aeabi_dsub>
 800c288:	4602      	mov	r2, r0
 800c28a:	460b      	mov	r3, r1
 800c28c:	4606      	mov	r6, r0
 800c28e:	460f      	mov	r7, r1
 800c290:	4620      	mov	r0, r4
 800c292:	4629      	mov	r1, r5
 800c294:	f7f4 f9e0 	bl	8000658 <__aeabi_dmul>
 800c298:	ec41 0b19 	vmov	d9, r0, r1
 800c29c:	f1ba 0f00 	cmp.w	sl, #0
 800c2a0:	d15d      	bne.n	800c35e <__ieee754_exp+0x21e>
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	4639      	mov	r1, r7
 800c2ac:	f7f4 f81c 	bl	80002e8 <__aeabi_dsub>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	ec51 0b19 	vmov	r0, r1, d9
 800c2b8:	f7f4 faf8 	bl	80008ac <__aeabi_ddiv>
 800c2bc:	4622      	mov	r2, r4
 800c2be:	462b      	mov	r3, r5
 800c2c0:	f7f4 f812 	bl	80002e8 <__aeabi_dsub>
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	460b      	mov	r3, r1
 800c2c8:	2000      	movs	r0, #0
 800c2ca:	4957      	ldr	r1, [pc, #348]	; (800c428 <__ieee754_exp+0x2e8>)
 800c2cc:	f7f4 f80c 	bl	80002e8 <__aeabi_dsub>
 800c2d0:	e753      	b.n	800c17a <__ieee754_exp+0x3a>
 800c2d2:	4856      	ldr	r0, [pc, #344]	; (800c42c <__ieee754_exp+0x2ec>)
 800c2d4:	a348      	add	r3, pc, #288	; (adr r3, 800c3f8 <__ieee754_exp+0x2b8>)
 800c2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2da:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800c2de:	4629      	mov	r1, r5
 800c2e0:	4620      	mov	r0, r4
 800c2e2:	f7f4 f9b9 	bl	8000658 <__aeabi_dmul>
 800c2e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c2ea:	f7f3 ffff 	bl	80002ec <__adddf3>
 800c2ee:	f7f4 fc63 	bl	8000bb8 <__aeabi_d2iz>
 800c2f2:	4682      	mov	sl, r0
 800c2f4:	f7f4 f946 	bl	8000584 <__aeabi_i2d>
 800c2f8:	a341      	add	r3, pc, #260	; (adr r3, 800c400 <__ieee754_exp+0x2c0>)
 800c2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2fe:	4606      	mov	r6, r0
 800c300:	460f      	mov	r7, r1
 800c302:	f7f4 f9a9 	bl	8000658 <__aeabi_dmul>
 800c306:	4602      	mov	r2, r0
 800c308:	460b      	mov	r3, r1
 800c30a:	4620      	mov	r0, r4
 800c30c:	4629      	mov	r1, r5
 800c30e:	f7f3 ffeb 	bl	80002e8 <__aeabi_dsub>
 800c312:	a33d      	add	r3, pc, #244	; (adr r3, 800c408 <__ieee754_exp+0x2c8>)
 800c314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c318:	4680      	mov	r8, r0
 800c31a:	4689      	mov	r9, r1
 800c31c:	4630      	mov	r0, r6
 800c31e:	4639      	mov	r1, r7
 800c320:	f7f4 f99a 	bl	8000658 <__aeabi_dmul>
 800c324:	ec41 0b18 	vmov	d8, r0, r1
 800c328:	e76f      	b.n	800c20a <__ieee754_exp+0xca>
 800c32a:	4a41      	ldr	r2, [pc, #260]	; (800c430 <__ieee754_exp+0x2f0>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d811      	bhi.n	800c354 <__ieee754_exp+0x214>
 800c330:	a323      	add	r3, pc, #140	; (adr r3, 800c3c0 <__ieee754_exp+0x280>)
 800c332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c336:	ee10 0a10 	vmov	r0, s0
 800c33a:	4629      	mov	r1, r5
 800c33c:	f7f3 ffd6 	bl	80002ec <__adddf3>
 800c340:	4b39      	ldr	r3, [pc, #228]	; (800c428 <__ieee754_exp+0x2e8>)
 800c342:	2200      	movs	r2, #0
 800c344:	f7f4 fc18 	bl	8000b78 <__aeabi_dcmpgt>
 800c348:	b138      	cbz	r0, 800c35a <__ieee754_exp+0x21a>
 800c34a:	4b37      	ldr	r3, [pc, #220]	; (800c428 <__ieee754_exp+0x2e8>)
 800c34c:	2200      	movs	r2, #0
 800c34e:	4620      	mov	r0, r4
 800c350:	4629      	mov	r1, r5
 800c352:	e710      	b.n	800c176 <__ieee754_exp+0x36>
 800c354:	f04f 0a00 	mov.w	sl, #0
 800c358:	e75f      	b.n	800c21a <__ieee754_exp+0xda>
 800c35a:	4682      	mov	sl, r0
 800c35c:	e75d      	b.n	800c21a <__ieee754_exp+0xda>
 800c35e:	4632      	mov	r2, r6
 800c360:	463b      	mov	r3, r7
 800c362:	2000      	movs	r0, #0
 800c364:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c368:	f7f3 ffbe 	bl	80002e8 <__aeabi_dsub>
 800c36c:	4602      	mov	r2, r0
 800c36e:	460b      	mov	r3, r1
 800c370:	ec51 0b19 	vmov	r0, r1, d9
 800c374:	f7f4 fa9a 	bl	80008ac <__aeabi_ddiv>
 800c378:	4602      	mov	r2, r0
 800c37a:	460b      	mov	r3, r1
 800c37c:	ec51 0b18 	vmov	r0, r1, d8
 800c380:	f7f3 ffb2 	bl	80002e8 <__aeabi_dsub>
 800c384:	4642      	mov	r2, r8
 800c386:	464b      	mov	r3, r9
 800c388:	f7f3 ffae 	bl	80002e8 <__aeabi_dsub>
 800c38c:	4602      	mov	r2, r0
 800c38e:	460b      	mov	r3, r1
 800c390:	2000      	movs	r0, #0
 800c392:	4925      	ldr	r1, [pc, #148]	; (800c428 <__ieee754_exp+0x2e8>)
 800c394:	f7f3 ffa8 	bl	80002e8 <__aeabi_dsub>
 800c398:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800c39c:	4592      	cmp	sl, r2
 800c39e:	db02      	blt.n	800c3a6 <__ieee754_exp+0x266>
 800c3a0:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800c3a4:	e6e9      	b.n	800c17a <__ieee754_exp+0x3a>
 800c3a6:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800c3aa:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800c3b4:	e6f9      	b.n	800c1aa <__ieee754_exp+0x6a>
 800c3b6:	bf00      	nop
 800c3b8:	fefa39ef 	.word	0xfefa39ef
 800c3bc:	40862e42 	.word	0x40862e42
 800c3c0:	8800759c 	.word	0x8800759c
 800c3c4:	7e37e43c 	.word	0x7e37e43c
 800c3c8:	d52d3051 	.word	0xd52d3051
 800c3cc:	c0874910 	.word	0xc0874910
 800c3d0:	72bea4d0 	.word	0x72bea4d0
 800c3d4:	3e663769 	.word	0x3e663769
 800c3d8:	c5d26bf1 	.word	0xc5d26bf1
 800c3dc:	3ebbbd41 	.word	0x3ebbbd41
 800c3e0:	af25de2c 	.word	0xaf25de2c
 800c3e4:	3f11566a 	.word	0x3f11566a
 800c3e8:	16bebd93 	.word	0x16bebd93
 800c3ec:	3f66c16c 	.word	0x3f66c16c
 800c3f0:	5555553e 	.word	0x5555553e
 800c3f4:	3fc55555 	.word	0x3fc55555
 800c3f8:	652b82fe 	.word	0x652b82fe
 800c3fc:	3ff71547 	.word	0x3ff71547
 800c400:	fee00000 	.word	0xfee00000
 800c404:	3fe62e42 	.word	0x3fe62e42
 800c408:	35793c76 	.word	0x35793c76
 800c40c:	3dea39ef 	.word	0x3dea39ef
 800c410:	40862e41 	.word	0x40862e41
 800c414:	7fefffff 	.word	0x7fefffff
 800c418:	3fd62e42 	.word	0x3fd62e42
 800c41c:	3ff0a2b1 	.word	0x3ff0a2b1
 800c420:	08011da8 	.word	0x08011da8
 800c424:	08011db8 	.word	0x08011db8
 800c428:	3ff00000 	.word	0x3ff00000
 800c42c:	08011d98 	.word	0x08011d98
 800c430:	3e2fffff 	.word	0x3e2fffff

0800c434 <__ieee754_fmodf>:
 800c434:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c436:	ee10 6a90 	vmov	r6, s1
 800c43a:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 800c43e:	d009      	beq.n	800c454 <__ieee754_fmodf+0x20>
 800c440:	ee10 2a10 	vmov	r2, s0
 800c444:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800c448:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c44c:	da02      	bge.n	800c454 <__ieee754_fmodf+0x20>
 800c44e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c452:	dd04      	ble.n	800c45e <__ieee754_fmodf+0x2a>
 800c454:	ee60 0a20 	vmul.f32	s1, s0, s1
 800c458:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800c45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c45e:	42ab      	cmp	r3, r5
 800c460:	dbfc      	blt.n	800c45c <__ieee754_fmodf+0x28>
 800c462:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 800c466:	d106      	bne.n	800c476 <__ieee754_fmodf+0x42>
 800c468:	4a32      	ldr	r2, [pc, #200]	; (800c534 <__ieee754_fmodf+0x100>)
 800c46a:	0fe3      	lsrs	r3, r4, #31
 800c46c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c470:	ed93 0a00 	vldr	s0, [r3]
 800c474:	e7f2      	b.n	800c45c <__ieee754_fmodf+0x28>
 800c476:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800c47a:	d13f      	bne.n	800c4fc <__ieee754_fmodf+0xc8>
 800c47c:	0219      	lsls	r1, r3, #8
 800c47e:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800c482:	2900      	cmp	r1, #0
 800c484:	dc37      	bgt.n	800c4f6 <__ieee754_fmodf+0xc2>
 800c486:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800c48a:	d13d      	bne.n	800c508 <__ieee754_fmodf+0xd4>
 800c48c:	022f      	lsls	r7, r5, #8
 800c48e:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800c492:	2f00      	cmp	r7, #0
 800c494:	da35      	bge.n	800c502 <__ieee754_fmodf+0xce>
 800c496:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800c49a:	bfbb      	ittet	lt
 800c49c:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800c4a0:	1a12      	sublt	r2, r2, r0
 800c4a2:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800c4a6:	4093      	lsllt	r3, r2
 800c4a8:	bfa8      	it	ge
 800c4aa:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800c4ae:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800c4b2:	bfb5      	itete	lt
 800c4b4:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800c4b8:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 800c4bc:	1a52      	sublt	r2, r2, r1
 800c4be:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 800c4c2:	bfb8      	it	lt
 800c4c4:	4095      	lsllt	r5, r2
 800c4c6:	1a40      	subs	r0, r0, r1
 800c4c8:	1b5a      	subs	r2, r3, r5
 800c4ca:	bb00      	cbnz	r0, 800c50e <__ieee754_fmodf+0xda>
 800c4cc:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800c4d0:	bf38      	it	cc
 800c4d2:	4613      	movcc	r3, r2
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d0c7      	beq.n	800c468 <__ieee754_fmodf+0x34>
 800c4d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c4dc:	db1f      	blt.n	800c51e <__ieee754_fmodf+0xea>
 800c4de:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800c4e2:	db1f      	blt.n	800c524 <__ieee754_fmodf+0xf0>
 800c4e4:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800c4e8:	317f      	adds	r1, #127	; 0x7f
 800c4ea:	4323      	orrs	r3, r4
 800c4ec:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800c4f0:	ee00 3a10 	vmov	s0, r3
 800c4f4:	e7b2      	b.n	800c45c <__ieee754_fmodf+0x28>
 800c4f6:	3801      	subs	r0, #1
 800c4f8:	0049      	lsls	r1, r1, #1
 800c4fa:	e7c2      	b.n	800c482 <__ieee754_fmodf+0x4e>
 800c4fc:	15d8      	asrs	r0, r3, #23
 800c4fe:	387f      	subs	r0, #127	; 0x7f
 800c500:	e7c1      	b.n	800c486 <__ieee754_fmodf+0x52>
 800c502:	3901      	subs	r1, #1
 800c504:	007f      	lsls	r7, r7, #1
 800c506:	e7c4      	b.n	800c492 <__ieee754_fmodf+0x5e>
 800c508:	15e9      	asrs	r1, r5, #23
 800c50a:	397f      	subs	r1, #127	; 0x7f
 800c50c:	e7c3      	b.n	800c496 <__ieee754_fmodf+0x62>
 800c50e:	2a00      	cmp	r2, #0
 800c510:	da02      	bge.n	800c518 <__ieee754_fmodf+0xe4>
 800c512:	005b      	lsls	r3, r3, #1
 800c514:	3801      	subs	r0, #1
 800c516:	e7d7      	b.n	800c4c8 <__ieee754_fmodf+0x94>
 800c518:	d0a6      	beq.n	800c468 <__ieee754_fmodf+0x34>
 800c51a:	0053      	lsls	r3, r2, #1
 800c51c:	e7fa      	b.n	800c514 <__ieee754_fmodf+0xe0>
 800c51e:	005b      	lsls	r3, r3, #1
 800c520:	3901      	subs	r1, #1
 800c522:	e7d9      	b.n	800c4d8 <__ieee754_fmodf+0xa4>
 800c524:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800c528:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800c52c:	3182      	adds	r1, #130	; 0x82
 800c52e:	410b      	asrs	r3, r1
 800c530:	4323      	orrs	r3, r4
 800c532:	e7dd      	b.n	800c4f0 <__ieee754_fmodf+0xbc>
 800c534:	08011dc8 	.word	0x08011dc8

0800c538 <__ieee754_sqrtf>:
 800c538:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c53c:	4770      	bx	lr

0800c53e <finite>:
 800c53e:	b082      	sub	sp, #8
 800c540:	ed8d 0b00 	vstr	d0, [sp]
 800c544:	9801      	ldr	r0, [sp, #4]
 800c546:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c54a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c54e:	0fc0      	lsrs	r0, r0, #31
 800c550:	b002      	add	sp, #8
 800c552:	4770      	bx	lr

0800c554 <atof>:
 800c554:	2100      	movs	r1, #0
 800c556:	f001 bb85 	b.w	800dc64 <strtod>

0800c55a <atoi>:
 800c55a:	220a      	movs	r2, #10
 800c55c:	2100      	movs	r1, #0
 800c55e:	f001 bc11 	b.w	800dd84 <strtol>
	...

0800c564 <__errno>:
 800c564:	4b01      	ldr	r3, [pc, #4]	; (800c56c <__errno+0x8>)
 800c566:	6818      	ldr	r0, [r3, #0]
 800c568:	4770      	bx	lr
 800c56a:	bf00      	nop
 800c56c:	2000004c 	.word	0x2000004c

0800c570 <__libc_init_array>:
 800c570:	b570      	push	{r4, r5, r6, lr}
 800c572:	4d0d      	ldr	r5, [pc, #52]	; (800c5a8 <__libc_init_array+0x38>)
 800c574:	4c0d      	ldr	r4, [pc, #52]	; (800c5ac <__libc_init_array+0x3c>)
 800c576:	1b64      	subs	r4, r4, r5
 800c578:	10a4      	asrs	r4, r4, #2
 800c57a:	2600      	movs	r6, #0
 800c57c:	42a6      	cmp	r6, r4
 800c57e:	d109      	bne.n	800c594 <__libc_init_array+0x24>
 800c580:	4d0b      	ldr	r5, [pc, #44]	; (800c5b0 <__libc_init_array+0x40>)
 800c582:	4c0c      	ldr	r4, [pc, #48]	; (800c5b4 <__libc_init_array+0x44>)
 800c584:	f004 faca 	bl	8010b1c <_init>
 800c588:	1b64      	subs	r4, r4, r5
 800c58a:	10a4      	asrs	r4, r4, #2
 800c58c:	2600      	movs	r6, #0
 800c58e:	42a6      	cmp	r6, r4
 800c590:	d105      	bne.n	800c59e <__libc_init_array+0x2e>
 800c592:	bd70      	pop	{r4, r5, r6, pc}
 800c594:	f855 3b04 	ldr.w	r3, [r5], #4
 800c598:	4798      	blx	r3
 800c59a:	3601      	adds	r6, #1
 800c59c:	e7ee      	b.n	800c57c <__libc_init_array+0xc>
 800c59e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5a2:	4798      	blx	r3
 800c5a4:	3601      	adds	r6, #1
 800c5a6:	e7f2      	b.n	800c58e <__libc_init_array+0x1e>
 800c5a8:	08012284 	.word	0x08012284
 800c5ac:	08012284 	.word	0x08012284
 800c5b0:	08012284 	.word	0x08012284
 800c5b4:	08012288 	.word	0x08012288

0800c5b8 <memcpy>:
 800c5b8:	440a      	add	r2, r1
 800c5ba:	4291      	cmp	r1, r2
 800c5bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c5c0:	d100      	bne.n	800c5c4 <memcpy+0xc>
 800c5c2:	4770      	bx	lr
 800c5c4:	b510      	push	{r4, lr}
 800c5c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5ce:	4291      	cmp	r1, r2
 800c5d0:	d1f9      	bne.n	800c5c6 <memcpy+0xe>
 800c5d2:	bd10      	pop	{r4, pc}

0800c5d4 <memset>:
 800c5d4:	4402      	add	r2, r0
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d100      	bne.n	800c5de <memset+0xa>
 800c5dc:	4770      	bx	lr
 800c5de:	f803 1b01 	strb.w	r1, [r3], #1
 800c5e2:	e7f9      	b.n	800c5d8 <memset+0x4>

0800c5e4 <__cvt>:
 800c5e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5e8:	ec55 4b10 	vmov	r4, r5, d0
 800c5ec:	2d00      	cmp	r5, #0
 800c5ee:	460e      	mov	r6, r1
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	462b      	mov	r3, r5
 800c5f4:	bfbb      	ittet	lt
 800c5f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c5fa:	461d      	movlt	r5, r3
 800c5fc:	2300      	movge	r3, #0
 800c5fe:	232d      	movlt	r3, #45	; 0x2d
 800c600:	700b      	strb	r3, [r1, #0]
 800c602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c604:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c608:	4691      	mov	r9, r2
 800c60a:	f023 0820 	bic.w	r8, r3, #32
 800c60e:	bfbc      	itt	lt
 800c610:	4622      	movlt	r2, r4
 800c612:	4614      	movlt	r4, r2
 800c614:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c618:	d005      	beq.n	800c626 <__cvt+0x42>
 800c61a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c61e:	d100      	bne.n	800c622 <__cvt+0x3e>
 800c620:	3601      	adds	r6, #1
 800c622:	2102      	movs	r1, #2
 800c624:	e000      	b.n	800c628 <__cvt+0x44>
 800c626:	2103      	movs	r1, #3
 800c628:	ab03      	add	r3, sp, #12
 800c62a:	9301      	str	r3, [sp, #4]
 800c62c:	ab02      	add	r3, sp, #8
 800c62e:	9300      	str	r3, [sp, #0]
 800c630:	ec45 4b10 	vmov	d0, r4, r5
 800c634:	4653      	mov	r3, sl
 800c636:	4632      	mov	r2, r6
 800c638:	f001 fcfa 	bl	800e030 <_dtoa_r>
 800c63c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c640:	4607      	mov	r7, r0
 800c642:	d102      	bne.n	800c64a <__cvt+0x66>
 800c644:	f019 0f01 	tst.w	r9, #1
 800c648:	d022      	beq.n	800c690 <__cvt+0xac>
 800c64a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c64e:	eb07 0906 	add.w	r9, r7, r6
 800c652:	d110      	bne.n	800c676 <__cvt+0x92>
 800c654:	783b      	ldrb	r3, [r7, #0]
 800c656:	2b30      	cmp	r3, #48	; 0x30
 800c658:	d10a      	bne.n	800c670 <__cvt+0x8c>
 800c65a:	2200      	movs	r2, #0
 800c65c:	2300      	movs	r3, #0
 800c65e:	4620      	mov	r0, r4
 800c660:	4629      	mov	r1, r5
 800c662:	f7f4 fa61 	bl	8000b28 <__aeabi_dcmpeq>
 800c666:	b918      	cbnz	r0, 800c670 <__cvt+0x8c>
 800c668:	f1c6 0601 	rsb	r6, r6, #1
 800c66c:	f8ca 6000 	str.w	r6, [sl]
 800c670:	f8da 3000 	ldr.w	r3, [sl]
 800c674:	4499      	add	r9, r3
 800c676:	2200      	movs	r2, #0
 800c678:	2300      	movs	r3, #0
 800c67a:	4620      	mov	r0, r4
 800c67c:	4629      	mov	r1, r5
 800c67e:	f7f4 fa53 	bl	8000b28 <__aeabi_dcmpeq>
 800c682:	b108      	cbz	r0, 800c688 <__cvt+0xa4>
 800c684:	f8cd 900c 	str.w	r9, [sp, #12]
 800c688:	2230      	movs	r2, #48	; 0x30
 800c68a:	9b03      	ldr	r3, [sp, #12]
 800c68c:	454b      	cmp	r3, r9
 800c68e:	d307      	bcc.n	800c6a0 <__cvt+0xbc>
 800c690:	9b03      	ldr	r3, [sp, #12]
 800c692:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c694:	1bdb      	subs	r3, r3, r7
 800c696:	4638      	mov	r0, r7
 800c698:	6013      	str	r3, [r2, #0]
 800c69a:	b004      	add	sp, #16
 800c69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6a0:	1c59      	adds	r1, r3, #1
 800c6a2:	9103      	str	r1, [sp, #12]
 800c6a4:	701a      	strb	r2, [r3, #0]
 800c6a6:	e7f0      	b.n	800c68a <__cvt+0xa6>

0800c6a8 <__exponent>:
 800c6a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	2900      	cmp	r1, #0
 800c6ae:	bfb8      	it	lt
 800c6b0:	4249      	neglt	r1, r1
 800c6b2:	f803 2b02 	strb.w	r2, [r3], #2
 800c6b6:	bfb4      	ite	lt
 800c6b8:	222d      	movlt	r2, #45	; 0x2d
 800c6ba:	222b      	movge	r2, #43	; 0x2b
 800c6bc:	2909      	cmp	r1, #9
 800c6be:	7042      	strb	r2, [r0, #1]
 800c6c0:	dd2a      	ble.n	800c718 <__exponent+0x70>
 800c6c2:	f10d 0407 	add.w	r4, sp, #7
 800c6c6:	46a4      	mov	ip, r4
 800c6c8:	270a      	movs	r7, #10
 800c6ca:	46a6      	mov	lr, r4
 800c6cc:	460a      	mov	r2, r1
 800c6ce:	fb91 f6f7 	sdiv	r6, r1, r7
 800c6d2:	fb07 1516 	mls	r5, r7, r6, r1
 800c6d6:	3530      	adds	r5, #48	; 0x30
 800c6d8:	2a63      	cmp	r2, #99	; 0x63
 800c6da:	f104 34ff 	add.w	r4, r4, #4294967295
 800c6de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c6e2:	4631      	mov	r1, r6
 800c6e4:	dcf1      	bgt.n	800c6ca <__exponent+0x22>
 800c6e6:	3130      	adds	r1, #48	; 0x30
 800c6e8:	f1ae 0502 	sub.w	r5, lr, #2
 800c6ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c6f0:	1c44      	adds	r4, r0, #1
 800c6f2:	4629      	mov	r1, r5
 800c6f4:	4561      	cmp	r1, ip
 800c6f6:	d30a      	bcc.n	800c70e <__exponent+0x66>
 800c6f8:	f10d 0209 	add.w	r2, sp, #9
 800c6fc:	eba2 020e 	sub.w	r2, r2, lr
 800c700:	4565      	cmp	r5, ip
 800c702:	bf88      	it	hi
 800c704:	2200      	movhi	r2, #0
 800c706:	4413      	add	r3, r2
 800c708:	1a18      	subs	r0, r3, r0
 800c70a:	b003      	add	sp, #12
 800c70c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c70e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c712:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c716:	e7ed      	b.n	800c6f4 <__exponent+0x4c>
 800c718:	2330      	movs	r3, #48	; 0x30
 800c71a:	3130      	adds	r1, #48	; 0x30
 800c71c:	7083      	strb	r3, [r0, #2]
 800c71e:	70c1      	strb	r1, [r0, #3]
 800c720:	1d03      	adds	r3, r0, #4
 800c722:	e7f1      	b.n	800c708 <__exponent+0x60>

0800c724 <_printf_float>:
 800c724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c728:	ed2d 8b02 	vpush	{d8}
 800c72c:	b08d      	sub	sp, #52	; 0x34
 800c72e:	460c      	mov	r4, r1
 800c730:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c734:	4616      	mov	r6, r2
 800c736:	461f      	mov	r7, r3
 800c738:	4605      	mov	r5, r0
 800c73a:	f002 ff8b 	bl	800f654 <_localeconv_r>
 800c73e:	f8d0 a000 	ldr.w	sl, [r0]
 800c742:	4650      	mov	r0, sl
 800c744:	f7f3 fd6e 	bl	8000224 <strlen>
 800c748:	2300      	movs	r3, #0
 800c74a:	930a      	str	r3, [sp, #40]	; 0x28
 800c74c:	6823      	ldr	r3, [r4, #0]
 800c74e:	9305      	str	r3, [sp, #20]
 800c750:	f8d8 3000 	ldr.w	r3, [r8]
 800c754:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c758:	3307      	adds	r3, #7
 800c75a:	f023 0307 	bic.w	r3, r3, #7
 800c75e:	f103 0208 	add.w	r2, r3, #8
 800c762:	f8c8 2000 	str.w	r2, [r8]
 800c766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c76e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c772:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c776:	9307      	str	r3, [sp, #28]
 800c778:	f8cd 8018 	str.w	r8, [sp, #24]
 800c77c:	ee08 0a10 	vmov	s16, r0
 800c780:	4b9f      	ldr	r3, [pc, #636]	; (800ca00 <_printf_float+0x2dc>)
 800c782:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c786:	f04f 32ff 	mov.w	r2, #4294967295
 800c78a:	f7f4 f9ff 	bl	8000b8c <__aeabi_dcmpun>
 800c78e:	bb88      	cbnz	r0, 800c7f4 <_printf_float+0xd0>
 800c790:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c794:	4b9a      	ldr	r3, [pc, #616]	; (800ca00 <_printf_float+0x2dc>)
 800c796:	f04f 32ff 	mov.w	r2, #4294967295
 800c79a:	f7f4 f9d9 	bl	8000b50 <__aeabi_dcmple>
 800c79e:	bb48      	cbnz	r0, 800c7f4 <_printf_float+0xd0>
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	4640      	mov	r0, r8
 800c7a6:	4649      	mov	r1, r9
 800c7a8:	f7f4 f9c8 	bl	8000b3c <__aeabi_dcmplt>
 800c7ac:	b110      	cbz	r0, 800c7b4 <_printf_float+0x90>
 800c7ae:	232d      	movs	r3, #45	; 0x2d
 800c7b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7b4:	4b93      	ldr	r3, [pc, #588]	; (800ca04 <_printf_float+0x2e0>)
 800c7b6:	4894      	ldr	r0, [pc, #592]	; (800ca08 <_printf_float+0x2e4>)
 800c7b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c7bc:	bf94      	ite	ls
 800c7be:	4698      	movls	r8, r3
 800c7c0:	4680      	movhi	r8, r0
 800c7c2:	2303      	movs	r3, #3
 800c7c4:	6123      	str	r3, [r4, #16]
 800c7c6:	9b05      	ldr	r3, [sp, #20]
 800c7c8:	f023 0204 	bic.w	r2, r3, #4
 800c7cc:	6022      	str	r2, [r4, #0]
 800c7ce:	f04f 0900 	mov.w	r9, #0
 800c7d2:	9700      	str	r7, [sp, #0]
 800c7d4:	4633      	mov	r3, r6
 800c7d6:	aa0b      	add	r2, sp, #44	; 0x2c
 800c7d8:	4621      	mov	r1, r4
 800c7da:	4628      	mov	r0, r5
 800c7dc:	f000 f9d8 	bl	800cb90 <_printf_common>
 800c7e0:	3001      	adds	r0, #1
 800c7e2:	f040 8090 	bne.w	800c906 <_printf_float+0x1e2>
 800c7e6:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ea:	b00d      	add	sp, #52	; 0x34
 800c7ec:	ecbd 8b02 	vpop	{d8}
 800c7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7f4:	4642      	mov	r2, r8
 800c7f6:	464b      	mov	r3, r9
 800c7f8:	4640      	mov	r0, r8
 800c7fa:	4649      	mov	r1, r9
 800c7fc:	f7f4 f9c6 	bl	8000b8c <__aeabi_dcmpun>
 800c800:	b140      	cbz	r0, 800c814 <_printf_float+0xf0>
 800c802:	464b      	mov	r3, r9
 800c804:	2b00      	cmp	r3, #0
 800c806:	bfbc      	itt	lt
 800c808:	232d      	movlt	r3, #45	; 0x2d
 800c80a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c80e:	487f      	ldr	r0, [pc, #508]	; (800ca0c <_printf_float+0x2e8>)
 800c810:	4b7f      	ldr	r3, [pc, #508]	; (800ca10 <_printf_float+0x2ec>)
 800c812:	e7d1      	b.n	800c7b8 <_printf_float+0x94>
 800c814:	6863      	ldr	r3, [r4, #4]
 800c816:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c81a:	9206      	str	r2, [sp, #24]
 800c81c:	1c5a      	adds	r2, r3, #1
 800c81e:	d13f      	bne.n	800c8a0 <_printf_float+0x17c>
 800c820:	2306      	movs	r3, #6
 800c822:	6063      	str	r3, [r4, #4]
 800c824:	9b05      	ldr	r3, [sp, #20]
 800c826:	6861      	ldr	r1, [r4, #4]
 800c828:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c82c:	2300      	movs	r3, #0
 800c82e:	9303      	str	r3, [sp, #12]
 800c830:	ab0a      	add	r3, sp, #40	; 0x28
 800c832:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c836:	ab09      	add	r3, sp, #36	; 0x24
 800c838:	ec49 8b10 	vmov	d0, r8, r9
 800c83c:	9300      	str	r3, [sp, #0]
 800c83e:	6022      	str	r2, [r4, #0]
 800c840:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c844:	4628      	mov	r0, r5
 800c846:	f7ff fecd 	bl	800c5e4 <__cvt>
 800c84a:	9b06      	ldr	r3, [sp, #24]
 800c84c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c84e:	2b47      	cmp	r3, #71	; 0x47
 800c850:	4680      	mov	r8, r0
 800c852:	d108      	bne.n	800c866 <_printf_float+0x142>
 800c854:	1cc8      	adds	r0, r1, #3
 800c856:	db02      	blt.n	800c85e <_printf_float+0x13a>
 800c858:	6863      	ldr	r3, [r4, #4]
 800c85a:	4299      	cmp	r1, r3
 800c85c:	dd41      	ble.n	800c8e2 <_printf_float+0x1be>
 800c85e:	f1ab 0b02 	sub.w	fp, fp, #2
 800c862:	fa5f fb8b 	uxtb.w	fp, fp
 800c866:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c86a:	d820      	bhi.n	800c8ae <_printf_float+0x18a>
 800c86c:	3901      	subs	r1, #1
 800c86e:	465a      	mov	r2, fp
 800c870:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c874:	9109      	str	r1, [sp, #36]	; 0x24
 800c876:	f7ff ff17 	bl	800c6a8 <__exponent>
 800c87a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c87c:	1813      	adds	r3, r2, r0
 800c87e:	2a01      	cmp	r2, #1
 800c880:	4681      	mov	r9, r0
 800c882:	6123      	str	r3, [r4, #16]
 800c884:	dc02      	bgt.n	800c88c <_printf_float+0x168>
 800c886:	6822      	ldr	r2, [r4, #0]
 800c888:	07d2      	lsls	r2, r2, #31
 800c88a:	d501      	bpl.n	800c890 <_printf_float+0x16c>
 800c88c:	3301      	adds	r3, #1
 800c88e:	6123      	str	r3, [r4, #16]
 800c890:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c894:	2b00      	cmp	r3, #0
 800c896:	d09c      	beq.n	800c7d2 <_printf_float+0xae>
 800c898:	232d      	movs	r3, #45	; 0x2d
 800c89a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c89e:	e798      	b.n	800c7d2 <_printf_float+0xae>
 800c8a0:	9a06      	ldr	r2, [sp, #24]
 800c8a2:	2a47      	cmp	r2, #71	; 0x47
 800c8a4:	d1be      	bne.n	800c824 <_printf_float+0x100>
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d1bc      	bne.n	800c824 <_printf_float+0x100>
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	e7b9      	b.n	800c822 <_printf_float+0xfe>
 800c8ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c8b2:	d118      	bne.n	800c8e6 <_printf_float+0x1c2>
 800c8b4:	2900      	cmp	r1, #0
 800c8b6:	6863      	ldr	r3, [r4, #4]
 800c8b8:	dd0b      	ble.n	800c8d2 <_printf_float+0x1ae>
 800c8ba:	6121      	str	r1, [r4, #16]
 800c8bc:	b913      	cbnz	r3, 800c8c4 <_printf_float+0x1a0>
 800c8be:	6822      	ldr	r2, [r4, #0]
 800c8c0:	07d0      	lsls	r0, r2, #31
 800c8c2:	d502      	bpl.n	800c8ca <_printf_float+0x1a6>
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	440b      	add	r3, r1
 800c8c8:	6123      	str	r3, [r4, #16]
 800c8ca:	65a1      	str	r1, [r4, #88]	; 0x58
 800c8cc:	f04f 0900 	mov.w	r9, #0
 800c8d0:	e7de      	b.n	800c890 <_printf_float+0x16c>
 800c8d2:	b913      	cbnz	r3, 800c8da <_printf_float+0x1b6>
 800c8d4:	6822      	ldr	r2, [r4, #0]
 800c8d6:	07d2      	lsls	r2, r2, #31
 800c8d8:	d501      	bpl.n	800c8de <_printf_float+0x1ba>
 800c8da:	3302      	adds	r3, #2
 800c8dc:	e7f4      	b.n	800c8c8 <_printf_float+0x1a4>
 800c8de:	2301      	movs	r3, #1
 800c8e0:	e7f2      	b.n	800c8c8 <_printf_float+0x1a4>
 800c8e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c8e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8e8:	4299      	cmp	r1, r3
 800c8ea:	db05      	blt.n	800c8f8 <_printf_float+0x1d4>
 800c8ec:	6823      	ldr	r3, [r4, #0]
 800c8ee:	6121      	str	r1, [r4, #16]
 800c8f0:	07d8      	lsls	r0, r3, #31
 800c8f2:	d5ea      	bpl.n	800c8ca <_printf_float+0x1a6>
 800c8f4:	1c4b      	adds	r3, r1, #1
 800c8f6:	e7e7      	b.n	800c8c8 <_printf_float+0x1a4>
 800c8f8:	2900      	cmp	r1, #0
 800c8fa:	bfd4      	ite	le
 800c8fc:	f1c1 0202 	rsble	r2, r1, #2
 800c900:	2201      	movgt	r2, #1
 800c902:	4413      	add	r3, r2
 800c904:	e7e0      	b.n	800c8c8 <_printf_float+0x1a4>
 800c906:	6823      	ldr	r3, [r4, #0]
 800c908:	055a      	lsls	r2, r3, #21
 800c90a:	d407      	bmi.n	800c91c <_printf_float+0x1f8>
 800c90c:	6923      	ldr	r3, [r4, #16]
 800c90e:	4642      	mov	r2, r8
 800c910:	4631      	mov	r1, r6
 800c912:	4628      	mov	r0, r5
 800c914:	47b8      	blx	r7
 800c916:	3001      	adds	r0, #1
 800c918:	d12c      	bne.n	800c974 <_printf_float+0x250>
 800c91a:	e764      	b.n	800c7e6 <_printf_float+0xc2>
 800c91c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c920:	f240 80e0 	bls.w	800cae4 <_printf_float+0x3c0>
 800c924:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c928:	2200      	movs	r2, #0
 800c92a:	2300      	movs	r3, #0
 800c92c:	f7f4 f8fc 	bl	8000b28 <__aeabi_dcmpeq>
 800c930:	2800      	cmp	r0, #0
 800c932:	d034      	beq.n	800c99e <_printf_float+0x27a>
 800c934:	4a37      	ldr	r2, [pc, #220]	; (800ca14 <_printf_float+0x2f0>)
 800c936:	2301      	movs	r3, #1
 800c938:	4631      	mov	r1, r6
 800c93a:	4628      	mov	r0, r5
 800c93c:	47b8      	blx	r7
 800c93e:	3001      	adds	r0, #1
 800c940:	f43f af51 	beq.w	800c7e6 <_printf_float+0xc2>
 800c944:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c948:	429a      	cmp	r2, r3
 800c94a:	db02      	blt.n	800c952 <_printf_float+0x22e>
 800c94c:	6823      	ldr	r3, [r4, #0]
 800c94e:	07d8      	lsls	r0, r3, #31
 800c950:	d510      	bpl.n	800c974 <_printf_float+0x250>
 800c952:	ee18 3a10 	vmov	r3, s16
 800c956:	4652      	mov	r2, sl
 800c958:	4631      	mov	r1, r6
 800c95a:	4628      	mov	r0, r5
 800c95c:	47b8      	blx	r7
 800c95e:	3001      	adds	r0, #1
 800c960:	f43f af41 	beq.w	800c7e6 <_printf_float+0xc2>
 800c964:	f04f 0800 	mov.w	r8, #0
 800c968:	f104 091a 	add.w	r9, r4, #26
 800c96c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c96e:	3b01      	subs	r3, #1
 800c970:	4543      	cmp	r3, r8
 800c972:	dc09      	bgt.n	800c988 <_printf_float+0x264>
 800c974:	6823      	ldr	r3, [r4, #0]
 800c976:	079b      	lsls	r3, r3, #30
 800c978:	f100 8105 	bmi.w	800cb86 <_printf_float+0x462>
 800c97c:	68e0      	ldr	r0, [r4, #12]
 800c97e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c980:	4298      	cmp	r0, r3
 800c982:	bfb8      	it	lt
 800c984:	4618      	movlt	r0, r3
 800c986:	e730      	b.n	800c7ea <_printf_float+0xc6>
 800c988:	2301      	movs	r3, #1
 800c98a:	464a      	mov	r2, r9
 800c98c:	4631      	mov	r1, r6
 800c98e:	4628      	mov	r0, r5
 800c990:	47b8      	blx	r7
 800c992:	3001      	adds	r0, #1
 800c994:	f43f af27 	beq.w	800c7e6 <_printf_float+0xc2>
 800c998:	f108 0801 	add.w	r8, r8, #1
 800c99c:	e7e6      	b.n	800c96c <_printf_float+0x248>
 800c99e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	dc39      	bgt.n	800ca18 <_printf_float+0x2f4>
 800c9a4:	4a1b      	ldr	r2, [pc, #108]	; (800ca14 <_printf_float+0x2f0>)
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	4631      	mov	r1, r6
 800c9aa:	4628      	mov	r0, r5
 800c9ac:	47b8      	blx	r7
 800c9ae:	3001      	adds	r0, #1
 800c9b0:	f43f af19 	beq.w	800c7e6 <_printf_float+0xc2>
 800c9b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	d102      	bne.n	800c9c2 <_printf_float+0x29e>
 800c9bc:	6823      	ldr	r3, [r4, #0]
 800c9be:	07d9      	lsls	r1, r3, #31
 800c9c0:	d5d8      	bpl.n	800c974 <_printf_float+0x250>
 800c9c2:	ee18 3a10 	vmov	r3, s16
 800c9c6:	4652      	mov	r2, sl
 800c9c8:	4631      	mov	r1, r6
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	47b8      	blx	r7
 800c9ce:	3001      	adds	r0, #1
 800c9d0:	f43f af09 	beq.w	800c7e6 <_printf_float+0xc2>
 800c9d4:	f04f 0900 	mov.w	r9, #0
 800c9d8:	f104 0a1a 	add.w	sl, r4, #26
 800c9dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9de:	425b      	negs	r3, r3
 800c9e0:	454b      	cmp	r3, r9
 800c9e2:	dc01      	bgt.n	800c9e8 <_printf_float+0x2c4>
 800c9e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9e6:	e792      	b.n	800c90e <_printf_float+0x1ea>
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	4652      	mov	r2, sl
 800c9ec:	4631      	mov	r1, r6
 800c9ee:	4628      	mov	r0, r5
 800c9f0:	47b8      	blx	r7
 800c9f2:	3001      	adds	r0, #1
 800c9f4:	f43f aef7 	beq.w	800c7e6 <_printf_float+0xc2>
 800c9f8:	f109 0901 	add.w	r9, r9, #1
 800c9fc:	e7ee      	b.n	800c9dc <_printf_float+0x2b8>
 800c9fe:	bf00      	nop
 800ca00:	7fefffff 	.word	0x7fefffff
 800ca04:	08011dd4 	.word	0x08011dd4
 800ca08:	08011dd8 	.word	0x08011dd8
 800ca0c:	08011de0 	.word	0x08011de0
 800ca10:	08011ddc 	.word	0x08011ddc
 800ca14:	08011de4 	.word	0x08011de4
 800ca18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	bfa8      	it	ge
 800ca20:	461a      	movge	r2, r3
 800ca22:	2a00      	cmp	r2, #0
 800ca24:	4691      	mov	r9, r2
 800ca26:	dc37      	bgt.n	800ca98 <_printf_float+0x374>
 800ca28:	f04f 0b00 	mov.w	fp, #0
 800ca2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca30:	f104 021a 	add.w	r2, r4, #26
 800ca34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ca36:	9305      	str	r3, [sp, #20]
 800ca38:	eba3 0309 	sub.w	r3, r3, r9
 800ca3c:	455b      	cmp	r3, fp
 800ca3e:	dc33      	bgt.n	800caa8 <_printf_float+0x384>
 800ca40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca44:	429a      	cmp	r2, r3
 800ca46:	db3b      	blt.n	800cac0 <_printf_float+0x39c>
 800ca48:	6823      	ldr	r3, [r4, #0]
 800ca4a:	07da      	lsls	r2, r3, #31
 800ca4c:	d438      	bmi.n	800cac0 <_printf_float+0x39c>
 800ca4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca50:	9b05      	ldr	r3, [sp, #20]
 800ca52:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca54:	1ad3      	subs	r3, r2, r3
 800ca56:	eba2 0901 	sub.w	r9, r2, r1
 800ca5a:	4599      	cmp	r9, r3
 800ca5c:	bfa8      	it	ge
 800ca5e:	4699      	movge	r9, r3
 800ca60:	f1b9 0f00 	cmp.w	r9, #0
 800ca64:	dc35      	bgt.n	800cad2 <_printf_float+0x3ae>
 800ca66:	f04f 0800 	mov.w	r8, #0
 800ca6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca6e:	f104 0a1a 	add.w	sl, r4, #26
 800ca72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca76:	1a9b      	subs	r3, r3, r2
 800ca78:	eba3 0309 	sub.w	r3, r3, r9
 800ca7c:	4543      	cmp	r3, r8
 800ca7e:	f77f af79 	ble.w	800c974 <_printf_float+0x250>
 800ca82:	2301      	movs	r3, #1
 800ca84:	4652      	mov	r2, sl
 800ca86:	4631      	mov	r1, r6
 800ca88:	4628      	mov	r0, r5
 800ca8a:	47b8      	blx	r7
 800ca8c:	3001      	adds	r0, #1
 800ca8e:	f43f aeaa 	beq.w	800c7e6 <_printf_float+0xc2>
 800ca92:	f108 0801 	add.w	r8, r8, #1
 800ca96:	e7ec      	b.n	800ca72 <_printf_float+0x34e>
 800ca98:	4613      	mov	r3, r2
 800ca9a:	4631      	mov	r1, r6
 800ca9c:	4642      	mov	r2, r8
 800ca9e:	4628      	mov	r0, r5
 800caa0:	47b8      	blx	r7
 800caa2:	3001      	adds	r0, #1
 800caa4:	d1c0      	bne.n	800ca28 <_printf_float+0x304>
 800caa6:	e69e      	b.n	800c7e6 <_printf_float+0xc2>
 800caa8:	2301      	movs	r3, #1
 800caaa:	4631      	mov	r1, r6
 800caac:	4628      	mov	r0, r5
 800caae:	9205      	str	r2, [sp, #20]
 800cab0:	47b8      	blx	r7
 800cab2:	3001      	adds	r0, #1
 800cab4:	f43f ae97 	beq.w	800c7e6 <_printf_float+0xc2>
 800cab8:	9a05      	ldr	r2, [sp, #20]
 800caba:	f10b 0b01 	add.w	fp, fp, #1
 800cabe:	e7b9      	b.n	800ca34 <_printf_float+0x310>
 800cac0:	ee18 3a10 	vmov	r3, s16
 800cac4:	4652      	mov	r2, sl
 800cac6:	4631      	mov	r1, r6
 800cac8:	4628      	mov	r0, r5
 800caca:	47b8      	blx	r7
 800cacc:	3001      	adds	r0, #1
 800cace:	d1be      	bne.n	800ca4e <_printf_float+0x32a>
 800cad0:	e689      	b.n	800c7e6 <_printf_float+0xc2>
 800cad2:	9a05      	ldr	r2, [sp, #20]
 800cad4:	464b      	mov	r3, r9
 800cad6:	4442      	add	r2, r8
 800cad8:	4631      	mov	r1, r6
 800cada:	4628      	mov	r0, r5
 800cadc:	47b8      	blx	r7
 800cade:	3001      	adds	r0, #1
 800cae0:	d1c1      	bne.n	800ca66 <_printf_float+0x342>
 800cae2:	e680      	b.n	800c7e6 <_printf_float+0xc2>
 800cae4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cae6:	2a01      	cmp	r2, #1
 800cae8:	dc01      	bgt.n	800caee <_printf_float+0x3ca>
 800caea:	07db      	lsls	r3, r3, #31
 800caec:	d538      	bpl.n	800cb60 <_printf_float+0x43c>
 800caee:	2301      	movs	r3, #1
 800caf0:	4642      	mov	r2, r8
 800caf2:	4631      	mov	r1, r6
 800caf4:	4628      	mov	r0, r5
 800caf6:	47b8      	blx	r7
 800caf8:	3001      	adds	r0, #1
 800cafa:	f43f ae74 	beq.w	800c7e6 <_printf_float+0xc2>
 800cafe:	ee18 3a10 	vmov	r3, s16
 800cb02:	4652      	mov	r2, sl
 800cb04:	4631      	mov	r1, r6
 800cb06:	4628      	mov	r0, r5
 800cb08:	47b8      	blx	r7
 800cb0a:	3001      	adds	r0, #1
 800cb0c:	f43f ae6b 	beq.w	800c7e6 <_printf_float+0xc2>
 800cb10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cb14:	2200      	movs	r2, #0
 800cb16:	2300      	movs	r3, #0
 800cb18:	f7f4 f806 	bl	8000b28 <__aeabi_dcmpeq>
 800cb1c:	b9d8      	cbnz	r0, 800cb56 <_printf_float+0x432>
 800cb1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb20:	f108 0201 	add.w	r2, r8, #1
 800cb24:	3b01      	subs	r3, #1
 800cb26:	4631      	mov	r1, r6
 800cb28:	4628      	mov	r0, r5
 800cb2a:	47b8      	blx	r7
 800cb2c:	3001      	adds	r0, #1
 800cb2e:	d10e      	bne.n	800cb4e <_printf_float+0x42a>
 800cb30:	e659      	b.n	800c7e6 <_printf_float+0xc2>
 800cb32:	2301      	movs	r3, #1
 800cb34:	4652      	mov	r2, sl
 800cb36:	4631      	mov	r1, r6
 800cb38:	4628      	mov	r0, r5
 800cb3a:	47b8      	blx	r7
 800cb3c:	3001      	adds	r0, #1
 800cb3e:	f43f ae52 	beq.w	800c7e6 <_printf_float+0xc2>
 800cb42:	f108 0801 	add.w	r8, r8, #1
 800cb46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb48:	3b01      	subs	r3, #1
 800cb4a:	4543      	cmp	r3, r8
 800cb4c:	dcf1      	bgt.n	800cb32 <_printf_float+0x40e>
 800cb4e:	464b      	mov	r3, r9
 800cb50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cb54:	e6dc      	b.n	800c910 <_printf_float+0x1ec>
 800cb56:	f04f 0800 	mov.w	r8, #0
 800cb5a:	f104 0a1a 	add.w	sl, r4, #26
 800cb5e:	e7f2      	b.n	800cb46 <_printf_float+0x422>
 800cb60:	2301      	movs	r3, #1
 800cb62:	4642      	mov	r2, r8
 800cb64:	e7df      	b.n	800cb26 <_printf_float+0x402>
 800cb66:	2301      	movs	r3, #1
 800cb68:	464a      	mov	r2, r9
 800cb6a:	4631      	mov	r1, r6
 800cb6c:	4628      	mov	r0, r5
 800cb6e:	47b8      	blx	r7
 800cb70:	3001      	adds	r0, #1
 800cb72:	f43f ae38 	beq.w	800c7e6 <_printf_float+0xc2>
 800cb76:	f108 0801 	add.w	r8, r8, #1
 800cb7a:	68e3      	ldr	r3, [r4, #12]
 800cb7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cb7e:	1a5b      	subs	r3, r3, r1
 800cb80:	4543      	cmp	r3, r8
 800cb82:	dcf0      	bgt.n	800cb66 <_printf_float+0x442>
 800cb84:	e6fa      	b.n	800c97c <_printf_float+0x258>
 800cb86:	f04f 0800 	mov.w	r8, #0
 800cb8a:	f104 0919 	add.w	r9, r4, #25
 800cb8e:	e7f4      	b.n	800cb7a <_printf_float+0x456>

0800cb90 <_printf_common>:
 800cb90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb94:	4616      	mov	r6, r2
 800cb96:	4699      	mov	r9, r3
 800cb98:	688a      	ldr	r2, [r1, #8]
 800cb9a:	690b      	ldr	r3, [r1, #16]
 800cb9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cba0:	4293      	cmp	r3, r2
 800cba2:	bfb8      	it	lt
 800cba4:	4613      	movlt	r3, r2
 800cba6:	6033      	str	r3, [r6, #0]
 800cba8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cbac:	4607      	mov	r7, r0
 800cbae:	460c      	mov	r4, r1
 800cbb0:	b10a      	cbz	r2, 800cbb6 <_printf_common+0x26>
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	6033      	str	r3, [r6, #0]
 800cbb6:	6823      	ldr	r3, [r4, #0]
 800cbb8:	0699      	lsls	r1, r3, #26
 800cbba:	bf42      	ittt	mi
 800cbbc:	6833      	ldrmi	r3, [r6, #0]
 800cbbe:	3302      	addmi	r3, #2
 800cbc0:	6033      	strmi	r3, [r6, #0]
 800cbc2:	6825      	ldr	r5, [r4, #0]
 800cbc4:	f015 0506 	ands.w	r5, r5, #6
 800cbc8:	d106      	bne.n	800cbd8 <_printf_common+0x48>
 800cbca:	f104 0a19 	add.w	sl, r4, #25
 800cbce:	68e3      	ldr	r3, [r4, #12]
 800cbd0:	6832      	ldr	r2, [r6, #0]
 800cbd2:	1a9b      	subs	r3, r3, r2
 800cbd4:	42ab      	cmp	r3, r5
 800cbd6:	dc26      	bgt.n	800cc26 <_printf_common+0x96>
 800cbd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cbdc:	1e13      	subs	r3, r2, #0
 800cbde:	6822      	ldr	r2, [r4, #0]
 800cbe0:	bf18      	it	ne
 800cbe2:	2301      	movne	r3, #1
 800cbe4:	0692      	lsls	r2, r2, #26
 800cbe6:	d42b      	bmi.n	800cc40 <_printf_common+0xb0>
 800cbe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cbec:	4649      	mov	r1, r9
 800cbee:	4638      	mov	r0, r7
 800cbf0:	47c0      	blx	r8
 800cbf2:	3001      	adds	r0, #1
 800cbf4:	d01e      	beq.n	800cc34 <_printf_common+0xa4>
 800cbf6:	6823      	ldr	r3, [r4, #0]
 800cbf8:	68e5      	ldr	r5, [r4, #12]
 800cbfa:	6832      	ldr	r2, [r6, #0]
 800cbfc:	f003 0306 	and.w	r3, r3, #6
 800cc00:	2b04      	cmp	r3, #4
 800cc02:	bf08      	it	eq
 800cc04:	1aad      	subeq	r5, r5, r2
 800cc06:	68a3      	ldr	r3, [r4, #8]
 800cc08:	6922      	ldr	r2, [r4, #16]
 800cc0a:	bf0c      	ite	eq
 800cc0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc10:	2500      	movne	r5, #0
 800cc12:	4293      	cmp	r3, r2
 800cc14:	bfc4      	itt	gt
 800cc16:	1a9b      	subgt	r3, r3, r2
 800cc18:	18ed      	addgt	r5, r5, r3
 800cc1a:	2600      	movs	r6, #0
 800cc1c:	341a      	adds	r4, #26
 800cc1e:	42b5      	cmp	r5, r6
 800cc20:	d11a      	bne.n	800cc58 <_printf_common+0xc8>
 800cc22:	2000      	movs	r0, #0
 800cc24:	e008      	b.n	800cc38 <_printf_common+0xa8>
 800cc26:	2301      	movs	r3, #1
 800cc28:	4652      	mov	r2, sl
 800cc2a:	4649      	mov	r1, r9
 800cc2c:	4638      	mov	r0, r7
 800cc2e:	47c0      	blx	r8
 800cc30:	3001      	adds	r0, #1
 800cc32:	d103      	bne.n	800cc3c <_printf_common+0xac>
 800cc34:	f04f 30ff 	mov.w	r0, #4294967295
 800cc38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc3c:	3501      	adds	r5, #1
 800cc3e:	e7c6      	b.n	800cbce <_printf_common+0x3e>
 800cc40:	18e1      	adds	r1, r4, r3
 800cc42:	1c5a      	adds	r2, r3, #1
 800cc44:	2030      	movs	r0, #48	; 0x30
 800cc46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc4a:	4422      	add	r2, r4
 800cc4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc54:	3302      	adds	r3, #2
 800cc56:	e7c7      	b.n	800cbe8 <_printf_common+0x58>
 800cc58:	2301      	movs	r3, #1
 800cc5a:	4622      	mov	r2, r4
 800cc5c:	4649      	mov	r1, r9
 800cc5e:	4638      	mov	r0, r7
 800cc60:	47c0      	blx	r8
 800cc62:	3001      	adds	r0, #1
 800cc64:	d0e6      	beq.n	800cc34 <_printf_common+0xa4>
 800cc66:	3601      	adds	r6, #1
 800cc68:	e7d9      	b.n	800cc1e <_printf_common+0x8e>
	...

0800cc6c <_printf_i>:
 800cc6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc70:	460c      	mov	r4, r1
 800cc72:	4691      	mov	r9, r2
 800cc74:	7e27      	ldrb	r7, [r4, #24]
 800cc76:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cc78:	2f78      	cmp	r7, #120	; 0x78
 800cc7a:	4680      	mov	r8, r0
 800cc7c:	469a      	mov	sl, r3
 800cc7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc82:	d807      	bhi.n	800cc94 <_printf_i+0x28>
 800cc84:	2f62      	cmp	r7, #98	; 0x62
 800cc86:	d80a      	bhi.n	800cc9e <_printf_i+0x32>
 800cc88:	2f00      	cmp	r7, #0
 800cc8a:	f000 80d8 	beq.w	800ce3e <_printf_i+0x1d2>
 800cc8e:	2f58      	cmp	r7, #88	; 0x58
 800cc90:	f000 80a3 	beq.w	800cdda <_printf_i+0x16e>
 800cc94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cc98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cc9c:	e03a      	b.n	800cd14 <_printf_i+0xa8>
 800cc9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cca2:	2b15      	cmp	r3, #21
 800cca4:	d8f6      	bhi.n	800cc94 <_printf_i+0x28>
 800cca6:	a001      	add	r0, pc, #4	; (adr r0, 800ccac <_printf_i+0x40>)
 800cca8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ccac:	0800cd05 	.word	0x0800cd05
 800ccb0:	0800cd19 	.word	0x0800cd19
 800ccb4:	0800cc95 	.word	0x0800cc95
 800ccb8:	0800cc95 	.word	0x0800cc95
 800ccbc:	0800cc95 	.word	0x0800cc95
 800ccc0:	0800cc95 	.word	0x0800cc95
 800ccc4:	0800cd19 	.word	0x0800cd19
 800ccc8:	0800cc95 	.word	0x0800cc95
 800cccc:	0800cc95 	.word	0x0800cc95
 800ccd0:	0800cc95 	.word	0x0800cc95
 800ccd4:	0800cc95 	.word	0x0800cc95
 800ccd8:	0800ce25 	.word	0x0800ce25
 800ccdc:	0800cd49 	.word	0x0800cd49
 800cce0:	0800ce07 	.word	0x0800ce07
 800cce4:	0800cc95 	.word	0x0800cc95
 800cce8:	0800cc95 	.word	0x0800cc95
 800ccec:	0800ce47 	.word	0x0800ce47
 800ccf0:	0800cc95 	.word	0x0800cc95
 800ccf4:	0800cd49 	.word	0x0800cd49
 800ccf8:	0800cc95 	.word	0x0800cc95
 800ccfc:	0800cc95 	.word	0x0800cc95
 800cd00:	0800ce0f 	.word	0x0800ce0f
 800cd04:	680b      	ldr	r3, [r1, #0]
 800cd06:	1d1a      	adds	r2, r3, #4
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	600a      	str	r2, [r1, #0]
 800cd0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cd10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cd14:	2301      	movs	r3, #1
 800cd16:	e0a3      	b.n	800ce60 <_printf_i+0x1f4>
 800cd18:	6825      	ldr	r5, [r4, #0]
 800cd1a:	6808      	ldr	r0, [r1, #0]
 800cd1c:	062e      	lsls	r6, r5, #24
 800cd1e:	f100 0304 	add.w	r3, r0, #4
 800cd22:	d50a      	bpl.n	800cd3a <_printf_i+0xce>
 800cd24:	6805      	ldr	r5, [r0, #0]
 800cd26:	600b      	str	r3, [r1, #0]
 800cd28:	2d00      	cmp	r5, #0
 800cd2a:	da03      	bge.n	800cd34 <_printf_i+0xc8>
 800cd2c:	232d      	movs	r3, #45	; 0x2d
 800cd2e:	426d      	negs	r5, r5
 800cd30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd34:	485e      	ldr	r0, [pc, #376]	; (800ceb0 <_printf_i+0x244>)
 800cd36:	230a      	movs	r3, #10
 800cd38:	e019      	b.n	800cd6e <_printf_i+0x102>
 800cd3a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cd3e:	6805      	ldr	r5, [r0, #0]
 800cd40:	600b      	str	r3, [r1, #0]
 800cd42:	bf18      	it	ne
 800cd44:	b22d      	sxthne	r5, r5
 800cd46:	e7ef      	b.n	800cd28 <_printf_i+0xbc>
 800cd48:	680b      	ldr	r3, [r1, #0]
 800cd4a:	6825      	ldr	r5, [r4, #0]
 800cd4c:	1d18      	adds	r0, r3, #4
 800cd4e:	6008      	str	r0, [r1, #0]
 800cd50:	0628      	lsls	r0, r5, #24
 800cd52:	d501      	bpl.n	800cd58 <_printf_i+0xec>
 800cd54:	681d      	ldr	r5, [r3, #0]
 800cd56:	e002      	b.n	800cd5e <_printf_i+0xf2>
 800cd58:	0669      	lsls	r1, r5, #25
 800cd5a:	d5fb      	bpl.n	800cd54 <_printf_i+0xe8>
 800cd5c:	881d      	ldrh	r5, [r3, #0]
 800cd5e:	4854      	ldr	r0, [pc, #336]	; (800ceb0 <_printf_i+0x244>)
 800cd60:	2f6f      	cmp	r7, #111	; 0x6f
 800cd62:	bf0c      	ite	eq
 800cd64:	2308      	moveq	r3, #8
 800cd66:	230a      	movne	r3, #10
 800cd68:	2100      	movs	r1, #0
 800cd6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd6e:	6866      	ldr	r6, [r4, #4]
 800cd70:	60a6      	str	r6, [r4, #8]
 800cd72:	2e00      	cmp	r6, #0
 800cd74:	bfa2      	ittt	ge
 800cd76:	6821      	ldrge	r1, [r4, #0]
 800cd78:	f021 0104 	bicge.w	r1, r1, #4
 800cd7c:	6021      	strge	r1, [r4, #0]
 800cd7e:	b90d      	cbnz	r5, 800cd84 <_printf_i+0x118>
 800cd80:	2e00      	cmp	r6, #0
 800cd82:	d04d      	beq.n	800ce20 <_printf_i+0x1b4>
 800cd84:	4616      	mov	r6, r2
 800cd86:	fbb5 f1f3 	udiv	r1, r5, r3
 800cd8a:	fb03 5711 	mls	r7, r3, r1, r5
 800cd8e:	5dc7      	ldrb	r7, [r0, r7]
 800cd90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cd94:	462f      	mov	r7, r5
 800cd96:	42bb      	cmp	r3, r7
 800cd98:	460d      	mov	r5, r1
 800cd9a:	d9f4      	bls.n	800cd86 <_printf_i+0x11a>
 800cd9c:	2b08      	cmp	r3, #8
 800cd9e:	d10b      	bne.n	800cdb8 <_printf_i+0x14c>
 800cda0:	6823      	ldr	r3, [r4, #0]
 800cda2:	07df      	lsls	r7, r3, #31
 800cda4:	d508      	bpl.n	800cdb8 <_printf_i+0x14c>
 800cda6:	6923      	ldr	r3, [r4, #16]
 800cda8:	6861      	ldr	r1, [r4, #4]
 800cdaa:	4299      	cmp	r1, r3
 800cdac:	bfde      	ittt	le
 800cdae:	2330      	movle	r3, #48	; 0x30
 800cdb0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cdb4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cdb8:	1b92      	subs	r2, r2, r6
 800cdba:	6122      	str	r2, [r4, #16]
 800cdbc:	f8cd a000 	str.w	sl, [sp]
 800cdc0:	464b      	mov	r3, r9
 800cdc2:	aa03      	add	r2, sp, #12
 800cdc4:	4621      	mov	r1, r4
 800cdc6:	4640      	mov	r0, r8
 800cdc8:	f7ff fee2 	bl	800cb90 <_printf_common>
 800cdcc:	3001      	adds	r0, #1
 800cdce:	d14c      	bne.n	800ce6a <_printf_i+0x1fe>
 800cdd0:	f04f 30ff 	mov.w	r0, #4294967295
 800cdd4:	b004      	add	sp, #16
 800cdd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdda:	4835      	ldr	r0, [pc, #212]	; (800ceb0 <_printf_i+0x244>)
 800cddc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cde0:	6823      	ldr	r3, [r4, #0]
 800cde2:	680e      	ldr	r6, [r1, #0]
 800cde4:	061f      	lsls	r7, r3, #24
 800cde6:	f856 5b04 	ldr.w	r5, [r6], #4
 800cdea:	600e      	str	r6, [r1, #0]
 800cdec:	d514      	bpl.n	800ce18 <_printf_i+0x1ac>
 800cdee:	07d9      	lsls	r1, r3, #31
 800cdf0:	bf44      	itt	mi
 800cdf2:	f043 0320 	orrmi.w	r3, r3, #32
 800cdf6:	6023      	strmi	r3, [r4, #0]
 800cdf8:	b91d      	cbnz	r5, 800ce02 <_printf_i+0x196>
 800cdfa:	6823      	ldr	r3, [r4, #0]
 800cdfc:	f023 0320 	bic.w	r3, r3, #32
 800ce00:	6023      	str	r3, [r4, #0]
 800ce02:	2310      	movs	r3, #16
 800ce04:	e7b0      	b.n	800cd68 <_printf_i+0xfc>
 800ce06:	6823      	ldr	r3, [r4, #0]
 800ce08:	f043 0320 	orr.w	r3, r3, #32
 800ce0c:	6023      	str	r3, [r4, #0]
 800ce0e:	2378      	movs	r3, #120	; 0x78
 800ce10:	4828      	ldr	r0, [pc, #160]	; (800ceb4 <_printf_i+0x248>)
 800ce12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ce16:	e7e3      	b.n	800cde0 <_printf_i+0x174>
 800ce18:	065e      	lsls	r6, r3, #25
 800ce1a:	bf48      	it	mi
 800ce1c:	b2ad      	uxthmi	r5, r5
 800ce1e:	e7e6      	b.n	800cdee <_printf_i+0x182>
 800ce20:	4616      	mov	r6, r2
 800ce22:	e7bb      	b.n	800cd9c <_printf_i+0x130>
 800ce24:	680b      	ldr	r3, [r1, #0]
 800ce26:	6826      	ldr	r6, [r4, #0]
 800ce28:	6960      	ldr	r0, [r4, #20]
 800ce2a:	1d1d      	adds	r5, r3, #4
 800ce2c:	600d      	str	r5, [r1, #0]
 800ce2e:	0635      	lsls	r5, r6, #24
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	d501      	bpl.n	800ce38 <_printf_i+0x1cc>
 800ce34:	6018      	str	r0, [r3, #0]
 800ce36:	e002      	b.n	800ce3e <_printf_i+0x1d2>
 800ce38:	0671      	lsls	r1, r6, #25
 800ce3a:	d5fb      	bpl.n	800ce34 <_printf_i+0x1c8>
 800ce3c:	8018      	strh	r0, [r3, #0]
 800ce3e:	2300      	movs	r3, #0
 800ce40:	6123      	str	r3, [r4, #16]
 800ce42:	4616      	mov	r6, r2
 800ce44:	e7ba      	b.n	800cdbc <_printf_i+0x150>
 800ce46:	680b      	ldr	r3, [r1, #0]
 800ce48:	1d1a      	adds	r2, r3, #4
 800ce4a:	600a      	str	r2, [r1, #0]
 800ce4c:	681e      	ldr	r6, [r3, #0]
 800ce4e:	6862      	ldr	r2, [r4, #4]
 800ce50:	2100      	movs	r1, #0
 800ce52:	4630      	mov	r0, r6
 800ce54:	f7f3 f9f4 	bl	8000240 <memchr>
 800ce58:	b108      	cbz	r0, 800ce5e <_printf_i+0x1f2>
 800ce5a:	1b80      	subs	r0, r0, r6
 800ce5c:	6060      	str	r0, [r4, #4]
 800ce5e:	6863      	ldr	r3, [r4, #4]
 800ce60:	6123      	str	r3, [r4, #16]
 800ce62:	2300      	movs	r3, #0
 800ce64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce68:	e7a8      	b.n	800cdbc <_printf_i+0x150>
 800ce6a:	6923      	ldr	r3, [r4, #16]
 800ce6c:	4632      	mov	r2, r6
 800ce6e:	4649      	mov	r1, r9
 800ce70:	4640      	mov	r0, r8
 800ce72:	47d0      	blx	sl
 800ce74:	3001      	adds	r0, #1
 800ce76:	d0ab      	beq.n	800cdd0 <_printf_i+0x164>
 800ce78:	6823      	ldr	r3, [r4, #0]
 800ce7a:	079b      	lsls	r3, r3, #30
 800ce7c:	d413      	bmi.n	800cea6 <_printf_i+0x23a>
 800ce7e:	68e0      	ldr	r0, [r4, #12]
 800ce80:	9b03      	ldr	r3, [sp, #12]
 800ce82:	4298      	cmp	r0, r3
 800ce84:	bfb8      	it	lt
 800ce86:	4618      	movlt	r0, r3
 800ce88:	e7a4      	b.n	800cdd4 <_printf_i+0x168>
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	4632      	mov	r2, r6
 800ce8e:	4649      	mov	r1, r9
 800ce90:	4640      	mov	r0, r8
 800ce92:	47d0      	blx	sl
 800ce94:	3001      	adds	r0, #1
 800ce96:	d09b      	beq.n	800cdd0 <_printf_i+0x164>
 800ce98:	3501      	adds	r5, #1
 800ce9a:	68e3      	ldr	r3, [r4, #12]
 800ce9c:	9903      	ldr	r1, [sp, #12]
 800ce9e:	1a5b      	subs	r3, r3, r1
 800cea0:	42ab      	cmp	r3, r5
 800cea2:	dcf2      	bgt.n	800ce8a <_printf_i+0x21e>
 800cea4:	e7eb      	b.n	800ce7e <_printf_i+0x212>
 800cea6:	2500      	movs	r5, #0
 800cea8:	f104 0619 	add.w	r6, r4, #25
 800ceac:	e7f5      	b.n	800ce9a <_printf_i+0x22e>
 800ceae:	bf00      	nop
 800ceb0:	08011de6 	.word	0x08011de6
 800ceb4:	08011df7 	.word	0x08011df7

0800ceb8 <iprintf>:
 800ceb8:	b40f      	push	{r0, r1, r2, r3}
 800ceba:	4b0a      	ldr	r3, [pc, #40]	; (800cee4 <iprintf+0x2c>)
 800cebc:	b513      	push	{r0, r1, r4, lr}
 800cebe:	681c      	ldr	r4, [r3, #0]
 800cec0:	b124      	cbz	r4, 800cecc <iprintf+0x14>
 800cec2:	69a3      	ldr	r3, [r4, #24]
 800cec4:	b913      	cbnz	r3, 800cecc <iprintf+0x14>
 800cec6:	4620      	mov	r0, r4
 800cec8:	f001 ffb8 	bl	800ee3c <__sinit>
 800cecc:	ab05      	add	r3, sp, #20
 800cece:	9a04      	ldr	r2, [sp, #16]
 800ced0:	68a1      	ldr	r1, [r4, #8]
 800ced2:	9301      	str	r3, [sp, #4]
 800ced4:	4620      	mov	r0, r4
 800ced6:	f003 fb3d 	bl	8010554 <_vfiprintf_r>
 800ceda:	b002      	add	sp, #8
 800cedc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cee0:	b004      	add	sp, #16
 800cee2:	4770      	bx	lr
 800cee4:	2000004c 	.word	0x2000004c

0800cee8 <_puts_r>:
 800cee8:	b570      	push	{r4, r5, r6, lr}
 800ceea:	460e      	mov	r6, r1
 800ceec:	4605      	mov	r5, r0
 800ceee:	b118      	cbz	r0, 800cef8 <_puts_r+0x10>
 800cef0:	6983      	ldr	r3, [r0, #24]
 800cef2:	b90b      	cbnz	r3, 800cef8 <_puts_r+0x10>
 800cef4:	f001 ffa2 	bl	800ee3c <__sinit>
 800cef8:	69ab      	ldr	r3, [r5, #24]
 800cefa:	68ac      	ldr	r4, [r5, #8]
 800cefc:	b913      	cbnz	r3, 800cf04 <_puts_r+0x1c>
 800cefe:	4628      	mov	r0, r5
 800cf00:	f001 ff9c 	bl	800ee3c <__sinit>
 800cf04:	4b2c      	ldr	r3, [pc, #176]	; (800cfb8 <_puts_r+0xd0>)
 800cf06:	429c      	cmp	r4, r3
 800cf08:	d120      	bne.n	800cf4c <_puts_r+0x64>
 800cf0a:	686c      	ldr	r4, [r5, #4]
 800cf0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf0e:	07db      	lsls	r3, r3, #31
 800cf10:	d405      	bmi.n	800cf1e <_puts_r+0x36>
 800cf12:	89a3      	ldrh	r3, [r4, #12]
 800cf14:	0598      	lsls	r0, r3, #22
 800cf16:	d402      	bmi.n	800cf1e <_puts_r+0x36>
 800cf18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf1a:	f002 fba0 	bl	800f65e <__retarget_lock_acquire_recursive>
 800cf1e:	89a3      	ldrh	r3, [r4, #12]
 800cf20:	0719      	lsls	r1, r3, #28
 800cf22:	d51d      	bpl.n	800cf60 <_puts_r+0x78>
 800cf24:	6923      	ldr	r3, [r4, #16]
 800cf26:	b1db      	cbz	r3, 800cf60 <_puts_r+0x78>
 800cf28:	3e01      	subs	r6, #1
 800cf2a:	68a3      	ldr	r3, [r4, #8]
 800cf2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cf30:	3b01      	subs	r3, #1
 800cf32:	60a3      	str	r3, [r4, #8]
 800cf34:	bb39      	cbnz	r1, 800cf86 <_puts_r+0x9e>
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	da38      	bge.n	800cfac <_puts_r+0xc4>
 800cf3a:	4622      	mov	r2, r4
 800cf3c:	210a      	movs	r1, #10
 800cf3e:	4628      	mov	r0, r5
 800cf40:	f000 ff2a 	bl	800dd98 <__swbuf_r>
 800cf44:	3001      	adds	r0, #1
 800cf46:	d011      	beq.n	800cf6c <_puts_r+0x84>
 800cf48:	250a      	movs	r5, #10
 800cf4a:	e011      	b.n	800cf70 <_puts_r+0x88>
 800cf4c:	4b1b      	ldr	r3, [pc, #108]	; (800cfbc <_puts_r+0xd4>)
 800cf4e:	429c      	cmp	r4, r3
 800cf50:	d101      	bne.n	800cf56 <_puts_r+0x6e>
 800cf52:	68ac      	ldr	r4, [r5, #8]
 800cf54:	e7da      	b.n	800cf0c <_puts_r+0x24>
 800cf56:	4b1a      	ldr	r3, [pc, #104]	; (800cfc0 <_puts_r+0xd8>)
 800cf58:	429c      	cmp	r4, r3
 800cf5a:	bf08      	it	eq
 800cf5c:	68ec      	ldreq	r4, [r5, #12]
 800cf5e:	e7d5      	b.n	800cf0c <_puts_r+0x24>
 800cf60:	4621      	mov	r1, r4
 800cf62:	4628      	mov	r0, r5
 800cf64:	f000 ff6a 	bl	800de3c <__swsetup_r>
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	d0dd      	beq.n	800cf28 <_puts_r+0x40>
 800cf6c:	f04f 35ff 	mov.w	r5, #4294967295
 800cf70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf72:	07da      	lsls	r2, r3, #31
 800cf74:	d405      	bmi.n	800cf82 <_puts_r+0x9a>
 800cf76:	89a3      	ldrh	r3, [r4, #12]
 800cf78:	059b      	lsls	r3, r3, #22
 800cf7a:	d402      	bmi.n	800cf82 <_puts_r+0x9a>
 800cf7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf7e:	f002 fb6f 	bl	800f660 <__retarget_lock_release_recursive>
 800cf82:	4628      	mov	r0, r5
 800cf84:	bd70      	pop	{r4, r5, r6, pc}
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	da04      	bge.n	800cf94 <_puts_r+0xac>
 800cf8a:	69a2      	ldr	r2, [r4, #24]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	dc06      	bgt.n	800cf9e <_puts_r+0xb6>
 800cf90:	290a      	cmp	r1, #10
 800cf92:	d004      	beq.n	800cf9e <_puts_r+0xb6>
 800cf94:	6823      	ldr	r3, [r4, #0]
 800cf96:	1c5a      	adds	r2, r3, #1
 800cf98:	6022      	str	r2, [r4, #0]
 800cf9a:	7019      	strb	r1, [r3, #0]
 800cf9c:	e7c5      	b.n	800cf2a <_puts_r+0x42>
 800cf9e:	4622      	mov	r2, r4
 800cfa0:	4628      	mov	r0, r5
 800cfa2:	f000 fef9 	bl	800dd98 <__swbuf_r>
 800cfa6:	3001      	adds	r0, #1
 800cfa8:	d1bf      	bne.n	800cf2a <_puts_r+0x42>
 800cfaa:	e7df      	b.n	800cf6c <_puts_r+0x84>
 800cfac:	6823      	ldr	r3, [r4, #0]
 800cfae:	250a      	movs	r5, #10
 800cfb0:	1c5a      	adds	r2, r3, #1
 800cfb2:	6022      	str	r2, [r4, #0]
 800cfb4:	701d      	strb	r5, [r3, #0]
 800cfb6:	e7db      	b.n	800cf70 <_puts_r+0x88>
 800cfb8:	08012010 	.word	0x08012010
 800cfbc:	08012030 	.word	0x08012030
 800cfc0:	08011ff0 	.word	0x08011ff0

0800cfc4 <puts>:
 800cfc4:	4b02      	ldr	r3, [pc, #8]	; (800cfd0 <puts+0xc>)
 800cfc6:	4601      	mov	r1, r0
 800cfc8:	6818      	ldr	r0, [r3, #0]
 800cfca:	f7ff bf8d 	b.w	800cee8 <_puts_r>
 800cfce:	bf00      	nop
 800cfd0:	2000004c 	.word	0x2000004c

0800cfd4 <siprintf>:
 800cfd4:	b40e      	push	{r1, r2, r3}
 800cfd6:	b500      	push	{lr}
 800cfd8:	b09c      	sub	sp, #112	; 0x70
 800cfda:	ab1d      	add	r3, sp, #116	; 0x74
 800cfdc:	9002      	str	r0, [sp, #8]
 800cfde:	9006      	str	r0, [sp, #24]
 800cfe0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cfe4:	4809      	ldr	r0, [pc, #36]	; (800d00c <siprintf+0x38>)
 800cfe6:	9107      	str	r1, [sp, #28]
 800cfe8:	9104      	str	r1, [sp, #16]
 800cfea:	4909      	ldr	r1, [pc, #36]	; (800d010 <siprintf+0x3c>)
 800cfec:	f853 2b04 	ldr.w	r2, [r3], #4
 800cff0:	9105      	str	r1, [sp, #20]
 800cff2:	6800      	ldr	r0, [r0, #0]
 800cff4:	9301      	str	r3, [sp, #4]
 800cff6:	a902      	add	r1, sp, #8
 800cff8:	f003 f982 	bl	8010300 <_svfiprintf_r>
 800cffc:	9b02      	ldr	r3, [sp, #8]
 800cffe:	2200      	movs	r2, #0
 800d000:	701a      	strb	r2, [r3, #0]
 800d002:	b01c      	add	sp, #112	; 0x70
 800d004:	f85d eb04 	ldr.w	lr, [sp], #4
 800d008:	b003      	add	sp, #12
 800d00a:	4770      	bx	lr
 800d00c:	2000004c 	.word	0x2000004c
 800d010:	ffff0208 	.word	0xffff0208

0800d014 <sulp>:
 800d014:	b570      	push	{r4, r5, r6, lr}
 800d016:	4604      	mov	r4, r0
 800d018:	460d      	mov	r5, r1
 800d01a:	ec45 4b10 	vmov	d0, r4, r5
 800d01e:	4616      	mov	r6, r2
 800d020:	f002 ff0a 	bl	800fe38 <__ulp>
 800d024:	ec51 0b10 	vmov	r0, r1, d0
 800d028:	b17e      	cbz	r6, 800d04a <sulp+0x36>
 800d02a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d02e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d032:	2b00      	cmp	r3, #0
 800d034:	dd09      	ble.n	800d04a <sulp+0x36>
 800d036:	051b      	lsls	r3, r3, #20
 800d038:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d03c:	2400      	movs	r4, #0
 800d03e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d042:	4622      	mov	r2, r4
 800d044:	462b      	mov	r3, r5
 800d046:	f7f3 fb07 	bl	8000658 <__aeabi_dmul>
 800d04a:	bd70      	pop	{r4, r5, r6, pc}
 800d04c:	0000      	movs	r0, r0
	...

0800d050 <_strtod_l>:
 800d050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d054:	b0a3      	sub	sp, #140	; 0x8c
 800d056:	461f      	mov	r7, r3
 800d058:	2300      	movs	r3, #0
 800d05a:	931e      	str	r3, [sp, #120]	; 0x78
 800d05c:	4ba4      	ldr	r3, [pc, #656]	; (800d2f0 <_strtod_l+0x2a0>)
 800d05e:	9219      	str	r2, [sp, #100]	; 0x64
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	9307      	str	r3, [sp, #28]
 800d064:	4604      	mov	r4, r0
 800d066:	4618      	mov	r0, r3
 800d068:	4688      	mov	r8, r1
 800d06a:	f7f3 f8db 	bl	8000224 <strlen>
 800d06e:	f04f 0a00 	mov.w	sl, #0
 800d072:	4605      	mov	r5, r0
 800d074:	f04f 0b00 	mov.w	fp, #0
 800d078:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d07c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d07e:	781a      	ldrb	r2, [r3, #0]
 800d080:	2a2b      	cmp	r2, #43	; 0x2b
 800d082:	d04c      	beq.n	800d11e <_strtod_l+0xce>
 800d084:	d839      	bhi.n	800d0fa <_strtod_l+0xaa>
 800d086:	2a0d      	cmp	r2, #13
 800d088:	d832      	bhi.n	800d0f0 <_strtod_l+0xa0>
 800d08a:	2a08      	cmp	r2, #8
 800d08c:	d832      	bhi.n	800d0f4 <_strtod_l+0xa4>
 800d08e:	2a00      	cmp	r2, #0
 800d090:	d03c      	beq.n	800d10c <_strtod_l+0xbc>
 800d092:	2300      	movs	r3, #0
 800d094:	930e      	str	r3, [sp, #56]	; 0x38
 800d096:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d098:	7833      	ldrb	r3, [r6, #0]
 800d09a:	2b30      	cmp	r3, #48	; 0x30
 800d09c:	f040 80b4 	bne.w	800d208 <_strtod_l+0x1b8>
 800d0a0:	7873      	ldrb	r3, [r6, #1]
 800d0a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d0a6:	2b58      	cmp	r3, #88	; 0x58
 800d0a8:	d16c      	bne.n	800d184 <_strtod_l+0x134>
 800d0aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0ac:	9301      	str	r3, [sp, #4]
 800d0ae:	ab1e      	add	r3, sp, #120	; 0x78
 800d0b0:	9702      	str	r7, [sp, #8]
 800d0b2:	9300      	str	r3, [sp, #0]
 800d0b4:	4a8f      	ldr	r2, [pc, #572]	; (800d2f4 <_strtod_l+0x2a4>)
 800d0b6:	ab1f      	add	r3, sp, #124	; 0x7c
 800d0b8:	a91d      	add	r1, sp, #116	; 0x74
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	f001 ffc2 	bl	800f044 <__gethex>
 800d0c0:	f010 0707 	ands.w	r7, r0, #7
 800d0c4:	4605      	mov	r5, r0
 800d0c6:	d005      	beq.n	800d0d4 <_strtod_l+0x84>
 800d0c8:	2f06      	cmp	r7, #6
 800d0ca:	d12a      	bne.n	800d122 <_strtod_l+0xd2>
 800d0cc:	3601      	adds	r6, #1
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	961d      	str	r6, [sp, #116]	; 0x74
 800d0d2:	930e      	str	r3, [sp, #56]	; 0x38
 800d0d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	f040 8596 	bne.w	800dc08 <_strtod_l+0xbb8>
 800d0dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0de:	b1db      	cbz	r3, 800d118 <_strtod_l+0xc8>
 800d0e0:	4652      	mov	r2, sl
 800d0e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d0e6:	ec43 2b10 	vmov	d0, r2, r3
 800d0ea:	b023      	add	sp, #140	; 0x8c
 800d0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0f0:	2a20      	cmp	r2, #32
 800d0f2:	d1ce      	bne.n	800d092 <_strtod_l+0x42>
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	931d      	str	r3, [sp, #116]	; 0x74
 800d0f8:	e7c0      	b.n	800d07c <_strtod_l+0x2c>
 800d0fa:	2a2d      	cmp	r2, #45	; 0x2d
 800d0fc:	d1c9      	bne.n	800d092 <_strtod_l+0x42>
 800d0fe:	2201      	movs	r2, #1
 800d100:	920e      	str	r2, [sp, #56]	; 0x38
 800d102:	1c5a      	adds	r2, r3, #1
 800d104:	921d      	str	r2, [sp, #116]	; 0x74
 800d106:	785b      	ldrb	r3, [r3, #1]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d1c4      	bne.n	800d096 <_strtod_l+0x46>
 800d10c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d10e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d112:	2b00      	cmp	r3, #0
 800d114:	f040 8576 	bne.w	800dc04 <_strtod_l+0xbb4>
 800d118:	4652      	mov	r2, sl
 800d11a:	465b      	mov	r3, fp
 800d11c:	e7e3      	b.n	800d0e6 <_strtod_l+0x96>
 800d11e:	2200      	movs	r2, #0
 800d120:	e7ee      	b.n	800d100 <_strtod_l+0xb0>
 800d122:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d124:	b13a      	cbz	r2, 800d136 <_strtod_l+0xe6>
 800d126:	2135      	movs	r1, #53	; 0x35
 800d128:	a820      	add	r0, sp, #128	; 0x80
 800d12a:	f002 ff90 	bl	801004e <__copybits>
 800d12e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d130:	4620      	mov	r0, r4
 800d132:	f002 fb55 	bl	800f7e0 <_Bfree>
 800d136:	3f01      	subs	r7, #1
 800d138:	2f05      	cmp	r7, #5
 800d13a:	d807      	bhi.n	800d14c <_strtod_l+0xfc>
 800d13c:	e8df f007 	tbb	[pc, r7]
 800d140:	1d180b0e 	.word	0x1d180b0e
 800d144:	030e      	.short	0x030e
 800d146:	f04f 0b00 	mov.w	fp, #0
 800d14a:	46da      	mov	sl, fp
 800d14c:	0728      	lsls	r0, r5, #28
 800d14e:	d5c1      	bpl.n	800d0d4 <_strtod_l+0x84>
 800d150:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d154:	e7be      	b.n	800d0d4 <_strtod_l+0x84>
 800d156:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800d15a:	e7f7      	b.n	800d14c <_strtod_l+0xfc>
 800d15c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800d160:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d162:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d166:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d16a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d16e:	e7ed      	b.n	800d14c <_strtod_l+0xfc>
 800d170:	f8df b184 	ldr.w	fp, [pc, #388]	; 800d2f8 <_strtod_l+0x2a8>
 800d174:	f04f 0a00 	mov.w	sl, #0
 800d178:	e7e8      	b.n	800d14c <_strtod_l+0xfc>
 800d17a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d17e:	f04f 3aff 	mov.w	sl, #4294967295
 800d182:	e7e3      	b.n	800d14c <_strtod_l+0xfc>
 800d184:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d186:	1c5a      	adds	r2, r3, #1
 800d188:	921d      	str	r2, [sp, #116]	; 0x74
 800d18a:	785b      	ldrb	r3, [r3, #1]
 800d18c:	2b30      	cmp	r3, #48	; 0x30
 800d18e:	d0f9      	beq.n	800d184 <_strtod_l+0x134>
 800d190:	2b00      	cmp	r3, #0
 800d192:	d09f      	beq.n	800d0d4 <_strtod_l+0x84>
 800d194:	2301      	movs	r3, #1
 800d196:	f04f 0900 	mov.w	r9, #0
 800d19a:	9304      	str	r3, [sp, #16]
 800d19c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d19e:	930a      	str	r3, [sp, #40]	; 0x28
 800d1a0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d1a4:	464f      	mov	r7, r9
 800d1a6:	220a      	movs	r2, #10
 800d1a8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800d1aa:	7806      	ldrb	r6, [r0, #0]
 800d1ac:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d1b0:	b2d9      	uxtb	r1, r3
 800d1b2:	2909      	cmp	r1, #9
 800d1b4:	d92a      	bls.n	800d20c <_strtod_l+0x1bc>
 800d1b6:	9907      	ldr	r1, [sp, #28]
 800d1b8:	462a      	mov	r2, r5
 800d1ba:	f003 fb58 	bl	801086e <strncmp>
 800d1be:	b398      	cbz	r0, 800d228 <_strtod_l+0x1d8>
 800d1c0:	2000      	movs	r0, #0
 800d1c2:	4633      	mov	r3, r6
 800d1c4:	463d      	mov	r5, r7
 800d1c6:	9007      	str	r0, [sp, #28]
 800d1c8:	4602      	mov	r2, r0
 800d1ca:	2b65      	cmp	r3, #101	; 0x65
 800d1cc:	d001      	beq.n	800d1d2 <_strtod_l+0x182>
 800d1ce:	2b45      	cmp	r3, #69	; 0x45
 800d1d0:	d118      	bne.n	800d204 <_strtod_l+0x1b4>
 800d1d2:	b91d      	cbnz	r5, 800d1dc <_strtod_l+0x18c>
 800d1d4:	9b04      	ldr	r3, [sp, #16]
 800d1d6:	4303      	orrs	r3, r0
 800d1d8:	d098      	beq.n	800d10c <_strtod_l+0xbc>
 800d1da:	2500      	movs	r5, #0
 800d1dc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800d1e0:	f108 0301 	add.w	r3, r8, #1
 800d1e4:	931d      	str	r3, [sp, #116]	; 0x74
 800d1e6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d1ea:	2b2b      	cmp	r3, #43	; 0x2b
 800d1ec:	d075      	beq.n	800d2da <_strtod_l+0x28a>
 800d1ee:	2b2d      	cmp	r3, #45	; 0x2d
 800d1f0:	d07b      	beq.n	800d2ea <_strtod_l+0x29a>
 800d1f2:	f04f 0c00 	mov.w	ip, #0
 800d1f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d1fa:	2909      	cmp	r1, #9
 800d1fc:	f240 8082 	bls.w	800d304 <_strtod_l+0x2b4>
 800d200:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d204:	2600      	movs	r6, #0
 800d206:	e09d      	b.n	800d344 <_strtod_l+0x2f4>
 800d208:	2300      	movs	r3, #0
 800d20a:	e7c4      	b.n	800d196 <_strtod_l+0x146>
 800d20c:	2f08      	cmp	r7, #8
 800d20e:	bfd8      	it	le
 800d210:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800d212:	f100 0001 	add.w	r0, r0, #1
 800d216:	bfda      	itte	le
 800d218:	fb02 3301 	mlale	r3, r2, r1, r3
 800d21c:	9309      	strle	r3, [sp, #36]	; 0x24
 800d21e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d222:	3701      	adds	r7, #1
 800d224:	901d      	str	r0, [sp, #116]	; 0x74
 800d226:	e7bf      	b.n	800d1a8 <_strtod_l+0x158>
 800d228:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d22a:	195a      	adds	r2, r3, r5
 800d22c:	921d      	str	r2, [sp, #116]	; 0x74
 800d22e:	5d5b      	ldrb	r3, [r3, r5]
 800d230:	2f00      	cmp	r7, #0
 800d232:	d037      	beq.n	800d2a4 <_strtod_l+0x254>
 800d234:	9007      	str	r0, [sp, #28]
 800d236:	463d      	mov	r5, r7
 800d238:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800d23c:	2a09      	cmp	r2, #9
 800d23e:	d912      	bls.n	800d266 <_strtod_l+0x216>
 800d240:	2201      	movs	r2, #1
 800d242:	e7c2      	b.n	800d1ca <_strtod_l+0x17a>
 800d244:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d246:	1c5a      	adds	r2, r3, #1
 800d248:	921d      	str	r2, [sp, #116]	; 0x74
 800d24a:	785b      	ldrb	r3, [r3, #1]
 800d24c:	3001      	adds	r0, #1
 800d24e:	2b30      	cmp	r3, #48	; 0x30
 800d250:	d0f8      	beq.n	800d244 <_strtod_l+0x1f4>
 800d252:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d256:	2a08      	cmp	r2, #8
 800d258:	f200 84db 	bhi.w	800dc12 <_strtod_l+0xbc2>
 800d25c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d25e:	9007      	str	r0, [sp, #28]
 800d260:	2000      	movs	r0, #0
 800d262:	920a      	str	r2, [sp, #40]	; 0x28
 800d264:	4605      	mov	r5, r0
 800d266:	3b30      	subs	r3, #48	; 0x30
 800d268:	f100 0201 	add.w	r2, r0, #1
 800d26c:	d014      	beq.n	800d298 <_strtod_l+0x248>
 800d26e:	9907      	ldr	r1, [sp, #28]
 800d270:	4411      	add	r1, r2
 800d272:	9107      	str	r1, [sp, #28]
 800d274:	462a      	mov	r2, r5
 800d276:	eb00 0e05 	add.w	lr, r0, r5
 800d27a:	210a      	movs	r1, #10
 800d27c:	4572      	cmp	r2, lr
 800d27e:	d113      	bne.n	800d2a8 <_strtod_l+0x258>
 800d280:	182a      	adds	r2, r5, r0
 800d282:	2a08      	cmp	r2, #8
 800d284:	f105 0501 	add.w	r5, r5, #1
 800d288:	4405      	add	r5, r0
 800d28a:	dc1c      	bgt.n	800d2c6 <_strtod_l+0x276>
 800d28c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d28e:	220a      	movs	r2, #10
 800d290:	fb02 3301 	mla	r3, r2, r1, r3
 800d294:	9309      	str	r3, [sp, #36]	; 0x24
 800d296:	2200      	movs	r2, #0
 800d298:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d29a:	1c59      	adds	r1, r3, #1
 800d29c:	911d      	str	r1, [sp, #116]	; 0x74
 800d29e:	785b      	ldrb	r3, [r3, #1]
 800d2a0:	4610      	mov	r0, r2
 800d2a2:	e7c9      	b.n	800d238 <_strtod_l+0x1e8>
 800d2a4:	4638      	mov	r0, r7
 800d2a6:	e7d2      	b.n	800d24e <_strtod_l+0x1fe>
 800d2a8:	2a08      	cmp	r2, #8
 800d2aa:	dc04      	bgt.n	800d2b6 <_strtod_l+0x266>
 800d2ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d2ae:	434e      	muls	r6, r1
 800d2b0:	9609      	str	r6, [sp, #36]	; 0x24
 800d2b2:	3201      	adds	r2, #1
 800d2b4:	e7e2      	b.n	800d27c <_strtod_l+0x22c>
 800d2b6:	f102 0c01 	add.w	ip, r2, #1
 800d2ba:	f1bc 0f10 	cmp.w	ip, #16
 800d2be:	bfd8      	it	le
 800d2c0:	fb01 f909 	mulle.w	r9, r1, r9
 800d2c4:	e7f5      	b.n	800d2b2 <_strtod_l+0x262>
 800d2c6:	2d10      	cmp	r5, #16
 800d2c8:	bfdc      	itt	le
 800d2ca:	220a      	movle	r2, #10
 800d2cc:	fb02 3909 	mlale	r9, r2, r9, r3
 800d2d0:	e7e1      	b.n	800d296 <_strtod_l+0x246>
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	9307      	str	r3, [sp, #28]
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	e77c      	b.n	800d1d4 <_strtod_l+0x184>
 800d2da:	f04f 0c00 	mov.w	ip, #0
 800d2de:	f108 0302 	add.w	r3, r8, #2
 800d2e2:	931d      	str	r3, [sp, #116]	; 0x74
 800d2e4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d2e8:	e785      	b.n	800d1f6 <_strtod_l+0x1a6>
 800d2ea:	f04f 0c01 	mov.w	ip, #1
 800d2ee:	e7f6      	b.n	800d2de <_strtod_l+0x28e>
 800d2f0:	080120bc 	.word	0x080120bc
 800d2f4:	08011e08 	.word	0x08011e08
 800d2f8:	7ff00000 	.word	0x7ff00000
 800d2fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d2fe:	1c59      	adds	r1, r3, #1
 800d300:	911d      	str	r1, [sp, #116]	; 0x74
 800d302:	785b      	ldrb	r3, [r3, #1]
 800d304:	2b30      	cmp	r3, #48	; 0x30
 800d306:	d0f9      	beq.n	800d2fc <_strtod_l+0x2ac>
 800d308:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800d30c:	2908      	cmp	r1, #8
 800d30e:	f63f af79 	bhi.w	800d204 <_strtod_l+0x1b4>
 800d312:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800d316:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d318:	9308      	str	r3, [sp, #32]
 800d31a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d31c:	1c59      	adds	r1, r3, #1
 800d31e:	911d      	str	r1, [sp, #116]	; 0x74
 800d320:	785b      	ldrb	r3, [r3, #1]
 800d322:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800d326:	2e09      	cmp	r6, #9
 800d328:	d937      	bls.n	800d39a <_strtod_l+0x34a>
 800d32a:	9e08      	ldr	r6, [sp, #32]
 800d32c:	1b89      	subs	r1, r1, r6
 800d32e:	2908      	cmp	r1, #8
 800d330:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d334:	dc02      	bgt.n	800d33c <_strtod_l+0x2ec>
 800d336:	4576      	cmp	r6, lr
 800d338:	bfa8      	it	ge
 800d33a:	4676      	movge	r6, lr
 800d33c:	f1bc 0f00 	cmp.w	ip, #0
 800d340:	d000      	beq.n	800d344 <_strtod_l+0x2f4>
 800d342:	4276      	negs	r6, r6
 800d344:	2d00      	cmp	r5, #0
 800d346:	d14f      	bne.n	800d3e8 <_strtod_l+0x398>
 800d348:	9904      	ldr	r1, [sp, #16]
 800d34a:	4301      	orrs	r1, r0
 800d34c:	f47f aec2 	bne.w	800d0d4 <_strtod_l+0x84>
 800d350:	2a00      	cmp	r2, #0
 800d352:	f47f aedb 	bne.w	800d10c <_strtod_l+0xbc>
 800d356:	2b69      	cmp	r3, #105	; 0x69
 800d358:	d027      	beq.n	800d3aa <_strtod_l+0x35a>
 800d35a:	dc24      	bgt.n	800d3a6 <_strtod_l+0x356>
 800d35c:	2b49      	cmp	r3, #73	; 0x49
 800d35e:	d024      	beq.n	800d3aa <_strtod_l+0x35a>
 800d360:	2b4e      	cmp	r3, #78	; 0x4e
 800d362:	f47f aed3 	bne.w	800d10c <_strtod_l+0xbc>
 800d366:	499e      	ldr	r1, [pc, #632]	; (800d5e0 <_strtod_l+0x590>)
 800d368:	a81d      	add	r0, sp, #116	; 0x74
 800d36a:	f002 f8c3 	bl	800f4f4 <__match>
 800d36e:	2800      	cmp	r0, #0
 800d370:	f43f aecc 	beq.w	800d10c <_strtod_l+0xbc>
 800d374:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	2b28      	cmp	r3, #40	; 0x28
 800d37a:	d12d      	bne.n	800d3d8 <_strtod_l+0x388>
 800d37c:	4999      	ldr	r1, [pc, #612]	; (800d5e4 <_strtod_l+0x594>)
 800d37e:	aa20      	add	r2, sp, #128	; 0x80
 800d380:	a81d      	add	r0, sp, #116	; 0x74
 800d382:	f002 f8cb 	bl	800f51c <__hexnan>
 800d386:	2805      	cmp	r0, #5
 800d388:	d126      	bne.n	800d3d8 <_strtod_l+0x388>
 800d38a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d38c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800d390:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d394:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d398:	e69c      	b.n	800d0d4 <_strtod_l+0x84>
 800d39a:	210a      	movs	r1, #10
 800d39c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d3a0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d3a4:	e7b9      	b.n	800d31a <_strtod_l+0x2ca>
 800d3a6:	2b6e      	cmp	r3, #110	; 0x6e
 800d3a8:	e7db      	b.n	800d362 <_strtod_l+0x312>
 800d3aa:	498f      	ldr	r1, [pc, #572]	; (800d5e8 <_strtod_l+0x598>)
 800d3ac:	a81d      	add	r0, sp, #116	; 0x74
 800d3ae:	f002 f8a1 	bl	800f4f4 <__match>
 800d3b2:	2800      	cmp	r0, #0
 800d3b4:	f43f aeaa 	beq.w	800d10c <_strtod_l+0xbc>
 800d3b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d3ba:	498c      	ldr	r1, [pc, #560]	; (800d5ec <_strtod_l+0x59c>)
 800d3bc:	3b01      	subs	r3, #1
 800d3be:	a81d      	add	r0, sp, #116	; 0x74
 800d3c0:	931d      	str	r3, [sp, #116]	; 0x74
 800d3c2:	f002 f897 	bl	800f4f4 <__match>
 800d3c6:	b910      	cbnz	r0, 800d3ce <_strtod_l+0x37e>
 800d3c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	931d      	str	r3, [sp, #116]	; 0x74
 800d3ce:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800d5fc <_strtod_l+0x5ac>
 800d3d2:	f04f 0a00 	mov.w	sl, #0
 800d3d6:	e67d      	b.n	800d0d4 <_strtod_l+0x84>
 800d3d8:	4885      	ldr	r0, [pc, #532]	; (800d5f0 <_strtod_l+0x5a0>)
 800d3da:	f003 f9ed 	bl	80107b8 <nan>
 800d3de:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d3e2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d3e6:	e675      	b.n	800d0d4 <_strtod_l+0x84>
 800d3e8:	9b07      	ldr	r3, [sp, #28]
 800d3ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3ec:	1af3      	subs	r3, r6, r3
 800d3ee:	2f00      	cmp	r7, #0
 800d3f0:	bf08      	it	eq
 800d3f2:	462f      	moveq	r7, r5
 800d3f4:	2d10      	cmp	r5, #16
 800d3f6:	9308      	str	r3, [sp, #32]
 800d3f8:	46a8      	mov	r8, r5
 800d3fa:	bfa8      	it	ge
 800d3fc:	f04f 0810 	movge.w	r8, #16
 800d400:	f7f3 f8b0 	bl	8000564 <__aeabi_ui2d>
 800d404:	2d09      	cmp	r5, #9
 800d406:	4682      	mov	sl, r0
 800d408:	468b      	mov	fp, r1
 800d40a:	dd13      	ble.n	800d434 <_strtod_l+0x3e4>
 800d40c:	4b79      	ldr	r3, [pc, #484]	; (800d5f4 <_strtod_l+0x5a4>)
 800d40e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d412:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d416:	f7f3 f91f 	bl	8000658 <__aeabi_dmul>
 800d41a:	4682      	mov	sl, r0
 800d41c:	4648      	mov	r0, r9
 800d41e:	468b      	mov	fp, r1
 800d420:	f7f3 f8a0 	bl	8000564 <__aeabi_ui2d>
 800d424:	4602      	mov	r2, r0
 800d426:	460b      	mov	r3, r1
 800d428:	4650      	mov	r0, sl
 800d42a:	4659      	mov	r1, fp
 800d42c:	f7f2 ff5e 	bl	80002ec <__adddf3>
 800d430:	4682      	mov	sl, r0
 800d432:	468b      	mov	fp, r1
 800d434:	2d0f      	cmp	r5, #15
 800d436:	dc38      	bgt.n	800d4aa <_strtod_l+0x45a>
 800d438:	9b08      	ldr	r3, [sp, #32]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	f43f ae4a 	beq.w	800d0d4 <_strtod_l+0x84>
 800d440:	dd24      	ble.n	800d48c <_strtod_l+0x43c>
 800d442:	2b16      	cmp	r3, #22
 800d444:	dc0b      	bgt.n	800d45e <_strtod_l+0x40e>
 800d446:	4d6b      	ldr	r5, [pc, #428]	; (800d5f4 <_strtod_l+0x5a4>)
 800d448:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800d44c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d450:	4652      	mov	r2, sl
 800d452:	465b      	mov	r3, fp
 800d454:	f7f3 f900 	bl	8000658 <__aeabi_dmul>
 800d458:	4682      	mov	sl, r0
 800d45a:	468b      	mov	fp, r1
 800d45c:	e63a      	b.n	800d0d4 <_strtod_l+0x84>
 800d45e:	9a08      	ldr	r2, [sp, #32]
 800d460:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d464:	4293      	cmp	r3, r2
 800d466:	db20      	blt.n	800d4aa <_strtod_l+0x45a>
 800d468:	4c62      	ldr	r4, [pc, #392]	; (800d5f4 <_strtod_l+0x5a4>)
 800d46a:	f1c5 050f 	rsb	r5, r5, #15
 800d46e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d472:	4652      	mov	r2, sl
 800d474:	465b      	mov	r3, fp
 800d476:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d47a:	f7f3 f8ed 	bl	8000658 <__aeabi_dmul>
 800d47e:	9b08      	ldr	r3, [sp, #32]
 800d480:	1b5d      	subs	r5, r3, r5
 800d482:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d486:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d48a:	e7e3      	b.n	800d454 <_strtod_l+0x404>
 800d48c:	9b08      	ldr	r3, [sp, #32]
 800d48e:	3316      	adds	r3, #22
 800d490:	db0b      	blt.n	800d4aa <_strtod_l+0x45a>
 800d492:	9b07      	ldr	r3, [sp, #28]
 800d494:	4a57      	ldr	r2, [pc, #348]	; (800d5f4 <_strtod_l+0x5a4>)
 800d496:	1b9e      	subs	r6, r3, r6
 800d498:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800d49c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d4a0:	4650      	mov	r0, sl
 800d4a2:	4659      	mov	r1, fp
 800d4a4:	f7f3 fa02 	bl	80008ac <__aeabi_ddiv>
 800d4a8:	e7d6      	b.n	800d458 <_strtod_l+0x408>
 800d4aa:	9b08      	ldr	r3, [sp, #32]
 800d4ac:	eba5 0808 	sub.w	r8, r5, r8
 800d4b0:	4498      	add	r8, r3
 800d4b2:	f1b8 0f00 	cmp.w	r8, #0
 800d4b6:	dd71      	ble.n	800d59c <_strtod_l+0x54c>
 800d4b8:	f018 030f 	ands.w	r3, r8, #15
 800d4bc:	d00a      	beq.n	800d4d4 <_strtod_l+0x484>
 800d4be:	494d      	ldr	r1, [pc, #308]	; (800d5f4 <_strtod_l+0x5a4>)
 800d4c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d4c4:	4652      	mov	r2, sl
 800d4c6:	465b      	mov	r3, fp
 800d4c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4cc:	f7f3 f8c4 	bl	8000658 <__aeabi_dmul>
 800d4d0:	4682      	mov	sl, r0
 800d4d2:	468b      	mov	fp, r1
 800d4d4:	f038 080f 	bics.w	r8, r8, #15
 800d4d8:	d04d      	beq.n	800d576 <_strtod_l+0x526>
 800d4da:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d4de:	dd22      	ble.n	800d526 <_strtod_l+0x4d6>
 800d4e0:	2500      	movs	r5, #0
 800d4e2:	462e      	mov	r6, r5
 800d4e4:	9509      	str	r5, [sp, #36]	; 0x24
 800d4e6:	9507      	str	r5, [sp, #28]
 800d4e8:	2322      	movs	r3, #34	; 0x22
 800d4ea:	f8df b110 	ldr.w	fp, [pc, #272]	; 800d5fc <_strtod_l+0x5ac>
 800d4ee:	6023      	str	r3, [r4, #0]
 800d4f0:	f04f 0a00 	mov.w	sl, #0
 800d4f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	f43f adec 	beq.w	800d0d4 <_strtod_l+0x84>
 800d4fc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d4fe:	4620      	mov	r0, r4
 800d500:	f002 f96e 	bl	800f7e0 <_Bfree>
 800d504:	9907      	ldr	r1, [sp, #28]
 800d506:	4620      	mov	r0, r4
 800d508:	f002 f96a 	bl	800f7e0 <_Bfree>
 800d50c:	4631      	mov	r1, r6
 800d50e:	4620      	mov	r0, r4
 800d510:	f002 f966 	bl	800f7e0 <_Bfree>
 800d514:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d516:	4620      	mov	r0, r4
 800d518:	f002 f962 	bl	800f7e0 <_Bfree>
 800d51c:	4629      	mov	r1, r5
 800d51e:	4620      	mov	r0, r4
 800d520:	f002 f95e 	bl	800f7e0 <_Bfree>
 800d524:	e5d6      	b.n	800d0d4 <_strtod_l+0x84>
 800d526:	2300      	movs	r3, #0
 800d528:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d52c:	4650      	mov	r0, sl
 800d52e:	4659      	mov	r1, fp
 800d530:	4699      	mov	r9, r3
 800d532:	f1b8 0f01 	cmp.w	r8, #1
 800d536:	dc21      	bgt.n	800d57c <_strtod_l+0x52c>
 800d538:	b10b      	cbz	r3, 800d53e <_strtod_l+0x4ee>
 800d53a:	4682      	mov	sl, r0
 800d53c:	468b      	mov	fp, r1
 800d53e:	4b2e      	ldr	r3, [pc, #184]	; (800d5f8 <_strtod_l+0x5a8>)
 800d540:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d544:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d548:	4652      	mov	r2, sl
 800d54a:	465b      	mov	r3, fp
 800d54c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d550:	f7f3 f882 	bl	8000658 <__aeabi_dmul>
 800d554:	4b29      	ldr	r3, [pc, #164]	; (800d5fc <_strtod_l+0x5ac>)
 800d556:	460a      	mov	r2, r1
 800d558:	400b      	ands	r3, r1
 800d55a:	4929      	ldr	r1, [pc, #164]	; (800d600 <_strtod_l+0x5b0>)
 800d55c:	428b      	cmp	r3, r1
 800d55e:	4682      	mov	sl, r0
 800d560:	d8be      	bhi.n	800d4e0 <_strtod_l+0x490>
 800d562:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d566:	428b      	cmp	r3, r1
 800d568:	bf86      	itte	hi
 800d56a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800d604 <_strtod_l+0x5b4>
 800d56e:	f04f 3aff 	movhi.w	sl, #4294967295
 800d572:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d576:	2300      	movs	r3, #0
 800d578:	9304      	str	r3, [sp, #16]
 800d57a:	e081      	b.n	800d680 <_strtod_l+0x630>
 800d57c:	f018 0f01 	tst.w	r8, #1
 800d580:	d007      	beq.n	800d592 <_strtod_l+0x542>
 800d582:	4b1d      	ldr	r3, [pc, #116]	; (800d5f8 <_strtod_l+0x5a8>)
 800d584:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800d588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58c:	f7f3 f864 	bl	8000658 <__aeabi_dmul>
 800d590:	2301      	movs	r3, #1
 800d592:	f109 0901 	add.w	r9, r9, #1
 800d596:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d59a:	e7ca      	b.n	800d532 <_strtod_l+0x4e2>
 800d59c:	d0eb      	beq.n	800d576 <_strtod_l+0x526>
 800d59e:	f1c8 0800 	rsb	r8, r8, #0
 800d5a2:	f018 020f 	ands.w	r2, r8, #15
 800d5a6:	d00a      	beq.n	800d5be <_strtod_l+0x56e>
 800d5a8:	4b12      	ldr	r3, [pc, #72]	; (800d5f4 <_strtod_l+0x5a4>)
 800d5aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5ae:	4650      	mov	r0, sl
 800d5b0:	4659      	mov	r1, fp
 800d5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b6:	f7f3 f979 	bl	80008ac <__aeabi_ddiv>
 800d5ba:	4682      	mov	sl, r0
 800d5bc:	468b      	mov	fp, r1
 800d5be:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d5c2:	d0d8      	beq.n	800d576 <_strtod_l+0x526>
 800d5c4:	f1b8 0f1f 	cmp.w	r8, #31
 800d5c8:	dd1e      	ble.n	800d608 <_strtod_l+0x5b8>
 800d5ca:	2500      	movs	r5, #0
 800d5cc:	462e      	mov	r6, r5
 800d5ce:	9509      	str	r5, [sp, #36]	; 0x24
 800d5d0:	9507      	str	r5, [sp, #28]
 800d5d2:	2322      	movs	r3, #34	; 0x22
 800d5d4:	f04f 0a00 	mov.w	sl, #0
 800d5d8:	f04f 0b00 	mov.w	fp, #0
 800d5dc:	6023      	str	r3, [r4, #0]
 800d5de:	e789      	b.n	800d4f4 <_strtod_l+0x4a4>
 800d5e0:	08011de1 	.word	0x08011de1
 800d5e4:	08011e1c 	.word	0x08011e1c
 800d5e8:	08011dd9 	.word	0x08011dd9
 800d5ec:	08011f5c 	.word	0x08011f5c
 800d5f0:	08012278 	.word	0x08012278
 800d5f4:	08012158 	.word	0x08012158
 800d5f8:	08012130 	.word	0x08012130
 800d5fc:	7ff00000 	.word	0x7ff00000
 800d600:	7ca00000 	.word	0x7ca00000
 800d604:	7fefffff 	.word	0x7fefffff
 800d608:	f018 0310 	ands.w	r3, r8, #16
 800d60c:	bf18      	it	ne
 800d60e:	236a      	movne	r3, #106	; 0x6a
 800d610:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800d9c8 <_strtod_l+0x978>
 800d614:	9304      	str	r3, [sp, #16]
 800d616:	4650      	mov	r0, sl
 800d618:	4659      	mov	r1, fp
 800d61a:	2300      	movs	r3, #0
 800d61c:	f018 0f01 	tst.w	r8, #1
 800d620:	d004      	beq.n	800d62c <_strtod_l+0x5dc>
 800d622:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d626:	f7f3 f817 	bl	8000658 <__aeabi_dmul>
 800d62a:	2301      	movs	r3, #1
 800d62c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d630:	f109 0908 	add.w	r9, r9, #8
 800d634:	d1f2      	bne.n	800d61c <_strtod_l+0x5cc>
 800d636:	b10b      	cbz	r3, 800d63c <_strtod_l+0x5ec>
 800d638:	4682      	mov	sl, r0
 800d63a:	468b      	mov	fp, r1
 800d63c:	9b04      	ldr	r3, [sp, #16]
 800d63e:	b1bb      	cbz	r3, 800d670 <_strtod_l+0x620>
 800d640:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800d644:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d648:	2b00      	cmp	r3, #0
 800d64a:	4659      	mov	r1, fp
 800d64c:	dd10      	ble.n	800d670 <_strtod_l+0x620>
 800d64e:	2b1f      	cmp	r3, #31
 800d650:	f340 8128 	ble.w	800d8a4 <_strtod_l+0x854>
 800d654:	2b34      	cmp	r3, #52	; 0x34
 800d656:	bfde      	ittt	le
 800d658:	3b20      	suble	r3, #32
 800d65a:	f04f 32ff 	movle.w	r2, #4294967295
 800d65e:	fa02 f303 	lslle.w	r3, r2, r3
 800d662:	f04f 0a00 	mov.w	sl, #0
 800d666:	bfcc      	ite	gt
 800d668:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d66c:	ea03 0b01 	andle.w	fp, r3, r1
 800d670:	2200      	movs	r2, #0
 800d672:	2300      	movs	r3, #0
 800d674:	4650      	mov	r0, sl
 800d676:	4659      	mov	r1, fp
 800d678:	f7f3 fa56 	bl	8000b28 <__aeabi_dcmpeq>
 800d67c:	2800      	cmp	r0, #0
 800d67e:	d1a4      	bne.n	800d5ca <_strtod_l+0x57a>
 800d680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d682:	9300      	str	r3, [sp, #0]
 800d684:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d686:	462b      	mov	r3, r5
 800d688:	463a      	mov	r2, r7
 800d68a:	4620      	mov	r0, r4
 800d68c:	f002 f914 	bl	800f8b8 <__s2b>
 800d690:	9009      	str	r0, [sp, #36]	; 0x24
 800d692:	2800      	cmp	r0, #0
 800d694:	f43f af24 	beq.w	800d4e0 <_strtod_l+0x490>
 800d698:	9b07      	ldr	r3, [sp, #28]
 800d69a:	1b9e      	subs	r6, r3, r6
 800d69c:	9b08      	ldr	r3, [sp, #32]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	bfb4      	ite	lt
 800d6a2:	4633      	movlt	r3, r6
 800d6a4:	2300      	movge	r3, #0
 800d6a6:	9310      	str	r3, [sp, #64]	; 0x40
 800d6a8:	9b08      	ldr	r3, [sp, #32]
 800d6aa:	2500      	movs	r5, #0
 800d6ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d6b0:	9318      	str	r3, [sp, #96]	; 0x60
 800d6b2:	462e      	mov	r6, r5
 800d6b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	6859      	ldr	r1, [r3, #4]
 800d6ba:	f002 f851 	bl	800f760 <_Balloc>
 800d6be:	9007      	str	r0, [sp, #28]
 800d6c0:	2800      	cmp	r0, #0
 800d6c2:	f43f af11 	beq.w	800d4e8 <_strtod_l+0x498>
 800d6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6c8:	691a      	ldr	r2, [r3, #16]
 800d6ca:	3202      	adds	r2, #2
 800d6cc:	f103 010c 	add.w	r1, r3, #12
 800d6d0:	0092      	lsls	r2, r2, #2
 800d6d2:	300c      	adds	r0, #12
 800d6d4:	f7fe ff70 	bl	800c5b8 <memcpy>
 800d6d8:	ec4b ab10 	vmov	d0, sl, fp
 800d6dc:	aa20      	add	r2, sp, #128	; 0x80
 800d6de:	a91f      	add	r1, sp, #124	; 0x7c
 800d6e0:	4620      	mov	r0, r4
 800d6e2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800d6e6:	f002 fc23 	bl	800ff30 <__d2b>
 800d6ea:	901e      	str	r0, [sp, #120]	; 0x78
 800d6ec:	2800      	cmp	r0, #0
 800d6ee:	f43f aefb 	beq.w	800d4e8 <_strtod_l+0x498>
 800d6f2:	2101      	movs	r1, #1
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	f002 f979 	bl	800f9ec <__i2b>
 800d6fa:	4606      	mov	r6, r0
 800d6fc:	2800      	cmp	r0, #0
 800d6fe:	f43f aef3 	beq.w	800d4e8 <_strtod_l+0x498>
 800d702:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d704:	9904      	ldr	r1, [sp, #16]
 800d706:	2b00      	cmp	r3, #0
 800d708:	bfab      	itete	ge
 800d70a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800d70c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800d70e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800d710:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800d714:	bfac      	ite	ge
 800d716:	eb03 0902 	addge.w	r9, r3, r2
 800d71a:	1ad7      	sublt	r7, r2, r3
 800d71c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d71e:	eba3 0801 	sub.w	r8, r3, r1
 800d722:	4490      	add	r8, r2
 800d724:	4ba3      	ldr	r3, [pc, #652]	; (800d9b4 <_strtod_l+0x964>)
 800d726:	f108 38ff 	add.w	r8, r8, #4294967295
 800d72a:	4598      	cmp	r8, r3
 800d72c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d730:	f280 80cc 	bge.w	800d8cc <_strtod_l+0x87c>
 800d734:	eba3 0308 	sub.w	r3, r3, r8
 800d738:	2b1f      	cmp	r3, #31
 800d73a:	eba2 0203 	sub.w	r2, r2, r3
 800d73e:	f04f 0101 	mov.w	r1, #1
 800d742:	f300 80b6 	bgt.w	800d8b2 <_strtod_l+0x862>
 800d746:	fa01 f303 	lsl.w	r3, r1, r3
 800d74a:	9311      	str	r3, [sp, #68]	; 0x44
 800d74c:	2300      	movs	r3, #0
 800d74e:	930c      	str	r3, [sp, #48]	; 0x30
 800d750:	eb09 0802 	add.w	r8, r9, r2
 800d754:	9b04      	ldr	r3, [sp, #16]
 800d756:	45c1      	cmp	r9, r8
 800d758:	4417      	add	r7, r2
 800d75a:	441f      	add	r7, r3
 800d75c:	464b      	mov	r3, r9
 800d75e:	bfa8      	it	ge
 800d760:	4643      	movge	r3, r8
 800d762:	42bb      	cmp	r3, r7
 800d764:	bfa8      	it	ge
 800d766:	463b      	movge	r3, r7
 800d768:	2b00      	cmp	r3, #0
 800d76a:	bfc2      	ittt	gt
 800d76c:	eba8 0803 	subgt.w	r8, r8, r3
 800d770:	1aff      	subgt	r7, r7, r3
 800d772:	eba9 0903 	subgt.w	r9, r9, r3
 800d776:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d778:	2b00      	cmp	r3, #0
 800d77a:	dd17      	ble.n	800d7ac <_strtod_l+0x75c>
 800d77c:	4631      	mov	r1, r6
 800d77e:	461a      	mov	r2, r3
 800d780:	4620      	mov	r0, r4
 800d782:	f002 f9ef 	bl	800fb64 <__pow5mult>
 800d786:	4606      	mov	r6, r0
 800d788:	2800      	cmp	r0, #0
 800d78a:	f43f aead 	beq.w	800d4e8 <_strtod_l+0x498>
 800d78e:	4601      	mov	r1, r0
 800d790:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d792:	4620      	mov	r0, r4
 800d794:	f002 f940 	bl	800fa18 <__multiply>
 800d798:	900f      	str	r0, [sp, #60]	; 0x3c
 800d79a:	2800      	cmp	r0, #0
 800d79c:	f43f aea4 	beq.w	800d4e8 <_strtod_l+0x498>
 800d7a0:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d7a2:	4620      	mov	r0, r4
 800d7a4:	f002 f81c 	bl	800f7e0 <_Bfree>
 800d7a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d7aa:	931e      	str	r3, [sp, #120]	; 0x78
 800d7ac:	f1b8 0f00 	cmp.w	r8, #0
 800d7b0:	f300 8091 	bgt.w	800d8d6 <_strtod_l+0x886>
 800d7b4:	9b08      	ldr	r3, [sp, #32]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	dd08      	ble.n	800d7cc <_strtod_l+0x77c>
 800d7ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d7bc:	9907      	ldr	r1, [sp, #28]
 800d7be:	4620      	mov	r0, r4
 800d7c0:	f002 f9d0 	bl	800fb64 <__pow5mult>
 800d7c4:	9007      	str	r0, [sp, #28]
 800d7c6:	2800      	cmp	r0, #0
 800d7c8:	f43f ae8e 	beq.w	800d4e8 <_strtod_l+0x498>
 800d7cc:	2f00      	cmp	r7, #0
 800d7ce:	dd08      	ble.n	800d7e2 <_strtod_l+0x792>
 800d7d0:	9907      	ldr	r1, [sp, #28]
 800d7d2:	463a      	mov	r2, r7
 800d7d4:	4620      	mov	r0, r4
 800d7d6:	f002 fa1f 	bl	800fc18 <__lshift>
 800d7da:	9007      	str	r0, [sp, #28]
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	f43f ae83 	beq.w	800d4e8 <_strtod_l+0x498>
 800d7e2:	f1b9 0f00 	cmp.w	r9, #0
 800d7e6:	dd08      	ble.n	800d7fa <_strtod_l+0x7aa>
 800d7e8:	4631      	mov	r1, r6
 800d7ea:	464a      	mov	r2, r9
 800d7ec:	4620      	mov	r0, r4
 800d7ee:	f002 fa13 	bl	800fc18 <__lshift>
 800d7f2:	4606      	mov	r6, r0
 800d7f4:	2800      	cmp	r0, #0
 800d7f6:	f43f ae77 	beq.w	800d4e8 <_strtod_l+0x498>
 800d7fa:	9a07      	ldr	r2, [sp, #28]
 800d7fc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d7fe:	4620      	mov	r0, r4
 800d800:	f002 fa92 	bl	800fd28 <__mdiff>
 800d804:	4605      	mov	r5, r0
 800d806:	2800      	cmp	r0, #0
 800d808:	f43f ae6e 	beq.w	800d4e8 <_strtod_l+0x498>
 800d80c:	68c3      	ldr	r3, [r0, #12]
 800d80e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d810:	2300      	movs	r3, #0
 800d812:	60c3      	str	r3, [r0, #12]
 800d814:	4631      	mov	r1, r6
 800d816:	f002 fa6b 	bl	800fcf0 <__mcmp>
 800d81a:	2800      	cmp	r0, #0
 800d81c:	da65      	bge.n	800d8ea <_strtod_l+0x89a>
 800d81e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d820:	ea53 030a 	orrs.w	r3, r3, sl
 800d824:	f040 8087 	bne.w	800d936 <_strtod_l+0x8e6>
 800d828:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	f040 8082 	bne.w	800d936 <_strtod_l+0x8e6>
 800d832:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d836:	0d1b      	lsrs	r3, r3, #20
 800d838:	051b      	lsls	r3, r3, #20
 800d83a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d83e:	d97a      	bls.n	800d936 <_strtod_l+0x8e6>
 800d840:	696b      	ldr	r3, [r5, #20]
 800d842:	b913      	cbnz	r3, 800d84a <_strtod_l+0x7fa>
 800d844:	692b      	ldr	r3, [r5, #16]
 800d846:	2b01      	cmp	r3, #1
 800d848:	dd75      	ble.n	800d936 <_strtod_l+0x8e6>
 800d84a:	4629      	mov	r1, r5
 800d84c:	2201      	movs	r2, #1
 800d84e:	4620      	mov	r0, r4
 800d850:	f002 f9e2 	bl	800fc18 <__lshift>
 800d854:	4631      	mov	r1, r6
 800d856:	4605      	mov	r5, r0
 800d858:	f002 fa4a 	bl	800fcf0 <__mcmp>
 800d85c:	2800      	cmp	r0, #0
 800d85e:	dd6a      	ble.n	800d936 <_strtod_l+0x8e6>
 800d860:	9904      	ldr	r1, [sp, #16]
 800d862:	4a55      	ldr	r2, [pc, #340]	; (800d9b8 <_strtod_l+0x968>)
 800d864:	465b      	mov	r3, fp
 800d866:	2900      	cmp	r1, #0
 800d868:	f000 8085 	beq.w	800d976 <_strtod_l+0x926>
 800d86c:	ea02 010b 	and.w	r1, r2, fp
 800d870:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d874:	dc7f      	bgt.n	800d976 <_strtod_l+0x926>
 800d876:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d87a:	f77f aeaa 	ble.w	800d5d2 <_strtod_l+0x582>
 800d87e:	4a4f      	ldr	r2, [pc, #316]	; (800d9bc <_strtod_l+0x96c>)
 800d880:	2300      	movs	r3, #0
 800d882:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800d886:	4650      	mov	r0, sl
 800d888:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800d88c:	4659      	mov	r1, fp
 800d88e:	f7f2 fee3 	bl	8000658 <__aeabi_dmul>
 800d892:	460b      	mov	r3, r1
 800d894:	4303      	orrs	r3, r0
 800d896:	bf08      	it	eq
 800d898:	2322      	moveq	r3, #34	; 0x22
 800d89a:	4682      	mov	sl, r0
 800d89c:	468b      	mov	fp, r1
 800d89e:	bf08      	it	eq
 800d8a0:	6023      	streq	r3, [r4, #0]
 800d8a2:	e62b      	b.n	800d4fc <_strtod_l+0x4ac>
 800d8a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d8a8:	fa02 f303 	lsl.w	r3, r2, r3
 800d8ac:	ea03 0a0a 	and.w	sl, r3, sl
 800d8b0:	e6de      	b.n	800d670 <_strtod_l+0x620>
 800d8b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d8b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d8ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d8be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d8c2:	fa01 f308 	lsl.w	r3, r1, r8
 800d8c6:	930c      	str	r3, [sp, #48]	; 0x30
 800d8c8:	9111      	str	r1, [sp, #68]	; 0x44
 800d8ca:	e741      	b.n	800d750 <_strtod_l+0x700>
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	930c      	str	r3, [sp, #48]	; 0x30
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	9311      	str	r3, [sp, #68]	; 0x44
 800d8d4:	e73c      	b.n	800d750 <_strtod_l+0x700>
 800d8d6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d8d8:	4642      	mov	r2, r8
 800d8da:	4620      	mov	r0, r4
 800d8dc:	f002 f99c 	bl	800fc18 <__lshift>
 800d8e0:	901e      	str	r0, [sp, #120]	; 0x78
 800d8e2:	2800      	cmp	r0, #0
 800d8e4:	f47f af66 	bne.w	800d7b4 <_strtod_l+0x764>
 800d8e8:	e5fe      	b.n	800d4e8 <_strtod_l+0x498>
 800d8ea:	465f      	mov	r7, fp
 800d8ec:	d16e      	bne.n	800d9cc <_strtod_l+0x97c>
 800d8ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d8f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d8f4:	b342      	cbz	r2, 800d948 <_strtod_l+0x8f8>
 800d8f6:	4a32      	ldr	r2, [pc, #200]	; (800d9c0 <_strtod_l+0x970>)
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	d128      	bne.n	800d94e <_strtod_l+0x8fe>
 800d8fc:	9b04      	ldr	r3, [sp, #16]
 800d8fe:	4650      	mov	r0, sl
 800d900:	b1eb      	cbz	r3, 800d93e <_strtod_l+0x8ee>
 800d902:	4a2d      	ldr	r2, [pc, #180]	; (800d9b8 <_strtod_l+0x968>)
 800d904:	403a      	ands	r2, r7
 800d906:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d90a:	f04f 31ff 	mov.w	r1, #4294967295
 800d90e:	d819      	bhi.n	800d944 <_strtod_l+0x8f4>
 800d910:	0d12      	lsrs	r2, r2, #20
 800d912:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d916:	fa01 f303 	lsl.w	r3, r1, r3
 800d91a:	4298      	cmp	r0, r3
 800d91c:	d117      	bne.n	800d94e <_strtod_l+0x8fe>
 800d91e:	4b29      	ldr	r3, [pc, #164]	; (800d9c4 <_strtod_l+0x974>)
 800d920:	429f      	cmp	r7, r3
 800d922:	d102      	bne.n	800d92a <_strtod_l+0x8da>
 800d924:	3001      	adds	r0, #1
 800d926:	f43f addf 	beq.w	800d4e8 <_strtod_l+0x498>
 800d92a:	4b23      	ldr	r3, [pc, #140]	; (800d9b8 <_strtod_l+0x968>)
 800d92c:	403b      	ands	r3, r7
 800d92e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d932:	f04f 0a00 	mov.w	sl, #0
 800d936:	9b04      	ldr	r3, [sp, #16]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d1a0      	bne.n	800d87e <_strtod_l+0x82e>
 800d93c:	e5de      	b.n	800d4fc <_strtod_l+0x4ac>
 800d93e:	f04f 33ff 	mov.w	r3, #4294967295
 800d942:	e7ea      	b.n	800d91a <_strtod_l+0x8ca>
 800d944:	460b      	mov	r3, r1
 800d946:	e7e8      	b.n	800d91a <_strtod_l+0x8ca>
 800d948:	ea53 030a 	orrs.w	r3, r3, sl
 800d94c:	d088      	beq.n	800d860 <_strtod_l+0x810>
 800d94e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d950:	b1db      	cbz	r3, 800d98a <_strtod_l+0x93a>
 800d952:	423b      	tst	r3, r7
 800d954:	d0ef      	beq.n	800d936 <_strtod_l+0x8e6>
 800d956:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d958:	9a04      	ldr	r2, [sp, #16]
 800d95a:	4650      	mov	r0, sl
 800d95c:	4659      	mov	r1, fp
 800d95e:	b1c3      	cbz	r3, 800d992 <_strtod_l+0x942>
 800d960:	f7ff fb58 	bl	800d014 <sulp>
 800d964:	4602      	mov	r2, r0
 800d966:	460b      	mov	r3, r1
 800d968:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d96c:	f7f2 fcbe 	bl	80002ec <__adddf3>
 800d970:	4682      	mov	sl, r0
 800d972:	468b      	mov	fp, r1
 800d974:	e7df      	b.n	800d936 <_strtod_l+0x8e6>
 800d976:	4013      	ands	r3, r2
 800d978:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d97c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d980:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d984:	f04f 3aff 	mov.w	sl, #4294967295
 800d988:	e7d5      	b.n	800d936 <_strtod_l+0x8e6>
 800d98a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d98c:	ea13 0f0a 	tst.w	r3, sl
 800d990:	e7e0      	b.n	800d954 <_strtod_l+0x904>
 800d992:	f7ff fb3f 	bl	800d014 <sulp>
 800d996:	4602      	mov	r2, r0
 800d998:	460b      	mov	r3, r1
 800d99a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d99e:	f7f2 fca3 	bl	80002e8 <__aeabi_dsub>
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	4682      	mov	sl, r0
 800d9a8:	468b      	mov	fp, r1
 800d9aa:	f7f3 f8bd 	bl	8000b28 <__aeabi_dcmpeq>
 800d9ae:	2800      	cmp	r0, #0
 800d9b0:	d0c1      	beq.n	800d936 <_strtod_l+0x8e6>
 800d9b2:	e60e      	b.n	800d5d2 <_strtod_l+0x582>
 800d9b4:	fffffc02 	.word	0xfffffc02
 800d9b8:	7ff00000 	.word	0x7ff00000
 800d9bc:	39500000 	.word	0x39500000
 800d9c0:	000fffff 	.word	0x000fffff
 800d9c4:	7fefffff 	.word	0x7fefffff
 800d9c8:	08011e30 	.word	0x08011e30
 800d9cc:	4631      	mov	r1, r6
 800d9ce:	4628      	mov	r0, r5
 800d9d0:	f002 fb0a 	bl	800ffe8 <__ratio>
 800d9d4:	ec59 8b10 	vmov	r8, r9, d0
 800d9d8:	ee10 0a10 	vmov	r0, s0
 800d9dc:	2200      	movs	r2, #0
 800d9de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d9e2:	4649      	mov	r1, r9
 800d9e4:	f7f3 f8b4 	bl	8000b50 <__aeabi_dcmple>
 800d9e8:	2800      	cmp	r0, #0
 800d9ea:	d07c      	beq.n	800dae6 <_strtod_l+0xa96>
 800d9ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d04c      	beq.n	800da8c <_strtod_l+0xa3c>
 800d9f2:	4b95      	ldr	r3, [pc, #596]	; (800dc48 <_strtod_l+0xbf8>)
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d9fa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800dc48 <_strtod_l+0xbf8>
 800d9fe:	f04f 0800 	mov.w	r8, #0
 800da02:	4b92      	ldr	r3, [pc, #584]	; (800dc4c <_strtod_l+0xbfc>)
 800da04:	403b      	ands	r3, r7
 800da06:	9311      	str	r3, [sp, #68]	; 0x44
 800da08:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800da0a:	4b91      	ldr	r3, [pc, #580]	; (800dc50 <_strtod_l+0xc00>)
 800da0c:	429a      	cmp	r2, r3
 800da0e:	f040 80b2 	bne.w	800db76 <_strtod_l+0xb26>
 800da12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800da16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800da1a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800da1e:	ec4b ab10 	vmov	d0, sl, fp
 800da22:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800da26:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800da2a:	f002 fa05 	bl	800fe38 <__ulp>
 800da2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800da32:	ec53 2b10 	vmov	r2, r3, d0
 800da36:	f7f2 fe0f 	bl	8000658 <__aeabi_dmul>
 800da3a:	4652      	mov	r2, sl
 800da3c:	465b      	mov	r3, fp
 800da3e:	f7f2 fc55 	bl	80002ec <__adddf3>
 800da42:	460b      	mov	r3, r1
 800da44:	4981      	ldr	r1, [pc, #516]	; (800dc4c <_strtod_l+0xbfc>)
 800da46:	4a83      	ldr	r2, [pc, #524]	; (800dc54 <_strtod_l+0xc04>)
 800da48:	4019      	ands	r1, r3
 800da4a:	4291      	cmp	r1, r2
 800da4c:	4682      	mov	sl, r0
 800da4e:	d95e      	bls.n	800db0e <_strtod_l+0xabe>
 800da50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da52:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800da56:	4293      	cmp	r3, r2
 800da58:	d103      	bne.n	800da62 <_strtod_l+0xa12>
 800da5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da5c:	3301      	adds	r3, #1
 800da5e:	f43f ad43 	beq.w	800d4e8 <_strtod_l+0x498>
 800da62:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800dc60 <_strtod_l+0xc10>
 800da66:	f04f 3aff 	mov.w	sl, #4294967295
 800da6a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800da6c:	4620      	mov	r0, r4
 800da6e:	f001 feb7 	bl	800f7e0 <_Bfree>
 800da72:	9907      	ldr	r1, [sp, #28]
 800da74:	4620      	mov	r0, r4
 800da76:	f001 feb3 	bl	800f7e0 <_Bfree>
 800da7a:	4631      	mov	r1, r6
 800da7c:	4620      	mov	r0, r4
 800da7e:	f001 feaf 	bl	800f7e0 <_Bfree>
 800da82:	4629      	mov	r1, r5
 800da84:	4620      	mov	r0, r4
 800da86:	f001 feab 	bl	800f7e0 <_Bfree>
 800da8a:	e613      	b.n	800d6b4 <_strtod_l+0x664>
 800da8c:	f1ba 0f00 	cmp.w	sl, #0
 800da90:	d11b      	bne.n	800daca <_strtod_l+0xa7a>
 800da92:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da96:	b9f3      	cbnz	r3, 800dad6 <_strtod_l+0xa86>
 800da98:	4b6b      	ldr	r3, [pc, #428]	; (800dc48 <_strtod_l+0xbf8>)
 800da9a:	2200      	movs	r2, #0
 800da9c:	4640      	mov	r0, r8
 800da9e:	4649      	mov	r1, r9
 800daa0:	f7f3 f84c 	bl	8000b3c <__aeabi_dcmplt>
 800daa4:	b9d0      	cbnz	r0, 800dadc <_strtod_l+0xa8c>
 800daa6:	4640      	mov	r0, r8
 800daa8:	4649      	mov	r1, r9
 800daaa:	4b6b      	ldr	r3, [pc, #428]	; (800dc58 <_strtod_l+0xc08>)
 800daac:	2200      	movs	r2, #0
 800daae:	f7f2 fdd3 	bl	8000658 <__aeabi_dmul>
 800dab2:	4680      	mov	r8, r0
 800dab4:	4689      	mov	r9, r1
 800dab6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800daba:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800dabe:	931b      	str	r3, [sp, #108]	; 0x6c
 800dac0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800dac4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800dac8:	e79b      	b.n	800da02 <_strtod_l+0x9b2>
 800daca:	f1ba 0f01 	cmp.w	sl, #1
 800dace:	d102      	bne.n	800dad6 <_strtod_l+0xa86>
 800dad0:	2f00      	cmp	r7, #0
 800dad2:	f43f ad7e 	beq.w	800d5d2 <_strtod_l+0x582>
 800dad6:	4b61      	ldr	r3, [pc, #388]	; (800dc5c <_strtod_l+0xc0c>)
 800dad8:	2200      	movs	r2, #0
 800dada:	e78c      	b.n	800d9f6 <_strtod_l+0x9a6>
 800dadc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800dc58 <_strtod_l+0xc08>
 800dae0:	f04f 0800 	mov.w	r8, #0
 800dae4:	e7e7      	b.n	800dab6 <_strtod_l+0xa66>
 800dae6:	4b5c      	ldr	r3, [pc, #368]	; (800dc58 <_strtod_l+0xc08>)
 800dae8:	4640      	mov	r0, r8
 800daea:	4649      	mov	r1, r9
 800daec:	2200      	movs	r2, #0
 800daee:	f7f2 fdb3 	bl	8000658 <__aeabi_dmul>
 800daf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800daf4:	4680      	mov	r8, r0
 800daf6:	4689      	mov	r9, r1
 800daf8:	b933      	cbnz	r3, 800db08 <_strtod_l+0xab8>
 800dafa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dafe:	9012      	str	r0, [sp, #72]	; 0x48
 800db00:	9313      	str	r3, [sp, #76]	; 0x4c
 800db02:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800db06:	e7dd      	b.n	800dac4 <_strtod_l+0xa74>
 800db08:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800db0c:	e7f9      	b.n	800db02 <_strtod_l+0xab2>
 800db0e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800db12:	9b04      	ldr	r3, [sp, #16]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d1a8      	bne.n	800da6a <_strtod_l+0xa1a>
 800db18:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800db1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800db1e:	0d1b      	lsrs	r3, r3, #20
 800db20:	051b      	lsls	r3, r3, #20
 800db22:	429a      	cmp	r2, r3
 800db24:	d1a1      	bne.n	800da6a <_strtod_l+0xa1a>
 800db26:	4640      	mov	r0, r8
 800db28:	4649      	mov	r1, r9
 800db2a:	f7f3 f8f5 	bl	8000d18 <__aeabi_d2lz>
 800db2e:	f7f2 fd65 	bl	80005fc <__aeabi_l2d>
 800db32:	4602      	mov	r2, r0
 800db34:	460b      	mov	r3, r1
 800db36:	4640      	mov	r0, r8
 800db38:	4649      	mov	r1, r9
 800db3a:	f7f2 fbd5 	bl	80002e8 <__aeabi_dsub>
 800db3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db44:	ea43 030a 	orr.w	r3, r3, sl
 800db48:	4313      	orrs	r3, r2
 800db4a:	4680      	mov	r8, r0
 800db4c:	4689      	mov	r9, r1
 800db4e:	d053      	beq.n	800dbf8 <_strtod_l+0xba8>
 800db50:	a335      	add	r3, pc, #212	; (adr r3, 800dc28 <_strtod_l+0xbd8>)
 800db52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db56:	f7f2 fff1 	bl	8000b3c <__aeabi_dcmplt>
 800db5a:	2800      	cmp	r0, #0
 800db5c:	f47f acce 	bne.w	800d4fc <_strtod_l+0x4ac>
 800db60:	a333      	add	r3, pc, #204	; (adr r3, 800dc30 <_strtod_l+0xbe0>)
 800db62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db66:	4640      	mov	r0, r8
 800db68:	4649      	mov	r1, r9
 800db6a:	f7f3 f805 	bl	8000b78 <__aeabi_dcmpgt>
 800db6e:	2800      	cmp	r0, #0
 800db70:	f43f af7b 	beq.w	800da6a <_strtod_l+0xa1a>
 800db74:	e4c2      	b.n	800d4fc <_strtod_l+0x4ac>
 800db76:	9b04      	ldr	r3, [sp, #16]
 800db78:	b333      	cbz	r3, 800dbc8 <_strtod_l+0xb78>
 800db7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800db7c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800db80:	d822      	bhi.n	800dbc8 <_strtod_l+0xb78>
 800db82:	a32d      	add	r3, pc, #180	; (adr r3, 800dc38 <_strtod_l+0xbe8>)
 800db84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db88:	4640      	mov	r0, r8
 800db8a:	4649      	mov	r1, r9
 800db8c:	f7f2 ffe0 	bl	8000b50 <__aeabi_dcmple>
 800db90:	b1a0      	cbz	r0, 800dbbc <_strtod_l+0xb6c>
 800db92:	4649      	mov	r1, r9
 800db94:	4640      	mov	r0, r8
 800db96:	f7f3 f837 	bl	8000c08 <__aeabi_d2uiz>
 800db9a:	2801      	cmp	r0, #1
 800db9c:	bf38      	it	cc
 800db9e:	2001      	movcc	r0, #1
 800dba0:	f7f2 fce0 	bl	8000564 <__aeabi_ui2d>
 800dba4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dba6:	4680      	mov	r8, r0
 800dba8:	4689      	mov	r9, r1
 800dbaa:	bb13      	cbnz	r3, 800dbf2 <_strtod_l+0xba2>
 800dbac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbb0:	9014      	str	r0, [sp, #80]	; 0x50
 800dbb2:	9315      	str	r3, [sp, #84]	; 0x54
 800dbb4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800dbb8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800dbbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dbbe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800dbc0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800dbc4:	1a9b      	subs	r3, r3, r2
 800dbc6:	930d      	str	r3, [sp, #52]	; 0x34
 800dbc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dbcc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800dbd0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800dbd4:	f002 f930 	bl	800fe38 <__ulp>
 800dbd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dbdc:	ec53 2b10 	vmov	r2, r3, d0
 800dbe0:	f7f2 fd3a 	bl	8000658 <__aeabi_dmul>
 800dbe4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800dbe8:	f7f2 fb80 	bl	80002ec <__adddf3>
 800dbec:	4682      	mov	sl, r0
 800dbee:	468b      	mov	fp, r1
 800dbf0:	e78f      	b.n	800db12 <_strtod_l+0xac2>
 800dbf2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800dbf6:	e7dd      	b.n	800dbb4 <_strtod_l+0xb64>
 800dbf8:	a311      	add	r3, pc, #68	; (adr r3, 800dc40 <_strtod_l+0xbf0>)
 800dbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfe:	f7f2 ff9d 	bl	8000b3c <__aeabi_dcmplt>
 800dc02:	e7b4      	b.n	800db6e <_strtod_l+0xb1e>
 800dc04:	2300      	movs	r3, #0
 800dc06:	930e      	str	r3, [sp, #56]	; 0x38
 800dc08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dc0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dc0c:	6013      	str	r3, [r2, #0]
 800dc0e:	f7ff ba65 	b.w	800d0dc <_strtod_l+0x8c>
 800dc12:	2b65      	cmp	r3, #101	; 0x65
 800dc14:	f43f ab5d 	beq.w	800d2d2 <_strtod_l+0x282>
 800dc18:	2b45      	cmp	r3, #69	; 0x45
 800dc1a:	f43f ab5a 	beq.w	800d2d2 <_strtod_l+0x282>
 800dc1e:	2201      	movs	r2, #1
 800dc20:	f7ff bb92 	b.w	800d348 <_strtod_l+0x2f8>
 800dc24:	f3af 8000 	nop.w
 800dc28:	94a03595 	.word	0x94a03595
 800dc2c:	3fdfffff 	.word	0x3fdfffff
 800dc30:	35afe535 	.word	0x35afe535
 800dc34:	3fe00000 	.word	0x3fe00000
 800dc38:	ffc00000 	.word	0xffc00000
 800dc3c:	41dfffff 	.word	0x41dfffff
 800dc40:	94a03595 	.word	0x94a03595
 800dc44:	3fcfffff 	.word	0x3fcfffff
 800dc48:	3ff00000 	.word	0x3ff00000
 800dc4c:	7ff00000 	.word	0x7ff00000
 800dc50:	7fe00000 	.word	0x7fe00000
 800dc54:	7c9fffff 	.word	0x7c9fffff
 800dc58:	3fe00000 	.word	0x3fe00000
 800dc5c:	bff00000 	.word	0xbff00000
 800dc60:	7fefffff 	.word	0x7fefffff

0800dc64 <strtod>:
 800dc64:	460a      	mov	r2, r1
 800dc66:	4601      	mov	r1, r0
 800dc68:	4802      	ldr	r0, [pc, #8]	; (800dc74 <strtod+0x10>)
 800dc6a:	4b03      	ldr	r3, [pc, #12]	; (800dc78 <strtod+0x14>)
 800dc6c:	6800      	ldr	r0, [r0, #0]
 800dc6e:	f7ff b9ef 	b.w	800d050 <_strtod_l>
 800dc72:	bf00      	nop
 800dc74:	2000004c 	.word	0x2000004c
 800dc78:	200000b4 	.word	0x200000b4

0800dc7c <_strtol_l.isra.0>:
 800dc7c:	2b01      	cmp	r3, #1
 800dc7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc82:	d001      	beq.n	800dc88 <_strtol_l.isra.0+0xc>
 800dc84:	2b24      	cmp	r3, #36	; 0x24
 800dc86:	d906      	bls.n	800dc96 <_strtol_l.isra.0+0x1a>
 800dc88:	f7fe fc6c 	bl	800c564 <__errno>
 800dc8c:	2316      	movs	r3, #22
 800dc8e:	6003      	str	r3, [r0, #0]
 800dc90:	2000      	movs	r0, #0
 800dc92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc96:	4f3a      	ldr	r7, [pc, #232]	; (800dd80 <_strtol_l.isra.0+0x104>)
 800dc98:	468e      	mov	lr, r1
 800dc9a:	4676      	mov	r6, lr
 800dc9c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800dca0:	5de5      	ldrb	r5, [r4, r7]
 800dca2:	f015 0508 	ands.w	r5, r5, #8
 800dca6:	d1f8      	bne.n	800dc9a <_strtol_l.isra.0+0x1e>
 800dca8:	2c2d      	cmp	r4, #45	; 0x2d
 800dcaa:	d134      	bne.n	800dd16 <_strtol_l.isra.0+0x9a>
 800dcac:	f89e 4000 	ldrb.w	r4, [lr]
 800dcb0:	f04f 0801 	mov.w	r8, #1
 800dcb4:	f106 0e02 	add.w	lr, r6, #2
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d05c      	beq.n	800dd76 <_strtol_l.isra.0+0xfa>
 800dcbc:	2b10      	cmp	r3, #16
 800dcbe:	d10c      	bne.n	800dcda <_strtol_l.isra.0+0x5e>
 800dcc0:	2c30      	cmp	r4, #48	; 0x30
 800dcc2:	d10a      	bne.n	800dcda <_strtol_l.isra.0+0x5e>
 800dcc4:	f89e 4000 	ldrb.w	r4, [lr]
 800dcc8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dccc:	2c58      	cmp	r4, #88	; 0x58
 800dcce:	d14d      	bne.n	800dd6c <_strtol_l.isra.0+0xf0>
 800dcd0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800dcd4:	2310      	movs	r3, #16
 800dcd6:	f10e 0e02 	add.w	lr, lr, #2
 800dcda:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800dcde:	f10c 3cff 	add.w	ip, ip, #4294967295
 800dce2:	2600      	movs	r6, #0
 800dce4:	fbbc f9f3 	udiv	r9, ip, r3
 800dce8:	4635      	mov	r5, r6
 800dcea:	fb03 ca19 	mls	sl, r3, r9, ip
 800dcee:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800dcf2:	2f09      	cmp	r7, #9
 800dcf4:	d818      	bhi.n	800dd28 <_strtol_l.isra.0+0xac>
 800dcf6:	463c      	mov	r4, r7
 800dcf8:	42a3      	cmp	r3, r4
 800dcfa:	dd24      	ble.n	800dd46 <_strtol_l.isra.0+0xca>
 800dcfc:	2e00      	cmp	r6, #0
 800dcfe:	db1f      	blt.n	800dd40 <_strtol_l.isra.0+0xc4>
 800dd00:	45a9      	cmp	r9, r5
 800dd02:	d31d      	bcc.n	800dd40 <_strtol_l.isra.0+0xc4>
 800dd04:	d101      	bne.n	800dd0a <_strtol_l.isra.0+0x8e>
 800dd06:	45a2      	cmp	sl, r4
 800dd08:	db1a      	blt.n	800dd40 <_strtol_l.isra.0+0xc4>
 800dd0a:	fb05 4503 	mla	r5, r5, r3, r4
 800dd0e:	2601      	movs	r6, #1
 800dd10:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800dd14:	e7eb      	b.n	800dcee <_strtol_l.isra.0+0x72>
 800dd16:	2c2b      	cmp	r4, #43	; 0x2b
 800dd18:	bf08      	it	eq
 800dd1a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800dd1e:	46a8      	mov	r8, r5
 800dd20:	bf08      	it	eq
 800dd22:	f106 0e02 	addeq.w	lr, r6, #2
 800dd26:	e7c7      	b.n	800dcb8 <_strtol_l.isra.0+0x3c>
 800dd28:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800dd2c:	2f19      	cmp	r7, #25
 800dd2e:	d801      	bhi.n	800dd34 <_strtol_l.isra.0+0xb8>
 800dd30:	3c37      	subs	r4, #55	; 0x37
 800dd32:	e7e1      	b.n	800dcf8 <_strtol_l.isra.0+0x7c>
 800dd34:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800dd38:	2f19      	cmp	r7, #25
 800dd3a:	d804      	bhi.n	800dd46 <_strtol_l.isra.0+0xca>
 800dd3c:	3c57      	subs	r4, #87	; 0x57
 800dd3e:	e7db      	b.n	800dcf8 <_strtol_l.isra.0+0x7c>
 800dd40:	f04f 36ff 	mov.w	r6, #4294967295
 800dd44:	e7e4      	b.n	800dd10 <_strtol_l.isra.0+0x94>
 800dd46:	2e00      	cmp	r6, #0
 800dd48:	da05      	bge.n	800dd56 <_strtol_l.isra.0+0xda>
 800dd4a:	2322      	movs	r3, #34	; 0x22
 800dd4c:	6003      	str	r3, [r0, #0]
 800dd4e:	4665      	mov	r5, ip
 800dd50:	b942      	cbnz	r2, 800dd64 <_strtol_l.isra.0+0xe8>
 800dd52:	4628      	mov	r0, r5
 800dd54:	e79d      	b.n	800dc92 <_strtol_l.isra.0+0x16>
 800dd56:	f1b8 0f00 	cmp.w	r8, #0
 800dd5a:	d000      	beq.n	800dd5e <_strtol_l.isra.0+0xe2>
 800dd5c:	426d      	negs	r5, r5
 800dd5e:	2a00      	cmp	r2, #0
 800dd60:	d0f7      	beq.n	800dd52 <_strtol_l.isra.0+0xd6>
 800dd62:	b10e      	cbz	r6, 800dd68 <_strtol_l.isra.0+0xec>
 800dd64:	f10e 31ff 	add.w	r1, lr, #4294967295
 800dd68:	6011      	str	r1, [r2, #0]
 800dd6a:	e7f2      	b.n	800dd52 <_strtol_l.isra.0+0xd6>
 800dd6c:	2430      	movs	r4, #48	; 0x30
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d1b3      	bne.n	800dcda <_strtol_l.isra.0+0x5e>
 800dd72:	2308      	movs	r3, #8
 800dd74:	e7b1      	b.n	800dcda <_strtol_l.isra.0+0x5e>
 800dd76:	2c30      	cmp	r4, #48	; 0x30
 800dd78:	d0a4      	beq.n	800dcc4 <_strtol_l.isra.0+0x48>
 800dd7a:	230a      	movs	r3, #10
 800dd7c:	e7ad      	b.n	800dcda <_strtol_l.isra.0+0x5e>
 800dd7e:	bf00      	nop
 800dd80:	08011e59 	.word	0x08011e59

0800dd84 <strtol>:
 800dd84:	4613      	mov	r3, r2
 800dd86:	460a      	mov	r2, r1
 800dd88:	4601      	mov	r1, r0
 800dd8a:	4802      	ldr	r0, [pc, #8]	; (800dd94 <strtol+0x10>)
 800dd8c:	6800      	ldr	r0, [r0, #0]
 800dd8e:	f7ff bf75 	b.w	800dc7c <_strtol_l.isra.0>
 800dd92:	bf00      	nop
 800dd94:	2000004c 	.word	0x2000004c

0800dd98 <__swbuf_r>:
 800dd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd9a:	460e      	mov	r6, r1
 800dd9c:	4614      	mov	r4, r2
 800dd9e:	4605      	mov	r5, r0
 800dda0:	b118      	cbz	r0, 800ddaa <__swbuf_r+0x12>
 800dda2:	6983      	ldr	r3, [r0, #24]
 800dda4:	b90b      	cbnz	r3, 800ddaa <__swbuf_r+0x12>
 800dda6:	f001 f849 	bl	800ee3c <__sinit>
 800ddaa:	4b21      	ldr	r3, [pc, #132]	; (800de30 <__swbuf_r+0x98>)
 800ddac:	429c      	cmp	r4, r3
 800ddae:	d12b      	bne.n	800de08 <__swbuf_r+0x70>
 800ddb0:	686c      	ldr	r4, [r5, #4]
 800ddb2:	69a3      	ldr	r3, [r4, #24]
 800ddb4:	60a3      	str	r3, [r4, #8]
 800ddb6:	89a3      	ldrh	r3, [r4, #12]
 800ddb8:	071a      	lsls	r2, r3, #28
 800ddba:	d52f      	bpl.n	800de1c <__swbuf_r+0x84>
 800ddbc:	6923      	ldr	r3, [r4, #16]
 800ddbe:	b36b      	cbz	r3, 800de1c <__swbuf_r+0x84>
 800ddc0:	6923      	ldr	r3, [r4, #16]
 800ddc2:	6820      	ldr	r0, [r4, #0]
 800ddc4:	1ac0      	subs	r0, r0, r3
 800ddc6:	6963      	ldr	r3, [r4, #20]
 800ddc8:	b2f6      	uxtb	r6, r6
 800ddca:	4283      	cmp	r3, r0
 800ddcc:	4637      	mov	r7, r6
 800ddce:	dc04      	bgt.n	800ddda <__swbuf_r+0x42>
 800ddd0:	4621      	mov	r1, r4
 800ddd2:	4628      	mov	r0, r5
 800ddd4:	f000 ff9e 	bl	800ed14 <_fflush_r>
 800ddd8:	bb30      	cbnz	r0, 800de28 <__swbuf_r+0x90>
 800ddda:	68a3      	ldr	r3, [r4, #8]
 800dddc:	3b01      	subs	r3, #1
 800ddde:	60a3      	str	r3, [r4, #8]
 800dde0:	6823      	ldr	r3, [r4, #0]
 800dde2:	1c5a      	adds	r2, r3, #1
 800dde4:	6022      	str	r2, [r4, #0]
 800dde6:	701e      	strb	r6, [r3, #0]
 800dde8:	6963      	ldr	r3, [r4, #20]
 800ddea:	3001      	adds	r0, #1
 800ddec:	4283      	cmp	r3, r0
 800ddee:	d004      	beq.n	800ddfa <__swbuf_r+0x62>
 800ddf0:	89a3      	ldrh	r3, [r4, #12]
 800ddf2:	07db      	lsls	r3, r3, #31
 800ddf4:	d506      	bpl.n	800de04 <__swbuf_r+0x6c>
 800ddf6:	2e0a      	cmp	r6, #10
 800ddf8:	d104      	bne.n	800de04 <__swbuf_r+0x6c>
 800ddfa:	4621      	mov	r1, r4
 800ddfc:	4628      	mov	r0, r5
 800ddfe:	f000 ff89 	bl	800ed14 <_fflush_r>
 800de02:	b988      	cbnz	r0, 800de28 <__swbuf_r+0x90>
 800de04:	4638      	mov	r0, r7
 800de06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de08:	4b0a      	ldr	r3, [pc, #40]	; (800de34 <__swbuf_r+0x9c>)
 800de0a:	429c      	cmp	r4, r3
 800de0c:	d101      	bne.n	800de12 <__swbuf_r+0x7a>
 800de0e:	68ac      	ldr	r4, [r5, #8]
 800de10:	e7cf      	b.n	800ddb2 <__swbuf_r+0x1a>
 800de12:	4b09      	ldr	r3, [pc, #36]	; (800de38 <__swbuf_r+0xa0>)
 800de14:	429c      	cmp	r4, r3
 800de16:	bf08      	it	eq
 800de18:	68ec      	ldreq	r4, [r5, #12]
 800de1a:	e7ca      	b.n	800ddb2 <__swbuf_r+0x1a>
 800de1c:	4621      	mov	r1, r4
 800de1e:	4628      	mov	r0, r5
 800de20:	f000 f80c 	bl	800de3c <__swsetup_r>
 800de24:	2800      	cmp	r0, #0
 800de26:	d0cb      	beq.n	800ddc0 <__swbuf_r+0x28>
 800de28:	f04f 37ff 	mov.w	r7, #4294967295
 800de2c:	e7ea      	b.n	800de04 <__swbuf_r+0x6c>
 800de2e:	bf00      	nop
 800de30:	08012010 	.word	0x08012010
 800de34:	08012030 	.word	0x08012030
 800de38:	08011ff0 	.word	0x08011ff0

0800de3c <__swsetup_r>:
 800de3c:	4b32      	ldr	r3, [pc, #200]	; (800df08 <__swsetup_r+0xcc>)
 800de3e:	b570      	push	{r4, r5, r6, lr}
 800de40:	681d      	ldr	r5, [r3, #0]
 800de42:	4606      	mov	r6, r0
 800de44:	460c      	mov	r4, r1
 800de46:	b125      	cbz	r5, 800de52 <__swsetup_r+0x16>
 800de48:	69ab      	ldr	r3, [r5, #24]
 800de4a:	b913      	cbnz	r3, 800de52 <__swsetup_r+0x16>
 800de4c:	4628      	mov	r0, r5
 800de4e:	f000 fff5 	bl	800ee3c <__sinit>
 800de52:	4b2e      	ldr	r3, [pc, #184]	; (800df0c <__swsetup_r+0xd0>)
 800de54:	429c      	cmp	r4, r3
 800de56:	d10f      	bne.n	800de78 <__swsetup_r+0x3c>
 800de58:	686c      	ldr	r4, [r5, #4]
 800de5a:	89a3      	ldrh	r3, [r4, #12]
 800de5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de60:	0719      	lsls	r1, r3, #28
 800de62:	d42c      	bmi.n	800debe <__swsetup_r+0x82>
 800de64:	06dd      	lsls	r5, r3, #27
 800de66:	d411      	bmi.n	800de8c <__swsetup_r+0x50>
 800de68:	2309      	movs	r3, #9
 800de6a:	6033      	str	r3, [r6, #0]
 800de6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800de70:	81a3      	strh	r3, [r4, #12]
 800de72:	f04f 30ff 	mov.w	r0, #4294967295
 800de76:	e03e      	b.n	800def6 <__swsetup_r+0xba>
 800de78:	4b25      	ldr	r3, [pc, #148]	; (800df10 <__swsetup_r+0xd4>)
 800de7a:	429c      	cmp	r4, r3
 800de7c:	d101      	bne.n	800de82 <__swsetup_r+0x46>
 800de7e:	68ac      	ldr	r4, [r5, #8]
 800de80:	e7eb      	b.n	800de5a <__swsetup_r+0x1e>
 800de82:	4b24      	ldr	r3, [pc, #144]	; (800df14 <__swsetup_r+0xd8>)
 800de84:	429c      	cmp	r4, r3
 800de86:	bf08      	it	eq
 800de88:	68ec      	ldreq	r4, [r5, #12]
 800de8a:	e7e6      	b.n	800de5a <__swsetup_r+0x1e>
 800de8c:	0758      	lsls	r0, r3, #29
 800de8e:	d512      	bpl.n	800deb6 <__swsetup_r+0x7a>
 800de90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de92:	b141      	cbz	r1, 800dea6 <__swsetup_r+0x6a>
 800de94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de98:	4299      	cmp	r1, r3
 800de9a:	d002      	beq.n	800dea2 <__swsetup_r+0x66>
 800de9c:	4630      	mov	r0, r6
 800de9e:	f002 f929 	bl	80100f4 <_free_r>
 800dea2:	2300      	movs	r3, #0
 800dea4:	6363      	str	r3, [r4, #52]	; 0x34
 800dea6:	89a3      	ldrh	r3, [r4, #12]
 800dea8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800deac:	81a3      	strh	r3, [r4, #12]
 800deae:	2300      	movs	r3, #0
 800deb0:	6063      	str	r3, [r4, #4]
 800deb2:	6923      	ldr	r3, [r4, #16]
 800deb4:	6023      	str	r3, [r4, #0]
 800deb6:	89a3      	ldrh	r3, [r4, #12]
 800deb8:	f043 0308 	orr.w	r3, r3, #8
 800debc:	81a3      	strh	r3, [r4, #12]
 800debe:	6923      	ldr	r3, [r4, #16]
 800dec0:	b94b      	cbnz	r3, 800ded6 <__swsetup_r+0x9a>
 800dec2:	89a3      	ldrh	r3, [r4, #12]
 800dec4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800decc:	d003      	beq.n	800ded6 <__swsetup_r+0x9a>
 800dece:	4621      	mov	r1, r4
 800ded0:	4630      	mov	r0, r6
 800ded2:	f001 fbeb 	bl	800f6ac <__smakebuf_r>
 800ded6:	89a0      	ldrh	r0, [r4, #12]
 800ded8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dedc:	f010 0301 	ands.w	r3, r0, #1
 800dee0:	d00a      	beq.n	800def8 <__swsetup_r+0xbc>
 800dee2:	2300      	movs	r3, #0
 800dee4:	60a3      	str	r3, [r4, #8]
 800dee6:	6963      	ldr	r3, [r4, #20]
 800dee8:	425b      	negs	r3, r3
 800deea:	61a3      	str	r3, [r4, #24]
 800deec:	6923      	ldr	r3, [r4, #16]
 800deee:	b943      	cbnz	r3, 800df02 <__swsetup_r+0xc6>
 800def0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800def4:	d1ba      	bne.n	800de6c <__swsetup_r+0x30>
 800def6:	bd70      	pop	{r4, r5, r6, pc}
 800def8:	0781      	lsls	r1, r0, #30
 800defa:	bf58      	it	pl
 800defc:	6963      	ldrpl	r3, [r4, #20]
 800defe:	60a3      	str	r3, [r4, #8]
 800df00:	e7f4      	b.n	800deec <__swsetup_r+0xb0>
 800df02:	2000      	movs	r0, #0
 800df04:	e7f7      	b.n	800def6 <__swsetup_r+0xba>
 800df06:	bf00      	nop
 800df08:	2000004c 	.word	0x2000004c
 800df0c:	08012010 	.word	0x08012010
 800df10:	08012030 	.word	0x08012030
 800df14:	08011ff0 	.word	0x08011ff0

0800df18 <quorem>:
 800df18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df1c:	6903      	ldr	r3, [r0, #16]
 800df1e:	690c      	ldr	r4, [r1, #16]
 800df20:	42a3      	cmp	r3, r4
 800df22:	4607      	mov	r7, r0
 800df24:	f2c0 8081 	blt.w	800e02a <quorem+0x112>
 800df28:	3c01      	subs	r4, #1
 800df2a:	f101 0814 	add.w	r8, r1, #20
 800df2e:	f100 0514 	add.w	r5, r0, #20
 800df32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800df36:	9301      	str	r3, [sp, #4]
 800df38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800df3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800df40:	3301      	adds	r3, #1
 800df42:	429a      	cmp	r2, r3
 800df44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800df48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800df4c:	fbb2 f6f3 	udiv	r6, r2, r3
 800df50:	d331      	bcc.n	800dfb6 <quorem+0x9e>
 800df52:	f04f 0e00 	mov.w	lr, #0
 800df56:	4640      	mov	r0, r8
 800df58:	46ac      	mov	ip, r5
 800df5a:	46f2      	mov	sl, lr
 800df5c:	f850 2b04 	ldr.w	r2, [r0], #4
 800df60:	b293      	uxth	r3, r2
 800df62:	fb06 e303 	mla	r3, r6, r3, lr
 800df66:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	ebaa 0303 	sub.w	r3, sl, r3
 800df70:	0c12      	lsrs	r2, r2, #16
 800df72:	f8dc a000 	ldr.w	sl, [ip]
 800df76:	fb06 e202 	mla	r2, r6, r2, lr
 800df7a:	fa13 f38a 	uxtah	r3, r3, sl
 800df7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800df82:	fa1f fa82 	uxth.w	sl, r2
 800df86:	f8dc 2000 	ldr.w	r2, [ip]
 800df8a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800df8e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800df92:	b29b      	uxth	r3, r3
 800df94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df98:	4581      	cmp	r9, r0
 800df9a:	f84c 3b04 	str.w	r3, [ip], #4
 800df9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dfa2:	d2db      	bcs.n	800df5c <quorem+0x44>
 800dfa4:	f855 300b 	ldr.w	r3, [r5, fp]
 800dfa8:	b92b      	cbnz	r3, 800dfb6 <quorem+0x9e>
 800dfaa:	9b01      	ldr	r3, [sp, #4]
 800dfac:	3b04      	subs	r3, #4
 800dfae:	429d      	cmp	r5, r3
 800dfb0:	461a      	mov	r2, r3
 800dfb2:	d32e      	bcc.n	800e012 <quorem+0xfa>
 800dfb4:	613c      	str	r4, [r7, #16]
 800dfb6:	4638      	mov	r0, r7
 800dfb8:	f001 fe9a 	bl	800fcf0 <__mcmp>
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	db24      	blt.n	800e00a <quorem+0xf2>
 800dfc0:	3601      	adds	r6, #1
 800dfc2:	4628      	mov	r0, r5
 800dfc4:	f04f 0c00 	mov.w	ip, #0
 800dfc8:	f858 2b04 	ldr.w	r2, [r8], #4
 800dfcc:	f8d0 e000 	ldr.w	lr, [r0]
 800dfd0:	b293      	uxth	r3, r2
 800dfd2:	ebac 0303 	sub.w	r3, ip, r3
 800dfd6:	0c12      	lsrs	r2, r2, #16
 800dfd8:	fa13 f38e 	uxtah	r3, r3, lr
 800dfdc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dfe0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dfe4:	b29b      	uxth	r3, r3
 800dfe6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dfea:	45c1      	cmp	r9, r8
 800dfec:	f840 3b04 	str.w	r3, [r0], #4
 800dff0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dff4:	d2e8      	bcs.n	800dfc8 <quorem+0xb0>
 800dff6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dffa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dffe:	b922      	cbnz	r2, 800e00a <quorem+0xf2>
 800e000:	3b04      	subs	r3, #4
 800e002:	429d      	cmp	r5, r3
 800e004:	461a      	mov	r2, r3
 800e006:	d30a      	bcc.n	800e01e <quorem+0x106>
 800e008:	613c      	str	r4, [r7, #16]
 800e00a:	4630      	mov	r0, r6
 800e00c:	b003      	add	sp, #12
 800e00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e012:	6812      	ldr	r2, [r2, #0]
 800e014:	3b04      	subs	r3, #4
 800e016:	2a00      	cmp	r2, #0
 800e018:	d1cc      	bne.n	800dfb4 <quorem+0x9c>
 800e01a:	3c01      	subs	r4, #1
 800e01c:	e7c7      	b.n	800dfae <quorem+0x96>
 800e01e:	6812      	ldr	r2, [r2, #0]
 800e020:	3b04      	subs	r3, #4
 800e022:	2a00      	cmp	r2, #0
 800e024:	d1f0      	bne.n	800e008 <quorem+0xf0>
 800e026:	3c01      	subs	r4, #1
 800e028:	e7eb      	b.n	800e002 <quorem+0xea>
 800e02a:	2000      	movs	r0, #0
 800e02c:	e7ee      	b.n	800e00c <quorem+0xf4>
	...

0800e030 <_dtoa_r>:
 800e030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e034:	ed2d 8b02 	vpush	{d8}
 800e038:	ec57 6b10 	vmov	r6, r7, d0
 800e03c:	b095      	sub	sp, #84	; 0x54
 800e03e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e040:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e044:	9105      	str	r1, [sp, #20]
 800e046:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e04a:	4604      	mov	r4, r0
 800e04c:	9209      	str	r2, [sp, #36]	; 0x24
 800e04e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e050:	b975      	cbnz	r5, 800e070 <_dtoa_r+0x40>
 800e052:	2010      	movs	r0, #16
 800e054:	f001 fb6a 	bl	800f72c <malloc>
 800e058:	4602      	mov	r2, r0
 800e05a:	6260      	str	r0, [r4, #36]	; 0x24
 800e05c:	b920      	cbnz	r0, 800e068 <_dtoa_r+0x38>
 800e05e:	4bb2      	ldr	r3, [pc, #712]	; (800e328 <_dtoa_r+0x2f8>)
 800e060:	21ea      	movs	r1, #234	; 0xea
 800e062:	48b2      	ldr	r0, [pc, #712]	; (800e32c <_dtoa_r+0x2fc>)
 800e064:	f002 fc34 	bl	80108d0 <__assert_func>
 800e068:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e06c:	6005      	str	r5, [r0, #0]
 800e06e:	60c5      	str	r5, [r0, #12]
 800e070:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e072:	6819      	ldr	r1, [r3, #0]
 800e074:	b151      	cbz	r1, 800e08c <_dtoa_r+0x5c>
 800e076:	685a      	ldr	r2, [r3, #4]
 800e078:	604a      	str	r2, [r1, #4]
 800e07a:	2301      	movs	r3, #1
 800e07c:	4093      	lsls	r3, r2
 800e07e:	608b      	str	r3, [r1, #8]
 800e080:	4620      	mov	r0, r4
 800e082:	f001 fbad 	bl	800f7e0 <_Bfree>
 800e086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e088:	2200      	movs	r2, #0
 800e08a:	601a      	str	r2, [r3, #0]
 800e08c:	1e3b      	subs	r3, r7, #0
 800e08e:	bfb9      	ittee	lt
 800e090:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e094:	9303      	strlt	r3, [sp, #12]
 800e096:	2300      	movge	r3, #0
 800e098:	f8c8 3000 	strge.w	r3, [r8]
 800e09c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e0a0:	4ba3      	ldr	r3, [pc, #652]	; (800e330 <_dtoa_r+0x300>)
 800e0a2:	bfbc      	itt	lt
 800e0a4:	2201      	movlt	r2, #1
 800e0a6:	f8c8 2000 	strlt.w	r2, [r8]
 800e0aa:	ea33 0309 	bics.w	r3, r3, r9
 800e0ae:	d11b      	bne.n	800e0e8 <_dtoa_r+0xb8>
 800e0b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e0b2:	f242 730f 	movw	r3, #9999	; 0x270f
 800e0b6:	6013      	str	r3, [r2, #0]
 800e0b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e0bc:	4333      	orrs	r3, r6
 800e0be:	f000 857a 	beq.w	800ebb6 <_dtoa_r+0xb86>
 800e0c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e0c4:	b963      	cbnz	r3, 800e0e0 <_dtoa_r+0xb0>
 800e0c6:	4b9b      	ldr	r3, [pc, #620]	; (800e334 <_dtoa_r+0x304>)
 800e0c8:	e024      	b.n	800e114 <_dtoa_r+0xe4>
 800e0ca:	4b9b      	ldr	r3, [pc, #620]	; (800e338 <_dtoa_r+0x308>)
 800e0cc:	9300      	str	r3, [sp, #0]
 800e0ce:	3308      	adds	r3, #8
 800e0d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e0d2:	6013      	str	r3, [r2, #0]
 800e0d4:	9800      	ldr	r0, [sp, #0]
 800e0d6:	b015      	add	sp, #84	; 0x54
 800e0d8:	ecbd 8b02 	vpop	{d8}
 800e0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0e0:	4b94      	ldr	r3, [pc, #592]	; (800e334 <_dtoa_r+0x304>)
 800e0e2:	9300      	str	r3, [sp, #0]
 800e0e4:	3303      	adds	r3, #3
 800e0e6:	e7f3      	b.n	800e0d0 <_dtoa_r+0xa0>
 800e0e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	ec51 0b17 	vmov	r0, r1, d7
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800e0f8:	f7f2 fd16 	bl	8000b28 <__aeabi_dcmpeq>
 800e0fc:	4680      	mov	r8, r0
 800e0fe:	b158      	cbz	r0, 800e118 <_dtoa_r+0xe8>
 800e100:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e102:	2301      	movs	r3, #1
 800e104:	6013      	str	r3, [r2, #0]
 800e106:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e108:	2b00      	cmp	r3, #0
 800e10a:	f000 8551 	beq.w	800ebb0 <_dtoa_r+0xb80>
 800e10e:	488b      	ldr	r0, [pc, #556]	; (800e33c <_dtoa_r+0x30c>)
 800e110:	6018      	str	r0, [r3, #0]
 800e112:	1e43      	subs	r3, r0, #1
 800e114:	9300      	str	r3, [sp, #0]
 800e116:	e7dd      	b.n	800e0d4 <_dtoa_r+0xa4>
 800e118:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e11c:	aa12      	add	r2, sp, #72	; 0x48
 800e11e:	a913      	add	r1, sp, #76	; 0x4c
 800e120:	4620      	mov	r0, r4
 800e122:	f001 ff05 	bl	800ff30 <__d2b>
 800e126:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e12a:	4683      	mov	fp, r0
 800e12c:	2d00      	cmp	r5, #0
 800e12e:	d07c      	beq.n	800e22a <_dtoa_r+0x1fa>
 800e130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e132:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800e136:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e13a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800e13e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e142:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e146:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e14a:	4b7d      	ldr	r3, [pc, #500]	; (800e340 <_dtoa_r+0x310>)
 800e14c:	2200      	movs	r2, #0
 800e14e:	4630      	mov	r0, r6
 800e150:	4639      	mov	r1, r7
 800e152:	f7f2 f8c9 	bl	80002e8 <__aeabi_dsub>
 800e156:	a36e      	add	r3, pc, #440	; (adr r3, 800e310 <_dtoa_r+0x2e0>)
 800e158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e15c:	f7f2 fa7c 	bl	8000658 <__aeabi_dmul>
 800e160:	a36d      	add	r3, pc, #436	; (adr r3, 800e318 <_dtoa_r+0x2e8>)
 800e162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e166:	f7f2 f8c1 	bl	80002ec <__adddf3>
 800e16a:	4606      	mov	r6, r0
 800e16c:	4628      	mov	r0, r5
 800e16e:	460f      	mov	r7, r1
 800e170:	f7f2 fa08 	bl	8000584 <__aeabi_i2d>
 800e174:	a36a      	add	r3, pc, #424	; (adr r3, 800e320 <_dtoa_r+0x2f0>)
 800e176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e17a:	f7f2 fa6d 	bl	8000658 <__aeabi_dmul>
 800e17e:	4602      	mov	r2, r0
 800e180:	460b      	mov	r3, r1
 800e182:	4630      	mov	r0, r6
 800e184:	4639      	mov	r1, r7
 800e186:	f7f2 f8b1 	bl	80002ec <__adddf3>
 800e18a:	4606      	mov	r6, r0
 800e18c:	460f      	mov	r7, r1
 800e18e:	f7f2 fd13 	bl	8000bb8 <__aeabi_d2iz>
 800e192:	2200      	movs	r2, #0
 800e194:	4682      	mov	sl, r0
 800e196:	2300      	movs	r3, #0
 800e198:	4630      	mov	r0, r6
 800e19a:	4639      	mov	r1, r7
 800e19c:	f7f2 fcce 	bl	8000b3c <__aeabi_dcmplt>
 800e1a0:	b148      	cbz	r0, 800e1b6 <_dtoa_r+0x186>
 800e1a2:	4650      	mov	r0, sl
 800e1a4:	f7f2 f9ee 	bl	8000584 <__aeabi_i2d>
 800e1a8:	4632      	mov	r2, r6
 800e1aa:	463b      	mov	r3, r7
 800e1ac:	f7f2 fcbc 	bl	8000b28 <__aeabi_dcmpeq>
 800e1b0:	b908      	cbnz	r0, 800e1b6 <_dtoa_r+0x186>
 800e1b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e1b6:	f1ba 0f16 	cmp.w	sl, #22
 800e1ba:	d854      	bhi.n	800e266 <_dtoa_r+0x236>
 800e1bc:	4b61      	ldr	r3, [pc, #388]	; (800e344 <_dtoa_r+0x314>)
 800e1be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e1ca:	f7f2 fcb7 	bl	8000b3c <__aeabi_dcmplt>
 800e1ce:	2800      	cmp	r0, #0
 800e1d0:	d04b      	beq.n	800e26a <_dtoa_r+0x23a>
 800e1d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	930e      	str	r3, [sp, #56]	; 0x38
 800e1da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e1dc:	1b5d      	subs	r5, r3, r5
 800e1de:	1e6b      	subs	r3, r5, #1
 800e1e0:	9304      	str	r3, [sp, #16]
 800e1e2:	bf43      	ittte	mi
 800e1e4:	2300      	movmi	r3, #0
 800e1e6:	f1c5 0801 	rsbmi	r8, r5, #1
 800e1ea:	9304      	strmi	r3, [sp, #16]
 800e1ec:	f04f 0800 	movpl.w	r8, #0
 800e1f0:	f1ba 0f00 	cmp.w	sl, #0
 800e1f4:	db3b      	blt.n	800e26e <_dtoa_r+0x23e>
 800e1f6:	9b04      	ldr	r3, [sp, #16]
 800e1f8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800e1fc:	4453      	add	r3, sl
 800e1fe:	9304      	str	r3, [sp, #16]
 800e200:	2300      	movs	r3, #0
 800e202:	9306      	str	r3, [sp, #24]
 800e204:	9b05      	ldr	r3, [sp, #20]
 800e206:	2b09      	cmp	r3, #9
 800e208:	d869      	bhi.n	800e2de <_dtoa_r+0x2ae>
 800e20a:	2b05      	cmp	r3, #5
 800e20c:	bfc4      	itt	gt
 800e20e:	3b04      	subgt	r3, #4
 800e210:	9305      	strgt	r3, [sp, #20]
 800e212:	9b05      	ldr	r3, [sp, #20]
 800e214:	f1a3 0302 	sub.w	r3, r3, #2
 800e218:	bfcc      	ite	gt
 800e21a:	2500      	movgt	r5, #0
 800e21c:	2501      	movle	r5, #1
 800e21e:	2b03      	cmp	r3, #3
 800e220:	d869      	bhi.n	800e2f6 <_dtoa_r+0x2c6>
 800e222:	e8df f003 	tbb	[pc, r3]
 800e226:	4e2c      	.short	0x4e2c
 800e228:	5a4c      	.short	0x5a4c
 800e22a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800e22e:	441d      	add	r5, r3
 800e230:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e234:	2b20      	cmp	r3, #32
 800e236:	bfc1      	itttt	gt
 800e238:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e23c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e240:	fa09 f303 	lslgt.w	r3, r9, r3
 800e244:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e248:	bfda      	itte	le
 800e24a:	f1c3 0320 	rsble	r3, r3, #32
 800e24e:	fa06 f003 	lslle.w	r0, r6, r3
 800e252:	4318      	orrgt	r0, r3
 800e254:	f7f2 f986 	bl	8000564 <__aeabi_ui2d>
 800e258:	2301      	movs	r3, #1
 800e25a:	4606      	mov	r6, r0
 800e25c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e260:	3d01      	subs	r5, #1
 800e262:	9310      	str	r3, [sp, #64]	; 0x40
 800e264:	e771      	b.n	800e14a <_dtoa_r+0x11a>
 800e266:	2301      	movs	r3, #1
 800e268:	e7b6      	b.n	800e1d8 <_dtoa_r+0x1a8>
 800e26a:	900e      	str	r0, [sp, #56]	; 0x38
 800e26c:	e7b5      	b.n	800e1da <_dtoa_r+0x1aa>
 800e26e:	f1ca 0300 	rsb	r3, sl, #0
 800e272:	9306      	str	r3, [sp, #24]
 800e274:	2300      	movs	r3, #0
 800e276:	eba8 080a 	sub.w	r8, r8, sl
 800e27a:	930d      	str	r3, [sp, #52]	; 0x34
 800e27c:	e7c2      	b.n	800e204 <_dtoa_r+0x1d4>
 800e27e:	2300      	movs	r3, #0
 800e280:	9308      	str	r3, [sp, #32]
 800e282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e284:	2b00      	cmp	r3, #0
 800e286:	dc39      	bgt.n	800e2fc <_dtoa_r+0x2cc>
 800e288:	f04f 0901 	mov.w	r9, #1
 800e28c:	f8cd 9004 	str.w	r9, [sp, #4]
 800e290:	464b      	mov	r3, r9
 800e292:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e296:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e298:	2200      	movs	r2, #0
 800e29a:	6042      	str	r2, [r0, #4]
 800e29c:	2204      	movs	r2, #4
 800e29e:	f102 0614 	add.w	r6, r2, #20
 800e2a2:	429e      	cmp	r6, r3
 800e2a4:	6841      	ldr	r1, [r0, #4]
 800e2a6:	d92f      	bls.n	800e308 <_dtoa_r+0x2d8>
 800e2a8:	4620      	mov	r0, r4
 800e2aa:	f001 fa59 	bl	800f760 <_Balloc>
 800e2ae:	9000      	str	r0, [sp, #0]
 800e2b0:	2800      	cmp	r0, #0
 800e2b2:	d14b      	bne.n	800e34c <_dtoa_r+0x31c>
 800e2b4:	4b24      	ldr	r3, [pc, #144]	; (800e348 <_dtoa_r+0x318>)
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e2bc:	e6d1      	b.n	800e062 <_dtoa_r+0x32>
 800e2be:	2301      	movs	r3, #1
 800e2c0:	e7de      	b.n	800e280 <_dtoa_r+0x250>
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	9308      	str	r3, [sp, #32]
 800e2c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2c8:	eb0a 0903 	add.w	r9, sl, r3
 800e2cc:	f109 0301 	add.w	r3, r9, #1
 800e2d0:	2b01      	cmp	r3, #1
 800e2d2:	9301      	str	r3, [sp, #4]
 800e2d4:	bfb8      	it	lt
 800e2d6:	2301      	movlt	r3, #1
 800e2d8:	e7dd      	b.n	800e296 <_dtoa_r+0x266>
 800e2da:	2301      	movs	r3, #1
 800e2dc:	e7f2      	b.n	800e2c4 <_dtoa_r+0x294>
 800e2de:	2501      	movs	r5, #1
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	9305      	str	r3, [sp, #20]
 800e2e4:	9508      	str	r5, [sp, #32]
 800e2e6:	f04f 39ff 	mov.w	r9, #4294967295
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	f8cd 9004 	str.w	r9, [sp, #4]
 800e2f0:	2312      	movs	r3, #18
 800e2f2:	9209      	str	r2, [sp, #36]	; 0x24
 800e2f4:	e7cf      	b.n	800e296 <_dtoa_r+0x266>
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	9308      	str	r3, [sp, #32]
 800e2fa:	e7f4      	b.n	800e2e6 <_dtoa_r+0x2b6>
 800e2fc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e300:	f8cd 9004 	str.w	r9, [sp, #4]
 800e304:	464b      	mov	r3, r9
 800e306:	e7c6      	b.n	800e296 <_dtoa_r+0x266>
 800e308:	3101      	adds	r1, #1
 800e30a:	6041      	str	r1, [r0, #4]
 800e30c:	0052      	lsls	r2, r2, #1
 800e30e:	e7c6      	b.n	800e29e <_dtoa_r+0x26e>
 800e310:	636f4361 	.word	0x636f4361
 800e314:	3fd287a7 	.word	0x3fd287a7
 800e318:	8b60c8b3 	.word	0x8b60c8b3
 800e31c:	3fc68a28 	.word	0x3fc68a28
 800e320:	509f79fb 	.word	0x509f79fb
 800e324:	3fd34413 	.word	0x3fd34413
 800e328:	08011f66 	.word	0x08011f66
 800e32c:	08011f7d 	.word	0x08011f7d
 800e330:	7ff00000 	.word	0x7ff00000
 800e334:	08011f62 	.word	0x08011f62
 800e338:	08011f59 	.word	0x08011f59
 800e33c:	08011de5 	.word	0x08011de5
 800e340:	3ff80000 	.word	0x3ff80000
 800e344:	08012158 	.word	0x08012158
 800e348:	08011fdc 	.word	0x08011fdc
 800e34c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e34e:	9a00      	ldr	r2, [sp, #0]
 800e350:	601a      	str	r2, [r3, #0]
 800e352:	9b01      	ldr	r3, [sp, #4]
 800e354:	2b0e      	cmp	r3, #14
 800e356:	f200 80ad 	bhi.w	800e4b4 <_dtoa_r+0x484>
 800e35a:	2d00      	cmp	r5, #0
 800e35c:	f000 80aa 	beq.w	800e4b4 <_dtoa_r+0x484>
 800e360:	f1ba 0f00 	cmp.w	sl, #0
 800e364:	dd36      	ble.n	800e3d4 <_dtoa_r+0x3a4>
 800e366:	4ac3      	ldr	r2, [pc, #780]	; (800e674 <_dtoa_r+0x644>)
 800e368:	f00a 030f 	and.w	r3, sl, #15
 800e36c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e370:	ed93 7b00 	vldr	d7, [r3]
 800e374:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800e378:	ea4f 172a 	mov.w	r7, sl, asr #4
 800e37c:	eeb0 8a47 	vmov.f32	s16, s14
 800e380:	eef0 8a67 	vmov.f32	s17, s15
 800e384:	d016      	beq.n	800e3b4 <_dtoa_r+0x384>
 800e386:	4bbc      	ldr	r3, [pc, #752]	; (800e678 <_dtoa_r+0x648>)
 800e388:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e38c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e390:	f7f2 fa8c 	bl	80008ac <__aeabi_ddiv>
 800e394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e398:	f007 070f 	and.w	r7, r7, #15
 800e39c:	2503      	movs	r5, #3
 800e39e:	4eb6      	ldr	r6, [pc, #728]	; (800e678 <_dtoa_r+0x648>)
 800e3a0:	b957      	cbnz	r7, 800e3b8 <_dtoa_r+0x388>
 800e3a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3a6:	ec53 2b18 	vmov	r2, r3, d8
 800e3aa:	f7f2 fa7f 	bl	80008ac <__aeabi_ddiv>
 800e3ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3b2:	e029      	b.n	800e408 <_dtoa_r+0x3d8>
 800e3b4:	2502      	movs	r5, #2
 800e3b6:	e7f2      	b.n	800e39e <_dtoa_r+0x36e>
 800e3b8:	07f9      	lsls	r1, r7, #31
 800e3ba:	d508      	bpl.n	800e3ce <_dtoa_r+0x39e>
 800e3bc:	ec51 0b18 	vmov	r0, r1, d8
 800e3c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e3c4:	f7f2 f948 	bl	8000658 <__aeabi_dmul>
 800e3c8:	ec41 0b18 	vmov	d8, r0, r1
 800e3cc:	3501      	adds	r5, #1
 800e3ce:	107f      	asrs	r7, r7, #1
 800e3d0:	3608      	adds	r6, #8
 800e3d2:	e7e5      	b.n	800e3a0 <_dtoa_r+0x370>
 800e3d4:	f000 80a6 	beq.w	800e524 <_dtoa_r+0x4f4>
 800e3d8:	f1ca 0600 	rsb	r6, sl, #0
 800e3dc:	4ba5      	ldr	r3, [pc, #660]	; (800e674 <_dtoa_r+0x644>)
 800e3de:	4fa6      	ldr	r7, [pc, #664]	; (800e678 <_dtoa_r+0x648>)
 800e3e0:	f006 020f 	and.w	r2, r6, #15
 800e3e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e3f0:	f7f2 f932 	bl	8000658 <__aeabi_dmul>
 800e3f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3f8:	1136      	asrs	r6, r6, #4
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	2502      	movs	r5, #2
 800e3fe:	2e00      	cmp	r6, #0
 800e400:	f040 8085 	bne.w	800e50e <_dtoa_r+0x4de>
 800e404:	2b00      	cmp	r3, #0
 800e406:	d1d2      	bne.n	800e3ae <_dtoa_r+0x37e>
 800e408:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	f000 808c 	beq.w	800e528 <_dtoa_r+0x4f8>
 800e410:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e414:	4b99      	ldr	r3, [pc, #612]	; (800e67c <_dtoa_r+0x64c>)
 800e416:	2200      	movs	r2, #0
 800e418:	4630      	mov	r0, r6
 800e41a:	4639      	mov	r1, r7
 800e41c:	f7f2 fb8e 	bl	8000b3c <__aeabi_dcmplt>
 800e420:	2800      	cmp	r0, #0
 800e422:	f000 8081 	beq.w	800e528 <_dtoa_r+0x4f8>
 800e426:	9b01      	ldr	r3, [sp, #4]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d07d      	beq.n	800e528 <_dtoa_r+0x4f8>
 800e42c:	f1b9 0f00 	cmp.w	r9, #0
 800e430:	dd3c      	ble.n	800e4ac <_dtoa_r+0x47c>
 800e432:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e436:	9307      	str	r3, [sp, #28]
 800e438:	2200      	movs	r2, #0
 800e43a:	4b91      	ldr	r3, [pc, #580]	; (800e680 <_dtoa_r+0x650>)
 800e43c:	4630      	mov	r0, r6
 800e43e:	4639      	mov	r1, r7
 800e440:	f7f2 f90a 	bl	8000658 <__aeabi_dmul>
 800e444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e448:	3501      	adds	r5, #1
 800e44a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800e44e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e452:	4628      	mov	r0, r5
 800e454:	f7f2 f896 	bl	8000584 <__aeabi_i2d>
 800e458:	4632      	mov	r2, r6
 800e45a:	463b      	mov	r3, r7
 800e45c:	f7f2 f8fc 	bl	8000658 <__aeabi_dmul>
 800e460:	4b88      	ldr	r3, [pc, #544]	; (800e684 <_dtoa_r+0x654>)
 800e462:	2200      	movs	r2, #0
 800e464:	f7f1 ff42 	bl	80002ec <__adddf3>
 800e468:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e46c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e470:	9303      	str	r3, [sp, #12]
 800e472:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e474:	2b00      	cmp	r3, #0
 800e476:	d15c      	bne.n	800e532 <_dtoa_r+0x502>
 800e478:	4b83      	ldr	r3, [pc, #524]	; (800e688 <_dtoa_r+0x658>)
 800e47a:	2200      	movs	r2, #0
 800e47c:	4630      	mov	r0, r6
 800e47e:	4639      	mov	r1, r7
 800e480:	f7f1 ff32 	bl	80002e8 <__aeabi_dsub>
 800e484:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e488:	4606      	mov	r6, r0
 800e48a:	460f      	mov	r7, r1
 800e48c:	f7f2 fb74 	bl	8000b78 <__aeabi_dcmpgt>
 800e490:	2800      	cmp	r0, #0
 800e492:	f040 8296 	bne.w	800e9c2 <_dtoa_r+0x992>
 800e496:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e49a:	4630      	mov	r0, r6
 800e49c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e4a0:	4639      	mov	r1, r7
 800e4a2:	f7f2 fb4b 	bl	8000b3c <__aeabi_dcmplt>
 800e4a6:	2800      	cmp	r0, #0
 800e4a8:	f040 8288 	bne.w	800e9bc <_dtoa_r+0x98c>
 800e4ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e4b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e4b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	f2c0 8158 	blt.w	800e76c <_dtoa_r+0x73c>
 800e4bc:	f1ba 0f0e 	cmp.w	sl, #14
 800e4c0:	f300 8154 	bgt.w	800e76c <_dtoa_r+0x73c>
 800e4c4:	4b6b      	ldr	r3, [pc, #428]	; (800e674 <_dtoa_r+0x644>)
 800e4c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e4ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e4ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	f280 80e3 	bge.w	800e69c <_dtoa_r+0x66c>
 800e4d6:	9b01      	ldr	r3, [sp, #4]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	f300 80df 	bgt.w	800e69c <_dtoa_r+0x66c>
 800e4de:	f040 826d 	bne.w	800e9bc <_dtoa_r+0x98c>
 800e4e2:	4b69      	ldr	r3, [pc, #420]	; (800e688 <_dtoa_r+0x658>)
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	4640      	mov	r0, r8
 800e4e8:	4649      	mov	r1, r9
 800e4ea:	f7f2 f8b5 	bl	8000658 <__aeabi_dmul>
 800e4ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e4f2:	f7f2 fb37 	bl	8000b64 <__aeabi_dcmpge>
 800e4f6:	9e01      	ldr	r6, [sp, #4]
 800e4f8:	4637      	mov	r7, r6
 800e4fa:	2800      	cmp	r0, #0
 800e4fc:	f040 8243 	bne.w	800e986 <_dtoa_r+0x956>
 800e500:	9d00      	ldr	r5, [sp, #0]
 800e502:	2331      	movs	r3, #49	; 0x31
 800e504:	f805 3b01 	strb.w	r3, [r5], #1
 800e508:	f10a 0a01 	add.w	sl, sl, #1
 800e50c:	e23f      	b.n	800e98e <_dtoa_r+0x95e>
 800e50e:	07f2      	lsls	r2, r6, #31
 800e510:	d505      	bpl.n	800e51e <_dtoa_r+0x4ee>
 800e512:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e516:	f7f2 f89f 	bl	8000658 <__aeabi_dmul>
 800e51a:	3501      	adds	r5, #1
 800e51c:	2301      	movs	r3, #1
 800e51e:	1076      	asrs	r6, r6, #1
 800e520:	3708      	adds	r7, #8
 800e522:	e76c      	b.n	800e3fe <_dtoa_r+0x3ce>
 800e524:	2502      	movs	r5, #2
 800e526:	e76f      	b.n	800e408 <_dtoa_r+0x3d8>
 800e528:	9b01      	ldr	r3, [sp, #4]
 800e52a:	f8cd a01c 	str.w	sl, [sp, #28]
 800e52e:	930c      	str	r3, [sp, #48]	; 0x30
 800e530:	e78d      	b.n	800e44e <_dtoa_r+0x41e>
 800e532:	9900      	ldr	r1, [sp, #0]
 800e534:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e536:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e538:	4b4e      	ldr	r3, [pc, #312]	; (800e674 <_dtoa_r+0x644>)
 800e53a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e53e:	4401      	add	r1, r0
 800e540:	9102      	str	r1, [sp, #8]
 800e542:	9908      	ldr	r1, [sp, #32]
 800e544:	eeb0 8a47 	vmov.f32	s16, s14
 800e548:	eef0 8a67 	vmov.f32	s17, s15
 800e54c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e550:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e554:	2900      	cmp	r1, #0
 800e556:	d045      	beq.n	800e5e4 <_dtoa_r+0x5b4>
 800e558:	494c      	ldr	r1, [pc, #304]	; (800e68c <_dtoa_r+0x65c>)
 800e55a:	2000      	movs	r0, #0
 800e55c:	f7f2 f9a6 	bl	80008ac <__aeabi_ddiv>
 800e560:	ec53 2b18 	vmov	r2, r3, d8
 800e564:	f7f1 fec0 	bl	80002e8 <__aeabi_dsub>
 800e568:	9d00      	ldr	r5, [sp, #0]
 800e56a:	ec41 0b18 	vmov	d8, r0, r1
 800e56e:	4639      	mov	r1, r7
 800e570:	4630      	mov	r0, r6
 800e572:	f7f2 fb21 	bl	8000bb8 <__aeabi_d2iz>
 800e576:	900c      	str	r0, [sp, #48]	; 0x30
 800e578:	f7f2 f804 	bl	8000584 <__aeabi_i2d>
 800e57c:	4602      	mov	r2, r0
 800e57e:	460b      	mov	r3, r1
 800e580:	4630      	mov	r0, r6
 800e582:	4639      	mov	r1, r7
 800e584:	f7f1 feb0 	bl	80002e8 <__aeabi_dsub>
 800e588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e58a:	3330      	adds	r3, #48	; 0x30
 800e58c:	f805 3b01 	strb.w	r3, [r5], #1
 800e590:	ec53 2b18 	vmov	r2, r3, d8
 800e594:	4606      	mov	r6, r0
 800e596:	460f      	mov	r7, r1
 800e598:	f7f2 fad0 	bl	8000b3c <__aeabi_dcmplt>
 800e59c:	2800      	cmp	r0, #0
 800e59e:	d165      	bne.n	800e66c <_dtoa_r+0x63c>
 800e5a0:	4632      	mov	r2, r6
 800e5a2:	463b      	mov	r3, r7
 800e5a4:	4935      	ldr	r1, [pc, #212]	; (800e67c <_dtoa_r+0x64c>)
 800e5a6:	2000      	movs	r0, #0
 800e5a8:	f7f1 fe9e 	bl	80002e8 <__aeabi_dsub>
 800e5ac:	ec53 2b18 	vmov	r2, r3, d8
 800e5b0:	f7f2 fac4 	bl	8000b3c <__aeabi_dcmplt>
 800e5b4:	2800      	cmp	r0, #0
 800e5b6:	f040 80b9 	bne.w	800e72c <_dtoa_r+0x6fc>
 800e5ba:	9b02      	ldr	r3, [sp, #8]
 800e5bc:	429d      	cmp	r5, r3
 800e5be:	f43f af75 	beq.w	800e4ac <_dtoa_r+0x47c>
 800e5c2:	4b2f      	ldr	r3, [pc, #188]	; (800e680 <_dtoa_r+0x650>)
 800e5c4:	ec51 0b18 	vmov	r0, r1, d8
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	f7f2 f845 	bl	8000658 <__aeabi_dmul>
 800e5ce:	4b2c      	ldr	r3, [pc, #176]	; (800e680 <_dtoa_r+0x650>)
 800e5d0:	ec41 0b18 	vmov	d8, r0, r1
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	4630      	mov	r0, r6
 800e5d8:	4639      	mov	r1, r7
 800e5da:	f7f2 f83d 	bl	8000658 <__aeabi_dmul>
 800e5de:	4606      	mov	r6, r0
 800e5e0:	460f      	mov	r7, r1
 800e5e2:	e7c4      	b.n	800e56e <_dtoa_r+0x53e>
 800e5e4:	ec51 0b17 	vmov	r0, r1, d7
 800e5e8:	f7f2 f836 	bl	8000658 <__aeabi_dmul>
 800e5ec:	9b02      	ldr	r3, [sp, #8]
 800e5ee:	9d00      	ldr	r5, [sp, #0]
 800e5f0:	930c      	str	r3, [sp, #48]	; 0x30
 800e5f2:	ec41 0b18 	vmov	d8, r0, r1
 800e5f6:	4639      	mov	r1, r7
 800e5f8:	4630      	mov	r0, r6
 800e5fa:	f7f2 fadd 	bl	8000bb8 <__aeabi_d2iz>
 800e5fe:	9011      	str	r0, [sp, #68]	; 0x44
 800e600:	f7f1 ffc0 	bl	8000584 <__aeabi_i2d>
 800e604:	4602      	mov	r2, r0
 800e606:	460b      	mov	r3, r1
 800e608:	4630      	mov	r0, r6
 800e60a:	4639      	mov	r1, r7
 800e60c:	f7f1 fe6c 	bl	80002e8 <__aeabi_dsub>
 800e610:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e612:	3330      	adds	r3, #48	; 0x30
 800e614:	f805 3b01 	strb.w	r3, [r5], #1
 800e618:	9b02      	ldr	r3, [sp, #8]
 800e61a:	429d      	cmp	r5, r3
 800e61c:	4606      	mov	r6, r0
 800e61e:	460f      	mov	r7, r1
 800e620:	f04f 0200 	mov.w	r2, #0
 800e624:	d134      	bne.n	800e690 <_dtoa_r+0x660>
 800e626:	4b19      	ldr	r3, [pc, #100]	; (800e68c <_dtoa_r+0x65c>)
 800e628:	ec51 0b18 	vmov	r0, r1, d8
 800e62c:	f7f1 fe5e 	bl	80002ec <__adddf3>
 800e630:	4602      	mov	r2, r0
 800e632:	460b      	mov	r3, r1
 800e634:	4630      	mov	r0, r6
 800e636:	4639      	mov	r1, r7
 800e638:	f7f2 fa9e 	bl	8000b78 <__aeabi_dcmpgt>
 800e63c:	2800      	cmp	r0, #0
 800e63e:	d175      	bne.n	800e72c <_dtoa_r+0x6fc>
 800e640:	ec53 2b18 	vmov	r2, r3, d8
 800e644:	4911      	ldr	r1, [pc, #68]	; (800e68c <_dtoa_r+0x65c>)
 800e646:	2000      	movs	r0, #0
 800e648:	f7f1 fe4e 	bl	80002e8 <__aeabi_dsub>
 800e64c:	4602      	mov	r2, r0
 800e64e:	460b      	mov	r3, r1
 800e650:	4630      	mov	r0, r6
 800e652:	4639      	mov	r1, r7
 800e654:	f7f2 fa72 	bl	8000b3c <__aeabi_dcmplt>
 800e658:	2800      	cmp	r0, #0
 800e65a:	f43f af27 	beq.w	800e4ac <_dtoa_r+0x47c>
 800e65e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e660:	1e6b      	subs	r3, r5, #1
 800e662:	930c      	str	r3, [sp, #48]	; 0x30
 800e664:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e668:	2b30      	cmp	r3, #48	; 0x30
 800e66a:	d0f8      	beq.n	800e65e <_dtoa_r+0x62e>
 800e66c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e670:	e04a      	b.n	800e708 <_dtoa_r+0x6d8>
 800e672:	bf00      	nop
 800e674:	08012158 	.word	0x08012158
 800e678:	08012130 	.word	0x08012130
 800e67c:	3ff00000 	.word	0x3ff00000
 800e680:	40240000 	.word	0x40240000
 800e684:	401c0000 	.word	0x401c0000
 800e688:	40140000 	.word	0x40140000
 800e68c:	3fe00000 	.word	0x3fe00000
 800e690:	4baf      	ldr	r3, [pc, #700]	; (800e950 <_dtoa_r+0x920>)
 800e692:	f7f1 ffe1 	bl	8000658 <__aeabi_dmul>
 800e696:	4606      	mov	r6, r0
 800e698:	460f      	mov	r7, r1
 800e69a:	e7ac      	b.n	800e5f6 <_dtoa_r+0x5c6>
 800e69c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e6a0:	9d00      	ldr	r5, [sp, #0]
 800e6a2:	4642      	mov	r2, r8
 800e6a4:	464b      	mov	r3, r9
 800e6a6:	4630      	mov	r0, r6
 800e6a8:	4639      	mov	r1, r7
 800e6aa:	f7f2 f8ff 	bl	80008ac <__aeabi_ddiv>
 800e6ae:	f7f2 fa83 	bl	8000bb8 <__aeabi_d2iz>
 800e6b2:	9002      	str	r0, [sp, #8]
 800e6b4:	f7f1 ff66 	bl	8000584 <__aeabi_i2d>
 800e6b8:	4642      	mov	r2, r8
 800e6ba:	464b      	mov	r3, r9
 800e6bc:	f7f1 ffcc 	bl	8000658 <__aeabi_dmul>
 800e6c0:	4602      	mov	r2, r0
 800e6c2:	460b      	mov	r3, r1
 800e6c4:	4630      	mov	r0, r6
 800e6c6:	4639      	mov	r1, r7
 800e6c8:	f7f1 fe0e 	bl	80002e8 <__aeabi_dsub>
 800e6cc:	9e02      	ldr	r6, [sp, #8]
 800e6ce:	9f01      	ldr	r7, [sp, #4]
 800e6d0:	3630      	adds	r6, #48	; 0x30
 800e6d2:	f805 6b01 	strb.w	r6, [r5], #1
 800e6d6:	9e00      	ldr	r6, [sp, #0]
 800e6d8:	1bae      	subs	r6, r5, r6
 800e6da:	42b7      	cmp	r7, r6
 800e6dc:	4602      	mov	r2, r0
 800e6de:	460b      	mov	r3, r1
 800e6e0:	d137      	bne.n	800e752 <_dtoa_r+0x722>
 800e6e2:	f7f1 fe03 	bl	80002ec <__adddf3>
 800e6e6:	4642      	mov	r2, r8
 800e6e8:	464b      	mov	r3, r9
 800e6ea:	4606      	mov	r6, r0
 800e6ec:	460f      	mov	r7, r1
 800e6ee:	f7f2 fa43 	bl	8000b78 <__aeabi_dcmpgt>
 800e6f2:	b9c8      	cbnz	r0, 800e728 <_dtoa_r+0x6f8>
 800e6f4:	4642      	mov	r2, r8
 800e6f6:	464b      	mov	r3, r9
 800e6f8:	4630      	mov	r0, r6
 800e6fa:	4639      	mov	r1, r7
 800e6fc:	f7f2 fa14 	bl	8000b28 <__aeabi_dcmpeq>
 800e700:	b110      	cbz	r0, 800e708 <_dtoa_r+0x6d8>
 800e702:	9b02      	ldr	r3, [sp, #8]
 800e704:	07d9      	lsls	r1, r3, #31
 800e706:	d40f      	bmi.n	800e728 <_dtoa_r+0x6f8>
 800e708:	4620      	mov	r0, r4
 800e70a:	4659      	mov	r1, fp
 800e70c:	f001 f868 	bl	800f7e0 <_Bfree>
 800e710:	2300      	movs	r3, #0
 800e712:	702b      	strb	r3, [r5, #0]
 800e714:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e716:	f10a 0001 	add.w	r0, sl, #1
 800e71a:	6018      	str	r0, [r3, #0]
 800e71c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e71e:	2b00      	cmp	r3, #0
 800e720:	f43f acd8 	beq.w	800e0d4 <_dtoa_r+0xa4>
 800e724:	601d      	str	r5, [r3, #0]
 800e726:	e4d5      	b.n	800e0d4 <_dtoa_r+0xa4>
 800e728:	f8cd a01c 	str.w	sl, [sp, #28]
 800e72c:	462b      	mov	r3, r5
 800e72e:	461d      	mov	r5, r3
 800e730:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e734:	2a39      	cmp	r2, #57	; 0x39
 800e736:	d108      	bne.n	800e74a <_dtoa_r+0x71a>
 800e738:	9a00      	ldr	r2, [sp, #0]
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d1f7      	bne.n	800e72e <_dtoa_r+0x6fe>
 800e73e:	9a07      	ldr	r2, [sp, #28]
 800e740:	9900      	ldr	r1, [sp, #0]
 800e742:	3201      	adds	r2, #1
 800e744:	9207      	str	r2, [sp, #28]
 800e746:	2230      	movs	r2, #48	; 0x30
 800e748:	700a      	strb	r2, [r1, #0]
 800e74a:	781a      	ldrb	r2, [r3, #0]
 800e74c:	3201      	adds	r2, #1
 800e74e:	701a      	strb	r2, [r3, #0]
 800e750:	e78c      	b.n	800e66c <_dtoa_r+0x63c>
 800e752:	4b7f      	ldr	r3, [pc, #508]	; (800e950 <_dtoa_r+0x920>)
 800e754:	2200      	movs	r2, #0
 800e756:	f7f1 ff7f 	bl	8000658 <__aeabi_dmul>
 800e75a:	2200      	movs	r2, #0
 800e75c:	2300      	movs	r3, #0
 800e75e:	4606      	mov	r6, r0
 800e760:	460f      	mov	r7, r1
 800e762:	f7f2 f9e1 	bl	8000b28 <__aeabi_dcmpeq>
 800e766:	2800      	cmp	r0, #0
 800e768:	d09b      	beq.n	800e6a2 <_dtoa_r+0x672>
 800e76a:	e7cd      	b.n	800e708 <_dtoa_r+0x6d8>
 800e76c:	9a08      	ldr	r2, [sp, #32]
 800e76e:	2a00      	cmp	r2, #0
 800e770:	f000 80c4 	beq.w	800e8fc <_dtoa_r+0x8cc>
 800e774:	9a05      	ldr	r2, [sp, #20]
 800e776:	2a01      	cmp	r2, #1
 800e778:	f300 80a8 	bgt.w	800e8cc <_dtoa_r+0x89c>
 800e77c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e77e:	2a00      	cmp	r2, #0
 800e780:	f000 80a0 	beq.w	800e8c4 <_dtoa_r+0x894>
 800e784:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e788:	9e06      	ldr	r6, [sp, #24]
 800e78a:	4645      	mov	r5, r8
 800e78c:	9a04      	ldr	r2, [sp, #16]
 800e78e:	2101      	movs	r1, #1
 800e790:	441a      	add	r2, r3
 800e792:	4620      	mov	r0, r4
 800e794:	4498      	add	r8, r3
 800e796:	9204      	str	r2, [sp, #16]
 800e798:	f001 f928 	bl	800f9ec <__i2b>
 800e79c:	4607      	mov	r7, r0
 800e79e:	2d00      	cmp	r5, #0
 800e7a0:	dd0b      	ble.n	800e7ba <_dtoa_r+0x78a>
 800e7a2:	9b04      	ldr	r3, [sp, #16]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	dd08      	ble.n	800e7ba <_dtoa_r+0x78a>
 800e7a8:	42ab      	cmp	r3, r5
 800e7aa:	9a04      	ldr	r2, [sp, #16]
 800e7ac:	bfa8      	it	ge
 800e7ae:	462b      	movge	r3, r5
 800e7b0:	eba8 0803 	sub.w	r8, r8, r3
 800e7b4:	1aed      	subs	r5, r5, r3
 800e7b6:	1ad3      	subs	r3, r2, r3
 800e7b8:	9304      	str	r3, [sp, #16]
 800e7ba:	9b06      	ldr	r3, [sp, #24]
 800e7bc:	b1fb      	cbz	r3, 800e7fe <_dtoa_r+0x7ce>
 800e7be:	9b08      	ldr	r3, [sp, #32]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	f000 809f 	beq.w	800e904 <_dtoa_r+0x8d4>
 800e7c6:	2e00      	cmp	r6, #0
 800e7c8:	dd11      	ble.n	800e7ee <_dtoa_r+0x7be>
 800e7ca:	4639      	mov	r1, r7
 800e7cc:	4632      	mov	r2, r6
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	f001 f9c8 	bl	800fb64 <__pow5mult>
 800e7d4:	465a      	mov	r2, fp
 800e7d6:	4601      	mov	r1, r0
 800e7d8:	4607      	mov	r7, r0
 800e7da:	4620      	mov	r0, r4
 800e7dc:	f001 f91c 	bl	800fa18 <__multiply>
 800e7e0:	4659      	mov	r1, fp
 800e7e2:	9007      	str	r0, [sp, #28]
 800e7e4:	4620      	mov	r0, r4
 800e7e6:	f000 fffb 	bl	800f7e0 <_Bfree>
 800e7ea:	9b07      	ldr	r3, [sp, #28]
 800e7ec:	469b      	mov	fp, r3
 800e7ee:	9b06      	ldr	r3, [sp, #24]
 800e7f0:	1b9a      	subs	r2, r3, r6
 800e7f2:	d004      	beq.n	800e7fe <_dtoa_r+0x7ce>
 800e7f4:	4659      	mov	r1, fp
 800e7f6:	4620      	mov	r0, r4
 800e7f8:	f001 f9b4 	bl	800fb64 <__pow5mult>
 800e7fc:	4683      	mov	fp, r0
 800e7fe:	2101      	movs	r1, #1
 800e800:	4620      	mov	r0, r4
 800e802:	f001 f8f3 	bl	800f9ec <__i2b>
 800e806:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e808:	2b00      	cmp	r3, #0
 800e80a:	4606      	mov	r6, r0
 800e80c:	dd7c      	ble.n	800e908 <_dtoa_r+0x8d8>
 800e80e:	461a      	mov	r2, r3
 800e810:	4601      	mov	r1, r0
 800e812:	4620      	mov	r0, r4
 800e814:	f001 f9a6 	bl	800fb64 <__pow5mult>
 800e818:	9b05      	ldr	r3, [sp, #20]
 800e81a:	2b01      	cmp	r3, #1
 800e81c:	4606      	mov	r6, r0
 800e81e:	dd76      	ble.n	800e90e <_dtoa_r+0x8de>
 800e820:	2300      	movs	r3, #0
 800e822:	9306      	str	r3, [sp, #24]
 800e824:	6933      	ldr	r3, [r6, #16]
 800e826:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e82a:	6918      	ldr	r0, [r3, #16]
 800e82c:	f001 f88e 	bl	800f94c <__hi0bits>
 800e830:	f1c0 0020 	rsb	r0, r0, #32
 800e834:	9b04      	ldr	r3, [sp, #16]
 800e836:	4418      	add	r0, r3
 800e838:	f010 001f 	ands.w	r0, r0, #31
 800e83c:	f000 8086 	beq.w	800e94c <_dtoa_r+0x91c>
 800e840:	f1c0 0320 	rsb	r3, r0, #32
 800e844:	2b04      	cmp	r3, #4
 800e846:	dd7f      	ble.n	800e948 <_dtoa_r+0x918>
 800e848:	f1c0 001c 	rsb	r0, r0, #28
 800e84c:	9b04      	ldr	r3, [sp, #16]
 800e84e:	4403      	add	r3, r0
 800e850:	4480      	add	r8, r0
 800e852:	4405      	add	r5, r0
 800e854:	9304      	str	r3, [sp, #16]
 800e856:	f1b8 0f00 	cmp.w	r8, #0
 800e85a:	dd05      	ble.n	800e868 <_dtoa_r+0x838>
 800e85c:	4659      	mov	r1, fp
 800e85e:	4642      	mov	r2, r8
 800e860:	4620      	mov	r0, r4
 800e862:	f001 f9d9 	bl	800fc18 <__lshift>
 800e866:	4683      	mov	fp, r0
 800e868:	9b04      	ldr	r3, [sp, #16]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	dd05      	ble.n	800e87a <_dtoa_r+0x84a>
 800e86e:	4631      	mov	r1, r6
 800e870:	461a      	mov	r2, r3
 800e872:	4620      	mov	r0, r4
 800e874:	f001 f9d0 	bl	800fc18 <__lshift>
 800e878:	4606      	mov	r6, r0
 800e87a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d069      	beq.n	800e954 <_dtoa_r+0x924>
 800e880:	4631      	mov	r1, r6
 800e882:	4658      	mov	r0, fp
 800e884:	f001 fa34 	bl	800fcf0 <__mcmp>
 800e888:	2800      	cmp	r0, #0
 800e88a:	da63      	bge.n	800e954 <_dtoa_r+0x924>
 800e88c:	2300      	movs	r3, #0
 800e88e:	4659      	mov	r1, fp
 800e890:	220a      	movs	r2, #10
 800e892:	4620      	mov	r0, r4
 800e894:	f000 ffc6 	bl	800f824 <__multadd>
 800e898:	9b08      	ldr	r3, [sp, #32]
 800e89a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e89e:	4683      	mov	fp, r0
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	f000 818f 	beq.w	800ebc4 <_dtoa_r+0xb94>
 800e8a6:	4639      	mov	r1, r7
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	220a      	movs	r2, #10
 800e8ac:	4620      	mov	r0, r4
 800e8ae:	f000 ffb9 	bl	800f824 <__multadd>
 800e8b2:	f1b9 0f00 	cmp.w	r9, #0
 800e8b6:	4607      	mov	r7, r0
 800e8b8:	f300 808e 	bgt.w	800e9d8 <_dtoa_r+0x9a8>
 800e8bc:	9b05      	ldr	r3, [sp, #20]
 800e8be:	2b02      	cmp	r3, #2
 800e8c0:	dc50      	bgt.n	800e964 <_dtoa_r+0x934>
 800e8c2:	e089      	b.n	800e9d8 <_dtoa_r+0x9a8>
 800e8c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e8c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e8ca:	e75d      	b.n	800e788 <_dtoa_r+0x758>
 800e8cc:	9b01      	ldr	r3, [sp, #4]
 800e8ce:	1e5e      	subs	r6, r3, #1
 800e8d0:	9b06      	ldr	r3, [sp, #24]
 800e8d2:	42b3      	cmp	r3, r6
 800e8d4:	bfbf      	itttt	lt
 800e8d6:	9b06      	ldrlt	r3, [sp, #24]
 800e8d8:	9606      	strlt	r6, [sp, #24]
 800e8da:	1af2      	sublt	r2, r6, r3
 800e8dc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e8de:	bfb6      	itet	lt
 800e8e0:	189b      	addlt	r3, r3, r2
 800e8e2:	1b9e      	subge	r6, r3, r6
 800e8e4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e8e6:	9b01      	ldr	r3, [sp, #4]
 800e8e8:	bfb8      	it	lt
 800e8ea:	2600      	movlt	r6, #0
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	bfb5      	itete	lt
 800e8f0:	eba8 0503 	sublt.w	r5, r8, r3
 800e8f4:	9b01      	ldrge	r3, [sp, #4]
 800e8f6:	2300      	movlt	r3, #0
 800e8f8:	4645      	movge	r5, r8
 800e8fa:	e747      	b.n	800e78c <_dtoa_r+0x75c>
 800e8fc:	9e06      	ldr	r6, [sp, #24]
 800e8fe:	9f08      	ldr	r7, [sp, #32]
 800e900:	4645      	mov	r5, r8
 800e902:	e74c      	b.n	800e79e <_dtoa_r+0x76e>
 800e904:	9a06      	ldr	r2, [sp, #24]
 800e906:	e775      	b.n	800e7f4 <_dtoa_r+0x7c4>
 800e908:	9b05      	ldr	r3, [sp, #20]
 800e90a:	2b01      	cmp	r3, #1
 800e90c:	dc18      	bgt.n	800e940 <_dtoa_r+0x910>
 800e90e:	9b02      	ldr	r3, [sp, #8]
 800e910:	b9b3      	cbnz	r3, 800e940 <_dtoa_r+0x910>
 800e912:	9b03      	ldr	r3, [sp, #12]
 800e914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e918:	b9a3      	cbnz	r3, 800e944 <_dtoa_r+0x914>
 800e91a:	9b03      	ldr	r3, [sp, #12]
 800e91c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e920:	0d1b      	lsrs	r3, r3, #20
 800e922:	051b      	lsls	r3, r3, #20
 800e924:	b12b      	cbz	r3, 800e932 <_dtoa_r+0x902>
 800e926:	9b04      	ldr	r3, [sp, #16]
 800e928:	3301      	adds	r3, #1
 800e92a:	9304      	str	r3, [sp, #16]
 800e92c:	f108 0801 	add.w	r8, r8, #1
 800e930:	2301      	movs	r3, #1
 800e932:	9306      	str	r3, [sp, #24]
 800e934:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e936:	2b00      	cmp	r3, #0
 800e938:	f47f af74 	bne.w	800e824 <_dtoa_r+0x7f4>
 800e93c:	2001      	movs	r0, #1
 800e93e:	e779      	b.n	800e834 <_dtoa_r+0x804>
 800e940:	2300      	movs	r3, #0
 800e942:	e7f6      	b.n	800e932 <_dtoa_r+0x902>
 800e944:	9b02      	ldr	r3, [sp, #8]
 800e946:	e7f4      	b.n	800e932 <_dtoa_r+0x902>
 800e948:	d085      	beq.n	800e856 <_dtoa_r+0x826>
 800e94a:	4618      	mov	r0, r3
 800e94c:	301c      	adds	r0, #28
 800e94e:	e77d      	b.n	800e84c <_dtoa_r+0x81c>
 800e950:	40240000 	.word	0x40240000
 800e954:	9b01      	ldr	r3, [sp, #4]
 800e956:	2b00      	cmp	r3, #0
 800e958:	dc38      	bgt.n	800e9cc <_dtoa_r+0x99c>
 800e95a:	9b05      	ldr	r3, [sp, #20]
 800e95c:	2b02      	cmp	r3, #2
 800e95e:	dd35      	ble.n	800e9cc <_dtoa_r+0x99c>
 800e960:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e964:	f1b9 0f00 	cmp.w	r9, #0
 800e968:	d10d      	bne.n	800e986 <_dtoa_r+0x956>
 800e96a:	4631      	mov	r1, r6
 800e96c:	464b      	mov	r3, r9
 800e96e:	2205      	movs	r2, #5
 800e970:	4620      	mov	r0, r4
 800e972:	f000 ff57 	bl	800f824 <__multadd>
 800e976:	4601      	mov	r1, r0
 800e978:	4606      	mov	r6, r0
 800e97a:	4658      	mov	r0, fp
 800e97c:	f001 f9b8 	bl	800fcf0 <__mcmp>
 800e980:	2800      	cmp	r0, #0
 800e982:	f73f adbd 	bgt.w	800e500 <_dtoa_r+0x4d0>
 800e986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e988:	9d00      	ldr	r5, [sp, #0]
 800e98a:	ea6f 0a03 	mvn.w	sl, r3
 800e98e:	f04f 0800 	mov.w	r8, #0
 800e992:	4631      	mov	r1, r6
 800e994:	4620      	mov	r0, r4
 800e996:	f000 ff23 	bl	800f7e0 <_Bfree>
 800e99a:	2f00      	cmp	r7, #0
 800e99c:	f43f aeb4 	beq.w	800e708 <_dtoa_r+0x6d8>
 800e9a0:	f1b8 0f00 	cmp.w	r8, #0
 800e9a4:	d005      	beq.n	800e9b2 <_dtoa_r+0x982>
 800e9a6:	45b8      	cmp	r8, r7
 800e9a8:	d003      	beq.n	800e9b2 <_dtoa_r+0x982>
 800e9aa:	4641      	mov	r1, r8
 800e9ac:	4620      	mov	r0, r4
 800e9ae:	f000 ff17 	bl	800f7e0 <_Bfree>
 800e9b2:	4639      	mov	r1, r7
 800e9b4:	4620      	mov	r0, r4
 800e9b6:	f000 ff13 	bl	800f7e0 <_Bfree>
 800e9ba:	e6a5      	b.n	800e708 <_dtoa_r+0x6d8>
 800e9bc:	2600      	movs	r6, #0
 800e9be:	4637      	mov	r7, r6
 800e9c0:	e7e1      	b.n	800e986 <_dtoa_r+0x956>
 800e9c2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e9c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e9c8:	4637      	mov	r7, r6
 800e9ca:	e599      	b.n	800e500 <_dtoa_r+0x4d0>
 800e9cc:	9b08      	ldr	r3, [sp, #32]
 800e9ce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	f000 80fd 	beq.w	800ebd2 <_dtoa_r+0xba2>
 800e9d8:	2d00      	cmp	r5, #0
 800e9da:	dd05      	ble.n	800e9e8 <_dtoa_r+0x9b8>
 800e9dc:	4639      	mov	r1, r7
 800e9de:	462a      	mov	r2, r5
 800e9e0:	4620      	mov	r0, r4
 800e9e2:	f001 f919 	bl	800fc18 <__lshift>
 800e9e6:	4607      	mov	r7, r0
 800e9e8:	9b06      	ldr	r3, [sp, #24]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d05c      	beq.n	800eaa8 <_dtoa_r+0xa78>
 800e9ee:	6879      	ldr	r1, [r7, #4]
 800e9f0:	4620      	mov	r0, r4
 800e9f2:	f000 feb5 	bl	800f760 <_Balloc>
 800e9f6:	4605      	mov	r5, r0
 800e9f8:	b928      	cbnz	r0, 800ea06 <_dtoa_r+0x9d6>
 800e9fa:	4b80      	ldr	r3, [pc, #512]	; (800ebfc <_dtoa_r+0xbcc>)
 800e9fc:	4602      	mov	r2, r0
 800e9fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ea02:	f7ff bb2e 	b.w	800e062 <_dtoa_r+0x32>
 800ea06:	693a      	ldr	r2, [r7, #16]
 800ea08:	3202      	adds	r2, #2
 800ea0a:	0092      	lsls	r2, r2, #2
 800ea0c:	f107 010c 	add.w	r1, r7, #12
 800ea10:	300c      	adds	r0, #12
 800ea12:	f7fd fdd1 	bl	800c5b8 <memcpy>
 800ea16:	2201      	movs	r2, #1
 800ea18:	4629      	mov	r1, r5
 800ea1a:	4620      	mov	r0, r4
 800ea1c:	f001 f8fc 	bl	800fc18 <__lshift>
 800ea20:	9b00      	ldr	r3, [sp, #0]
 800ea22:	3301      	adds	r3, #1
 800ea24:	9301      	str	r3, [sp, #4]
 800ea26:	9b00      	ldr	r3, [sp, #0]
 800ea28:	444b      	add	r3, r9
 800ea2a:	9307      	str	r3, [sp, #28]
 800ea2c:	9b02      	ldr	r3, [sp, #8]
 800ea2e:	f003 0301 	and.w	r3, r3, #1
 800ea32:	46b8      	mov	r8, r7
 800ea34:	9306      	str	r3, [sp, #24]
 800ea36:	4607      	mov	r7, r0
 800ea38:	9b01      	ldr	r3, [sp, #4]
 800ea3a:	4631      	mov	r1, r6
 800ea3c:	3b01      	subs	r3, #1
 800ea3e:	4658      	mov	r0, fp
 800ea40:	9302      	str	r3, [sp, #8]
 800ea42:	f7ff fa69 	bl	800df18 <quorem>
 800ea46:	4603      	mov	r3, r0
 800ea48:	3330      	adds	r3, #48	; 0x30
 800ea4a:	9004      	str	r0, [sp, #16]
 800ea4c:	4641      	mov	r1, r8
 800ea4e:	4658      	mov	r0, fp
 800ea50:	9308      	str	r3, [sp, #32]
 800ea52:	f001 f94d 	bl	800fcf0 <__mcmp>
 800ea56:	463a      	mov	r2, r7
 800ea58:	4681      	mov	r9, r0
 800ea5a:	4631      	mov	r1, r6
 800ea5c:	4620      	mov	r0, r4
 800ea5e:	f001 f963 	bl	800fd28 <__mdiff>
 800ea62:	68c2      	ldr	r2, [r0, #12]
 800ea64:	9b08      	ldr	r3, [sp, #32]
 800ea66:	4605      	mov	r5, r0
 800ea68:	bb02      	cbnz	r2, 800eaac <_dtoa_r+0xa7c>
 800ea6a:	4601      	mov	r1, r0
 800ea6c:	4658      	mov	r0, fp
 800ea6e:	f001 f93f 	bl	800fcf0 <__mcmp>
 800ea72:	9b08      	ldr	r3, [sp, #32]
 800ea74:	4602      	mov	r2, r0
 800ea76:	4629      	mov	r1, r5
 800ea78:	4620      	mov	r0, r4
 800ea7a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ea7e:	f000 feaf 	bl	800f7e0 <_Bfree>
 800ea82:	9b05      	ldr	r3, [sp, #20]
 800ea84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea86:	9d01      	ldr	r5, [sp, #4]
 800ea88:	ea43 0102 	orr.w	r1, r3, r2
 800ea8c:	9b06      	ldr	r3, [sp, #24]
 800ea8e:	430b      	orrs	r3, r1
 800ea90:	9b08      	ldr	r3, [sp, #32]
 800ea92:	d10d      	bne.n	800eab0 <_dtoa_r+0xa80>
 800ea94:	2b39      	cmp	r3, #57	; 0x39
 800ea96:	d029      	beq.n	800eaec <_dtoa_r+0xabc>
 800ea98:	f1b9 0f00 	cmp.w	r9, #0
 800ea9c:	dd01      	ble.n	800eaa2 <_dtoa_r+0xa72>
 800ea9e:	9b04      	ldr	r3, [sp, #16]
 800eaa0:	3331      	adds	r3, #49	; 0x31
 800eaa2:	9a02      	ldr	r2, [sp, #8]
 800eaa4:	7013      	strb	r3, [r2, #0]
 800eaa6:	e774      	b.n	800e992 <_dtoa_r+0x962>
 800eaa8:	4638      	mov	r0, r7
 800eaaa:	e7b9      	b.n	800ea20 <_dtoa_r+0x9f0>
 800eaac:	2201      	movs	r2, #1
 800eaae:	e7e2      	b.n	800ea76 <_dtoa_r+0xa46>
 800eab0:	f1b9 0f00 	cmp.w	r9, #0
 800eab4:	db06      	blt.n	800eac4 <_dtoa_r+0xa94>
 800eab6:	9905      	ldr	r1, [sp, #20]
 800eab8:	ea41 0909 	orr.w	r9, r1, r9
 800eabc:	9906      	ldr	r1, [sp, #24]
 800eabe:	ea59 0101 	orrs.w	r1, r9, r1
 800eac2:	d120      	bne.n	800eb06 <_dtoa_r+0xad6>
 800eac4:	2a00      	cmp	r2, #0
 800eac6:	ddec      	ble.n	800eaa2 <_dtoa_r+0xa72>
 800eac8:	4659      	mov	r1, fp
 800eaca:	2201      	movs	r2, #1
 800eacc:	4620      	mov	r0, r4
 800eace:	9301      	str	r3, [sp, #4]
 800ead0:	f001 f8a2 	bl	800fc18 <__lshift>
 800ead4:	4631      	mov	r1, r6
 800ead6:	4683      	mov	fp, r0
 800ead8:	f001 f90a 	bl	800fcf0 <__mcmp>
 800eadc:	2800      	cmp	r0, #0
 800eade:	9b01      	ldr	r3, [sp, #4]
 800eae0:	dc02      	bgt.n	800eae8 <_dtoa_r+0xab8>
 800eae2:	d1de      	bne.n	800eaa2 <_dtoa_r+0xa72>
 800eae4:	07da      	lsls	r2, r3, #31
 800eae6:	d5dc      	bpl.n	800eaa2 <_dtoa_r+0xa72>
 800eae8:	2b39      	cmp	r3, #57	; 0x39
 800eaea:	d1d8      	bne.n	800ea9e <_dtoa_r+0xa6e>
 800eaec:	9a02      	ldr	r2, [sp, #8]
 800eaee:	2339      	movs	r3, #57	; 0x39
 800eaf0:	7013      	strb	r3, [r2, #0]
 800eaf2:	462b      	mov	r3, r5
 800eaf4:	461d      	mov	r5, r3
 800eaf6:	3b01      	subs	r3, #1
 800eaf8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800eafc:	2a39      	cmp	r2, #57	; 0x39
 800eafe:	d050      	beq.n	800eba2 <_dtoa_r+0xb72>
 800eb00:	3201      	adds	r2, #1
 800eb02:	701a      	strb	r2, [r3, #0]
 800eb04:	e745      	b.n	800e992 <_dtoa_r+0x962>
 800eb06:	2a00      	cmp	r2, #0
 800eb08:	dd03      	ble.n	800eb12 <_dtoa_r+0xae2>
 800eb0a:	2b39      	cmp	r3, #57	; 0x39
 800eb0c:	d0ee      	beq.n	800eaec <_dtoa_r+0xabc>
 800eb0e:	3301      	adds	r3, #1
 800eb10:	e7c7      	b.n	800eaa2 <_dtoa_r+0xa72>
 800eb12:	9a01      	ldr	r2, [sp, #4]
 800eb14:	9907      	ldr	r1, [sp, #28]
 800eb16:	f802 3c01 	strb.w	r3, [r2, #-1]
 800eb1a:	428a      	cmp	r2, r1
 800eb1c:	d02a      	beq.n	800eb74 <_dtoa_r+0xb44>
 800eb1e:	4659      	mov	r1, fp
 800eb20:	2300      	movs	r3, #0
 800eb22:	220a      	movs	r2, #10
 800eb24:	4620      	mov	r0, r4
 800eb26:	f000 fe7d 	bl	800f824 <__multadd>
 800eb2a:	45b8      	cmp	r8, r7
 800eb2c:	4683      	mov	fp, r0
 800eb2e:	f04f 0300 	mov.w	r3, #0
 800eb32:	f04f 020a 	mov.w	r2, #10
 800eb36:	4641      	mov	r1, r8
 800eb38:	4620      	mov	r0, r4
 800eb3a:	d107      	bne.n	800eb4c <_dtoa_r+0xb1c>
 800eb3c:	f000 fe72 	bl	800f824 <__multadd>
 800eb40:	4680      	mov	r8, r0
 800eb42:	4607      	mov	r7, r0
 800eb44:	9b01      	ldr	r3, [sp, #4]
 800eb46:	3301      	adds	r3, #1
 800eb48:	9301      	str	r3, [sp, #4]
 800eb4a:	e775      	b.n	800ea38 <_dtoa_r+0xa08>
 800eb4c:	f000 fe6a 	bl	800f824 <__multadd>
 800eb50:	4639      	mov	r1, r7
 800eb52:	4680      	mov	r8, r0
 800eb54:	2300      	movs	r3, #0
 800eb56:	220a      	movs	r2, #10
 800eb58:	4620      	mov	r0, r4
 800eb5a:	f000 fe63 	bl	800f824 <__multadd>
 800eb5e:	4607      	mov	r7, r0
 800eb60:	e7f0      	b.n	800eb44 <_dtoa_r+0xb14>
 800eb62:	f1b9 0f00 	cmp.w	r9, #0
 800eb66:	9a00      	ldr	r2, [sp, #0]
 800eb68:	bfcc      	ite	gt
 800eb6a:	464d      	movgt	r5, r9
 800eb6c:	2501      	movle	r5, #1
 800eb6e:	4415      	add	r5, r2
 800eb70:	f04f 0800 	mov.w	r8, #0
 800eb74:	4659      	mov	r1, fp
 800eb76:	2201      	movs	r2, #1
 800eb78:	4620      	mov	r0, r4
 800eb7a:	9301      	str	r3, [sp, #4]
 800eb7c:	f001 f84c 	bl	800fc18 <__lshift>
 800eb80:	4631      	mov	r1, r6
 800eb82:	4683      	mov	fp, r0
 800eb84:	f001 f8b4 	bl	800fcf0 <__mcmp>
 800eb88:	2800      	cmp	r0, #0
 800eb8a:	dcb2      	bgt.n	800eaf2 <_dtoa_r+0xac2>
 800eb8c:	d102      	bne.n	800eb94 <_dtoa_r+0xb64>
 800eb8e:	9b01      	ldr	r3, [sp, #4]
 800eb90:	07db      	lsls	r3, r3, #31
 800eb92:	d4ae      	bmi.n	800eaf2 <_dtoa_r+0xac2>
 800eb94:	462b      	mov	r3, r5
 800eb96:	461d      	mov	r5, r3
 800eb98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb9c:	2a30      	cmp	r2, #48	; 0x30
 800eb9e:	d0fa      	beq.n	800eb96 <_dtoa_r+0xb66>
 800eba0:	e6f7      	b.n	800e992 <_dtoa_r+0x962>
 800eba2:	9a00      	ldr	r2, [sp, #0]
 800eba4:	429a      	cmp	r2, r3
 800eba6:	d1a5      	bne.n	800eaf4 <_dtoa_r+0xac4>
 800eba8:	f10a 0a01 	add.w	sl, sl, #1
 800ebac:	2331      	movs	r3, #49	; 0x31
 800ebae:	e779      	b.n	800eaa4 <_dtoa_r+0xa74>
 800ebb0:	4b13      	ldr	r3, [pc, #76]	; (800ec00 <_dtoa_r+0xbd0>)
 800ebb2:	f7ff baaf 	b.w	800e114 <_dtoa_r+0xe4>
 800ebb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	f47f aa86 	bne.w	800e0ca <_dtoa_r+0x9a>
 800ebbe:	4b11      	ldr	r3, [pc, #68]	; (800ec04 <_dtoa_r+0xbd4>)
 800ebc0:	f7ff baa8 	b.w	800e114 <_dtoa_r+0xe4>
 800ebc4:	f1b9 0f00 	cmp.w	r9, #0
 800ebc8:	dc03      	bgt.n	800ebd2 <_dtoa_r+0xba2>
 800ebca:	9b05      	ldr	r3, [sp, #20]
 800ebcc:	2b02      	cmp	r3, #2
 800ebce:	f73f aec9 	bgt.w	800e964 <_dtoa_r+0x934>
 800ebd2:	9d00      	ldr	r5, [sp, #0]
 800ebd4:	4631      	mov	r1, r6
 800ebd6:	4658      	mov	r0, fp
 800ebd8:	f7ff f99e 	bl	800df18 <quorem>
 800ebdc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ebe0:	f805 3b01 	strb.w	r3, [r5], #1
 800ebe4:	9a00      	ldr	r2, [sp, #0]
 800ebe6:	1aaa      	subs	r2, r5, r2
 800ebe8:	4591      	cmp	r9, r2
 800ebea:	ddba      	ble.n	800eb62 <_dtoa_r+0xb32>
 800ebec:	4659      	mov	r1, fp
 800ebee:	2300      	movs	r3, #0
 800ebf0:	220a      	movs	r2, #10
 800ebf2:	4620      	mov	r0, r4
 800ebf4:	f000 fe16 	bl	800f824 <__multadd>
 800ebf8:	4683      	mov	fp, r0
 800ebfa:	e7eb      	b.n	800ebd4 <_dtoa_r+0xba4>
 800ebfc:	08011fdc 	.word	0x08011fdc
 800ec00:	08011de4 	.word	0x08011de4
 800ec04:	08011f59 	.word	0x08011f59

0800ec08 <__sflush_r>:
 800ec08:	898a      	ldrh	r2, [r1, #12]
 800ec0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec0e:	4605      	mov	r5, r0
 800ec10:	0710      	lsls	r0, r2, #28
 800ec12:	460c      	mov	r4, r1
 800ec14:	d458      	bmi.n	800ecc8 <__sflush_r+0xc0>
 800ec16:	684b      	ldr	r3, [r1, #4]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	dc05      	bgt.n	800ec28 <__sflush_r+0x20>
 800ec1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	dc02      	bgt.n	800ec28 <__sflush_r+0x20>
 800ec22:	2000      	movs	r0, #0
 800ec24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec2a:	2e00      	cmp	r6, #0
 800ec2c:	d0f9      	beq.n	800ec22 <__sflush_r+0x1a>
 800ec2e:	2300      	movs	r3, #0
 800ec30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ec34:	682f      	ldr	r7, [r5, #0]
 800ec36:	602b      	str	r3, [r5, #0]
 800ec38:	d032      	beq.n	800eca0 <__sflush_r+0x98>
 800ec3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ec3c:	89a3      	ldrh	r3, [r4, #12]
 800ec3e:	075a      	lsls	r2, r3, #29
 800ec40:	d505      	bpl.n	800ec4e <__sflush_r+0x46>
 800ec42:	6863      	ldr	r3, [r4, #4]
 800ec44:	1ac0      	subs	r0, r0, r3
 800ec46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ec48:	b10b      	cbz	r3, 800ec4e <__sflush_r+0x46>
 800ec4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ec4c:	1ac0      	subs	r0, r0, r3
 800ec4e:	2300      	movs	r3, #0
 800ec50:	4602      	mov	r2, r0
 800ec52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec54:	6a21      	ldr	r1, [r4, #32]
 800ec56:	4628      	mov	r0, r5
 800ec58:	47b0      	blx	r6
 800ec5a:	1c43      	adds	r3, r0, #1
 800ec5c:	89a3      	ldrh	r3, [r4, #12]
 800ec5e:	d106      	bne.n	800ec6e <__sflush_r+0x66>
 800ec60:	6829      	ldr	r1, [r5, #0]
 800ec62:	291d      	cmp	r1, #29
 800ec64:	d82c      	bhi.n	800ecc0 <__sflush_r+0xb8>
 800ec66:	4a2a      	ldr	r2, [pc, #168]	; (800ed10 <__sflush_r+0x108>)
 800ec68:	40ca      	lsrs	r2, r1
 800ec6a:	07d6      	lsls	r6, r2, #31
 800ec6c:	d528      	bpl.n	800ecc0 <__sflush_r+0xb8>
 800ec6e:	2200      	movs	r2, #0
 800ec70:	6062      	str	r2, [r4, #4]
 800ec72:	04d9      	lsls	r1, r3, #19
 800ec74:	6922      	ldr	r2, [r4, #16]
 800ec76:	6022      	str	r2, [r4, #0]
 800ec78:	d504      	bpl.n	800ec84 <__sflush_r+0x7c>
 800ec7a:	1c42      	adds	r2, r0, #1
 800ec7c:	d101      	bne.n	800ec82 <__sflush_r+0x7a>
 800ec7e:	682b      	ldr	r3, [r5, #0]
 800ec80:	b903      	cbnz	r3, 800ec84 <__sflush_r+0x7c>
 800ec82:	6560      	str	r0, [r4, #84]	; 0x54
 800ec84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec86:	602f      	str	r7, [r5, #0]
 800ec88:	2900      	cmp	r1, #0
 800ec8a:	d0ca      	beq.n	800ec22 <__sflush_r+0x1a>
 800ec8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec90:	4299      	cmp	r1, r3
 800ec92:	d002      	beq.n	800ec9a <__sflush_r+0x92>
 800ec94:	4628      	mov	r0, r5
 800ec96:	f001 fa2d 	bl	80100f4 <_free_r>
 800ec9a:	2000      	movs	r0, #0
 800ec9c:	6360      	str	r0, [r4, #52]	; 0x34
 800ec9e:	e7c1      	b.n	800ec24 <__sflush_r+0x1c>
 800eca0:	6a21      	ldr	r1, [r4, #32]
 800eca2:	2301      	movs	r3, #1
 800eca4:	4628      	mov	r0, r5
 800eca6:	47b0      	blx	r6
 800eca8:	1c41      	adds	r1, r0, #1
 800ecaa:	d1c7      	bne.n	800ec3c <__sflush_r+0x34>
 800ecac:	682b      	ldr	r3, [r5, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d0c4      	beq.n	800ec3c <__sflush_r+0x34>
 800ecb2:	2b1d      	cmp	r3, #29
 800ecb4:	d001      	beq.n	800ecba <__sflush_r+0xb2>
 800ecb6:	2b16      	cmp	r3, #22
 800ecb8:	d101      	bne.n	800ecbe <__sflush_r+0xb6>
 800ecba:	602f      	str	r7, [r5, #0]
 800ecbc:	e7b1      	b.n	800ec22 <__sflush_r+0x1a>
 800ecbe:	89a3      	ldrh	r3, [r4, #12]
 800ecc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecc4:	81a3      	strh	r3, [r4, #12]
 800ecc6:	e7ad      	b.n	800ec24 <__sflush_r+0x1c>
 800ecc8:	690f      	ldr	r7, [r1, #16]
 800ecca:	2f00      	cmp	r7, #0
 800eccc:	d0a9      	beq.n	800ec22 <__sflush_r+0x1a>
 800ecce:	0793      	lsls	r3, r2, #30
 800ecd0:	680e      	ldr	r6, [r1, #0]
 800ecd2:	bf08      	it	eq
 800ecd4:	694b      	ldreq	r3, [r1, #20]
 800ecd6:	600f      	str	r7, [r1, #0]
 800ecd8:	bf18      	it	ne
 800ecda:	2300      	movne	r3, #0
 800ecdc:	eba6 0807 	sub.w	r8, r6, r7
 800ece0:	608b      	str	r3, [r1, #8]
 800ece2:	f1b8 0f00 	cmp.w	r8, #0
 800ece6:	dd9c      	ble.n	800ec22 <__sflush_r+0x1a>
 800ece8:	6a21      	ldr	r1, [r4, #32]
 800ecea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ecec:	4643      	mov	r3, r8
 800ecee:	463a      	mov	r2, r7
 800ecf0:	4628      	mov	r0, r5
 800ecf2:	47b0      	blx	r6
 800ecf4:	2800      	cmp	r0, #0
 800ecf6:	dc06      	bgt.n	800ed06 <__sflush_r+0xfe>
 800ecf8:	89a3      	ldrh	r3, [r4, #12]
 800ecfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecfe:	81a3      	strh	r3, [r4, #12]
 800ed00:	f04f 30ff 	mov.w	r0, #4294967295
 800ed04:	e78e      	b.n	800ec24 <__sflush_r+0x1c>
 800ed06:	4407      	add	r7, r0
 800ed08:	eba8 0800 	sub.w	r8, r8, r0
 800ed0c:	e7e9      	b.n	800ece2 <__sflush_r+0xda>
 800ed0e:	bf00      	nop
 800ed10:	20400001 	.word	0x20400001

0800ed14 <_fflush_r>:
 800ed14:	b538      	push	{r3, r4, r5, lr}
 800ed16:	690b      	ldr	r3, [r1, #16]
 800ed18:	4605      	mov	r5, r0
 800ed1a:	460c      	mov	r4, r1
 800ed1c:	b913      	cbnz	r3, 800ed24 <_fflush_r+0x10>
 800ed1e:	2500      	movs	r5, #0
 800ed20:	4628      	mov	r0, r5
 800ed22:	bd38      	pop	{r3, r4, r5, pc}
 800ed24:	b118      	cbz	r0, 800ed2e <_fflush_r+0x1a>
 800ed26:	6983      	ldr	r3, [r0, #24]
 800ed28:	b90b      	cbnz	r3, 800ed2e <_fflush_r+0x1a>
 800ed2a:	f000 f887 	bl	800ee3c <__sinit>
 800ed2e:	4b14      	ldr	r3, [pc, #80]	; (800ed80 <_fflush_r+0x6c>)
 800ed30:	429c      	cmp	r4, r3
 800ed32:	d11b      	bne.n	800ed6c <_fflush_r+0x58>
 800ed34:	686c      	ldr	r4, [r5, #4]
 800ed36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d0ef      	beq.n	800ed1e <_fflush_r+0xa>
 800ed3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ed40:	07d0      	lsls	r0, r2, #31
 800ed42:	d404      	bmi.n	800ed4e <_fflush_r+0x3a>
 800ed44:	0599      	lsls	r1, r3, #22
 800ed46:	d402      	bmi.n	800ed4e <_fflush_r+0x3a>
 800ed48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed4a:	f000 fc88 	bl	800f65e <__retarget_lock_acquire_recursive>
 800ed4e:	4628      	mov	r0, r5
 800ed50:	4621      	mov	r1, r4
 800ed52:	f7ff ff59 	bl	800ec08 <__sflush_r>
 800ed56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed58:	07da      	lsls	r2, r3, #31
 800ed5a:	4605      	mov	r5, r0
 800ed5c:	d4e0      	bmi.n	800ed20 <_fflush_r+0xc>
 800ed5e:	89a3      	ldrh	r3, [r4, #12]
 800ed60:	059b      	lsls	r3, r3, #22
 800ed62:	d4dd      	bmi.n	800ed20 <_fflush_r+0xc>
 800ed64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed66:	f000 fc7b 	bl	800f660 <__retarget_lock_release_recursive>
 800ed6a:	e7d9      	b.n	800ed20 <_fflush_r+0xc>
 800ed6c:	4b05      	ldr	r3, [pc, #20]	; (800ed84 <_fflush_r+0x70>)
 800ed6e:	429c      	cmp	r4, r3
 800ed70:	d101      	bne.n	800ed76 <_fflush_r+0x62>
 800ed72:	68ac      	ldr	r4, [r5, #8]
 800ed74:	e7df      	b.n	800ed36 <_fflush_r+0x22>
 800ed76:	4b04      	ldr	r3, [pc, #16]	; (800ed88 <_fflush_r+0x74>)
 800ed78:	429c      	cmp	r4, r3
 800ed7a:	bf08      	it	eq
 800ed7c:	68ec      	ldreq	r4, [r5, #12]
 800ed7e:	e7da      	b.n	800ed36 <_fflush_r+0x22>
 800ed80:	08012010 	.word	0x08012010
 800ed84:	08012030 	.word	0x08012030
 800ed88:	08011ff0 	.word	0x08011ff0

0800ed8c <std>:
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	b510      	push	{r4, lr}
 800ed90:	4604      	mov	r4, r0
 800ed92:	e9c0 3300 	strd	r3, r3, [r0]
 800ed96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed9a:	6083      	str	r3, [r0, #8]
 800ed9c:	8181      	strh	r1, [r0, #12]
 800ed9e:	6643      	str	r3, [r0, #100]	; 0x64
 800eda0:	81c2      	strh	r2, [r0, #14]
 800eda2:	6183      	str	r3, [r0, #24]
 800eda4:	4619      	mov	r1, r3
 800eda6:	2208      	movs	r2, #8
 800eda8:	305c      	adds	r0, #92	; 0x5c
 800edaa:	f7fd fc13 	bl	800c5d4 <memset>
 800edae:	4b05      	ldr	r3, [pc, #20]	; (800edc4 <std+0x38>)
 800edb0:	6263      	str	r3, [r4, #36]	; 0x24
 800edb2:	4b05      	ldr	r3, [pc, #20]	; (800edc8 <std+0x3c>)
 800edb4:	62a3      	str	r3, [r4, #40]	; 0x28
 800edb6:	4b05      	ldr	r3, [pc, #20]	; (800edcc <std+0x40>)
 800edb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800edba:	4b05      	ldr	r3, [pc, #20]	; (800edd0 <std+0x44>)
 800edbc:	6224      	str	r4, [r4, #32]
 800edbe:	6323      	str	r3, [r4, #48]	; 0x30
 800edc0:	bd10      	pop	{r4, pc}
 800edc2:	bf00      	nop
 800edc4:	080107e9 	.word	0x080107e9
 800edc8:	0801080b 	.word	0x0801080b
 800edcc:	08010843 	.word	0x08010843
 800edd0:	08010867 	.word	0x08010867

0800edd4 <_cleanup_r>:
 800edd4:	4901      	ldr	r1, [pc, #4]	; (800eddc <_cleanup_r+0x8>)
 800edd6:	f000 b8af 	b.w	800ef38 <_fwalk_reent>
 800edda:	bf00      	nop
 800eddc:	0800ed15 	.word	0x0800ed15

0800ede0 <__sfmoreglue>:
 800ede0:	b570      	push	{r4, r5, r6, lr}
 800ede2:	1e4a      	subs	r2, r1, #1
 800ede4:	2568      	movs	r5, #104	; 0x68
 800ede6:	4355      	muls	r5, r2
 800ede8:	460e      	mov	r6, r1
 800edea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800edee:	f001 f9d1 	bl	8010194 <_malloc_r>
 800edf2:	4604      	mov	r4, r0
 800edf4:	b140      	cbz	r0, 800ee08 <__sfmoreglue+0x28>
 800edf6:	2100      	movs	r1, #0
 800edf8:	e9c0 1600 	strd	r1, r6, [r0]
 800edfc:	300c      	adds	r0, #12
 800edfe:	60a0      	str	r0, [r4, #8]
 800ee00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ee04:	f7fd fbe6 	bl	800c5d4 <memset>
 800ee08:	4620      	mov	r0, r4
 800ee0a:	bd70      	pop	{r4, r5, r6, pc}

0800ee0c <__sfp_lock_acquire>:
 800ee0c:	4801      	ldr	r0, [pc, #4]	; (800ee14 <__sfp_lock_acquire+0x8>)
 800ee0e:	f000 bc26 	b.w	800f65e <__retarget_lock_acquire_recursive>
 800ee12:	bf00      	nop
 800ee14:	2000aa68 	.word	0x2000aa68

0800ee18 <__sfp_lock_release>:
 800ee18:	4801      	ldr	r0, [pc, #4]	; (800ee20 <__sfp_lock_release+0x8>)
 800ee1a:	f000 bc21 	b.w	800f660 <__retarget_lock_release_recursive>
 800ee1e:	bf00      	nop
 800ee20:	2000aa68 	.word	0x2000aa68

0800ee24 <__sinit_lock_acquire>:
 800ee24:	4801      	ldr	r0, [pc, #4]	; (800ee2c <__sinit_lock_acquire+0x8>)
 800ee26:	f000 bc1a 	b.w	800f65e <__retarget_lock_acquire_recursive>
 800ee2a:	bf00      	nop
 800ee2c:	2000aa63 	.word	0x2000aa63

0800ee30 <__sinit_lock_release>:
 800ee30:	4801      	ldr	r0, [pc, #4]	; (800ee38 <__sinit_lock_release+0x8>)
 800ee32:	f000 bc15 	b.w	800f660 <__retarget_lock_release_recursive>
 800ee36:	bf00      	nop
 800ee38:	2000aa63 	.word	0x2000aa63

0800ee3c <__sinit>:
 800ee3c:	b510      	push	{r4, lr}
 800ee3e:	4604      	mov	r4, r0
 800ee40:	f7ff fff0 	bl	800ee24 <__sinit_lock_acquire>
 800ee44:	69a3      	ldr	r3, [r4, #24]
 800ee46:	b11b      	cbz	r3, 800ee50 <__sinit+0x14>
 800ee48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee4c:	f7ff bff0 	b.w	800ee30 <__sinit_lock_release>
 800ee50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ee54:	6523      	str	r3, [r4, #80]	; 0x50
 800ee56:	4b13      	ldr	r3, [pc, #76]	; (800eea4 <__sinit+0x68>)
 800ee58:	4a13      	ldr	r2, [pc, #76]	; (800eea8 <__sinit+0x6c>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ee5e:	42a3      	cmp	r3, r4
 800ee60:	bf04      	itt	eq
 800ee62:	2301      	moveq	r3, #1
 800ee64:	61a3      	streq	r3, [r4, #24]
 800ee66:	4620      	mov	r0, r4
 800ee68:	f000 f820 	bl	800eeac <__sfp>
 800ee6c:	6060      	str	r0, [r4, #4]
 800ee6e:	4620      	mov	r0, r4
 800ee70:	f000 f81c 	bl	800eeac <__sfp>
 800ee74:	60a0      	str	r0, [r4, #8]
 800ee76:	4620      	mov	r0, r4
 800ee78:	f000 f818 	bl	800eeac <__sfp>
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	60e0      	str	r0, [r4, #12]
 800ee80:	2104      	movs	r1, #4
 800ee82:	6860      	ldr	r0, [r4, #4]
 800ee84:	f7ff ff82 	bl	800ed8c <std>
 800ee88:	68a0      	ldr	r0, [r4, #8]
 800ee8a:	2201      	movs	r2, #1
 800ee8c:	2109      	movs	r1, #9
 800ee8e:	f7ff ff7d 	bl	800ed8c <std>
 800ee92:	68e0      	ldr	r0, [r4, #12]
 800ee94:	2202      	movs	r2, #2
 800ee96:	2112      	movs	r1, #18
 800ee98:	f7ff ff78 	bl	800ed8c <std>
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	61a3      	str	r3, [r4, #24]
 800eea0:	e7d2      	b.n	800ee48 <__sinit+0xc>
 800eea2:	bf00      	nop
 800eea4:	08011dd0 	.word	0x08011dd0
 800eea8:	0800edd5 	.word	0x0800edd5

0800eeac <__sfp>:
 800eeac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeae:	4607      	mov	r7, r0
 800eeb0:	f7ff ffac 	bl	800ee0c <__sfp_lock_acquire>
 800eeb4:	4b1e      	ldr	r3, [pc, #120]	; (800ef30 <__sfp+0x84>)
 800eeb6:	681e      	ldr	r6, [r3, #0]
 800eeb8:	69b3      	ldr	r3, [r6, #24]
 800eeba:	b913      	cbnz	r3, 800eec2 <__sfp+0x16>
 800eebc:	4630      	mov	r0, r6
 800eebe:	f7ff ffbd 	bl	800ee3c <__sinit>
 800eec2:	3648      	adds	r6, #72	; 0x48
 800eec4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eec8:	3b01      	subs	r3, #1
 800eeca:	d503      	bpl.n	800eed4 <__sfp+0x28>
 800eecc:	6833      	ldr	r3, [r6, #0]
 800eece:	b30b      	cbz	r3, 800ef14 <__sfp+0x68>
 800eed0:	6836      	ldr	r6, [r6, #0]
 800eed2:	e7f7      	b.n	800eec4 <__sfp+0x18>
 800eed4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eed8:	b9d5      	cbnz	r5, 800ef10 <__sfp+0x64>
 800eeda:	4b16      	ldr	r3, [pc, #88]	; (800ef34 <__sfp+0x88>)
 800eedc:	60e3      	str	r3, [r4, #12]
 800eede:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eee2:	6665      	str	r5, [r4, #100]	; 0x64
 800eee4:	f000 fbba 	bl	800f65c <__retarget_lock_init_recursive>
 800eee8:	f7ff ff96 	bl	800ee18 <__sfp_lock_release>
 800eeec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eef0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eef4:	6025      	str	r5, [r4, #0]
 800eef6:	61a5      	str	r5, [r4, #24]
 800eef8:	2208      	movs	r2, #8
 800eefa:	4629      	mov	r1, r5
 800eefc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ef00:	f7fd fb68 	bl	800c5d4 <memset>
 800ef04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ef08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ef0c:	4620      	mov	r0, r4
 800ef0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef10:	3468      	adds	r4, #104	; 0x68
 800ef12:	e7d9      	b.n	800eec8 <__sfp+0x1c>
 800ef14:	2104      	movs	r1, #4
 800ef16:	4638      	mov	r0, r7
 800ef18:	f7ff ff62 	bl	800ede0 <__sfmoreglue>
 800ef1c:	4604      	mov	r4, r0
 800ef1e:	6030      	str	r0, [r6, #0]
 800ef20:	2800      	cmp	r0, #0
 800ef22:	d1d5      	bne.n	800eed0 <__sfp+0x24>
 800ef24:	f7ff ff78 	bl	800ee18 <__sfp_lock_release>
 800ef28:	230c      	movs	r3, #12
 800ef2a:	603b      	str	r3, [r7, #0]
 800ef2c:	e7ee      	b.n	800ef0c <__sfp+0x60>
 800ef2e:	bf00      	nop
 800ef30:	08011dd0 	.word	0x08011dd0
 800ef34:	ffff0001 	.word	0xffff0001

0800ef38 <_fwalk_reent>:
 800ef38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef3c:	4606      	mov	r6, r0
 800ef3e:	4688      	mov	r8, r1
 800ef40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ef44:	2700      	movs	r7, #0
 800ef46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ef4a:	f1b9 0901 	subs.w	r9, r9, #1
 800ef4e:	d505      	bpl.n	800ef5c <_fwalk_reent+0x24>
 800ef50:	6824      	ldr	r4, [r4, #0]
 800ef52:	2c00      	cmp	r4, #0
 800ef54:	d1f7      	bne.n	800ef46 <_fwalk_reent+0xe>
 800ef56:	4638      	mov	r0, r7
 800ef58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef5c:	89ab      	ldrh	r3, [r5, #12]
 800ef5e:	2b01      	cmp	r3, #1
 800ef60:	d907      	bls.n	800ef72 <_fwalk_reent+0x3a>
 800ef62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ef66:	3301      	adds	r3, #1
 800ef68:	d003      	beq.n	800ef72 <_fwalk_reent+0x3a>
 800ef6a:	4629      	mov	r1, r5
 800ef6c:	4630      	mov	r0, r6
 800ef6e:	47c0      	blx	r8
 800ef70:	4307      	orrs	r7, r0
 800ef72:	3568      	adds	r5, #104	; 0x68
 800ef74:	e7e9      	b.n	800ef4a <_fwalk_reent+0x12>

0800ef76 <rshift>:
 800ef76:	6903      	ldr	r3, [r0, #16]
 800ef78:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ef7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef80:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ef84:	f100 0414 	add.w	r4, r0, #20
 800ef88:	dd45      	ble.n	800f016 <rshift+0xa0>
 800ef8a:	f011 011f 	ands.w	r1, r1, #31
 800ef8e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ef92:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ef96:	d10c      	bne.n	800efb2 <rshift+0x3c>
 800ef98:	f100 0710 	add.w	r7, r0, #16
 800ef9c:	4629      	mov	r1, r5
 800ef9e:	42b1      	cmp	r1, r6
 800efa0:	d334      	bcc.n	800f00c <rshift+0x96>
 800efa2:	1a9b      	subs	r3, r3, r2
 800efa4:	009b      	lsls	r3, r3, #2
 800efa6:	1eea      	subs	r2, r5, #3
 800efa8:	4296      	cmp	r6, r2
 800efaa:	bf38      	it	cc
 800efac:	2300      	movcc	r3, #0
 800efae:	4423      	add	r3, r4
 800efb0:	e015      	b.n	800efde <rshift+0x68>
 800efb2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800efb6:	f1c1 0820 	rsb	r8, r1, #32
 800efba:	40cf      	lsrs	r7, r1
 800efbc:	f105 0e04 	add.w	lr, r5, #4
 800efc0:	46a1      	mov	r9, r4
 800efc2:	4576      	cmp	r6, lr
 800efc4:	46f4      	mov	ip, lr
 800efc6:	d815      	bhi.n	800eff4 <rshift+0x7e>
 800efc8:	1a9b      	subs	r3, r3, r2
 800efca:	009a      	lsls	r2, r3, #2
 800efcc:	3a04      	subs	r2, #4
 800efce:	3501      	adds	r5, #1
 800efd0:	42ae      	cmp	r6, r5
 800efd2:	bf38      	it	cc
 800efd4:	2200      	movcc	r2, #0
 800efd6:	18a3      	adds	r3, r4, r2
 800efd8:	50a7      	str	r7, [r4, r2]
 800efda:	b107      	cbz	r7, 800efde <rshift+0x68>
 800efdc:	3304      	adds	r3, #4
 800efde:	1b1a      	subs	r2, r3, r4
 800efe0:	42a3      	cmp	r3, r4
 800efe2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800efe6:	bf08      	it	eq
 800efe8:	2300      	moveq	r3, #0
 800efea:	6102      	str	r2, [r0, #16]
 800efec:	bf08      	it	eq
 800efee:	6143      	streq	r3, [r0, #20]
 800eff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eff4:	f8dc c000 	ldr.w	ip, [ip]
 800eff8:	fa0c fc08 	lsl.w	ip, ip, r8
 800effc:	ea4c 0707 	orr.w	r7, ip, r7
 800f000:	f849 7b04 	str.w	r7, [r9], #4
 800f004:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f008:	40cf      	lsrs	r7, r1
 800f00a:	e7da      	b.n	800efc2 <rshift+0x4c>
 800f00c:	f851 cb04 	ldr.w	ip, [r1], #4
 800f010:	f847 cf04 	str.w	ip, [r7, #4]!
 800f014:	e7c3      	b.n	800ef9e <rshift+0x28>
 800f016:	4623      	mov	r3, r4
 800f018:	e7e1      	b.n	800efde <rshift+0x68>

0800f01a <__hexdig_fun>:
 800f01a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f01e:	2b09      	cmp	r3, #9
 800f020:	d802      	bhi.n	800f028 <__hexdig_fun+0xe>
 800f022:	3820      	subs	r0, #32
 800f024:	b2c0      	uxtb	r0, r0
 800f026:	4770      	bx	lr
 800f028:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f02c:	2b05      	cmp	r3, #5
 800f02e:	d801      	bhi.n	800f034 <__hexdig_fun+0x1a>
 800f030:	3847      	subs	r0, #71	; 0x47
 800f032:	e7f7      	b.n	800f024 <__hexdig_fun+0xa>
 800f034:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f038:	2b05      	cmp	r3, #5
 800f03a:	d801      	bhi.n	800f040 <__hexdig_fun+0x26>
 800f03c:	3827      	subs	r0, #39	; 0x27
 800f03e:	e7f1      	b.n	800f024 <__hexdig_fun+0xa>
 800f040:	2000      	movs	r0, #0
 800f042:	4770      	bx	lr

0800f044 <__gethex>:
 800f044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f048:	ed2d 8b02 	vpush	{d8}
 800f04c:	b089      	sub	sp, #36	; 0x24
 800f04e:	ee08 0a10 	vmov	s16, r0
 800f052:	9304      	str	r3, [sp, #16]
 800f054:	4bbc      	ldr	r3, [pc, #752]	; (800f348 <__gethex+0x304>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	9301      	str	r3, [sp, #4]
 800f05a:	4618      	mov	r0, r3
 800f05c:	468b      	mov	fp, r1
 800f05e:	4690      	mov	r8, r2
 800f060:	f7f1 f8e0 	bl	8000224 <strlen>
 800f064:	9b01      	ldr	r3, [sp, #4]
 800f066:	f8db 2000 	ldr.w	r2, [fp]
 800f06a:	4403      	add	r3, r0
 800f06c:	4682      	mov	sl, r0
 800f06e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f072:	9305      	str	r3, [sp, #20]
 800f074:	1c93      	adds	r3, r2, #2
 800f076:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f07a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f07e:	32fe      	adds	r2, #254	; 0xfe
 800f080:	18d1      	adds	r1, r2, r3
 800f082:	461f      	mov	r7, r3
 800f084:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f088:	9100      	str	r1, [sp, #0]
 800f08a:	2830      	cmp	r0, #48	; 0x30
 800f08c:	d0f8      	beq.n	800f080 <__gethex+0x3c>
 800f08e:	f7ff ffc4 	bl	800f01a <__hexdig_fun>
 800f092:	4604      	mov	r4, r0
 800f094:	2800      	cmp	r0, #0
 800f096:	d13a      	bne.n	800f10e <__gethex+0xca>
 800f098:	9901      	ldr	r1, [sp, #4]
 800f09a:	4652      	mov	r2, sl
 800f09c:	4638      	mov	r0, r7
 800f09e:	f001 fbe6 	bl	801086e <strncmp>
 800f0a2:	4605      	mov	r5, r0
 800f0a4:	2800      	cmp	r0, #0
 800f0a6:	d168      	bne.n	800f17a <__gethex+0x136>
 800f0a8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f0ac:	eb07 060a 	add.w	r6, r7, sl
 800f0b0:	f7ff ffb3 	bl	800f01a <__hexdig_fun>
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	d062      	beq.n	800f17e <__gethex+0x13a>
 800f0b8:	4633      	mov	r3, r6
 800f0ba:	7818      	ldrb	r0, [r3, #0]
 800f0bc:	2830      	cmp	r0, #48	; 0x30
 800f0be:	461f      	mov	r7, r3
 800f0c0:	f103 0301 	add.w	r3, r3, #1
 800f0c4:	d0f9      	beq.n	800f0ba <__gethex+0x76>
 800f0c6:	f7ff ffa8 	bl	800f01a <__hexdig_fun>
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	fab0 f480 	clz	r4, r0
 800f0d0:	0964      	lsrs	r4, r4, #5
 800f0d2:	4635      	mov	r5, r6
 800f0d4:	9300      	str	r3, [sp, #0]
 800f0d6:	463a      	mov	r2, r7
 800f0d8:	4616      	mov	r6, r2
 800f0da:	3201      	adds	r2, #1
 800f0dc:	7830      	ldrb	r0, [r6, #0]
 800f0de:	f7ff ff9c 	bl	800f01a <__hexdig_fun>
 800f0e2:	2800      	cmp	r0, #0
 800f0e4:	d1f8      	bne.n	800f0d8 <__gethex+0x94>
 800f0e6:	9901      	ldr	r1, [sp, #4]
 800f0e8:	4652      	mov	r2, sl
 800f0ea:	4630      	mov	r0, r6
 800f0ec:	f001 fbbf 	bl	801086e <strncmp>
 800f0f0:	b980      	cbnz	r0, 800f114 <__gethex+0xd0>
 800f0f2:	b94d      	cbnz	r5, 800f108 <__gethex+0xc4>
 800f0f4:	eb06 050a 	add.w	r5, r6, sl
 800f0f8:	462a      	mov	r2, r5
 800f0fa:	4616      	mov	r6, r2
 800f0fc:	3201      	adds	r2, #1
 800f0fe:	7830      	ldrb	r0, [r6, #0]
 800f100:	f7ff ff8b 	bl	800f01a <__hexdig_fun>
 800f104:	2800      	cmp	r0, #0
 800f106:	d1f8      	bne.n	800f0fa <__gethex+0xb6>
 800f108:	1bad      	subs	r5, r5, r6
 800f10a:	00ad      	lsls	r5, r5, #2
 800f10c:	e004      	b.n	800f118 <__gethex+0xd4>
 800f10e:	2400      	movs	r4, #0
 800f110:	4625      	mov	r5, r4
 800f112:	e7e0      	b.n	800f0d6 <__gethex+0x92>
 800f114:	2d00      	cmp	r5, #0
 800f116:	d1f7      	bne.n	800f108 <__gethex+0xc4>
 800f118:	7833      	ldrb	r3, [r6, #0]
 800f11a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f11e:	2b50      	cmp	r3, #80	; 0x50
 800f120:	d13b      	bne.n	800f19a <__gethex+0x156>
 800f122:	7873      	ldrb	r3, [r6, #1]
 800f124:	2b2b      	cmp	r3, #43	; 0x2b
 800f126:	d02c      	beq.n	800f182 <__gethex+0x13e>
 800f128:	2b2d      	cmp	r3, #45	; 0x2d
 800f12a:	d02e      	beq.n	800f18a <__gethex+0x146>
 800f12c:	1c71      	adds	r1, r6, #1
 800f12e:	f04f 0900 	mov.w	r9, #0
 800f132:	7808      	ldrb	r0, [r1, #0]
 800f134:	f7ff ff71 	bl	800f01a <__hexdig_fun>
 800f138:	1e43      	subs	r3, r0, #1
 800f13a:	b2db      	uxtb	r3, r3
 800f13c:	2b18      	cmp	r3, #24
 800f13e:	d82c      	bhi.n	800f19a <__gethex+0x156>
 800f140:	f1a0 0210 	sub.w	r2, r0, #16
 800f144:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f148:	f7ff ff67 	bl	800f01a <__hexdig_fun>
 800f14c:	1e43      	subs	r3, r0, #1
 800f14e:	b2db      	uxtb	r3, r3
 800f150:	2b18      	cmp	r3, #24
 800f152:	d91d      	bls.n	800f190 <__gethex+0x14c>
 800f154:	f1b9 0f00 	cmp.w	r9, #0
 800f158:	d000      	beq.n	800f15c <__gethex+0x118>
 800f15a:	4252      	negs	r2, r2
 800f15c:	4415      	add	r5, r2
 800f15e:	f8cb 1000 	str.w	r1, [fp]
 800f162:	b1e4      	cbz	r4, 800f19e <__gethex+0x15a>
 800f164:	9b00      	ldr	r3, [sp, #0]
 800f166:	2b00      	cmp	r3, #0
 800f168:	bf14      	ite	ne
 800f16a:	2700      	movne	r7, #0
 800f16c:	2706      	moveq	r7, #6
 800f16e:	4638      	mov	r0, r7
 800f170:	b009      	add	sp, #36	; 0x24
 800f172:	ecbd 8b02 	vpop	{d8}
 800f176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f17a:	463e      	mov	r6, r7
 800f17c:	4625      	mov	r5, r4
 800f17e:	2401      	movs	r4, #1
 800f180:	e7ca      	b.n	800f118 <__gethex+0xd4>
 800f182:	f04f 0900 	mov.w	r9, #0
 800f186:	1cb1      	adds	r1, r6, #2
 800f188:	e7d3      	b.n	800f132 <__gethex+0xee>
 800f18a:	f04f 0901 	mov.w	r9, #1
 800f18e:	e7fa      	b.n	800f186 <__gethex+0x142>
 800f190:	230a      	movs	r3, #10
 800f192:	fb03 0202 	mla	r2, r3, r2, r0
 800f196:	3a10      	subs	r2, #16
 800f198:	e7d4      	b.n	800f144 <__gethex+0x100>
 800f19a:	4631      	mov	r1, r6
 800f19c:	e7df      	b.n	800f15e <__gethex+0x11a>
 800f19e:	1bf3      	subs	r3, r6, r7
 800f1a0:	3b01      	subs	r3, #1
 800f1a2:	4621      	mov	r1, r4
 800f1a4:	2b07      	cmp	r3, #7
 800f1a6:	dc0b      	bgt.n	800f1c0 <__gethex+0x17c>
 800f1a8:	ee18 0a10 	vmov	r0, s16
 800f1ac:	f000 fad8 	bl	800f760 <_Balloc>
 800f1b0:	4604      	mov	r4, r0
 800f1b2:	b940      	cbnz	r0, 800f1c6 <__gethex+0x182>
 800f1b4:	4b65      	ldr	r3, [pc, #404]	; (800f34c <__gethex+0x308>)
 800f1b6:	4602      	mov	r2, r0
 800f1b8:	21de      	movs	r1, #222	; 0xde
 800f1ba:	4865      	ldr	r0, [pc, #404]	; (800f350 <__gethex+0x30c>)
 800f1bc:	f001 fb88 	bl	80108d0 <__assert_func>
 800f1c0:	3101      	adds	r1, #1
 800f1c2:	105b      	asrs	r3, r3, #1
 800f1c4:	e7ee      	b.n	800f1a4 <__gethex+0x160>
 800f1c6:	f100 0914 	add.w	r9, r0, #20
 800f1ca:	f04f 0b00 	mov.w	fp, #0
 800f1ce:	f1ca 0301 	rsb	r3, sl, #1
 800f1d2:	f8cd 9008 	str.w	r9, [sp, #8]
 800f1d6:	f8cd b000 	str.w	fp, [sp]
 800f1da:	9306      	str	r3, [sp, #24]
 800f1dc:	42b7      	cmp	r7, r6
 800f1de:	d340      	bcc.n	800f262 <__gethex+0x21e>
 800f1e0:	9802      	ldr	r0, [sp, #8]
 800f1e2:	9b00      	ldr	r3, [sp, #0]
 800f1e4:	f840 3b04 	str.w	r3, [r0], #4
 800f1e8:	eba0 0009 	sub.w	r0, r0, r9
 800f1ec:	1080      	asrs	r0, r0, #2
 800f1ee:	0146      	lsls	r6, r0, #5
 800f1f0:	6120      	str	r0, [r4, #16]
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f000 fbaa 	bl	800f94c <__hi0bits>
 800f1f8:	1a30      	subs	r0, r6, r0
 800f1fa:	f8d8 6000 	ldr.w	r6, [r8]
 800f1fe:	42b0      	cmp	r0, r6
 800f200:	dd63      	ble.n	800f2ca <__gethex+0x286>
 800f202:	1b87      	subs	r7, r0, r6
 800f204:	4639      	mov	r1, r7
 800f206:	4620      	mov	r0, r4
 800f208:	f000 ff44 	bl	8010094 <__any_on>
 800f20c:	4682      	mov	sl, r0
 800f20e:	b1a8      	cbz	r0, 800f23c <__gethex+0x1f8>
 800f210:	1e7b      	subs	r3, r7, #1
 800f212:	1159      	asrs	r1, r3, #5
 800f214:	f003 021f 	and.w	r2, r3, #31
 800f218:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f21c:	f04f 0a01 	mov.w	sl, #1
 800f220:	fa0a f202 	lsl.w	r2, sl, r2
 800f224:	420a      	tst	r2, r1
 800f226:	d009      	beq.n	800f23c <__gethex+0x1f8>
 800f228:	4553      	cmp	r3, sl
 800f22a:	dd05      	ble.n	800f238 <__gethex+0x1f4>
 800f22c:	1eb9      	subs	r1, r7, #2
 800f22e:	4620      	mov	r0, r4
 800f230:	f000 ff30 	bl	8010094 <__any_on>
 800f234:	2800      	cmp	r0, #0
 800f236:	d145      	bne.n	800f2c4 <__gethex+0x280>
 800f238:	f04f 0a02 	mov.w	sl, #2
 800f23c:	4639      	mov	r1, r7
 800f23e:	4620      	mov	r0, r4
 800f240:	f7ff fe99 	bl	800ef76 <rshift>
 800f244:	443d      	add	r5, r7
 800f246:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f24a:	42ab      	cmp	r3, r5
 800f24c:	da4c      	bge.n	800f2e8 <__gethex+0x2a4>
 800f24e:	ee18 0a10 	vmov	r0, s16
 800f252:	4621      	mov	r1, r4
 800f254:	f000 fac4 	bl	800f7e0 <_Bfree>
 800f258:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f25a:	2300      	movs	r3, #0
 800f25c:	6013      	str	r3, [r2, #0]
 800f25e:	27a3      	movs	r7, #163	; 0xa3
 800f260:	e785      	b.n	800f16e <__gethex+0x12a>
 800f262:	1e73      	subs	r3, r6, #1
 800f264:	9a05      	ldr	r2, [sp, #20]
 800f266:	9303      	str	r3, [sp, #12]
 800f268:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f26c:	4293      	cmp	r3, r2
 800f26e:	d019      	beq.n	800f2a4 <__gethex+0x260>
 800f270:	f1bb 0f20 	cmp.w	fp, #32
 800f274:	d107      	bne.n	800f286 <__gethex+0x242>
 800f276:	9b02      	ldr	r3, [sp, #8]
 800f278:	9a00      	ldr	r2, [sp, #0]
 800f27a:	f843 2b04 	str.w	r2, [r3], #4
 800f27e:	9302      	str	r3, [sp, #8]
 800f280:	2300      	movs	r3, #0
 800f282:	9300      	str	r3, [sp, #0]
 800f284:	469b      	mov	fp, r3
 800f286:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f28a:	f7ff fec6 	bl	800f01a <__hexdig_fun>
 800f28e:	9b00      	ldr	r3, [sp, #0]
 800f290:	f000 000f 	and.w	r0, r0, #15
 800f294:	fa00 f00b 	lsl.w	r0, r0, fp
 800f298:	4303      	orrs	r3, r0
 800f29a:	9300      	str	r3, [sp, #0]
 800f29c:	f10b 0b04 	add.w	fp, fp, #4
 800f2a0:	9b03      	ldr	r3, [sp, #12]
 800f2a2:	e00d      	b.n	800f2c0 <__gethex+0x27c>
 800f2a4:	9b03      	ldr	r3, [sp, #12]
 800f2a6:	9a06      	ldr	r2, [sp, #24]
 800f2a8:	4413      	add	r3, r2
 800f2aa:	42bb      	cmp	r3, r7
 800f2ac:	d3e0      	bcc.n	800f270 <__gethex+0x22c>
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	9901      	ldr	r1, [sp, #4]
 800f2b2:	9307      	str	r3, [sp, #28]
 800f2b4:	4652      	mov	r2, sl
 800f2b6:	f001 fada 	bl	801086e <strncmp>
 800f2ba:	9b07      	ldr	r3, [sp, #28]
 800f2bc:	2800      	cmp	r0, #0
 800f2be:	d1d7      	bne.n	800f270 <__gethex+0x22c>
 800f2c0:	461e      	mov	r6, r3
 800f2c2:	e78b      	b.n	800f1dc <__gethex+0x198>
 800f2c4:	f04f 0a03 	mov.w	sl, #3
 800f2c8:	e7b8      	b.n	800f23c <__gethex+0x1f8>
 800f2ca:	da0a      	bge.n	800f2e2 <__gethex+0x29e>
 800f2cc:	1a37      	subs	r7, r6, r0
 800f2ce:	4621      	mov	r1, r4
 800f2d0:	ee18 0a10 	vmov	r0, s16
 800f2d4:	463a      	mov	r2, r7
 800f2d6:	f000 fc9f 	bl	800fc18 <__lshift>
 800f2da:	1bed      	subs	r5, r5, r7
 800f2dc:	4604      	mov	r4, r0
 800f2de:	f100 0914 	add.w	r9, r0, #20
 800f2e2:	f04f 0a00 	mov.w	sl, #0
 800f2e6:	e7ae      	b.n	800f246 <__gethex+0x202>
 800f2e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f2ec:	42a8      	cmp	r0, r5
 800f2ee:	dd72      	ble.n	800f3d6 <__gethex+0x392>
 800f2f0:	1b45      	subs	r5, r0, r5
 800f2f2:	42ae      	cmp	r6, r5
 800f2f4:	dc36      	bgt.n	800f364 <__gethex+0x320>
 800f2f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f2fa:	2b02      	cmp	r3, #2
 800f2fc:	d02a      	beq.n	800f354 <__gethex+0x310>
 800f2fe:	2b03      	cmp	r3, #3
 800f300:	d02c      	beq.n	800f35c <__gethex+0x318>
 800f302:	2b01      	cmp	r3, #1
 800f304:	d115      	bne.n	800f332 <__gethex+0x2ee>
 800f306:	42ae      	cmp	r6, r5
 800f308:	d113      	bne.n	800f332 <__gethex+0x2ee>
 800f30a:	2e01      	cmp	r6, #1
 800f30c:	d10b      	bne.n	800f326 <__gethex+0x2e2>
 800f30e:	9a04      	ldr	r2, [sp, #16]
 800f310:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f314:	6013      	str	r3, [r2, #0]
 800f316:	2301      	movs	r3, #1
 800f318:	6123      	str	r3, [r4, #16]
 800f31a:	f8c9 3000 	str.w	r3, [r9]
 800f31e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f320:	2762      	movs	r7, #98	; 0x62
 800f322:	601c      	str	r4, [r3, #0]
 800f324:	e723      	b.n	800f16e <__gethex+0x12a>
 800f326:	1e71      	subs	r1, r6, #1
 800f328:	4620      	mov	r0, r4
 800f32a:	f000 feb3 	bl	8010094 <__any_on>
 800f32e:	2800      	cmp	r0, #0
 800f330:	d1ed      	bne.n	800f30e <__gethex+0x2ca>
 800f332:	ee18 0a10 	vmov	r0, s16
 800f336:	4621      	mov	r1, r4
 800f338:	f000 fa52 	bl	800f7e0 <_Bfree>
 800f33c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f33e:	2300      	movs	r3, #0
 800f340:	6013      	str	r3, [r2, #0]
 800f342:	2750      	movs	r7, #80	; 0x50
 800f344:	e713      	b.n	800f16e <__gethex+0x12a>
 800f346:	bf00      	nop
 800f348:	080120bc 	.word	0x080120bc
 800f34c:	08011fdc 	.word	0x08011fdc
 800f350:	08012050 	.word	0x08012050
 800f354:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f356:	2b00      	cmp	r3, #0
 800f358:	d1eb      	bne.n	800f332 <__gethex+0x2ee>
 800f35a:	e7d8      	b.n	800f30e <__gethex+0x2ca>
 800f35c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d1d5      	bne.n	800f30e <__gethex+0x2ca>
 800f362:	e7e6      	b.n	800f332 <__gethex+0x2ee>
 800f364:	1e6f      	subs	r7, r5, #1
 800f366:	f1ba 0f00 	cmp.w	sl, #0
 800f36a:	d131      	bne.n	800f3d0 <__gethex+0x38c>
 800f36c:	b127      	cbz	r7, 800f378 <__gethex+0x334>
 800f36e:	4639      	mov	r1, r7
 800f370:	4620      	mov	r0, r4
 800f372:	f000 fe8f 	bl	8010094 <__any_on>
 800f376:	4682      	mov	sl, r0
 800f378:	117b      	asrs	r3, r7, #5
 800f37a:	2101      	movs	r1, #1
 800f37c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f380:	f007 071f 	and.w	r7, r7, #31
 800f384:	fa01 f707 	lsl.w	r7, r1, r7
 800f388:	421f      	tst	r7, r3
 800f38a:	4629      	mov	r1, r5
 800f38c:	4620      	mov	r0, r4
 800f38e:	bf18      	it	ne
 800f390:	f04a 0a02 	orrne.w	sl, sl, #2
 800f394:	1b76      	subs	r6, r6, r5
 800f396:	f7ff fdee 	bl	800ef76 <rshift>
 800f39a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f39e:	2702      	movs	r7, #2
 800f3a0:	f1ba 0f00 	cmp.w	sl, #0
 800f3a4:	d048      	beq.n	800f438 <__gethex+0x3f4>
 800f3a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f3aa:	2b02      	cmp	r3, #2
 800f3ac:	d015      	beq.n	800f3da <__gethex+0x396>
 800f3ae:	2b03      	cmp	r3, #3
 800f3b0:	d017      	beq.n	800f3e2 <__gethex+0x39e>
 800f3b2:	2b01      	cmp	r3, #1
 800f3b4:	d109      	bne.n	800f3ca <__gethex+0x386>
 800f3b6:	f01a 0f02 	tst.w	sl, #2
 800f3ba:	d006      	beq.n	800f3ca <__gethex+0x386>
 800f3bc:	f8d9 0000 	ldr.w	r0, [r9]
 800f3c0:	ea4a 0a00 	orr.w	sl, sl, r0
 800f3c4:	f01a 0f01 	tst.w	sl, #1
 800f3c8:	d10e      	bne.n	800f3e8 <__gethex+0x3a4>
 800f3ca:	f047 0710 	orr.w	r7, r7, #16
 800f3ce:	e033      	b.n	800f438 <__gethex+0x3f4>
 800f3d0:	f04f 0a01 	mov.w	sl, #1
 800f3d4:	e7d0      	b.n	800f378 <__gethex+0x334>
 800f3d6:	2701      	movs	r7, #1
 800f3d8:	e7e2      	b.n	800f3a0 <__gethex+0x35c>
 800f3da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f3dc:	f1c3 0301 	rsb	r3, r3, #1
 800f3e0:	9315      	str	r3, [sp, #84]	; 0x54
 800f3e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d0f0      	beq.n	800f3ca <__gethex+0x386>
 800f3e8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f3ec:	f104 0314 	add.w	r3, r4, #20
 800f3f0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f3f4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f3f8:	f04f 0c00 	mov.w	ip, #0
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800f402:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f406:	d01c      	beq.n	800f442 <__gethex+0x3fe>
 800f408:	3201      	adds	r2, #1
 800f40a:	6002      	str	r2, [r0, #0]
 800f40c:	2f02      	cmp	r7, #2
 800f40e:	f104 0314 	add.w	r3, r4, #20
 800f412:	d13f      	bne.n	800f494 <__gethex+0x450>
 800f414:	f8d8 2000 	ldr.w	r2, [r8]
 800f418:	3a01      	subs	r2, #1
 800f41a:	42b2      	cmp	r2, r6
 800f41c:	d10a      	bne.n	800f434 <__gethex+0x3f0>
 800f41e:	1171      	asrs	r1, r6, #5
 800f420:	2201      	movs	r2, #1
 800f422:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f426:	f006 061f 	and.w	r6, r6, #31
 800f42a:	fa02 f606 	lsl.w	r6, r2, r6
 800f42e:	421e      	tst	r6, r3
 800f430:	bf18      	it	ne
 800f432:	4617      	movne	r7, r2
 800f434:	f047 0720 	orr.w	r7, r7, #32
 800f438:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f43a:	601c      	str	r4, [r3, #0]
 800f43c:	9b04      	ldr	r3, [sp, #16]
 800f43e:	601d      	str	r5, [r3, #0]
 800f440:	e695      	b.n	800f16e <__gethex+0x12a>
 800f442:	4299      	cmp	r1, r3
 800f444:	f843 cc04 	str.w	ip, [r3, #-4]
 800f448:	d8d8      	bhi.n	800f3fc <__gethex+0x3b8>
 800f44a:	68a3      	ldr	r3, [r4, #8]
 800f44c:	459b      	cmp	fp, r3
 800f44e:	db19      	blt.n	800f484 <__gethex+0x440>
 800f450:	6861      	ldr	r1, [r4, #4]
 800f452:	ee18 0a10 	vmov	r0, s16
 800f456:	3101      	adds	r1, #1
 800f458:	f000 f982 	bl	800f760 <_Balloc>
 800f45c:	4681      	mov	r9, r0
 800f45e:	b918      	cbnz	r0, 800f468 <__gethex+0x424>
 800f460:	4b1a      	ldr	r3, [pc, #104]	; (800f4cc <__gethex+0x488>)
 800f462:	4602      	mov	r2, r0
 800f464:	2184      	movs	r1, #132	; 0x84
 800f466:	e6a8      	b.n	800f1ba <__gethex+0x176>
 800f468:	6922      	ldr	r2, [r4, #16]
 800f46a:	3202      	adds	r2, #2
 800f46c:	f104 010c 	add.w	r1, r4, #12
 800f470:	0092      	lsls	r2, r2, #2
 800f472:	300c      	adds	r0, #12
 800f474:	f7fd f8a0 	bl	800c5b8 <memcpy>
 800f478:	4621      	mov	r1, r4
 800f47a:	ee18 0a10 	vmov	r0, s16
 800f47e:	f000 f9af 	bl	800f7e0 <_Bfree>
 800f482:	464c      	mov	r4, r9
 800f484:	6923      	ldr	r3, [r4, #16]
 800f486:	1c5a      	adds	r2, r3, #1
 800f488:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f48c:	6122      	str	r2, [r4, #16]
 800f48e:	2201      	movs	r2, #1
 800f490:	615a      	str	r2, [r3, #20]
 800f492:	e7bb      	b.n	800f40c <__gethex+0x3c8>
 800f494:	6922      	ldr	r2, [r4, #16]
 800f496:	455a      	cmp	r2, fp
 800f498:	dd0b      	ble.n	800f4b2 <__gethex+0x46e>
 800f49a:	2101      	movs	r1, #1
 800f49c:	4620      	mov	r0, r4
 800f49e:	f7ff fd6a 	bl	800ef76 <rshift>
 800f4a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f4a6:	3501      	adds	r5, #1
 800f4a8:	42ab      	cmp	r3, r5
 800f4aa:	f6ff aed0 	blt.w	800f24e <__gethex+0x20a>
 800f4ae:	2701      	movs	r7, #1
 800f4b0:	e7c0      	b.n	800f434 <__gethex+0x3f0>
 800f4b2:	f016 061f 	ands.w	r6, r6, #31
 800f4b6:	d0fa      	beq.n	800f4ae <__gethex+0x46a>
 800f4b8:	449a      	add	sl, r3
 800f4ba:	f1c6 0620 	rsb	r6, r6, #32
 800f4be:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f4c2:	f000 fa43 	bl	800f94c <__hi0bits>
 800f4c6:	42b0      	cmp	r0, r6
 800f4c8:	dbe7      	blt.n	800f49a <__gethex+0x456>
 800f4ca:	e7f0      	b.n	800f4ae <__gethex+0x46a>
 800f4cc:	08011fdc 	.word	0x08011fdc

0800f4d0 <L_shift>:
 800f4d0:	f1c2 0208 	rsb	r2, r2, #8
 800f4d4:	0092      	lsls	r2, r2, #2
 800f4d6:	b570      	push	{r4, r5, r6, lr}
 800f4d8:	f1c2 0620 	rsb	r6, r2, #32
 800f4dc:	6843      	ldr	r3, [r0, #4]
 800f4de:	6804      	ldr	r4, [r0, #0]
 800f4e0:	fa03 f506 	lsl.w	r5, r3, r6
 800f4e4:	432c      	orrs	r4, r5
 800f4e6:	40d3      	lsrs	r3, r2
 800f4e8:	6004      	str	r4, [r0, #0]
 800f4ea:	f840 3f04 	str.w	r3, [r0, #4]!
 800f4ee:	4288      	cmp	r0, r1
 800f4f0:	d3f4      	bcc.n	800f4dc <L_shift+0xc>
 800f4f2:	bd70      	pop	{r4, r5, r6, pc}

0800f4f4 <__match>:
 800f4f4:	b530      	push	{r4, r5, lr}
 800f4f6:	6803      	ldr	r3, [r0, #0]
 800f4f8:	3301      	adds	r3, #1
 800f4fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4fe:	b914      	cbnz	r4, 800f506 <__match+0x12>
 800f500:	6003      	str	r3, [r0, #0]
 800f502:	2001      	movs	r0, #1
 800f504:	bd30      	pop	{r4, r5, pc}
 800f506:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f50a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f50e:	2d19      	cmp	r5, #25
 800f510:	bf98      	it	ls
 800f512:	3220      	addls	r2, #32
 800f514:	42a2      	cmp	r2, r4
 800f516:	d0f0      	beq.n	800f4fa <__match+0x6>
 800f518:	2000      	movs	r0, #0
 800f51a:	e7f3      	b.n	800f504 <__match+0x10>

0800f51c <__hexnan>:
 800f51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f520:	680b      	ldr	r3, [r1, #0]
 800f522:	6801      	ldr	r1, [r0, #0]
 800f524:	115e      	asrs	r6, r3, #5
 800f526:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f52a:	f013 031f 	ands.w	r3, r3, #31
 800f52e:	b087      	sub	sp, #28
 800f530:	bf18      	it	ne
 800f532:	3604      	addne	r6, #4
 800f534:	2500      	movs	r5, #0
 800f536:	1f37      	subs	r7, r6, #4
 800f538:	4682      	mov	sl, r0
 800f53a:	4690      	mov	r8, r2
 800f53c:	9301      	str	r3, [sp, #4]
 800f53e:	f846 5c04 	str.w	r5, [r6, #-4]
 800f542:	46b9      	mov	r9, r7
 800f544:	463c      	mov	r4, r7
 800f546:	9502      	str	r5, [sp, #8]
 800f548:	46ab      	mov	fp, r5
 800f54a:	784a      	ldrb	r2, [r1, #1]
 800f54c:	1c4b      	adds	r3, r1, #1
 800f54e:	9303      	str	r3, [sp, #12]
 800f550:	b342      	cbz	r2, 800f5a4 <__hexnan+0x88>
 800f552:	4610      	mov	r0, r2
 800f554:	9105      	str	r1, [sp, #20]
 800f556:	9204      	str	r2, [sp, #16]
 800f558:	f7ff fd5f 	bl	800f01a <__hexdig_fun>
 800f55c:	2800      	cmp	r0, #0
 800f55e:	d14f      	bne.n	800f600 <__hexnan+0xe4>
 800f560:	9a04      	ldr	r2, [sp, #16]
 800f562:	9905      	ldr	r1, [sp, #20]
 800f564:	2a20      	cmp	r2, #32
 800f566:	d818      	bhi.n	800f59a <__hexnan+0x7e>
 800f568:	9b02      	ldr	r3, [sp, #8]
 800f56a:	459b      	cmp	fp, r3
 800f56c:	dd13      	ble.n	800f596 <__hexnan+0x7a>
 800f56e:	454c      	cmp	r4, r9
 800f570:	d206      	bcs.n	800f580 <__hexnan+0x64>
 800f572:	2d07      	cmp	r5, #7
 800f574:	dc04      	bgt.n	800f580 <__hexnan+0x64>
 800f576:	462a      	mov	r2, r5
 800f578:	4649      	mov	r1, r9
 800f57a:	4620      	mov	r0, r4
 800f57c:	f7ff ffa8 	bl	800f4d0 <L_shift>
 800f580:	4544      	cmp	r4, r8
 800f582:	d950      	bls.n	800f626 <__hexnan+0x10a>
 800f584:	2300      	movs	r3, #0
 800f586:	f1a4 0904 	sub.w	r9, r4, #4
 800f58a:	f844 3c04 	str.w	r3, [r4, #-4]
 800f58e:	f8cd b008 	str.w	fp, [sp, #8]
 800f592:	464c      	mov	r4, r9
 800f594:	461d      	mov	r5, r3
 800f596:	9903      	ldr	r1, [sp, #12]
 800f598:	e7d7      	b.n	800f54a <__hexnan+0x2e>
 800f59a:	2a29      	cmp	r2, #41	; 0x29
 800f59c:	d156      	bne.n	800f64c <__hexnan+0x130>
 800f59e:	3102      	adds	r1, #2
 800f5a0:	f8ca 1000 	str.w	r1, [sl]
 800f5a4:	f1bb 0f00 	cmp.w	fp, #0
 800f5a8:	d050      	beq.n	800f64c <__hexnan+0x130>
 800f5aa:	454c      	cmp	r4, r9
 800f5ac:	d206      	bcs.n	800f5bc <__hexnan+0xa0>
 800f5ae:	2d07      	cmp	r5, #7
 800f5b0:	dc04      	bgt.n	800f5bc <__hexnan+0xa0>
 800f5b2:	462a      	mov	r2, r5
 800f5b4:	4649      	mov	r1, r9
 800f5b6:	4620      	mov	r0, r4
 800f5b8:	f7ff ff8a 	bl	800f4d0 <L_shift>
 800f5bc:	4544      	cmp	r4, r8
 800f5be:	d934      	bls.n	800f62a <__hexnan+0x10e>
 800f5c0:	f1a8 0204 	sub.w	r2, r8, #4
 800f5c4:	4623      	mov	r3, r4
 800f5c6:	f853 1b04 	ldr.w	r1, [r3], #4
 800f5ca:	f842 1f04 	str.w	r1, [r2, #4]!
 800f5ce:	429f      	cmp	r7, r3
 800f5d0:	d2f9      	bcs.n	800f5c6 <__hexnan+0xaa>
 800f5d2:	1b3b      	subs	r3, r7, r4
 800f5d4:	f023 0303 	bic.w	r3, r3, #3
 800f5d8:	3304      	adds	r3, #4
 800f5da:	3401      	adds	r4, #1
 800f5dc:	3e03      	subs	r6, #3
 800f5de:	42b4      	cmp	r4, r6
 800f5e0:	bf88      	it	hi
 800f5e2:	2304      	movhi	r3, #4
 800f5e4:	4443      	add	r3, r8
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	f843 2b04 	str.w	r2, [r3], #4
 800f5ec:	429f      	cmp	r7, r3
 800f5ee:	d2fb      	bcs.n	800f5e8 <__hexnan+0xcc>
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	b91b      	cbnz	r3, 800f5fc <__hexnan+0xe0>
 800f5f4:	4547      	cmp	r7, r8
 800f5f6:	d127      	bne.n	800f648 <__hexnan+0x12c>
 800f5f8:	2301      	movs	r3, #1
 800f5fa:	603b      	str	r3, [r7, #0]
 800f5fc:	2005      	movs	r0, #5
 800f5fe:	e026      	b.n	800f64e <__hexnan+0x132>
 800f600:	3501      	adds	r5, #1
 800f602:	2d08      	cmp	r5, #8
 800f604:	f10b 0b01 	add.w	fp, fp, #1
 800f608:	dd06      	ble.n	800f618 <__hexnan+0xfc>
 800f60a:	4544      	cmp	r4, r8
 800f60c:	d9c3      	bls.n	800f596 <__hexnan+0x7a>
 800f60e:	2300      	movs	r3, #0
 800f610:	f844 3c04 	str.w	r3, [r4, #-4]
 800f614:	2501      	movs	r5, #1
 800f616:	3c04      	subs	r4, #4
 800f618:	6822      	ldr	r2, [r4, #0]
 800f61a:	f000 000f 	and.w	r0, r0, #15
 800f61e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f622:	6022      	str	r2, [r4, #0]
 800f624:	e7b7      	b.n	800f596 <__hexnan+0x7a>
 800f626:	2508      	movs	r5, #8
 800f628:	e7b5      	b.n	800f596 <__hexnan+0x7a>
 800f62a:	9b01      	ldr	r3, [sp, #4]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d0df      	beq.n	800f5f0 <__hexnan+0xd4>
 800f630:	f04f 32ff 	mov.w	r2, #4294967295
 800f634:	f1c3 0320 	rsb	r3, r3, #32
 800f638:	fa22 f303 	lsr.w	r3, r2, r3
 800f63c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f640:	401a      	ands	r2, r3
 800f642:	f846 2c04 	str.w	r2, [r6, #-4]
 800f646:	e7d3      	b.n	800f5f0 <__hexnan+0xd4>
 800f648:	3f04      	subs	r7, #4
 800f64a:	e7d1      	b.n	800f5f0 <__hexnan+0xd4>
 800f64c:	2004      	movs	r0, #4
 800f64e:	b007      	add	sp, #28
 800f650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f654 <_localeconv_r>:
 800f654:	4800      	ldr	r0, [pc, #0]	; (800f658 <_localeconv_r+0x4>)
 800f656:	4770      	bx	lr
 800f658:	200001a4 	.word	0x200001a4

0800f65c <__retarget_lock_init_recursive>:
 800f65c:	4770      	bx	lr

0800f65e <__retarget_lock_acquire_recursive>:
 800f65e:	4770      	bx	lr

0800f660 <__retarget_lock_release_recursive>:
 800f660:	4770      	bx	lr

0800f662 <__swhatbuf_r>:
 800f662:	b570      	push	{r4, r5, r6, lr}
 800f664:	460e      	mov	r6, r1
 800f666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f66a:	2900      	cmp	r1, #0
 800f66c:	b096      	sub	sp, #88	; 0x58
 800f66e:	4614      	mov	r4, r2
 800f670:	461d      	mov	r5, r3
 800f672:	da07      	bge.n	800f684 <__swhatbuf_r+0x22>
 800f674:	2300      	movs	r3, #0
 800f676:	602b      	str	r3, [r5, #0]
 800f678:	89b3      	ldrh	r3, [r6, #12]
 800f67a:	061a      	lsls	r2, r3, #24
 800f67c:	d410      	bmi.n	800f6a0 <__swhatbuf_r+0x3e>
 800f67e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f682:	e00e      	b.n	800f6a2 <__swhatbuf_r+0x40>
 800f684:	466a      	mov	r2, sp
 800f686:	f001 f963 	bl	8010950 <_fstat_r>
 800f68a:	2800      	cmp	r0, #0
 800f68c:	dbf2      	blt.n	800f674 <__swhatbuf_r+0x12>
 800f68e:	9a01      	ldr	r2, [sp, #4]
 800f690:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f694:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f698:	425a      	negs	r2, r3
 800f69a:	415a      	adcs	r2, r3
 800f69c:	602a      	str	r2, [r5, #0]
 800f69e:	e7ee      	b.n	800f67e <__swhatbuf_r+0x1c>
 800f6a0:	2340      	movs	r3, #64	; 0x40
 800f6a2:	2000      	movs	r0, #0
 800f6a4:	6023      	str	r3, [r4, #0]
 800f6a6:	b016      	add	sp, #88	; 0x58
 800f6a8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f6ac <__smakebuf_r>:
 800f6ac:	898b      	ldrh	r3, [r1, #12]
 800f6ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f6b0:	079d      	lsls	r5, r3, #30
 800f6b2:	4606      	mov	r6, r0
 800f6b4:	460c      	mov	r4, r1
 800f6b6:	d507      	bpl.n	800f6c8 <__smakebuf_r+0x1c>
 800f6b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f6bc:	6023      	str	r3, [r4, #0]
 800f6be:	6123      	str	r3, [r4, #16]
 800f6c0:	2301      	movs	r3, #1
 800f6c2:	6163      	str	r3, [r4, #20]
 800f6c4:	b002      	add	sp, #8
 800f6c6:	bd70      	pop	{r4, r5, r6, pc}
 800f6c8:	ab01      	add	r3, sp, #4
 800f6ca:	466a      	mov	r2, sp
 800f6cc:	f7ff ffc9 	bl	800f662 <__swhatbuf_r>
 800f6d0:	9900      	ldr	r1, [sp, #0]
 800f6d2:	4605      	mov	r5, r0
 800f6d4:	4630      	mov	r0, r6
 800f6d6:	f000 fd5d 	bl	8010194 <_malloc_r>
 800f6da:	b948      	cbnz	r0, 800f6f0 <__smakebuf_r+0x44>
 800f6dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6e0:	059a      	lsls	r2, r3, #22
 800f6e2:	d4ef      	bmi.n	800f6c4 <__smakebuf_r+0x18>
 800f6e4:	f023 0303 	bic.w	r3, r3, #3
 800f6e8:	f043 0302 	orr.w	r3, r3, #2
 800f6ec:	81a3      	strh	r3, [r4, #12]
 800f6ee:	e7e3      	b.n	800f6b8 <__smakebuf_r+0xc>
 800f6f0:	4b0d      	ldr	r3, [pc, #52]	; (800f728 <__smakebuf_r+0x7c>)
 800f6f2:	62b3      	str	r3, [r6, #40]	; 0x28
 800f6f4:	89a3      	ldrh	r3, [r4, #12]
 800f6f6:	6020      	str	r0, [r4, #0]
 800f6f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6fc:	81a3      	strh	r3, [r4, #12]
 800f6fe:	9b00      	ldr	r3, [sp, #0]
 800f700:	6163      	str	r3, [r4, #20]
 800f702:	9b01      	ldr	r3, [sp, #4]
 800f704:	6120      	str	r0, [r4, #16]
 800f706:	b15b      	cbz	r3, 800f720 <__smakebuf_r+0x74>
 800f708:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f70c:	4630      	mov	r0, r6
 800f70e:	f001 f931 	bl	8010974 <_isatty_r>
 800f712:	b128      	cbz	r0, 800f720 <__smakebuf_r+0x74>
 800f714:	89a3      	ldrh	r3, [r4, #12]
 800f716:	f023 0303 	bic.w	r3, r3, #3
 800f71a:	f043 0301 	orr.w	r3, r3, #1
 800f71e:	81a3      	strh	r3, [r4, #12]
 800f720:	89a0      	ldrh	r0, [r4, #12]
 800f722:	4305      	orrs	r5, r0
 800f724:	81a5      	strh	r5, [r4, #12]
 800f726:	e7cd      	b.n	800f6c4 <__smakebuf_r+0x18>
 800f728:	0800edd5 	.word	0x0800edd5

0800f72c <malloc>:
 800f72c:	4b02      	ldr	r3, [pc, #8]	; (800f738 <malloc+0xc>)
 800f72e:	4601      	mov	r1, r0
 800f730:	6818      	ldr	r0, [r3, #0]
 800f732:	f000 bd2f 	b.w	8010194 <_malloc_r>
 800f736:	bf00      	nop
 800f738:	2000004c 	.word	0x2000004c

0800f73c <__ascii_mbtowc>:
 800f73c:	b082      	sub	sp, #8
 800f73e:	b901      	cbnz	r1, 800f742 <__ascii_mbtowc+0x6>
 800f740:	a901      	add	r1, sp, #4
 800f742:	b142      	cbz	r2, 800f756 <__ascii_mbtowc+0x1a>
 800f744:	b14b      	cbz	r3, 800f75a <__ascii_mbtowc+0x1e>
 800f746:	7813      	ldrb	r3, [r2, #0]
 800f748:	600b      	str	r3, [r1, #0]
 800f74a:	7812      	ldrb	r2, [r2, #0]
 800f74c:	1e10      	subs	r0, r2, #0
 800f74e:	bf18      	it	ne
 800f750:	2001      	movne	r0, #1
 800f752:	b002      	add	sp, #8
 800f754:	4770      	bx	lr
 800f756:	4610      	mov	r0, r2
 800f758:	e7fb      	b.n	800f752 <__ascii_mbtowc+0x16>
 800f75a:	f06f 0001 	mvn.w	r0, #1
 800f75e:	e7f8      	b.n	800f752 <__ascii_mbtowc+0x16>

0800f760 <_Balloc>:
 800f760:	b570      	push	{r4, r5, r6, lr}
 800f762:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f764:	4604      	mov	r4, r0
 800f766:	460d      	mov	r5, r1
 800f768:	b976      	cbnz	r6, 800f788 <_Balloc+0x28>
 800f76a:	2010      	movs	r0, #16
 800f76c:	f7ff ffde 	bl	800f72c <malloc>
 800f770:	4602      	mov	r2, r0
 800f772:	6260      	str	r0, [r4, #36]	; 0x24
 800f774:	b920      	cbnz	r0, 800f780 <_Balloc+0x20>
 800f776:	4b18      	ldr	r3, [pc, #96]	; (800f7d8 <_Balloc+0x78>)
 800f778:	4818      	ldr	r0, [pc, #96]	; (800f7dc <_Balloc+0x7c>)
 800f77a:	2166      	movs	r1, #102	; 0x66
 800f77c:	f001 f8a8 	bl	80108d0 <__assert_func>
 800f780:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f784:	6006      	str	r6, [r0, #0]
 800f786:	60c6      	str	r6, [r0, #12]
 800f788:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f78a:	68f3      	ldr	r3, [r6, #12]
 800f78c:	b183      	cbz	r3, 800f7b0 <_Balloc+0x50>
 800f78e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f790:	68db      	ldr	r3, [r3, #12]
 800f792:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f796:	b9b8      	cbnz	r0, 800f7c8 <_Balloc+0x68>
 800f798:	2101      	movs	r1, #1
 800f79a:	fa01 f605 	lsl.w	r6, r1, r5
 800f79e:	1d72      	adds	r2, r6, #5
 800f7a0:	0092      	lsls	r2, r2, #2
 800f7a2:	4620      	mov	r0, r4
 800f7a4:	f000 fc97 	bl	80100d6 <_calloc_r>
 800f7a8:	b160      	cbz	r0, 800f7c4 <_Balloc+0x64>
 800f7aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f7ae:	e00e      	b.n	800f7ce <_Balloc+0x6e>
 800f7b0:	2221      	movs	r2, #33	; 0x21
 800f7b2:	2104      	movs	r1, #4
 800f7b4:	4620      	mov	r0, r4
 800f7b6:	f000 fc8e 	bl	80100d6 <_calloc_r>
 800f7ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f7bc:	60f0      	str	r0, [r6, #12]
 800f7be:	68db      	ldr	r3, [r3, #12]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d1e4      	bne.n	800f78e <_Balloc+0x2e>
 800f7c4:	2000      	movs	r0, #0
 800f7c6:	bd70      	pop	{r4, r5, r6, pc}
 800f7c8:	6802      	ldr	r2, [r0, #0]
 800f7ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f7d4:	e7f7      	b.n	800f7c6 <_Balloc+0x66>
 800f7d6:	bf00      	nop
 800f7d8:	08011f66 	.word	0x08011f66
 800f7dc:	080120d0 	.word	0x080120d0

0800f7e0 <_Bfree>:
 800f7e0:	b570      	push	{r4, r5, r6, lr}
 800f7e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f7e4:	4605      	mov	r5, r0
 800f7e6:	460c      	mov	r4, r1
 800f7e8:	b976      	cbnz	r6, 800f808 <_Bfree+0x28>
 800f7ea:	2010      	movs	r0, #16
 800f7ec:	f7ff ff9e 	bl	800f72c <malloc>
 800f7f0:	4602      	mov	r2, r0
 800f7f2:	6268      	str	r0, [r5, #36]	; 0x24
 800f7f4:	b920      	cbnz	r0, 800f800 <_Bfree+0x20>
 800f7f6:	4b09      	ldr	r3, [pc, #36]	; (800f81c <_Bfree+0x3c>)
 800f7f8:	4809      	ldr	r0, [pc, #36]	; (800f820 <_Bfree+0x40>)
 800f7fa:	218a      	movs	r1, #138	; 0x8a
 800f7fc:	f001 f868 	bl	80108d0 <__assert_func>
 800f800:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f804:	6006      	str	r6, [r0, #0]
 800f806:	60c6      	str	r6, [r0, #12]
 800f808:	b13c      	cbz	r4, 800f81a <_Bfree+0x3a>
 800f80a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f80c:	6862      	ldr	r2, [r4, #4]
 800f80e:	68db      	ldr	r3, [r3, #12]
 800f810:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f814:	6021      	str	r1, [r4, #0]
 800f816:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f81a:	bd70      	pop	{r4, r5, r6, pc}
 800f81c:	08011f66 	.word	0x08011f66
 800f820:	080120d0 	.word	0x080120d0

0800f824 <__multadd>:
 800f824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f828:	690e      	ldr	r6, [r1, #16]
 800f82a:	4607      	mov	r7, r0
 800f82c:	4698      	mov	r8, r3
 800f82e:	460c      	mov	r4, r1
 800f830:	f101 0014 	add.w	r0, r1, #20
 800f834:	2300      	movs	r3, #0
 800f836:	6805      	ldr	r5, [r0, #0]
 800f838:	b2a9      	uxth	r1, r5
 800f83a:	fb02 8101 	mla	r1, r2, r1, r8
 800f83e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f842:	0c2d      	lsrs	r5, r5, #16
 800f844:	fb02 c505 	mla	r5, r2, r5, ip
 800f848:	b289      	uxth	r1, r1
 800f84a:	3301      	adds	r3, #1
 800f84c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f850:	429e      	cmp	r6, r3
 800f852:	f840 1b04 	str.w	r1, [r0], #4
 800f856:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f85a:	dcec      	bgt.n	800f836 <__multadd+0x12>
 800f85c:	f1b8 0f00 	cmp.w	r8, #0
 800f860:	d022      	beq.n	800f8a8 <__multadd+0x84>
 800f862:	68a3      	ldr	r3, [r4, #8]
 800f864:	42b3      	cmp	r3, r6
 800f866:	dc19      	bgt.n	800f89c <__multadd+0x78>
 800f868:	6861      	ldr	r1, [r4, #4]
 800f86a:	4638      	mov	r0, r7
 800f86c:	3101      	adds	r1, #1
 800f86e:	f7ff ff77 	bl	800f760 <_Balloc>
 800f872:	4605      	mov	r5, r0
 800f874:	b928      	cbnz	r0, 800f882 <__multadd+0x5e>
 800f876:	4602      	mov	r2, r0
 800f878:	4b0d      	ldr	r3, [pc, #52]	; (800f8b0 <__multadd+0x8c>)
 800f87a:	480e      	ldr	r0, [pc, #56]	; (800f8b4 <__multadd+0x90>)
 800f87c:	21b5      	movs	r1, #181	; 0xb5
 800f87e:	f001 f827 	bl	80108d0 <__assert_func>
 800f882:	6922      	ldr	r2, [r4, #16]
 800f884:	3202      	adds	r2, #2
 800f886:	f104 010c 	add.w	r1, r4, #12
 800f88a:	0092      	lsls	r2, r2, #2
 800f88c:	300c      	adds	r0, #12
 800f88e:	f7fc fe93 	bl	800c5b8 <memcpy>
 800f892:	4621      	mov	r1, r4
 800f894:	4638      	mov	r0, r7
 800f896:	f7ff ffa3 	bl	800f7e0 <_Bfree>
 800f89a:	462c      	mov	r4, r5
 800f89c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f8a0:	3601      	adds	r6, #1
 800f8a2:	f8c3 8014 	str.w	r8, [r3, #20]
 800f8a6:	6126      	str	r6, [r4, #16]
 800f8a8:	4620      	mov	r0, r4
 800f8aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8ae:	bf00      	nop
 800f8b0:	08011fdc 	.word	0x08011fdc
 800f8b4:	080120d0 	.word	0x080120d0

0800f8b8 <__s2b>:
 800f8b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8bc:	460c      	mov	r4, r1
 800f8be:	4615      	mov	r5, r2
 800f8c0:	461f      	mov	r7, r3
 800f8c2:	2209      	movs	r2, #9
 800f8c4:	3308      	adds	r3, #8
 800f8c6:	4606      	mov	r6, r0
 800f8c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800f8cc:	2100      	movs	r1, #0
 800f8ce:	2201      	movs	r2, #1
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	db09      	blt.n	800f8e8 <__s2b+0x30>
 800f8d4:	4630      	mov	r0, r6
 800f8d6:	f7ff ff43 	bl	800f760 <_Balloc>
 800f8da:	b940      	cbnz	r0, 800f8ee <__s2b+0x36>
 800f8dc:	4602      	mov	r2, r0
 800f8de:	4b19      	ldr	r3, [pc, #100]	; (800f944 <__s2b+0x8c>)
 800f8e0:	4819      	ldr	r0, [pc, #100]	; (800f948 <__s2b+0x90>)
 800f8e2:	21ce      	movs	r1, #206	; 0xce
 800f8e4:	f000 fff4 	bl	80108d0 <__assert_func>
 800f8e8:	0052      	lsls	r2, r2, #1
 800f8ea:	3101      	adds	r1, #1
 800f8ec:	e7f0      	b.n	800f8d0 <__s2b+0x18>
 800f8ee:	9b08      	ldr	r3, [sp, #32]
 800f8f0:	6143      	str	r3, [r0, #20]
 800f8f2:	2d09      	cmp	r5, #9
 800f8f4:	f04f 0301 	mov.w	r3, #1
 800f8f8:	6103      	str	r3, [r0, #16]
 800f8fa:	dd16      	ble.n	800f92a <__s2b+0x72>
 800f8fc:	f104 0909 	add.w	r9, r4, #9
 800f900:	46c8      	mov	r8, r9
 800f902:	442c      	add	r4, r5
 800f904:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f908:	4601      	mov	r1, r0
 800f90a:	3b30      	subs	r3, #48	; 0x30
 800f90c:	220a      	movs	r2, #10
 800f90e:	4630      	mov	r0, r6
 800f910:	f7ff ff88 	bl	800f824 <__multadd>
 800f914:	45a0      	cmp	r8, r4
 800f916:	d1f5      	bne.n	800f904 <__s2b+0x4c>
 800f918:	f1a5 0408 	sub.w	r4, r5, #8
 800f91c:	444c      	add	r4, r9
 800f91e:	1b2d      	subs	r5, r5, r4
 800f920:	1963      	adds	r3, r4, r5
 800f922:	42bb      	cmp	r3, r7
 800f924:	db04      	blt.n	800f930 <__s2b+0x78>
 800f926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f92a:	340a      	adds	r4, #10
 800f92c:	2509      	movs	r5, #9
 800f92e:	e7f6      	b.n	800f91e <__s2b+0x66>
 800f930:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f934:	4601      	mov	r1, r0
 800f936:	3b30      	subs	r3, #48	; 0x30
 800f938:	220a      	movs	r2, #10
 800f93a:	4630      	mov	r0, r6
 800f93c:	f7ff ff72 	bl	800f824 <__multadd>
 800f940:	e7ee      	b.n	800f920 <__s2b+0x68>
 800f942:	bf00      	nop
 800f944:	08011fdc 	.word	0x08011fdc
 800f948:	080120d0 	.word	0x080120d0

0800f94c <__hi0bits>:
 800f94c:	0c03      	lsrs	r3, r0, #16
 800f94e:	041b      	lsls	r3, r3, #16
 800f950:	b9d3      	cbnz	r3, 800f988 <__hi0bits+0x3c>
 800f952:	0400      	lsls	r0, r0, #16
 800f954:	2310      	movs	r3, #16
 800f956:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f95a:	bf04      	itt	eq
 800f95c:	0200      	lsleq	r0, r0, #8
 800f95e:	3308      	addeq	r3, #8
 800f960:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f964:	bf04      	itt	eq
 800f966:	0100      	lsleq	r0, r0, #4
 800f968:	3304      	addeq	r3, #4
 800f96a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f96e:	bf04      	itt	eq
 800f970:	0080      	lsleq	r0, r0, #2
 800f972:	3302      	addeq	r3, #2
 800f974:	2800      	cmp	r0, #0
 800f976:	db05      	blt.n	800f984 <__hi0bits+0x38>
 800f978:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f97c:	f103 0301 	add.w	r3, r3, #1
 800f980:	bf08      	it	eq
 800f982:	2320      	moveq	r3, #32
 800f984:	4618      	mov	r0, r3
 800f986:	4770      	bx	lr
 800f988:	2300      	movs	r3, #0
 800f98a:	e7e4      	b.n	800f956 <__hi0bits+0xa>

0800f98c <__lo0bits>:
 800f98c:	6803      	ldr	r3, [r0, #0]
 800f98e:	f013 0207 	ands.w	r2, r3, #7
 800f992:	4601      	mov	r1, r0
 800f994:	d00b      	beq.n	800f9ae <__lo0bits+0x22>
 800f996:	07da      	lsls	r2, r3, #31
 800f998:	d424      	bmi.n	800f9e4 <__lo0bits+0x58>
 800f99a:	0798      	lsls	r0, r3, #30
 800f99c:	bf49      	itett	mi
 800f99e:	085b      	lsrmi	r3, r3, #1
 800f9a0:	089b      	lsrpl	r3, r3, #2
 800f9a2:	2001      	movmi	r0, #1
 800f9a4:	600b      	strmi	r3, [r1, #0]
 800f9a6:	bf5c      	itt	pl
 800f9a8:	600b      	strpl	r3, [r1, #0]
 800f9aa:	2002      	movpl	r0, #2
 800f9ac:	4770      	bx	lr
 800f9ae:	b298      	uxth	r0, r3
 800f9b0:	b9b0      	cbnz	r0, 800f9e0 <__lo0bits+0x54>
 800f9b2:	0c1b      	lsrs	r3, r3, #16
 800f9b4:	2010      	movs	r0, #16
 800f9b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f9ba:	bf04      	itt	eq
 800f9bc:	0a1b      	lsreq	r3, r3, #8
 800f9be:	3008      	addeq	r0, #8
 800f9c0:	071a      	lsls	r2, r3, #28
 800f9c2:	bf04      	itt	eq
 800f9c4:	091b      	lsreq	r3, r3, #4
 800f9c6:	3004      	addeq	r0, #4
 800f9c8:	079a      	lsls	r2, r3, #30
 800f9ca:	bf04      	itt	eq
 800f9cc:	089b      	lsreq	r3, r3, #2
 800f9ce:	3002      	addeq	r0, #2
 800f9d0:	07da      	lsls	r2, r3, #31
 800f9d2:	d403      	bmi.n	800f9dc <__lo0bits+0x50>
 800f9d4:	085b      	lsrs	r3, r3, #1
 800f9d6:	f100 0001 	add.w	r0, r0, #1
 800f9da:	d005      	beq.n	800f9e8 <__lo0bits+0x5c>
 800f9dc:	600b      	str	r3, [r1, #0]
 800f9de:	4770      	bx	lr
 800f9e0:	4610      	mov	r0, r2
 800f9e2:	e7e8      	b.n	800f9b6 <__lo0bits+0x2a>
 800f9e4:	2000      	movs	r0, #0
 800f9e6:	4770      	bx	lr
 800f9e8:	2020      	movs	r0, #32
 800f9ea:	4770      	bx	lr

0800f9ec <__i2b>:
 800f9ec:	b510      	push	{r4, lr}
 800f9ee:	460c      	mov	r4, r1
 800f9f0:	2101      	movs	r1, #1
 800f9f2:	f7ff feb5 	bl	800f760 <_Balloc>
 800f9f6:	4602      	mov	r2, r0
 800f9f8:	b928      	cbnz	r0, 800fa06 <__i2b+0x1a>
 800f9fa:	4b05      	ldr	r3, [pc, #20]	; (800fa10 <__i2b+0x24>)
 800f9fc:	4805      	ldr	r0, [pc, #20]	; (800fa14 <__i2b+0x28>)
 800f9fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fa02:	f000 ff65 	bl	80108d0 <__assert_func>
 800fa06:	2301      	movs	r3, #1
 800fa08:	6144      	str	r4, [r0, #20]
 800fa0a:	6103      	str	r3, [r0, #16]
 800fa0c:	bd10      	pop	{r4, pc}
 800fa0e:	bf00      	nop
 800fa10:	08011fdc 	.word	0x08011fdc
 800fa14:	080120d0 	.word	0x080120d0

0800fa18 <__multiply>:
 800fa18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa1c:	4614      	mov	r4, r2
 800fa1e:	690a      	ldr	r2, [r1, #16]
 800fa20:	6923      	ldr	r3, [r4, #16]
 800fa22:	429a      	cmp	r2, r3
 800fa24:	bfb8      	it	lt
 800fa26:	460b      	movlt	r3, r1
 800fa28:	460d      	mov	r5, r1
 800fa2a:	bfbc      	itt	lt
 800fa2c:	4625      	movlt	r5, r4
 800fa2e:	461c      	movlt	r4, r3
 800fa30:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800fa34:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fa38:	68ab      	ldr	r3, [r5, #8]
 800fa3a:	6869      	ldr	r1, [r5, #4]
 800fa3c:	eb0a 0709 	add.w	r7, sl, r9
 800fa40:	42bb      	cmp	r3, r7
 800fa42:	b085      	sub	sp, #20
 800fa44:	bfb8      	it	lt
 800fa46:	3101      	addlt	r1, #1
 800fa48:	f7ff fe8a 	bl	800f760 <_Balloc>
 800fa4c:	b930      	cbnz	r0, 800fa5c <__multiply+0x44>
 800fa4e:	4602      	mov	r2, r0
 800fa50:	4b42      	ldr	r3, [pc, #264]	; (800fb5c <__multiply+0x144>)
 800fa52:	4843      	ldr	r0, [pc, #268]	; (800fb60 <__multiply+0x148>)
 800fa54:	f240 115d 	movw	r1, #349	; 0x15d
 800fa58:	f000 ff3a 	bl	80108d0 <__assert_func>
 800fa5c:	f100 0614 	add.w	r6, r0, #20
 800fa60:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800fa64:	4633      	mov	r3, r6
 800fa66:	2200      	movs	r2, #0
 800fa68:	4543      	cmp	r3, r8
 800fa6a:	d31e      	bcc.n	800faaa <__multiply+0x92>
 800fa6c:	f105 0c14 	add.w	ip, r5, #20
 800fa70:	f104 0314 	add.w	r3, r4, #20
 800fa74:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800fa78:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800fa7c:	9202      	str	r2, [sp, #8]
 800fa7e:	ebac 0205 	sub.w	r2, ip, r5
 800fa82:	3a15      	subs	r2, #21
 800fa84:	f022 0203 	bic.w	r2, r2, #3
 800fa88:	3204      	adds	r2, #4
 800fa8a:	f105 0115 	add.w	r1, r5, #21
 800fa8e:	458c      	cmp	ip, r1
 800fa90:	bf38      	it	cc
 800fa92:	2204      	movcc	r2, #4
 800fa94:	9201      	str	r2, [sp, #4]
 800fa96:	9a02      	ldr	r2, [sp, #8]
 800fa98:	9303      	str	r3, [sp, #12]
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d808      	bhi.n	800fab0 <__multiply+0x98>
 800fa9e:	2f00      	cmp	r7, #0
 800faa0:	dc55      	bgt.n	800fb4e <__multiply+0x136>
 800faa2:	6107      	str	r7, [r0, #16]
 800faa4:	b005      	add	sp, #20
 800faa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faaa:	f843 2b04 	str.w	r2, [r3], #4
 800faae:	e7db      	b.n	800fa68 <__multiply+0x50>
 800fab0:	f8b3 a000 	ldrh.w	sl, [r3]
 800fab4:	f1ba 0f00 	cmp.w	sl, #0
 800fab8:	d020      	beq.n	800fafc <__multiply+0xe4>
 800faba:	f105 0e14 	add.w	lr, r5, #20
 800fabe:	46b1      	mov	r9, r6
 800fac0:	2200      	movs	r2, #0
 800fac2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800fac6:	f8d9 b000 	ldr.w	fp, [r9]
 800faca:	b2a1      	uxth	r1, r4
 800facc:	fa1f fb8b 	uxth.w	fp, fp
 800fad0:	fb0a b101 	mla	r1, sl, r1, fp
 800fad4:	4411      	add	r1, r2
 800fad6:	f8d9 2000 	ldr.w	r2, [r9]
 800fada:	0c24      	lsrs	r4, r4, #16
 800fadc:	0c12      	lsrs	r2, r2, #16
 800fade:	fb0a 2404 	mla	r4, sl, r4, r2
 800fae2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800fae6:	b289      	uxth	r1, r1
 800fae8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800faec:	45f4      	cmp	ip, lr
 800faee:	f849 1b04 	str.w	r1, [r9], #4
 800faf2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800faf6:	d8e4      	bhi.n	800fac2 <__multiply+0xaa>
 800faf8:	9901      	ldr	r1, [sp, #4]
 800fafa:	5072      	str	r2, [r6, r1]
 800fafc:	9a03      	ldr	r2, [sp, #12]
 800fafe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fb02:	3304      	adds	r3, #4
 800fb04:	f1b9 0f00 	cmp.w	r9, #0
 800fb08:	d01f      	beq.n	800fb4a <__multiply+0x132>
 800fb0a:	6834      	ldr	r4, [r6, #0]
 800fb0c:	f105 0114 	add.w	r1, r5, #20
 800fb10:	46b6      	mov	lr, r6
 800fb12:	f04f 0a00 	mov.w	sl, #0
 800fb16:	880a      	ldrh	r2, [r1, #0]
 800fb18:	f8be b002 	ldrh.w	fp, [lr, #2]
 800fb1c:	fb09 b202 	mla	r2, r9, r2, fp
 800fb20:	4492      	add	sl, r2
 800fb22:	b2a4      	uxth	r4, r4
 800fb24:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800fb28:	f84e 4b04 	str.w	r4, [lr], #4
 800fb2c:	f851 4b04 	ldr.w	r4, [r1], #4
 800fb30:	f8be 2000 	ldrh.w	r2, [lr]
 800fb34:	0c24      	lsrs	r4, r4, #16
 800fb36:	fb09 2404 	mla	r4, r9, r4, r2
 800fb3a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800fb3e:	458c      	cmp	ip, r1
 800fb40:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fb44:	d8e7      	bhi.n	800fb16 <__multiply+0xfe>
 800fb46:	9a01      	ldr	r2, [sp, #4]
 800fb48:	50b4      	str	r4, [r6, r2]
 800fb4a:	3604      	adds	r6, #4
 800fb4c:	e7a3      	b.n	800fa96 <__multiply+0x7e>
 800fb4e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d1a5      	bne.n	800faa2 <__multiply+0x8a>
 800fb56:	3f01      	subs	r7, #1
 800fb58:	e7a1      	b.n	800fa9e <__multiply+0x86>
 800fb5a:	bf00      	nop
 800fb5c:	08011fdc 	.word	0x08011fdc
 800fb60:	080120d0 	.word	0x080120d0

0800fb64 <__pow5mult>:
 800fb64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb68:	4615      	mov	r5, r2
 800fb6a:	f012 0203 	ands.w	r2, r2, #3
 800fb6e:	4606      	mov	r6, r0
 800fb70:	460f      	mov	r7, r1
 800fb72:	d007      	beq.n	800fb84 <__pow5mult+0x20>
 800fb74:	4c25      	ldr	r4, [pc, #148]	; (800fc0c <__pow5mult+0xa8>)
 800fb76:	3a01      	subs	r2, #1
 800fb78:	2300      	movs	r3, #0
 800fb7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fb7e:	f7ff fe51 	bl	800f824 <__multadd>
 800fb82:	4607      	mov	r7, r0
 800fb84:	10ad      	asrs	r5, r5, #2
 800fb86:	d03d      	beq.n	800fc04 <__pow5mult+0xa0>
 800fb88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fb8a:	b97c      	cbnz	r4, 800fbac <__pow5mult+0x48>
 800fb8c:	2010      	movs	r0, #16
 800fb8e:	f7ff fdcd 	bl	800f72c <malloc>
 800fb92:	4602      	mov	r2, r0
 800fb94:	6270      	str	r0, [r6, #36]	; 0x24
 800fb96:	b928      	cbnz	r0, 800fba4 <__pow5mult+0x40>
 800fb98:	4b1d      	ldr	r3, [pc, #116]	; (800fc10 <__pow5mult+0xac>)
 800fb9a:	481e      	ldr	r0, [pc, #120]	; (800fc14 <__pow5mult+0xb0>)
 800fb9c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fba0:	f000 fe96 	bl	80108d0 <__assert_func>
 800fba4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fba8:	6004      	str	r4, [r0, #0]
 800fbaa:	60c4      	str	r4, [r0, #12]
 800fbac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fbb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fbb4:	b94c      	cbnz	r4, 800fbca <__pow5mult+0x66>
 800fbb6:	f240 2171 	movw	r1, #625	; 0x271
 800fbba:	4630      	mov	r0, r6
 800fbbc:	f7ff ff16 	bl	800f9ec <__i2b>
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	f8c8 0008 	str.w	r0, [r8, #8]
 800fbc6:	4604      	mov	r4, r0
 800fbc8:	6003      	str	r3, [r0, #0]
 800fbca:	f04f 0900 	mov.w	r9, #0
 800fbce:	07eb      	lsls	r3, r5, #31
 800fbd0:	d50a      	bpl.n	800fbe8 <__pow5mult+0x84>
 800fbd2:	4639      	mov	r1, r7
 800fbd4:	4622      	mov	r2, r4
 800fbd6:	4630      	mov	r0, r6
 800fbd8:	f7ff ff1e 	bl	800fa18 <__multiply>
 800fbdc:	4639      	mov	r1, r7
 800fbde:	4680      	mov	r8, r0
 800fbe0:	4630      	mov	r0, r6
 800fbe2:	f7ff fdfd 	bl	800f7e0 <_Bfree>
 800fbe6:	4647      	mov	r7, r8
 800fbe8:	106d      	asrs	r5, r5, #1
 800fbea:	d00b      	beq.n	800fc04 <__pow5mult+0xa0>
 800fbec:	6820      	ldr	r0, [r4, #0]
 800fbee:	b938      	cbnz	r0, 800fc00 <__pow5mult+0x9c>
 800fbf0:	4622      	mov	r2, r4
 800fbf2:	4621      	mov	r1, r4
 800fbf4:	4630      	mov	r0, r6
 800fbf6:	f7ff ff0f 	bl	800fa18 <__multiply>
 800fbfa:	6020      	str	r0, [r4, #0]
 800fbfc:	f8c0 9000 	str.w	r9, [r0]
 800fc00:	4604      	mov	r4, r0
 800fc02:	e7e4      	b.n	800fbce <__pow5mult+0x6a>
 800fc04:	4638      	mov	r0, r7
 800fc06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc0a:	bf00      	nop
 800fc0c:	08012220 	.word	0x08012220
 800fc10:	08011f66 	.word	0x08011f66
 800fc14:	080120d0 	.word	0x080120d0

0800fc18 <__lshift>:
 800fc18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc1c:	460c      	mov	r4, r1
 800fc1e:	6849      	ldr	r1, [r1, #4]
 800fc20:	6923      	ldr	r3, [r4, #16]
 800fc22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fc26:	68a3      	ldr	r3, [r4, #8]
 800fc28:	4607      	mov	r7, r0
 800fc2a:	4691      	mov	r9, r2
 800fc2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fc30:	f108 0601 	add.w	r6, r8, #1
 800fc34:	42b3      	cmp	r3, r6
 800fc36:	db0b      	blt.n	800fc50 <__lshift+0x38>
 800fc38:	4638      	mov	r0, r7
 800fc3a:	f7ff fd91 	bl	800f760 <_Balloc>
 800fc3e:	4605      	mov	r5, r0
 800fc40:	b948      	cbnz	r0, 800fc56 <__lshift+0x3e>
 800fc42:	4602      	mov	r2, r0
 800fc44:	4b28      	ldr	r3, [pc, #160]	; (800fce8 <__lshift+0xd0>)
 800fc46:	4829      	ldr	r0, [pc, #164]	; (800fcec <__lshift+0xd4>)
 800fc48:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fc4c:	f000 fe40 	bl	80108d0 <__assert_func>
 800fc50:	3101      	adds	r1, #1
 800fc52:	005b      	lsls	r3, r3, #1
 800fc54:	e7ee      	b.n	800fc34 <__lshift+0x1c>
 800fc56:	2300      	movs	r3, #0
 800fc58:	f100 0114 	add.w	r1, r0, #20
 800fc5c:	f100 0210 	add.w	r2, r0, #16
 800fc60:	4618      	mov	r0, r3
 800fc62:	4553      	cmp	r3, sl
 800fc64:	db33      	blt.n	800fcce <__lshift+0xb6>
 800fc66:	6920      	ldr	r0, [r4, #16]
 800fc68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fc6c:	f104 0314 	add.w	r3, r4, #20
 800fc70:	f019 091f 	ands.w	r9, r9, #31
 800fc74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fc78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fc7c:	d02b      	beq.n	800fcd6 <__lshift+0xbe>
 800fc7e:	f1c9 0e20 	rsb	lr, r9, #32
 800fc82:	468a      	mov	sl, r1
 800fc84:	2200      	movs	r2, #0
 800fc86:	6818      	ldr	r0, [r3, #0]
 800fc88:	fa00 f009 	lsl.w	r0, r0, r9
 800fc8c:	4302      	orrs	r2, r0
 800fc8e:	f84a 2b04 	str.w	r2, [sl], #4
 800fc92:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc96:	459c      	cmp	ip, r3
 800fc98:	fa22 f20e 	lsr.w	r2, r2, lr
 800fc9c:	d8f3      	bhi.n	800fc86 <__lshift+0x6e>
 800fc9e:	ebac 0304 	sub.w	r3, ip, r4
 800fca2:	3b15      	subs	r3, #21
 800fca4:	f023 0303 	bic.w	r3, r3, #3
 800fca8:	3304      	adds	r3, #4
 800fcaa:	f104 0015 	add.w	r0, r4, #21
 800fcae:	4584      	cmp	ip, r0
 800fcb0:	bf38      	it	cc
 800fcb2:	2304      	movcc	r3, #4
 800fcb4:	50ca      	str	r2, [r1, r3]
 800fcb6:	b10a      	cbz	r2, 800fcbc <__lshift+0xa4>
 800fcb8:	f108 0602 	add.w	r6, r8, #2
 800fcbc:	3e01      	subs	r6, #1
 800fcbe:	4638      	mov	r0, r7
 800fcc0:	612e      	str	r6, [r5, #16]
 800fcc2:	4621      	mov	r1, r4
 800fcc4:	f7ff fd8c 	bl	800f7e0 <_Bfree>
 800fcc8:	4628      	mov	r0, r5
 800fcca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcce:	f842 0f04 	str.w	r0, [r2, #4]!
 800fcd2:	3301      	adds	r3, #1
 800fcd4:	e7c5      	b.n	800fc62 <__lshift+0x4a>
 800fcd6:	3904      	subs	r1, #4
 800fcd8:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcdc:	f841 2f04 	str.w	r2, [r1, #4]!
 800fce0:	459c      	cmp	ip, r3
 800fce2:	d8f9      	bhi.n	800fcd8 <__lshift+0xc0>
 800fce4:	e7ea      	b.n	800fcbc <__lshift+0xa4>
 800fce6:	bf00      	nop
 800fce8:	08011fdc 	.word	0x08011fdc
 800fcec:	080120d0 	.word	0x080120d0

0800fcf0 <__mcmp>:
 800fcf0:	b530      	push	{r4, r5, lr}
 800fcf2:	6902      	ldr	r2, [r0, #16]
 800fcf4:	690c      	ldr	r4, [r1, #16]
 800fcf6:	1b12      	subs	r2, r2, r4
 800fcf8:	d10e      	bne.n	800fd18 <__mcmp+0x28>
 800fcfa:	f100 0314 	add.w	r3, r0, #20
 800fcfe:	3114      	adds	r1, #20
 800fd00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fd04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fd08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fd0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fd10:	42a5      	cmp	r5, r4
 800fd12:	d003      	beq.n	800fd1c <__mcmp+0x2c>
 800fd14:	d305      	bcc.n	800fd22 <__mcmp+0x32>
 800fd16:	2201      	movs	r2, #1
 800fd18:	4610      	mov	r0, r2
 800fd1a:	bd30      	pop	{r4, r5, pc}
 800fd1c:	4283      	cmp	r3, r0
 800fd1e:	d3f3      	bcc.n	800fd08 <__mcmp+0x18>
 800fd20:	e7fa      	b.n	800fd18 <__mcmp+0x28>
 800fd22:	f04f 32ff 	mov.w	r2, #4294967295
 800fd26:	e7f7      	b.n	800fd18 <__mcmp+0x28>

0800fd28 <__mdiff>:
 800fd28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd2c:	460c      	mov	r4, r1
 800fd2e:	4606      	mov	r6, r0
 800fd30:	4611      	mov	r1, r2
 800fd32:	4620      	mov	r0, r4
 800fd34:	4617      	mov	r7, r2
 800fd36:	f7ff ffdb 	bl	800fcf0 <__mcmp>
 800fd3a:	1e05      	subs	r5, r0, #0
 800fd3c:	d110      	bne.n	800fd60 <__mdiff+0x38>
 800fd3e:	4629      	mov	r1, r5
 800fd40:	4630      	mov	r0, r6
 800fd42:	f7ff fd0d 	bl	800f760 <_Balloc>
 800fd46:	b930      	cbnz	r0, 800fd56 <__mdiff+0x2e>
 800fd48:	4b39      	ldr	r3, [pc, #228]	; (800fe30 <__mdiff+0x108>)
 800fd4a:	4602      	mov	r2, r0
 800fd4c:	f240 2132 	movw	r1, #562	; 0x232
 800fd50:	4838      	ldr	r0, [pc, #224]	; (800fe34 <__mdiff+0x10c>)
 800fd52:	f000 fdbd 	bl	80108d0 <__assert_func>
 800fd56:	2301      	movs	r3, #1
 800fd58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fd5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd60:	bfa4      	itt	ge
 800fd62:	463b      	movge	r3, r7
 800fd64:	4627      	movge	r7, r4
 800fd66:	4630      	mov	r0, r6
 800fd68:	6879      	ldr	r1, [r7, #4]
 800fd6a:	bfa6      	itte	ge
 800fd6c:	461c      	movge	r4, r3
 800fd6e:	2500      	movge	r5, #0
 800fd70:	2501      	movlt	r5, #1
 800fd72:	f7ff fcf5 	bl	800f760 <_Balloc>
 800fd76:	b920      	cbnz	r0, 800fd82 <__mdiff+0x5a>
 800fd78:	4b2d      	ldr	r3, [pc, #180]	; (800fe30 <__mdiff+0x108>)
 800fd7a:	4602      	mov	r2, r0
 800fd7c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fd80:	e7e6      	b.n	800fd50 <__mdiff+0x28>
 800fd82:	693e      	ldr	r6, [r7, #16]
 800fd84:	60c5      	str	r5, [r0, #12]
 800fd86:	6925      	ldr	r5, [r4, #16]
 800fd88:	f107 0114 	add.w	r1, r7, #20
 800fd8c:	f104 0914 	add.w	r9, r4, #20
 800fd90:	f100 0e14 	add.w	lr, r0, #20
 800fd94:	f107 0210 	add.w	r2, r7, #16
 800fd98:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800fd9c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800fda0:	46f2      	mov	sl, lr
 800fda2:	2700      	movs	r7, #0
 800fda4:	f859 3b04 	ldr.w	r3, [r9], #4
 800fda8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fdac:	fa1f f883 	uxth.w	r8, r3
 800fdb0:	fa17 f78b 	uxtah	r7, r7, fp
 800fdb4:	0c1b      	lsrs	r3, r3, #16
 800fdb6:	eba7 0808 	sub.w	r8, r7, r8
 800fdba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fdbe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fdc2:	fa1f f888 	uxth.w	r8, r8
 800fdc6:	141f      	asrs	r7, r3, #16
 800fdc8:	454d      	cmp	r5, r9
 800fdca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fdce:	f84a 3b04 	str.w	r3, [sl], #4
 800fdd2:	d8e7      	bhi.n	800fda4 <__mdiff+0x7c>
 800fdd4:	1b2b      	subs	r3, r5, r4
 800fdd6:	3b15      	subs	r3, #21
 800fdd8:	f023 0303 	bic.w	r3, r3, #3
 800fddc:	3304      	adds	r3, #4
 800fdde:	3415      	adds	r4, #21
 800fde0:	42a5      	cmp	r5, r4
 800fde2:	bf38      	it	cc
 800fde4:	2304      	movcc	r3, #4
 800fde6:	4419      	add	r1, r3
 800fde8:	4473      	add	r3, lr
 800fdea:	469e      	mov	lr, r3
 800fdec:	460d      	mov	r5, r1
 800fdee:	4565      	cmp	r5, ip
 800fdf0:	d30e      	bcc.n	800fe10 <__mdiff+0xe8>
 800fdf2:	f10c 0203 	add.w	r2, ip, #3
 800fdf6:	1a52      	subs	r2, r2, r1
 800fdf8:	f022 0203 	bic.w	r2, r2, #3
 800fdfc:	3903      	subs	r1, #3
 800fdfe:	458c      	cmp	ip, r1
 800fe00:	bf38      	it	cc
 800fe02:	2200      	movcc	r2, #0
 800fe04:	441a      	add	r2, r3
 800fe06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fe0a:	b17b      	cbz	r3, 800fe2c <__mdiff+0x104>
 800fe0c:	6106      	str	r6, [r0, #16]
 800fe0e:	e7a5      	b.n	800fd5c <__mdiff+0x34>
 800fe10:	f855 8b04 	ldr.w	r8, [r5], #4
 800fe14:	fa17 f488 	uxtah	r4, r7, r8
 800fe18:	1422      	asrs	r2, r4, #16
 800fe1a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800fe1e:	b2a4      	uxth	r4, r4
 800fe20:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800fe24:	f84e 4b04 	str.w	r4, [lr], #4
 800fe28:	1417      	asrs	r7, r2, #16
 800fe2a:	e7e0      	b.n	800fdee <__mdiff+0xc6>
 800fe2c:	3e01      	subs	r6, #1
 800fe2e:	e7ea      	b.n	800fe06 <__mdiff+0xde>
 800fe30:	08011fdc 	.word	0x08011fdc
 800fe34:	080120d0 	.word	0x080120d0

0800fe38 <__ulp>:
 800fe38:	b082      	sub	sp, #8
 800fe3a:	ed8d 0b00 	vstr	d0, [sp]
 800fe3e:	9b01      	ldr	r3, [sp, #4]
 800fe40:	4912      	ldr	r1, [pc, #72]	; (800fe8c <__ulp+0x54>)
 800fe42:	4019      	ands	r1, r3
 800fe44:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800fe48:	2900      	cmp	r1, #0
 800fe4a:	dd05      	ble.n	800fe58 <__ulp+0x20>
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	460b      	mov	r3, r1
 800fe50:	ec43 2b10 	vmov	d0, r2, r3
 800fe54:	b002      	add	sp, #8
 800fe56:	4770      	bx	lr
 800fe58:	4249      	negs	r1, r1
 800fe5a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fe5e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fe62:	f04f 0200 	mov.w	r2, #0
 800fe66:	f04f 0300 	mov.w	r3, #0
 800fe6a:	da04      	bge.n	800fe76 <__ulp+0x3e>
 800fe6c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800fe70:	fa41 f300 	asr.w	r3, r1, r0
 800fe74:	e7ec      	b.n	800fe50 <__ulp+0x18>
 800fe76:	f1a0 0114 	sub.w	r1, r0, #20
 800fe7a:	291e      	cmp	r1, #30
 800fe7c:	bfda      	itte	le
 800fe7e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800fe82:	fa20 f101 	lsrle.w	r1, r0, r1
 800fe86:	2101      	movgt	r1, #1
 800fe88:	460a      	mov	r2, r1
 800fe8a:	e7e1      	b.n	800fe50 <__ulp+0x18>
 800fe8c:	7ff00000 	.word	0x7ff00000

0800fe90 <__b2d>:
 800fe90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe92:	6905      	ldr	r5, [r0, #16]
 800fe94:	f100 0714 	add.w	r7, r0, #20
 800fe98:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fe9c:	1f2e      	subs	r6, r5, #4
 800fe9e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fea2:	4620      	mov	r0, r4
 800fea4:	f7ff fd52 	bl	800f94c <__hi0bits>
 800fea8:	f1c0 0320 	rsb	r3, r0, #32
 800feac:	280a      	cmp	r0, #10
 800feae:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ff2c <__b2d+0x9c>
 800feb2:	600b      	str	r3, [r1, #0]
 800feb4:	dc14      	bgt.n	800fee0 <__b2d+0x50>
 800feb6:	f1c0 0e0b 	rsb	lr, r0, #11
 800feba:	fa24 f10e 	lsr.w	r1, r4, lr
 800febe:	42b7      	cmp	r7, r6
 800fec0:	ea41 030c 	orr.w	r3, r1, ip
 800fec4:	bf34      	ite	cc
 800fec6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800feca:	2100      	movcs	r1, #0
 800fecc:	3015      	adds	r0, #21
 800fece:	fa04 f000 	lsl.w	r0, r4, r0
 800fed2:	fa21 f10e 	lsr.w	r1, r1, lr
 800fed6:	ea40 0201 	orr.w	r2, r0, r1
 800feda:	ec43 2b10 	vmov	d0, r2, r3
 800fede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fee0:	42b7      	cmp	r7, r6
 800fee2:	bf3a      	itte	cc
 800fee4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fee8:	f1a5 0608 	subcc.w	r6, r5, #8
 800feec:	2100      	movcs	r1, #0
 800feee:	380b      	subs	r0, #11
 800fef0:	d017      	beq.n	800ff22 <__b2d+0x92>
 800fef2:	f1c0 0c20 	rsb	ip, r0, #32
 800fef6:	fa04 f500 	lsl.w	r5, r4, r0
 800fefa:	42be      	cmp	r6, r7
 800fefc:	fa21 f40c 	lsr.w	r4, r1, ip
 800ff00:	ea45 0504 	orr.w	r5, r5, r4
 800ff04:	bf8c      	ite	hi
 800ff06:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ff0a:	2400      	movls	r4, #0
 800ff0c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ff10:	fa01 f000 	lsl.w	r0, r1, r0
 800ff14:	fa24 f40c 	lsr.w	r4, r4, ip
 800ff18:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ff1c:	ea40 0204 	orr.w	r2, r0, r4
 800ff20:	e7db      	b.n	800feda <__b2d+0x4a>
 800ff22:	ea44 030c 	orr.w	r3, r4, ip
 800ff26:	460a      	mov	r2, r1
 800ff28:	e7d7      	b.n	800feda <__b2d+0x4a>
 800ff2a:	bf00      	nop
 800ff2c:	3ff00000 	.word	0x3ff00000

0800ff30 <__d2b>:
 800ff30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ff34:	4689      	mov	r9, r1
 800ff36:	2101      	movs	r1, #1
 800ff38:	ec57 6b10 	vmov	r6, r7, d0
 800ff3c:	4690      	mov	r8, r2
 800ff3e:	f7ff fc0f 	bl	800f760 <_Balloc>
 800ff42:	4604      	mov	r4, r0
 800ff44:	b930      	cbnz	r0, 800ff54 <__d2b+0x24>
 800ff46:	4602      	mov	r2, r0
 800ff48:	4b25      	ldr	r3, [pc, #148]	; (800ffe0 <__d2b+0xb0>)
 800ff4a:	4826      	ldr	r0, [pc, #152]	; (800ffe4 <__d2b+0xb4>)
 800ff4c:	f240 310a 	movw	r1, #778	; 0x30a
 800ff50:	f000 fcbe 	bl	80108d0 <__assert_func>
 800ff54:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ff58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ff5c:	bb35      	cbnz	r5, 800ffac <__d2b+0x7c>
 800ff5e:	2e00      	cmp	r6, #0
 800ff60:	9301      	str	r3, [sp, #4]
 800ff62:	d028      	beq.n	800ffb6 <__d2b+0x86>
 800ff64:	4668      	mov	r0, sp
 800ff66:	9600      	str	r6, [sp, #0]
 800ff68:	f7ff fd10 	bl	800f98c <__lo0bits>
 800ff6c:	9900      	ldr	r1, [sp, #0]
 800ff6e:	b300      	cbz	r0, 800ffb2 <__d2b+0x82>
 800ff70:	9a01      	ldr	r2, [sp, #4]
 800ff72:	f1c0 0320 	rsb	r3, r0, #32
 800ff76:	fa02 f303 	lsl.w	r3, r2, r3
 800ff7a:	430b      	orrs	r3, r1
 800ff7c:	40c2      	lsrs	r2, r0
 800ff7e:	6163      	str	r3, [r4, #20]
 800ff80:	9201      	str	r2, [sp, #4]
 800ff82:	9b01      	ldr	r3, [sp, #4]
 800ff84:	61a3      	str	r3, [r4, #24]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	bf14      	ite	ne
 800ff8a:	2202      	movne	r2, #2
 800ff8c:	2201      	moveq	r2, #1
 800ff8e:	6122      	str	r2, [r4, #16]
 800ff90:	b1d5      	cbz	r5, 800ffc8 <__d2b+0x98>
 800ff92:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ff96:	4405      	add	r5, r0
 800ff98:	f8c9 5000 	str.w	r5, [r9]
 800ff9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ffa0:	f8c8 0000 	str.w	r0, [r8]
 800ffa4:	4620      	mov	r0, r4
 800ffa6:	b003      	add	sp, #12
 800ffa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ffac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ffb0:	e7d5      	b.n	800ff5e <__d2b+0x2e>
 800ffb2:	6161      	str	r1, [r4, #20]
 800ffb4:	e7e5      	b.n	800ff82 <__d2b+0x52>
 800ffb6:	a801      	add	r0, sp, #4
 800ffb8:	f7ff fce8 	bl	800f98c <__lo0bits>
 800ffbc:	9b01      	ldr	r3, [sp, #4]
 800ffbe:	6163      	str	r3, [r4, #20]
 800ffc0:	2201      	movs	r2, #1
 800ffc2:	6122      	str	r2, [r4, #16]
 800ffc4:	3020      	adds	r0, #32
 800ffc6:	e7e3      	b.n	800ff90 <__d2b+0x60>
 800ffc8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ffcc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ffd0:	f8c9 0000 	str.w	r0, [r9]
 800ffd4:	6918      	ldr	r0, [r3, #16]
 800ffd6:	f7ff fcb9 	bl	800f94c <__hi0bits>
 800ffda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ffde:	e7df      	b.n	800ffa0 <__d2b+0x70>
 800ffe0:	08011fdc 	.word	0x08011fdc
 800ffe4:	080120d0 	.word	0x080120d0

0800ffe8 <__ratio>:
 800ffe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffec:	4688      	mov	r8, r1
 800ffee:	4669      	mov	r1, sp
 800fff0:	4681      	mov	r9, r0
 800fff2:	f7ff ff4d 	bl	800fe90 <__b2d>
 800fff6:	a901      	add	r1, sp, #4
 800fff8:	4640      	mov	r0, r8
 800fffa:	ec55 4b10 	vmov	r4, r5, d0
 800fffe:	f7ff ff47 	bl	800fe90 <__b2d>
 8010002:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010006:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801000a:	eba3 0c02 	sub.w	ip, r3, r2
 801000e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010012:	1a9b      	subs	r3, r3, r2
 8010014:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010018:	ec51 0b10 	vmov	r0, r1, d0
 801001c:	2b00      	cmp	r3, #0
 801001e:	bfd6      	itet	le
 8010020:	460a      	movle	r2, r1
 8010022:	462a      	movgt	r2, r5
 8010024:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010028:	468b      	mov	fp, r1
 801002a:	462f      	mov	r7, r5
 801002c:	bfd4      	ite	le
 801002e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010032:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010036:	4620      	mov	r0, r4
 8010038:	ee10 2a10 	vmov	r2, s0
 801003c:	465b      	mov	r3, fp
 801003e:	4639      	mov	r1, r7
 8010040:	f7f0 fc34 	bl	80008ac <__aeabi_ddiv>
 8010044:	ec41 0b10 	vmov	d0, r0, r1
 8010048:	b003      	add	sp, #12
 801004a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801004e <__copybits>:
 801004e:	3901      	subs	r1, #1
 8010050:	b570      	push	{r4, r5, r6, lr}
 8010052:	1149      	asrs	r1, r1, #5
 8010054:	6914      	ldr	r4, [r2, #16]
 8010056:	3101      	adds	r1, #1
 8010058:	f102 0314 	add.w	r3, r2, #20
 801005c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010060:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010064:	1f05      	subs	r5, r0, #4
 8010066:	42a3      	cmp	r3, r4
 8010068:	d30c      	bcc.n	8010084 <__copybits+0x36>
 801006a:	1aa3      	subs	r3, r4, r2
 801006c:	3b11      	subs	r3, #17
 801006e:	f023 0303 	bic.w	r3, r3, #3
 8010072:	3211      	adds	r2, #17
 8010074:	42a2      	cmp	r2, r4
 8010076:	bf88      	it	hi
 8010078:	2300      	movhi	r3, #0
 801007a:	4418      	add	r0, r3
 801007c:	2300      	movs	r3, #0
 801007e:	4288      	cmp	r0, r1
 8010080:	d305      	bcc.n	801008e <__copybits+0x40>
 8010082:	bd70      	pop	{r4, r5, r6, pc}
 8010084:	f853 6b04 	ldr.w	r6, [r3], #4
 8010088:	f845 6f04 	str.w	r6, [r5, #4]!
 801008c:	e7eb      	b.n	8010066 <__copybits+0x18>
 801008e:	f840 3b04 	str.w	r3, [r0], #4
 8010092:	e7f4      	b.n	801007e <__copybits+0x30>

08010094 <__any_on>:
 8010094:	f100 0214 	add.w	r2, r0, #20
 8010098:	6900      	ldr	r0, [r0, #16]
 801009a:	114b      	asrs	r3, r1, #5
 801009c:	4298      	cmp	r0, r3
 801009e:	b510      	push	{r4, lr}
 80100a0:	db11      	blt.n	80100c6 <__any_on+0x32>
 80100a2:	dd0a      	ble.n	80100ba <__any_on+0x26>
 80100a4:	f011 011f 	ands.w	r1, r1, #31
 80100a8:	d007      	beq.n	80100ba <__any_on+0x26>
 80100aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80100ae:	fa24 f001 	lsr.w	r0, r4, r1
 80100b2:	fa00 f101 	lsl.w	r1, r0, r1
 80100b6:	428c      	cmp	r4, r1
 80100b8:	d10b      	bne.n	80100d2 <__any_on+0x3e>
 80100ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80100be:	4293      	cmp	r3, r2
 80100c0:	d803      	bhi.n	80100ca <__any_on+0x36>
 80100c2:	2000      	movs	r0, #0
 80100c4:	bd10      	pop	{r4, pc}
 80100c6:	4603      	mov	r3, r0
 80100c8:	e7f7      	b.n	80100ba <__any_on+0x26>
 80100ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80100ce:	2900      	cmp	r1, #0
 80100d0:	d0f5      	beq.n	80100be <__any_on+0x2a>
 80100d2:	2001      	movs	r0, #1
 80100d4:	e7f6      	b.n	80100c4 <__any_on+0x30>

080100d6 <_calloc_r>:
 80100d6:	b513      	push	{r0, r1, r4, lr}
 80100d8:	434a      	muls	r2, r1
 80100da:	4611      	mov	r1, r2
 80100dc:	9201      	str	r2, [sp, #4]
 80100de:	f000 f859 	bl	8010194 <_malloc_r>
 80100e2:	4604      	mov	r4, r0
 80100e4:	b118      	cbz	r0, 80100ee <_calloc_r+0x18>
 80100e6:	9a01      	ldr	r2, [sp, #4]
 80100e8:	2100      	movs	r1, #0
 80100ea:	f7fc fa73 	bl	800c5d4 <memset>
 80100ee:	4620      	mov	r0, r4
 80100f0:	b002      	add	sp, #8
 80100f2:	bd10      	pop	{r4, pc}

080100f4 <_free_r>:
 80100f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80100f6:	2900      	cmp	r1, #0
 80100f8:	d048      	beq.n	801018c <_free_r+0x98>
 80100fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100fe:	9001      	str	r0, [sp, #4]
 8010100:	2b00      	cmp	r3, #0
 8010102:	f1a1 0404 	sub.w	r4, r1, #4
 8010106:	bfb8      	it	lt
 8010108:	18e4      	addlt	r4, r4, r3
 801010a:	f000 fc6f 	bl	80109ec <__malloc_lock>
 801010e:	4a20      	ldr	r2, [pc, #128]	; (8010190 <_free_r+0x9c>)
 8010110:	9801      	ldr	r0, [sp, #4]
 8010112:	6813      	ldr	r3, [r2, #0]
 8010114:	4615      	mov	r5, r2
 8010116:	b933      	cbnz	r3, 8010126 <_free_r+0x32>
 8010118:	6063      	str	r3, [r4, #4]
 801011a:	6014      	str	r4, [r2, #0]
 801011c:	b003      	add	sp, #12
 801011e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010122:	f000 bc69 	b.w	80109f8 <__malloc_unlock>
 8010126:	42a3      	cmp	r3, r4
 8010128:	d90b      	bls.n	8010142 <_free_r+0x4e>
 801012a:	6821      	ldr	r1, [r4, #0]
 801012c:	1862      	adds	r2, r4, r1
 801012e:	4293      	cmp	r3, r2
 8010130:	bf04      	itt	eq
 8010132:	681a      	ldreq	r2, [r3, #0]
 8010134:	685b      	ldreq	r3, [r3, #4]
 8010136:	6063      	str	r3, [r4, #4]
 8010138:	bf04      	itt	eq
 801013a:	1852      	addeq	r2, r2, r1
 801013c:	6022      	streq	r2, [r4, #0]
 801013e:	602c      	str	r4, [r5, #0]
 8010140:	e7ec      	b.n	801011c <_free_r+0x28>
 8010142:	461a      	mov	r2, r3
 8010144:	685b      	ldr	r3, [r3, #4]
 8010146:	b10b      	cbz	r3, 801014c <_free_r+0x58>
 8010148:	42a3      	cmp	r3, r4
 801014a:	d9fa      	bls.n	8010142 <_free_r+0x4e>
 801014c:	6811      	ldr	r1, [r2, #0]
 801014e:	1855      	adds	r5, r2, r1
 8010150:	42a5      	cmp	r5, r4
 8010152:	d10b      	bne.n	801016c <_free_r+0x78>
 8010154:	6824      	ldr	r4, [r4, #0]
 8010156:	4421      	add	r1, r4
 8010158:	1854      	adds	r4, r2, r1
 801015a:	42a3      	cmp	r3, r4
 801015c:	6011      	str	r1, [r2, #0]
 801015e:	d1dd      	bne.n	801011c <_free_r+0x28>
 8010160:	681c      	ldr	r4, [r3, #0]
 8010162:	685b      	ldr	r3, [r3, #4]
 8010164:	6053      	str	r3, [r2, #4]
 8010166:	4421      	add	r1, r4
 8010168:	6011      	str	r1, [r2, #0]
 801016a:	e7d7      	b.n	801011c <_free_r+0x28>
 801016c:	d902      	bls.n	8010174 <_free_r+0x80>
 801016e:	230c      	movs	r3, #12
 8010170:	6003      	str	r3, [r0, #0]
 8010172:	e7d3      	b.n	801011c <_free_r+0x28>
 8010174:	6825      	ldr	r5, [r4, #0]
 8010176:	1961      	adds	r1, r4, r5
 8010178:	428b      	cmp	r3, r1
 801017a:	bf04      	itt	eq
 801017c:	6819      	ldreq	r1, [r3, #0]
 801017e:	685b      	ldreq	r3, [r3, #4]
 8010180:	6063      	str	r3, [r4, #4]
 8010182:	bf04      	itt	eq
 8010184:	1949      	addeq	r1, r1, r5
 8010186:	6021      	streq	r1, [r4, #0]
 8010188:	6054      	str	r4, [r2, #4]
 801018a:	e7c7      	b.n	801011c <_free_r+0x28>
 801018c:	b003      	add	sp, #12
 801018e:	bd30      	pop	{r4, r5, pc}
 8010190:	20000320 	.word	0x20000320

08010194 <_malloc_r>:
 8010194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010196:	1ccd      	adds	r5, r1, #3
 8010198:	f025 0503 	bic.w	r5, r5, #3
 801019c:	3508      	adds	r5, #8
 801019e:	2d0c      	cmp	r5, #12
 80101a0:	bf38      	it	cc
 80101a2:	250c      	movcc	r5, #12
 80101a4:	2d00      	cmp	r5, #0
 80101a6:	4606      	mov	r6, r0
 80101a8:	db01      	blt.n	80101ae <_malloc_r+0x1a>
 80101aa:	42a9      	cmp	r1, r5
 80101ac:	d903      	bls.n	80101b6 <_malloc_r+0x22>
 80101ae:	230c      	movs	r3, #12
 80101b0:	6033      	str	r3, [r6, #0]
 80101b2:	2000      	movs	r0, #0
 80101b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101b6:	f000 fc19 	bl	80109ec <__malloc_lock>
 80101ba:	4921      	ldr	r1, [pc, #132]	; (8010240 <_malloc_r+0xac>)
 80101bc:	680a      	ldr	r2, [r1, #0]
 80101be:	4614      	mov	r4, r2
 80101c0:	b99c      	cbnz	r4, 80101ea <_malloc_r+0x56>
 80101c2:	4f20      	ldr	r7, [pc, #128]	; (8010244 <_malloc_r+0xb0>)
 80101c4:	683b      	ldr	r3, [r7, #0]
 80101c6:	b923      	cbnz	r3, 80101d2 <_malloc_r+0x3e>
 80101c8:	4621      	mov	r1, r4
 80101ca:	4630      	mov	r0, r6
 80101cc:	f000 fafc 	bl	80107c8 <_sbrk_r>
 80101d0:	6038      	str	r0, [r7, #0]
 80101d2:	4629      	mov	r1, r5
 80101d4:	4630      	mov	r0, r6
 80101d6:	f000 faf7 	bl	80107c8 <_sbrk_r>
 80101da:	1c43      	adds	r3, r0, #1
 80101dc:	d123      	bne.n	8010226 <_malloc_r+0x92>
 80101de:	230c      	movs	r3, #12
 80101e0:	6033      	str	r3, [r6, #0]
 80101e2:	4630      	mov	r0, r6
 80101e4:	f000 fc08 	bl	80109f8 <__malloc_unlock>
 80101e8:	e7e3      	b.n	80101b2 <_malloc_r+0x1e>
 80101ea:	6823      	ldr	r3, [r4, #0]
 80101ec:	1b5b      	subs	r3, r3, r5
 80101ee:	d417      	bmi.n	8010220 <_malloc_r+0x8c>
 80101f0:	2b0b      	cmp	r3, #11
 80101f2:	d903      	bls.n	80101fc <_malloc_r+0x68>
 80101f4:	6023      	str	r3, [r4, #0]
 80101f6:	441c      	add	r4, r3
 80101f8:	6025      	str	r5, [r4, #0]
 80101fa:	e004      	b.n	8010206 <_malloc_r+0x72>
 80101fc:	6863      	ldr	r3, [r4, #4]
 80101fe:	42a2      	cmp	r2, r4
 8010200:	bf0c      	ite	eq
 8010202:	600b      	streq	r3, [r1, #0]
 8010204:	6053      	strne	r3, [r2, #4]
 8010206:	4630      	mov	r0, r6
 8010208:	f000 fbf6 	bl	80109f8 <__malloc_unlock>
 801020c:	f104 000b 	add.w	r0, r4, #11
 8010210:	1d23      	adds	r3, r4, #4
 8010212:	f020 0007 	bic.w	r0, r0, #7
 8010216:	1ac2      	subs	r2, r0, r3
 8010218:	d0cc      	beq.n	80101b4 <_malloc_r+0x20>
 801021a:	1a1b      	subs	r3, r3, r0
 801021c:	50a3      	str	r3, [r4, r2]
 801021e:	e7c9      	b.n	80101b4 <_malloc_r+0x20>
 8010220:	4622      	mov	r2, r4
 8010222:	6864      	ldr	r4, [r4, #4]
 8010224:	e7cc      	b.n	80101c0 <_malloc_r+0x2c>
 8010226:	1cc4      	adds	r4, r0, #3
 8010228:	f024 0403 	bic.w	r4, r4, #3
 801022c:	42a0      	cmp	r0, r4
 801022e:	d0e3      	beq.n	80101f8 <_malloc_r+0x64>
 8010230:	1a21      	subs	r1, r4, r0
 8010232:	4630      	mov	r0, r6
 8010234:	f000 fac8 	bl	80107c8 <_sbrk_r>
 8010238:	3001      	adds	r0, #1
 801023a:	d1dd      	bne.n	80101f8 <_malloc_r+0x64>
 801023c:	e7cf      	b.n	80101de <_malloc_r+0x4a>
 801023e:	bf00      	nop
 8010240:	20000320 	.word	0x20000320
 8010244:	20000324 	.word	0x20000324

08010248 <__ssputs_r>:
 8010248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801024c:	688e      	ldr	r6, [r1, #8]
 801024e:	429e      	cmp	r6, r3
 8010250:	4682      	mov	sl, r0
 8010252:	460c      	mov	r4, r1
 8010254:	4690      	mov	r8, r2
 8010256:	461f      	mov	r7, r3
 8010258:	d838      	bhi.n	80102cc <__ssputs_r+0x84>
 801025a:	898a      	ldrh	r2, [r1, #12]
 801025c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010260:	d032      	beq.n	80102c8 <__ssputs_r+0x80>
 8010262:	6825      	ldr	r5, [r4, #0]
 8010264:	6909      	ldr	r1, [r1, #16]
 8010266:	eba5 0901 	sub.w	r9, r5, r1
 801026a:	6965      	ldr	r5, [r4, #20]
 801026c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010270:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010274:	3301      	adds	r3, #1
 8010276:	444b      	add	r3, r9
 8010278:	106d      	asrs	r5, r5, #1
 801027a:	429d      	cmp	r5, r3
 801027c:	bf38      	it	cc
 801027e:	461d      	movcc	r5, r3
 8010280:	0553      	lsls	r3, r2, #21
 8010282:	d531      	bpl.n	80102e8 <__ssputs_r+0xa0>
 8010284:	4629      	mov	r1, r5
 8010286:	f7ff ff85 	bl	8010194 <_malloc_r>
 801028a:	4606      	mov	r6, r0
 801028c:	b950      	cbnz	r0, 80102a4 <__ssputs_r+0x5c>
 801028e:	230c      	movs	r3, #12
 8010290:	f8ca 3000 	str.w	r3, [sl]
 8010294:	89a3      	ldrh	r3, [r4, #12]
 8010296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801029a:	81a3      	strh	r3, [r4, #12]
 801029c:	f04f 30ff 	mov.w	r0, #4294967295
 80102a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102a4:	6921      	ldr	r1, [r4, #16]
 80102a6:	464a      	mov	r2, r9
 80102a8:	f7fc f986 	bl	800c5b8 <memcpy>
 80102ac:	89a3      	ldrh	r3, [r4, #12]
 80102ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80102b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102b6:	81a3      	strh	r3, [r4, #12]
 80102b8:	6126      	str	r6, [r4, #16]
 80102ba:	6165      	str	r5, [r4, #20]
 80102bc:	444e      	add	r6, r9
 80102be:	eba5 0509 	sub.w	r5, r5, r9
 80102c2:	6026      	str	r6, [r4, #0]
 80102c4:	60a5      	str	r5, [r4, #8]
 80102c6:	463e      	mov	r6, r7
 80102c8:	42be      	cmp	r6, r7
 80102ca:	d900      	bls.n	80102ce <__ssputs_r+0x86>
 80102cc:	463e      	mov	r6, r7
 80102ce:	4632      	mov	r2, r6
 80102d0:	6820      	ldr	r0, [r4, #0]
 80102d2:	4641      	mov	r1, r8
 80102d4:	f000 fb70 	bl	80109b8 <memmove>
 80102d8:	68a3      	ldr	r3, [r4, #8]
 80102da:	6822      	ldr	r2, [r4, #0]
 80102dc:	1b9b      	subs	r3, r3, r6
 80102de:	4432      	add	r2, r6
 80102e0:	60a3      	str	r3, [r4, #8]
 80102e2:	6022      	str	r2, [r4, #0]
 80102e4:	2000      	movs	r0, #0
 80102e6:	e7db      	b.n	80102a0 <__ssputs_r+0x58>
 80102e8:	462a      	mov	r2, r5
 80102ea:	f000 fb8b 	bl	8010a04 <_realloc_r>
 80102ee:	4606      	mov	r6, r0
 80102f0:	2800      	cmp	r0, #0
 80102f2:	d1e1      	bne.n	80102b8 <__ssputs_r+0x70>
 80102f4:	6921      	ldr	r1, [r4, #16]
 80102f6:	4650      	mov	r0, sl
 80102f8:	f7ff fefc 	bl	80100f4 <_free_r>
 80102fc:	e7c7      	b.n	801028e <__ssputs_r+0x46>
	...

08010300 <_svfiprintf_r>:
 8010300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010304:	4698      	mov	r8, r3
 8010306:	898b      	ldrh	r3, [r1, #12]
 8010308:	061b      	lsls	r3, r3, #24
 801030a:	b09d      	sub	sp, #116	; 0x74
 801030c:	4607      	mov	r7, r0
 801030e:	460d      	mov	r5, r1
 8010310:	4614      	mov	r4, r2
 8010312:	d50e      	bpl.n	8010332 <_svfiprintf_r+0x32>
 8010314:	690b      	ldr	r3, [r1, #16]
 8010316:	b963      	cbnz	r3, 8010332 <_svfiprintf_r+0x32>
 8010318:	2140      	movs	r1, #64	; 0x40
 801031a:	f7ff ff3b 	bl	8010194 <_malloc_r>
 801031e:	6028      	str	r0, [r5, #0]
 8010320:	6128      	str	r0, [r5, #16]
 8010322:	b920      	cbnz	r0, 801032e <_svfiprintf_r+0x2e>
 8010324:	230c      	movs	r3, #12
 8010326:	603b      	str	r3, [r7, #0]
 8010328:	f04f 30ff 	mov.w	r0, #4294967295
 801032c:	e0d1      	b.n	80104d2 <_svfiprintf_r+0x1d2>
 801032e:	2340      	movs	r3, #64	; 0x40
 8010330:	616b      	str	r3, [r5, #20]
 8010332:	2300      	movs	r3, #0
 8010334:	9309      	str	r3, [sp, #36]	; 0x24
 8010336:	2320      	movs	r3, #32
 8010338:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801033c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010340:	2330      	movs	r3, #48	; 0x30
 8010342:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80104ec <_svfiprintf_r+0x1ec>
 8010346:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801034a:	f04f 0901 	mov.w	r9, #1
 801034e:	4623      	mov	r3, r4
 8010350:	469a      	mov	sl, r3
 8010352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010356:	b10a      	cbz	r2, 801035c <_svfiprintf_r+0x5c>
 8010358:	2a25      	cmp	r2, #37	; 0x25
 801035a:	d1f9      	bne.n	8010350 <_svfiprintf_r+0x50>
 801035c:	ebba 0b04 	subs.w	fp, sl, r4
 8010360:	d00b      	beq.n	801037a <_svfiprintf_r+0x7a>
 8010362:	465b      	mov	r3, fp
 8010364:	4622      	mov	r2, r4
 8010366:	4629      	mov	r1, r5
 8010368:	4638      	mov	r0, r7
 801036a:	f7ff ff6d 	bl	8010248 <__ssputs_r>
 801036e:	3001      	adds	r0, #1
 8010370:	f000 80aa 	beq.w	80104c8 <_svfiprintf_r+0x1c8>
 8010374:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010376:	445a      	add	r2, fp
 8010378:	9209      	str	r2, [sp, #36]	; 0x24
 801037a:	f89a 3000 	ldrb.w	r3, [sl]
 801037e:	2b00      	cmp	r3, #0
 8010380:	f000 80a2 	beq.w	80104c8 <_svfiprintf_r+0x1c8>
 8010384:	2300      	movs	r3, #0
 8010386:	f04f 32ff 	mov.w	r2, #4294967295
 801038a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801038e:	f10a 0a01 	add.w	sl, sl, #1
 8010392:	9304      	str	r3, [sp, #16]
 8010394:	9307      	str	r3, [sp, #28]
 8010396:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801039a:	931a      	str	r3, [sp, #104]	; 0x68
 801039c:	4654      	mov	r4, sl
 801039e:	2205      	movs	r2, #5
 80103a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103a4:	4851      	ldr	r0, [pc, #324]	; (80104ec <_svfiprintf_r+0x1ec>)
 80103a6:	f7ef ff4b 	bl	8000240 <memchr>
 80103aa:	9a04      	ldr	r2, [sp, #16]
 80103ac:	b9d8      	cbnz	r0, 80103e6 <_svfiprintf_r+0xe6>
 80103ae:	06d0      	lsls	r0, r2, #27
 80103b0:	bf44      	itt	mi
 80103b2:	2320      	movmi	r3, #32
 80103b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80103b8:	0711      	lsls	r1, r2, #28
 80103ba:	bf44      	itt	mi
 80103bc:	232b      	movmi	r3, #43	; 0x2b
 80103be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80103c2:	f89a 3000 	ldrb.w	r3, [sl]
 80103c6:	2b2a      	cmp	r3, #42	; 0x2a
 80103c8:	d015      	beq.n	80103f6 <_svfiprintf_r+0xf6>
 80103ca:	9a07      	ldr	r2, [sp, #28]
 80103cc:	4654      	mov	r4, sl
 80103ce:	2000      	movs	r0, #0
 80103d0:	f04f 0c0a 	mov.w	ip, #10
 80103d4:	4621      	mov	r1, r4
 80103d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80103da:	3b30      	subs	r3, #48	; 0x30
 80103dc:	2b09      	cmp	r3, #9
 80103de:	d94e      	bls.n	801047e <_svfiprintf_r+0x17e>
 80103e0:	b1b0      	cbz	r0, 8010410 <_svfiprintf_r+0x110>
 80103e2:	9207      	str	r2, [sp, #28]
 80103e4:	e014      	b.n	8010410 <_svfiprintf_r+0x110>
 80103e6:	eba0 0308 	sub.w	r3, r0, r8
 80103ea:	fa09 f303 	lsl.w	r3, r9, r3
 80103ee:	4313      	orrs	r3, r2
 80103f0:	9304      	str	r3, [sp, #16]
 80103f2:	46a2      	mov	sl, r4
 80103f4:	e7d2      	b.n	801039c <_svfiprintf_r+0x9c>
 80103f6:	9b03      	ldr	r3, [sp, #12]
 80103f8:	1d19      	adds	r1, r3, #4
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	9103      	str	r1, [sp, #12]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	bfbb      	ittet	lt
 8010402:	425b      	neglt	r3, r3
 8010404:	f042 0202 	orrlt.w	r2, r2, #2
 8010408:	9307      	strge	r3, [sp, #28]
 801040a:	9307      	strlt	r3, [sp, #28]
 801040c:	bfb8      	it	lt
 801040e:	9204      	strlt	r2, [sp, #16]
 8010410:	7823      	ldrb	r3, [r4, #0]
 8010412:	2b2e      	cmp	r3, #46	; 0x2e
 8010414:	d10c      	bne.n	8010430 <_svfiprintf_r+0x130>
 8010416:	7863      	ldrb	r3, [r4, #1]
 8010418:	2b2a      	cmp	r3, #42	; 0x2a
 801041a:	d135      	bne.n	8010488 <_svfiprintf_r+0x188>
 801041c:	9b03      	ldr	r3, [sp, #12]
 801041e:	1d1a      	adds	r2, r3, #4
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	9203      	str	r2, [sp, #12]
 8010424:	2b00      	cmp	r3, #0
 8010426:	bfb8      	it	lt
 8010428:	f04f 33ff 	movlt.w	r3, #4294967295
 801042c:	3402      	adds	r4, #2
 801042e:	9305      	str	r3, [sp, #20]
 8010430:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80104fc <_svfiprintf_r+0x1fc>
 8010434:	7821      	ldrb	r1, [r4, #0]
 8010436:	2203      	movs	r2, #3
 8010438:	4650      	mov	r0, sl
 801043a:	f7ef ff01 	bl	8000240 <memchr>
 801043e:	b140      	cbz	r0, 8010452 <_svfiprintf_r+0x152>
 8010440:	2340      	movs	r3, #64	; 0x40
 8010442:	eba0 000a 	sub.w	r0, r0, sl
 8010446:	fa03 f000 	lsl.w	r0, r3, r0
 801044a:	9b04      	ldr	r3, [sp, #16]
 801044c:	4303      	orrs	r3, r0
 801044e:	3401      	adds	r4, #1
 8010450:	9304      	str	r3, [sp, #16]
 8010452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010456:	4826      	ldr	r0, [pc, #152]	; (80104f0 <_svfiprintf_r+0x1f0>)
 8010458:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801045c:	2206      	movs	r2, #6
 801045e:	f7ef feef 	bl	8000240 <memchr>
 8010462:	2800      	cmp	r0, #0
 8010464:	d038      	beq.n	80104d8 <_svfiprintf_r+0x1d8>
 8010466:	4b23      	ldr	r3, [pc, #140]	; (80104f4 <_svfiprintf_r+0x1f4>)
 8010468:	bb1b      	cbnz	r3, 80104b2 <_svfiprintf_r+0x1b2>
 801046a:	9b03      	ldr	r3, [sp, #12]
 801046c:	3307      	adds	r3, #7
 801046e:	f023 0307 	bic.w	r3, r3, #7
 8010472:	3308      	adds	r3, #8
 8010474:	9303      	str	r3, [sp, #12]
 8010476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010478:	4433      	add	r3, r6
 801047a:	9309      	str	r3, [sp, #36]	; 0x24
 801047c:	e767      	b.n	801034e <_svfiprintf_r+0x4e>
 801047e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010482:	460c      	mov	r4, r1
 8010484:	2001      	movs	r0, #1
 8010486:	e7a5      	b.n	80103d4 <_svfiprintf_r+0xd4>
 8010488:	2300      	movs	r3, #0
 801048a:	3401      	adds	r4, #1
 801048c:	9305      	str	r3, [sp, #20]
 801048e:	4619      	mov	r1, r3
 8010490:	f04f 0c0a 	mov.w	ip, #10
 8010494:	4620      	mov	r0, r4
 8010496:	f810 2b01 	ldrb.w	r2, [r0], #1
 801049a:	3a30      	subs	r2, #48	; 0x30
 801049c:	2a09      	cmp	r2, #9
 801049e:	d903      	bls.n	80104a8 <_svfiprintf_r+0x1a8>
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d0c5      	beq.n	8010430 <_svfiprintf_r+0x130>
 80104a4:	9105      	str	r1, [sp, #20]
 80104a6:	e7c3      	b.n	8010430 <_svfiprintf_r+0x130>
 80104a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80104ac:	4604      	mov	r4, r0
 80104ae:	2301      	movs	r3, #1
 80104b0:	e7f0      	b.n	8010494 <_svfiprintf_r+0x194>
 80104b2:	ab03      	add	r3, sp, #12
 80104b4:	9300      	str	r3, [sp, #0]
 80104b6:	462a      	mov	r2, r5
 80104b8:	4b0f      	ldr	r3, [pc, #60]	; (80104f8 <_svfiprintf_r+0x1f8>)
 80104ba:	a904      	add	r1, sp, #16
 80104bc:	4638      	mov	r0, r7
 80104be:	f7fc f931 	bl	800c724 <_printf_float>
 80104c2:	1c42      	adds	r2, r0, #1
 80104c4:	4606      	mov	r6, r0
 80104c6:	d1d6      	bne.n	8010476 <_svfiprintf_r+0x176>
 80104c8:	89ab      	ldrh	r3, [r5, #12]
 80104ca:	065b      	lsls	r3, r3, #25
 80104cc:	f53f af2c 	bmi.w	8010328 <_svfiprintf_r+0x28>
 80104d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80104d2:	b01d      	add	sp, #116	; 0x74
 80104d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104d8:	ab03      	add	r3, sp, #12
 80104da:	9300      	str	r3, [sp, #0]
 80104dc:	462a      	mov	r2, r5
 80104de:	4b06      	ldr	r3, [pc, #24]	; (80104f8 <_svfiprintf_r+0x1f8>)
 80104e0:	a904      	add	r1, sp, #16
 80104e2:	4638      	mov	r0, r7
 80104e4:	f7fc fbc2 	bl	800cc6c <_printf_i>
 80104e8:	e7eb      	b.n	80104c2 <_svfiprintf_r+0x1c2>
 80104ea:	bf00      	nop
 80104ec:	0801222c 	.word	0x0801222c
 80104f0:	08012236 	.word	0x08012236
 80104f4:	0800c725 	.word	0x0800c725
 80104f8:	08010249 	.word	0x08010249
 80104fc:	08012232 	.word	0x08012232

08010500 <__sfputc_r>:
 8010500:	6893      	ldr	r3, [r2, #8]
 8010502:	3b01      	subs	r3, #1
 8010504:	2b00      	cmp	r3, #0
 8010506:	b410      	push	{r4}
 8010508:	6093      	str	r3, [r2, #8]
 801050a:	da08      	bge.n	801051e <__sfputc_r+0x1e>
 801050c:	6994      	ldr	r4, [r2, #24]
 801050e:	42a3      	cmp	r3, r4
 8010510:	db01      	blt.n	8010516 <__sfputc_r+0x16>
 8010512:	290a      	cmp	r1, #10
 8010514:	d103      	bne.n	801051e <__sfputc_r+0x1e>
 8010516:	f85d 4b04 	ldr.w	r4, [sp], #4
 801051a:	f7fd bc3d 	b.w	800dd98 <__swbuf_r>
 801051e:	6813      	ldr	r3, [r2, #0]
 8010520:	1c58      	adds	r0, r3, #1
 8010522:	6010      	str	r0, [r2, #0]
 8010524:	7019      	strb	r1, [r3, #0]
 8010526:	4608      	mov	r0, r1
 8010528:	f85d 4b04 	ldr.w	r4, [sp], #4
 801052c:	4770      	bx	lr

0801052e <__sfputs_r>:
 801052e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010530:	4606      	mov	r6, r0
 8010532:	460f      	mov	r7, r1
 8010534:	4614      	mov	r4, r2
 8010536:	18d5      	adds	r5, r2, r3
 8010538:	42ac      	cmp	r4, r5
 801053a:	d101      	bne.n	8010540 <__sfputs_r+0x12>
 801053c:	2000      	movs	r0, #0
 801053e:	e007      	b.n	8010550 <__sfputs_r+0x22>
 8010540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010544:	463a      	mov	r2, r7
 8010546:	4630      	mov	r0, r6
 8010548:	f7ff ffda 	bl	8010500 <__sfputc_r>
 801054c:	1c43      	adds	r3, r0, #1
 801054e:	d1f3      	bne.n	8010538 <__sfputs_r+0xa>
 8010550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010554 <_vfiprintf_r>:
 8010554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010558:	460d      	mov	r5, r1
 801055a:	b09d      	sub	sp, #116	; 0x74
 801055c:	4614      	mov	r4, r2
 801055e:	4698      	mov	r8, r3
 8010560:	4606      	mov	r6, r0
 8010562:	b118      	cbz	r0, 801056c <_vfiprintf_r+0x18>
 8010564:	6983      	ldr	r3, [r0, #24]
 8010566:	b90b      	cbnz	r3, 801056c <_vfiprintf_r+0x18>
 8010568:	f7fe fc68 	bl	800ee3c <__sinit>
 801056c:	4b89      	ldr	r3, [pc, #548]	; (8010794 <_vfiprintf_r+0x240>)
 801056e:	429d      	cmp	r5, r3
 8010570:	d11b      	bne.n	80105aa <_vfiprintf_r+0x56>
 8010572:	6875      	ldr	r5, [r6, #4]
 8010574:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010576:	07d9      	lsls	r1, r3, #31
 8010578:	d405      	bmi.n	8010586 <_vfiprintf_r+0x32>
 801057a:	89ab      	ldrh	r3, [r5, #12]
 801057c:	059a      	lsls	r2, r3, #22
 801057e:	d402      	bmi.n	8010586 <_vfiprintf_r+0x32>
 8010580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010582:	f7ff f86c 	bl	800f65e <__retarget_lock_acquire_recursive>
 8010586:	89ab      	ldrh	r3, [r5, #12]
 8010588:	071b      	lsls	r3, r3, #28
 801058a:	d501      	bpl.n	8010590 <_vfiprintf_r+0x3c>
 801058c:	692b      	ldr	r3, [r5, #16]
 801058e:	b9eb      	cbnz	r3, 80105cc <_vfiprintf_r+0x78>
 8010590:	4629      	mov	r1, r5
 8010592:	4630      	mov	r0, r6
 8010594:	f7fd fc52 	bl	800de3c <__swsetup_r>
 8010598:	b1c0      	cbz	r0, 80105cc <_vfiprintf_r+0x78>
 801059a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801059c:	07dc      	lsls	r4, r3, #31
 801059e:	d50e      	bpl.n	80105be <_vfiprintf_r+0x6a>
 80105a0:	f04f 30ff 	mov.w	r0, #4294967295
 80105a4:	b01d      	add	sp, #116	; 0x74
 80105a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105aa:	4b7b      	ldr	r3, [pc, #492]	; (8010798 <_vfiprintf_r+0x244>)
 80105ac:	429d      	cmp	r5, r3
 80105ae:	d101      	bne.n	80105b4 <_vfiprintf_r+0x60>
 80105b0:	68b5      	ldr	r5, [r6, #8]
 80105b2:	e7df      	b.n	8010574 <_vfiprintf_r+0x20>
 80105b4:	4b79      	ldr	r3, [pc, #484]	; (801079c <_vfiprintf_r+0x248>)
 80105b6:	429d      	cmp	r5, r3
 80105b8:	bf08      	it	eq
 80105ba:	68f5      	ldreq	r5, [r6, #12]
 80105bc:	e7da      	b.n	8010574 <_vfiprintf_r+0x20>
 80105be:	89ab      	ldrh	r3, [r5, #12]
 80105c0:	0598      	lsls	r0, r3, #22
 80105c2:	d4ed      	bmi.n	80105a0 <_vfiprintf_r+0x4c>
 80105c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80105c6:	f7ff f84b 	bl	800f660 <__retarget_lock_release_recursive>
 80105ca:	e7e9      	b.n	80105a0 <_vfiprintf_r+0x4c>
 80105cc:	2300      	movs	r3, #0
 80105ce:	9309      	str	r3, [sp, #36]	; 0x24
 80105d0:	2320      	movs	r3, #32
 80105d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80105d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80105da:	2330      	movs	r3, #48	; 0x30
 80105dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80107a0 <_vfiprintf_r+0x24c>
 80105e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80105e4:	f04f 0901 	mov.w	r9, #1
 80105e8:	4623      	mov	r3, r4
 80105ea:	469a      	mov	sl, r3
 80105ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105f0:	b10a      	cbz	r2, 80105f6 <_vfiprintf_r+0xa2>
 80105f2:	2a25      	cmp	r2, #37	; 0x25
 80105f4:	d1f9      	bne.n	80105ea <_vfiprintf_r+0x96>
 80105f6:	ebba 0b04 	subs.w	fp, sl, r4
 80105fa:	d00b      	beq.n	8010614 <_vfiprintf_r+0xc0>
 80105fc:	465b      	mov	r3, fp
 80105fe:	4622      	mov	r2, r4
 8010600:	4629      	mov	r1, r5
 8010602:	4630      	mov	r0, r6
 8010604:	f7ff ff93 	bl	801052e <__sfputs_r>
 8010608:	3001      	adds	r0, #1
 801060a:	f000 80aa 	beq.w	8010762 <_vfiprintf_r+0x20e>
 801060e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010610:	445a      	add	r2, fp
 8010612:	9209      	str	r2, [sp, #36]	; 0x24
 8010614:	f89a 3000 	ldrb.w	r3, [sl]
 8010618:	2b00      	cmp	r3, #0
 801061a:	f000 80a2 	beq.w	8010762 <_vfiprintf_r+0x20e>
 801061e:	2300      	movs	r3, #0
 8010620:	f04f 32ff 	mov.w	r2, #4294967295
 8010624:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010628:	f10a 0a01 	add.w	sl, sl, #1
 801062c:	9304      	str	r3, [sp, #16]
 801062e:	9307      	str	r3, [sp, #28]
 8010630:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010634:	931a      	str	r3, [sp, #104]	; 0x68
 8010636:	4654      	mov	r4, sl
 8010638:	2205      	movs	r2, #5
 801063a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801063e:	4858      	ldr	r0, [pc, #352]	; (80107a0 <_vfiprintf_r+0x24c>)
 8010640:	f7ef fdfe 	bl	8000240 <memchr>
 8010644:	9a04      	ldr	r2, [sp, #16]
 8010646:	b9d8      	cbnz	r0, 8010680 <_vfiprintf_r+0x12c>
 8010648:	06d1      	lsls	r1, r2, #27
 801064a:	bf44      	itt	mi
 801064c:	2320      	movmi	r3, #32
 801064e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010652:	0713      	lsls	r3, r2, #28
 8010654:	bf44      	itt	mi
 8010656:	232b      	movmi	r3, #43	; 0x2b
 8010658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801065c:	f89a 3000 	ldrb.w	r3, [sl]
 8010660:	2b2a      	cmp	r3, #42	; 0x2a
 8010662:	d015      	beq.n	8010690 <_vfiprintf_r+0x13c>
 8010664:	9a07      	ldr	r2, [sp, #28]
 8010666:	4654      	mov	r4, sl
 8010668:	2000      	movs	r0, #0
 801066a:	f04f 0c0a 	mov.w	ip, #10
 801066e:	4621      	mov	r1, r4
 8010670:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010674:	3b30      	subs	r3, #48	; 0x30
 8010676:	2b09      	cmp	r3, #9
 8010678:	d94e      	bls.n	8010718 <_vfiprintf_r+0x1c4>
 801067a:	b1b0      	cbz	r0, 80106aa <_vfiprintf_r+0x156>
 801067c:	9207      	str	r2, [sp, #28]
 801067e:	e014      	b.n	80106aa <_vfiprintf_r+0x156>
 8010680:	eba0 0308 	sub.w	r3, r0, r8
 8010684:	fa09 f303 	lsl.w	r3, r9, r3
 8010688:	4313      	orrs	r3, r2
 801068a:	9304      	str	r3, [sp, #16]
 801068c:	46a2      	mov	sl, r4
 801068e:	e7d2      	b.n	8010636 <_vfiprintf_r+0xe2>
 8010690:	9b03      	ldr	r3, [sp, #12]
 8010692:	1d19      	adds	r1, r3, #4
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	9103      	str	r1, [sp, #12]
 8010698:	2b00      	cmp	r3, #0
 801069a:	bfbb      	ittet	lt
 801069c:	425b      	neglt	r3, r3
 801069e:	f042 0202 	orrlt.w	r2, r2, #2
 80106a2:	9307      	strge	r3, [sp, #28]
 80106a4:	9307      	strlt	r3, [sp, #28]
 80106a6:	bfb8      	it	lt
 80106a8:	9204      	strlt	r2, [sp, #16]
 80106aa:	7823      	ldrb	r3, [r4, #0]
 80106ac:	2b2e      	cmp	r3, #46	; 0x2e
 80106ae:	d10c      	bne.n	80106ca <_vfiprintf_r+0x176>
 80106b0:	7863      	ldrb	r3, [r4, #1]
 80106b2:	2b2a      	cmp	r3, #42	; 0x2a
 80106b4:	d135      	bne.n	8010722 <_vfiprintf_r+0x1ce>
 80106b6:	9b03      	ldr	r3, [sp, #12]
 80106b8:	1d1a      	adds	r2, r3, #4
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	9203      	str	r2, [sp, #12]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	bfb8      	it	lt
 80106c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80106c6:	3402      	adds	r4, #2
 80106c8:	9305      	str	r3, [sp, #20]
 80106ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80107b0 <_vfiprintf_r+0x25c>
 80106ce:	7821      	ldrb	r1, [r4, #0]
 80106d0:	2203      	movs	r2, #3
 80106d2:	4650      	mov	r0, sl
 80106d4:	f7ef fdb4 	bl	8000240 <memchr>
 80106d8:	b140      	cbz	r0, 80106ec <_vfiprintf_r+0x198>
 80106da:	2340      	movs	r3, #64	; 0x40
 80106dc:	eba0 000a 	sub.w	r0, r0, sl
 80106e0:	fa03 f000 	lsl.w	r0, r3, r0
 80106e4:	9b04      	ldr	r3, [sp, #16]
 80106e6:	4303      	orrs	r3, r0
 80106e8:	3401      	adds	r4, #1
 80106ea:	9304      	str	r3, [sp, #16]
 80106ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106f0:	482c      	ldr	r0, [pc, #176]	; (80107a4 <_vfiprintf_r+0x250>)
 80106f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80106f6:	2206      	movs	r2, #6
 80106f8:	f7ef fda2 	bl	8000240 <memchr>
 80106fc:	2800      	cmp	r0, #0
 80106fe:	d03f      	beq.n	8010780 <_vfiprintf_r+0x22c>
 8010700:	4b29      	ldr	r3, [pc, #164]	; (80107a8 <_vfiprintf_r+0x254>)
 8010702:	bb1b      	cbnz	r3, 801074c <_vfiprintf_r+0x1f8>
 8010704:	9b03      	ldr	r3, [sp, #12]
 8010706:	3307      	adds	r3, #7
 8010708:	f023 0307 	bic.w	r3, r3, #7
 801070c:	3308      	adds	r3, #8
 801070e:	9303      	str	r3, [sp, #12]
 8010710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010712:	443b      	add	r3, r7
 8010714:	9309      	str	r3, [sp, #36]	; 0x24
 8010716:	e767      	b.n	80105e8 <_vfiprintf_r+0x94>
 8010718:	fb0c 3202 	mla	r2, ip, r2, r3
 801071c:	460c      	mov	r4, r1
 801071e:	2001      	movs	r0, #1
 8010720:	e7a5      	b.n	801066e <_vfiprintf_r+0x11a>
 8010722:	2300      	movs	r3, #0
 8010724:	3401      	adds	r4, #1
 8010726:	9305      	str	r3, [sp, #20]
 8010728:	4619      	mov	r1, r3
 801072a:	f04f 0c0a 	mov.w	ip, #10
 801072e:	4620      	mov	r0, r4
 8010730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010734:	3a30      	subs	r2, #48	; 0x30
 8010736:	2a09      	cmp	r2, #9
 8010738:	d903      	bls.n	8010742 <_vfiprintf_r+0x1ee>
 801073a:	2b00      	cmp	r3, #0
 801073c:	d0c5      	beq.n	80106ca <_vfiprintf_r+0x176>
 801073e:	9105      	str	r1, [sp, #20]
 8010740:	e7c3      	b.n	80106ca <_vfiprintf_r+0x176>
 8010742:	fb0c 2101 	mla	r1, ip, r1, r2
 8010746:	4604      	mov	r4, r0
 8010748:	2301      	movs	r3, #1
 801074a:	e7f0      	b.n	801072e <_vfiprintf_r+0x1da>
 801074c:	ab03      	add	r3, sp, #12
 801074e:	9300      	str	r3, [sp, #0]
 8010750:	462a      	mov	r2, r5
 8010752:	4b16      	ldr	r3, [pc, #88]	; (80107ac <_vfiprintf_r+0x258>)
 8010754:	a904      	add	r1, sp, #16
 8010756:	4630      	mov	r0, r6
 8010758:	f7fb ffe4 	bl	800c724 <_printf_float>
 801075c:	4607      	mov	r7, r0
 801075e:	1c78      	adds	r0, r7, #1
 8010760:	d1d6      	bne.n	8010710 <_vfiprintf_r+0x1bc>
 8010762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010764:	07d9      	lsls	r1, r3, #31
 8010766:	d405      	bmi.n	8010774 <_vfiprintf_r+0x220>
 8010768:	89ab      	ldrh	r3, [r5, #12]
 801076a:	059a      	lsls	r2, r3, #22
 801076c:	d402      	bmi.n	8010774 <_vfiprintf_r+0x220>
 801076e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010770:	f7fe ff76 	bl	800f660 <__retarget_lock_release_recursive>
 8010774:	89ab      	ldrh	r3, [r5, #12]
 8010776:	065b      	lsls	r3, r3, #25
 8010778:	f53f af12 	bmi.w	80105a0 <_vfiprintf_r+0x4c>
 801077c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801077e:	e711      	b.n	80105a4 <_vfiprintf_r+0x50>
 8010780:	ab03      	add	r3, sp, #12
 8010782:	9300      	str	r3, [sp, #0]
 8010784:	462a      	mov	r2, r5
 8010786:	4b09      	ldr	r3, [pc, #36]	; (80107ac <_vfiprintf_r+0x258>)
 8010788:	a904      	add	r1, sp, #16
 801078a:	4630      	mov	r0, r6
 801078c:	f7fc fa6e 	bl	800cc6c <_printf_i>
 8010790:	e7e4      	b.n	801075c <_vfiprintf_r+0x208>
 8010792:	bf00      	nop
 8010794:	08012010 	.word	0x08012010
 8010798:	08012030 	.word	0x08012030
 801079c:	08011ff0 	.word	0x08011ff0
 80107a0:	0801222c 	.word	0x0801222c
 80107a4:	08012236 	.word	0x08012236
 80107a8:	0800c725 	.word	0x0800c725
 80107ac:	0801052f 	.word	0x0801052f
 80107b0:	08012232 	.word	0x08012232
 80107b4:	00000000 	.word	0x00000000

080107b8 <nan>:
 80107b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80107c0 <nan+0x8>
 80107bc:	4770      	bx	lr
 80107be:	bf00      	nop
 80107c0:	00000000 	.word	0x00000000
 80107c4:	7ff80000 	.word	0x7ff80000

080107c8 <_sbrk_r>:
 80107c8:	b538      	push	{r3, r4, r5, lr}
 80107ca:	4d06      	ldr	r5, [pc, #24]	; (80107e4 <_sbrk_r+0x1c>)
 80107cc:	2300      	movs	r3, #0
 80107ce:	4604      	mov	r4, r0
 80107d0:	4608      	mov	r0, r1
 80107d2:	602b      	str	r3, [r5, #0]
 80107d4:	f7f5 fed8 	bl	8006588 <_sbrk>
 80107d8:	1c43      	adds	r3, r0, #1
 80107da:	d102      	bne.n	80107e2 <_sbrk_r+0x1a>
 80107dc:	682b      	ldr	r3, [r5, #0]
 80107de:	b103      	cbz	r3, 80107e2 <_sbrk_r+0x1a>
 80107e0:	6023      	str	r3, [r4, #0]
 80107e2:	bd38      	pop	{r3, r4, r5, pc}
 80107e4:	2000aa6c 	.word	0x2000aa6c

080107e8 <__sread>:
 80107e8:	b510      	push	{r4, lr}
 80107ea:	460c      	mov	r4, r1
 80107ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107f0:	f000 f92e 	bl	8010a50 <_read_r>
 80107f4:	2800      	cmp	r0, #0
 80107f6:	bfab      	itete	ge
 80107f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80107fa:	89a3      	ldrhlt	r3, [r4, #12]
 80107fc:	181b      	addge	r3, r3, r0
 80107fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010802:	bfac      	ite	ge
 8010804:	6563      	strge	r3, [r4, #84]	; 0x54
 8010806:	81a3      	strhlt	r3, [r4, #12]
 8010808:	bd10      	pop	{r4, pc}

0801080a <__swrite>:
 801080a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801080e:	461f      	mov	r7, r3
 8010810:	898b      	ldrh	r3, [r1, #12]
 8010812:	05db      	lsls	r3, r3, #23
 8010814:	4605      	mov	r5, r0
 8010816:	460c      	mov	r4, r1
 8010818:	4616      	mov	r6, r2
 801081a:	d505      	bpl.n	8010828 <__swrite+0x1e>
 801081c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010820:	2302      	movs	r3, #2
 8010822:	2200      	movs	r2, #0
 8010824:	f000 f8b6 	bl	8010994 <_lseek_r>
 8010828:	89a3      	ldrh	r3, [r4, #12]
 801082a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801082e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010832:	81a3      	strh	r3, [r4, #12]
 8010834:	4632      	mov	r2, r6
 8010836:	463b      	mov	r3, r7
 8010838:	4628      	mov	r0, r5
 801083a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801083e:	f000 b835 	b.w	80108ac <_write_r>

08010842 <__sseek>:
 8010842:	b510      	push	{r4, lr}
 8010844:	460c      	mov	r4, r1
 8010846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801084a:	f000 f8a3 	bl	8010994 <_lseek_r>
 801084e:	1c43      	adds	r3, r0, #1
 8010850:	89a3      	ldrh	r3, [r4, #12]
 8010852:	bf15      	itete	ne
 8010854:	6560      	strne	r0, [r4, #84]	; 0x54
 8010856:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801085a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801085e:	81a3      	strheq	r3, [r4, #12]
 8010860:	bf18      	it	ne
 8010862:	81a3      	strhne	r3, [r4, #12]
 8010864:	bd10      	pop	{r4, pc}

08010866 <__sclose>:
 8010866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801086a:	f000 b84f 	b.w	801090c <_close_r>

0801086e <strncmp>:
 801086e:	b510      	push	{r4, lr}
 8010870:	b16a      	cbz	r2, 801088e <strncmp+0x20>
 8010872:	3901      	subs	r1, #1
 8010874:	1884      	adds	r4, r0, r2
 8010876:	f810 3b01 	ldrb.w	r3, [r0], #1
 801087a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801087e:	4293      	cmp	r3, r2
 8010880:	d103      	bne.n	801088a <strncmp+0x1c>
 8010882:	42a0      	cmp	r0, r4
 8010884:	d001      	beq.n	801088a <strncmp+0x1c>
 8010886:	2b00      	cmp	r3, #0
 8010888:	d1f5      	bne.n	8010876 <strncmp+0x8>
 801088a:	1a98      	subs	r0, r3, r2
 801088c:	bd10      	pop	{r4, pc}
 801088e:	4610      	mov	r0, r2
 8010890:	e7fc      	b.n	801088c <strncmp+0x1e>

08010892 <__ascii_wctomb>:
 8010892:	b149      	cbz	r1, 80108a8 <__ascii_wctomb+0x16>
 8010894:	2aff      	cmp	r2, #255	; 0xff
 8010896:	bf85      	ittet	hi
 8010898:	238a      	movhi	r3, #138	; 0x8a
 801089a:	6003      	strhi	r3, [r0, #0]
 801089c:	700a      	strbls	r2, [r1, #0]
 801089e:	f04f 30ff 	movhi.w	r0, #4294967295
 80108a2:	bf98      	it	ls
 80108a4:	2001      	movls	r0, #1
 80108a6:	4770      	bx	lr
 80108a8:	4608      	mov	r0, r1
 80108aa:	4770      	bx	lr

080108ac <_write_r>:
 80108ac:	b538      	push	{r3, r4, r5, lr}
 80108ae:	4d07      	ldr	r5, [pc, #28]	; (80108cc <_write_r+0x20>)
 80108b0:	4604      	mov	r4, r0
 80108b2:	4608      	mov	r0, r1
 80108b4:	4611      	mov	r1, r2
 80108b6:	2200      	movs	r2, #0
 80108b8:	602a      	str	r2, [r5, #0]
 80108ba:	461a      	mov	r2, r3
 80108bc:	f7f5 fe13 	bl	80064e6 <_write>
 80108c0:	1c43      	adds	r3, r0, #1
 80108c2:	d102      	bne.n	80108ca <_write_r+0x1e>
 80108c4:	682b      	ldr	r3, [r5, #0]
 80108c6:	b103      	cbz	r3, 80108ca <_write_r+0x1e>
 80108c8:	6023      	str	r3, [r4, #0]
 80108ca:	bd38      	pop	{r3, r4, r5, pc}
 80108cc:	2000aa6c 	.word	0x2000aa6c

080108d0 <__assert_func>:
 80108d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80108d2:	4614      	mov	r4, r2
 80108d4:	461a      	mov	r2, r3
 80108d6:	4b09      	ldr	r3, [pc, #36]	; (80108fc <__assert_func+0x2c>)
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	4605      	mov	r5, r0
 80108dc:	68d8      	ldr	r0, [r3, #12]
 80108de:	b14c      	cbz	r4, 80108f4 <__assert_func+0x24>
 80108e0:	4b07      	ldr	r3, [pc, #28]	; (8010900 <__assert_func+0x30>)
 80108e2:	9100      	str	r1, [sp, #0]
 80108e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80108e8:	4906      	ldr	r1, [pc, #24]	; (8010904 <__assert_func+0x34>)
 80108ea:	462b      	mov	r3, r5
 80108ec:	f000 f81e 	bl	801092c <fiprintf>
 80108f0:	f000 f8c0 	bl	8010a74 <abort>
 80108f4:	4b04      	ldr	r3, [pc, #16]	; (8010908 <__assert_func+0x38>)
 80108f6:	461c      	mov	r4, r3
 80108f8:	e7f3      	b.n	80108e2 <__assert_func+0x12>
 80108fa:	bf00      	nop
 80108fc:	2000004c 	.word	0x2000004c
 8010900:	0801223d 	.word	0x0801223d
 8010904:	0801224a 	.word	0x0801224a
 8010908:	08012278 	.word	0x08012278

0801090c <_close_r>:
 801090c:	b538      	push	{r3, r4, r5, lr}
 801090e:	4d06      	ldr	r5, [pc, #24]	; (8010928 <_close_r+0x1c>)
 8010910:	2300      	movs	r3, #0
 8010912:	4604      	mov	r4, r0
 8010914:	4608      	mov	r0, r1
 8010916:	602b      	str	r3, [r5, #0]
 8010918:	f7f5 fe01 	bl	800651e <_close>
 801091c:	1c43      	adds	r3, r0, #1
 801091e:	d102      	bne.n	8010926 <_close_r+0x1a>
 8010920:	682b      	ldr	r3, [r5, #0]
 8010922:	b103      	cbz	r3, 8010926 <_close_r+0x1a>
 8010924:	6023      	str	r3, [r4, #0]
 8010926:	bd38      	pop	{r3, r4, r5, pc}
 8010928:	2000aa6c 	.word	0x2000aa6c

0801092c <fiprintf>:
 801092c:	b40e      	push	{r1, r2, r3}
 801092e:	b503      	push	{r0, r1, lr}
 8010930:	4601      	mov	r1, r0
 8010932:	ab03      	add	r3, sp, #12
 8010934:	4805      	ldr	r0, [pc, #20]	; (801094c <fiprintf+0x20>)
 8010936:	f853 2b04 	ldr.w	r2, [r3], #4
 801093a:	6800      	ldr	r0, [r0, #0]
 801093c:	9301      	str	r3, [sp, #4]
 801093e:	f7ff fe09 	bl	8010554 <_vfiprintf_r>
 8010942:	b002      	add	sp, #8
 8010944:	f85d eb04 	ldr.w	lr, [sp], #4
 8010948:	b003      	add	sp, #12
 801094a:	4770      	bx	lr
 801094c:	2000004c 	.word	0x2000004c

08010950 <_fstat_r>:
 8010950:	b538      	push	{r3, r4, r5, lr}
 8010952:	4d07      	ldr	r5, [pc, #28]	; (8010970 <_fstat_r+0x20>)
 8010954:	2300      	movs	r3, #0
 8010956:	4604      	mov	r4, r0
 8010958:	4608      	mov	r0, r1
 801095a:	4611      	mov	r1, r2
 801095c:	602b      	str	r3, [r5, #0]
 801095e:	f7f5 fdea 	bl	8006536 <_fstat>
 8010962:	1c43      	adds	r3, r0, #1
 8010964:	d102      	bne.n	801096c <_fstat_r+0x1c>
 8010966:	682b      	ldr	r3, [r5, #0]
 8010968:	b103      	cbz	r3, 801096c <_fstat_r+0x1c>
 801096a:	6023      	str	r3, [r4, #0]
 801096c:	bd38      	pop	{r3, r4, r5, pc}
 801096e:	bf00      	nop
 8010970:	2000aa6c 	.word	0x2000aa6c

08010974 <_isatty_r>:
 8010974:	b538      	push	{r3, r4, r5, lr}
 8010976:	4d06      	ldr	r5, [pc, #24]	; (8010990 <_isatty_r+0x1c>)
 8010978:	2300      	movs	r3, #0
 801097a:	4604      	mov	r4, r0
 801097c:	4608      	mov	r0, r1
 801097e:	602b      	str	r3, [r5, #0]
 8010980:	f7f5 fde9 	bl	8006556 <_isatty>
 8010984:	1c43      	adds	r3, r0, #1
 8010986:	d102      	bne.n	801098e <_isatty_r+0x1a>
 8010988:	682b      	ldr	r3, [r5, #0]
 801098a:	b103      	cbz	r3, 801098e <_isatty_r+0x1a>
 801098c:	6023      	str	r3, [r4, #0]
 801098e:	bd38      	pop	{r3, r4, r5, pc}
 8010990:	2000aa6c 	.word	0x2000aa6c

08010994 <_lseek_r>:
 8010994:	b538      	push	{r3, r4, r5, lr}
 8010996:	4d07      	ldr	r5, [pc, #28]	; (80109b4 <_lseek_r+0x20>)
 8010998:	4604      	mov	r4, r0
 801099a:	4608      	mov	r0, r1
 801099c:	4611      	mov	r1, r2
 801099e:	2200      	movs	r2, #0
 80109a0:	602a      	str	r2, [r5, #0]
 80109a2:	461a      	mov	r2, r3
 80109a4:	f7f5 fde2 	bl	800656c <_lseek>
 80109a8:	1c43      	adds	r3, r0, #1
 80109aa:	d102      	bne.n	80109b2 <_lseek_r+0x1e>
 80109ac:	682b      	ldr	r3, [r5, #0]
 80109ae:	b103      	cbz	r3, 80109b2 <_lseek_r+0x1e>
 80109b0:	6023      	str	r3, [r4, #0]
 80109b2:	bd38      	pop	{r3, r4, r5, pc}
 80109b4:	2000aa6c 	.word	0x2000aa6c

080109b8 <memmove>:
 80109b8:	4288      	cmp	r0, r1
 80109ba:	b510      	push	{r4, lr}
 80109bc:	eb01 0402 	add.w	r4, r1, r2
 80109c0:	d902      	bls.n	80109c8 <memmove+0x10>
 80109c2:	4284      	cmp	r4, r0
 80109c4:	4623      	mov	r3, r4
 80109c6:	d807      	bhi.n	80109d8 <memmove+0x20>
 80109c8:	1e43      	subs	r3, r0, #1
 80109ca:	42a1      	cmp	r1, r4
 80109cc:	d008      	beq.n	80109e0 <memmove+0x28>
 80109ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80109d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80109d6:	e7f8      	b.n	80109ca <memmove+0x12>
 80109d8:	4402      	add	r2, r0
 80109da:	4601      	mov	r1, r0
 80109dc:	428a      	cmp	r2, r1
 80109de:	d100      	bne.n	80109e2 <memmove+0x2a>
 80109e0:	bd10      	pop	{r4, pc}
 80109e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80109e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80109ea:	e7f7      	b.n	80109dc <memmove+0x24>

080109ec <__malloc_lock>:
 80109ec:	4801      	ldr	r0, [pc, #4]	; (80109f4 <__malloc_lock+0x8>)
 80109ee:	f7fe be36 	b.w	800f65e <__retarget_lock_acquire_recursive>
 80109f2:	bf00      	nop
 80109f4:	2000aa64 	.word	0x2000aa64

080109f8 <__malloc_unlock>:
 80109f8:	4801      	ldr	r0, [pc, #4]	; (8010a00 <__malloc_unlock+0x8>)
 80109fa:	f7fe be31 	b.w	800f660 <__retarget_lock_release_recursive>
 80109fe:	bf00      	nop
 8010a00:	2000aa64 	.word	0x2000aa64

08010a04 <_realloc_r>:
 8010a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a06:	4607      	mov	r7, r0
 8010a08:	4614      	mov	r4, r2
 8010a0a:	460e      	mov	r6, r1
 8010a0c:	b921      	cbnz	r1, 8010a18 <_realloc_r+0x14>
 8010a0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010a12:	4611      	mov	r1, r2
 8010a14:	f7ff bbbe 	b.w	8010194 <_malloc_r>
 8010a18:	b922      	cbnz	r2, 8010a24 <_realloc_r+0x20>
 8010a1a:	f7ff fb6b 	bl	80100f4 <_free_r>
 8010a1e:	4625      	mov	r5, r4
 8010a20:	4628      	mov	r0, r5
 8010a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a24:	f000 f82d 	bl	8010a82 <_malloc_usable_size_r>
 8010a28:	42a0      	cmp	r0, r4
 8010a2a:	d20f      	bcs.n	8010a4c <_realloc_r+0x48>
 8010a2c:	4621      	mov	r1, r4
 8010a2e:	4638      	mov	r0, r7
 8010a30:	f7ff fbb0 	bl	8010194 <_malloc_r>
 8010a34:	4605      	mov	r5, r0
 8010a36:	2800      	cmp	r0, #0
 8010a38:	d0f2      	beq.n	8010a20 <_realloc_r+0x1c>
 8010a3a:	4631      	mov	r1, r6
 8010a3c:	4622      	mov	r2, r4
 8010a3e:	f7fb fdbb 	bl	800c5b8 <memcpy>
 8010a42:	4631      	mov	r1, r6
 8010a44:	4638      	mov	r0, r7
 8010a46:	f7ff fb55 	bl	80100f4 <_free_r>
 8010a4a:	e7e9      	b.n	8010a20 <_realloc_r+0x1c>
 8010a4c:	4635      	mov	r5, r6
 8010a4e:	e7e7      	b.n	8010a20 <_realloc_r+0x1c>

08010a50 <_read_r>:
 8010a50:	b538      	push	{r3, r4, r5, lr}
 8010a52:	4d07      	ldr	r5, [pc, #28]	; (8010a70 <_read_r+0x20>)
 8010a54:	4604      	mov	r4, r0
 8010a56:	4608      	mov	r0, r1
 8010a58:	4611      	mov	r1, r2
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	602a      	str	r2, [r5, #0]
 8010a5e:	461a      	mov	r2, r3
 8010a60:	f7f5 fd24 	bl	80064ac <_read>
 8010a64:	1c43      	adds	r3, r0, #1
 8010a66:	d102      	bne.n	8010a6e <_read_r+0x1e>
 8010a68:	682b      	ldr	r3, [r5, #0]
 8010a6a:	b103      	cbz	r3, 8010a6e <_read_r+0x1e>
 8010a6c:	6023      	str	r3, [r4, #0]
 8010a6e:	bd38      	pop	{r3, r4, r5, pc}
 8010a70:	2000aa6c 	.word	0x2000aa6c

08010a74 <abort>:
 8010a74:	b508      	push	{r3, lr}
 8010a76:	2006      	movs	r0, #6
 8010a78:	f000 f834 	bl	8010ae4 <raise>
 8010a7c:	2001      	movs	r0, #1
 8010a7e:	f7f5 fd0b 	bl	8006498 <_exit>

08010a82 <_malloc_usable_size_r>:
 8010a82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a86:	1f18      	subs	r0, r3, #4
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	bfbc      	itt	lt
 8010a8c:	580b      	ldrlt	r3, [r1, r0]
 8010a8e:	18c0      	addlt	r0, r0, r3
 8010a90:	4770      	bx	lr

08010a92 <_raise_r>:
 8010a92:	291f      	cmp	r1, #31
 8010a94:	b538      	push	{r3, r4, r5, lr}
 8010a96:	4604      	mov	r4, r0
 8010a98:	460d      	mov	r5, r1
 8010a9a:	d904      	bls.n	8010aa6 <_raise_r+0x14>
 8010a9c:	2316      	movs	r3, #22
 8010a9e:	6003      	str	r3, [r0, #0]
 8010aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8010aa4:	bd38      	pop	{r3, r4, r5, pc}
 8010aa6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010aa8:	b112      	cbz	r2, 8010ab0 <_raise_r+0x1e>
 8010aaa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010aae:	b94b      	cbnz	r3, 8010ac4 <_raise_r+0x32>
 8010ab0:	4620      	mov	r0, r4
 8010ab2:	f000 f831 	bl	8010b18 <_getpid_r>
 8010ab6:	462a      	mov	r2, r5
 8010ab8:	4601      	mov	r1, r0
 8010aba:	4620      	mov	r0, r4
 8010abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ac0:	f000 b818 	b.w	8010af4 <_kill_r>
 8010ac4:	2b01      	cmp	r3, #1
 8010ac6:	d00a      	beq.n	8010ade <_raise_r+0x4c>
 8010ac8:	1c59      	adds	r1, r3, #1
 8010aca:	d103      	bne.n	8010ad4 <_raise_r+0x42>
 8010acc:	2316      	movs	r3, #22
 8010ace:	6003      	str	r3, [r0, #0]
 8010ad0:	2001      	movs	r0, #1
 8010ad2:	e7e7      	b.n	8010aa4 <_raise_r+0x12>
 8010ad4:	2400      	movs	r4, #0
 8010ad6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010ada:	4628      	mov	r0, r5
 8010adc:	4798      	blx	r3
 8010ade:	2000      	movs	r0, #0
 8010ae0:	e7e0      	b.n	8010aa4 <_raise_r+0x12>
	...

08010ae4 <raise>:
 8010ae4:	4b02      	ldr	r3, [pc, #8]	; (8010af0 <raise+0xc>)
 8010ae6:	4601      	mov	r1, r0
 8010ae8:	6818      	ldr	r0, [r3, #0]
 8010aea:	f7ff bfd2 	b.w	8010a92 <_raise_r>
 8010aee:	bf00      	nop
 8010af0:	2000004c 	.word	0x2000004c

08010af4 <_kill_r>:
 8010af4:	b538      	push	{r3, r4, r5, lr}
 8010af6:	4d07      	ldr	r5, [pc, #28]	; (8010b14 <_kill_r+0x20>)
 8010af8:	2300      	movs	r3, #0
 8010afa:	4604      	mov	r4, r0
 8010afc:	4608      	mov	r0, r1
 8010afe:	4611      	mov	r1, r2
 8010b00:	602b      	str	r3, [r5, #0]
 8010b02:	f7f5 fcb9 	bl	8006478 <_kill>
 8010b06:	1c43      	adds	r3, r0, #1
 8010b08:	d102      	bne.n	8010b10 <_kill_r+0x1c>
 8010b0a:	682b      	ldr	r3, [r5, #0]
 8010b0c:	b103      	cbz	r3, 8010b10 <_kill_r+0x1c>
 8010b0e:	6023      	str	r3, [r4, #0]
 8010b10:	bd38      	pop	{r3, r4, r5, pc}
 8010b12:	bf00      	nop
 8010b14:	2000aa6c 	.word	0x2000aa6c

08010b18 <_getpid_r>:
 8010b18:	f7f5 bca6 	b.w	8006468 <_getpid>

08010b1c <_init>:
 8010b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b1e:	bf00      	nop
 8010b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b22:	bc08      	pop	{r3}
 8010b24:	469e      	mov	lr, r3
 8010b26:	4770      	bx	lr

08010b28 <_fini>:
 8010b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b2a:	bf00      	nop
 8010b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b2e:	bc08      	pop	{r3}
 8010b30:	469e      	mov	lr, r3
 8010b32:	4770      	bx	lr
