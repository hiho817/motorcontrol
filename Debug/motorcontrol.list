
motorcontrol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000107b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000181c  08010988  08010988  00020988  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080121a4  080121a4  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  080121a4  080121a4  000221a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080121ac  080121ac  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080121ac  080121ac  000221ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080121b0  080121b0  000221b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  080121b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a850  20000220  080123d4  00030220  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000aa70  080123d4  0003aa70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .debug_info   000269f0  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f3e  00000000  00000000  00056c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001808  00000000  00000000  0005bb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001608  00000000  00000000  0005d388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ce5  00000000  00000000  0005e990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f84e  00000000  00000000  00088675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e860e  00000000  00000000  000a7ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001904d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ae8  00000000  00000000  00190524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801096c 	.word	0x0801096c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	0801096c 	.word	0x0801096c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a4 	b.w	8001048 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468c      	mov	ip, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f040 8083 	bne.w	8000e9a <__udivmoddi4+0x116>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4617      	mov	r7, r2
 8000d98:	d947      	bls.n	8000e2a <__udivmoddi4+0xa6>
 8000d9a:	fab2 f282 	clz	r2, r2
 8000d9e:	b142      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000da0:	f1c2 0020 	rsb	r0, r2, #32
 8000da4:	fa24 f000 	lsr.w	r0, r4, r0
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4097      	lsls	r7, r2
 8000dac:	ea40 0c01 	orr.w	ip, r0, r1
 8000db0:	4094      	lsls	r4, r2
 8000db2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000db6:	0c23      	lsrs	r3, r4, #16
 8000db8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dbc:	fa1f fe87 	uxth.w	lr, r7
 8000dc0:	fb08 c116 	mls	r1, r8, r6, ip
 8000dc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x60>
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dd6:	f080 8119 	bcs.w	800100c <__udivmoddi4+0x288>
 8000dda:	4299      	cmp	r1, r3
 8000ddc:	f240 8116 	bls.w	800100c <__udivmoddi4+0x288>
 8000de0:	3e02      	subs	r6, #2
 8000de2:	443b      	add	r3, r7
 8000de4:	1a5b      	subs	r3, r3, r1
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dec:	fb08 3310 	mls	r3, r8, r0, r3
 8000df0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d909      	bls.n	8000e10 <__udivmoddi4+0x8c>
 8000dfc:	193c      	adds	r4, r7, r4
 8000dfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e02:	f080 8105 	bcs.w	8001010 <__udivmoddi4+0x28c>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f240 8102 	bls.w	8001010 <__udivmoddi4+0x28c>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	443c      	add	r4, r7
 8000e10:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e14:	eba4 040e 	sub.w	r4, r4, lr
 8000e18:	2600      	movs	r6, #0
 8000e1a:	b11d      	cbz	r5, 8000e24 <__udivmoddi4+0xa0>
 8000e1c:	40d4      	lsrs	r4, r2
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e9c5 4300 	strd	r4, r3, [r5]
 8000e24:	4631      	mov	r1, r6
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	b902      	cbnz	r2, 8000e2e <__udivmoddi4+0xaa>
 8000e2c:	deff      	udf	#255	; 0xff
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	d150      	bne.n	8000ed8 <__udivmoddi4+0x154>
 8000e36:	1bcb      	subs	r3, r1, r7
 8000e38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3c:	fa1f f887 	uxth.w	r8, r7
 8000e40:	2601      	movs	r6, #1
 8000e42:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e46:	0c21      	lsrs	r1, r4, #16
 8000e48:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e50:	fb08 f30c 	mul.w	r3, r8, ip
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0xe4>
 8000e58:	1879      	adds	r1, r7, r1
 8000e5a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0xe2>
 8000e60:	428b      	cmp	r3, r1
 8000e62:	f200 80e9 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e66:	4684      	mov	ip, r0
 8000e68:	1ac9      	subs	r1, r1, r3
 8000e6a:	b2a3      	uxth	r3, r4
 8000e6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e70:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e74:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e78:	fb08 f800 	mul.w	r8, r8, r0
 8000e7c:	45a0      	cmp	r8, r4
 8000e7e:	d907      	bls.n	8000e90 <__udivmoddi4+0x10c>
 8000e80:	193c      	adds	r4, r7, r4
 8000e82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x10a>
 8000e88:	45a0      	cmp	r8, r4
 8000e8a:	f200 80d9 	bhi.w	8001040 <__udivmoddi4+0x2bc>
 8000e8e:	4618      	mov	r0, r3
 8000e90:	eba4 0408 	sub.w	r4, r4, r8
 8000e94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e98:	e7bf      	b.n	8000e1a <__udivmoddi4+0x96>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d909      	bls.n	8000eb2 <__udivmoddi4+0x12e>
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	f000 80b1 	beq.w	8001006 <__udivmoddi4+0x282>
 8000ea4:	2600      	movs	r6, #0
 8000ea6:	e9c5 0100 	strd	r0, r1, [r5]
 8000eaa:	4630      	mov	r0, r6
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	fab3 f683 	clz	r6, r3
 8000eb6:	2e00      	cmp	r6, #0
 8000eb8:	d14a      	bne.n	8000f50 <__udivmoddi4+0x1cc>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d302      	bcc.n	8000ec4 <__udivmoddi4+0x140>
 8000ebe:	4282      	cmp	r2, r0
 8000ec0:	f200 80b8 	bhi.w	8001034 <__udivmoddi4+0x2b0>
 8000ec4:	1a84      	subs	r4, r0, r2
 8000ec6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eca:	2001      	movs	r0, #1
 8000ecc:	468c      	mov	ip, r1
 8000ece:	2d00      	cmp	r5, #0
 8000ed0:	d0a8      	beq.n	8000e24 <__udivmoddi4+0xa0>
 8000ed2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ed6:	e7a5      	b.n	8000e24 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ee0:	4097      	lsls	r7, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eea:	40d9      	lsrs	r1, r3
 8000eec:	4330      	orrs	r0, r6
 8000eee:	0c03      	lsrs	r3, r0, #16
 8000ef0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ef4:	fa1f f887 	uxth.w	r8, r7
 8000ef8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000efc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f00:	fb06 f108 	mul.w	r1, r6, r8
 8000f04:	4299      	cmp	r1, r3
 8000f06:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0a:	d909      	bls.n	8000f20 <__udivmoddi4+0x19c>
 8000f0c:	18fb      	adds	r3, r7, r3
 8000f0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f12:	f080 808d 	bcs.w	8001030 <__udivmoddi4+0x2ac>
 8000f16:	4299      	cmp	r1, r3
 8000f18:	f240 808a 	bls.w	8001030 <__udivmoddi4+0x2ac>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	443b      	add	r3, r7
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b281      	uxth	r1, r0
 8000f24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f30:	fb00 f308 	mul.w	r3, r0, r8
 8000f34:	428b      	cmp	r3, r1
 8000f36:	d907      	bls.n	8000f48 <__udivmoddi4+0x1c4>
 8000f38:	1879      	adds	r1, r7, r1
 8000f3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3e:	d273      	bcs.n	8001028 <__udivmoddi4+0x2a4>
 8000f40:	428b      	cmp	r3, r1
 8000f42:	d971      	bls.n	8001028 <__udivmoddi4+0x2a4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4439      	add	r1, r7
 8000f48:	1acb      	subs	r3, r1, r3
 8000f4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f4e:	e778      	b.n	8000e42 <__udivmoddi4+0xbe>
 8000f50:	f1c6 0c20 	rsb	ip, r6, #32
 8000f54:	fa03 f406 	lsl.w	r4, r3, r6
 8000f58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f5c:	431c      	orrs	r4, r3
 8000f5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f62:	fa01 f306 	lsl.w	r3, r1, r6
 8000f66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f6e:	431f      	orrs	r7, r3
 8000f70:	0c3b      	lsrs	r3, r7, #16
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fa1f f884 	uxth.w	r8, r4
 8000f7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f82:	fb09 fa08 	mul.w	sl, r9, r8
 8000f86:	458a      	cmp	sl, r1
 8000f88:	fa02 f206 	lsl.w	r2, r2, r6
 8000f8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x220>
 8000f92:	1861      	adds	r1, r4, r1
 8000f94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f98:	d248      	bcs.n	800102c <__udivmoddi4+0x2a8>
 8000f9a:	458a      	cmp	sl, r1
 8000f9c:	d946      	bls.n	800102c <__udivmoddi4+0x2a8>
 8000f9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000fa2:	4421      	add	r1, r4
 8000fa4:	eba1 010a 	sub.w	r1, r1, sl
 8000fa8:	b2bf      	uxth	r7, r7
 8000faa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fb2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fb6:	fb00 f808 	mul.w	r8, r0, r8
 8000fba:	45b8      	cmp	r8, r7
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x24a>
 8000fbe:	19e7      	adds	r7, r4, r7
 8000fc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fc4:	d22e      	bcs.n	8001024 <__udivmoddi4+0x2a0>
 8000fc6:	45b8      	cmp	r8, r7
 8000fc8:	d92c      	bls.n	8001024 <__udivmoddi4+0x2a0>
 8000fca:	3802      	subs	r0, #2
 8000fcc:	4427      	add	r7, r4
 8000fce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fd2:	eba7 0708 	sub.w	r7, r7, r8
 8000fd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fda:	454f      	cmp	r7, r9
 8000fdc:	46c6      	mov	lr, r8
 8000fde:	4649      	mov	r1, r9
 8000fe0:	d31a      	bcc.n	8001018 <__udivmoddi4+0x294>
 8000fe2:	d017      	beq.n	8001014 <__udivmoddi4+0x290>
 8000fe4:	b15d      	cbz	r5, 8000ffe <__udivmoddi4+0x27a>
 8000fe6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fea:	eb67 0701 	sbc.w	r7, r7, r1
 8000fee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ff2:	40f2      	lsrs	r2, r6
 8000ff4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ff8:	40f7      	lsrs	r7, r6
 8000ffa:	e9c5 2700 	strd	r2, r7, [r5]
 8000ffe:	2600      	movs	r6, #0
 8001000:	4631      	mov	r1, r6
 8001002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e70b      	b.n	8000e24 <__udivmoddi4+0xa0>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e9      	b.n	8000de4 <__udivmoddi4+0x60>
 8001010:	4618      	mov	r0, r3
 8001012:	e6fd      	b.n	8000e10 <__udivmoddi4+0x8c>
 8001014:	4543      	cmp	r3, r8
 8001016:	d2e5      	bcs.n	8000fe4 <__udivmoddi4+0x260>
 8001018:	ebb8 0e02 	subs.w	lr, r8, r2
 800101c:	eb69 0104 	sbc.w	r1, r9, r4
 8001020:	3801      	subs	r0, #1
 8001022:	e7df      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001024:	4608      	mov	r0, r1
 8001026:	e7d2      	b.n	8000fce <__udivmoddi4+0x24a>
 8001028:	4660      	mov	r0, ip
 800102a:	e78d      	b.n	8000f48 <__udivmoddi4+0x1c4>
 800102c:	4681      	mov	r9, r0
 800102e:	e7b9      	b.n	8000fa4 <__udivmoddi4+0x220>
 8001030:	4666      	mov	r6, ip
 8001032:	e775      	b.n	8000f20 <__udivmoddi4+0x19c>
 8001034:	4630      	mov	r0, r6
 8001036:	e74a      	b.n	8000ece <__udivmoddi4+0x14a>
 8001038:	f1ac 0c02 	sub.w	ip, ip, #2
 800103c:	4439      	add	r1, r7
 800103e:	e713      	b.n	8000e68 <__udivmoddi4+0xe4>
 8001040:	3802      	subs	r0, #2
 8001042:	443c      	add	r4, r7
 8001044:	e724      	b.n	8000e90 <__udivmoddi4+0x10c>
 8001046:	bf00      	nop

08001048 <__aeabi_idiv0>:
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800106a:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <MX_ADC1_Init+0xc8>)
 800106c:	4a2a      	ldr	r2, [pc, #168]	; (8001118 <MX_ADC1_Init+0xcc>)
 800106e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001070:	4b28      	ldr	r3, [pc, #160]	; (8001114 <MX_ADC1_Init+0xc8>)
 8001072:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001076:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001078:	4b26      	ldr	r3, [pc, #152]	; (8001114 <MX_ADC1_Init+0xc8>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800107e:	4b25      	ldr	r3, [pc, #148]	; (8001114 <MX_ADC1_Init+0xc8>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001084:	4b23      	ldr	r3, [pc, #140]	; (8001114 <MX_ADC1_Init+0xc8>)
 8001086:	2200      	movs	r2, #0
 8001088:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800108a:	4b22      	ldr	r3, [pc, #136]	; (8001114 <MX_ADC1_Init+0xc8>)
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001092:	4b20      	ldr	r3, [pc, #128]	; (8001114 <MX_ADC1_Init+0xc8>)
 8001094:	2200      	movs	r2, #0
 8001096:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001098:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <MX_ADC1_Init+0xc8>)
 800109a:	4a20      	ldr	r2, [pc, #128]	; (800111c <MX_ADC1_Init+0xd0>)
 800109c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800109e:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <MX_ADC1_Init+0xc8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <MX_ADC1_Init+0xc8>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <MX_ADC1_Init+0xc8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <MX_ADC1_Init+0xc8>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b8:	4816      	ldr	r0, [pc, #88]	; (8001114 <MX_ADC1_Init+0xc8>)
 80010ba:	f006 f8e3 	bl	8007284 <HAL_ADC_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80010c4:	f004 f82c 	bl	8005120 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 80010c8:	2316      	movs	r3, #22
 80010ca:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	4619      	mov	r1, r3
 80010da:	480e      	ldr	r0, [pc, #56]	; (8001114 <MX_ADC1_Init+0xc8>)
 80010dc:	f006 fcae 	bl	8007a3c <HAL_ADCEx_MultiModeConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80010e6:	f004 f81b 	bl	8005120 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010ea:	230a      	movs	r3, #10
 80010ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 80010ee:	2301      	movs	r3, #1
 80010f0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	4619      	mov	r1, r3
 80010fa:	4806      	ldr	r0, [pc, #24]	; (8001114 <MX_ADC1_Init+0xc8>)
 80010fc:	f006 fa70 	bl	80075e0 <HAL_ADC_ConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8001106:	f004 f80b 	bl	8005120 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	3720      	adds	r7, #32
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000370 	.word	0x20000370
 8001118:	40012000 	.word	0x40012000
 800111c:	0f000001 	.word	0x0f000001

08001120 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001126:	463b      	mov	r3, r7
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001132:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <MX_ADC2_Init+0x8c>)
 8001134:	4a1e      	ldr	r2, [pc, #120]	; (80011b0 <MX_ADC2_Init+0x90>)
 8001136:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001138:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <MX_ADC2_Init+0x8c>)
 800113a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800113e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001140:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <MX_ADC2_Init+0x8c>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <MX_ADC2_Init+0x8c>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800114c:	4b17      	ldr	r3, [pc, #92]	; (80011ac <MX_ADC2_Init+0x8c>)
 800114e:	2200      	movs	r2, #0
 8001150:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001152:	4b16      	ldr	r3, [pc, #88]	; (80011ac <MX_ADC2_Init+0x8c>)
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <MX_ADC2_Init+0x8c>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_ADC2_Init+0x8c>)
 8001162:	2201      	movs	r2, #1
 8001164:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_ADC2_Init+0x8c>)
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_ADC2_Init+0x8c>)
 8001170:	2201      	movs	r2, #1
 8001172:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001174:	480d      	ldr	r0, [pc, #52]	; (80011ac <MX_ADC2_Init+0x8c>)
 8001176:	f006 f885 	bl	8007284 <HAL_ADC_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 8001180:	f003 ffce 	bl	8005120 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001184:	230b      	movs	r3, #11
 8001186:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001188:	2301      	movs	r3, #1
 800118a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001190:	463b      	mov	r3, r7
 8001192:	4619      	mov	r1, r3
 8001194:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_ADC2_Init+0x8c>)
 8001196:	f006 fa23 	bl	80075e0 <HAL_ADC_ConfigChannel>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80011a0:	f003 ffbe 	bl	8005120 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000328 	.word	0x20000328
 80011b0:	40012100 	.word	0x40012100

080011b4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ba:	463b      	mov	r3, r7
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80011c6:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <MX_ADC3_Init+0x8c>)
 80011c8:	4a1e      	ldr	r2, [pc, #120]	; (8001244 <MX_ADC3_Init+0x90>)
 80011ca:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011cc:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <MX_ADC3_Init+0x8c>)
 80011ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011d2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <MX_ADC3_Init+0x8c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <MX_ADC3_Init+0x8c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011e0:	4b17      	ldr	r3, [pc, #92]	; (8001240 <MX_ADC3_Init+0x8c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011e6:	4b16      	ldr	r3, [pc, #88]	; (8001240 <MX_ADC3_Init+0x8c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_ADC3_Init+0x8c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <MX_ADC3_Init+0x8c>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_ADC3_Init+0x8c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_ADC3_Init+0x8c>)
 8001204:	2201      	movs	r2, #1
 8001206:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001208:	480d      	ldr	r0, [pc, #52]	; (8001240 <MX_ADC3_Init+0x8c>)
 800120a:	f006 f83b 	bl	8007284 <HAL_ADC_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_ADC3_Init+0x64>
  {
    Error_Handler();
 8001214:	f003 ff84 	bl	8005120 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001218:	2300      	movs	r3, #0
 800121a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800121c:	2301      	movs	r3, #1
 800121e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001224:	463b      	mov	r3, r7
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_ADC3_Init+0x8c>)
 800122a:	f006 f9d9 	bl	80075e0 <HAL_ADC_ConfigChannel>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8001234:	f003 ff74 	bl	8005120 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200003b8 	.word	0x200003b8
 8001244:	40012200 	.word	0x40012200

08001248 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08e      	sub	sp, #56	; 0x38
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a45      	ldr	r2, [pc, #276]	; (800137c <HAL_ADC_MspInit+0x134>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d128      	bne.n	80012bc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	4b44      	ldr	r3, [pc, #272]	; (8001380 <HAL_ADC_MspInit+0x138>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	4a43      	ldr	r2, [pc, #268]	; (8001380 <HAL_ADC_MspInit+0x138>)
 8001274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001278:	6453      	str	r3, [r2, #68]	; 0x44
 800127a:	4b41      	ldr	r3, [pc, #260]	; (8001380 <HAL_ADC_MspInit+0x138>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001282:	623b      	str	r3, [r7, #32]
 8001284:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	4b3d      	ldr	r3, [pc, #244]	; (8001380 <HAL_ADC_MspInit+0x138>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a3c      	ldr	r2, [pc, #240]	; (8001380 <HAL_ADC_MspInit+0x138>)
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b3a      	ldr	r3, [pc, #232]	; (8001380 <HAL_ADC_MspInit+0x138>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012a2:	2301      	movs	r3, #1
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a6:	2303      	movs	r3, #3
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b2:	4619      	mov	r1, r3
 80012b4:	4833      	ldr	r0, [pc, #204]	; (8001384 <HAL_ADC_MspInit+0x13c>)
 80012b6:	f007 fbf1 	bl	8008a9c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80012ba:	e05a      	b.n	8001372 <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC2)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a31      	ldr	r2, [pc, #196]	; (8001388 <HAL_ADC_MspInit+0x140>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d128      	bne.n	8001318 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
 80012ca:	4b2d      	ldr	r3, [pc, #180]	; (8001380 <HAL_ADC_MspInit+0x138>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	4a2c      	ldr	r2, [pc, #176]	; (8001380 <HAL_ADC_MspInit+0x138>)
 80012d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012d4:	6453      	str	r3, [r2, #68]	; 0x44
 80012d6:	4b2a      	ldr	r3, [pc, #168]	; (8001380 <HAL_ADC_MspInit+0x138>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012de:	61bb      	str	r3, [r7, #24]
 80012e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
 80012e6:	4b26      	ldr	r3, [pc, #152]	; (8001380 <HAL_ADC_MspInit+0x138>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a25      	ldr	r2, [pc, #148]	; (8001380 <HAL_ADC_MspInit+0x138>)
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b23      	ldr	r3, [pc, #140]	; (8001380 <HAL_ADC_MspInit+0x138>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012fe:	2302      	movs	r3, #2
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001302:	2303      	movs	r3, #3
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130e:	4619      	mov	r1, r3
 8001310:	481c      	ldr	r0, [pc, #112]	; (8001384 <HAL_ADC_MspInit+0x13c>)
 8001312:	f007 fbc3 	bl	8008a9c <HAL_GPIO_Init>
}
 8001316:	e02c      	b.n	8001372 <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC3)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a1b      	ldr	r2, [pc, #108]	; (800138c <HAL_ADC_MspInit+0x144>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d127      	bne.n	8001372 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <HAL_ADC_MspInit+0x138>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	4a15      	ldr	r2, [pc, #84]	; (8001380 <HAL_ADC_MspInit+0x138>)
 800132c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001330:	6453      	str	r3, [r2, #68]	; 0x44
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <HAL_ADC_MspInit+0x138>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <HAL_ADC_MspInit+0x138>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <HAL_ADC_MspInit+0x138>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <HAL_ADC_MspInit+0x138>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800135a:	2301      	movs	r3, #1
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800135e:	2303      	movs	r3, #3
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136a:	4619      	mov	r1, r3
 800136c:	4808      	ldr	r0, [pc, #32]	; (8001390 <HAL_ADC_MspInit+0x148>)
 800136e:	f007 fb95 	bl	8008a9c <HAL_GPIO_Init>
}
 8001372:	bf00      	nop
 8001374:	3738      	adds	r7, #56	; 0x38
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40012000 	.word	0x40012000
 8001380:	40023800 	.word	0x40023800
 8001384:	40020800 	.word	0x40020800
 8001388:	40012100 	.word	0x40012100
 800138c:	40012200 	.word	0x40012200
 8001390:	40020000 	.word	0x40020000

08001394 <order_phases>:
#include <stdio.h>
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001394:	b5b0      	push	{r4, r5, r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af02      	add	r7, sp, #8
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
 80013a0:	603b      	str	r3, [r7, #0]
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 80013a2:	4b76      	ldr	r3, [pc, #472]	; (800157c <order_phases+0x1e8>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]

	if(!cal->started){
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7c1b      	ldrb	r3, [r3, #16]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d108      	bne.n	80013c2 <order_phases+0x2e>
		printf("Checking phase sign, pole pairs\r\n");
 80013b0:	4873      	ldr	r0, [pc, #460]	; (8001580 <order_phases+0x1ec>)
 80013b2:	f00b fd2f 	bl	800ce14 <puts>
		cal->started = 1;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	60da      	str	r2, [r3, #12]
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	ee07 3a90 	vmov	s15, r3
 80013ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d2:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001584 <order_phases+0x1f0>
 80013d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	edd3 7a05 	vldr	s15, [r3, #20]
 80013e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f2:	d528      	bpl.n	8001446 <order_phases+0xb2>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001406:	3388      	adds	r3, #136	; 0x88
 8001408:	601a      	str	r2, [r3, #0]
        cal->cal_position.elec_velocity = 0;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001410:	3390      	adds	r3, #144	; 0x90
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
        controller->i_d_des = I_CAL;
 8001418:	4b5b      	ldr	r3, [pc, #364]	; (8001588 <order_phases+0x1f4>)
 800141a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        controller->i_q_des = 0.0f;
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        commutate(controller, &cal->cal_position);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001432:	332c      	adds	r3, #44	; 0x2c
 8001434:	4619      	mov	r1, r3
 8001436:	68b8      	ldr	r0, [r7, #8]
 8001438:	f001 fef2 	bl	8003220 <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	68da      	ldr	r2, [r3, #12]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	619a      	str	r2, [r3, #24]
    	return;
 8001444:	e096      	b.n	8001574 <order_phases+0x1e0>
    }

    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	edd3 7a05 	vldr	s15, [r3, #20]
 800144c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800158c <order_phases+0x1f8>
 8001450:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001458:	d51d      	bpl.n	8001496 <order_phases+0x102>
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001460:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001464:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001468:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800146c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	edc3 7a02 	vstr	s15, [r3, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001480:	3388      	adds	r3, #136	; 0x88
 8001482:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800148a:	332c      	adds	r3, #44	; 0x2c
 800148c:	4619      	mov	r1, r3
 800148e:	68b8      	ldr	r0, [r7, #8]
 8001490:	f001 fec6 	bl	8003220 <commutate>
    	return;
 8001494:	e06e      	b.n	8001574 <order_phases+0x1e0>
    }

	reset_foc(controller);
 8001496:	68b8      	ldr	r0, [r7, #8]
 8001498:	f001 fda8 	bl	8002fec <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	617b      	str	r3, [r7, #20]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80014a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80014ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b0:	eef0 7ae7 	vabs.f32	s15, s15
 80014b4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001590 <order_phases+0x1fc>
 80014b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014bc:	ee16 0a90 	vmov	r0, s13
 80014c0:	f7ff f872 	bl	80005a8 <__aeabi_f2d>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	ec43 2b10 	vmov	d0, r2, r3
 80014cc:	f00a fc54 	bl	800bd78 <round>
 80014d0:	ec53 2b10 	vmov	r2, r3, d0
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f7ff fb96 	bl	8000c08 <__aeabi_d2uiz>
 80014dc:	4603      	mov	r3, r0
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	701a      	strb	r2, [r3, #0]

	if(cal->theta_start < theta_end){
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	edd3 7a06 	vldr	s15, [r3, #24]
 80014ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80014ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f6:	dd07      	ble.n	8001508 <order_phases+0x174>
		cal->phase_order = 0;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Phase order correct\r\n");
 8001500:	4824      	ldr	r0, [pc, #144]	; (8001594 <order_phases+0x200>)
 8001502:	f00b fc87 	bl	800ce14 <puts>
 8001506:	e006      	b.n	8001516 <order_phases+0x182>
	}
	else{
		cal->phase_order = 1;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Swapping phase sign\r\n");
 8001510:	4821      	ldr	r0, [pc, #132]	; (8001598 <order_phases+0x204>)
 8001512:	f00b fc7f 	bl	800ce14 <puts>
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	4619      	mov	r1, r3
 800151c:	481f      	ldr	r0, [pc, #124]	; (800159c <order_phases+0x208>)
 800151e:	f00b fbf3 	bl	800cd08 <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f83e 	bl	80005a8 <__aeabi_f2d>
 800152c:	4604      	mov	r4, r0
 800152e:	460d      	mov	r5, r1
 8001530:	6978      	ldr	r0, [r7, #20]
 8001532:	f7ff f839 	bl	80005a8 <__aeabi_f2d>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	e9cd 2300 	strd	r2, r3, [sp]
 800153e:	4622      	mov	r2, r4
 8001540:	462b      	mov	r3, r5
 8001542:	4817      	ldr	r0, [pc, #92]	; (80015a0 <order_phases+0x20c>)
 8001544:	f00b fbe0 	bl	800cd08 <iprintf>
    PHASE_ORDER = cal->phase_order;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800154e:	461a      	mov	r2, r3
 8001550:	4b0a      	ldr	r3, [pc, #40]	; (800157c <order_phases+0x1e8>)
 8001552:	601a      	str	r2, [r3, #0]
    PPAIRS = (float)cal->ppairs;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	ee07 3a90 	vmov	s15, r3
 800155c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <order_phases+0x1f4>)
 8001562:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    cal->started = 0;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	741a      	strb	r2, [r3, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bdb0      	pop	{r4, r5, r7, pc}
 800157a:	bf00      	nop
 800157c:	20009074 	.word	0x20009074
 8001580:	08010988 	.word	0x08010988
 8001584:	37d1b717 	.word	0x37d1b717
 8001588:	2000075c 	.word	0x2000075c
 800158c:	3fd06cbe 	.word	0x3fd06cbe
 8001590:	40c90fdb 	.word	0x40c90fdb
 8001594:	080109ac 	.word	0x080109ac
 8001598:	080109c4 	.word	0x080109c4
 800159c:	080109dc 	.word	0x080109dc
 80015a0:	080109f0 	.word	0x080109f0

080015a4 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 80015a4:	b5b0      	push	{r4, r5, r7, lr}
 80015a6:	b094      	sub	sp, #80	; 0x50
 80015a8:	af02      	add	r7, sp, #8
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	603b      	str	r3, [r7, #0]
	/* Calibrates e-zero and encoder nonliearity */

	if(!cal->started){
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	7c1b      	ldrb	r3, [r3, #16]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10f      	bne.n	80015da <calibrate_encoder+0x36>
			printf("Starting offset cal and linearization\r\n");
 80015ba:	489e      	ldr	r0, [pc, #632]	; (8001834 <calibrate_encoder+0x290>)
 80015bc:	f00b fc2a 	bl	800ce14 <puts>
			cal->started = 1;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	741a      	strb	r2, [r3, #16]
			cal->start_count = loop_count;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	60da      	str	r2, [r3, #12]
			cal->next_sample_time = T1;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015d2:	629a      	str	r2, [r3, #40]	; 0x28
			cal->sample_count = 0;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	849a      	strh	r2, [r3, #36]	; 0x24
		}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	ee07 3a90 	vmov	s15, r3
 80015e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ea:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001838 <calibrate_encoder+0x294>
 80015ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80015fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001602:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160a:	d525      	bpl.n	8001658 <calibrate_encoder+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800161e:	3388      	adds	r3, #136	; 0x88
 8001620:	601a      	str	r2, [r3, #0]
        controller->i_d_des = I_CAL;
 8001622:	4b86      	ldr	r3, [pc, #536]	; (800183c <calibrate_encoder+0x298>)
 8001624:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        controller->i_q_des = 0.0f;
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        commutate(controller, &cal->cal_position);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800163c:	332c      	adds	r3, #44	; 0x2c
 800163e:	4619      	mov	r1, r3
 8001640:	68b8      	ldr	r0, [r7, #8]
 8001642:	f001 fded 	bl	8003220 <commutate>

    	cal->theta_start = encoder->angle_multiturn[0];
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	68da      	ldr	r2, [r3, #12]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	619a      	str	r2, [r3, #24]
    	cal->next_sample_time = cal->time;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695a      	ldr	r2, [r3, #20]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 8001656:	e259      	b.n	8001b0c <calibrate_encoder+0x568>
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	ed93 7a05 	vldr	s14, [r3, #20]
 800165e:	4b77      	ldr	r3, [pc, #476]	; (800183c <calibrate_encoder+0x298>)
 8001660:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001664:	eddf 6a76 	vldr	s13, [pc, #472]	; 8001840 <calibrate_encoder+0x29c>
 8001668:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800166c:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8001670:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001674:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001678:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800167c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001684:	f140 808f 	bpl.w	80017a6 <calibrate_encoder+0x202>
    	// rotate voltage vector through one mechanical rotation in the positive direction
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	edd3 7a02 	vldr	s15, [r3, #8]
 800168e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001844 <calibrate_encoder+0x2a0>
 8001692:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	edc3 7a02 	vstr	s15, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80016a6:	3388      	adds	r3, #136	; 0x88
 80016a8:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80016b0:	332c      	adds	r3, #44	; 0x2c
 80016b2:	4619      	mov	r1, r3
 80016b4:	68b8      	ldr	r0, [r7, #8]
 80016b6:	f001 fdb3 	bl	8003220 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if(cal->time > cal->next_sample_time){
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	ed93 7a05 	vldr	s14, [r3, #20]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ce:	dc00      	bgt.n	80016d2 <calibrate_encoder+0x12e>
				return;
			}
			cal->sample_count++;

		}
		return;
 80016d0:	e21c      	b.n	8001b0c <calibrate_encoder+0x568>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80016d8:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001858 <calibrate_encoder+0x2b4>
 80016dc:	ee67 6a87 	vmul.f32	s13, s15, s14
 80016e0:	4b56      	ldr	r3, [pc, #344]	; (800183c <calibrate_encoder+0x298>)
 80016e2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016e6:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001840 <calibrate_encoder+0x29c>
 80016ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016f6:	ee17 3a90 	vmov	r3, s15
 80016fa:	61bb      	str	r3, [r7, #24]
			int error = encoder->raw - count_ref;//- encoder->raw;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	617b      	str	r3, [r7, #20]
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	13db      	asrs	r3, r3, #15
 800170a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001712:	4618      	mov	r0, r3
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	441a      	add	r2, r3
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	f100 030a 	add.w	r3, r0, #10
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	605a      	str	r2, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001728:	461d      	mov	r5, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	330a      	adds	r3, #10
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	685c      	ldr	r4, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe ff33 	bl	80005a8 <__aeabi_f2d>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	e9cd 2300 	strd	r2, r3, [sp]
 800174a:	4623      	mov	r3, r4
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4629      	mov	r1, r5
 8001750:	483d      	ldr	r0, [pc, #244]	; (8001848 <calibrate_encoder+0x2a4>)
 8001752:	f00b fad9 	bl	800cd08 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800175c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800184c <calibrate_encoder+0x2a8>
 8001760:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800176e:	ee07 3a90 	vmov	s15, r3
 8001772:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001776:	4b31      	ldr	r3, [pc, #196]	; (800183c <calibrate_encoder+0x298>)
 8001778:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800177c:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001850 <calibrate_encoder+0x2ac>
 8001780:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001784:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001788:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800178c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001794:	f000 81b7 	beq.w	8001b06 <calibrate_encoder+0x562>
			cal->sample_count++;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800179c:	3301      	adds	r3, #1
 800179e:	b29a      	uxth	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	849a      	strh	r2, [r3, #36]	; 0x24
		return;
 80017a4:	e1b2      	b.n	8001b0c <calibrate_encoder+0x568>
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	ed93 7a05 	vldr	s14, [r3, #20]
 80017ac:	4b23      	ldr	r3, [pc, #140]	; (800183c <calibrate_encoder+0x298>)
 80017ae:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80017b2:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001854 <calibrate_encoder+0x2b0>
 80017b6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80017ba:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 80017be:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80017c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80017ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d2:	f140 80a9 	bpl.w	8001928 <calibrate_encoder+0x384>
		// rotate voltage vector through one mechanical rotation in the negative direction
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80017dc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001844 <calibrate_encoder+0x2a0>
 80017e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	edc3 7a02 	vstr	s15, [r3, #8]
		controller->i_d_des = I_CAL;
 80017ea:	4b14      	ldr	r3, [pc, #80]	; (800183c <calibrate_encoder+0x298>)
 80017ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		controller->i_q_des = 0.0f;
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		cal->cal_position.elec_angle = cal->theta_ref;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001808:	3388      	adds	r3, #136	; 0x88
 800180a:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001812:	332c      	adds	r3, #44	; 0x2c
 8001814:	4619      	mov	r1, r3
 8001816:	68b8      	ldr	r0, [r7, #8]
 8001818:	f001 fd02 	bl	8003220 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800182c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001830:	dc14      	bgt.n	800185c <calibrate_encoder+0x2b8>
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
			cal->sample_count--;
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
 8001832:	e16a      	b.n	8001b0a <calibrate_encoder+0x566>
 8001834:	08010a0c 	.word	0x08010a0c
 8001838:	37d1b717 	.word	0x37d1b717
 800183c:	2000075c 	.word	0x2000075c
 8001840:	40c90fdb 	.word	0x40c90fdb
 8001844:	3983126e 	.word	0x3983126e
 8001848:	08010a34 	.word	0x08010a34
 800184c:	3ba0d97c 	.word	0x3ba0d97c
 8001850:	43000000 	.word	0x43000000
 8001854:	41490fdb 	.word	0x41490fdb
 8001858:	47800000 	.word	0x47800000
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 8152 	beq.w	8001b0a <calibrate_encoder+0x566>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	edd3 7a02 	vldr	s15, [r3, #8]
 800186c:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8001858 <calibrate_encoder+0x2b4>
 8001870:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001874:	4ba7      	ldr	r3, [pc, #668]	; (8001b14 <calibrate_encoder+0x570>)
 8001876:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800187a:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8001b18 <calibrate_encoder+0x574>
 800187e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001882:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001886:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800188a:	ee17 3a90 	vmov	r3, s15
 800188e:	623b      	str	r3, [r7, #32]
			int error = encoder->raw - count_ref;// - encoder->raw;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	61fb      	str	r3, [r7, #28]
			error = error + ENC_CPR*(error<0);
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	13db      	asrs	r3, r3, #15
 800189e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	4413      	add	r3, r2
 80018a6:	61fb      	str	r3, [r7, #28]
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	330a      	adds	r3, #10
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	4413      	add	r3, r2
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80018be:	4610      	mov	r0, r2
 80018c0:	0fda      	lsrs	r2, r3, #31
 80018c2:	4413      	add	r3, r2
 80018c4:	105b      	asrs	r3, r3, #1
 80018c6:	4619      	mov	r1, r3
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	f100 030a 	add.w	r3, r0, #10
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	6059      	str	r1, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018d8:	461d      	mov	r5, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	330a      	adds	r3, #10
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	685c      	ldr	r4, [r3, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fe5b 	bl	80005a8 <__aeabi_f2d>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	e9cd 2300 	strd	r2, r3, [sp]
 80018fa:	4623      	mov	r3, r4
 80018fc:	6a3a      	ldr	r2, [r7, #32]
 80018fe:	4629      	mov	r1, r5
 8001900:	4886      	ldr	r0, [pc, #536]	; (8001b1c <calibrate_encoder+0x578>)
 8001902:	f00b fa01 	bl	800cd08 <iprintf>
			cal->sample_count--;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800190a:	3b01      	subs	r3, #1
 800190c:	b29a      	uxth	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	849a      	strh	r2, [r3, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001918:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001b20 <calibrate_encoder+0x57c>
 800191c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		return;
 8001926:	e0f0      	b.n	8001b0a <calibrate_encoder+0x566>
    }

    reset_foc(controller);
 8001928:	68b8      	ldr	r0, [r7, #8]
 800192a:	f001 fb5f 	bl	8002fec <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8001932:	2300      	movs	r3, #0
 8001934:	643b      	str	r3, [r7, #64]	; 0x40
 8001936:	e00b      	b.n	8001950 <calibrate_encoder+0x3ac>
		ezero_mean += cal->error_arr[i];
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800193c:	330a      	adds	r3, #10
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001946:	4413      	add	r3, r2
 8001948:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 800194a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800194c:	3301      	adds	r3, #1
 800194e:	643b      	str	r3, [r7, #64]	; 0x40
 8001950:	4b70      	ldr	r3, [pc, #448]	; (8001b14 <calibrate_encoder+0x570>)
 8001952:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001956:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800195a:	ee17 3a90 	vmov	r3, s15
 800195e:	01db      	lsls	r3, r3, #7
 8001960:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001962:	429a      	cmp	r2, r3
 8001964:	dbe8      	blt.n	8001938 <calibrate_encoder+0x394>
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 8001966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001968:	ee07 3a90 	vmov	s15, r3
 800196c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001970:	4b68      	ldr	r3, [pc, #416]	; (8001b14 <calibrate_encoder+0x570>)
 8001972:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001976:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001b24 <calibrate_encoder+0x580>
 800197a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800197e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001986:	ee17 2a90 	vmov	r2, s15
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	61da      	str	r2, [r3, #28]

	// Moving average to filter out cogging ripple

	int window = SAMPLES_PER_PPAIR;
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
	int lut_offset = (ENC_CPR-cal->error_arr[0])*N_LUT/ENC_CPR;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 800199a:	2b00      	cmp	r3, #0
 800199c:	da01      	bge.n	80019a2 <calibrate_encoder+0x3fe>
 800199e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80019a2:	125b      	asrs	r3, r3, #9
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i<N_LUT; i++){
 80019a6:	2300      	movs	r3, #0
 80019a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019aa:	e0a0      	b.n	8001aee <calibrate_encoder+0x54a>
			int moving_avg = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 80019b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b2:	0fda      	lsrs	r2, r3, #31
 80019b4:	4413      	add	r3, r2
 80019b6:	105b      	asrs	r3, r3, #1
 80019b8:	425b      	negs	r3, r3
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
 80019bc:	e068      	b.n	8001a90 <calibrate_encoder+0x4ec>
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 80019be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c8:	4b52      	ldr	r3, [pc, #328]	; (8001b14 <calibrate_encoder+0x570>)
 80019ca:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d2:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001b24 <calibrate_encoder+0x580>
 80019d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019da:	eddf 6a52 	vldr	s13, [pc, #328]	; 8001b24 <calibrate_encoder+0x580>
 80019de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019f4:	ee17 3a90 	vmov	r3, s15
 80019f8:	633b      	str	r3, [r7, #48]	; 0x30
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 80019fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	da13      	bge.n	8001a28 <calibrate_encoder+0x484>
 8001a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a02:	ee07 3a90 	vmov	s15, r3
 8001a06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a0a:	4b42      	ldr	r3, [pc, #264]	; (8001b14 <calibrate_encoder+0x570>)
 8001a0c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a10:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001b24 <calibrate_encoder+0x580>
 8001a14:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a20:	ee17 3a90 	vmov	r3, s15
 8001a24:	633b      	str	r3, [r7, #48]	; 0x30
 8001a26:	e027      	b.n	8001a78 <calibrate_encoder+0x4d4>
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a2a:	ee07 3a90 	vmov	s15, r3
 8001a2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a32:	4b38      	ldr	r3, [pc, #224]	; (8001b14 <calibrate_encoder+0x570>)
 8001a34:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a38:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001b24 <calibrate_encoder+0x580>
 8001a3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a44:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001a48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a50:	dd12      	ble.n	8001a78 <calibrate_encoder+0x4d4>
 8001a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a54:	ee07 3a90 	vmov	s15, r3
 8001a58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a5c:	4b2d      	ldr	r3, [pc, #180]	; (8001b14 <calibrate_encoder+0x570>)
 8001a5e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a62:	eddf 6a30 	vldr	s13, [pc, #192]	; 8001b24 <calibrate_encoder+0x580>
 8001a66:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a72:	ee17 3a90 	vmov	r3, s15
 8001a76:	633b      	str	r3, [r7, #48]	; 0x30
				moving_avg += cal->error_arr[index];
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a7c:	330a      	adds	r3, #10
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a86:	4413      	add	r3, r2
 8001a88:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8001a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a92:	0fda      	lsrs	r2, r3, #31
 8001a94:	4413      	add	r3, r2
 8001a96:	105b      	asrs	r3, r3, #1
 8001a98:	461a      	mov	r2, r3
 8001a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	db8e      	blt.n	80019be <calibrate_encoder+0x41a>
			}
			moving_avg = moving_avg/window;
 8001aa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa4:	fb92 f3f3 	sdiv	r3, r2, r3
 8001aa8:	63bb      	str	r3, [r7, #56]	; 0x38
			int lut_index = lut_offset + i;
 8001aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aae:	4413      	add	r3, r2
 8001ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8001ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab4:	2b7f      	cmp	r3, #127	; 0x7f
 8001ab6:	dd02      	ble.n	8001abe <calibrate_encoder+0x51a>
 8001ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aba:	3b80      	subs	r3, #128	; 0x80
 8001abc:	62fb      	str	r3, [r7, #44]	; 0x2c
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ac4:	1ad2      	subs	r2, r2, r3
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001ace:	330a      	adds	r3, #10
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	461a      	mov	r2, r3
 8001ae0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ae2:	4811      	ldr	r0, [pc, #68]	; (8001b28 <calibrate_encoder+0x584>)
 8001ae4:	f00b f910 	bl	800cd08 <iprintf>
	for(int i = 0; i<N_LUT; i++){
 8001ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aea:	3301      	adds	r3, #1
 8001aec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001af0:	2b7f      	cmp	r3, #127	; 0x7f
 8001af2:	f77f af5b 	ble.w	80019ac <calibrate_encoder+0x408>

		}

	cal->started = 0;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	741a      	strb	r2, [r3, #16]
	cal->done_cal = 1;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001b04:	e002      	b.n	8001b0c <calibrate_encoder+0x568>
				return;
 8001b06:	bf00      	nop
 8001b08:	e000      	b.n	8001b0c <calibrate_encoder+0x568>
		return;
 8001b0a:	bf00      	nop
}
 8001b0c:	3748      	adds	r7, #72	; 0x48
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bdb0      	pop	{r4, r5, r7, pc}
 8001b12:	bf00      	nop
 8001b14:	2000075c 	.word	0x2000075c
 8001b18:	40c90fdb 	.word	0x40c90fdb
 8001b1c:	08010a34 	.word	0x08010a34
 8001b20:	3ba0d97c 	.word	0x3ba0d97c
 8001b24:	43000000 	.word	0x43000000
 8001b28:	08010a44 	.word	0x08010a44

08001b2c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <MX_CAN1_Init+0x64>)
 8001b32:	4a18      	ldr	r2, [pc, #96]	; (8001b94 <MX_CAN1_Init+0x68>)
 8001b34:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001b36:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <MX_CAN1_Init+0x64>)
 8001b38:	2203      	movs	r2, #3
 8001b3a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001b3c:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <MX_CAN1_Init+0x64>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b42:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <MX_CAN1_Init+0x64>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_CAN1_Init+0x64>)
 8001b4a:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8001b4e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <MX_CAN1_Init+0x64>)
 8001b52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b56:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001b58:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <MX_CAN1_Init+0x64>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <MX_CAN1_Init+0x64>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001b64:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <MX_CAN1_Init+0x64>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <MX_CAN1_Init+0x64>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001b70:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <MX_CAN1_Init+0x64>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <MX_CAN1_Init+0x64>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001b7c:	4804      	ldr	r0, [pc, #16]	; (8001b90 <MX_CAN1_Init+0x64>)
 8001b7e:	f005 ffa3 	bl	8007ac8 <HAL_CAN_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001b88:	f003 faca 	bl	8005120 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000400 	.word	0x20000400
 8001b94:	40006400 	.word	0x40006400

08001b98 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	; 0x28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a1d      	ldr	r2, [pc, #116]	; (8001c2c <HAL_CAN_MspInit+0x94>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d134      	bne.n	8001c24 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <HAL_CAN_MspInit+0x98>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	4a1b      	ldr	r2, [pc, #108]	; (8001c30 <HAL_CAN_MspInit+0x98>)
 8001bc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bca:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <HAL_CAN_MspInit+0x98>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <HAL_CAN_MspInit+0x98>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <HAL_CAN_MspInit+0x98>)
 8001be0:	f043 0302 	orr.w	r3, r3, #2
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_CAN_MspInit+0x98>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bf2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c00:	2303      	movs	r3, #3
 8001c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c04:	2309      	movs	r3, #9
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4809      	ldr	r0, [pc, #36]	; (8001c34 <HAL_CAN_MspInit+0x9c>)
 8001c10:	f006 ff44 	bl	8008a9c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2100      	movs	r1, #0
 8001c18:	2014      	movs	r0, #20
 8001c1a:	f006 fe76 	bl	800890a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001c1e:	2014      	movs	r0, #20
 8001c20:	f006 fe8f 	bl	8008942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001c24:	bf00      	nop
 8001c26:	3728      	adds	r7, #40	; 0x28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40006400 	.word	0x40006400
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40020400 	.word	0x40020400

08001c38 <can_rx_init>:
  }
}

/* USER CODE BEGIN 1 */

void can_rx_init(CANRxMessage *msg){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	msg->filter.FilterFIFOAssignment=CAN_FILTER_FIFO0; 	// set fifo assignment
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	63da      	str	r2, [r3, #60]	; 0x3c
	msg->filter.FilterIdHigh=CAN_ID<<5;         // CAN ID
 8001c46:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <can_rx_init+0x58>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	015b      	lsls	r3, r3, #5
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	62da      	str	r2, [r3, #44]	; 0x2c
	msg->filter.FilterIdLow=0x0;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	631a      	str	r2, [r3, #48]	; 0x30
	msg->filter.FilterMaskIdHigh=0xFFF;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001c5e:	635a      	str	r2, [r3, #52]	; 0x34
	msg->filter.FilterMaskIdLow=0xFFFF;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c66:	639a      	str	r2, [r3, #56]	; 0x38
	msg->filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	645a      	str	r2, [r3, #68]	; 0x44
	msg->filter.FilterScale=CAN_FILTERSCALE_16BIT;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	649a      	str	r2, [r3, #72]	; 0x48
	msg->filter.FilterActivation=ENABLE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	64da      	str	r2, [r3, #76]	; 0x4c
	HAL_CAN_ConfigFilter(&CAN_H, &msg->filter);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	332c      	adds	r3, #44	; 0x2c
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4804      	ldr	r0, [pc, #16]	; (8001c94 <can_rx_init+0x5c>)
 8001c82:	f006 f81d 	bl	8007cc0 <HAL_CAN_ConfigFilter>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20009074 	.word	0x20009074
 8001c94:	20000400 	.word	0x20000400

08001c98 <can_tx_init>:

void can_tx_init(CANTxMessage *msg){
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
	msg->tx_header.DLC = 8; 			// message size of 8 byte
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2208      	movs	r2, #8
 8001ca4:	61da      	str	r2, [r3, #28]
	msg->tx_header.IDE=CAN_ID_STD; 		// set identifier to standard
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	615a      	str	r2, [r3, #20]
	msg->tx_header.RTR=CAN_RTR_DATA; 	// set data type to remote transmission request?
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	619a      	str	r2, [r3, #24]
	msg->tx_header.StdId = CAN_MASTER;  // recipient CAN ID
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <can_tx_init+0x30>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	60da      	str	r2, [r3, #12]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	20009074 	.word	0x20009074

08001ccc <pack_reply_default>:
/// 0: [position[15-8]]
/// 1: [position[7-0]]
/// 2: [velocity[11-4]]
/// 3: [velocity[3-0], current[11-8]]
/// 4: [current[7-0]]
void pack_reply_default(CANRxMessage rx_msg, CANTxMessage *tx_msg, float p, float v, float t, int version, int calibrate_finish, int state){
 8001ccc:	b084      	sub	sp, #16
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b088      	sub	sp, #32
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001cd8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8001cdc:	ed87 0a03 	vstr	s0, [r7, #12]
 8001ce0:	edc7 0a02 	vstr	s1, [r7, #8]
 8001ce4:	ed87 1a01 	vstr	s2, [r7, #4]
    int p_int = float_to_uint(p, P_REPLY_MIN, P_REPLY_MAX, 16);
 8001ce8:	2010      	movs	r0, #16
 8001cea:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8001dfc <pack_reply_default+0x130>
 8001cee:	eddf 0a44 	vldr	s1, [pc, #272]	; 8001e00 <pack_reply_default+0x134>
 8001cf2:	ed97 0a03 	vldr	s0, [r7, #12]
 8001cf6:	f003 fb03 	bl	8005300 <float_to_uint>
 8001cfa:	61f8      	str	r0, [r7, #28]
    int v_int = float_to_uint(v, V_MIN, V_MAX, 16);
 8001cfc:	4b41      	ldr	r3, [pc, #260]	; (8001e04 <pack_reply_default+0x138>)
 8001cfe:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001d02:	4b40      	ldr	r3, [pc, #256]	; (8001e04 <pack_reply_default+0x138>)
 8001d04:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001d08:	2010      	movs	r0, #16
 8001d0a:	eeb0 1a47 	vmov.f32	s2, s14
 8001d0e:	eef0 0a67 	vmov.f32	s1, s15
 8001d12:	ed97 0a02 	vldr	s0, [r7, #8]
 8001d16:	f003 faf3 	bl	8005300 <float_to_uint>
 8001d1a:	61b8      	str	r0, [r7, #24]
    int t_int = float_to_uint(t, -(I_MAX+SENSE_BUFFER)*KT*GR, (I_MAX+SENSE_BUFFER)*KT*GR, 16);
 8001d1c:	4b39      	ldr	r3, [pc, #228]	; (8001e04 <pack_reply_default+0x138>)
 8001d1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d22:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001e08 <pack_reply_default+0x13c>
 8001d26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d2a:	eeb1 7a67 	vneg.f32	s14, s15
 8001d2e:	4b35      	ldr	r3, [pc, #212]	; (8001e04 <pack_reply_default+0x138>)
 8001d30:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001d34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d38:	4b32      	ldr	r3, [pc, #200]	; (8001e04 <pack_reply_default+0x138>)
 8001d3a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001d3e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001d42:	4b30      	ldr	r3, [pc, #192]	; (8001e04 <pack_reply_default+0x138>)
 8001d44:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d48:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001e08 <pack_reply_default+0x13c>
 8001d4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001d50:	4b2c      	ldr	r3, [pc, #176]	; (8001e04 <pack_reply_default+0x138>)
 8001d52:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001d56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d5a:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <pack_reply_default+0x138>)
 8001d5c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001d60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d64:	2010      	movs	r0, #16
 8001d66:	eeb0 1a67 	vmov.f32	s2, s15
 8001d6a:	eef0 0a66 	vmov.f32	s1, s13
 8001d6e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d72:	f003 fac5 	bl	8005300 <float_to_uint>
 8001d76:	6178      	str	r0, [r7, #20]

    tx_msg->data[0] = p_int>>8;
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	121b      	asrs	r3, r3, #8
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d82:	705a      	strb	r2, [r3, #1]
    tx_msg->data[1] = p_int&0xFF;
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d8c:	709a      	strb	r2, [r3, #2]
    tx_msg->data[2] = v_int>>8;
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	121b      	asrs	r3, r3, #8
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d98:	70da      	strb	r2, [r3, #3]
    tx_msg->data[3] = v_int&0xFF;
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001da2:	711a      	strb	r2, [r3, #4]
    tx_msg->data[4] = t_int>>8;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	121b      	asrs	r3, r3, #8
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dae:	715a      	strb	r2, [r3, #5]
    tx_msg->data[5] = t_int&0xFF;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001db8:	719a      	strb	r2, [r3, #6]
    tx_msg->data[6] = 0x0 + (calibrate_finish&0xF);
 8001dba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dca:	71da      	strb	r2, [r3, #7]
    tx_msg->data[7] = (version<<4) + (state&0xF);
 8001dcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	011b      	lsls	r3, r3, #4
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	f003 030f 	and.w	r3, r3, #15
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	4413      	add	r3, r2
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dea:	721a      	strb	r2, [r3, #8]
}
 8001dec:	bf00      	nop
 8001dee:	3720      	adds	r7, #32
 8001df0:	46bd      	mov	sp, r7
 8001df2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001df6:	b004      	add	sp, #16
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	42bc7edd 	.word	0x42bc7edd
 8001e00:	c2bc7edd 	.word	0xc2bc7edd
 8001e04:	2000075c 	.word	0x2000075c
 8001e08:	00000000 	.word	0x00000000

08001e0c <pack_reply_config>:

void pack_reply_config(CANRxMessage rx_msg, CANTxMessage *tx_msg, int version, int state){
 8001e0c:	b084      	sub	sp, #16
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b098      	sub	sp, #96	; 0x60
 8001e12:	af12      	add	r7, sp, #72	; 0x48
 8001e14:	f107 0c20 	add.w	ip, r7, #32
 8001e18:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int func_type = rx_msg.data[0];
 8001e1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001e20:	613b      	str	r3, [r7, #16]
	int reg_type = rx_msg.data[1];
 8001e22:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001e26:	60fb      	str	r3, [r7, #12]
	int target_addr = rx_msg.data[2];
 8001e28:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001e2c:	60bb      	str	r3, [r7, #8]
	float reg_data;
	int config_state;

	if (func_type == 0){
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10d      	bne.n	8001e50 <pack_reply_config+0x44>
		config_state = unpack_config_cmd(rx_msg);
 8001e34:	4668      	mov	r0, sp
 8001e36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e3a:	2248      	movs	r2, #72	; 0x48
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f00a fae3 	bl	800c408 <memcpy>
 8001e42:	f107 0320 	add.w	r3, r7, #32
 8001e46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e48:	f000 f964 	bl	8002114 <unpack_config_cmd>
 8001e4c:	6178      	str	r0, [r7, #20]
 8001e4e:	e025      	b.n	8001e9c <pack_reply_config+0x90>
	}
	else if ((reg_type == 0 && (target_addr < 0 || target_addr >= INT_REG_LENGTH)) ||
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d105      	bne.n	8001e62 <pack_reply_config+0x56>
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	db0b      	blt.n	8001e74 <pack_reply_config+0x68>
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	2bff      	cmp	r3, #255	; 0xff
 8001e60:	dc08      	bgt.n	8001e74 <pack_reply_config+0x68>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d10b      	bne.n	8001e80 <pack_reply_config+0x74>
			 (reg_type == 1 && (target_addr < 0 || target_addr >= FLOAT_REG_LENGTH))){
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	db02      	blt.n	8001e74 <pack_reply_config+0x68>
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2b3f      	cmp	r3, #63	; 0x3f
 8001e72:	dd05      	ble.n	8001e80 <pack_reply_config+0x74>
		config_state = CODE_INVALID_ADDR;
 8001e74:	2303      	movs	r3, #3
 8001e76:	617b      	str	r3, [r7, #20]
		reg_data = 0;
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	607b      	str	r3, [r7, #4]
 8001e7e:	e00d      	b.n	8001e9c <pack_reply_config+0x90>
	}
	else if (reg_type != 0 && reg_type != 1){
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d008      	beq.n	8001e98 <pack_reply_config+0x8c>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d005      	beq.n	8001e98 <pack_reply_config+0x8c>
		config_state = CODE_INVALID_CMD;
 8001e8c:	2304      	movs	r3, #4
 8001e8e:	617b      	str	r3, [r7, #20]
		reg_data = 0;
 8001e90:	f04f 0300 	mov.w	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	e001      	b.n	8001e9c <pack_reply_config+0x90>
	}
	else{
		config_state = CODE_CONFIG_SUCCESS;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
	}

	if (reg_type == 0 && config_state != CODE_INVALID_ADDR){
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10d      	bne.n	8001ebe <pack_reply_config+0xb2>
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d00a      	beq.n	8001ebe <pack_reply_config+0xb2>
		reg_data = __int_reg[target_addr];
 8001ea8:	4a1d      	ldr	r2, [pc, #116]	; (8001f20 <pack_reply_config+0x114>)
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb0:	ee07 3a90 	vmov	s15, r3
 8001eb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eb8:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ebc:	e00b      	b.n	8001ed6 <pack_reply_config+0xca>
	}
	else if (reg_type == 1 && config_state != CODE_INVALID_ADDR){
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d108      	bne.n	8001ed6 <pack_reply_config+0xca>
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d005      	beq.n	8001ed6 <pack_reply_config+0xca>
		reg_data = __float_reg[target_addr];
 8001eca:	4a16      	ldr	r2, [pc, #88]	; (8001f24 <pack_reply_config+0x118>)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	607b      	str	r3, [r7, #4]
	}

	tx_msg->data[0] = config_state;
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001edc:	705a      	strb	r2, [r3, #1]
	tx_msg->data[1] = reg_type;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ee4:	709a      	strb	r2, [r3, #2]
	tx_msg->data[2] = target_addr;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eec:	70da      	strb	r2, [r3, #3]

	memcpy((void*)&(tx_msg->data[3]), (void*)&reg_data, sizeof(float));
 8001eee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	601a      	str	r2, [r3, #0]

	tx_msg->data[7] = (version<<4) + (state&0xF);
 8001ef6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f10:	721a      	strb	r2, [r3, #8]
}
 8001f12:	bf00      	nop
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f1c:	b004      	add	sp, #16
 8001f1e:	4770      	bx	lr
 8001f20:	20009074 	.word	0x20009074
 8001f24:	2000075c 	.word	0x2000075c

08001f28 <pack_reply_hall_cal>:

void pack_reply_hall_cal(CANRxMessage rx_msg, CANTxMessage *tx_msg, int version, int state){
 8001f28:	b084      	sub	sp, #16
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b094      	sub	sp, #80	; 0x50
 8001f2e:	af12      	add	r7, sp, #72	; 0x48
 8001f30:	f107 0c10 	add.w	ip, r7, #16
 8001f34:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int config_state;

	if (rx_msg.data[0] == 0){
 8001f38:	7e3b      	ldrb	r3, [r7, #24]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10d      	bne.n	8001f5a <pack_reply_hall_cal+0x32>
		config_state = unpack_hall_cal_cmd(rx_msg);
 8001f3e:	4668      	mov	r0, sp
 8001f40:	f107 0320 	add.w	r3, r7, #32
 8001f44:	2248      	movs	r2, #72	; 0x48
 8001f46:	4619      	mov	r1, r3
 8001f48:	f00a fa5e 	bl	800c408 <memcpy>
 8001f4c:	f107 0310 	add.w	r3, r7, #16
 8001f50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f52:	f000 f917 	bl	8002184 <unpack_hall_cal_cmd>
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	e001      	b.n	8001f5e <pack_reply_hall_cal+0x36>
	}
	else{
		config_state = CODE_CONFIG_SUCCESS;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	607b      	str	r3, [r7, #4]
	}

	tx_msg->data[0] = config_state;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f64:	705a      	strb	r2, [r3, #1]
	tx_msg->data[1] = 0;
 8001f66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f68:	2200      	movs	r2, #0
 8001f6a:	709a      	strb	r2, [r3, #2]
	tx_msg->data[2] = 0;
 8001f6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f6e:	2200      	movs	r2, #0
 8001f70:	70da      	strb	r2, [r3, #3]

	memcpy((void*)&(tx_msg->data[3]), (void*)&__float_reg[ADDR_HALL_CAL_OFFSET], sizeof(float));
 8001f72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f74:	3304      	adds	r3, #4
 8001f76:	4a0b      	ldr	r2, [pc, #44]	; (8001fa4 <pack_reply_hall_cal+0x7c>)
 8001f78:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001f7a:	601a      	str	r2, [r3, #0]

	tx_msg->data[7] = (version<<4) + (state&0xF);
 8001f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	011b      	lsls	r3, r3, #4
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	f003 030f 	and.w	r3, r3, #15
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f94:	721a      	strb	r2, [r3, #8]
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001fa0:	b004      	add	sp, #16
 8001fa2:	4770      	bx	lr
 8001fa4:	2000075c 	.word	0x2000075c

08001fa8 <unpack_control_cmd>:
/// 3: [velocity[3-0], kp[11-8]]
/// 4: [kp[7-0]]
/// 5: [kd[11-4]]
/// 6: [kd[3-0], torque[11-8]]
/// 7: [torque[7-0]]
void unpack_control_cmd(CANRxMessage rx_msg, float *commands){// ControllerStruct * controller){
 8001fa8:	b084      	sub	sp, #16
 8001faa:	b590      	push	{r4, r7, lr}
 8001fac:	b087      	sub	sp, #28
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001fb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        int p_int = (rx_msg.data[0]<<8)|rx_msg.data[1];
 8001fb8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001fbc:	021b      	lsls	r3, r3, #8
 8001fbe:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	617b      	str	r3, [r7, #20]
        int kp_int = (rx_msg.data[2]<<4)|(rx_msg.data[3]>>4);
 8001fc6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8001fd0:	0912      	lsrs	r2, r2, #4
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        int ki_int = ((rx_msg.data[3]&0xF)<<8)|rx_msg.data[4];
 8001fd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fdc:	021b      	lsls	r3, r3, #8
 8001fde:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001fe2:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
        int kd_int = (rx_msg.data[5]<<4)|(rx_msg.data[6]>>4);
 8001fea:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001ff4:	0912      	lsrs	r2, r2, #4
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	60bb      	str	r3, [r7, #8]
        int t_int = ((rx_msg.data[6]&0xF)<<8)|rx_msg.data[7];
 8001ffc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002006:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800200a:	4313      	orrs	r3, r2
 800200c:	607b      	str	r3, [r7, #4]

        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 800200e:	4b3f      	ldr	r3, [pc, #252]	; (800210c <unpack_control_cmd+0x164>)
 8002010:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002014:	4b3d      	ldr	r3, [pc, #244]	; (800210c <unpack_control_cmd+0x164>)
 8002016:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800201a:	2110      	movs	r1, #16
 800201c:	eef0 0a47 	vmov.f32	s1, s14
 8002020:	eeb0 0a67 	vmov.f32	s0, s15
 8002024:	6978      	ldr	r0, [r7, #20]
 8002026:	f003 f99e 	bl	8005366 <uint_to_float>
 800202a:	eef0 7a40 	vmov.f32	s15, s0
 800202e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002032:	edc3 7a00 	vstr	s15, [r3]
        commands[1] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 8002036:	4b35      	ldr	r3, [pc, #212]	; (800210c <unpack_control_cmd+0x164>)
 8002038:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800203c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002040:	1d1c      	adds	r4, r3, #4
 8002042:	210c      	movs	r1, #12
 8002044:	eef0 0a67 	vmov.f32	s1, s15
 8002048:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8002110 <unpack_control_cmd+0x168>
 800204c:	6938      	ldr	r0, [r7, #16]
 800204e:	f003 f98a 	bl	8005366 <uint_to_float>
 8002052:	eef0 7a40 	vmov.f32	s15, s0
 8002056:	edc4 7a00 	vstr	s15, [r4]
        commands[2] = uint_to_float(ki_int, KI_MIN, KI_MAX, 12);
 800205a:	4b2c      	ldr	r3, [pc, #176]	; (800210c <unpack_control_cmd+0x164>)
 800205c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002060:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002064:	f103 0408 	add.w	r4, r3, #8
 8002068:	210c      	movs	r1, #12
 800206a:	eef0 0a67 	vmov.f32	s1, s15
 800206e:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8002110 <unpack_control_cmd+0x168>
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f003 f977 	bl	8005366 <uint_to_float>
 8002078:	eef0 7a40 	vmov.f32	s15, s0
 800207c:	edc4 7a00 	vstr	s15, [r4]
        commands[3] = uint_to_float(kd_int, KD_MIN, KD_MAX, 12);
 8002080:	4b22      	ldr	r3, [pc, #136]	; (800210c <unpack_control_cmd+0x164>)
 8002082:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002086:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800208a:	f103 040c 	add.w	r4, r3, #12
 800208e:	210c      	movs	r1, #12
 8002090:	eef0 0a67 	vmov.f32	s1, s15
 8002094:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8002110 <unpack_control_cmd+0x168>
 8002098:	68b8      	ldr	r0, [r7, #8]
 800209a:	f003 f964 	bl	8005366 <uint_to_float>
 800209e:	eef0 7a40 	vmov.f32	s15, s0
 80020a2:	edc4 7a00 	vstr	s15, [r4]
        commands[4] = uint_to_float(t_int, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 80020a6:	4b19      	ldr	r3, [pc, #100]	; (800210c <unpack_control_cmd+0x164>)
 80020a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80020ac:	eeb1 7a67 	vneg.f32	s14, s15
 80020b0:	4b16      	ldr	r3, [pc, #88]	; (800210c <unpack_control_cmd+0x164>)
 80020b2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80020b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ba:	4b14      	ldr	r3, [pc, #80]	; (800210c <unpack_control_cmd+0x164>)
 80020bc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80020c0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80020c4:	4b11      	ldr	r3, [pc, #68]	; (800210c <unpack_control_cmd+0x164>)
 80020c6:	ed93 7a03 	vldr	s14, [r3, #12]
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <unpack_control_cmd+0x164>)
 80020cc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80020d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d4:	4b0d      	ldr	r3, [pc, #52]	; (800210c <unpack_control_cmd+0x164>)
 80020d6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80020da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020e2:	f103 0410 	add.w	r4, r3, #16
 80020e6:	210c      	movs	r1, #12
 80020e8:	eef0 0a67 	vmov.f32	s1, s15
 80020ec:	eeb0 0a66 	vmov.f32	s0, s13
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f003 f938 	bl	8005366 <uint_to_float>
 80020f6:	eef0 7a40 	vmov.f32	s15, s0
 80020fa:	edc4 7a00 	vstr	s15, [r4]
    //printf("Received   ");
    //printf("%.3f  %.3f  %.3f  %.3f  %.3f   %.3f", controller->p_des, controller->v_des, controller->kp, controller->kd, controller->t_ff, controller->i_q_ref);
    //printf("\n\r");
}
 80020fe:	bf00      	nop
 8002100:	371c      	adds	r7, #28
 8002102:	46bd      	mov	sp, r7
 8002104:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002108:	b004      	add	sp, #16
 800210a:	4770      	bx	lr
 800210c:	2000075c 	.word	0x2000075c
 8002110:	00000000 	.word	0x00000000

08002114 <unpack_config_cmd>:

int unpack_config_cmd(CANRxMessage rx_msg){
 8002114:	b084      	sub	sp, #16
 8002116:	b580      	push	{r7, lr}
 8002118:	b084      	sub	sp, #16
 800211a:	af00      	add	r7, sp, #0
 800211c:	f107 0c18 	add.w	ip, r7, #24
 8002120:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int reg_type = rx_msg.data[1];
 8002124:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002128:	60bb      	str	r3, [r7, #8]
	int target_addr = rx_msg.data[2];
 800212a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800212e:	607b      	str	r3, [r7, #4]
	float new_data = 0;
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	603b      	str	r3, [r7, #0]
 8002136:	f8d7 3023 	ldr.w	r3, [r7, #35]	; 0x23
	int config_state;

	memcpy((void*)&new_data, (void*)&(rx_msg.data[3]), sizeof(float));
 800213a:	603b      	str	r3, [r7, #0]

	if (reg_type == 0){
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10a      	bne.n	8002158 <unpack_config_cmd+0x44>
		config_state = int_reg_update_can(target_addr, new_data);
 8002142:	edd7 7a00 	vldr	s15, [r7]
 8002146:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800214a:	ee17 1a90 	vmov	r1, s15
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f004 ff9c 	bl	800708c <int_reg_update_can>
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	e00d      	b.n	8002174 <unpack_config_cmd+0x60>
	}
	else if (reg_type == 1){
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d108      	bne.n	8002170 <unpack_config_cmd+0x5c>
		config_state = float_reg_update_can(target_addr, new_data);
 800215e:	edd7 7a00 	vldr	s15, [r7]
 8002162:	eeb0 0a67 	vmov.f32	s0, s15
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f004 fef6 	bl	8006f58 <float_reg_update_can>
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	e001      	b.n	8002174 <unpack_config_cmd+0x60>
	}
	else{
		config_state = CODE_INVALID_CMD;
 8002170:	2304      	movs	r3, #4
 8002172:	60fb      	str	r3, [r7, #12]
	}

	return config_state;
 8002174:	68fb      	ldr	r3, [r7, #12]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002180:	b004      	add	sp, #16
 8002182:	4770      	bx	lr

08002184 <unpack_hall_cal_cmd>:

int unpack_hall_cal_cmd(CANRxMessage rx_msg){
 8002184:	b084      	sub	sp, #16
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	f107 0c10 	add.w	ip, r7, #16
 8002190:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float new_data = 0;
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	603b      	str	r3, [r7, #0]
 800219a:	f8d7 3019 	ldr.w	r3, [r7, #25]
	int config_state;

	memcpy((void*)&new_data, (void*)&(rx_msg.data[1]), sizeof(float));
 800219e:	603b      	str	r3, [r7, #0]

	config_state = float_reg_update_can(ADDR_HALL_CAL_OFFSET, new_data);
 80021a0:	edd7 7a00 	vldr	s15, [r7]
 80021a4:	eeb0 0a67 	vmov.f32	s0, s15
 80021a8:	201a      	movs	r0, #26
 80021aa:	f004 fed5 	bl	8006f58 <float_reg_update_can>
 80021ae:	6078      	str	r0, [r7, #4]

	return config_state;
 80021b0:	687b      	ldr	r3, [r7, #4]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021bc:	b004      	add	sp, #16
 80021be:	4770      	bx	lr

080021c0 <drv_spi_write>:
#include "drv8323.h"
#include <stdio.h>
#include "usart.h"
#include "hw_config.h"

uint16_t drv_spi_write(DRVStruct * drv, uint16_t val){
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	807b      	strh	r3, [r7, #2]
	drv->spi_tx_word = val;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	887a      	ldrh	r2, [r7, #2]
 80021d0:	801a      	strh	r2, [r3, #0]
	DRV_CS_LOW; 	// CS low
 80021d2:	2200      	movs	r2, #0
 80021d4:	2110      	movs	r1, #16
 80021d6:	480f      	ldr	r0, [pc, #60]	; (8002214 <drv_spi_write+0x54>)
 80021d8:	f006 fe0c 	bl	8008df4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	1c9a      	adds	r2, r3, #2
 80021e2:	2364      	movs	r3, #100	; 0x64
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	2301      	movs	r3, #1
 80021e8:	480b      	ldr	r0, [pc, #44]	; (8002218 <drv_spi_write+0x58>)
 80021ea:	f007 fc60 	bl	8009aae <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 80021ee:	bf00      	nop
 80021f0:	4b09      	ldr	r3, [pc, #36]	; (8002218 <drv_spi_write+0x58>)
 80021f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d0f9      	beq.n	80021f0 <drv_spi_write+0x30>
	DRV_CS_HIGH; 	// CS high
 80021fc:	2201      	movs	r2, #1
 80021fe:	2110      	movs	r1, #16
 8002200:	4804      	ldr	r0, [pc, #16]	; (8002214 <drv_spi_write+0x54>)
 8002202:	f006 fdf7 	bl	8008df4 <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	885b      	ldrh	r3, [r3, #2]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40020000 	.word	0x40020000
 8002218:	20009578 	.word	0x20009578

0800221c <drv_read_FSR1>:
uint16_t drv_read_FSR1(DRVStruct drv){
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	463b      	mov	r3, r7
 8002224:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR1);
 8002228:	463b      	mov	r3, r7
 800222a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff ffc6 	bl	80021c0 <drv_spi_write>
 8002234:	4603      	mov	r3, r0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <drv_read_FSR2>:

uint16_t drv_read_FSR2(DRVStruct drv){
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	463b      	mov	r3, r7
 8002246:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR2);
 800224a:	463b      	mov	r3, r7
 800224c:	f248 0101 	movw	r1, #32769	; 0x8001
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff ffb5 	bl	80021c0 <drv_spi_write>
 8002256:	4603      	mov	r3, r0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <drv_read_register>:

uint16_t drv_read_register(DRVStruct drv, int reg){
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	f107 0308 	add.w	r3, r7, #8
 800226a:	e883 0003 	stmia.w	r3, {r0, r1}
 800226e:	607a      	str	r2, [r7, #4]
	return drv_spi_write(&drv, (1<<15)|(reg<<11));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	02db      	lsls	r3, r3, #11
 8002274:	b21b      	sxth	r3, r3
 8002276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800227a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800227e:	b21b      	sxth	r3, r3
 8002280:	b29a      	uxth	r2, r3
 8002282:	f107 0308 	add.w	r3, r7, #8
 8002286:	4611      	mov	r1, r2
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff99 	bl	80021c0 <drv_spi_write>
 800228e:	4603      	mov	r3, r0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <drv_write_register>:
void drv_write_register(DRVStruct drv, int reg, int val){
 8002298:	b590      	push	{r4, r7, lr}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	f107 0408 	add.w	r4, r7, #8
 80022a2:	e884 0003 	stmia.w	r4, {r0, r1}
 80022a6:	607a      	str	r2, [r7, #4]
 80022a8:	603b      	str	r3, [r7, #0]
	drv_spi_write(&drv, (reg<<11)|val);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	02db      	lsls	r3, r3, #11
 80022ae:	b21a      	sxth	r2, r3
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	b21b      	sxth	r3, r3
 80022b4:	4313      	orrs	r3, r2
 80022b6:	b21b      	sxth	r3, r3
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	f107 0308 	add.w	r3, r7, #8
 80022be:	4611      	mov	r1, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff ff7d 	bl	80021c0 <drv_spi_write>
}
 80022c6:	bf00      	nop
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd90      	pop	{r4, r7, pc}

080022ce <drv_write_DCR>:
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 80022ce:	b590      	push	{r4, r7, lr}
 80022d0:	b087      	sub	sp, #28
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	f107 0408 	add.w	r4, r7, #8
 80022d8:	e884 0003 	stmia.w	r4, {r0, r1}
 80022dc:	607a      	str	r2, [r7, #4]
 80022de:	603b      	str	r3, [r7, #0]
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	025b      	lsls	r3, r3, #9
 80022e4:	b21b      	sxth	r3, r3
 80022e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022ea:	b21a      	sxth	r2, r3
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	021b      	lsls	r3, r3, #8
 80022f0:	b21b      	sxth	r3, r3
 80022f2:	4313      	orrs	r3, r2
 80022f4:	b21a      	sxth	r2, r3
 80022f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f8:	01db      	lsls	r3, r3, #7
 80022fa:	b21b      	sxth	r3, r3
 80022fc:	4313      	orrs	r3, r2
 80022fe:	b21a      	sxth	r2, r3
 8002300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002302:	015b      	lsls	r3, r3, #5
 8002304:	b21b      	sxth	r3, r3
 8002306:	4313      	orrs	r3, r2
 8002308:	b21a      	sxth	r2, r3
 800230a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	b21b      	sxth	r3, r3
 8002310:	4313      	orrs	r3, r2
 8002312:	b21a      	sxth	r2, r3
 8002314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	b21b      	sxth	r3, r3
 800231a:	4313      	orrs	r3, r2
 800231c:	b21a      	sxth	r2, r3
 800231e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	b21b      	sxth	r3, r3
 8002324:	4313      	orrs	r3, r2
 8002326:	b21a      	sxth	r2, r3
 8002328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	b21b      	sxth	r3, r3
 800232e:	4313      	orrs	r3, r2
 8002330:	b21a      	sxth	r2, r3
 8002332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002334:	b21b      	sxth	r3, r3
 8002336:	4313      	orrs	r3, r2
 8002338:	b21b      	sxth	r3, r3
 800233a:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 800233c:	8afa      	ldrh	r2, [r7, #22]
 800233e:	f107 0308 	add.w	r3, r7, #8
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ff3b 	bl	80021c0 <drv_spi_write>
}
 800234a:	bf00      	nop
 800234c:	371c      	adds	r7, #28
 800234e:	46bd      	mov	sp, r7
 8002350:	bd90      	pop	{r4, r7, pc}

08002352 <drv_write_OCPCR>:
}
void drv_write_LSR(DRVStruct drv, int CBC, int TDRIVE, int IDRIVEP_LS, int IDRIVEN_LS){
	uint16_t val = (LSR<<11) | (CBC<<10) | (TDRIVE<<8) | (IDRIVEP_LS<<4) | IDRIVEN_LS;
	drv_spi_write(&drv, val);
}
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 8002352:	b590      	push	{r4, r7, lr}
 8002354:	b087      	sub	sp, #28
 8002356:	af00      	add	r7, sp, #0
 8002358:	f107 0408 	add.w	r4, r7, #8
 800235c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	603b      	str	r3, [r7, #0]
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	029b      	lsls	r3, r3, #10
 8002368:	b21b      	sxth	r3, r3
 800236a:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800236e:	b21a      	sxth	r2, r3
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	021b      	lsls	r3, r3, #8
 8002374:	b21b      	sxth	r3, r3
 8002376:	4313      	orrs	r3, r2
 8002378:	b21a      	sxth	r2, r3
 800237a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237c:	019b      	lsls	r3, r3, #6
 800237e:	b21b      	sxth	r3, r3
 8002380:	4313      	orrs	r3, r2
 8002382:	b21a      	sxth	r2, r3
 8002384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	b21b      	sxth	r3, r3
 800238a:	4313      	orrs	r3, r2
 800238c:	b21a      	sxth	r2, r3
 800238e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002390:	b21b      	sxth	r3, r3
 8002392:	4313      	orrs	r3, r2
 8002394:	b21b      	sxth	r3, r3
 8002396:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8002398:	8afa      	ldrh	r2, [r7, #22]
 800239a:	f107 0308 	add.w	r3, r7, #8
 800239e:	4611      	mov	r1, r2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ff0d 	bl	80021c0 <drv_spi_write>
}
 80023a6:	bf00      	nop
 80023a8:	371c      	adds	r7, #28
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd90      	pop	{r4, r7, pc}

080023ae <drv_write_CSACR>:
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 80023ae:	b590      	push	{r4, r7, lr}
 80023b0:	b087      	sub	sp, #28
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	f107 0408 	add.w	r4, r7, #8
 80023b8:	e884 0003 	stmia.w	r4, {r0, r1}
 80023bc:	607a      	str	r2, [r7, #4]
 80023be:	603b      	str	r3, [r7, #0]
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	029b      	lsls	r3, r3, #10
 80023c4:	b21b      	sxth	r3, r3
 80023c6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80023ca:	b21a      	sxth	r2, r3
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	025b      	lsls	r3, r3, #9
 80023d0:	b21b      	sxth	r3, r3
 80023d2:	4313      	orrs	r3, r2
 80023d4:	b21a      	sxth	r2, r3
 80023d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d8:	021b      	lsls	r3, r3, #8
 80023da:	b21b      	sxth	r3, r3
 80023dc:	4313      	orrs	r3, r2
 80023de:	b21a      	sxth	r2, r3
 80023e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e2:	019b      	lsls	r3, r3, #6
 80023e4:	b21b      	sxth	r3, r3
 80023e6:	4313      	orrs	r3, r2
 80023e8:	b21a      	sxth	r2, r3
 80023ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ec:	015b      	lsls	r3, r3, #5
 80023ee:	b21b      	sxth	r3, r3
 80023f0:	4313      	orrs	r3, r2
 80023f2:	b21a      	sxth	r2, r3
 80023f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	b21b      	sxth	r3, r3
 80023fa:	4313      	orrs	r3, r2
 80023fc:	b21a      	sxth	r2, r3
 80023fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	b21b      	sxth	r3, r3
 8002404:	4313      	orrs	r3, r2
 8002406:	b21a      	sxth	r2, r3
 8002408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	b21b      	sxth	r3, r3
 800240e:	4313      	orrs	r3, r2
 8002410:	b21a      	sxth	r2, r3
 8002412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002414:	b21b      	sxth	r3, r3
 8002416:	4313      	orrs	r3, r2
 8002418:	b21b      	sxth	r3, r3
 800241a:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 800241c:	8afa      	ldrh	r2, [r7, #22]
 800241e:	f107 0308 	add.w	r3, r7, #8
 8002422:	4611      	mov	r1, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fecb 	bl	80021c0 <drv_spi_write>
}
 800242a:	bf00      	nop
 800242c:	371c      	adds	r7, #28
 800242e:	46bd      	mov	sp, r7
 8002430:	bd90      	pop	{r4, r7, pc}

08002432 <drv_enable_gd>:
void drv_enable_gd(DRVStruct drv){
 8002432:	b580      	push	{r7, lr}
 8002434:	b084      	sub	sp, #16
 8002436:	af00      	add	r7, sp, #0
 8002438:	463b      	mov	r3, r7
 800243a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
 800243e:	2202      	movs	r2, #2
 8002440:	463b      	mov	r3, r7
 8002442:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002446:	f7ff ff0b 	bl	8002260 <drv_read_register>
 800244a:	4603      	mov	r3, r0
 800244c:	f023 0304 	bic.w	r3, r3, #4
 8002450:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 8002452:	89fb      	ldrh	r3, [r7, #14]
 8002454:	2202      	movs	r2, #2
 8002456:	4639      	mov	r1, r7
 8002458:	c903      	ldmia	r1, {r0, r1}
 800245a:	f7ff ff1d 	bl	8002298 <drv_write_register>
}
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <drv_disable_gd>:
void drv_disable_gd(DRVStruct drv){
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	463b      	mov	r3, r7
 800246e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) | (0x1<<2);
 8002472:	2202      	movs	r2, #2
 8002474:	463b      	mov	r3, r7
 8002476:	e893 0003 	ldmia.w	r3, {r0, r1}
 800247a:	f7ff fef1 	bl	8002260 <drv_read_register>
 800247e:	4603      	mov	r3, r0
 8002480:	f043 0304 	orr.w	r3, r3, #4
 8002484:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 8002486:	89fb      	ldrh	r3, [r7, #14]
 8002488:	2202      	movs	r2, #2
 800248a:	4639      	mov	r1, r7
 800248c:	c903      	ldmia	r1, {r0, r1}
 800248e:	f7ff ff03 	bl	8002298 <drv_write_register>
}
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <drv_calibrate>:
void drv_calibrate(DRVStruct drv){
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	463b      	mov	r3, r7
 80024a2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (0x1<<4) + (0x1<<3) + (0x1<<2);
 80024a6:	231c      	movs	r3, #28
 80024a8:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, CSACR, val);
 80024aa:	89fb      	ldrh	r3, [r7, #14]
 80024ac:	2206      	movs	r2, #6
 80024ae:	4639      	mov	r1, r7
 80024b0:	c903      	ldmia	r1, {r0, r1}
 80024b2:	f7ff fef1 	bl	8002298 <drv_write_register>
}
 80024b6:	bf00      	nop
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <drv_print_faults>:
void drv_print_faults(DRVStruct drv){
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	463b      	mov	r3, r7
 80024c8:	e883 0003 	stmia.w	r3, {r0, r1}
    uint16_t val1 = drv_read_FSR1(drv);
 80024cc:	463b      	mov	r3, r7
 80024ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024d2:	f7ff fea3 	bl	800221c <drv_read_FSR1>
 80024d6:	4603      	mov	r3, r0
 80024d8:	81fb      	strh	r3, [r7, #14]
    uint16_t val2 = drv_read_FSR2(drv);
 80024da:	463b      	mov	r3, r7
 80024dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024e0:	f7ff fead 	bl	800223e <drv_read_FSR2>
 80024e4:	4603      	mov	r3, r0
 80024e6:	81bb      	strh	r3, [r7, #12]

    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");}
 80024e8:	89fb      	ldrh	r3, [r7, #14]
 80024ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <drv_print_faults+0x38>
 80024f2:	4857      	ldr	r0, [pc, #348]	; (8002650 <drv_print_faults+0x190>)
 80024f4:	f00a fc08 	bl	800cd08 <iprintf>

    if(val1 & (1<<9)){printf("VDS_OCP\n\r");}
 80024f8:	89fb      	ldrh	r3, [r7, #14]
 80024fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <drv_print_faults+0x48>
 8002502:	4854      	ldr	r0, [pc, #336]	; (8002654 <drv_print_faults+0x194>)
 8002504:	f00a fc00 	bl	800cd08 <iprintf>
    if(val1 & (1<<8)){printf("GDF\n\r");}
 8002508:	89fb      	ldrh	r3, [r7, #14]
 800250a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <drv_print_faults+0x58>
 8002512:	4851      	ldr	r0, [pc, #324]	; (8002658 <drv_print_faults+0x198>)
 8002514:	f00a fbf8 	bl	800cd08 <iprintf>
    if(val1 & (1<<7)){printf("UVLO\n\r");}
 8002518:	89fb      	ldrh	r3, [r7, #14]
 800251a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <drv_print_faults+0x68>
 8002522:	484e      	ldr	r0, [pc, #312]	; (800265c <drv_print_faults+0x19c>)
 8002524:	f00a fbf0 	bl	800cd08 <iprintf>
    if(val1 & (1<<6)){printf("OTSD\n\r");}
 8002528:	89fb      	ldrh	r3, [r7, #14]
 800252a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <drv_print_faults+0x78>
 8002532:	484b      	ldr	r0, [pc, #300]	; (8002660 <drv_print_faults+0x1a0>)
 8002534:	f00a fbe8 	bl	800cd08 <iprintf>
    if(val1 & (1<<5)){printf("VDS_HA\n\r");}
 8002538:	89fb      	ldrh	r3, [r7, #14]
 800253a:	f003 0320 	and.w	r3, r3, #32
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <drv_print_faults+0x88>
 8002542:	4848      	ldr	r0, [pc, #288]	; (8002664 <drv_print_faults+0x1a4>)
 8002544:	f00a fbe0 	bl	800cd08 <iprintf>
    if(val1 & (1<<4)){printf("VDS_LA\n\r");}
 8002548:	89fb      	ldrh	r3, [r7, #14]
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <drv_print_faults+0x98>
 8002552:	4845      	ldr	r0, [pc, #276]	; (8002668 <drv_print_faults+0x1a8>)
 8002554:	f00a fbd8 	bl	800cd08 <iprintf>
    if(val1 & (1<<3)){printf("VDS_HB\n\r");}
 8002558:	89fb      	ldrh	r3, [r7, #14]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <drv_print_faults+0xa8>
 8002562:	4842      	ldr	r0, [pc, #264]	; (800266c <drv_print_faults+0x1ac>)
 8002564:	f00a fbd0 	bl	800cd08 <iprintf>
    if(val1 & (1<<2)){printf("VDS_LB\n\r");}
 8002568:	89fb      	ldrh	r3, [r7, #14]
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <drv_print_faults+0xb8>
 8002572:	483f      	ldr	r0, [pc, #252]	; (8002670 <drv_print_faults+0x1b0>)
 8002574:	f00a fbc8 	bl	800cd08 <iprintf>
    if(val1 & (1<<1)){printf("VDS_HC\n\r");}
 8002578:	89fb      	ldrh	r3, [r7, #14]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <drv_print_faults+0xc8>
 8002582:	483c      	ldr	r0, [pc, #240]	; (8002674 <drv_print_faults+0x1b4>)
 8002584:	f00a fbc0 	bl	800cd08 <iprintf>
    if(val1 & (1)){printf("VDS_LC\n\r");}
 8002588:	89fb      	ldrh	r3, [r7, #14]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <drv_print_faults+0xd8>
 8002592:	4839      	ldr	r0, [pc, #228]	; (8002678 <drv_print_faults+0x1b8>)
 8002594:	f00a fbb8 	bl	800cd08 <iprintf>

    if(val2 & (1<<10)){printf("SA_OC\n\r");}
 8002598:	89bb      	ldrh	r3, [r7, #12]
 800259a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <drv_print_faults+0xe8>
 80025a2:	4836      	ldr	r0, [pc, #216]	; (800267c <drv_print_faults+0x1bc>)
 80025a4:	f00a fbb0 	bl	800cd08 <iprintf>
    if(val2 & (1<<9)){printf("SB_OC\n\r");}
 80025a8:	89bb      	ldrh	r3, [r7, #12]
 80025aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <drv_print_faults+0xf8>
 80025b2:	4833      	ldr	r0, [pc, #204]	; (8002680 <drv_print_faults+0x1c0>)
 80025b4:	f00a fba8 	bl	800cd08 <iprintf>
    if(val2 & (1<<8)){printf("SC_OC\n\r");}
 80025b8:	89bb      	ldrh	r3, [r7, #12]
 80025ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <drv_print_faults+0x108>
 80025c2:	4830      	ldr	r0, [pc, #192]	; (8002684 <drv_print_faults+0x1c4>)
 80025c4:	f00a fba0 	bl	800cd08 <iprintf>
    if(val2 & (1<<7)){printf("OTW\n\r");}
 80025c8:	89bb      	ldrh	r3, [r7, #12]
 80025ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d002      	beq.n	80025d8 <drv_print_faults+0x118>
 80025d2:	482d      	ldr	r0, [pc, #180]	; (8002688 <drv_print_faults+0x1c8>)
 80025d4:	f00a fb98 	bl	800cd08 <iprintf>
    if(val2 & (1<<6)){printf("CPUV\n\r");}
 80025d8:	89bb      	ldrh	r3, [r7, #12]
 80025da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d002      	beq.n	80025e8 <drv_print_faults+0x128>
 80025e2:	482a      	ldr	r0, [pc, #168]	; (800268c <drv_print_faults+0x1cc>)
 80025e4:	f00a fb90 	bl	800cd08 <iprintf>
    if(val2 & (1<<5)){printf("VGS_HA\n\r");}
 80025e8:	89bb      	ldrh	r3, [r7, #12]
 80025ea:	f003 0320 	and.w	r3, r3, #32
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <drv_print_faults+0x138>
 80025f2:	4827      	ldr	r0, [pc, #156]	; (8002690 <drv_print_faults+0x1d0>)
 80025f4:	f00a fb88 	bl	800cd08 <iprintf>
    if(val2 & (1<<4)){printf("VGS_LA\n\r");}
 80025f8:	89bb      	ldrh	r3, [r7, #12]
 80025fa:	f003 0310 	and.w	r3, r3, #16
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <drv_print_faults+0x148>
 8002602:	4824      	ldr	r0, [pc, #144]	; (8002694 <drv_print_faults+0x1d4>)
 8002604:	f00a fb80 	bl	800cd08 <iprintf>
    if(val2 & (1<<3)){printf("VGS_HB\n\r");}
 8002608:	89bb      	ldrh	r3, [r7, #12]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b00      	cmp	r3, #0
 8002610:	d002      	beq.n	8002618 <drv_print_faults+0x158>
 8002612:	4821      	ldr	r0, [pc, #132]	; (8002698 <drv_print_faults+0x1d8>)
 8002614:	f00a fb78 	bl	800cd08 <iprintf>
    if(val2 & (1<<2)){printf("VGS_LB\n\r");}
 8002618:	89bb      	ldrh	r3, [r7, #12]
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b00      	cmp	r3, #0
 8002620:	d002      	beq.n	8002628 <drv_print_faults+0x168>
 8002622:	481e      	ldr	r0, [pc, #120]	; (800269c <drv_print_faults+0x1dc>)
 8002624:	f00a fb70 	bl	800cd08 <iprintf>
    if(val2 & (1<<1)){printf("VGS_HC\n\r");}
 8002628:	89bb      	ldrh	r3, [r7, #12]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <drv_print_faults+0x178>
 8002632:	481b      	ldr	r0, [pc, #108]	; (80026a0 <drv_print_faults+0x1e0>)
 8002634:	f00a fb68 	bl	800cd08 <iprintf>
    if(val2 & (1)){printf("VGS_LC\n\r");}
 8002638:	89bb      	ldrh	r3, [r7, #12]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <drv_print_faults+0x188>
 8002642:	4818      	ldr	r0, [pc, #96]	; (80026a4 <drv_print_faults+0x1e4>)
 8002644:	f00a fb60 	bl	800cd08 <iprintf>

}
 8002648:	bf00      	nop
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	08010a50 	.word	0x08010a50
 8002654:	08010a5c 	.word	0x08010a5c
 8002658:	08010a68 	.word	0x08010a68
 800265c:	08010a70 	.word	0x08010a70
 8002660:	08010a78 	.word	0x08010a78
 8002664:	08010a80 	.word	0x08010a80
 8002668:	08010a8c 	.word	0x08010a8c
 800266c:	08010a98 	.word	0x08010a98
 8002670:	08010aa4 	.word	0x08010aa4
 8002674:	08010ab0 	.word	0x08010ab0
 8002678:	08010abc 	.word	0x08010abc
 800267c:	08010ac8 	.word	0x08010ac8
 8002680:	08010ad0 	.word	0x08010ad0
 8002684:	08010ad8 	.word	0x08010ad8
 8002688:	08010ae0 	.word	0x08010ae0
 800268c:	08010ae8 	.word	0x08010ae8
 8002690:	08010af0 	.word	0x08010af0
 8002694:	08010afc 	.word	0x08010afc
 8002698:	08010b08 	.word	0x08010b08
 800269c:	08010b14 	.word	0x08010b14
 80026a0:	08010b20 	.word	0x08010b20
 80026a4:	08010b2c 	.word	0x08010b2c

080026a8 <flash_writer_init>:
#include "flash_writer.h"




void flash_writer_init(FlashWriter *fw, uint32_t sector) {
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
	if(sector>7) sector = 7;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b07      	cmp	r3, #7
 80026b6:	d901      	bls.n	80026bc <flash_writer_init+0x14>
 80026b8:	2307      	movs	r3, #7
 80026ba:	603b      	str	r3, [r7, #0]
	fw->sector = sector;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	609a      	str	r2, [r3, #8]
	fw->base = __SECTOR_ADDRS[sector];
 80026c2:	4a07      	ldr	r2, [pc, #28]	; (80026e0 <flash_writer_init+0x38>)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	605a      	str	r2, [r3, #4]
	fw->ready = false;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	20000000 	.word	0x20000000

080026e4 <flash_writer_open>:
bool flash_writer_ready(FlashWriter fw) {
    return fw.ready;
}

void flash_writer_open(FlashWriter * fw) {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
    FLASH_Unlock();
 80026ec:	f003 fa7c 	bl	8005be8 <FLASH_Unlock>
    FLASH_ClearFlag( FLASH_FLAG_EOP |  FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 80026f0:	20f1      	movs	r0, #241	; 0xf1
 80026f2:	f003 fb35 	bl	8005d60 <FLASH_ClearFlag>
    FLASH_EraseSector(__SECTORS[fw->sector], VoltageRange_3);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	4a07      	ldr	r2, [pc, #28]	; (8002718 <flash_writer_open+0x34>)
 80026fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002700:	2102      	movs	r1, #2
 8002702:	4618      	mov	r0, r3
 8002704:	f003 fa98 	bl	8005c38 <FLASH_EraseSector>
    fw->ready = true;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20000020 	.word	0x20000020

0800271c <flash_writer_write_int>:

void flash_writer_write_int(FlashWriter fw, uint32_t index, int x) {
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b087      	sub	sp, #28
 8002720:	af00      	add	r7, sp, #0
 8002722:	1d3c      	adds	r4, r7, #4
 8002724:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002728:	603b      	str	r3, [r7, #0]
    union UN {int a; uint32_t b;};
    union UN un;
    un.a = x;
 800272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272c:	617b      	str	r3, [r7, #20]
    FLASH_ProgramWord(fw.base + 4 * index, un.b);
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	4611      	mov	r1, r2
 800273a:	4618      	mov	r0, r3
 800273c:	f003 fadc 	bl	8005cf8 <FLASH_ProgramWord>
}
 8002740:	bf00      	nop
 8002742:	371c      	adds	r7, #28
 8002744:	46bd      	mov	sp, r7
 8002746:	bd90      	pop	{r4, r7, pc}

08002748 <flash_writer_write_float>:

void flash_writer_write_uint(FlashWriter fw, uint32_t index, unsigned int x) {
    FLASH_ProgramWord(fw.base + 4 * index, x);
}

void flash_writer_write_float(FlashWriter fw, uint32_t index, float x) {
 8002748:	b590      	push	{r4, r7, lr}
 800274a:	b089      	sub	sp, #36	; 0x24
 800274c:	af00      	add	r7, sp, #0
 800274e:	f107 040c 	add.w	r4, r7, #12
 8002752:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	ed87 0a01 	vstr	s0, [r7, #4]
    union UN {float a; uint32_t b;};
    union UN un;
    un.a = x;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	61fb      	str	r3, [r7, #28]
    FLASH_ProgramWord(fw.base + 4 * index, un.b);
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	69fa      	ldr	r2, [r7, #28]
 800276a:	4611      	mov	r1, r2
 800276c:	4618      	mov	r0, r3
 800276e:	f003 fac3 	bl	8005cf8 <FLASH_ProgramWord>
}
 8002772:	bf00      	nop
 8002774:	3724      	adds	r7, #36	; 0x24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd90      	pop	{r4, r7, pc}

0800277a <flash_writer_close>:

void flash_writer_close(FlashWriter * fw) {
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
    FLASH_Lock();
 8002782:	f003 fa49 	bl	8005c18 <FLASH_Lock>
    fw->ready = false;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
}
 800278c:	bf00      	nop
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <flash_read_int>:

int flash_read_int(FlashWriter fw, uint32_t index) {
 8002794:	b490      	push	{r4, r7}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	1d3c      	adds	r4, r7, #4
 800279c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80027a0:	603b      	str	r3, [r7, #0]
    return *(int*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4a05      	ldr	r2, [pc, #20]	; (80027bc <flash_read_int+0x28>)
 80027a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	681b      	ldr	r3, [r3, #0]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc90      	pop	{r4, r7}
 80027ba:	4770      	bx	lr
 80027bc:	20000000 	.word	0x20000000

080027c0 <flash_read_float>:

uint32_t flash_read_uint(FlashWriter fw, uint32_t index) {
    return *(uint32_t*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
}

float flash_read_float(FlashWriter fw, uint32_t index) {
 80027c0:	b490      	push	{r4, r7}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	1d3c      	adds	r4, r7, #4
 80027c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80027cc:	603b      	str	r3, [r7, #0]
    return *(float*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4a07      	ldr	r2, [pc, #28]	; (80027f0 <flash_read_float+0x30>)
 80027d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	ee07 3a90 	vmov	s15, r3
}
 80027e2:	eeb0 0a67 	vmov.f32	s0, s15
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc90      	pop	{r4, r7}
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	20000000 	.word	0x20000000

080027f4 <set_dtc>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void set_dtc(ControllerStruct *controller){
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002800:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002806:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800280c:	60fb      	str	r3, [r7, #12]

	if(INVERT_DTC){
		dtc_u = 1.0f - controller->dtc_u;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002814:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002818:	ee77 7a67 	vsub.f32	s15, s14, s15
 800281c:	edc7 7a05 	vstr	s15, [r7, #20]
		dtc_v = 1.0f - controller->dtc_v;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002826:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800282a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800282e:	edc7 7a04 	vstr	s15, [r7, #16]
		dtc_w = 1.0f - controller->dtc_w;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002838:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800283c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002840:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002844:	4b3b      	ldr	r3, [pc, #236]	; (8002934 <set_dtc+0x140>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d136      	bne.n	80028ba <set_dtc+0xc6>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 800284c:	4b3a      	ldr	r3, [pc, #232]	; (8002938 <set_dtc+0x144>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002852:	ee07 3a90 	vmov	s15, r3
 8002856:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800285a:	edd7 7a05 	vldr	s15, [r7, #20]
 800285e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002862:	4b35      	ldr	r3, [pc, #212]	; (8002938 <set_dtc+0x144>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800286a:	ee17 2a90 	vmov	r2, s15
 800286e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 8002870:	4b31      	ldr	r3, [pc, #196]	; (8002938 <set_dtc+0x144>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002876:	ee07 3a90 	vmov	s15, r3
 800287a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800287e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002886:	4b2c      	ldr	r3, [pc, #176]	; (8002938 <set_dtc+0x144>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800288e:	ee17 2a90 	vmov	r2, s15
 8002892:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 8002894:	4b28      	ldr	r3, [pc, #160]	; (8002938 <set_dtc+0x144>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289a:	ee07 3a90 	vmov	s15, r3
 800289e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80028a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028aa:	4b23      	ldr	r3, [pc, #140]	; (8002938 <set_dtc+0x144>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028b2:	ee17 2a90 	vmov	r2, s15
 80028b6:	63da      	str	r2, [r3, #60]	; 0x3c
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
	}
}
 80028b8:	e035      	b.n	8002926 <set_dtc+0x132>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
 80028ba:	4b1f      	ldr	r3, [pc, #124]	; (8002938 <set_dtc+0x144>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	ee07 3a90 	vmov	s15, r3
 80028c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80028cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d0:	4b19      	ldr	r3, [pc, #100]	; (8002938 <set_dtc+0x144>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028d8:	ee17 2a90 	vmov	r2, s15
 80028dc:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
 80028de:	4b16      	ldr	r3, [pc, #88]	; (8002938 <set_dtc+0x144>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e4:	ee07 3a90 	vmov	s15, r3
 80028e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80028f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028f4:	4b10      	ldr	r3, [pc, #64]	; (8002938 <set_dtc+0x144>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028fc:	ee17 2a90 	vmov	r2, s15
 8002900:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 8002902:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <set_dtc+0x144>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002908:	ee07 3a90 	vmov	s15, r3
 800290c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002910:	edd7 7a03 	vldr	s15, [r7, #12]
 8002914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002918:	4b07      	ldr	r3, [pc, #28]	; (8002938 <set_dtc+0x144>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002920:	ee17 2a90 	vmov	r2, s15
 8002924:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002926:	bf00      	nop
 8002928:	371c      	adds	r7, #28
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	20009074 	.word	0x20009074
 8002938:	200095d0 	.word	0x200095d0

0800293c <analog_sample>:

void analog_sample (ControllerStruct *controller){
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
	/* Sampe ADCs */
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002944:	4b38      	ldr	r3, [pc, #224]	; (8002a28 <analog_sample+0xec>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10e      	bne.n	800296a <analog_sample+0x2e>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 800294c:	4837      	ldr	r0, [pc, #220]	; (8002a2c <analog_sample+0xf0>)
 800294e:	f004 fe3a 	bl	80075c6 <HAL_ADC_GetValue>
 8002952:	4603      	mov	r3, r0
 8002954:	461a      	mov	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 800295a:	4835      	ldr	r0, [pc, #212]	; (8002a30 <analog_sample+0xf4>)
 800295c:	f004 fe33 	bl	80075c6 <HAL_ADC_GetValue>
 8002960:	4603      	mov	r3, r0
 8002962:	461a      	mov	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	e00d      	b.n	8002986 <analog_sample+0x4a>
		//adc_ch_ic = ADC_CH_IC;
	}
	else{
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 800296a:	4831      	ldr	r0, [pc, #196]	; (8002a30 <analog_sample+0xf4>)
 800296c:	f004 fe2b 	bl	80075c6 <HAL_ADC_GetValue>
 8002970:	4603      	mov	r3, r0
 8002972:	461a      	mov	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 8002978:	482c      	ldr	r0, [pc, #176]	; (8002a2c <analog_sample+0xf0>)
 800297a:	f004 fe24 	bl	80075c6 <HAL_ADC_GetValue>
 800297e:	4603      	mov	r3, r0
 8002980:	461a      	mov	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	609a      	str	r2, [r3, #8]
		//adc_ch_ic = ADC_CH_IB;
	}


	HAL_ADC_Start(&ADC_CH_MAIN);
 8002986:	4829      	ldr	r0, [pc, #164]	; (8002a2c <analog_sample+0xf0>)
 8002988:	f004 fcc0 	bl	800730c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&ADC_CH_MAIN, HAL_MAX_DELAY);
 800298c:	f04f 31ff 	mov.w	r1, #4294967295
 8002990:	4826      	ldr	r0, [pc, #152]	; (8002a2c <analog_sample+0xf0>)
 8002992:	f004 fd8d 	bl	80074b0 <HAL_ADC_PollForConversion>

	controller->adc_vbus_raw = HAL_ADC_GetValue(&ADC_CH_VBUS);
 8002996:	4827      	ldr	r0, [pc, #156]	; (8002a34 <analog_sample+0xf8>)
 8002998:	f004 fe15 	bl	80075c6 <HAL_ADC_GetValue>
 800299c:	4603      	mov	r3, r0
 800299e:	461a      	mov	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	611a      	str	r2, [r3, #16]
	controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	ee07 3a90 	vmov	s15, r3
 80029ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029b0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002a38 <analog_sample+0xfc>
 80029b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	edc3 7a08 	vstr	s15, [r3, #32]

    controller->i_a = controller->i_scale*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	ee07 3a90 	vmov	s15, r3
 80029d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	edc3 7a05 	vstr	s15, [r3, #20]
    controller->i_b = controller->i_scale*(float)(controller->adc_b_raw - controller->adc_b_offset);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	ee07 3a90 	vmov	s15, r3
 80029f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	edc3 7a06 	vstr	s15, [r3, #24]
    controller->i_c = -controller->i_a - controller->i_b;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a0c:	eeb1 7a67 	vneg.f32	s14, s15
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	edd3 7a06 	vldr	s15, [r3, #24]
 8002a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	edc3 7a07 	vstr	s15, [r3, #28]

}
 8002a20:	bf00      	nop
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20009074 	.word	0x20009074
 8002a2c:	20000370 	.word	0x20000370
 8002a30:	20000328 	.word	0x20000328
 8002a34:	200003b8 	.word	0x200003b8
 8002a38:	3c533318 	.word	0x3c533318

08002a3c <abc>:

void abc( float theta, float d, float q, float *a, float *b, float *c){
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	ed87 0a05 	vstr	s0, [r7, #20]
 8002a46:	edc7 0a04 	vstr	s1, [r7, #16]
 8002a4a:	ed87 1a03 	vstr	s2, [r7, #12]
 8002a4e:	60b8      	str	r0, [r7, #8]
 8002a50:	6079      	str	r1, [r7, #4]
 8002a52:	603a      	str	r2, [r7, #0]
    /* Inverse DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1 */

    float cf = cos_lut(theta);
 8002a54:	ed97 0a05 	vldr	s0, [r7, #20]
 8002a58:	f002 fcf2 	bl	8005440 <cos_lut>
 8002a5c:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002a60:	ed97 0a05 	vldr	s0, [r7, #20]
 8002a64:	f002 fcb2 	bl	80053cc <sin_lut>
 8002a68:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 8002a6c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a70:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a78:	edd7 6a06 	vldr	s13, [r7, #24]
 8002a7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 8002a8e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a92:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002b3c <abc+0x100>
 8002a96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a9a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a9e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002aa2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002aa6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002aaa:	edd7 7a04 	vldr	s15, [r7, #16]
 8002aae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ab2:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ab6:	eddf 6a22 	vldr	s13, [pc, #136]	; 8002b40 <abc+0x104>
 8002aba:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002abe:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ac2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002ac6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002aca:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002ace:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ad2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	edc3 7a00 	vstr	s15, [r3]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 8002ae0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ae4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002b40 <abc+0x104>
 8002ae8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002aec:	edd7 7a07 	vldr	s15, [r7, #28]
 8002af0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002af4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002af8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002afc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b04:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b08:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002b3c <abc+0x100>
 8002b0c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002b10:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b14:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002b18:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002b1c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b20:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	edc3 7a00 	vstr	s15, [r3]
    }
 8002b32:	bf00      	nop
 8002b34:	3720      	adds	r7, #32
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	3f5db3d7 	.word	0x3f5db3d7
 8002b40:	bf5db3d7 	.word	0xbf5db3d7

08002b44 <dq0>:


void dq0(float theta, float a, float b, float c, float *d, float *q){
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	ed87 0a05 	vstr	s0, [r7, #20]
 8002b4e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002b52:	ed87 1a03 	vstr	s2, [r7, #12]
 8002b56:	edc7 1a02 	vstr	s3, [r7, #8]
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
    /* DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1*/

    float cf = cos_lut(theta);
 8002b5e:	ed97 0a05 	vldr	s0, [r7, #20]
 8002b62:	f002 fc6d 	bl	8005440 <cos_lut>
 8002b66:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002b6a:	ed97 0a05 	vldr	s0, [r7, #20]
 8002b6e:	f002 fc2d 	bl	80053cc <sin_lut>
 8002b72:	ed87 0a06 	vstr	s0, [r7, #24]

    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002b76:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b82:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b86:	eddf 6a34 	vldr	s13, [pc, #208]	; 8002c58 <dq0+0x114>
 8002b8a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002b8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b92:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002b96:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002b9a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ba2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ba6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002baa:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bae:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002c5c <dq0+0x118>
 8002bb2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002bb6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bba:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002bbe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002bc2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002bc6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd2:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002c60 <dq0+0x11c>
 8002bd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002be0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002be4:	eeb1 7a67 	vneg.f32	s14, s15
 8002be8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bf0:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bf4:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002c5c <dq0+0x118>
 8002bf8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002bfc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c00:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002c04:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002c08:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c18:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c1c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002c58 <dq0+0x114>
 8002c20:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002c24:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c28:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002c2c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002c30:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c34:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c40:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002c60 <dq0+0x11c>
 8002c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	edc3 7a00 	vstr	s15, [r3]

    }
 8002c4e:	bf00      	nop
 8002c50:	3720      	adds	r7, #32
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	3f5db3d7 	.word	0x3f5db3d7
 8002c5c:	bf5db3d7 	.word	0xbf5db3d7
 8002c60:	3f2aaaab 	.word	0x3f2aaaab

08002c64 <svm>:

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 8002c64:	b580      	push	{r7, lr}
 8002c66:	ed2d 8b02 	vpush	{d8}
 8002c6a:	b08a      	sub	sp, #40	; 0x28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	ed87 0a07 	vstr	s0, [r7, #28]
 8002c72:	edc7 0a06 	vstr	s1, [r7, #24]
 8002c76:	ed87 1a05 	vstr	s2, [r7, #20]
 8002c7a:	edc7 1a04 	vstr	s3, [r7, #16]
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 8002c84:	ed97 1a04 	vldr	s2, [r7, #16]
 8002c88:	edd7 0a05 	vldr	s1, [r7, #20]
 8002c8c:	ed97 0a06 	vldr	s0, [r7, #24]
 8002c90:	f002 fab9 	bl	8005206 <fminf3>
 8002c94:	eeb0 8a40 	vmov.f32	s16, s0
 8002c98:	ed97 1a04 	vldr	s2, [r7, #16]
 8002c9c:	edd7 0a05 	vldr	s1, [r7, #20]
 8002ca0:	ed97 0a06 	vldr	s0, [r7, #24]
 8002ca4:	f002 fa7b 	bl	800519e <fmaxf3>
 8002ca8:	eef0 7a40 	vmov.f32	s15, s0
 8002cac:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002cb0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002cb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cb8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);
 8002cbc:	4b41      	ldr	r3, [pc, #260]	; (8002dc4 <svm+0x160>)
 8002cbe:	623b      	str	r3, [r7, #32]

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002cc0:	ed97 7a06 	vldr	s14, [r7, #24]
 8002cc4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002cc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ccc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002cd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cd4:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002dc8 <svm+0x164>
 8002cd8:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002cdc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ce0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ce4:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cec:	eddf 0a37 	vldr	s1, [pc, #220]	; 8002dcc <svm+0x168>
 8002cf0:	eeb0 0a67 	vmov.f32	s0, s15
 8002cf4:	f002 fa1b 	bl	800512e <fast_fmaxf>
 8002cf8:	eef0 7a40 	vmov.f32	s15, s0
 8002cfc:	eddf 0a34 	vldr	s1, [pc, #208]	; 8002dd0 <svm+0x16c>
 8002d00:	eeb0 0a67 	vmov.f32	s0, s15
 8002d04:	f002 fa2f 	bl	8005166 <fast_fminf>
 8002d08:	eef0 7a40 	vmov.f32	s15, s0
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002d12:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d16:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d1e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d26:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002dc8 <svm+0x164>
 8002d2a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002d2e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d36:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d3e:	eddf 0a23 	vldr	s1, [pc, #140]	; 8002dcc <svm+0x168>
 8002d42:	eeb0 0a67 	vmov.f32	s0, s15
 8002d46:	f002 f9f2 	bl	800512e <fast_fmaxf>
 8002d4a:	eef0 7a40 	vmov.f32	s15, s0
 8002d4e:	eddf 0a20 	vldr	s1, [pc, #128]	; 8002dd0 <svm+0x16c>
 8002d52:	eeb0 0a67 	vmov.f32	s0, s15
 8002d56:	f002 fa06 	bl	8005166 <fast_fminf>
 8002d5a:	eef0 7a40 	vmov.f32	s15, s0
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002d64:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d68:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d70:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d78:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002dc8 <svm+0x164>
 8002d7c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002d80:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d88:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d90:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8002dcc <svm+0x168>
 8002d94:	eeb0 0a67 	vmov.f32	s0, s15
 8002d98:	f002 f9c9 	bl	800512e <fast_fmaxf>
 8002d9c:	eef0 7a40 	vmov.f32	s15, s0
 8002da0:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002dd0 <svm+0x16c>
 8002da4:	eeb0 0a67 	vmov.f32	s0, s15
 8002da8:	f002 f9dd 	bl	8005166 <fast_fminf>
 8002dac:	eef0 7a40 	vmov.f32	s15, s0
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	edc3 7a00 	vstr	s15, [r3]

    }
 8002db6:	bf00      	nop
 8002db8:	3728      	adds	r7, #40	; 0x28
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	ecbd 8b02 	vpop	{d8}
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	3ef0a3d7 	.word	0x3ef0a3d7
 8002dc8:	3f933333 	.word	0x3f933333
 8002dcc:	00000000 	.word	0x00000000
 8002dd0:	3f70a3d7 	.word	0x3f70a3d7

08002dd4 <zero_current>:

void zero_current(ControllerStruct *controller){
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
    int adc_b_offset = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	613b      	str	r3, [r7, #16]
    int n = 1000;
 8002de4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002de8:	60bb      	str	r3, [r7, #8]
    controller->dtc_u = 0.f;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	65da      	str	r2, [r3, #92]	; 0x5c
    controller->dtc_v = 0.f;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	661a      	str	r2, [r3, #96]	; 0x60
    controller->dtc_w = 0.f;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	665a      	str	r2, [r3, #100]	; 0x64
    set_dtc(controller);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff fcf6 	bl	80027f4 <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	e00f      	b.n	8002e2e <zero_current+0x5a>
    	analog_sample(controller);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7ff fd94 	bl	800293c <analog_sample>
    	adc_a_offset +=  controller->adc_a_raw;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]
    	adc_b_offset += controller->adc_b_raw;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4413      	add	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
    for (int i = 0; i<n; i++){               // Average n samples
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	dbeb      	blt.n	8002e0e <zero_current+0x3a>
     }
    controller->adc_a_offset = adc_a_offset/n;
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	fb92 f2f3 	sdiv	r2, r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    controller->adc_b_offset = adc_b_offset/n;
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	fb92 f2f3 	sdiv	r2, r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

    }
 8002e52:	bf00      	nop
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a53      	ldr	r2, [pc, #332]	; (8002fb4 <init_controller_params+0x158>)
 8002e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    controller->ki_q = KI_Q;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a51      	ldr	r2, [pc, #324]	; (8002fb4 <init_controller_params+0x158>)
 8002e70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    controller->k_d = K_SCALE*I_BW;
 8002e74:	4b50      	ldr	r3, [pc, #320]	; (8002fb8 <init_controller_params+0x15c>)
 8002e76:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e7a:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8002fbc <init_controller_params+0x160>
 8002e7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
    controller->k_q = K_SCALE*I_BW;
 8002e88:	4b4b      	ldr	r3, [pc, #300]	; (8002fb8 <init_controller_params+0x15c>)
 8002e8a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e8e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002fbc <init_controller_params+0x160>
 8002e92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8002e9c:	4b46      	ldr	r3, [pc, #280]	; (8002fb8 <init_controller_params+0x15c>)
 8002e9e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ea2:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002fc0 <init_controller_params+0x164>
 8002ea6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eaa:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002fc4 <init_controller_params+0x168>
 8002eae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002eb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002eba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ebe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ec2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ec6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
    controller->ki_fw = .1f*controller->ki_d;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002ed6:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002fc8 <init_controller_params+0x16c>
 8002eda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
    controller->phase_order = PHASE_ORDER;
 8002ee4:	4b39      	ldr	r3, [pc, #228]	; (8002fcc <init_controller_params+0x170>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    controller->flux_linkage = KT/(1.5f*PPAIRS);
 8002eee:	4b32      	ldr	r3, [pc, #200]	; (8002fb8 <init_controller_params+0x15c>)
 8002ef0:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002ef4:	4b30      	ldr	r3, [pc, #192]	; (8002fb8 <init_controller_params+0x15c>)
 8002ef6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002efa:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002efe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
    if(I_MAX <= 40.0f){controller->i_scale = I_SCALE;}
 8002f0c:	4b2a      	ldr	r3, [pc, #168]	; (8002fb8 <init_controller_params+0x15c>)
 8002f0e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f12:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002fd0 <init_controller_params+0x174>
 8002f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1e:	d803      	bhi.n	8002f28 <init_controller_params+0xcc>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a2c      	ldr	r2, [pc, #176]	; (8002fd4 <init_controller_params+0x178>)
 8002f24:	675a      	str	r2, [r3, #116]	; 0x74
 8002f26:	e002      	b.n	8002f2e <init_controller_params+0xd2>
    else{controller->i_scale = 2.0f*I_SCALE;}
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a2b      	ldr	r2, [pc, #172]	; (8002fd8 <init_controller_params+0x17c>)
 8002f2c:	675a      	str	r2, [r3, #116]	; 0x74
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	e036      	b.n	8002fa2 <init_controller_params+0x146>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	ee07 3a90 	vmov	s15, r3
 8002f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f3e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002fdc <init_controller_params+0x180>
 8002f42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f46:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002fe0 <init_controller_params+0x184>
 8002f4a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f4e:	ee16 0a90 	vmov	r0, s13
 8002f52:	f7fd fb29 	bl	80005a8 <__aeabi_f2d>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	ec43 2b10 	vmov	d0, r2, r3
 8002f5e:	f008 ff77 	bl	800be50 <exp>
 8002f62:	ec51 0b10 	vmov	r0, r1, d0
 8002f66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f6a:	4b1e      	ldr	r3, [pc, #120]	; (8002fe4 <init_controller_params+0x188>)
 8002f6c:	f7fd fb74 	bl	8000658 <__aeabi_dmul>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4610      	mov	r0, r2
 8002f76:	4619      	mov	r1, r3
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	4b1a      	ldr	r3, [pc, #104]	; (8002fe8 <init_controller_params+0x18c>)
 8002f7e:	f7fd f9b5 	bl	80002ec <__adddf3>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4610      	mov	r0, r2
 8002f88:	4619      	mov	r1, r3
 8002f8a:	f7fd fe5d 	bl	8000c48 <__aeabi_d2f>
 8002f8e:	4601      	mov	r1, r0
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	3342      	adds	r3, #66	; 0x42
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2b7f      	cmp	r3, #127	; 0x7f
 8002fa6:	ddc5      	ble.n	8002f34 <init_controller_params+0xd8>
    }

    }
 8002fa8:	bf00      	nop
 8002faa:	bf00      	nop
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	3cd0e560 	.word	0x3cd0e560
 8002fb8:	2000075c 	.word	0x2000075c
 8002fbc:	38fba882 	.word	0x38fba882
 8002fc0:	37d1b717 	.word	0x37d1b717
 8002fc4:	40c90fdb 	.word	0x40c90fdb
 8002fc8:	3dcccccd 	.word	0x3dcccccd
 8002fcc:	20009074 	.word	0x20009074
 8002fd0:	42200000 	.word	0x42200000
 8002fd4:	3ca4ffff 	.word	0x3ca4ffff
 8002fd8:	3d24ffff 	.word	0x3d24ffff
 8002fdc:	bc000000 	.word	0xbc000000
 8002fe0:	3d03126f 	.word	0x3d03126f
 8002fe4:	3ff33333 	.word	0x3ff33333
 8002fe8:	3ff00000 	.word	0x3ff00000

08002fec <reset_foc>:

void reset_foc(ControllerStruct *controller){
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]

	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002ff4:	4b36      	ldr	r3, [pc, #216]	; (80030d0 <reset_foc+0xe4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffa:	ee07 3a90 	vmov	s15, r3
 8002ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003002:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003006:	ee67 7a87 	vmul.f32	s15, s15, s14
 800300a:	4b31      	ldr	r3, [pc, #196]	; (80030d0 <reset_foc+0xe4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003012:	ee17 2a90 	vmov	r2, s15
 8003016:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8003018:	4b2d      	ldr	r3, [pc, #180]	; (80030d0 <reset_foc+0xe4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	ee07 3a90 	vmov	s15, r3
 8003022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003026:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800302a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800302e:	4b28      	ldr	r3, [pc, #160]	; (80030d0 <reset_foc+0xe4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003036:	ee17 2a90 	vmov	r2, s15
 800303a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 800303c:	4b24      	ldr	r3, [pc, #144]	; (80030d0 <reset_foc+0xe4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	ee07 3a90 	vmov	s15, r3
 8003046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800304a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800304e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003052:	4b1f      	ldr	r3, [pc, #124]	; (80030d0 <reset_foc+0xe4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800305a:	ee17 2a90 	vmov	r2, s15
 800305e:	639a      	str	r2, [r3, #56]	; 0x38
    controller->i_d_des = 0;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    controller->i_q_des = 0;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    controller->i_d = 0;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	63da      	str	r2, [r3, #60]	; 0x3c
    controller->i_q = 0;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	641a      	str	r2, [r3, #64]	; 0x40
    controller->i_q_filt = 0;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	645a      	str	r2, [r3, #68]	; 0x44
    controller->q_int = 0;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    controller->d_int = 0;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    controller->v_q = 0;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	659a      	str	r2, [r3, #88]	; 0x58
    controller->v_d = 0;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	655a      	str	r2, [r3, #84]	; 0x54
    controller->fw_int = 0;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    controller->otw_flag = 0;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

    }
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	200095d0 	.word	0x200095d0

080030d4 <field_weaken>:
    float val2 = controller->inverter_tab[index+1];
    return val1 + (val2 - val1)*(duty*128.0f - (float)index);
}

void field_weaken(ControllerStruct *controller)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
       /// Field Weakening ///

       controller->fw_int += controller->ki_fw*(controller->v_max - 1.0f - controller->v_ref);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 80030ee:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80030f2:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 80030fc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8
       controller->fw_int = fast_fmaxf(fast_fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 8003114:	eddf 0a40 	vldr	s1, [pc, #256]	; 8003218 <field_weaken+0x144>
 8003118:	eeb0 0a67 	vmov.f32	s0, s15
 800311c:	f002 f823 	bl	8005166 <fast_fminf>
 8003120:	eeb0 7a40 	vmov.f32	s14, s0
 8003124:	4b3d      	ldr	r3, [pc, #244]	; (800321c <field_weaken+0x148>)
 8003126:	edd3 7a06 	vldr	s15, [r3, #24]
 800312a:	eef1 7a67 	vneg.f32	s15, s15
 800312e:	eef0 0a67 	vmov.f32	s1, s15
 8003132:	eeb0 0a47 	vmov.f32	s0, s14
 8003136:	f001 fffa 	bl	800512e <fast_fmaxf>
 800313a:	eef0 7a40 	vmov.f32	s15, s0
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8
       controller->i_q_des = controller->i_q_des + (controller->i_q_des > 0)*controller->fw_int + (controller->i_q_des < 0)*controller->fw_int;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8003150:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003158:	dd02      	ble.n	8003160 <field_weaken+0x8c>
 800315a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800315e:	e001      	b.n	8003164 <field_weaken+0x90>
 8003160:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8003218 <field_weaken+0x144>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 800316a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800316e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8003178:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800317c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003180:	d502      	bpl.n	8003188 <field_weaken+0xb4>
 8003182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003186:	e001      	b.n	800318c <field_weaken+0xb8>
 8003188:	eddf 6a23 	vldr	s13, [pc, #140]	; 8003218 <field_weaken+0x144>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 8003192:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
       controller->i_d_des = controller->fw_int;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	ed93 7a41 	vldr	s14, [r3, #260]	; 0x104
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 80031b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	edd3 6a2b 	vldr	s13, [r3, #172]	; 0xac
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 80031c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031d0:	eeb0 0a67 	vmov.f32	s0, s15
 80031d4:	f008 feb6 	bl	800bf44 <sqrtf>
 80031d8:	ed87 0a03 	vstr	s0, [r7, #12]
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 80031e2:	edd7 0a03 	vldr	s1, [r7, #12]
 80031e6:	eeb0 0a67 	vmov.f32	s0, s15
 80031ea:	f001 ffbc 	bl	8005166 <fast_fminf>
 80031ee:	eeb0 7a40 	vmov.f32	s14, s0
 80031f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80031f6:	eef1 7a67 	vneg.f32	s15, s15
 80031fa:	eef0 0a67 	vmov.f32	s1, s15
 80031fe:	eeb0 0a47 	vmov.f32	s0, s14
 8003202:	f001 ff94 	bl	800512e <fast_fmaxf>
 8003206:	eef0 7a40 	vmov.f32	s15, s0
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0


}
 8003210:	bf00      	nop
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	00000000 	.word	0x00000000
 800321c:	2000075c 	.word	0x2000075c

08003220 <commutate>:
void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	62da      	str	r2, [r3, #44]	; 0x2c
		controller->dtheta_elec = encoder->elec_velocity;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	635a      	str	r2, [r3, #52]	; 0x34
		controller->dtheta_mech = encoder->velocity/GR;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8003240:	4b5e      	ldr	r3, [pc, #376]	; (80033bc <commutate+0x19c>)
 8003242:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8003246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	edd3 6a03 	vldr	s13, [r3, #12]
 8003256:	4b59      	ldr	r3, [pc, #356]	; (80033bc <commutate+0x19c>)
 8003258:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800325c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	ed93 7a05 	vldr	s14, [r3, #20]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	edd3 6a06 	vldr	s13, [r3, #24]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	ed93 6a07 	vldr	s12, [r3, #28]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3340      	adds	r3, #64	; 0x40
 8003288:	4619      	mov	r1, r3
 800328a:	4610      	mov	r0, r2
 800328c:	eef0 1a46 	vmov.f32	s3, s12
 8003290:	eeb0 1a66 	vmov.f32	s2, s13
 8003294:	eef0 0a47 	vmov.f32	s1, s14
 8003298:	eeb0 0a67 	vmov.f32	s0, s15
 800329c:	f7ff fc52 	bl	8002b44 <dq0>

       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80032a6:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80033c0 <commutate+0x1a0>
 80032aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80032b4:	eddf 6a43 	vldr	s13, [pc, #268]	; 80033c4 <commutate+0x1a4>
 80032b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80032cc:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80033c0 <commutate+0x1a0>
 80032d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80032da:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80033c4 <commutate+0x1a4>
 80032de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80032f2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80033c0 <commutate+0x1a0>
 80032f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	edd3 7a08 	vldr	s15, [r3, #32]
 8003300:	eddf 6a30 	vldr	s13, [pc, #192]	; 80033c4 <commutate+0x1a4>
 8003304:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003318:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80033c8 <commutate+0x1a8>
 800331c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003320:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80033cc <commutate+0x1ac>
 8003324:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003328:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80033d0 <commutate+0x1b0>
 800332c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
       controller->v_margin = controller->v_max - controller->v_ref;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8003342:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	edc3 7a3f 	vstr	s15, [r3, #252]	; 0xfc
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 800334c:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <commutate+0x19c>)
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8003368:	eeb0 0a67 	vmov.f32	s0, s15
 800336c:	4610      	mov	r0, r2
 800336e:	f001 ff7e 	bl	800526e <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800337e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003382:	edc7 7a07 	vstr	s15, [r7, #28]
       float i_q_error = controller->i_q_des - controller->i_q;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003392:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003396:	edc7 7a06 	vstr	s15, [r7, #24]

       if(controller->i_q > controller->i_mag_max){
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80033a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ae:	dd13      	ble.n	80033d8 <commutate+0x1b8>
    	   controller->i_mag_max = controller->i_q;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	651a      	str	r2, [r3, #80]	; 0x50
 80033b8:	e00e      	b.n	80033d8 <commutate+0x1b8>
 80033ba:	bf00      	nop
 80033bc:	2000075c 	.word	0x2000075c
 80033c0:	3f666666 	.word	0x3f666666
 80033c4:	3dcccccd 	.word	0x3dcccccd
 80033c8:	3f933333 	.word	0x3f933333
 80033cc:	3f70a3d7 	.word	0x3f70a3d7
 80033d0:	3f13cd3a 	.word	0x3f13cd3a
 80033d4:	381d4951 	.word	0x381d4951
       }


       // Calculate decoupling feed-forward voltages //

       float v_d_ff = 0.0f;//-SQRT3*controller->dtheta_elec*L_Q*controller->i_q;
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
       float v_q_ff = 0.0f;//SQRT3*controller->dtheta_elec*(0.0f*L_D*controller->i_d + controller->flux_linkage);
 80033de:	f04f 0300 	mov.w	r3, #0
 80033e2:	613b      	str	r3, [r7, #16]

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 80033ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80033ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80033f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 8003416:	eef0 0a47 	vmov.f32	s1, s14
 800341a:	eeb0 0a67 	vmov.f32	s0, s15
 800341e:	f001 fea2 	bl	8005166 <fast_fminf>
 8003422:	eeb0 7a40 	vmov.f32	s14, s0
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 800342c:	eef1 7a67 	vneg.f32	s15, s15
 8003430:	eef0 0a67 	vmov.f32	s1, s15
 8003434:	eeb0 0a47 	vmov.f32	s0, s14
 8003438:	f001 fe79 	bl	800512e <fast_fmaxf>
 800343c:	eef0 7a40 	vmov.f32	s15, s0
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003458:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800345c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003460:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 800347a:	eef0 0a47 	vmov.f32	s1, s14
 800347e:	eeb0 0a67 	vmov.f32	s0, s15
 8003482:	f001 fe70 	bl	8005166 <fast_fminf>
 8003486:	eeb0 7a40 	vmov.f32	s14, s0
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8003490:	eef1 7a67 	vneg.f32	s15, s15
 8003494:	eef0 0a67 	vmov.f32	s1, s15
 8003498:	eeb0 0a47 	vmov.f32	s0, s14
 800349c:	f001 fe47 	bl	800512e <fast_fmaxf>
 80034a0:	eef0 7a40 	vmov.f32	s15, s0
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
       float vq_max = controller->v_max;//sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034b0:	60fb      	str	r3, [r7, #12]

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 80034b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80034bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80034c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80034ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80034ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80034f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 800350c:	eef0 0a47 	vmov.f32	s1, s14
 8003510:	eeb0 0a67 	vmov.f32	s0, s15
 8003514:	f001 fe27 	bl	8005166 <fast_fminf>
 8003518:	eeb0 7a40 	vmov.f32	s14, s0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8003522:	eef1 7a67 	vneg.f32	s15, s15
 8003526:	eef0 0a67 	vmov.f32	s1, s15
 800352a:	eeb0 0a47 	vmov.f32	s0, s14
 800352e:	f001 fdfe 	bl	800512e <fast_fmaxf>
 8003532:	eef0 7a40 	vmov.f32	s15, s0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003548:	ee27 7a27 	vmul.f32	s14, s14, s15
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003558:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800355c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003560:	eeb0 0a67 	vmov.f32	s0, s15
 8003564:	f008 fcee 	bl	800bf44 <sqrtf>
 8003568:	eef0 7a40 	vmov.f32	s15, s0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003578:	edd7 0a03 	vldr	s1, [r7, #12]
 800357c:	eeb0 0a67 	vmov.f32	s0, s15
 8003580:	f001 fdf1 	bl	8005166 <fast_fminf>
 8003584:	eeb0 7a40 	vmov.f32	s14, s0
 8003588:	edd7 7a03 	vldr	s15, [r7, #12]
 800358c:	eef1 7a67 	vneg.f32	s15, s15
 8003590:	eef0 0a67 	vmov.f32	s1, s15
 8003594:	eeb0 0a47 	vmov.f32	s0, s14
 8003598:	f001 fdc9 	bl	800512e <fast_fmaxf>
 800359c:	eef0 7a40 	vmov.f32	s15, s0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f103 0158 	add.w	r1, r3, #88	; 0x58
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 80035b8:	eeb0 0a67 	vmov.f32	s0, s15
 80035bc:	4610      	mov	r0, r2
 80035be:	f001 fe56 	bl	800526e <limit_norm>

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80035ce:	ed5f 6a7f 	vldr	s13, [pc, #-508]	; 80033d4 <commutate+0x1b4>
 80035d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80035d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f103 0068 	add.w	r0, r3, #104	; 0x68
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3370      	adds	r3, #112	; 0x70
 80035f6:	461a      	mov	r2, r3
 80035f8:	eeb0 1a66 	vmov.f32	s2, s13
 80035fc:	eef0 0a47 	vmov.f32	s1, s14
 8003600:	eeb0 0a67 	vmov.f32	s0, s15
 8003604:	f7ff fa1a 	bl	8002a3c <abc>
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	ed93 6a1c 	vldr	s12, [r3, #112]	; 0x70
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f103 0160 	add.w	r1, r3, #96	; 0x60
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3364      	adds	r3, #100	; 0x64
 8003630:	461a      	mov	r2, r3
 8003632:	eef0 1a46 	vmov.f32	s3, s12
 8003636:	eeb0 1a66 	vmov.f32	s2, s13
 800363a:	eef0 0a47 	vmov.f32	s1, s14
 800363e:	eeb0 0a67 	vmov.f32	s0, s15
 8003642:	f7ff fb0f 	bl	8002c64 <svm>

       set_dtc(controller);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7ff f8d4 	bl	80027f4 <set_dtc>

    }
 800364c:	bf00      	nop
 800364e:	3720      	adds	r7, #32
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <torque_control>:


void torque_control(ControllerStruct *controller){
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
	/*----- convert theta_mech to 0~359.9999deg -----*/
	static float pos, round;
	pos = controller->theta_mech;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003660:	4a76      	ldr	r2, [pc, #472]	; (800383c <torque_control+0x1e8>)
 8003662:	6013      	str	r3, [r2, #0]
	modff(pos/(2*PI_F),&round);
 8003664:	4b75      	ldr	r3, [pc, #468]	; (800383c <torque_control+0x1e8>)
 8003666:	edd3 7a00 	vldr	s15, [r3]
 800366a:	eddf 6a75 	vldr	s13, [pc, #468]	; 8003840 <torque_control+0x1ec>
 800366e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003672:	4874      	ldr	r0, [pc, #464]	; (8003844 <torque_control+0x1f0>)
 8003674:	eeb0 0a47 	vmov.f32	s0, s14
 8003678:	f008 fbc4 	bl	800be04 <modff>
	pos = pos - round*2*PI_F;
 800367c:	4b6f      	ldr	r3, [pc, #444]	; (800383c <torque_control+0x1e8>)
 800367e:	ed93 7a00 	vldr	s14, [r3]
 8003682:	4b70      	ldr	r3, [pc, #448]	; (8003844 <torque_control+0x1f0>)
 8003684:	edd3 7a00 	vldr	s15, [r3]
 8003688:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800368c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003848 <torque_control+0x1f4>
 8003690:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003694:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003698:	4b68      	ldr	r3, [pc, #416]	; (800383c <torque_control+0x1e8>)
 800369a:	edc3 7a00 	vstr	s15, [r3]
	if(pos < 0){
 800369e:	4b67      	ldr	r3, [pc, #412]	; (800383c <torque_control+0x1e8>)
 80036a0:	edd3 7a00 	vldr	s15, [r3]
 80036a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ac:	d509      	bpl.n	80036c2 <torque_control+0x6e>
		pos = pos + 2*PI_F;
 80036ae:	4b63      	ldr	r3, [pc, #396]	; (800383c <torque_control+0x1e8>)
 80036b0:	edd3 7a00 	vldr	s15, [r3]
 80036b4:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8003840 <torque_control+0x1ec>
 80036b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80036bc:	4b5f      	ldr	r3, [pc, #380]	; (800383c <torque_control+0x1e8>)
 80036be:	edc3 7a00 	vstr	s15, [r3]
	}

	/*----- position PID control -----*/
	static float in_err = 0, err = 0; //integral of position error
	if(controller->p_des < pos){
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 80036c8:	4b5c      	ldr	r3, [pc, #368]	; (800383c <torque_control+0x1e8>)
 80036ca:	edd3 7a00 	vldr	s15, [r3]
 80036ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d6:	d534      	bpl.n	8003742 <torque_control+0xee>
		if((controller->p_des + 2*PI_F - pos) < (pos - controller->p_des)){
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 80036de:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8003840 <torque_control+0x1ec>
 80036e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036e6:	4b55      	ldr	r3, [pc, #340]	; (800383c <torque_control+0x1e8>)
 80036e8:	edd3 7a00 	vldr	s15, [r3]
 80036ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036f0:	4b52      	ldr	r3, [pc, #328]	; (800383c <torque_control+0x1e8>)
 80036f2:	edd3 6a00 	vldr	s13, [r3]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 80036fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003700:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003708:	d50f      	bpl.n	800372a <torque_control+0xd6>
			err = 2*PI_F - pos + controller->p_des;
 800370a:	4b4c      	ldr	r3, [pc, #304]	; (800383c <torque_control+0x1e8>)
 800370c:	edd3 7a00 	vldr	s15, [r3]
 8003710:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8003840 <torque_control+0x1ec>
 8003714:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 800371e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003722:	4b4a      	ldr	r3, [pc, #296]	; (800384c <torque_control+0x1f8>)
 8003724:	edc3 7a00 	vstr	s15, [r3]
 8003728:	e03f      	b.n	80037aa <torque_control+0x156>
		}
		else{
			err = controller->p_des - pos;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 8003730:	4b42      	ldr	r3, [pc, #264]	; (800383c <torque_control+0x1e8>)
 8003732:	edd3 7a00 	vldr	s15, [r3]
 8003736:	ee77 7a67 	vsub.f32	s15, s14, s15
 800373a:	4b44      	ldr	r3, [pc, #272]	; (800384c <torque_control+0x1f8>)
 800373c:	edc3 7a00 	vstr	s15, [r3]
 8003740:	e033      	b.n	80037aa <torque_control+0x156>
		}
	}
	else{
		if((pos + 2*PI_F - controller->p_des) < (controller->p_des - pos)){
 8003742:	4b3e      	ldr	r3, [pc, #248]	; (800383c <torque_control+0x1e8>)
 8003744:	edd3 7a00 	vldr	s15, [r3]
 8003748:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8003840 <torque_control+0x1ec>
 800374c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003756:	ee37 7a67 	vsub.f32	s14, s14, s15
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003760:	4b36      	ldr	r3, [pc, #216]	; (800383c <torque_control+0x1e8>)
 8003762:	edd3 7a00 	vldr	s15, [r3]
 8003766:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800376a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800376e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003772:	d50f      	bpl.n	8003794 <torque_control+0x140>
			err = controller->p_des - 2*PI_F - pos;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 800377a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003840 <torque_control+0x1ec>
 800377e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003782:	4b2e      	ldr	r3, [pc, #184]	; (800383c <torque_control+0x1e8>)
 8003784:	edd3 7a00 	vldr	s15, [r3]
 8003788:	ee77 7a67 	vsub.f32	s15, s14, s15
 800378c:	4b2f      	ldr	r3, [pc, #188]	; (800384c <torque_control+0x1f8>)
 800378e:	edc3 7a00 	vstr	s15, [r3]
 8003792:	e00a      	b.n	80037aa <torque_control+0x156>
		}
		else{
			err = controller->p_des - pos;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 800379a:	4b28      	ldr	r3, [pc, #160]	; (800383c <torque_control+0x1e8>)
 800379c:	edd3 7a00 	vldr	s15, [r3]
 80037a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037a4:	4b29      	ldr	r3, [pc, #164]	; (800384c <torque_control+0x1f8>)
 80037a6:	edc3 7a00 	vstr	s15, [r3]
		}
	}
	in_err = in_err + err;
 80037aa:	4b29      	ldr	r3, [pc, #164]	; (8003850 <torque_control+0x1fc>)
 80037ac:	ed93 7a00 	vldr	s14, [r3]
 80037b0:	4b26      	ldr	r3, [pc, #152]	; (800384c <torque_control+0x1f8>)
 80037b2:	edd3 7a00 	vldr	s15, [r3]
 80037b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ba:	4b25      	ldr	r3, [pc, #148]	; (8003850 <torque_control+0x1fc>)
 80037bc:	edc3 7a00 	vstr	s15, [r3]

    float torque_ref = controller->kp*(err) + controller->t_ff + controller->ki*(in_err) + controller->kd*(-controller->dtheta_mech);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 80037c6:	4b21      	ldr	r3, [pc, #132]	; (800384c <torque_control+0x1f8>)
 80037c8:	edd3 7a00 	vldr	s15, [r3]
 80037cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 80037d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	edd3 6a38 	vldr	s13, [r3, #224]	; 0xe0
 80037e0:	4b1b      	ldr	r3, [pc, #108]	; (8003850 <torque_control+0x1fc>)
 80037e2:	edd3 7a00 	vldr	s15, [r3]
 80037e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	edd3 6a39 	vldr	s13, [r3, #228]	; 0xe4
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80037fa:	eef1 7a67 	vneg.f32	s15, s15
 80037fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003806:	edc7 7a03 	vstr	s15, [r7, #12]
    controller->i_q_des = torque_ref/(KT*GR);
 800380a:	4b12      	ldr	r3, [pc, #72]	; (8003854 <torque_control+0x200>)
 800380c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8003810:	4b10      	ldr	r3, [pc, #64]	; (8003854 <torque_control+0x200>)
 8003812:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003816:	ee27 7a27 	vmul.f32	s14, s14, s15
 800381a:	edd7 6a03 	vldr	s13, [r7, #12]
 800381e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
	controller->i_d_des = 0.0f;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    
    }
 8003832:	bf00      	nop
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	2000023c 	.word	0x2000023c
 8003840:	40c90fdb 	.word	0x40c90fdb
 8003844:	20000240 	.word	0x20000240
 8003848:	40490fdb 	.word	0x40490fdb
 800384c:	20000244 	.word	0x20000244
 8003850:	20000248 	.word	0x20000248
 8003854:	2000075c 	.word	0x2000075c

08003858 <zero_commands>:



void zero_commands(ControllerStruct * controller){
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
	controller->t_ff = 0;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	controller->kp = 0;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	controller->ki = 0;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	controller->kd = 0;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	controller->p_des = 0;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	controller->v_des = 0;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	controller->i_q_des = 0;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
	...

080038b4 <run_fsm>:
#include "foc.h"
#include "math_ops.h"
#include "position_sensor.h"
#include "drv8323.h"

 void run_fsm(FSMStruct * fsmstate){
 80038b4:	b590      	push	{r4, r7, lr}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af02      	add	r7, sp, #8
 80038ba:	6078      	str	r0, [r7, #4]
	 /* run_fsm is run every commutation interrupt cycle */

	 /* state transition management */
	 if(fsmstate->next_state != fsmstate->state){
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	785a      	ldrb	r2, [r3, #1]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d00d      	beq.n	80038e4 <run_fsm+0x30>
		 fsm_exit_state(fsmstate);		// safely exit the old state
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f9a3 	bl	8003c14 <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	78db      	ldrb	r3, [r3, #3]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d006      	beq.n	80038e4 <run_fsm+0x30>
			 fsmstate->state = fsmstate->next_state;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	785a      	ldrb	r2, [r3, #1]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	701a      	strb	r2, [r3, #0]
			 fsm_enter_state(fsmstate);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f8f2 	bl	8003ac8 <fsm_enter_state>
		 }
	 }

	 switch(fsmstate->state){
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b06      	cmp	r3, #6
 80038ea:	f200 80d9 	bhi.w	8003aa0 <run_fsm+0x1ec>
 80038ee:	a201      	add	r2, pc, #4	; (adr r2, 80038f4 <run_fsm+0x40>)
 80038f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f4:	08003a9f 	.word	0x08003a9f
 80038f8:	08003a5f 	.word	0x08003a5f
 80038fc:	08003a15 	.word	0x08003a15
 8003900:	08003aa1 	.word	0x08003aa1
 8003904:	08003a9f 	.word	0x08003a9f
 8003908:	08003911 	.word	0x08003911
 800390c:	08003a55 	.word	0x08003a55
		 case MENU_MODE:
			 break;

		 case ENCODER_CALIBRATE:
			 if(!comm_encoder_cal.done_ordering){
 8003910:	4b65      	ldr	r3, [pc, #404]	; (8003aa8 <run_fsm+0x1f4>)
 8003912:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003916:	2b00      	cmp	r3, #0
 8003918:	d108      	bne.n	800392c <run_fsm+0x78>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 800391a:	4b64      	ldr	r3, [pc, #400]	; (8003aac <run_fsm+0x1f8>)
 800391c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003920:	4a61      	ldr	r2, [pc, #388]	; (8003aa8 <run_fsm+0x1f4>)
 8003922:	4962      	ldr	r1, [pc, #392]	; (8003aac <run_fsm+0x1f8>)
 8003924:	4862      	ldr	r0, [pc, #392]	; (8003ab0 <run_fsm+0x1fc>)
 8003926:	f7fd fd35 	bl	8001394 <order_phases>
				 preference_writer_close(&prefs);
				 preference_writer_load(prefs);
				 update_fsm(fsmstate, 27);
			 }

			 break;
 800392a:	e0b9      	b.n	8003aa0 <run_fsm+0x1ec>
			 else if(!comm_encoder_cal.done_cal){
 800392c:	4b5e      	ldr	r3, [pc, #376]	; (8003aa8 <run_fsm+0x1f4>)
 800392e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003932:	2b00      	cmp	r3, #0
 8003934:	d108      	bne.n	8003948 <run_fsm+0x94>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8003936:	4b5d      	ldr	r3, [pc, #372]	; (8003aac <run_fsm+0x1f8>)
 8003938:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800393c:	4a5a      	ldr	r2, [pc, #360]	; (8003aa8 <run_fsm+0x1f4>)
 800393e:	495b      	ldr	r1, [pc, #364]	; (8003aac <run_fsm+0x1f8>)
 8003940:	485b      	ldr	r0, [pc, #364]	; (8003ab0 <run_fsm+0x1fc>)
 8003942:	f7fd fe2f 	bl	80015a4 <calibrate_encoder>
			 break;
 8003946:	e0ab      	b.n	8003aa0 <run_fsm+0x1ec>
				 E_ZERO = comm_encoder_cal.ezero;
 8003948:	4b57      	ldr	r3, [pc, #348]	; (8003aa8 <run_fsm+0x1f4>)
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	4a59      	ldr	r2, [pc, #356]	; (8003ab4 <run_fsm+0x200>)
 800394e:	6153      	str	r3, [r2, #20]
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 8003950:	4b58      	ldr	r3, [pc, #352]	; (8003ab4 <run_fsm+0x200>)
 8003952:	695c      	ldr	r4, [r3, #20]
 8003954:	4b56      	ldr	r3, [pc, #344]	; (8003ab0 <run_fsm+0x1fc>)
 8003956:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800395a:	4b56      	ldr	r3, [pc, #344]	; (8003ab4 <run_fsm+0x200>)
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	425b      	negs	r3, r3
 8003960:	ee07 3a90 	vmov	s15, r3
 8003964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800396c:	eddf 6a52 	vldr	s13, [pc, #328]	; 8003ab8 <run_fsm+0x204>
 8003970:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003974:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003978:	eeb0 0a47 	vmov.f32	s0, s14
 800397c:	f008 fab6 	bl	800beec <fmodf>
 8003980:	eef0 7a40 	vmov.f32	s15, s0
 8003984:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003abc <run_fsm+0x208>
 8003988:	ee67 7a87 	vmul.f32	s15, s15, s14
 800398c:	ee17 0a90 	vmov	r0, s15
 8003990:	f7fc fe0a 	bl	80005a8 <__aeabi_f2d>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	4621      	mov	r1, r4
 800399a:	4849      	ldr	r0, [pc, #292]	; (8003ac0 <run_fsm+0x20c>)
 800399c:	f009 f9b4 	bl	800cd08 <iprintf>
				 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 80039a0:	4a43      	ldr	r2, [pc, #268]	; (8003ab0 <run_fsm+0x1fc>)
 80039a2:	4b41      	ldr	r3, [pc, #260]	; (8003aa8 <run_fsm+0x1f4>)
 80039a4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80039a8:	332c      	adds	r3, #44	; 0x2c
 80039aa:	f102 00dc 	add.w	r0, r2, #220	; 0xdc
 80039ae:	4619      	mov	r1, r3
 80039b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039b4:	461a      	mov	r2, r3
 80039b6:	f008 fd27 	bl	800c408 <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 80039ba:	4a3e      	ldr	r2, [pc, #248]	; (8003ab4 <run_fsm+0x200>)
 80039bc:	4b3a      	ldr	r3, [pc, #232]	; (8003aa8 <run_fsm+0x1f4>)
 80039be:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80039c2:	332c      	adds	r3, #44	; 0x2c
 80039c4:	f102 001c 	add.w	r0, r2, #28
 80039c8:	4619      	mov	r1, r3
 80039ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039ce:	461a      	mov	r2, r3
 80039d0:	f008 fd1a 	bl	800c408 <memcpy>
				 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 80039d4:	4b3b      	ldr	r3, [pc, #236]	; (8003ac4 <run_fsm+0x210>)
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	9200      	str	r2, [sp, #0]
 80039da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039dc:	f001 ff7a 	bl	80058d4 <preference_writer_ready>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f083 0301 	eor.w	r3, r3, #1
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <run_fsm+0x13e>
 80039ec:	4835      	ldr	r0, [pc, #212]	; (8003ac4 <run_fsm+0x210>)
 80039ee:	f001 ff62 	bl	80058b6 <preference_writer_open>
				 preference_writer_flush(&prefs);
 80039f2:	4834      	ldr	r0, [pc, #208]	; (8003ac4 <run_fsm+0x210>)
 80039f4:	f001 ff7c 	bl	80058f0 <preference_writer_flush>
				 preference_writer_close(&prefs);
 80039f8:	4832      	ldr	r0, [pc, #200]	; (8003ac4 <run_fsm+0x210>)
 80039fa:	f001 fff7 	bl	80059ec <preference_writer_close>
				 preference_writer_load(prefs);
 80039fe:	4b31      	ldr	r3, [pc, #196]	; (8003ac4 <run_fsm+0x210>)
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	9200      	str	r2, [sp, #0]
 8003a04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a06:	f001 ffaf 	bl	8005968 <preference_writer_load>
				 update_fsm(fsmstate, 27);
 8003a0a:	211b      	movs	r1, #27
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f9bb 	bl	8003d88 <update_fsm>
			 break;
 8003a12:	e045      	b.n	8003aa0 <run_fsm+0x1ec>

		 case MOTOR_MODE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 8003a14:	4b27      	ldr	r3, [pc, #156]	; (8003ab4 <run_fsm+0x200>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	dd09      	ble.n	8003a30 <run_fsm+0x17c>
 8003a1c:	4b23      	ldr	r3, [pc, #140]	; (8003aac <run_fsm+0x1f8>)
 8003a1e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003a22:	4b24      	ldr	r3, [pc, #144]	; (8003ab4 <run_fsm+0x200>)
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	dd02      	ble.n	8003a30 <run_fsm+0x17c>
				 zero_commands(&controller);
 8003a2a:	4820      	ldr	r0, [pc, #128]	; (8003aac <run_fsm+0x1f8>)
 8003a2c:	f7ff ff14 	bl	8003858 <zero_commands>
			 }
			 /* Otherwise, commutate */

			 torque_control(&controller);
 8003a30:	481e      	ldr	r0, [pc, #120]	; (8003aac <run_fsm+0x1f8>)
 8003a32:	f7ff fe0f 	bl	8003654 <torque_control>
			 field_weaken(&controller);
 8003a36:	481d      	ldr	r0, [pc, #116]	; (8003aac <run_fsm+0x1f8>)
 8003a38:	f7ff fb4c 	bl	80030d4 <field_weaken>
			 commutate(&controller, &comm_encoder);
 8003a3c:	491c      	ldr	r1, [pc, #112]	; (8003ab0 <run_fsm+0x1fc>)
 8003a3e:	481b      	ldr	r0, [pc, #108]	; (8003aac <run_fsm+0x1f8>)
 8003a40:	f7ff fbee 	bl	8003220 <commutate>

			 controller.timeout ++;
 8003a44:	4b19      	ldr	r3, [pc, #100]	; (8003aac <run_fsm+0x1f8>)
 8003a46:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	4a17      	ldr	r2, [pc, #92]	; (8003aac <run_fsm+0x1f8>)
 8003a4e:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
			 break;
 8003a52:	e025      	b.n	8003aa0 <run_fsm+0x1ec>

		 case SETUP_MODE:
			 break;

		 case ENCODER_MODE:
			 ps_print(&comm_encoder, 100);
 8003a54:	2164      	movs	r1, #100	; 0x64
 8003a56:	4816      	ldr	r0, [pc, #88]	; (8003ab0 <run_fsm+0x1fc>)
 8003a58:	f001 fed6 	bl	8005808 <ps_print>
			 break;
 8003a5c:	e020      	b.n	8003aa0 <run_fsm+0x1ec>

		 case HALL_CALIBRATE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 8003a5e:	4b15      	ldr	r3, [pc, #84]	; (8003ab4 <run_fsm+0x200>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	dd09      	ble.n	8003a7a <run_fsm+0x1c6>
 8003a66:	4b11      	ldr	r3, [pc, #68]	; (8003aac <run_fsm+0x1f8>)
 8003a68:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003a6c:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <run_fsm+0x200>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	dd02      	ble.n	8003a7a <run_fsm+0x1c6>
				 zero_commands(&controller);
 8003a74:	480d      	ldr	r0, [pc, #52]	; (8003aac <run_fsm+0x1f8>)
 8003a76:	f7ff feef 	bl	8003858 <zero_commands>
			 }
			 /* Otherwise, commutate */

			 /* Calibrate Hall Sensor */
			 hall_calibrate(fsmstate);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fd20 	bl	80044c0 <hall_calibrate>

			 torque_control(&controller);
 8003a80:	480a      	ldr	r0, [pc, #40]	; (8003aac <run_fsm+0x1f8>)
 8003a82:	f7ff fde7 	bl	8003654 <torque_control>
			 commutate(&controller, &comm_encoder);
 8003a86:	490a      	ldr	r1, [pc, #40]	; (8003ab0 <run_fsm+0x1fc>)
 8003a88:	4808      	ldr	r0, [pc, #32]	; (8003aac <run_fsm+0x1f8>)
 8003a8a:	f7ff fbc9 	bl	8003220 <commutate>

			 controller.timeout ++;
 8003a8e:	4b07      	ldr	r3, [pc, #28]	; (8003aac <run_fsm+0x1f8>)
 8003a90:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003a94:	3301      	adds	r3, #1
 8003a96:	4a05      	ldr	r2, [pc, #20]	; (8003aac <run_fsm+0x1f8>)
 8003a98:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
			 break;
 8003a9c:	e000      	b.n	8003aa0 <run_fsm+0x1ec>
			 break;
 8003a9e:	bf00      	nop
	 }

 }
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd90      	pop	{r4, r7, pc}
 8003aa8:	20000b68 	.word	0x20000b68
 8003aac:	2000085c 	.word	0x2000085c
 8003ab0:	20000428 	.word	0x20000428
 8003ab4:	20009074 	.word	0x20009074
 8003ab8:	47800000 	.word	0x47800000
 8003abc:	40c90fdb 	.word	0x40c90fdb
 8003ac0:	08010b38 	.word	0x08010b38
 8003ac4:	20000748 	.word	0x20000748

08003ac8 <fsm_enter_state>:

 void fsm_enter_state(FSMStruct * fsmstate){
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
	 /* Called when entering a new state
	  * Do necessary setup   */

		switch(fsmstate->state){
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b06      	cmp	r3, #6
 8003ad6:	d87f      	bhi.n	8003bd8 <fsm_enter_state+0x110>
 8003ad8:	a201      	add	r2, pc, #4	; (adr r2, 8003ae0 <fsm_enter_state+0x18>)
 8003ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ade:	bf00      	nop
 8003ae0:	08003afd 	.word	0x08003afd
 8003ae4:	08003ba3 	.word	0x08003ba3
 8003ae8:	08003b31 	.word	0x08003b31
 8003aec:	08003bd9 	.word	0x08003bd9
 8003af0:	08003b0d 	.word	0x08003b0d
 8003af4:	08003b45 	.word	0x08003b45
 8003af8:	08003b21 	.word	0x08003b21
			case MENU_MODE:
				if (fsmstate->print_uart_msg){
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	791b      	ldrb	r3, [r3, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d066      	beq.n	8003bd2 <fsm_enter_state+0x10a>
					printf("\r\nEntering Main Menu\r\n");
 8003b04:	4836      	ldr	r0, [pc, #216]	; (8003be0 <fsm_enter_state+0x118>)
 8003b06:	f009 f985 	bl	800ce14 <puts>
				}
				break;
 8003b0a:	e062      	b.n	8003bd2 <fsm_enter_state+0x10a>
			case SETUP_MODE:
				if (fsmstate->print_uart_msg){
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	791b      	ldrb	r3, [r3, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <fsm_enter_state+0x52>
					printf("\r\nEntering Setup\r\n");
 8003b14:	4833      	ldr	r0, [pc, #204]	; (8003be4 <fsm_enter_state+0x11c>)
 8003b16:	f009 f97d 	bl	800ce14 <puts>
				}
				enter_setup_state();
 8003b1a:	f000 fa49 	bl	8003fb0 <enter_setup_state>
				break;
 8003b1e:	e05b      	b.n	8003bd8 <fsm_enter_state+0x110>
			case ENCODER_MODE:
				if (fsmstate->print_uart_msg){
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	791b      	ldrb	r3, [r3, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d056      	beq.n	8003bd6 <fsm_enter_state+0x10e>
					printf("\r\nEntering Encoder Mode\r\n");
 8003b28:	482f      	ldr	r0, [pc, #188]	; (8003be8 <fsm_enter_state+0x120>)
 8003b2a:	f009 f973 	bl	800ce14 <puts>
				}
				break;
 8003b2e:	e052      	b.n	8003bd6 <fsm_enter_state+0x10e>
			case MOTOR_MODE:
				if (fsmstate->print_uart_msg){
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	791b      	ldrb	r3, [r3, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <fsm_enter_state+0x76>
					printf("\r\nEntering Motor Mode\r\n");
 8003b38:	482c      	ldr	r0, [pc, #176]	; (8003bec <fsm_enter_state+0x124>)
 8003b3a:	f009 f96b 	bl	800ce14 <puts>
				}
				enter_motor_mode();
 8003b3e:	f000 fc61 	bl	8004404 <enter_motor_mode>
				break;
 8003b42:	e049      	b.n	8003bd8 <fsm_enter_state+0x110>
			case ENCODER_CALIBRATE:
				if (fsmstate->print_uart_msg){
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	791b      	ldrb	r3, [r3, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <fsm_enter_state+0x8a>
					printf("\r\nEntering Encoder Calibration Mode\r\n");
 8003b4c:	4828      	ldr	r0, [pc, #160]	; (8003bf0 <fsm_enter_state+0x128>)
 8003b4e:	f009 f961 	bl	800ce14 <puts>
				}
				/* zero out all calibrations before starting */

				comm_encoder_cal.done_cal = 0;
 8003b52:	4b28      	ldr	r3, [pc, #160]	; (8003bf4 <fsm_enter_state+0x12c>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 8003b5a:	4b26      	ldr	r3, [pc, #152]	; (8003bf4 <fsm_enter_state+0x12c>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				comm_encoder_cal.started = 0;
 8003b62:	4b24      	ldr	r3, [pc, #144]	; (8003bf4 <fsm_enter_state+0x12c>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	741a      	strb	r2, [r3, #16]
				comm_encoder.e_zero = 0;
 8003b68:	4b23      	ldr	r3, [pc, #140]	; (8003bf8 <fsm_enter_state+0x130>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 8003b70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b74:	2100      	movs	r1, #0
 8003b76:	4821      	ldr	r0, [pc, #132]	; (8003bfc <fsm_enter_state+0x134>)
 8003b78:	f008 fc54 	bl	800c424 <memset>
				drv_enable_gd(drv);
 8003b7c:	4b20      	ldr	r3, [pc, #128]	; (8003c00 <fsm_enter_state+0x138>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	2100      	movs	r1, #0
 8003b82:	4611      	mov	r1, r2
 8003b84:	889a      	ldrh	r2, [r3, #4]
 8003b86:	2300      	movs	r3, #0
 8003b88:	f362 030f 	bfi	r3, r2, #0, #16
 8003b8c:	4608      	mov	r0, r1
 8003b8e:	4619      	mov	r1, r3
 8003b90:	f7fe fc4f 	bl	8002432 <drv_enable_gd>
				GPIO_ENABLE;
 8003b94:	2201      	movs	r2, #1
 8003b96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b9a:	481a      	ldr	r0, [pc, #104]	; (8003c04 <fsm_enter_state+0x13c>)
 8003b9c:	f005 f92a 	bl	8008df4 <HAL_GPIO_WritePin>
				break;
 8003ba0:	e01a      	b.n	8003bd8 <fsm_enter_state+0x110>
			case HALL_CALIBRATE:
				if (fsmstate->print_uart_msg){
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	791b      	ldrb	r3, [r3, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <fsm_enter_state+0xe8>
					printf("\r\nEntering Hall Calibration Mode\r\n");
 8003baa:	4817      	ldr	r0, [pc, #92]	; (8003c08 <fsm_enter_state+0x140>)
 8003bac:	f009 f932 	bl	800ce14 <puts>
				}
				controller.kp = 5.0f ;
 8003bb0:	4b16      	ldr	r3, [pc, #88]	; (8003c0c <fsm_enter_state+0x144>)
 8003bb2:	4a17      	ldr	r2, [pc, #92]	; (8003c10 <fsm_enter_state+0x148>)
 8003bb4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
				controller.ki = 0.0f ;
 8003bb8:	4b14      	ldr	r3, [pc, #80]	; (8003c0c <fsm_enter_state+0x144>)
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
				controller.kd = 1.0f ;
 8003bc2:	4b12      	ldr	r3, [pc, #72]	; (8003c0c <fsm_enter_state+0x144>)
 8003bc4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003bc8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				enter_motor_mode();
 8003bcc:	f000 fc1a 	bl	8004404 <enter_motor_mode>
				break;
 8003bd0:	e002      	b.n	8003bd8 <fsm_enter_state+0x110>
				break;
 8003bd2:	bf00      	nop
 8003bd4:	e000      	b.n	8003bd8 <fsm_enter_state+0x110>
				break;
 8003bd6:	bf00      	nop

		}
 }
 8003bd8:	bf00      	nop
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	08010b4c 	.word	0x08010b4c
 8003be4:	08010b64 	.word	0x08010b64
 8003be8:	08010b78 	.word	0x08010b78
 8003bec:	08010b94 	.word	0x08010b94
 8003bf0:	08010bac 	.word	0x08010bac
 8003bf4:	20000b68 	.word	0x20000b68
 8003bf8:	20000428 	.word	0x20000428
 8003bfc:	20000504 	.word	0x20000504
 8003c00:	20009498 	.word	0x20009498
 8003c04:	40020000 	.word	0x40020000
 8003c08:	08010bd4 	.word	0x08010bd4
 8003c0c:	2000085c 	.word	0x2000085c
 8003c10:	40a00000 	.word	0x40a00000

08003c14 <fsm_exit_state>:

 void fsm_exit_state(FSMStruct * fsmstate){
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
	 /* Called when exiting the current state
	  * Do necessary cleanup  */

		switch(fsmstate->state){
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2b06      	cmp	r3, #6
 8003c22:	f200 8099 	bhi.w	8003d58 <fsm_exit_state+0x144>
 8003c26:	a201      	add	r2, pc, #4	; (adr r2, 8003c2c <fsm_exit_state+0x18>)
 8003c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2c:	08003c49 	.word	0x08003c49
 8003c30:	08003d15 	.word	0x08003d15
 8003c34:	08003c8b 	.word	0x08003c8b
 8003c38:	08003d59 	.word	0x08003d59
 8003c3c:	08003c5f 	.word	0x08003c5f
 8003c40:	08003cdb 	.word	0x08003cdb
 8003c44:	08003c75 	.word	0x08003c75
			case MENU_MODE:
				if (fsmstate->print_uart_msg){
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	791b      	ldrb	r3, [r3, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d002      	beq.n	8003c56 <fsm_exit_state+0x42>
					printf("\r\nLeaving Main Menu\r\n");
 8003c50:	4843      	ldr	r0, [pc, #268]	; (8003d60 <fsm_exit_state+0x14c>)
 8003c52:	f009 f8df 	bl	800ce14 <puts>
				}
				fsmstate->ready = 1;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	70da      	strb	r2, [r3, #3]
				break;
 8003c5c:	e07c      	b.n	8003d58 <fsm_exit_state+0x144>
			case SETUP_MODE:
				if (fsmstate->print_uart_msg){
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	791b      	ldrb	r3, [r3, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <fsm_exit_state+0x58>
					printf("\r\nLeaving Setup Menu\r\n");
 8003c66:	483f      	ldr	r0, [pc, #252]	; (8003d64 <fsm_exit_state+0x150>)
 8003c68:	f009 f8d4 	bl	800ce14 <puts>
				}
				fsmstate->ready = 1;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	70da      	strb	r2, [r3, #3]
				break;
 8003c72:	e071      	b.n	8003d58 <fsm_exit_state+0x144>
			case ENCODER_MODE:
				if (fsmstate->print_uart_msg){
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	791b      	ldrb	r3, [r3, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <fsm_exit_state+0x6e>
					printf("\r\nLeaving Encoder Mode\r\n");
 8003c7c:	483a      	ldr	r0, [pc, #232]	; (8003d68 <fsm_exit_state+0x154>)
 8003c7e:	f009 f8c9 	bl	800ce14 <puts>
				}
				fsmstate->ready = 1;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	70da      	strb	r2, [r3, #3]
				break;
 8003c88:	e066      	b.n	8003d58 <fsm_exit_state+0x144>
			case MOTOR_MODE:
				/* Don't stop commutating if there are high currents or FW happening */
				//if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
				if (fsmstate->print_uart_msg){
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	791b      	ldrb	r3, [r3, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <fsm_exit_state+0x84>
					printf("\r\nLeaving Motor Mode\r\n");
 8003c92:	4836      	ldr	r0, [pc, #216]	; (8003d6c <fsm_exit_state+0x158>)
 8003c94:	f009 f8be 	bl	800ce14 <puts>
				}
				fsmstate->ready = 1;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	70da      	strb	r2, [r3, #3]
				drv_disable_gd(drv);
 8003c9e:	4b34      	ldr	r3, [pc, #208]	; (8003d70 <fsm_exit_state+0x15c>)
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	889a      	ldrh	r2, [r3, #4]
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f362 030f 	bfi	r3, r2, #0, #16
 8003cae:	4608      	mov	r0, r1
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	f7fe fbd8 	bl	8002466 <drv_disable_gd>
				reset_foc(&controller);
 8003cb6:	482f      	ldr	r0, [pc, #188]	; (8003d74 <fsm_exit_state+0x160>)
 8003cb8:	f7ff f998 	bl	8002fec <reset_foc>
				GPIO_DISABLE;
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003cc2:	482d      	ldr	r0, [pc, #180]	; (8003d78 <fsm_exit_state+0x164>)
 8003cc4:	f005 f896 	bl	8008df4 <HAL_GPIO_WritePin>
				LED_LOW;
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2120      	movs	r1, #32
 8003ccc:	482b      	ldr	r0, [pc, #172]	; (8003d7c <fsm_exit_state+0x168>)
 8003cce:	f005 f891 	bl	8008df4 <HAL_GPIO_WritePin>
				//}
				zero_commands(&controller);		// Set commands to zero
 8003cd2:	4828      	ldr	r0, [pc, #160]	; (8003d74 <fsm_exit_state+0x160>)
 8003cd4:	f7ff fdc0 	bl	8003858 <zero_commands>
				break;
 8003cd8:	e03e      	b.n	8003d58 <fsm_exit_state+0x144>
			case ENCODER_CALIBRATE:
				if (fsmstate->print_uart_msg){
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	791b      	ldrb	r3, [r3, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <fsm_exit_state+0xd4>
					printf("\r\nExiting Encoder Calibration Mode\r\n");
 8003ce2:	4827      	ldr	r0, [pc, #156]	; (8003d80 <fsm_exit_state+0x16c>)
 8003ce4:	f009 f896 	bl	800ce14 <puts>
				}
				GPIO_DISABLE;
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003cee:	4822      	ldr	r0, [pc, #136]	; (8003d78 <fsm_exit_state+0x164>)
 8003cf0:	f005 f880 	bl	8008df4 <HAL_GPIO_WritePin>
				drv_disable_gd(drv);
 8003cf4:	4b1e      	ldr	r3, [pc, #120]	; (8003d70 <fsm_exit_state+0x15c>)
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	889a      	ldrh	r2, [r3, #4]
 8003cfe:	2300      	movs	r3, #0
 8003d00:	f362 030f 	bfi	r3, r2, #0, #16
 8003d04:	4608      	mov	r0, r1
 8003d06:	4619      	mov	r1, r3
 8003d08:	f7fe fbad 	bl	8002466 <drv_disable_gd>
				//free(error_array);
				//free(lut_array);

				fsmstate->ready = 1;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	70da      	strb	r2, [r3, #3]
				break;
 8003d12:	e021      	b.n	8003d58 <fsm_exit_state+0x144>
			case HALL_CALIBRATE:
				if (fsmstate->print_uart_msg){
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	791b      	ldrb	r3, [r3, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <fsm_exit_state+0x10e>
					printf("\r\nExiting Hall Calibration Mode\r\n");
 8003d1c:	4819      	ldr	r0, [pc, #100]	; (8003d84 <fsm_exit_state+0x170>)
 8003d1e:	f009 f879 	bl	800ce14 <puts>
				}
				GPIO_DISABLE;
 8003d22:	2200      	movs	r2, #0
 8003d24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d28:	4813      	ldr	r0, [pc, #76]	; (8003d78 <fsm_exit_state+0x164>)
 8003d2a:	f005 f863 	bl	8008df4 <HAL_GPIO_WritePin>
				LED_LOW;
 8003d2e:	2200      	movs	r2, #0
 8003d30:	2120      	movs	r1, #32
 8003d32:	4812      	ldr	r0, [pc, #72]	; (8003d7c <fsm_exit_state+0x168>)
 8003d34:	f005 f85e 	bl	8008df4 <HAL_GPIO_WritePin>
				drv_disable_gd(drv);
 8003d38:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <fsm_exit_state+0x15c>)
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	4611      	mov	r1, r2
 8003d40:	889a      	ldrh	r2, [r3, #4]
 8003d42:	2300      	movs	r3, #0
 8003d44:	f362 030f 	bfi	r3, r2, #0, #16
 8003d48:	4608      	mov	r0, r1
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	f7fe fb8b 	bl	8002466 <drv_disable_gd>
				fsmstate->ready = 1;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	70da      	strb	r2, [r3, #3]
				break;
 8003d56:	bf00      	nop
		}

 }
 8003d58:	bf00      	nop
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	08010bf8 	.word	0x08010bf8
 8003d64:	08010c10 	.word	0x08010c10
 8003d68:	08010c28 	.word	0x08010c28
 8003d6c:	08010c40 	.word	0x08010c40
 8003d70:	20009498 	.word	0x20009498
 8003d74:	2000085c 	.word	0x2000085c
 8003d78:	40020000 	.word	0x40020000
 8003d7c:	40020800 	.word	0x40020800
 8003d80:	08010c58 	.word	0x08010c58
 8003d84:	08010c7c 	.word	0x08010c7c

08003d88 <update_fsm>:

 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af02      	add	r7, sp, #8
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	460b      	mov	r3, r1
 8003d92:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
	if(fsm_input == MENU_CMD){	// escape to exit to rest mode
 8003d94:	78fb      	ldrb	r3, [r7, #3]
 8003d96:	2b1b      	cmp	r3, #27
 8003d98:	d10d      	bne.n	8003db6 <update_fsm+0x2e>
		fsmstate->next_state = MENU_MODE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	705a      	strb	r2, [r3, #1]
		fsmstate->ready = 0;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	70da      	strb	r2, [r3, #3]
		if (fsmstate->print_uart_msg){
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	791b      	ldrb	r3, [r3, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 80c4 	beq.w	8003f38 <update_fsm+0x1b0>
			enter_menu_state();
 8003db0:	f000 f8d2 	bl	8003f58 <enter_menu_state>
		}
		return;
 8003db4:	e0c0      	b.n	8003f38 <update_fsm+0x1b0>
	}
	switch(fsmstate->state){
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	2b06      	cmp	r3, #6
 8003dbc:	f200 80bf 	bhi.w	8003f3e <update_fsm+0x1b6>
 8003dc0:	a201      	add	r2, pc, #4	; (adr r2, 8003dc8 <update_fsm+0x40>)
 8003dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc6:	bf00      	nop
 8003dc8:	08003de5 	.word	0x08003de5
 8003dcc:	08003f3f 	.word	0x08003f3f
 8003dd0:	08003f3f 	.word	0x08003f3f
 8003dd4:	08003f3f 	.word	0x08003f3f
 8003dd8:	08003eff 	.word	0x08003eff
 8003ddc:	08003f3f 	.word	0x08003f3f
 8003de0:	08003f3f 	.word	0x08003f3f
		case MENU_MODE:
			switch (fsm_input){
 8003de4:	78fb      	ldrb	r3, [r7, #3]
 8003de6:	3b63      	subs	r3, #99	; 0x63
 8003de8:	2b17      	cmp	r3, #23
 8003dea:	f200 80a7 	bhi.w	8003f3c <update_fsm+0x1b4>
 8003dee:	a201      	add	r2, pc, #4	; (adr r2, 8003df4 <update_fsm+0x6c>)
 8003df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df4:	08003e55 	.word	0x08003e55
 8003df8:	08003f3d 	.word	0x08003f3d
 8003dfc:	08003e71 	.word	0x08003e71
 8003e00:	08003f3d 	.word	0x08003f3d
 8003e04:	08003f3d 	.word	0x08003f3d
 8003e08:	08003eef 	.word	0x08003eef
 8003e0c:	08003f3d 	.word	0x08003f3d
 8003e10:	08003f3d 	.word	0x08003f3d
 8003e14:	08003f3d 	.word	0x08003f3d
 8003e18:	08003f3d 	.word	0x08003f3d
 8003e1c:	08003e63 	.word	0x08003e63
 8003e20:	08003f3d 	.word	0x08003f3d
 8003e24:	08003f3d 	.word	0x08003f3d
 8003e28:	08003f3d 	.word	0x08003f3d
 8003e2c:	08003f3d 	.word	0x08003f3d
 8003e30:	08003f3d 	.word	0x08003f3d
 8003e34:	08003e7f 	.word	0x08003e7f
 8003e38:	08003f3d 	.word	0x08003f3d
 8003e3c:	08003f3d 	.word	0x08003f3d
 8003e40:	08003f3d 	.word	0x08003f3d
 8003e44:	08003f3d 	.word	0x08003f3d
 8003e48:	08003f3d 	.word	0x08003f3d
 8003e4c:	08003f3d 	.word	0x08003f3d
 8003e50:	08003e8d 	.word	0x08003e8d
				case ENCODER_CAL_CMD:
					fsmstate->next_state = ENCODER_CALIBRATE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2205      	movs	r2, #5
 8003e58:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	70da      	strb	r2, [r3, #3]
					break;
 8003e60:	e04c      	b.n	8003efc <update_fsm+0x174>
				case MOTOR_CMD:
					fsmstate->next_state = MOTOR_MODE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2202      	movs	r2, #2
 8003e66:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	70da      	strb	r2, [r3, #3]
					break;
 8003e6e:	e045      	b.n	8003efc <update_fsm+0x174>
				case ENCODER_CMD:
					fsmstate->next_state = ENCODER_MODE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2206      	movs	r2, #6
 8003e74:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	70da      	strb	r2, [r3, #3]
					break;
 8003e7c:	e03e      	b.n	8003efc <update_fsm+0x174>
				case SETUP_CMD:
					fsmstate->next_state = SETUP_MODE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2204      	movs	r2, #4
 8003e82:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	70da      	strb	r2, [r3, #3]
					break;
 8003e8a:	e037      	b.n	8003efc <update_fsm+0x174>
				case ZERO_CMD:
					comm_encoder.m_zero = 0;
 8003e8c:	4b2d      	ldr	r3, [pc, #180]	; (8003f44 <update_fsm+0x1bc>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
					ps_sample(&comm_encoder, DT);
 8003e94:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8003f48 <update_fsm+0x1c0>
 8003e98:	482a      	ldr	r0, [pc, #168]	; (8003f44 <update_fsm+0x1bc>)
 8003e9a:	f001 fb21 	bl	80054e0 <ps_sample>
					int zero_count = comm_encoder.count;
 8003e9e:	4b29      	ldr	r3, [pc, #164]	; (8003f44 <update_fsm+0x1bc>)
 8003ea0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ea2:	60fb      	str	r3, [r7, #12]
					M_ZERO = zero_count;
 8003ea4:	4a29      	ldr	r2, [pc, #164]	; (8003f4c <update_fsm+0x1c4>)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6113      	str	r3, [r2, #16]
					if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 8003eaa:	4b29      	ldr	r3, [pc, #164]	; (8003f50 <update_fsm+0x1c8>)
 8003eac:	691a      	ldr	r2, [r3, #16]
 8003eae:	9200      	str	r2, [sp, #0]
 8003eb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003eb2:	f001 fd0f 	bl	80058d4 <preference_writer_ready>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f083 0301 	eor.w	r3, r3, #1
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <update_fsm+0x140>
 8003ec2:	4823      	ldr	r0, [pc, #140]	; (8003f50 <update_fsm+0x1c8>)
 8003ec4:	f001 fcf7 	bl	80058b6 <preference_writer_open>
					preference_writer_flush(&prefs);
 8003ec8:	4821      	ldr	r0, [pc, #132]	; (8003f50 <update_fsm+0x1c8>)
 8003eca:	f001 fd11 	bl	80058f0 <preference_writer_flush>
					preference_writer_close(&prefs);
 8003ece:	4820      	ldr	r0, [pc, #128]	; (8003f50 <update_fsm+0x1c8>)
 8003ed0:	f001 fd8c 	bl	80059ec <preference_writer_close>
					preference_writer_load(prefs);
 8003ed4:	4b1e      	ldr	r3, [pc, #120]	; (8003f50 <update_fsm+0x1c8>)
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	9200      	str	r2, [sp, #0]
 8003eda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003edc:	f001 fd44 	bl	8005968 <preference_writer_load>
					printf("\n\r  Saved new zero position:  %d\n\r\n\r", M_ZERO);
 8003ee0:	4b1a      	ldr	r3, [pc, #104]	; (8003f4c <update_fsm+0x1c4>)
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	481b      	ldr	r0, [pc, #108]	; (8003f54 <update_fsm+0x1cc>)
 8003ee8:	f008 ff0e 	bl	800cd08 <iprintf>
					break;
 8003eec:	e006      	b.n	8003efc <update_fsm+0x174>
				case HALL_CAL_CMD:
					fsmstate->next_state = HALL_CALIBRATE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	70da      	strb	r2, [r3, #3]
					break;
 8003efa:	bf00      	nop
				}
			break;
 8003efc:	e01e      	b.n	8003f3c <update_fsm+0x1b4>
		case SETUP_MODE:
			if(fsm_input == ENTER_CMD){
 8003efe:	78fb      	ldrb	r3, [r7, #3]
 8003f00:	2b0d      	cmp	r3, #13
 8003f02:	d103      	bne.n	8003f0c <update_fsm+0x184>
				process_user_input(fsmstate);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fa21 	bl	800434c <process_user_input>
				break;
 8003f0a:	e018      	b.n	8003f3e <update_fsm+0x1b6>
			}
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	7b5b      	ldrb	r3, [r3, #13]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d103      	bne.n	8003f1c <update_fsm+0x194>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	78fa      	ldrb	r2, [r7, #3]
 8003f18:	739a      	strb	r2, [r3, #14]
 8003f1a:	e006      	b.n	8003f2a <update_fsm+0x1a2>
			else{
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	7b5b      	ldrb	r3, [r3, #13]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	4413      	add	r3, r2
 8003f26:	78fa      	ldrb	r2, [r7, #3]
 8003f28:	715a      	strb	r2, [r3, #5]
				//fsmstate->bytecount = fsmstate->bytecount%(sizeof(fsmstate->cmd_buff)/sizeof(fsmstate->cmd_buff[0])); // reset when buffer is full
			}
			fsmstate->bytecount++;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	7b5b      	ldrb	r3, [r3, #13]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	735a      	strb	r2, [r3, #13]
			/* If enter is typed, process user input */

			break;
 8003f36:	e002      	b.n	8003f3e <update_fsm+0x1b6>
		return;
 8003f38:	bf00      	nop
 8003f3a:	e000      	b.n	8003f3e <update_fsm+0x1b6>
			break;
 8003f3c:	bf00      	nop
			break;
		case MOTOR_MODE:
			break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	20000428 	.word	0x20000428
 8003f48:	37d1b717 	.word	0x37d1b717
 8003f4c:	20009074 	.word	0x20009074
 8003f50:	20000748 	.word	0x20000748
 8003f54:	08010ca0 	.word	0x08010ca0

08003f58 <enter_menu_state>:


 void enter_menu_state(void){
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r");
 8003f5c:	480c      	ldr	r0, [pc, #48]	; (8003f90 <enter_menu_state+0x38>)
 8003f5e:	f008 fed3 	bl	800cd08 <iprintf>
	    printf(" Commands:\n\r");
 8003f62:	480c      	ldr	r0, [pc, #48]	; (8003f94 <enter_menu_state+0x3c>)
 8003f64:	f008 fed0 	bl	800cd08 <iprintf>
	    printf(" m - Motor Mode\n\r");
 8003f68:	480b      	ldr	r0, [pc, #44]	; (8003f98 <enter_menu_state+0x40>)
 8003f6a:	f008 fecd 	bl	800cd08 <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 8003f6e:	480b      	ldr	r0, [pc, #44]	; (8003f9c <enter_menu_state+0x44>)
 8003f70:	f008 feca 	bl	800cd08 <iprintf>
	    printf(" s - Setup\n\r");
 8003f74:	480a      	ldr	r0, [pc, #40]	; (8003fa0 <enter_menu_state+0x48>)
 8003f76:	f008 fec7 	bl	800cd08 <iprintf>
	    printf(" e - Display Encoder\n\r");
 8003f7a:	480a      	ldr	r0, [pc, #40]	; (8003fa4 <enter_menu_state+0x4c>)
 8003f7c:	f008 fec4 	bl	800cd08 <iprintf>
	    printf(" z - Set Zero Position\n\r");
 8003f80:	4809      	ldr	r0, [pc, #36]	; (8003fa8 <enter_menu_state+0x50>)
 8003f82:	f008 fec1 	bl	800cd08 <iprintf>
	    printf(" esc - Exit to Menu\n\r");
 8003f86:	4809      	ldr	r0, [pc, #36]	; (8003fac <enter_menu_state+0x54>)
 8003f88:	f008 febe 	bl	800cd08 <iprintf>

	    //gpio.led->write(0);
 }
 8003f8c:	bf00      	nop
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	08010cc8 	.word	0x08010cc8
 8003f94:	08010ccc 	.word	0x08010ccc
 8003f98:	08010cdc 	.word	0x08010cdc
 8003f9c:	08010cf0 	.word	0x08010cf0
 8003fa0:	08010d0c 	.word	0x08010d0c
 8003fa4:	08010d1c 	.word	0x08010d1c
 8003fa8:	08010d34 	.word	0x08010d34
 8003fac:	08010d50 	.word	0x08010d50

08003fb0 <enter_setup_state>:

 void enter_setup_state(void){
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af04      	add	r7, sp, #16
	    printf("\r\n Configuration Options \n\r");
 8003fb6:	4898      	ldr	r0, [pc, #608]	; (8004218 <enter_setup_state+0x268>)
 8003fb8:	f008 fea6 	bl	800cd08 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 8003fbc:	4b97      	ldr	r3, [pc, #604]	; (800421c <enter_setup_state+0x26c>)
 8003fbe:	9301      	str	r3, [sp, #4]
 8003fc0:	4b97      	ldr	r3, [pc, #604]	; (8004220 <enter_setup_state+0x270>)
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	4b97      	ldr	r3, [pc, #604]	; (8004224 <enter_setup_state+0x274>)
 8003fc6:	4a98      	ldr	r2, [pc, #608]	; (8004228 <enter_setup_state+0x278>)
 8003fc8:	4998      	ldr	r1, [pc, #608]	; (800422c <enter_setup_state+0x27c>)
 8003fca:	4899      	ldr	r0, [pc, #612]	; (8004230 <enter_setup_state+0x280>)
 8003fcc:	f008 fe9c 	bl	800cd08 <iprintf>
	    printf("\r\n Motor:\r\n");
 8003fd0:	4898      	ldr	r0, [pc, #608]	; (8004234 <enter_setup_state+0x284>)
 8003fd2:	f008 ff1f 	bl	800ce14 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio",                                "0",   "-",      GR);
 8003fd6:	4b98      	ldr	r3, [pc, #608]	; (8004238 <enter_setup_state+0x288>)
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fc fae4 	bl	80005a8 <__aeabi_f2d>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003fe8:	4b94      	ldr	r3, [pc, #592]	; (800423c <enter_setup_state+0x28c>)
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	4b94      	ldr	r3, [pc, #592]	; (8004240 <enter_setup_state+0x290>)
 8003fee:	4a95      	ldr	r2, [pc, #596]	; (8004244 <enter_setup_state+0x294>)
 8003ff0:	4995      	ldr	r1, [pc, #596]	; (8004248 <enter_setup_state+0x298>)
 8003ff2:	4896      	ldr	r0, [pc, #600]	; (800424c <enter_setup_state+0x29c>)
 8003ff4:	f008 fe88 	bl	800cd08 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "t", "Torque Constant (N-m/A)",                   "0",   "-",      KT);
 8003ff8:	4b8f      	ldr	r3, [pc, #572]	; (8004238 <enter_setup_state+0x288>)
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fc fad3 	bl	80005a8 <__aeabi_f2d>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800400a:	4b8c      	ldr	r3, [pc, #560]	; (800423c <enter_setup_state+0x28c>)
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	4b8c      	ldr	r3, [pc, #560]	; (8004240 <enter_setup_state+0x290>)
 8004010:	4a8f      	ldr	r2, [pc, #572]	; (8004250 <enter_setup_state+0x2a0>)
 8004012:	4990      	ldr	r1, [pc, #576]	; (8004254 <enter_setup_state+0x2a4>)
 8004014:	4890      	ldr	r0, [pc, #576]	; (8004258 <enter_setup_state+0x2a8>)
 8004016:	f008 fe77 	bl	800cd08 <iprintf>
	    printf("\r\n Control:\r\n");
 800401a:	4890      	ldr	r0, [pc, #576]	; (800425c <enter_setup_state+0x2ac>)
 800401c:	f008 fefa 	bl	800ce14 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "b", "Current Bandwidth (Hz)",                    "100", "2000",   I_BW);
 8004020:	4b85      	ldr	r3, [pc, #532]	; (8004238 <enter_setup_state+0x288>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	4618      	mov	r0, r3
 8004026:	f7fc fabf 	bl	80005a8 <__aeabi_f2d>
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004032:	4b8b      	ldr	r3, [pc, #556]	; (8004260 <enter_setup_state+0x2b0>)
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	4b8b      	ldr	r3, [pc, #556]	; (8004264 <enter_setup_state+0x2b4>)
 8004038:	4a8b      	ldr	r2, [pc, #556]	; (8004268 <enter_setup_state+0x2b8>)
 800403a:	498c      	ldr	r1, [pc, #560]	; (800426c <enter_setup_state+0x2bc>)
 800403c:	4883      	ldr	r0, [pc, #524]	; (800424c <enter_setup_state+0x29c>)
 800403e:	f008 fe63 	bl	800cd08 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "l", "Current Limit (A)",                         "0.0", "75.0",   I_MAX);
 8004042:	4b7d      	ldr	r3, [pc, #500]	; (8004238 <enter_setup_state+0x288>)
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	4618      	mov	r0, r3
 8004048:	f7fc faae 	bl	80005a8 <__aeabi_f2d>
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004054:	4b86      	ldr	r3, [pc, #536]	; (8004270 <enter_setup_state+0x2c0>)
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	4b86      	ldr	r3, [pc, #536]	; (8004274 <enter_setup_state+0x2c4>)
 800405a:	4a87      	ldr	r2, [pc, #540]	; (8004278 <enter_setup_state+0x2c8>)
 800405c:	4987      	ldr	r1, [pc, #540]	; (800427c <enter_setup_state+0x2cc>)
 800405e:	487b      	ldr	r0, [pc, #492]	; (800424c <enter_setup_state+0x29c>)
 8004060:	f008 fe52 	bl	800cd08 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "p", "Max Position Setpoint (rad)",               "-",   "-",      P_MAX);
 8004064:	4b74      	ldr	r3, [pc, #464]	; (8004238 <enter_setup_state+0x288>)
 8004066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004068:	4618      	mov	r0, r3
 800406a:	f7fc fa9d 	bl	80005a8 <__aeabi_f2d>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004076:	4b71      	ldr	r3, [pc, #452]	; (800423c <enter_setup_state+0x28c>)
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	4b70      	ldr	r3, [pc, #448]	; (800423c <enter_setup_state+0x28c>)
 800407c:	4a80      	ldr	r2, [pc, #512]	; (8004280 <enter_setup_state+0x2d0>)
 800407e:	4981      	ldr	r1, [pc, #516]	; (8004284 <enter_setup_state+0x2d4>)
 8004080:	4872      	ldr	r0, [pc, #456]	; (800424c <enter_setup_state+0x29c>)
 8004082:	f008 fe41 	bl	800cd08 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "v", "Max Velocity Setpoint (rad)/s",             "-",   "-",      V_MAX);
 8004086:	4b6c      	ldr	r3, [pc, #432]	; (8004238 <enter_setup_state+0x288>)
 8004088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408a:	4618      	mov	r0, r3
 800408c:	f7fc fa8c 	bl	80005a8 <__aeabi_f2d>
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004098:	4b68      	ldr	r3, [pc, #416]	; (800423c <enter_setup_state+0x28c>)
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	4b67      	ldr	r3, [pc, #412]	; (800423c <enter_setup_state+0x28c>)
 800409e:	4a7a      	ldr	r2, [pc, #488]	; (8004288 <enter_setup_state+0x2d8>)
 80040a0:	497a      	ldr	r1, [pc, #488]	; (800428c <enter_setup_state+0x2dc>)
 80040a2:	486a      	ldr	r0, [pc, #424]	; (800424c <enter_setup_state+0x29c>)
 80040a4:	f008 fe30 	bl	800cd08 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "k", "Max Gain for Position (N-m/rad)",           "0.0", "1000.0", KP_MAX);
 80040a8:	4b63      	ldr	r3, [pc, #396]	; (8004238 <enter_setup_state+0x288>)
 80040aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fc fa7b 	bl	80005a8 <__aeabi_f2d>
 80040b2:	4602      	mov	r2, r0
 80040b4:	460b      	mov	r3, r1
 80040b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80040ba:	4b75      	ldr	r3, [pc, #468]	; (8004290 <enter_setup_state+0x2e0>)
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	4b6d      	ldr	r3, [pc, #436]	; (8004274 <enter_setup_state+0x2c4>)
 80040c0:	4a74      	ldr	r2, [pc, #464]	; (8004294 <enter_setup_state+0x2e4>)
 80040c2:	4975      	ldr	r1, [pc, #468]	; (8004298 <enter_setup_state+0x2e8>)
 80040c4:	4861      	ldr	r0, [pc, #388]	; (800424c <enter_setup_state+0x29c>)
 80040c6:	f008 fe1f 	bl	800cd08 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "i", "Max Integral Gain for Position (N-m*s/rad)","0.0", "10.0",   KI_MAX);
 80040ca:	4b5b      	ldr	r3, [pc, #364]	; (8004238 <enter_setup_state+0x288>)
 80040cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fc fa6a 	bl	80005a8 <__aeabi_f2d>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80040dc:	4b6f      	ldr	r3, [pc, #444]	; (800429c <enter_setup_state+0x2ec>)
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	4b64      	ldr	r3, [pc, #400]	; (8004274 <enter_setup_state+0x2c4>)
 80040e2:	4a6f      	ldr	r2, [pc, #444]	; (80042a0 <enter_setup_state+0x2f0>)
 80040e4:	496f      	ldr	r1, [pc, #444]	; (80042a4 <enter_setup_state+0x2f4>)
 80040e6:	4859      	ldr	r0, [pc, #356]	; (800424c <enter_setup_state+0x29c>)
 80040e8:	f008 fe0e 	bl	800cd08 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "d", "Max Gain for Velocity (N-m/rad/s)",         "0.0", "5.0",    KD_MAX);
 80040ec:	4b52      	ldr	r3, [pc, #328]	; (8004238 <enter_setup_state+0x288>)
 80040ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fc fa59 	bl	80005a8 <__aeabi_f2d>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80040fe:	4b6a      	ldr	r3, [pc, #424]	; (80042a8 <enter_setup_state+0x2f8>)
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	4b5c      	ldr	r3, [pc, #368]	; (8004274 <enter_setup_state+0x2c4>)
 8004104:	4a69      	ldr	r2, [pc, #420]	; (80042ac <enter_setup_state+0x2fc>)
 8004106:	496a      	ldr	r1, [pc, #424]	; (80042b0 <enter_setup_state+0x300>)
 8004108:	4850      	ldr	r0, [pc, #320]	; (800424c <enter_setup_state+0x29c>)
 800410a:	f008 fdfd 	bl	800cd08 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "f", "FW Current Limit (A)",                      "0.0", "33.0",   I_FW_MAX);
 800410e:	4b4a      	ldr	r3, [pc, #296]	; (8004238 <enter_setup_state+0x288>)
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	4618      	mov	r0, r3
 8004114:	f7fc fa48 	bl	80005a8 <__aeabi_f2d>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004120:	4b64      	ldr	r3, [pc, #400]	; (80042b4 <enter_setup_state+0x304>)
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	4b53      	ldr	r3, [pc, #332]	; (8004274 <enter_setup_state+0x2c4>)
 8004126:	4a64      	ldr	r2, [pc, #400]	; (80042b8 <enter_setup_state+0x308>)
 8004128:	4964      	ldr	r1, [pc, #400]	; (80042bc <enter_setup_state+0x30c>)
 800412a:	4848      	ldr	r0, [pc, #288]	; (800424c <enter_setup_state+0x29c>)
 800412c:	f008 fdec 	bl	800cd08 <iprintf>
//	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)",                "0",   "150",    TEMP_MAX);
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "c", "Continuous Current (A)",                    "0.0", "40.0",   I_MAX_CONT);
 8004130:	4b41      	ldr	r3, [pc, #260]	; (8004238 <enter_setup_state+0x288>)
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	4618      	mov	r0, r3
 8004136:	f7fc fa37 	bl	80005a8 <__aeabi_f2d>
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004142:	4b5f      	ldr	r3, [pc, #380]	; (80042c0 <enter_setup_state+0x310>)
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	4b4b      	ldr	r3, [pc, #300]	; (8004274 <enter_setup_state+0x2c4>)
 8004148:	4a5e      	ldr	r2, [pc, #376]	; (80042c4 <enter_setup_state+0x314>)
 800414a:	495f      	ldr	r1, [pc, #380]	; (80042c8 <enter_setup_state+0x318>)
 800414c:	483f      	ldr	r0, [pc, #252]	; (800424c <enter_setup_state+0x29c>)
 800414e:	f008 fddb 	bl	800cd08 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "a", "Calibration Current (A)",                   "0.0", "20.0",   I_CAL);
 8004152:	4b39      	ldr	r3, [pc, #228]	; (8004238 <enter_setup_state+0x288>)
 8004154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004156:	4618      	mov	r0, r3
 8004158:	f7fc fa26 	bl	80005a8 <__aeabi_f2d>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004164:	4b59      	ldr	r3, [pc, #356]	; (80042cc <enter_setup_state+0x31c>)
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	4b42      	ldr	r3, [pc, #264]	; (8004274 <enter_setup_state+0x2c4>)
 800416a:	4a59      	ldr	r2, [pc, #356]	; (80042d0 <enter_setup_state+0x320>)
 800416c:	4959      	ldr	r1, [pc, #356]	; (80042d4 <enter_setup_state+0x324>)
 800416e:	4837      	ldr	r0, [pc, #220]	; (800424c <enter_setup_state+0x29c>)
 8004170:	f008 fdca 	bl	800cd08 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %d\n\r",   "r", "Hall Calibration Direction",                "-1",  "1",      HALL_CAL_DIR);
 8004174:	4b58      	ldr	r3, [pc, #352]	; (80042d8 <enter_setup_state+0x328>)
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	9301      	str	r3, [sp, #4]
 800417a:	4b58      	ldr	r3, [pc, #352]	; (80042dc <enter_setup_state+0x32c>)
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	4b58      	ldr	r3, [pc, #352]	; (80042e0 <enter_setup_state+0x330>)
 8004180:	4a58      	ldr	r2, [pc, #352]	; (80042e4 <enter_setup_state+0x334>)
 8004182:	4959      	ldr	r1, [pc, #356]	; (80042e8 <enter_setup_state+0x338>)
 8004184:	4859      	ldr	r0, [pc, #356]	; (80042ec <enter_setup_state+0x33c>)
 8004186:	f008 fdbf 	bl	800cd08 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "e", "Hall Calibration offset",                   "0.0", "143.0",  HALL_CAL_OFFSET);
 800418a:	4b2b      	ldr	r3, [pc, #172]	; (8004238 <enter_setup_state+0x288>)
 800418c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800418e:	4618      	mov	r0, r3
 8004190:	f7fc fa0a 	bl	80005a8 <__aeabi_f2d>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800419c:	4b54      	ldr	r3, [pc, #336]	; (80042f0 <enter_setup_state+0x340>)
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	4b34      	ldr	r3, [pc, #208]	; (8004274 <enter_setup_state+0x2c4>)
 80041a2:	4a54      	ldr	r2, [pc, #336]	; (80042f4 <enter_setup_state+0x344>)
 80041a4:	4954      	ldr	r1, [pc, #336]	; (80042f8 <enter_setup_state+0x348>)
 80041a6:	4855      	ldr	r0, [pc, #340]	; (80042fc <enter_setup_state+0x34c>)
 80041a8:	f008 fdae 	bl	800cd08 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Hall Calibration Speed",                    "0.0", "10.0",   HALL_CAL_SPEED);
 80041ac:	4b22      	ldr	r3, [pc, #136]	; (8004238 <enter_setup_state+0x288>)
 80041ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fc f9f9 	bl	80005a8 <__aeabi_f2d>
 80041b6:	4602      	mov	r2, r0
 80041b8:	460b      	mov	r3, r1
 80041ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80041be:	4b37      	ldr	r3, [pc, #220]	; (800429c <enter_setup_state+0x2ec>)
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	4b2c      	ldr	r3, [pc, #176]	; (8004274 <enter_setup_state+0x2c4>)
 80041c4:	4a4e      	ldr	r2, [pc, #312]	; (8004300 <enter_setup_state+0x350>)
 80041c6:	494f      	ldr	r1, [pc, #316]	; (8004304 <enter_setup_state+0x354>)
 80041c8:	484c      	ldr	r0, [pc, #304]	; (80042fc <enter_setup_state+0x34c>)
 80041ca:	f008 fd9d 	bl	800cd08 <iprintf>
	    printf("\r\n CAN:\r\n");
 80041ce:	484e      	ldr	r0, [pc, #312]	; (8004308 <enter_setup_state+0x358>)
 80041d0:	f008 fe20 	bl	800ce14 <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "n", "CAN ID",                                    "0",   "127",    CAN_ID);
 80041d4:	4b40      	ldr	r3, [pc, #256]	; (80042d8 <enter_setup_state+0x328>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	9301      	str	r3, [sp, #4]
 80041da:	4b4c      	ldr	r3, [pc, #304]	; (800430c <enter_setup_state+0x35c>)
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	4b18      	ldr	r3, [pc, #96]	; (8004240 <enter_setup_state+0x290>)
 80041e0:	4a4b      	ldr	r2, [pc, #300]	; (8004310 <enter_setup_state+0x360>)
 80041e2:	494c      	ldr	r1, [pc, #304]	; (8004314 <enter_setup_state+0x364>)
 80041e4:	484c      	ldr	r0, [pc, #304]	; (8004318 <enter_setup_state+0x368>)
 80041e6:	f008 fd8f 	bl	800cd08 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN TX ID",                                 "0",   "127",    CAN_MASTER);
 80041ea:	4b3b      	ldr	r3, [pc, #236]	; (80042d8 <enter_setup_state+0x328>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	9301      	str	r3, [sp, #4]
 80041f0:	4b46      	ldr	r3, [pc, #280]	; (800430c <enter_setup_state+0x35c>)
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	4b12      	ldr	r3, [pc, #72]	; (8004240 <enter_setup_state+0x290>)
 80041f6:	4a49      	ldr	r2, [pc, #292]	; (800431c <enter_setup_state+0x36c>)
 80041f8:	4949      	ldr	r1, [pc, #292]	; (8004320 <enter_setup_state+0x370>)
 80041fa:	4847      	ldr	r0, [pc, #284]	; (8004318 <enter_setup_state+0x368>)
 80041fc:	f008 fd84 	bl	800cd08 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r",   "o", "CAN Timeout (cycles)(0 = none)",            "0",   "100000", CAN_TIMEOUT);
 8004200:	4b35      	ldr	r3, [pc, #212]	; (80042d8 <enter_setup_state+0x328>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	9301      	str	r3, [sp, #4]
 8004206:	4b47      	ldr	r3, [pc, #284]	; (8004324 <enter_setup_state+0x374>)
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	4b0d      	ldr	r3, [pc, #52]	; (8004240 <enter_setup_state+0x290>)
 800420c:	4a46      	ldr	r2, [pc, #280]	; (8004328 <enter_setup_state+0x378>)
 800420e:	4947      	ldr	r1, [pc, #284]	; (800432c <enter_setup_state+0x37c>)
 8004210:	4836      	ldr	r0, [pc, #216]	; (80042ec <enter_setup_state+0x33c>)
 8004212:	f008 fd79 	bl	800cd08 <iprintf>
 8004216:	e08b      	b.n	8004330 <enter_setup_state+0x380>
 8004218:	08010d68 	.word	0x08010d68
 800421c:	08010dbc 	.word	0x08010dbc
 8004220:	08010dcc 	.word	0x08010dcc
 8004224:	08010d84 	.word	0x08010d84
 8004228:	08010d88 	.word	0x08010d88
 800422c:	08010d94 	.word	0x08010d94
 8004230:	08010d9c 	.word	0x08010d9c
 8004234:	08010dd0 	.word	0x08010dd0
 8004238:	2000075c 	.word	0x2000075c
 800423c:	08010e10 	.word	0x08010e10
 8004240:	08010ddc 	.word	0x08010ddc
 8004244:	08010de0 	.word	0x08010de0
 8004248:	08010dec 	.word	0x08010dec
 800424c:	08010df0 	.word	0x08010df0
 8004250:	08010e14 	.word	0x08010e14
 8004254:	08010e2c 	.word	0x08010e2c
 8004258:	08010e30 	.word	0x08010e30
 800425c:	08010e50 	.word	0x08010e50
 8004260:	08010e80 	.word	0x08010e80
 8004264:	08010e60 	.word	0x08010e60
 8004268:	08010e64 	.word	0x08010e64
 800426c:	08010e7c 	.word	0x08010e7c
 8004270:	08010ea4 	.word	0x08010ea4
 8004274:	08010e88 	.word	0x08010e88
 8004278:	08010e8c 	.word	0x08010e8c
 800427c:	08010ea0 	.word	0x08010ea0
 8004280:	08010eac 	.word	0x08010eac
 8004284:	08010ec8 	.word	0x08010ec8
 8004288:	08010ecc 	.word	0x08010ecc
 800428c:	08010eec 	.word	0x08010eec
 8004290:	08010f14 	.word	0x08010f14
 8004294:	08010ef0 	.word	0x08010ef0
 8004298:	08010f10 	.word	0x08010f10
 800429c:	08010f4c 	.word	0x08010f4c
 80042a0:	08010f1c 	.word	0x08010f1c
 80042a4:	08010f48 	.word	0x08010f48
 80042a8:	08010f7c 	.word	0x08010f7c
 80042ac:	08010f54 	.word	0x08010f54
 80042b0:	08010f78 	.word	0x08010f78
 80042b4:	08010f9c 	.word	0x08010f9c
 80042b8:	08010f80 	.word	0x08010f80
 80042bc:	08010f98 	.word	0x08010f98
 80042c0:	08010fc0 	.word	0x08010fc0
 80042c4:	08010fa4 	.word	0x08010fa4
 80042c8:	08010fbc 	.word	0x08010fbc
 80042cc:	08010fe4 	.word	0x08010fe4
 80042d0:	08010fc8 	.word	0x08010fc8
 80042d4:	08010fe0 	.word	0x08010fe0
 80042d8:	20009074 	.word	0x20009074
 80042dc:	0801102c 	.word	0x0801102c
 80042e0:	08010fec 	.word	0x08010fec
 80042e4:	08010ff0 	.word	0x08010ff0
 80042e8:	0801100c 	.word	0x0801100c
 80042ec:	08011010 	.word	0x08011010
 80042f0:	0801106c 	.word	0x0801106c
 80042f4:	08011030 	.word	0x08011030
 80042f8:	08011048 	.word	0x08011048
 80042fc:	0801104c 	.word	0x0801104c
 8004300:	08011074 	.word	0x08011074
 8004304:	0801108c 	.word	0x0801108c
 8004308:	08011090 	.word	0x08011090
 800430c:	080110c8 	.word	0x080110c8
 8004310:	0801109c 	.word	0x0801109c
 8004314:	080110a4 	.word	0x080110a4
 8004318:	080110a8 	.word	0x080110a8
 800431c:	080110cc 	.word	0x080110cc
 8004320:	080110d8 	.word	0x080110d8
 8004324:	08011100 	.word	0x08011100
 8004328:	080110dc 	.word	0x080110dc
 800432c:	080110fc 	.word	0x080110fc
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 8004330:	4804      	ldr	r0, [pc, #16]	; (8004344 <enter_setup_state+0x394>)
 8004332:	f008 fce9 	bl	800cd08 <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 8004336:	4804      	ldr	r0, [pc, #16]	; (8004348 <enter_setup_state+0x398>)
 8004338:	f008 fce6 	bl	800cd08 <iprintf>
 }
 800433c:	bf00      	nop
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	08011108 	.word	0x08011108
 8004348:	08011154 	.word	0x08011154

0800434c <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af02      	add	r7, sp, #8
 8004352:	6078      	str	r0, [r7, #4]
	 /* Collects user input from serial (maybe eventually CAN) and updates settings */

	 static char* response;  // Static buffer for the response
	 response = float_reg_update_uart(fsmstate->cmd_id, fsmstate->cmd_buff);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	7b9a      	ldrb	r2, [r3, #14]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3305      	adds	r3, #5
 800435c:	4619      	mov	r1, r3
 800435e:	4610      	mov	r0, r2
 8004360:	f002 fd8e 	bl	8006e80 <float_reg_update_uart>
 8004364:	4603      	mov	r3, r0
 8004366:	4a24      	ldr	r2, [pc, #144]	; (80043f8 <process_user_input+0xac>)
 8004368:	6013      	str	r3, [r2, #0]
	 if (strcmp(response, STR_INVALID_CMD) == 0){
 800436a:	4b23      	ldr	r3, [pc, #140]	; (80043f8 <process_user_input+0xac>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4923      	ldr	r1, [pc, #140]	; (80043fc <process_user_input+0xb0>)
 8004370:	4618      	mov	r0, r3
 8004372:	f7fb ff4d 	bl	8000210 <strcmp>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10a      	bne.n	8004392 <process_user_input+0x46>
		 response = int_reg_update_uart(fsmstate->cmd_id, fsmstate->cmd_buff);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	7b9a      	ldrb	r2, [r3, #14]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3305      	adds	r3, #5
 8004384:	4619      	mov	r1, r3
 8004386:	4610      	mov	r0, r2
 8004388:	f002 fe2e 	bl	8006fe8 <int_reg_update_uart>
 800438c:	4603      	mov	r3, r0
 800438e:	4a1a      	ldr	r2, [pc, #104]	; (80043f8 <process_user_input+0xac>)
 8004390:	6013      	str	r3, [r2, #0]
	 }
	 printf(response);
 8004392:	4b19      	ldr	r3, [pc, #100]	; (80043f8 <process_user_input+0xac>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f008 fcb6 	bl	800cd08 <iprintf>
		 }
	*/

	 /* Write new settings to flash */

	 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 800439c:	4b18      	ldr	r3, [pc, #96]	; (8004400 <process_user_input+0xb4>)
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	9200      	str	r2, [sp, #0]
 80043a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043a4:	f001 fa96 	bl	80058d4 <preference_writer_ready>
 80043a8:	4603      	mov	r3, r0
 80043aa:	f083 0301 	eor.w	r3, r3, #1
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <process_user_input+0x6e>
 80043b4:	4812      	ldr	r0, [pc, #72]	; (8004400 <process_user_input+0xb4>)
 80043b6:	f001 fa7e 	bl	80058b6 <preference_writer_open>
	 preference_writer_flush(&prefs);
 80043ba:	4811      	ldr	r0, [pc, #68]	; (8004400 <process_user_input+0xb4>)
 80043bc:	f001 fa98 	bl	80058f0 <preference_writer_flush>
	 preference_writer_close(&prefs);
 80043c0:	480f      	ldr	r0, [pc, #60]	; (8004400 <process_user_input+0xb4>)
 80043c2:	f001 fb13 	bl	80059ec <preference_writer_close>
	 preference_writer_load(prefs);
 80043c6:	4b0e      	ldr	r3, [pc, #56]	; (8004400 <process_user_input+0xb4>)
 80043c8:	691a      	ldr	r2, [r3, #16]
 80043ca:	9200      	str	r2, [sp, #0]
 80043cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043ce:	f001 facb 	bl	8005968 <preference_writer_load>

	 enter_setup_state();
 80043d2:	f7ff fded 	bl	8003fb0 <enter_setup_state>

	 fsmstate->bytecount = 0;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	735a      	strb	r2, [r3, #13]
	 fsmstate->cmd_id = 0;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	739a      	strb	r2, [r3, #14]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3305      	adds	r3, #5
 80043e6:	2208      	movs	r2, #8
 80043e8:	2100      	movs	r1, #0
 80043ea:	4618      	mov	r0, r3
 80043ec:	f008 f81a 	bl	800c424 <memset>
 }
 80043f0:	bf00      	nop
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	2000024c 	.word	0x2000024c
 80043fc:	08011180 	.word	0x08011180
 8004400:	20000748 	.word	0x20000748

08004404 <enter_motor_mode>:

 void enter_motor_mode(void){
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
	float _f_round, _f_p_des;
	_f_p_des = controller.theta_mech;
 800440a:	4b27      	ldr	r3, [pc, #156]	; (80044a8 <enter_motor_mode+0xa4>)
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	607b      	str	r3, [r7, #4]
	modff(_f_p_des/(2*PI_F),&_f_round);
 8004410:	edd7 7a01 	vldr	s15, [r7, #4]
 8004414:	eddf 6a25 	vldr	s13, [pc, #148]	; 80044ac <enter_motor_mode+0xa8>
 8004418:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800441c:	463b      	mov	r3, r7
 800441e:	4618      	mov	r0, r3
 8004420:	eeb0 0a47 	vmov.f32	s0, s14
 8004424:	f007 fcee 	bl	800be04 <modff>
	_f_p_des = _f_p_des - _f_round*2*PI_F;
 8004428:	edd7 7a00 	vldr	s15, [r7]
 800442c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004430:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80044b0 <enter_motor_mode+0xac>
 8004434:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004438:	ed97 7a01 	vldr	s14, [r7, #4]
 800443c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004440:	edc7 7a01 	vstr	s15, [r7, #4]
	if(_f_p_des < 0) _f_p_des = _f_p_des + 2*PI_F;
 8004444:	edd7 7a01 	vldr	s15, [r7, #4]
 8004448:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800444c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004450:	d507      	bpl.n	8004462 <enter_motor_mode+0x5e>
 8004452:	edd7 7a01 	vldr	s15, [r7, #4]
 8004456:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80044ac <enter_motor_mode+0xa8>
 800445a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800445e:	edc7 7a01 	vstr	s15, [r7, #4]
	controller.p_des = _f_p_des;
 8004462:	4a11      	ldr	r2, [pc, #68]	; (80044a8 <enter_motor_mode+0xa4>)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8

	GPIO_ENABLE;
 800446a:	2201      	movs	r2, #1
 800446c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004470:	4810      	ldr	r0, [pc, #64]	; (80044b4 <enter_motor_mode+0xb0>)
 8004472:	f004 fcbf 	bl	8008df4 <HAL_GPIO_WritePin>
	LED_HIGH;
 8004476:	2201      	movs	r2, #1
 8004478:	2120      	movs	r1, #32
 800447a:	480f      	ldr	r0, [pc, #60]	; (80044b8 <enter_motor_mode+0xb4>)
 800447c:	f004 fcba 	bl	8008df4 <HAL_GPIO_WritePin>
	reset_foc(&controller);
 8004480:	4809      	ldr	r0, [pc, #36]	; (80044a8 <enter_motor_mode+0xa4>)
 8004482:	f7fe fdb3 	bl	8002fec <reset_foc>
	drv_enable_gd(drv);
 8004486:	4b0d      	ldr	r3, [pc, #52]	; (80044bc <enter_motor_mode+0xb8>)
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	2100      	movs	r1, #0
 800448c:	4611      	mov	r1, r2
 800448e:	889a      	ldrh	r2, [r3, #4]
 8004490:	2300      	movs	r3, #0
 8004492:	f362 030f 	bfi	r3, r2, #0, #16
 8004496:	4608      	mov	r0, r1
 8004498:	4619      	mov	r1, r3
 800449a:	f7fd ffca 	bl	8002432 <drv_enable_gd>
 }
 800449e:	bf00      	nop
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	2000085c 	.word	0x2000085c
 80044ac:	40c90fdb 	.word	0x40c90fdb
 80044b0:	40490fdb 	.word	0x40490fdb
 80044b4:	40020000 	.word	0x40020000
 80044b8:	40020800 	.word	0x40020800
 80044bc:	20009498 	.word	0x20009498

080044c0 <hall_calibrate>:


 void hall_calibrate(FSMStruct * fsmstate){
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
     if(hall_cal.hall_cal_state == 0 || hall_cal.hall_cal_state >= 2 );
 80044c8:	4bb6      	ldr	r3, [pc, #728]	; (80047a4 <hall_calibrate+0x2e4>)
 80044ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 81c7 	beq.w	8004860 <hall_calibrate+0x3a0>
 80044d2:	4bb4      	ldr	r3, [pc, #720]	; (80047a4 <hall_calibrate+0x2e4>)
 80044d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	f300 81c2 	bgt.w	8004860 <hall_calibrate+0x3a0>
     else{
    	 // read hall sensor
    	 hall_cal.hall_input = HAL_GPIO_ReadPin(HALL_IO);
 80044dc:	2140      	movs	r1, #64	; 0x40
 80044de:	48b2      	ldr	r0, [pc, #712]	; (80047a8 <hall_calibrate+0x2e8>)
 80044e0:	f004 fc70 	bl	8008dc4 <HAL_GPIO_ReadPin>
 80044e4:	4603      	mov	r3, r0
 80044e6:	461a      	mov	r2, r3
 80044e8:	4bae      	ldr	r3, [pc, #696]	; (80047a4 <hall_calibrate+0x2e4>)
 80044ea:	601a      	str	r2, [r3, #0]
    	 // calculate new position
    	 if((HALL_CAL_DIR == 1 && controller.theta_mech >= hall_cal.hall_present_pos + 2*PI_F) || (HALL_CAL_DIR == -1 && controller.theta_mech <= hall_cal.hall_present_pos - 2*PI_F)){
 80044ec:	4baf      	ldr	r3, [pc, #700]	; (80047ac <hall_calibrate+0x2ec>)
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d10e      	bne.n	8004512 <hall_calibrate+0x52>
 80044f4:	4bae      	ldr	r3, [pc, #696]	; (80047b0 <hall_calibrate+0x2f0>)
 80044f6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80044fa:	4baa      	ldr	r3, [pc, #680]	; (80047a4 <hall_calibrate+0x2e4>)
 80044fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8004500:	eddf 6aac 	vldr	s13, [pc, #688]	; 80047b4 <hall_calibrate+0x2f4>
 8004504:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004508:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800450c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004510:	da13      	bge.n	800453a <hall_calibrate+0x7a>
 8004512:	4ba6      	ldr	r3, [pc, #664]	; (80047ac <hall_calibrate+0x2ec>)
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451a:	d115      	bne.n	8004548 <hall_calibrate+0x88>
 800451c:	4ba4      	ldr	r3, [pc, #656]	; (80047b0 <hall_calibrate+0x2f0>)
 800451e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004522:	4ba0      	ldr	r3, [pc, #640]	; (80047a4 <hall_calibrate+0x2e4>)
 8004524:	edd3 7a04 	vldr	s15, [r3, #16]
 8004528:	eddf 6aa2 	vldr	s13, [pc, #648]	; 80047b4 <hall_calibrate+0x2f4>
 800452c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004530:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004538:	d806      	bhi.n	8004548 <hall_calibrate+0x88>
    		 hall_cal.hall_cal_state = 3 ;
 800453a:	4b9a      	ldr	r3, [pc, #616]	; (80047a4 <hall_calibrate+0x2e4>)
 800453c:	2203      	movs	r2, #3
 800453e:	629a      	str	r2, [r3, #40]	; 0x28
    		 fsmstate->next_state = MENU_MODE ;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	705a      	strb	r2, [r3, #1]
 8004546:	e187      	b.n	8004858 <hall_calibrate+0x398>
         else{
        	 // rotate the motor forward and backward to read the hall sensor (1: no magnet detected, 0: magnet detected)
        	 // record the position at the moment from 1 to 0 (in_pos), and keep rotating
        	 // record the position at the moment from 0 to 1 (out_pos), and stop rotating.
        	 // calculate the average value of in_pos and out_pos, and rotate the motor to that position slowly
        	 if(hall_cal.hall_input != hall_cal.hall_preinput ) {
 8004548:	4b96      	ldr	r3, [pc, #600]	; (80047a4 <hall_calibrate+0x2e4>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	4b95      	ldr	r3, [pc, #596]	; (80047a4 <hall_calibrate+0x2e4>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	429a      	cmp	r2, r3
 8004552:	d020      	beq.n	8004596 <hall_calibrate+0xd6>
        		 hall_cal.hall_cal_count += 1 ;
 8004554:	4b93      	ldr	r3, [pc, #588]	; (80047a4 <hall_calibrate+0x2e4>)
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	3301      	adds	r3, #1
 800455a:	4a92      	ldr	r2, [pc, #584]	; (80047a4 <hall_calibrate+0x2e4>)
 800455c:	6253      	str	r3, [r2, #36]	; 0x24
        		 if(hall_cal.hall_input == 0) hall_cal.hall_in_pos = controller.theta_mech ;
 800455e:	4b91      	ldr	r3, [pc, #580]	; (80047a4 <hall_calibrate+0x2e4>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d104      	bne.n	8004570 <hall_calibrate+0xb0>
 8004566:	4b92      	ldr	r3, [pc, #584]	; (80047b0 <hall_calibrate+0x2f0>)
 8004568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456a:	4a8e      	ldr	r2, [pc, #568]	; (80047a4 <hall_calibrate+0x2e4>)
 800456c:	6153      	str	r3, [r2, #20]
 800456e:	e012      	b.n	8004596 <hall_calibrate+0xd6>
        		 else{
        			 hall_cal.hall_out_pos = controller.theta_mech ;
 8004570:	4b8f      	ldr	r3, [pc, #572]	; (80047b0 <hall_calibrate+0x2f0>)
 8004572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004574:	4a8b      	ldr	r2, [pc, #556]	; (80047a4 <hall_calibrate+0x2e4>)
 8004576:	6193      	str	r3, [r2, #24]
        			 hall_cal.hall_mid_pos = (hall_cal.hall_in_pos + hall_cal.hall_out_pos)/2.0f ;
 8004578:	4b8a      	ldr	r3, [pc, #552]	; (80047a4 <hall_calibrate+0x2e4>)
 800457a:	ed93 7a05 	vldr	s14, [r3, #20]
 800457e:	4b89      	ldr	r3, [pc, #548]	; (80047a4 <hall_calibrate+0x2e4>)
 8004580:	edd3 7a06 	vldr	s15, [r3, #24]
 8004584:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004588:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800458c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004590:	4b84      	ldr	r3, [pc, #528]	; (80047a4 <hall_calibrate+0x2e4>)
 8004592:	edc3 7a07 	vstr	s15, [r3, #28]
                 }
             }
             if(hall_cal.hall_cal_count <= 1) hall_cal.hall_cal_pcmd = hall_cal.hall_cal_pcmd + HALL_CAL_DIR*(1.0f/(40000.0f)*HALL_CAL_SPEED ) ;
 8004596:	4b83      	ldr	r3, [pc, #524]	; (80047a4 <hall_calibrate+0x2e4>)
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	2b01      	cmp	r3, #1
 800459c:	dc17      	bgt.n	80045ce <hall_calibrate+0x10e>
 800459e:	4b81      	ldr	r3, [pc, #516]	; (80047a4 <hall_calibrate+0x2e4>)
 80045a0:	ed93 7a02 	vldr	s14, [r3, #8]
 80045a4:	4b81      	ldr	r3, [pc, #516]	; (80047ac <hall_calibrate+0x2ec>)
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	ee07 3a90 	vmov	s15, r3
 80045ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80045b0:	4b81      	ldr	r3, [pc, #516]	; (80047b8 <hall_calibrate+0x2f8>)
 80045b2:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80045b6:	ed9f 6a81 	vldr	s12, [pc, #516]	; 80047bc <hall_calibrate+0x2fc>
 80045ba:	ee67 7a86 	vmul.f32	s15, s15, s12
 80045be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045c6:	4b77      	ldr	r3, [pc, #476]	; (80047a4 <hall_calibrate+0x2e4>)
 80045c8:	edc3 7a02 	vstr	s15, [r3, #8]
 80045cc:	e10b      	b.n	80047e6 <hall_calibrate+0x326>
             else{
                 if(HALL_CAL_DIR == 1 ){
 80045ce:	4b77      	ldr	r3, [pc, #476]	; (80047ac <hall_calibrate+0x2ec>)
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d176      	bne.n	80046c4 <hall_calibrate+0x204>
                     if(HALL_CAL_OFFSET == 0){
 80045d6:	4b78      	ldr	r3, [pc, #480]	; (80047b8 <hall_calibrate+0x2f8>)
 80045d8:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80045dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80045e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e4:	d130      	bne.n	8004648 <hall_calibrate+0x188>
                    	 // keep turning
                    	 if(controller.theta_mech >= hall_cal.hall_mid_pos) hall_cal.hall_cal_pcmd = hall_cal.hall_cal_pcmd - HALL_CAL_DIR*1.0f/40000.0f*HALL_CAL_SPEED ;
 80045e6:	4b72      	ldr	r3, [pc, #456]	; (80047b0 <hall_calibrate+0x2f0>)
 80045e8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80045ec:	4b6d      	ldr	r3, [pc, #436]	; (80047a4 <hall_calibrate+0x2e4>)
 80045ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80045f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045fa:	db17      	blt.n	800462c <hall_calibrate+0x16c>
 80045fc:	4b69      	ldr	r3, [pc, #420]	; (80047a4 <hall_calibrate+0x2e4>)
 80045fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8004602:	4b6a      	ldr	r3, [pc, #424]	; (80047ac <hall_calibrate+0x2ec>)
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	ee07 3a90 	vmov	s15, r3
 800460a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800460e:	ed9f 6a6c 	vldr	s12, [pc, #432]	; 80047c0 <hall_calibrate+0x300>
 8004612:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8004616:	4b68      	ldr	r3, [pc, #416]	; (80047b8 <hall_calibrate+0x2f8>)
 8004618:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800461c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004620:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004624:	4b5f      	ldr	r3, [pc, #380]	; (80047a4 <hall_calibrate+0x2e4>)
 8004626:	edc3 7a02 	vstr	s15, [r3, #8]
 800462a:	e0dc      	b.n	80047e6 <hall_calibrate+0x326>
                    	 else{
                    		 // stop
                    		 hall_cal.hall_cal_pcmd = 0.0f;
 800462c:	4b5d      	ldr	r3, [pc, #372]	; (80047a4 <hall_calibrate+0x2e4>)
 800462e:	f04f 0200 	mov.w	r2, #0
 8004632:	609a      	str	r2, [r3, #8]
                    		 hall_cal.hall_cal_state = 2; // success
 8004634:	4b5b      	ldr	r3, [pc, #364]	; (80047a4 <hall_calibrate+0x2e4>)
 8004636:	2202      	movs	r2, #2
 8004638:	629a      	str	r2, [r3, #40]	; 0x28
                             // zero
                    		 hall_cal.hall_cal_count = 0 ;
 800463a:	4b5a      	ldr	r3, [pc, #360]	; (80047a4 <hall_calibrate+0x2e4>)
 800463c:	2200      	movs	r2, #0
 800463e:	625a      	str	r2, [r3, #36]	; 0x24
                    		 fsmstate->next_state = MOTOR_MODE ;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	705a      	strb	r2, [r3, #1]
 8004646:	e0ce      	b.n	80047e6 <hall_calibrate+0x326>
                         }
                     }
                     else{
                         if(controller.theta_mech <= hall_cal.hall_mid_pos + HALL_CAL_OFFSET*PI_F/180)  hall_cal.hall_cal_pcmd = hall_cal.hall_cal_pcmd + HALL_CAL_DIR*1.0f/40000.0f*HALL_CAL_SPEED ;
 8004648:	4b59      	ldr	r3, [pc, #356]	; (80047b0 <hall_calibrate+0x2f0>)
 800464a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800464e:	4b55      	ldr	r3, [pc, #340]	; (80047a4 <hall_calibrate+0x2e4>)
 8004650:	edd3 6a07 	vldr	s13, [r3, #28]
 8004654:	4b58      	ldr	r3, [pc, #352]	; (80047b8 <hall_calibrate+0x2f8>)
 8004656:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800465a:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 80047c4 <hall_calibrate+0x304>
 800465e:	ee27 6a86 	vmul.f32	s12, s15, s12
 8004662:	eddf 5a59 	vldr	s11, [pc, #356]	; 80047c8 <hall_calibrate+0x308>
 8004666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800466a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800466e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004676:	d817      	bhi.n	80046a8 <hall_calibrate+0x1e8>
 8004678:	4b4a      	ldr	r3, [pc, #296]	; (80047a4 <hall_calibrate+0x2e4>)
 800467a:	ed93 7a02 	vldr	s14, [r3, #8]
 800467e:	4b4b      	ldr	r3, [pc, #300]	; (80047ac <hall_calibrate+0x2ec>)
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	ee07 3a90 	vmov	s15, r3
 8004686:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800468a:	ed9f 6a4d 	vldr	s12, [pc, #308]	; 80047c0 <hall_calibrate+0x300>
 800468e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8004692:	4b49      	ldr	r3, [pc, #292]	; (80047b8 <hall_calibrate+0x2f8>)
 8004694:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8004698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800469c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046a0:	4b40      	ldr	r3, [pc, #256]	; (80047a4 <hall_calibrate+0x2e4>)
 80046a2:	edc3 7a02 	vstr	s15, [r3, #8]
 80046a6:	e09e      	b.n	80047e6 <hall_calibrate+0x326>
                         else{
                        	 // stop
                        	 hall_cal.hall_cal_pcmd = 0.0f;
 80046a8:	4b3e      	ldr	r3, [pc, #248]	; (80047a4 <hall_calibrate+0x2e4>)
 80046aa:	f04f 0200 	mov.w	r2, #0
 80046ae:	609a      	str	r2, [r3, #8]
                        	 hall_cal.hall_cal_state = 2; // success
 80046b0:	4b3c      	ldr	r3, [pc, #240]	; (80047a4 <hall_calibrate+0x2e4>)
 80046b2:	2202      	movs	r2, #2
 80046b4:	629a      	str	r2, [r3, #40]	; 0x28
                             // zero
                             hall_cal.hall_cal_count = 0 ;
 80046b6:	4b3b      	ldr	r3, [pc, #236]	; (80047a4 <hall_calibrate+0x2e4>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	625a      	str	r2, [r3, #36]	; 0x24
                    		 fsmstate->next_state = MOTOR_MODE ;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	705a      	strb	r2, [r3, #1]
 80046c2:	e090      	b.n	80047e6 <hall_calibrate+0x326>
                         }
                     }
                 }
                 else if(HALL_CAL_DIR == -1){
 80046c4:	4b39      	ldr	r3, [pc, #228]	; (80047ac <hall_calibrate+0x2ec>)
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046cc:	f040 808b 	bne.w	80047e6 <hall_calibrate+0x326>
                     if(HALL_CAL_OFFSET == 0){
 80046d0:	4b39      	ldr	r3, [pc, #228]	; (80047b8 <hall_calibrate+0x2f8>)
 80046d2:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80046d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046de:	d130      	bne.n	8004742 <hall_calibrate+0x282>
                    	 // keep turning
                         if(controller.theta_mech <= hall_cal.hall_mid_pos) hall_cal.hall_cal_pcmd = hall_cal.hall_cal_pcmd - HALL_CAL_DIR*1.0f/40000.0f*HALL_CAL_SPEED ;
 80046e0:	4b33      	ldr	r3, [pc, #204]	; (80047b0 <hall_calibrate+0x2f0>)
 80046e2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80046e6:	4b2f      	ldr	r3, [pc, #188]	; (80047a4 <hall_calibrate+0x2e4>)
 80046e8:	edd3 7a07 	vldr	s15, [r3, #28]
 80046ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f4:	d817      	bhi.n	8004726 <hall_calibrate+0x266>
 80046f6:	4b2b      	ldr	r3, [pc, #172]	; (80047a4 <hall_calibrate+0x2e4>)
 80046f8:	ed93 7a02 	vldr	s14, [r3, #8]
 80046fc:	4b2b      	ldr	r3, [pc, #172]	; (80047ac <hall_calibrate+0x2ec>)
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	ee07 3a90 	vmov	s15, r3
 8004704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004708:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 80047c0 <hall_calibrate+0x300>
 800470c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8004710:	4b29      	ldr	r3, [pc, #164]	; (80047b8 <hall_calibrate+0x2f8>)
 8004712:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8004716:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800471a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800471e:	4b21      	ldr	r3, [pc, #132]	; (80047a4 <hall_calibrate+0x2e4>)
 8004720:	edc3 7a02 	vstr	s15, [r3, #8]
 8004724:	e05f      	b.n	80047e6 <hall_calibrate+0x326>
                         else{
                        	 // stop
                        	 hall_cal.hall_cal_pcmd = 0.0f;
 8004726:	4b1f      	ldr	r3, [pc, #124]	; (80047a4 <hall_calibrate+0x2e4>)
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	609a      	str	r2, [r3, #8]
                        	 hall_cal.hall_cal_state = 2; // success
 800472e:	4b1d      	ldr	r3, [pc, #116]	; (80047a4 <hall_calibrate+0x2e4>)
 8004730:	2202      	movs	r2, #2
 8004732:	629a      	str	r2, [r3, #40]	; 0x28
                             // zero
                             hall_cal.hall_cal_count = 0 ;
 8004734:	4b1b      	ldr	r3, [pc, #108]	; (80047a4 <hall_calibrate+0x2e4>)
 8004736:	2200      	movs	r2, #0
 8004738:	625a      	str	r2, [r3, #36]	; 0x24
                    		 fsmstate->next_state = MOTOR_MODE ;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2202      	movs	r2, #2
 800473e:	705a      	strb	r2, [r3, #1]
 8004740:	e051      	b.n	80047e6 <hall_calibrate+0x326>
                         }
                     }
                     else{
                    	 // calibrate_offset != 0
                         if(controller.theta_mech >= hall_cal.hall_mid_pos - HALL_CAL_OFFSET*PI_F/180)  hall_cal.hall_cal_pcmd = hall_cal.hall_cal_pcmd + HALL_CAL_DIR*1.0f/40000.0f*HALL_CAL_SPEED ;
 8004742:	4b1b      	ldr	r3, [pc, #108]	; (80047b0 <hall_calibrate+0x2f0>)
 8004744:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004748:	4b16      	ldr	r3, [pc, #88]	; (80047a4 <hall_calibrate+0x2e4>)
 800474a:	edd3 6a07 	vldr	s13, [r3, #28]
 800474e:	4b1a      	ldr	r3, [pc, #104]	; (80047b8 <hall_calibrate+0x2f8>)
 8004750:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8004754:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 80047c4 <hall_calibrate+0x304>
 8004758:	ee27 6a86 	vmul.f32	s12, s15, s12
 800475c:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80047c8 <hall_calibrate+0x308>
 8004760:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004764:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004768:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800476c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004770:	db2c      	blt.n	80047cc <hall_calibrate+0x30c>
 8004772:	4b0c      	ldr	r3, [pc, #48]	; (80047a4 <hall_calibrate+0x2e4>)
 8004774:	ed93 7a02 	vldr	s14, [r3, #8]
 8004778:	4b0c      	ldr	r3, [pc, #48]	; (80047ac <hall_calibrate+0x2ec>)
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	ee07 3a90 	vmov	s15, r3
 8004780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004784:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 80047c0 <hall_calibrate+0x300>
 8004788:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800478c:	4b0a      	ldr	r3, [pc, #40]	; (80047b8 <hall_calibrate+0x2f8>)
 800478e:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8004792:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800479a:	4b02      	ldr	r3, [pc, #8]	; (80047a4 <hall_calibrate+0x2e4>)
 800479c:	edc3 7a02 	vstr	s15, [r3, #8]
 80047a0:	e021      	b.n	80047e6 <hall_calibrate+0x326>
 80047a2:	bf00      	nop
 80047a4:	20000708 	.word	0x20000708
 80047a8:	40020800 	.word	0x40020800
 80047ac:	20009074 	.word	0x20009074
 80047b0:	2000085c 	.word	0x2000085c
 80047b4:	40c90fdb 	.word	0x40c90fdb
 80047b8:	2000075c 	.word	0x2000075c
 80047bc:	37d1b717 	.word	0x37d1b717
 80047c0:	471c4000 	.word	0x471c4000
 80047c4:	40490fdb 	.word	0x40490fdb
 80047c8:	43340000 	.word	0x43340000
                         else{
                        	 // stop
                        	 hall_cal.hall_cal_pcmd = 0.0f;
 80047cc:	4b26      	ldr	r3, [pc, #152]	; (8004868 <hall_calibrate+0x3a8>)
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	609a      	str	r2, [r3, #8]
                        	 hall_cal.hall_cal_state = 2; // success
 80047d4:	4b24      	ldr	r3, [pc, #144]	; (8004868 <hall_calibrate+0x3a8>)
 80047d6:	2202      	movs	r2, #2
 80047d8:	629a      	str	r2, [r3, #40]	; 0x28
                             // zero
                             hall_cal.hall_cal_count = 0 ;
 80047da:	4b23      	ldr	r3, [pc, #140]	; (8004868 <hall_calibrate+0x3a8>)
 80047dc:	2200      	movs	r2, #0
 80047de:	625a      	str	r2, [r3, #36]	; 0x24
                    		 fsmstate->next_state = MOTOR_MODE ;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	705a      	strb	r2, [r3, #1]
                         }
                     }
                 }
             }
             hall_cal.hall_cal_pcmd = (hall_cal.hall_cal_pcmd>2*PI_F) ? hall_cal.hall_cal_pcmd-=2*PI_F : hall_cal.hall_cal_pcmd ;
 80047e6:	4b20      	ldr	r3, [pc, #128]	; (8004868 <hall_calibrate+0x3a8>)
 80047e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80047ec:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800486c <hall_calibrate+0x3ac>
 80047f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f8:	dd0c      	ble.n	8004814 <hall_calibrate+0x354>
 80047fa:	4b1b      	ldr	r3, [pc, #108]	; (8004868 <hall_calibrate+0x3a8>)
 80047fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8004800:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800486c <hall_calibrate+0x3ac>
 8004804:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004808:	4b17      	ldr	r3, [pc, #92]	; (8004868 <hall_calibrate+0x3a8>)
 800480a:	edc3 7a02 	vstr	s15, [r3, #8]
 800480e:	4b16      	ldr	r3, [pc, #88]	; (8004868 <hall_calibrate+0x3a8>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	e001      	b.n	8004818 <hall_calibrate+0x358>
 8004814:	4b14      	ldr	r3, [pc, #80]	; (8004868 <hall_calibrate+0x3a8>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	4a13      	ldr	r2, [pc, #76]	; (8004868 <hall_calibrate+0x3a8>)
 800481a:	6093      	str	r3, [r2, #8]
             hall_cal.hall_cal_pcmd = (hall_cal.hall_cal_pcmd < 0)  ? hall_cal.hall_cal_pcmd+=2*PI_F : hall_cal.hall_cal_pcmd ;
 800481c:	4b12      	ldr	r3, [pc, #72]	; (8004868 <hall_calibrate+0x3a8>)
 800481e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004822:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800482a:	d50c      	bpl.n	8004846 <hall_calibrate+0x386>
 800482c:	4b0e      	ldr	r3, [pc, #56]	; (8004868 <hall_calibrate+0x3a8>)
 800482e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004832:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800486c <hall_calibrate+0x3ac>
 8004836:	ee77 7a87 	vadd.f32	s15, s15, s14
 800483a:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <hall_calibrate+0x3a8>)
 800483c:	edc3 7a02 	vstr	s15, [r3, #8]
 8004840:	4b09      	ldr	r3, [pc, #36]	; (8004868 <hall_calibrate+0x3a8>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	e001      	b.n	800484a <hall_calibrate+0x38a>
 8004846:	4b08      	ldr	r3, [pc, #32]	; (8004868 <hall_calibrate+0x3a8>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	4a07      	ldr	r2, [pc, #28]	; (8004868 <hall_calibrate+0x3a8>)
 800484c:	6093      	str	r3, [r2, #8]
             controller.p_des = hall_cal.hall_cal_pcmd ;
 800484e:	4b06      	ldr	r3, [pc, #24]	; (8004868 <hall_calibrate+0x3a8>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	4a07      	ldr	r2, [pc, #28]	; (8004870 <hall_calibrate+0x3b0>)
 8004854:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
         }
         hall_cal.hall_preinput = hall_cal.hall_input ;
 8004858:	4b03      	ldr	r3, [pc, #12]	; (8004868 <hall_calibrate+0x3a8>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a02      	ldr	r2, [pc, #8]	; (8004868 <hall_calibrate+0x3a8>)
 800485e:	6053      	str	r3, [r2, #4]
     }
 }
 8004860:	bf00      	nop
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	20000708 	.word	0x20000708
 800486c:	40c90fdb 	.word	0x40c90fdb
 8004870:	2000085c 	.word	0x2000085c

08004874 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b08a      	sub	sp, #40	; 0x28
 8004878:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800487a:	f107 0314 	add.w	r3, r7, #20
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	605a      	str	r2, [r3, #4]
 8004884:	609a      	str	r2, [r3, #8]
 8004886:	60da      	str	r2, [r3, #12]
 8004888:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800488a:	2300      	movs	r3, #0
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	4b3d      	ldr	r3, [pc, #244]	; (8004984 <MX_GPIO_Init+0x110>)
 8004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004892:	4a3c      	ldr	r2, [pc, #240]	; (8004984 <MX_GPIO_Init+0x110>)
 8004894:	f043 0304 	orr.w	r3, r3, #4
 8004898:	6313      	str	r3, [r2, #48]	; 0x30
 800489a:	4b3a      	ldr	r3, [pc, #232]	; (8004984 <MX_GPIO_Init+0x110>)
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	613b      	str	r3, [r7, #16]
 80048a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80048a6:	2300      	movs	r3, #0
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	4b36      	ldr	r3, [pc, #216]	; (8004984 <MX_GPIO_Init+0x110>)
 80048ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ae:	4a35      	ldr	r2, [pc, #212]	; (8004984 <MX_GPIO_Init+0x110>)
 80048b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b4:	6313      	str	r3, [r2, #48]	; 0x30
 80048b6:	4b33      	ldr	r3, [pc, #204]	; (8004984 <MX_GPIO_Init+0x110>)
 80048b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80048c2:	2300      	movs	r3, #0
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	4b2f      	ldr	r3, [pc, #188]	; (8004984 <MX_GPIO_Init+0x110>)
 80048c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ca:	4a2e      	ldr	r2, [pc, #184]	; (8004984 <MX_GPIO_Init+0x110>)
 80048cc:	f043 0301 	orr.w	r3, r3, #1
 80048d0:	6313      	str	r3, [r2, #48]	; 0x30
 80048d2:	4b2c      	ldr	r3, [pc, #176]	; (8004984 <MX_GPIO_Init+0x110>)
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	60bb      	str	r3, [r7, #8]
 80048dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80048de:	2300      	movs	r3, #0
 80048e0:	607b      	str	r3, [r7, #4]
 80048e2:	4b28      	ldr	r3, [pc, #160]	; (8004984 <MX_GPIO_Init+0x110>)
 80048e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e6:	4a27      	ldr	r2, [pc, #156]	; (8004984 <MX_GPIO_Init+0x110>)
 80048e8:	f043 0302 	orr.w	r3, r3, #2
 80048ec:	6313      	str	r3, [r2, #48]	; 0x30
 80048ee:	4b25      	ldr	r3, [pc, #148]	; (8004984 <MX_GPIO_Init+0x110>)
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	607b      	str	r3, [r7, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 80048fa:	2200      	movs	r2, #0
 80048fc:	f648 0110 	movw	r1, #34832	; 0x8810
 8004900:	4821      	ldr	r0, [pc, #132]	; (8004988 <MX_GPIO_Init+0x114>)
 8004902:	f004 fa77 	bl	8008df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8004906:	2200      	movs	r2, #0
 8004908:	2120      	movs	r1, #32
 800490a:	4820      	ldr	r0, [pc, #128]	; (800498c <MX_GPIO_Init+0x118>)
 800490c:	f004 fa72 	bl	8008df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004910:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004916:	4b1e      	ldr	r3, [pc, #120]	; (8004990 <MX_GPIO_Init+0x11c>)
 8004918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491a:	2300      	movs	r3, #0
 800491c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800491e:	f107 0314 	add.w	r3, r7, #20
 8004922:	4619      	mov	r1, r3
 8004924:	4819      	ldr	r0, [pc, #100]	; (800498c <MX_GPIO_Init+0x118>)
 8004926:	f004 f8b9 	bl	8008a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15;
 800492a:	f648 0310 	movw	r3, #34832	; 0x8810
 800492e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004930:	2301      	movs	r3, #1
 8004932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004934:	2300      	movs	r3, #0
 8004936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004938:	2303      	movs	r3, #3
 800493a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800493c:	f107 0314 	add.w	r3, r7, #20
 8004940:	4619      	mov	r1, r3
 8004942:	4811      	ldr	r0, [pc, #68]	; (8004988 <MX_GPIO_Init+0x114>)
 8004944:	f004 f8aa 	bl	8008a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004948:	2320      	movs	r3, #32
 800494a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800494c:	2301      	movs	r3, #1
 800494e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004950:	2300      	movs	r3, #0
 8004952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004954:	2303      	movs	r3, #3
 8004956:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004958:	f107 0314 	add.w	r3, r7, #20
 800495c:	4619      	mov	r1, r3
 800495e:	480b      	ldr	r0, [pc, #44]	; (800498c <MX_GPIO_Init+0x118>)
 8004960:	f004 f89c 	bl	8008a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004964:	2340      	movs	r3, #64	; 0x40
 8004966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004968:	2300      	movs	r3, #0
 800496a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800496c:	2300      	movs	r3, #0
 800496e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004970:	f107 0314 	add.w	r3, r7, #20
 8004974:	4619      	mov	r1, r3
 8004976:	4805      	ldr	r0, [pc, #20]	; (800498c <MX_GPIO_Init+0x118>)
 8004978:	f004 f890 	bl	8008a9c <HAL_GPIO_Init>

}
 800497c:	bf00      	nop
 800497e:	3728      	adds	r7, #40	; 0x28
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40023800 	.word	0x40023800
 8004988:	40020000 	.word	0x40020000
 800498c:	40020800 	.word	0x40020800
 8004990:	10210000 	.word	0x10210000

08004994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b088      	sub	sp, #32
 8004998:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800499a:	f002 fbdd 	bl	8007158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800499e:	f000 fb4d 	bl	800503c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80049a2:	f7ff ff67 	bl	8004874 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80049a6:	f001 ff2b 	bl	8006800 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80049aa:	f001 fe0f 	bl	80065cc <MX_TIM1_Init>
  MX_CAN1_Init();
 80049ae:	f7fd f8bd 	bl	8001b2c <MX_CAN1_Init>
  MX_SPI1_Init();
 80049b2:	f001 f82b 	bl	8005a0c <MX_SPI1_Init>
  MX_SPI3_Init();
 80049b6:	f001 f861 	bl	8005a7c <MX_SPI3_Init>
  MX_ADC1_Init();
 80049ba:	f7fc fb47 	bl	800104c <MX_ADC1_Init>
  MX_ADC2_Init();
 80049be:	f7fc fbaf 	bl	8001120 <MX_ADC2_Init>
  MX_ADC3_Init();
 80049c2:	f7fc fbf7 	bl	80011b4 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  /* Load settings from flash */
  preference_writer_init(&prefs, 6);
 80049c6:	2106      	movs	r1, #6
 80049c8:	48b8      	ldr	r0, [pc, #736]	; (8004cac <main+0x318>)
 80049ca:	f000 ff63 	bl	8005894 <preference_writer_init>
  preference_writer_load(prefs);
 80049ce:	4bb7      	ldr	r3, [pc, #732]	; (8004cac <main+0x318>)
 80049d0:	691a      	ldr	r2, [r3, #16]
 80049d2:	9200      	str	r2, [sp, #0]
 80049d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049d6:	f000 ffc7 	bl	8005968 <preference_writer_load>

  /* Sanitize configs in case flash is empty*/
  if(E_ZERO==-1)                                   {E_ZERO = 0;}
 80049da:	4bb5      	ldr	r3, [pc, #724]	; (8004cb0 <main+0x31c>)
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e2:	d102      	bne.n	80049ea <main+0x56>
 80049e4:	4bb2      	ldr	r3, [pc, #712]	; (8004cb0 <main+0x31c>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	615a      	str	r2, [r3, #20]
  if(M_ZERO==-1)                                   {M_ZERO = 0;}
 80049ea:	4bb1      	ldr	r3, [pc, #708]	; (8004cb0 <main+0x31c>)
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f2:	d102      	bne.n	80049fa <main+0x66>
 80049f4:	4bae      	ldr	r3, [pc, #696]	; (8004cb0 <main+0x31c>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	611a      	str	r2, [r3, #16]
  if(isnan(GR) || GR==-1)                          {GR = 6.0f;}
 80049fa:	4bae      	ldr	r3, [pc, #696]	; (8004cb4 <main+0x320>)
 80049fc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004a00:	eef4 7a67 	vcmp.f32	s15, s15
 8004a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a08:	d609      	bvs.n	8004a1e <main+0x8a>
 8004a0a:	4baa      	ldr	r3, [pc, #680]	; (8004cb4 <main+0x320>)
 8004a0c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004a10:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004a14:	eef4 7a47 	vcmp.f32	s15, s14
 8004a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a1c:	d102      	bne.n	8004a24 <main+0x90>
 8004a1e:	4ba5      	ldr	r3, [pc, #660]	; (8004cb4 <main+0x320>)
 8004a20:	4aa5      	ldr	r2, [pc, #660]	; (8004cb8 <main+0x324>)
 8004a22:	645a      	str	r2, [r3, #68]	; 0x44
  if(isnan(KT) || KT==-1)                          {KT = 0.08f;}
 8004a24:	4ba3      	ldr	r3, [pc, #652]	; (8004cb4 <main+0x320>)
 8004a26:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004a2a:	eef4 7a67 	vcmp.f32	s15, s15
 8004a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a32:	d609      	bvs.n	8004a48 <main+0xb4>
 8004a34:	4b9f      	ldr	r3, [pc, #636]	; (8004cb4 <main+0x320>)
 8004a36:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004a3a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004a3e:	eef4 7a47 	vcmp.f32	s15, s14
 8004a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a46:	d102      	bne.n	8004a4e <main+0xba>
 8004a48:	4b9a      	ldr	r3, [pc, #616]	; (8004cb4 <main+0x320>)
 8004a4a:	4a9c      	ldr	r2, [pc, #624]	; (8004cbc <main+0x328>)
 8004a4c:	639a      	str	r2, [r3, #56]	; 0x38
  if(isnan(I_BW) || I_BW==-1)                      {I_BW = 1000;}
 8004a4e:	4b99      	ldr	r3, [pc, #612]	; (8004cb4 <main+0x320>)
 8004a50:	edd3 7a02 	vldr	s15, [r3, #8]
 8004a54:	eef4 7a67 	vcmp.f32	s15, s15
 8004a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a5c:	d609      	bvs.n	8004a72 <main+0xde>
 8004a5e:	4b95      	ldr	r3, [pc, #596]	; (8004cb4 <main+0x320>)
 8004a60:	edd3 7a02 	vldr	s15, [r3, #8]
 8004a64:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004a68:	eef4 7a47 	vcmp.f32	s15, s14
 8004a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a70:	d102      	bne.n	8004a78 <main+0xe4>
 8004a72:	4b90      	ldr	r3, [pc, #576]	; (8004cb4 <main+0x320>)
 8004a74:	4a92      	ldr	r2, [pc, #584]	; (8004cc0 <main+0x32c>)
 8004a76:	609a      	str	r2, [r3, #8]
  if(isnan(I_MAX) || I_MAX ==-1)                   {I_MAX = 40;}
 8004a78:	4b8e      	ldr	r3, [pc, #568]	; (8004cb4 <main+0x320>)
 8004a7a:	edd3 7a03 	vldr	s15, [r3, #12]
 8004a7e:	eef4 7a67 	vcmp.f32	s15, s15
 8004a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a86:	d609      	bvs.n	8004a9c <main+0x108>
 8004a88:	4b8a      	ldr	r3, [pc, #552]	; (8004cb4 <main+0x320>)
 8004a8a:	edd3 7a03 	vldr	s15, [r3, #12]
 8004a8e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004a92:	eef4 7a47 	vcmp.f32	s15, s14
 8004a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a9a:	d102      	bne.n	8004aa2 <main+0x10e>
 8004a9c:	4b85      	ldr	r3, [pc, #532]	; (8004cb4 <main+0x320>)
 8004a9e:	4a89      	ldr	r2, [pc, #548]	; (8004cc4 <main+0x330>)
 8004aa0:	60da      	str	r2, [r3, #12]
  if(isnan(P_MAX))                                 {P_MAX = 6.283f;}
 8004aa2:	4b84      	ldr	r3, [pc, #528]	; (8004cb4 <main+0x320>)
 8004aa4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004aa8:	eef4 7a67 	vcmp.f32	s15, s15
 8004aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab0:	d702      	bvc.n	8004ab8 <main+0x124>
 8004ab2:	4b80      	ldr	r3, [pc, #512]	; (8004cb4 <main+0x320>)
 8004ab4:	4a84      	ldr	r2, [pc, #528]	; (8004cc8 <main+0x334>)
 8004ab6:	651a      	str	r2, [r3, #80]	; 0x50
  if(isnan(P_MIN))                                 {P_MIN = 0.0f;}
 8004ab8:	4b7e      	ldr	r3, [pc, #504]	; (8004cb4 <main+0x320>)
 8004aba:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004abe:	eef4 7a67 	vcmp.f32	s15, s15
 8004ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac6:	d703      	bvc.n	8004ad0 <main+0x13c>
 8004ac8:	4b7a      	ldr	r3, [pc, #488]	; (8004cb4 <main+0x320>)
 8004aca:	f04f 0200 	mov.w	r2, #0
 8004ace:	64da      	str	r2, [r3, #76]	; 0x4c
  if(isnan(V_MAX))                                 {V_MAX = 45.0f;}
 8004ad0:	4b78      	ldr	r3, [pc, #480]	; (8004cb4 <main+0x320>)
 8004ad2:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004ad6:	eef4 7a67 	vcmp.f32	s15, s15
 8004ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ade:	d702      	bvc.n	8004ae6 <main+0x152>
 8004ae0:	4b74      	ldr	r3, [pc, #464]	; (8004cb4 <main+0x320>)
 8004ae2:	4a7a      	ldr	r2, [pc, #488]	; (8004ccc <main+0x338>)
 8004ae4:	659a      	str	r2, [r3, #88]	; 0x58
  if(isnan(V_MIN))                                 {V_MIN = -45.0f;}
 8004ae6:	4b73      	ldr	r3, [pc, #460]	; (8004cb4 <main+0x320>)
 8004ae8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004aec:	eef4 7a67 	vcmp.f32	s15, s15
 8004af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004af4:	d702      	bvc.n	8004afc <main+0x168>
 8004af6:	4b6f      	ldr	r3, [pc, #444]	; (8004cb4 <main+0x320>)
 8004af8:	4a75      	ldr	r2, [pc, #468]	; (8004cd0 <main+0x33c>)
 8004afa:	655a      	str	r2, [r3, #84]	; 0x54
  if(isnan(KP_MAX) || KP_MAX==-1)                  {KP_MAX = 500.0f;}
 8004afc:	4b6d      	ldr	r3, [pc, #436]	; (8004cb4 <main+0x320>)
 8004afe:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004b02:	eef4 7a67 	vcmp.f32	s15, s15
 8004b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b0a:	d609      	bvs.n	8004b20 <main+0x18c>
 8004b0c:	4b69      	ldr	r3, [pc, #420]	; (8004cb4 <main+0x320>)
 8004b0e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004b12:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004b16:	eef4 7a47 	vcmp.f32	s15, s14
 8004b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b1e:	d102      	bne.n	8004b26 <main+0x192>
 8004b20:	4b64      	ldr	r3, [pc, #400]	; (8004cb4 <main+0x320>)
 8004b22:	4a6c      	ldr	r2, [pc, #432]	; (8004cd4 <main+0x340>)
 8004b24:	65da      	str	r2, [r3, #92]	; 0x5c
  if(isnan(KI_MAX) || KI_MAX==-1)                  {KI_MAX = 0.0f;}
 8004b26:	4b63      	ldr	r3, [pc, #396]	; (8004cb4 <main+0x320>)
 8004b28:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004b2c:	eef4 7a67 	vcmp.f32	s15, s15
 8004b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b34:	d609      	bvs.n	8004b4a <main+0x1b6>
 8004b36:	4b5f      	ldr	r3, [pc, #380]	; (8004cb4 <main+0x320>)
 8004b38:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004b3c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004b40:	eef4 7a47 	vcmp.f32	s15, s14
 8004b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b48:	d103      	bne.n	8004b52 <main+0x1be>
 8004b4a:	4b5a      	ldr	r3, [pc, #360]	; (8004cb4 <main+0x320>)
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	661a      	str	r2, [r3, #96]	; 0x60
  if(isnan(KD_MAX) || KD_MAX==-1)                  {KD_MAX = 5.0f;}
 8004b52:	4b58      	ldr	r3, [pc, #352]	; (8004cb4 <main+0x320>)
 8004b54:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004b58:	eef4 7a67 	vcmp.f32	s15, s15
 8004b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b60:	d609      	bvs.n	8004b76 <main+0x1e2>
 8004b62:	4b54      	ldr	r3, [pc, #336]	; (8004cb4 <main+0x320>)
 8004b64:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004b68:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004b6c:	eef4 7a47 	vcmp.f32	s15, s14
 8004b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b74:	d102      	bne.n	8004b7c <main+0x1e8>
 8004b76:	4b4f      	ldr	r3, [pc, #316]	; (8004cb4 <main+0x320>)
 8004b78:	4a57      	ldr	r2, [pc, #348]	; (8004cd8 <main+0x344>)
 8004b7a:	665a      	str	r2, [r3, #100]	; 0x64
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1)             {I_FW_MAX = 0.0f;}
 8004b7c:	4b4d      	ldr	r3, [pc, #308]	; (8004cb4 <main+0x320>)
 8004b7e:	edd3 7a06 	vldr	s15, [r3, #24]
 8004b82:	eef4 7a67 	vcmp.f32	s15, s15
 8004b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b8a:	d609      	bvs.n	8004ba0 <main+0x20c>
 8004b8c:	4b49      	ldr	r3, [pc, #292]	; (8004cb4 <main+0x320>)
 8004b8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8004b92:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004b96:	eef4 7a47 	vcmp.f32	s15, s14
 8004b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b9e:	d103      	bne.n	8004ba8 <main+0x214>
 8004ba0:	4b44      	ldr	r3, [pc, #272]	; (8004cb4 <main+0x320>)
 8004ba2:	f04f 0200 	mov.w	r2, #0
 8004ba6:	619a      	str	r2, [r3, #24]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1)          {I_MAX_CONT = 14.0f;}
 8004ba8:	4b42      	ldr	r3, [pc, #264]	; (8004cb4 <main+0x320>)
 8004baa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004bae:	eef4 7a67 	vcmp.f32	s15, s15
 8004bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb6:	d609      	bvs.n	8004bcc <main+0x238>
 8004bb8:	4b3e      	ldr	r3, [pc, #248]	; (8004cb4 <main+0x320>)
 8004bba:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004bbe:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004bc2:	eef4 7a47 	vcmp.f32	s15, s14
 8004bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bca:	d102      	bne.n	8004bd2 <main+0x23e>
 8004bcc:	4b39      	ldr	r3, [pc, #228]	; (8004cb4 <main+0x320>)
 8004bce:	4a43      	ldr	r2, [pc, #268]	; (8004cdc <main+0x348>)
 8004bd0:	625a      	str	r2, [r3, #36]	; 0x24
  if(isnan(I_CAL) || I_CAL==-1)                    {I_CAL = 5.0f;}
 8004bd2:	4b38      	ldr	r3, [pc, #224]	; (8004cb4 <main+0x320>)
 8004bd4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004bd8:	eef4 7a67 	vcmp.f32	s15, s15
 8004bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be0:	d609      	bvs.n	8004bf6 <main+0x262>
 8004be2:	4b34      	ldr	r3, [pc, #208]	; (8004cb4 <main+0x320>)
 8004be4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004be8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004bec:	eef4 7a47 	vcmp.f32	s15, s14
 8004bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf4:	d102      	bne.n	8004bfc <main+0x268>
 8004bf6:	4b2f      	ldr	r3, [pc, #188]	; (8004cb4 <main+0x320>)
 8004bf8:	4a37      	ldr	r2, [pc, #220]	; (8004cd8 <main+0x344>)
 8004bfa:	649a      	str	r2, [r3, #72]	; 0x48
  if(HALL_CAL_DIR != 1 && HALL_CAL_DIR != -1)      {HALL_CAL_DIR = 1;}
 8004bfc:	4b2c      	ldr	r3, [pc, #176]	; (8004cb0 <main+0x31c>)
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d007      	beq.n	8004c14 <main+0x280>
 8004c04:	4b2a      	ldr	r3, [pc, #168]	; (8004cb0 <main+0x31c>)
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0c:	d002      	beq.n	8004c14 <main+0x280>
 8004c0e:	4b28      	ldr	r3, [pc, #160]	; (8004cb0 <main+0x31c>)
 8004c10:	2201      	movs	r2, #1
 8004c12:	619a      	str	r2, [r3, #24]
  if(isnan(HALL_CAL_OFFSET) || HALL_CAL_OFFSET==-1){HALL_CAL_OFFSET = 0.0f;}
 8004c14:	4b27      	ldr	r3, [pc, #156]	; (8004cb4 <main+0x320>)
 8004c16:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8004c1a:	eef4 7a67 	vcmp.f32	s15, s15
 8004c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c22:	d609      	bvs.n	8004c38 <main+0x2a4>
 8004c24:	4b23      	ldr	r3, [pc, #140]	; (8004cb4 <main+0x320>)
 8004c26:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8004c2a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004c2e:	eef4 7a47 	vcmp.f32	s15, s14
 8004c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c36:	d103      	bne.n	8004c40 <main+0x2ac>
 8004c38:	4b1e      	ldr	r3, [pc, #120]	; (8004cb4 <main+0x320>)
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	669a      	str	r2, [r3, #104]	; 0x68
  if(isnan(HALL_CAL_SPEED) || HALL_CAL_SPEED==-1)  {HALL_CAL_SPEED = 0.25f;}
 8004c40:	4b1c      	ldr	r3, [pc, #112]	; (8004cb4 <main+0x320>)
 8004c42:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8004c46:	eef4 7a67 	vcmp.f32	s15, s15
 8004c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c4e:	d609      	bvs.n	8004c64 <main+0x2d0>
 8004c50:	4b18      	ldr	r3, [pc, #96]	; (8004cb4 <main+0x320>)
 8004c52:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8004c56:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004c5a:	eef4 7a47 	vcmp.f32	s15, s14
 8004c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c62:	d103      	bne.n	8004c6c <main+0x2d8>
 8004c64:	4b13      	ldr	r3, [pc, #76]	; (8004cb4 <main+0x320>)
 8004c66:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8004c6a:	66da      	str	r2, [r3, #108]	; 0x6c
  if(CAN_ID==-1)                                   {CAN_ID = 1;}
 8004c6c:	4b10      	ldr	r3, [pc, #64]	; (8004cb0 <main+0x31c>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c74:	d102      	bne.n	8004c7c <main+0x2e8>
 8004c76:	4b0e      	ldr	r3, [pc, #56]	; (8004cb0 <main+0x31c>)
 8004c78:	2201      	movs	r2, #1
 8004c7a:	605a      	str	r2, [r3, #4]
  if(CAN_MASTER==-1)                               {CAN_MASTER = 0;}
 8004c7c:	4b0c      	ldr	r3, [pc, #48]	; (8004cb0 <main+0x31c>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c84:	d102      	bne.n	8004c8c <main+0x2f8>
 8004c86:	4b0a      	ldr	r3, [pc, #40]	; (8004cb0 <main+0x31c>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	609a      	str	r2, [r3, #8]
  if(CAN_TIMEOUT==-1)                              {CAN_TIMEOUT = 0;}
 8004c8c:	4b08      	ldr	r3, [pc, #32]	; (8004cb0 <main+0x31c>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c94:	d102      	bne.n	8004c9c <main+0x308>
 8004c96:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <main+0x31c>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	60da      	str	r2, [r3, #12]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1)            {R_NOMINAL = 0.0f;}
 8004c9c:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <main+0x320>)
 8004c9e:	edd3 7a07 	vldr	s15, [r3, #28]
 8004ca2:	eef4 7a67 	vcmp.f32	s15, s15
 8004ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004caa:	e019      	b.n	8004ce0 <main+0x34c>
 8004cac:	20000748 	.word	0x20000748
 8004cb0:	20009074 	.word	0x20009074
 8004cb4:	2000075c 	.word	0x2000075c
 8004cb8:	40c00000 	.word	0x40c00000
 8004cbc:	3da3d70a 	.word	0x3da3d70a
 8004cc0:	447a0000 	.word	0x447a0000
 8004cc4:	42200000 	.word	0x42200000
 8004cc8:	40c90e56 	.word	0x40c90e56
 8004ccc:	42340000 	.word	0x42340000
 8004cd0:	c2340000 	.word	0xc2340000
 8004cd4:	43fa0000 	.word	0x43fa0000
 8004cd8:	40a00000 	.word	0x40a00000
 8004cdc:	41600000 	.word	0x41600000
 8004ce0:	d609      	bvs.n	8004cf6 <main+0x362>
 8004ce2:	4bb6      	ldr	r3, [pc, #728]	; (8004fbc <main+0x628>)
 8004ce4:	edd3 7a07 	vldr	s15, [r3, #28]
 8004ce8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004cec:	eef4 7a47 	vcmp.f32	s15, s14
 8004cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf4:	d103      	bne.n	8004cfe <main+0x36a>
 8004cf6:	4bb1      	ldr	r3, [pc, #708]	; (8004fbc <main+0x628>)
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	61da      	str	r2, [r3, #28]
  if(isnan(TEMP_MAX) || TEMP_MAX==-1)              {TEMP_MAX = 125.0f;}
 8004cfe:	4baf      	ldr	r3, [pc, #700]	; (8004fbc <main+0x628>)
 8004d00:	edd3 7a08 	vldr	s15, [r3, #32]
 8004d04:	eef4 7a67 	vcmp.f32	s15, s15
 8004d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d0c:	d609      	bvs.n	8004d22 <main+0x38e>
 8004d0e:	4bab      	ldr	r3, [pc, #684]	; (8004fbc <main+0x628>)
 8004d10:	edd3 7a08 	vldr	s15, [r3, #32]
 8004d14:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004d18:	eef4 7a47 	vcmp.f32	s15, s14
 8004d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d20:	d102      	bne.n	8004d28 <main+0x394>
 8004d22:	4ba6      	ldr	r3, [pc, #664]	; (8004fbc <main+0x628>)
 8004d24:	4aa6      	ldr	r2, [pc, #664]	; (8004fc0 <main+0x62c>)
 8004d26:	621a      	str	r2, [r3, #32]
  if(isnan(PPAIRS) || PPAIRS==-1)                  {PPAIRS = 21.0f;}
 8004d28:	4ba4      	ldr	r3, [pc, #656]	; (8004fbc <main+0x628>)
 8004d2a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004d2e:	eef4 7a67 	vcmp.f32	s15, s15
 8004d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d36:	d609      	bvs.n	8004d4c <main+0x3b8>
 8004d38:	4ba0      	ldr	r3, [pc, #640]	; (8004fbc <main+0x628>)
 8004d3a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004d3e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004d42:	eef4 7a47 	vcmp.f32	s15, s14
 8004d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d4a:	d102      	bne.n	8004d52 <main+0x3be>
 8004d4c:	4b9b      	ldr	r3, [pc, #620]	; (8004fbc <main+0x628>)
 8004d4e:	4a9d      	ldr	r2, [pc, #628]	; (8004fc4 <main+0x630>)
 8004d50:	629a      	str	r2, [r3, #40]	; 0x28

  user_config_initialize();
 8004d52:	f001 fdf3 	bl	800693c <user_config_initialize>

//  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
  printf("\r\n= = = = = Version Information = = = = =\r\n");
 8004d56:	489c      	ldr	r0, [pc, #624]	; (8004fc8 <main+0x634>)
 8004d58:	f008 f85c 	bl	800ce14 <puts>
  printf("\r\nFirmware Version:  %s\r\n", FIRMWARE_VERSION);
 8004d5c:	499b      	ldr	r1, [pc, #620]	; (8004fcc <main+0x638>)
 8004d5e:	489c      	ldr	r0, [pc, #624]	; (8004fd0 <main+0x63c>)
 8004d60:	f007 ffd2 	bl	800cd08 <iprintf>
  printf("\r\nBuild Date:  %s\r\n", FIRMWARE_DATE);
 8004d64:	499b      	ldr	r1, [pc, #620]	; (8004fd4 <main+0x640>)
 8004d66:	489c      	ldr	r0, [pc, #624]	; (8004fd8 <main+0x644>)
 8004d68:	f007 ffce 	bl	800cd08 <iprintf>
  printf("Build Time:  %s\r\n", FIRMWARE_TIME);
 8004d6c:	499b      	ldr	r1, [pc, #620]	; (8004fdc <main+0x648>)
 8004d6e:	489c      	ldr	r0, [pc, #624]	; (8004fe0 <main+0x64c>)
 8004d70:	f007 ffca 	bl	800cd08 <iprintf>
  printf("\r\nAuthor:  %s\r\n", AUTHOR_NAME);
 8004d74:	499b      	ldr	r1, [pc, #620]	; (8004fe4 <main+0x650>)
 8004d76:	489c      	ldr	r0, [pc, #624]	; (8004fe8 <main+0x654>)
 8004d78:	f007 ffc6 	bl	800cd08 <iprintf>
  printf("\r\nModification Info:  %s\r\n", MODIFICATION_INFO);
 8004d7c:	499b      	ldr	r1, [pc, #620]	; (8004fec <main+0x658>)
 8004d7e:	489c      	ldr	r0, [pc, #624]	; (8004ff0 <main+0x65c>)
 8004d80:	f007 ffc2 	bl	800cd08 <iprintf>
  printf("\r\n= = = = = Program Started = = = = =\r\n");
 8004d84:	489b      	ldr	r0, [pc, #620]	; (8004ff4 <main+0x660>)
 8004d86:	f008 f845 	bl	800ce14 <puts>
  }
  else{

  }

  init_controller_params(&controller);
 8004d8a:	489b      	ldr	r0, [pc, #620]	; (8004ff8 <main+0x664>)
 8004d8c:	f7fe f866 	bl	8002e5c <init_controller_params>

  /* calibration "encoder" zeroing */
  memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 8004d90:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8004d94:	2100      	movs	r1, #0
 8004d96:	4899      	ldr	r0, [pc, #612]	; (8004ffc <main+0x668>)
 8004d98:	f007 fb44 	bl	800c424 <memset>

  /* initialize the parameters of hall sensor */
  hall_cal.hall_input = 1;
 8004d9c:	4b98      	ldr	r3, [pc, #608]	; (8005000 <main+0x66c>)
 8004d9e:	2201      	movs	r2, #1
 8004da0:	601a      	str	r2, [r3, #0]
  hall_cal.hall_preinput = 1;
 8004da2:	4b97      	ldr	r3, [pc, #604]	; (8005000 <main+0x66c>)
 8004da4:	2201      	movs	r2, #1
 8004da6:	605a      	str	r2, [r3, #4]
  hall_cal.hall_cal_pcmd = 0;
 8004da8:	4b95      	ldr	r3, [pc, #596]	; (8005000 <main+0x66c>)
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	609a      	str	r2, [r3, #8]
  hall_cal.hall_cal_speed = 0.25; // rad/s
 8004db0:	4b93      	ldr	r3, [pc, #588]	; (8005000 <main+0x66c>)
 8004db2:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8004db6:	60da      	str	r2, [r3, #12]
  hall_cal.hall_present_pos = 0; // calibrate the previous position of encoder
 8004db8:	4b91      	ldr	r3, [pc, #580]	; (8005000 <main+0x66c>)
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	611a      	str	r2, [r3, #16]
  hall_cal.hall_in_pos = 0;  // read the position from 1 to 0 (magnet enters the area of hall sensor)
 8004dc0:	4b8f      	ldr	r3, [pc, #572]	; (8005000 <main+0x66c>)
 8004dc2:	f04f 0200 	mov.w	r2, #0
 8004dc6:	615a      	str	r2, [r3, #20]
  hall_cal.hall_out_pos = 0; // read the position from 0 to 1 (magnet exits the area of hall sensor)
 8004dc8:	4b8d      	ldr	r3, [pc, #564]	; (8005000 <main+0x66c>)
 8004dca:	f04f 0200 	mov.w	r2, #0
 8004dce:	619a      	str	r2, [r3, #24]
  hall_cal.hall_mid_pos = 0;
 8004dd0:	4b8b      	ldr	r3, [pc, #556]	; (8005000 <main+0x66c>)
 8004dd2:	f04f 0200 	mov.w	r2, #0
 8004dd6:	61da      	str	r2, [r3, #28]
  hall_cal. hall_cal_offset = 0; // rad
 8004dd8:	4b89      	ldr	r3, [pc, #548]	; (8005000 <main+0x66c>)
 8004dda:	f04f 0200 	mov.w	r2, #0
 8004dde:	621a      	str	r2, [r3, #32]
  hall_cal.hall_cal_count = 0;
 8004de0:	4b87      	ldr	r3, [pc, #540]	; (8005000 <main+0x66c>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	625a      	str	r2, [r3, #36]	; 0x24
  hall_cal.hall_cal_state = 0;
 8004de6:	4b86      	ldr	r3, [pc, #536]	; (8005000 <main+0x66c>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	629a      	str	r2, [r3, #40]	; 0x28

  /* commutation encoder setup */
  comm_encoder.m_zero = M_ZERO;
 8004dec:	4b85      	ldr	r3, [pc, #532]	; (8005004 <main+0x670>)
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	4a85      	ldr	r2, [pc, #532]	; (8005008 <main+0x674>)
 8004df2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  comm_encoder.e_zero = E_ZERO;
 8004df6:	4b83      	ldr	r3, [pc, #524]	; (8005004 <main+0x670>)
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	4a83      	ldr	r2, [pc, #524]	; (8005008 <main+0x674>)
 8004dfc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  comm_encoder.ppairs = PPAIRS;
 8004e00:	4b6e      	ldr	r3, [pc, #440]	; (8004fbc <main+0x628>)
 8004e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e04:	4a80      	ldr	r2, [pc, #512]	; (8005008 <main+0x674>)
 8004e06:	6693      	str	r3, [r2, #104]	; 0x68

  if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
 8004e08:	4b7f      	ldr	r3, [pc, #508]	; (8005008 <main+0x674>)
 8004e0a:	4a7e      	ldr	r2, [pc, #504]	; (8005004 <main+0x670>)
 8004e0c:	33dc      	adds	r3, #220	; 0xdc
 8004e0e:	f102 011c 	add.w	r1, r2, #28
 8004e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e16:	4618      	mov	r0, r3
 8004e18:	f007 faf6 	bl	800c408 <memcpy>
  else{memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));}
  ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 8004e1c:	2164      	movs	r1, #100	; 0x64
 8004e1e:	487a      	ldr	r0, [pc, #488]	; (8005008 <main+0x674>)
 8004e20:	f000 fb26 	bl	8005470 <ps_warmup>

  //for(int i = 0; i<128; i++){printf("%d\r\n", comm_encoder.offset_lut[i]);}

  /* Turn on ADCs */
  HAL_ADC_Start(&hadc1);
 8004e24:	4879      	ldr	r0, [pc, #484]	; (800500c <main+0x678>)
 8004e26:	f002 fa71 	bl	800730c <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8004e2a:	4879      	ldr	r0, [pc, #484]	; (8005010 <main+0x67c>)
 8004e2c:	f002 fa6e 	bl	800730c <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 8004e30:	4878      	ldr	r0, [pc, #480]	; (8005014 <main+0x680>)
 8004e32:	f002 fa6b 	bl	800730c <HAL_ADC_Start>

  /* DRV8323 setup */
  DRV_CS_HIGH; 	// CS high
 8004e36:	2201      	movs	r2, #1
 8004e38:	2110      	movs	r1, #16
 8004e3a:	4877      	ldr	r0, [pc, #476]	; (8005018 <main+0x684>)
 8004e3c:	f003 ffda 	bl	8008df4 <HAL_GPIO_WritePin>
  GPIO_ENABLE;   // GPIO ENABLE_PIN HIGH
 8004e40:	2201      	movs	r2, #1
 8004e42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e46:	4874      	ldr	r0, [pc, #464]	; (8005018 <main+0x684>)
 8004e48:	f003 ffd4 	bl	8008df4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8004e4c:	2001      	movs	r0, #1
 8004e4e:	f002 f9f5 	bl	800723c <HAL_Delay>
  drv_calibrate(drv);
 8004e52:	4b72      	ldr	r3, [pc, #456]	; (800501c <main+0x688>)
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	2100      	movs	r1, #0
 8004e58:	4611      	mov	r1, r2
 8004e5a:	889a      	ldrh	r2, [r3, #4]
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f362 030f 	bfi	r3, r2, #0, #16
 8004e62:	4608      	mov	r0, r1
 8004e64:	4619      	mov	r1, r3
 8004e66:	f7fd fb18 	bl	800249a <drv_calibrate>
  HAL_Delay(1);
 8004e6a:	2001      	movs	r0, #1
 8004e6c:	f002 f9e6 	bl	800723c <HAL_Delay>
  drv_write_DCR(drv, 0x0, 0x0, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 8004e70:	4b6a      	ldr	r3, [pc, #424]	; (800501c <main+0x688>)
 8004e72:	2201      	movs	r2, #1
 8004e74:	9206      	str	r2, [sp, #24]
 8004e76:	2200      	movs	r2, #0
 8004e78:	9205      	str	r2, [sp, #20]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	9204      	str	r2, [sp, #16]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	9203      	str	r2, [sp, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	9202      	str	r2, [sp, #8]
 8004e86:	2201      	movs	r2, #1
 8004e88:	9201      	str	r2, [sp, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	9200      	str	r2, [sp, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	2000      	movs	r0, #0
 8004e92:	4610      	mov	r0, r2
 8004e94:	889b      	ldrh	r3, [r3, #4]
 8004e96:	2100      	movs	r1, #0
 8004e98:	f363 010f 	bfi	r1, r3, #0, #16
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f7fd fa15 	bl	80022ce <drv_write_DCR>
  HAL_Delay(1);
 8004ea4:	2001      	movs	r0, #1
 8004ea6:	f002 f9c9 	bl	800723c <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x0, 0x0, 0x0, SEN_LVL_1_0);
 8004eaa:	4b5c      	ldr	r3, [pc, #368]	; (800501c <main+0x688>)
 8004eac:	2203      	movs	r2, #3
 8004eae:	9206      	str	r2, [sp, #24]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	9205      	str	r2, [sp, #20]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	9204      	str	r2, [sp, #16]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	9203      	str	r2, [sp, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	9202      	str	r2, [sp, #8]
 8004ec0:	2203      	movs	r2, #3
 8004ec2:	9201      	str	r2, [sp, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	9200      	str	r2, [sp, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	2000      	movs	r0, #0
 8004ecc:	4610      	mov	r0, r2
 8004ece:	889b      	ldrh	r3, [r3, #4]
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	f363 010f 	bfi	r1, r3, #0, #16
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f7fd fa68 	bl	80023ae <drv_write_CSACR>
  HAL_Delay(1);
 8004ede:	2001      	movs	r0, #1
 8004ee0:	f002 f9ac 	bl	800723c <HAL_Delay>
  drv_write_OCPCR(drv, TRETRY_4MS, DEADTIME_200NS, OCP_RETRY, OCP_DEG_8US, VDS_LVL_1_88);
 8004ee4:	4b4d      	ldr	r3, [pc, #308]	; (800501c <main+0x688>)
 8004ee6:	220f      	movs	r2, #15
 8004ee8:	9202      	str	r2, [sp, #8]
 8004eea:	2203      	movs	r2, #3
 8004eec:	9201      	str	r2, [sp, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	9200      	str	r2, [sp, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	4610      	mov	r0, r2
 8004ef8:	889b      	ldrh	r3, [r3, #4]
 8004efa:	2100      	movs	r1, #0
 8004efc:	f363 010f 	bfi	r1, r3, #0, #16
 8004f00:	2302      	movs	r3, #2
 8004f02:	2200      	movs	r2, #0
 8004f04:	f7fd fa25 	bl	8002352 <drv_write_OCPCR>
  zero_current(&controller);
 8004f08:	483b      	ldr	r0, [pc, #236]	; (8004ff8 <main+0x664>)
 8004f0a:	f7fd ff63 	bl	8002dd4 <zero_current>
  drv_enable_gd(drv);
 8004f0e:	4b43      	ldr	r3, [pc, #268]	; (800501c <main+0x688>)
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	2100      	movs	r1, #0
 8004f14:	4611      	mov	r1, r2
 8004f16:	889a      	ldrh	r2, [r3, #4]
 8004f18:	2300      	movs	r3, #0
 8004f1a:	f362 030f 	bfi	r3, r2, #0, #16
 8004f1e:	4608      	mov	r0, r1
 8004f20:	4619      	mov	r1, r3
 8004f22:	f7fd fa86 	bl	8002432 <drv_enable_gd>
  GPIO_DISABLE;
 8004f26:	2200      	movs	r2, #0
 8004f28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f2c:	483a      	ldr	r0, [pc, #232]	; (8005018 <main+0x684>)
 8004f2e:	f003 ff61 	bl	8008df4 <HAL_GPIO_WritePin>
//  printf("ADC A OFFSET: %d     ADC B OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset);

  /* Turn on PWM */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004f32:	2100      	movs	r1, #0
 8004f34:	483a      	ldr	r0, [pc, #232]	; (8005020 <main+0x68c>)
 8004f36:	f005 f941 	bl	800a1bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8004f3a:	2104      	movs	r1, #4
 8004f3c:	4838      	ldr	r0, [pc, #224]	; (8005020 <main+0x68c>)
 8004f3e:	f005 f93d 	bl	800a1bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8004f42:	2108      	movs	r1, #8
 8004f44:	4836      	ldr	r0, [pc, #216]	; (8005020 <main+0x68c>)
 8004f46:	f005 f939 	bl	800a1bc <HAL_TIM_PWM_Start>

  /* CAN setup */
  can_rx_init(&can_rx);
 8004f4a:	4836      	ldr	r0, [pc, #216]	; (8005024 <main+0x690>)
 8004f4c:	f7fc fe74 	bl	8001c38 <can_rx_init>
  can_tx_init(&can_tx);
 8004f50:	4835      	ldr	r0, [pc, #212]	; (8005028 <main+0x694>)
 8004f52:	f7fc fea1 	bl	8001c98 <can_tx_init>
  HAL_CAN_Start(&CAN_H); //start CAN
 8004f56:	4835      	ldr	r0, [pc, #212]	; (800502c <main+0x698>)
 8004f58:	f002 ff92 	bl	8007e80 <HAL_CAN_Start>
  //__HAL_CAN_ENABLE_IT(&CAN_H, CAN_IT_RX_FIFO0_MSG_PENDING); // Start can interrupt

  /* Set Interrupt Priorities */
  HAL_NVIC_SetPriority(PWM_ISR, 0x0,0x0); // commutation > communication
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2100      	movs	r1, #0
 8004f60:	2019      	movs	r0, #25
 8004f62:	f003 fcd2 	bl	800890a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(CAN_ISR, 0x01, 0x01);
 8004f66:	2201      	movs	r2, #1
 8004f68:	2101      	movs	r1, #1
 8004f6a:	2014      	movs	r0, #20
 8004f6c:	f003 fccd 	bl	800890a <HAL_NVIC_SetPriority>

  /* Start the FSM */
  state.state = MENU_MODE;
 8004f70:	4b2f      	ldr	r3, [pc, #188]	; (8005030 <main+0x69c>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	701a      	strb	r2, [r3, #0]
  state.next_state = MENU_MODE;
 8004f76:	4b2e      	ldr	r3, [pc, #184]	; (8005030 <main+0x69c>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	705a      	strb	r2, [r3, #1]
  state.ready = 1;
 8004f7c:	4b2c      	ldr	r3, [pc, #176]	; (8005030 <main+0x69c>)
 8004f7e:	2201      	movs	r2, #1
 8004f80:	70da      	strb	r2, [r3, #3]
  state.print_uart_msg = 1;
 8004f82:	4b2b      	ldr	r3, [pc, #172]	; (8005030 <main+0x69c>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	711a      	strb	r2, [r3, #4]
  enter_menu_state();
 8004f88:	f7fe ffe6 	bl	8003f58 <enter_menu_state>


  /* Turn on interrupts */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	4929      	ldr	r1, [pc, #164]	; (8005034 <main+0x6a0>)
 8004f90:	4829      	ldr	r0, [pc, #164]	; (8005038 <main+0x6a4>)
 8004f92:	f006 f968 	bl	800b266 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8004f96:	4822      	ldr	r0, [pc, #136]	; (8005020 <main+0x68c>)
 8004f98:	f005 f846 	bl	800a028 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(100);
 8004f9c:	2064      	movs	r0, #100	; 0x64
 8004f9e:	f002 f94d 	bl	800723c <HAL_Delay>
	  drv_print_faults(drv);
 8004fa2:	4b1e      	ldr	r3, [pc, #120]	; (800501c <main+0x688>)
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	4611      	mov	r1, r2
 8004faa:	889a      	ldrh	r2, [r3, #4]
 8004fac:	2300      	movs	r3, #0
 8004fae:	f362 030f 	bfi	r3, r2, #0, #16
 8004fb2:	4608      	mov	r0, r1
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	f7fd fa83 	bl	80024c0 <drv_print_faults>
	  HAL_Delay(100);
 8004fba:	e7ef      	b.n	8004f9c <main+0x608>
 8004fbc:	2000075c 	.word	0x2000075c
 8004fc0:	42fa0000 	.word	0x42fa0000
 8004fc4:	41a80000 	.word	0x41a80000
 8004fc8:	08011198 	.word	0x08011198
 8004fcc:	080111c4 	.word	0x080111c4
 8004fd0:	080111cc 	.word	0x080111cc
 8004fd4:	080111e8 	.word	0x080111e8
 8004fd8:	080111f4 	.word	0x080111f4
 8004fdc:	08011208 	.word	0x08011208
 8004fe0:	08011214 	.word	0x08011214
 8004fe4:	08011228 	.word	0x08011228
 8004fe8:	08011244 	.word	0x08011244
 8004fec:	08011254 	.word	0x08011254
 8004ff0:	08011278 	.word	0x08011278
 8004ff4:	08011294 	.word	0x08011294
 8004ff8:	2000085c 	.word	0x2000085c
 8004ffc:	20008d94 	.word	0x20008d94
 8005000:	20000708 	.word	0x20000708
 8005004:	20009074 	.word	0x20009074
 8005008:	20000428 	.word	0x20000428
 800500c:	20000370 	.word	0x20000370
 8005010:	20000328 	.word	0x20000328
 8005014:	200003b8 	.word	0x200003b8
 8005018:	40020000 	.word	0x40020000
 800501c:	20009498 	.word	0x20009498
 8005020:	200095d0 	.word	0x200095d0
 8005024:	200094a0 	.word	0x200094a0
 8005028:	20009474 	.word	0x20009474
 800502c:	20000400 	.word	0x20000400
 8005030:	20000738 	.word	0x20000738
 8005034:	20000734 	.word	0x20000734
 8005038:	20009618 	.word	0x20009618

0800503c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b094      	sub	sp, #80	; 0x50
 8005040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005042:	f107 031c 	add.w	r3, r7, #28
 8005046:	2234      	movs	r2, #52	; 0x34
 8005048:	2100      	movs	r1, #0
 800504a:	4618      	mov	r0, r3
 800504c:	f007 f9ea 	bl	800c424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005050:	f107 0308 	add.w	r3, r7, #8
 8005054:	2200      	movs	r2, #0
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	605a      	str	r2, [r3, #4]
 800505a:	609a      	str	r2, [r3, #8]
 800505c:	60da      	str	r2, [r3, #12]
 800505e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005060:	2300      	movs	r3, #0
 8005062:	607b      	str	r3, [r7, #4]
 8005064:	4b2c      	ldr	r3, [pc, #176]	; (8005118 <SystemClock_Config+0xdc>)
 8005066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005068:	4a2b      	ldr	r2, [pc, #172]	; (8005118 <SystemClock_Config+0xdc>)
 800506a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800506e:	6413      	str	r3, [r2, #64]	; 0x40
 8005070:	4b29      	ldr	r3, [pc, #164]	; (8005118 <SystemClock_Config+0xdc>)
 8005072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005078:	607b      	str	r3, [r7, #4]
 800507a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800507c:	2300      	movs	r3, #0
 800507e:	603b      	str	r3, [r7, #0]
 8005080:	4b26      	ldr	r3, [pc, #152]	; (800511c <SystemClock_Config+0xe0>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a25      	ldr	r2, [pc, #148]	; (800511c <SystemClock_Config+0xe0>)
 8005086:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	4b23      	ldr	r3, [pc, #140]	; (800511c <SystemClock_Config+0xe0>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005094:	603b      	str	r3, [r7, #0]
 8005096:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005098:	2301      	movs	r3, #1
 800509a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800509c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80050a2:	2302      	movs	r3, #2
 80050a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80050a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80050aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80050ac:	2304      	movs	r3, #4
 80050ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80050b0:	23b4      	movs	r3, #180	; 0xb4
 80050b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80050b4:	2302      	movs	r3, #2
 80050b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80050b8:	2302      	movs	r3, #2
 80050ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80050bc:	2302      	movs	r3, #2
 80050be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80050c0:	f107 031c 	add.w	r3, r7, #28
 80050c4:	4618      	mov	r0, r3
 80050c6:	f004 f9cb 	bl	8009460 <HAL_RCC_OscConfig>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80050d0:	f000 f826 	bl	8005120 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80050d4:	f003 fea8 	bl	8008e28 <HAL_PWREx_EnableOverDrive>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80050de:	f000 f81f 	bl	8005120 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80050e2:	230f      	movs	r3, #15
 80050e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80050e6:	2302      	movs	r3, #2
 80050e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80050ea:	2300      	movs	r3, #0
 80050ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80050ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80050f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80050f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050f8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80050fa:	f107 0308 	add.w	r3, r7, #8
 80050fe:	2105      	movs	r1, #5
 8005100:	4618      	mov	r0, r3
 8005102:	f003 fee1 	bl	8008ec8 <HAL_RCC_ClockConfig>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800510c:	f000 f808 	bl	8005120 <Error_Handler>
  }
}
 8005110:	bf00      	nop
 8005112:	3750      	adds	r7, #80	; 0x50
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	40023800 	.word	0x40023800
 800511c:	40007000 	.word	0x40007000

08005120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005124:	bf00      	nop
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <fast_fmaxf>:

#include "math_ops.h"
#include "lookup.h"


float fast_fmaxf(float x, float y){
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	ed87 0a01 	vstr	s0, [r7, #4]
 8005138:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 800513c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005140:	edd7 7a00 	vldr	s15, [r7]
 8005144:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800514c:	dd01      	ble.n	8005152 <fast_fmaxf+0x24>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	e000      	b.n	8005154 <fast_fmaxf+0x26>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	ee07 3a90 	vmov	s15, r3
    }
 8005158:	eeb0 0a67 	vmov.f32	s0, s15
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <fast_fminf>:

float fast_fminf(float x, float y){
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	ed87 0a01 	vstr	s0, [r7, #4]
 8005170:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 8005174:	ed97 7a01 	vldr	s14, [r7, #4]
 8005178:	edd7 7a00 	vldr	s15, [r7]
 800517c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005184:	d501      	bpl.n	800518a <fast_fminf+0x24>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	e000      	b.n	800518c <fast_fminf+0x26>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	ee07 3a90 	vmov	s15, r3
    }
 8005190:	eeb0 0a67 	vmov.f32	s0, s15
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <fmaxf3>:

float fmaxf3(float x, float y, float z){
 800519e:	b480      	push	{r7}
 80051a0:	b085      	sub	sp, #20
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	ed87 0a03 	vstr	s0, [r7, #12]
 80051a8:	edc7 0a02 	vstr	s1, [r7, #8]
 80051ac:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 80051b0:	ed97 7a03 	vldr	s14, [r7, #12]
 80051b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80051b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c0:	dd0c      	ble.n	80051dc <fmaxf3+0x3e>
 80051c2:	ed97 7a03 	vldr	s14, [r7, #12]
 80051c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80051ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d2:	dd01      	ble.n	80051d8 <fmaxf3+0x3a>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	e00d      	b.n	80051f4 <fmaxf3+0x56>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	e00b      	b.n	80051f4 <fmaxf3+0x56>
 80051dc:	ed97 7a02 	vldr	s14, [r7, #8]
 80051e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80051e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ec:	dd01      	ble.n	80051f2 <fmaxf3+0x54>
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	e000      	b.n	80051f4 <fmaxf3+0x56>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	ee07 3a90 	vmov	s15, r3
    }
 80051f8:	eeb0 0a67 	vmov.f32	s0, s15
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <fminf3>:

float fminf3(float x, float y, float z){
 8005206:	b480      	push	{r7}
 8005208:	b085      	sub	sp, #20
 800520a:	af00      	add	r7, sp, #0
 800520c:	ed87 0a03 	vstr	s0, [r7, #12]
 8005210:	edc7 0a02 	vstr	s1, [r7, #8]
 8005214:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 8005218:	ed97 7a03 	vldr	s14, [r7, #12]
 800521c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005228:	d50c      	bpl.n	8005244 <fminf3+0x3e>
 800522a:	ed97 7a03 	vldr	s14, [r7, #12]
 800522e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005232:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800523a:	d501      	bpl.n	8005240 <fminf3+0x3a>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	e00d      	b.n	800525c <fminf3+0x56>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	e00b      	b.n	800525c <fminf3+0x56>
 8005244:	ed97 7a02 	vldr	s14, [r7, #8]
 8005248:	edd7 7a01 	vldr	s15, [r7, #4]
 800524c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005254:	d501      	bpl.n	800525a <fminf3+0x54>
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	e000      	b.n	800525c <fminf3+0x56>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	ee07 3a90 	vmov	s15, r3
    }
 8005260:	eeb0 0a67 	vmov.f32	s0, s15
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <limit_norm>:
float roundf(float x){
    /// Returns nearest integer ///
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
 800526e:	b580      	push	{r7, lr}
 8005270:	b086      	sub	sp, #24
 8005272:	af00      	add	r7, sp, #0
 8005274:	60f8      	str	r0, [r7, #12]
 8005276:	60b9      	str	r1, [r7, #8]
 8005278:	ed87 0a01 	vstr	s0, [r7, #4]
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	ed93 7a00 	vldr	s14, [r3]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	edd3 7a00 	vldr	s15, [r3]
 8005288:	ee27 7a27 	vmul.f32	s14, s14, s15
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	edd3 6a00 	vldr	s13, [r3]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	edd3 7a00 	vldr	s15, [r3]
 8005298:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800529c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052a0:	eeb0 0a67 	vmov.f32	s0, s15
 80052a4:	f006 fe4e 	bl	800bf44 <sqrtf>
 80052a8:	ed87 0a05 	vstr	s0, [r7, #20]
    if(norm > limit){
 80052ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80052b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80052b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052bc:	dc00      	bgt.n	80052c0 <limit_norm+0x52>
        *x = *x * limit/norm;
        *y = *y * limit/norm;
        }
    }
 80052be:	e01b      	b.n	80052f8 <limit_norm+0x8a>
        *x = *x * limit/norm;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	ed93 7a00 	vldr	s14, [r3]
 80052c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80052ca:	ee67 6a27 	vmul.f32	s13, s14, s15
 80052ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80052d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	edc3 7a00 	vstr	s15, [r3]
        *y = *y * limit/norm;
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	ed93 7a00 	vldr	s14, [r3]
 80052e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80052e6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80052ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80052ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	edc3 7a00 	vstr	s15, [r3]
    }
 80052f8:	bf00      	nop
 80052fa:	3718      	adds	r7, #24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <float_to_uint>:
    
void limit(float *x, float min, float max){
    *x = fast_fmaxf(fast_fminf(*x, max), min);
    }

int float_to_uint(float x, float x_min, float x_max, int bits){
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	ed87 0a03 	vstr	s0, [r7, #12]
 800530a:	edc7 0a02 	vstr	s1, [r7, #8]
 800530e:	ed87 1a01 	vstr	s2, [r7, #4]
 8005312:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 8005314:	ed97 7a01 	vldr	s14, [r7, #4]
 8005318:	edd7 7a02 	vldr	s15, [r7, #8]
 800531c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005320:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 8005328:	ed97 7a03 	vldr	s14, [r7, #12]
 800532c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005330:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005334:	2201      	movs	r2, #1
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	fa02 f303 	lsl.w	r3, r2, r3
 800533c:	3b01      	subs	r3, #1
 800533e:	ee07 3a90 	vmov	s15, r3
 8005342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005346:	ee67 6a27 	vmul.f32	s13, s14, s15
 800534a:	ed97 7a05 	vldr	s14, [r7, #20]
 800534e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005352:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005356:	ee17 3a90 	vmov	r3, s15
    }
 800535a:	4618      	mov	r0, r3
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <uint_to_float>:
    
    
float uint_to_float(int x_int, float x_min, float x_max, int bits){
 8005366:	b480      	push	{r7}
 8005368:	b087      	sub	sp, #28
 800536a:	af00      	add	r7, sp, #0
 800536c:	60f8      	str	r0, [r7, #12]
 800536e:	ed87 0a02 	vstr	s0, [r7, #8]
 8005372:	edc7 0a01 	vstr	s1, [r7, #4]
 8005376:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 8005378:	ed97 7a01 	vldr	s14, [r7, #4]
 800537c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005380:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005384:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	ee07 3a90 	vmov	s15, r3
 8005392:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005396:	edd7 7a05 	vldr	s15, [r7, #20]
 800539a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800539e:	2201      	movs	r2, #1
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	fa02 f303 	lsl.w	r3, r2, r3
 80053a6:	3b01      	subs	r3, #1
 80053a8:	ee07 3a90 	vmov	s15, r3
 80053ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80053b8:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 80053bc:	eeb0 0a67 	vmov.f32	s0, s15
 80053c0:	371c      	adds	r7, #28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
	...

080053cc <sin_lut>:

float sin_lut(float theta){
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWO_PI_F);
 80053d6:	eddf 0a17 	vldr	s1, [pc, #92]	; 8005434 <sin_lut+0x68>
 80053da:	ed97 0a01 	vldr	s0, [r7, #4]
 80053de:	f006 fd85 	bl	800beec <fmodf>
 80053e2:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = theta<0 ? theta + TWO_PI_F : theta;
 80053e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80053ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053f2:	d506      	bpl.n	8005402 <sin_lut+0x36>
 80053f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80053f8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005434 <sin_lut+0x68>
 80053fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005400:	e001      	b.n	8005406 <sin_lut+0x3a>
 8005402:	edd7 7a01 	vldr	s15, [r7, #4]
 8005406:	edc7 7a01 	vstr	s15, [r7, #4]

	return sin_tab[(int) (LUT_MULT*theta)];
 800540a:	edd7 7a01 	vldr	s15, [r7, #4]
 800540e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8005438 <sin_lut+0x6c>
 8005412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800541a:	ee17 3a90 	vmov	r3, s15
 800541e:	4a07      	ldr	r2, [pc, #28]	; (800543c <sin_lut+0x70>)
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	ee07 3a90 	vmov	s15, r3
}
 800542a:	eeb0 0a67 	vmov.f32	s0, s15
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	40c90fdb 	.word	0x40c90fdb
 8005438:	42a2f983 	.word	0x42a2f983
 800543c:	080114a8 	.word	0x080114a8

08005440 <cos_lut>:

float cos_lut(float theta){
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lut(PI_OVER_2_F - theta);
 800544a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800546c <cos_lut+0x2c>
 800544e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005452:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005456:	eeb0 0a67 	vmov.f32	s0, s15
 800545a:	f7ff ffb7 	bl	80053cc <sin_lut>
 800545e:	eef0 7a40 	vmov.f32	s15, s0
}
 8005462:	eeb0 0a67 	vmov.f32	s0, s15
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	3fc90fdb 	.word	0x3fc90fdb

08005470 <ps_warmup>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void ps_warmup(EncoderStruct * encoder, int n){
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af02      	add	r7, sp, #8
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
	for(int i = 0; i<n; i++){
 800547a:	2300      	movs	r3, #0
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	e021      	b.n	80054c4 <ps_warmup+0x54>
		encoder->spi_tx_word = 0x0000;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	801a      	strh	r2, [r3, #0]
		ENC_CS_LOW; 	// CS low
 8005486:	2200      	movs	r2, #0
 8005488:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800548c:	4812      	ldr	r0, [pc, #72]	; (80054d8 <ps_warmup+0x68>)
 800548e:	f003 fcb1 	bl	8008df4 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	1c9a      	adds	r2, r3, #2
 8005498:	2364      	movs	r3, #100	; 0x64
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	2301      	movs	r3, #1
 800549e:	480f      	ldr	r0, [pc, #60]	; (80054dc <ps_warmup+0x6c>)
 80054a0:	f004 fb05 	bl	8009aae <HAL_SPI_TransmitReceive>
		while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 80054a4:	bf00      	nop
 80054a6:	4b0d      	ldr	r3, [pc, #52]	; (80054dc <ps_warmup+0x6c>)
 80054a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d0f9      	beq.n	80054a6 <ps_warmup+0x36>
		ENC_CS_HIGH; 	// CS high
 80054b2:	2201      	movs	r2, #1
 80054b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054b8:	4807      	ldr	r0, [pc, #28]	; (80054d8 <ps_warmup+0x68>)
 80054ba:	f003 fc9b 	bl	8008df4 <HAL_GPIO_WritePin>
	for(int i = 0; i<n; i++){
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3301      	adds	r3, #1
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	dbd9      	blt.n	8005480 <ps_warmup+0x10>
	}
}
 80054cc:	bf00      	nop
 80054ce:	bf00      	nop
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	40020000 	.word	0x40020000
 80054dc:	20009520 	.word	0x20009520

080054e0 <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08c      	sub	sp, #48	; 0x30
 80054e4:	af02      	add	r7, sp, #8
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	ed87 0a00 	vstr	s0, [r7]
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	609a      	str	r2, [r3, #8]
	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
 80054f4:	2313      	movs	r3, #19
 80054f6:	627b      	str	r3, [r7, #36]	; 0x24
 80054f8:	e011      	b.n	800551e <ps_sample+0x3e>
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	3b01      	subs	r3, #1
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	3302      	adds	r3, #2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	3304      	adds	r3, #4
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	6879      	ldr	r1, [r7, #4]
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	3302      	adds	r3, #2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	440b      	add	r3, r1
 8005514:	3304      	adds	r3, #4
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	3b01      	subs	r3, #1
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	2b00      	cmp	r3, #0
 8005522:	dcea      	bgt.n	80054fa <ps_sample+0x1a>
	//for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->count_buff[i] = encoder->count_buff[i-1];}
	//memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float)); // this is much slower for some reason

	/* SPI read/write */
	encoder->spi_tx_word = ENC_READ_WORD;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	801a      	strh	r2, [r3, #0]
	ENC_CS_LOW; 	// CS low
 800552a:	2200      	movs	r2, #0
 800552c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005530:	48ac      	ldr	r0, [pc, #688]	; (80057e4 <ps_sample+0x304>)
 8005532:	f003 fc5f 	bl	8008df4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 8005536:	6879      	ldr	r1, [r7, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	1c9a      	adds	r2, r3, #2
 800553c:	2364      	movs	r3, #100	; 0x64
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	2301      	movs	r3, #1
 8005542:	48a9      	ldr	r0, [pc, #676]	; (80057e8 <ps_sample+0x308>)
 8005544:	f004 fab3 	bl	8009aae <HAL_SPI_TransmitReceive>
	while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8005548:	bf00      	nop
 800554a:	4ba7      	ldr	r3, [pc, #668]	; (80057e8 <ps_sample+0x308>)
 800554c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d0f9      	beq.n	800554a <ps_sample+0x6a>
	ENC_CS_HIGH; 	// CS high
 8005556:	2201      	movs	r2, #1
 8005558:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800555c:	48a1      	ldr	r0, [pc, #644]	; (80057e4 <ps_sample+0x304>)
 800555e:	f003 fc49 	bl	8008df4 <HAL_GPIO_WritePin>
	encoder->raw = encoder ->spi_rx_word;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	885b      	ldrh	r3, [r3, #2]
 8005566:	461a      	mov	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	675a      	str	r2, [r3, #116]	; 0x74

	/* Linearization */
	int off_1 = encoder->offset_lut[(encoder->raw)>>9];				// lookup table lower entry
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005570:	125b      	asrs	r3, r3, #9
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	3336      	adds	r3, #54	; 0x36
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	61fb      	str	r3, [r7, #28]
	int off_2 = encoder->offset_lut[((encoder->raw>>9)+1)%128];		// lookup table higher entry
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005582:	125b      	asrs	r3, r3, #9
 8005584:	3301      	adds	r3, #1
 8005586:	425a      	negs	r2, r3
 8005588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800558c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005590:	bf58      	it	pl
 8005592:	4253      	negpl	r3, r2
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	3336      	adds	r3, #54	; 0x36
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	61bb      	str	r3, [r7, #24]
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>9)<<9))>>9);     // Interpolate between lookup table entries
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80055aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055ae:	fb02 f303 	mul.w	r3, r2, r3
 80055b2:	125b      	asrs	r3, r3, #9
 80055b4:	69fa      	ldr	r2, [r7, #28]
 80055b6:	4413      	add	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]
	encoder->count = encoder->raw + off_interp;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	441a      	add	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	679a      	str	r2, [r3, #120]	; 0x78


	/* Real angles in radians */
	encoder->angle_singleturn = ((float)(encoder->count-M_ZERO))/((float)ENC_CPR);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80055ca:	4b88      	ldr	r3, [pc, #544]	; (80057ec <ps_sample+0x30c>)
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	ee07 3a90 	vmov	s15, r3
 80055d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055d8:	eddf 6a85 	vldr	s13, [pc, #532]	; 80057f0 <ps_sample+0x310>
 80055dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	edc3 7a01 	vstr	s15, [r3, #4]
	int int_angle = encoder->angle_singleturn;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80055ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055f0:	ee17 3a90 	vmov	r3, s15
 80055f4:	613b      	str	r3, [r7, #16]
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	ee07 3a90 	vmov	s15, r3
 8005602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005606:	ee77 7a67 	vsub.f32	s15, s14, s15
 800560a:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 80057f4 <ps_sample+0x314>
 800560e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	edc3 7a01 	vstr	s15, [r3, #4]
	//encoder->angle_singleturn = TWO_PI_F*fmodf(((float)(encoder->count-M_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	edd3 7a01 	vldr	s15, [r3, #4]
 800561e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005626:	d507      	bpl.n	8005638 <ps_sample+0x158>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	edd3 7a01 	vldr	s15, [r3, #4]
 800562e:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80057f4 <ps_sample+0x314>
 8005632:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005636:	e002      	b.n	800563e <ps_sample+0x15e>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	edd3 7a01 	vldr	s15, [r3, #4]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	edc3 7a01 	vstr	s15, [r3, #4]

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800564e:	4b67      	ldr	r3, [pc, #412]	; (80057ec <ps_sample+0x30c>)
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	ee07 3a90 	vmov	s15, r3
 8005658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800565c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005660:	eddf 6a63 	vldr	s13, [pc, #396]	; 80057f0 <ps_sample+0x310>
 8005664:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	int_angle = (int)encoder->elec_angle;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8005674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005678:	ee17 3a90 	vmov	r3, s15
 800567c:	613b      	str	r3, [r7, #16]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	ee07 3a90 	vmov	s15, r3
 800568a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800568e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005692:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80057f4 <ps_sample+0x314>
 8005696:	ee67 7a87 	vmul.f32	s15, s15, s14
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	//encoder->elec_angle = TWO_PI_F*fmodf((encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80056a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80056aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ae:	d507      	bpl.n	80056c0 <ps_sample+0x1e0>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80056b6:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80057f4 <ps_sample+0x314>
 80056ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056be:	e002      	b.n	80056c6 <ps_sample+0x1e6>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	/* Rollover */
	int rollover = 0;
 80056cc:	2300      	movs	r3, #0
 80056ce:	623b      	str	r3, [r7, #32]
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	ed93 7a01 	vldr	s14, [r3, #4]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80056dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056e0:	edc7 7a03 	vstr	s15, [r7, #12]
	if(angle_diff > PI_F){rollover = -1;}
 80056e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80056e8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80057f8 <ps_sample+0x318>
 80056ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056f4:	dd03      	ble.n	80056fe <ps_sample+0x21e>
 80056f6:	f04f 33ff 	mov.w	r3, #4294967295
 80056fa:	623b      	str	r3, [r7, #32]
 80056fc:	e00a      	b.n	8005714 <ps_sample+0x234>
	else if(angle_diff < -PI_F){rollover = 1;}
 80056fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8005702:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80057fc <ps_sample+0x31c>
 8005706:	eef4 7ac7 	vcmpe.f32	s15, s14
 800570a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800570e:	d501      	bpl.n	8005714 <ps_sample+0x234>
 8005710:	2301      	movs	r3, #1
 8005712:	623b      	str	r3, [r7, #32]
	encoder->turns += rollover;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	441a      	add	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if(!encoder->first_sample){
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 32dc 	ldrb.w	r3, [r3, #732]	; 0x2dc
 800572a:	2b00      	cmp	r3, #0
 800572c:	d125      	bne.n	800577a <ps_sample+0x29a>
		encoder->turns = 0;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		if(encoder->angle_singleturn > PI_OVER_2_F){encoder->turns = -1;}
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	edd3 7a01 	vldr	s15, [r3, #4]
 800573c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005800 <ps_sample+0x320>
 8005740:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005748:	dd05      	ble.n	8005756 <ps_sample+0x276>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f04f 32ff 	mov.w	r2, #4294967295
 8005750:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005754:	e00d      	b.n	8005772 <ps_sample+0x292>
		else if(encoder->angle_singleturn < -PI_OVER_2_F){encoder->turns = 1;}
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	edd3 7a01 	vldr	s15, [r3, #4]
 800575c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8005804 <ps_sample+0x324>
 8005760:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005768:	d503      	bpl.n	8005772 <ps_sample+0x292>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		encoder->first_sample = 1;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 22dc 	strb.w	r2, [r3, #732]	; 0x2dc
	}



	/* Multi-turn position */
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	ed93 7a01 	vldr	s14, [r3, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800578e:	eddf 6a19 	vldr	s13, [pc, #100]	; 80057f4 <ps_sample+0x314>
 8005792:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	edc3 7a03 	vstr	s15, [r3, #12]
			c1 += encoder->angle_multiturn[i]*q*(i - ibar);
		}
		encoder->vel2 = -c1/dt;
*/
	//encoder->velocity = vel2
	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80057ac:	ee77 6a67 	vsub.f32	s13, s14, s15
 80057b0:	edd7 7a00 	vldr	s15, [r7]
 80057b4:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80057b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80057bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80057d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

}
 80057dc:	bf00      	nop
 80057de:	3728      	adds	r7, #40	; 0x28
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	40020000 	.word	0x40020000
 80057e8:	20009520 	.word	0x20009520
 80057ec:	20009074 	.word	0x20009074
 80057f0:	47800000 	.word	0x47800000
 80057f4:	40c90fdb 	.word	0x40c90fdb
 80057f8:	40490fdb 	.word	0x40490fdb
 80057fc:	c0490fdb 	.word	0xc0490fdb
 8005800:	3fc90fdb 	.word	0x3fc90fdb
 8005804:	bfc90fdb 	.word	0xbfc90fdb

08005808 <ps_print>:

void ps_print(EncoderStruct * encoder, int dt_ms){
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
	printf("Raw: %d", encoder->raw);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005816:	4619      	mov	r1, r3
 8005818:	4818      	ldr	r0, [pc, #96]	; (800587c <ps_print+0x74>)
 800581a:	f007 fa75 	bl	800cd08 <iprintf>
	printf("   Linearized Count: %d", encoder->count);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005822:	4619      	mov	r1, r3
 8005824:	4816      	ldr	r0, [pc, #88]	; (8005880 <ps_print+0x78>)
 8005826:	f007 fa6f 	bl	800cd08 <iprintf>
	printf("   Single Turn: %f", encoder->angle_singleturn);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	4618      	mov	r0, r3
 8005830:	f7fa feba 	bl	80005a8 <__aeabi_f2d>
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	4812      	ldr	r0, [pc, #72]	; (8005884 <ps_print+0x7c>)
 800583a:	f007 fa65 	bl	800cd08 <iprintf>
	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	4618      	mov	r0, r3
 8005844:	f7fa feb0 	bl	80005a8 <__aeabi_f2d>
 8005848:	4602      	mov	r2, r0
 800584a:	460b      	mov	r3, r1
 800584c:	480e      	ldr	r0, [pc, #56]	; (8005888 <ps_print+0x80>)
 800584e:	f007 fa5b 	bl	800cd08 <iprintf>
	printf("   Electrical: %f", encoder->elec_angle);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005856:	4618      	mov	r0, r3
 8005858:	f7fa fea6 	bl	80005a8 <__aeabi_f2d>
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	480a      	ldr	r0, [pc, #40]	; (800588c <ps_print+0x84>)
 8005862:	f007 fa51 	bl	800cd08 <iprintf>
	printf("   Turns:  %d\r\n", encoder->turns);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800586c:	4619      	mov	r1, r3
 800586e:	4808      	ldr	r0, [pc, #32]	; (8005890 <ps_print+0x88>)
 8005870:	f007 fa4a 	bl	800cd08 <iprintf>
	//HAL_Delay(dt_ms);
}
 8005874:	bf00      	nop
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	080112bc 	.word	0x080112bc
 8005880:	080112c4 	.word	0x080112c4
 8005884:	080112dc 	.word	0x080112dc
 8005888:	080112f0 	.word	0x080112f0
 800588c:	08011304 	.word	0x08011304
 8005890:	08011318 	.word	0x08011318

08005894 <preference_writer_init>:
    __sector = sector;
    __ready = false;
}
*/

void preference_writer_init(PreferenceWriter * pr, uint32_t sector){
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
	flash_writer_init(&pr->fw, sector);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6839      	ldr	r1, [r7, #0]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fc ff00 	bl	80026a8 <flash_writer_init>
	pr->sector = sector;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	60da      	str	r2, [r3, #12]
}
 80058ae:	bf00      	nop
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <preference_writer_open>:


void preference_writer_open(PreferenceWriter * pr) {
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b082      	sub	sp, #8
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
    flash_writer_open(&pr->fw);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7fc ff0f 	bl	80026e4 <flash_writer_open>
    pr->ready = true;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	741a      	strb	r2, [r3, #16]
}
 80058cc:	bf00      	nop
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <preference_writer_ready>:

bool  preference_writer_ready(PreferenceWriter pr) {
 80058d4:	b084      	sub	sp, #16
 80058d6:	b490      	push	{r4, r7}
 80058d8:	af00      	add	r7, sp, #0
 80058da:	f107 0408 	add.w	r4, r7, #8
 80058de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return pr.ready;
 80058e2:	7e3b      	ldrb	r3, [r7, #24]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bc90      	pop	{r4, r7}
 80058ea:	b004      	add	sp, #16
 80058ec:	4770      	bx	lr
	...

080058f0 <preference_writer_flush>:

void preference_writer_write_float(float x, int index) {
    __float_reg[index] = x;
}

void preference_writer_flush(PreferenceWriter * pr) {
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af02      	add	r7, sp, #8
 80058f6:	6078      	str	r0, [r7, #4]
    int offs;
    for (offs = 0; offs < 256; offs++) {
 80058f8:	2300      	movs	r3, #0
 80058fa:	60fb      	str	r3, [r7, #12]
 80058fc:	e00d      	b.n	800591a <preference_writer_flush+0x2a>
        flash_writer_write_int(pr->fw, offs, __int_reg[offs]);
 80058fe:	68f9      	ldr	r1, [r7, #12]
 8005900:	4a17      	ldr	r2, [pc, #92]	; (8005960 <preference_writer_flush+0x70>)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	460b      	mov	r3, r1
 800590e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005910:	f7fc ff04 	bl	800271c <flash_writer_write_int>
    for (offs = 0; offs < 256; offs++) {
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	3301      	adds	r3, #1
 8005918:	60fb      	str	r3, [r7, #12]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2bff      	cmp	r3, #255	; 0xff
 800591e:	ddee      	ble.n	80058fe <preference_writer_flush+0xe>
    }
    for (; offs < 320; offs++) {
 8005920:	e012      	b.n	8005948 <preference_writer_flush+0x58>
        flash_writer_write_float(pr->fw, offs, __float_reg[offs - 256]);
 8005922:	68f9      	ldr	r1, [r7, #12]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800592a:	4a0e      	ldr	r2, [pc, #56]	; (8005964 <preference_writer_flush+0x74>)
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	edd3 7a00 	vldr	s15, [r3]
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	eeb0 0a67 	vmov.f32	s0, s15
 800593a:	460b      	mov	r3, r1
 800593c:	ca07      	ldmia	r2, {r0, r1, r2}
 800593e:	f7fc ff03 	bl	8002748 <flash_writer_write_float>
    for (; offs < 320; offs++) {
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3301      	adds	r3, #1
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800594e:	dbe8      	blt.n	8005922 <preference_writer_flush+0x32>
    }
    pr->ready = false;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	741a      	strb	r2, [r3, #16]
}
 8005956:	bf00      	nop
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	20009074 	.word	0x20009074
 8005964:	2000075c 	.word	0x2000075c

08005968 <preference_writer_load>:

void preference_writer_load(PreferenceWriter pr) {
 8005968:	b084      	sub	sp, #16
 800596a:	b590      	push	{r4, r7, lr}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	f107 0418 	add.w	r4, r7, #24
 8005974:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int offs;
    for (offs = 0; offs < 256; offs++) {
 8005978:	2300      	movs	r3, #0
 800597a:	607b      	str	r3, [r7, #4]
 800597c:	e00d      	b.n	800599a <preference_writer_load+0x32>
        __int_reg[offs] = flash_read_int(pr.fw, offs);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f107 0218 	add.w	r2, r7, #24
 8005984:	ca07      	ldmia	r2, {r0, r1, r2}
 8005986:	f7fc ff05 	bl	8002794 <flash_read_int>
 800598a:	4602      	mov	r2, r0
 800598c:	4915      	ldr	r1, [pc, #84]	; (80059e4 <preference_writer_load+0x7c>)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (offs = 0; offs < 256; offs++) {
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	3301      	adds	r3, #1
 8005998:	607b      	str	r3, [r7, #4]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2bff      	cmp	r3, #255	; 0xff
 800599e:	ddee      	ble.n	800597e <preference_writer_load+0x16>
    }
    for(; offs < 320; offs++) {
 80059a0:	e013      	b.n	80059ca <preference_writer_load+0x62>
        __float_reg[offs - 256] = flash_read_float(pr.fw, offs);
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f5a3 7480 	sub.w	r4, r3, #256	; 0x100
 80059aa:	4613      	mov	r3, r2
 80059ac:	f107 0218 	add.w	r2, r7, #24
 80059b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80059b2:	f7fc ff05 	bl	80027c0 <flash_read_float>
 80059b6:	eef0 7a40 	vmov.f32	s15, s0
 80059ba:	4a0b      	ldr	r2, [pc, #44]	; (80059e8 <preference_writer_load+0x80>)
 80059bc:	00a3      	lsls	r3, r4, #2
 80059be:	4413      	add	r3, r2
 80059c0:	edc3 7a00 	vstr	s15, [r3]
    for(; offs < 320; offs++) {
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	3301      	adds	r3, #1
 80059c8:	607b      	str	r3, [r7, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80059d0:	dbe7      	blt.n	80059a2 <preference_writer_load+0x3a>
    }
}
 80059d2:	bf00      	nop
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80059de:	b004      	add	sp, #16
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	20009074 	.word	0x20009074
 80059e8:	2000075c 	.word	0x2000075c

080059ec <preference_writer_close>:

void preference_writer_close(PreferenceWriter *pr) {
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
    pr->ready = false;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	741a      	strb	r2, [r3, #16]
    flash_writer_close(&pr->fw);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7fc febc 	bl	800277a <flash_writer_close>
}
 8005a02:	bf00      	nop
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
	...

08005a0c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005a10:	4b18      	ldr	r3, [pc, #96]	; (8005a74 <MX_SPI1_Init+0x68>)
 8005a12:	4a19      	ldr	r2, [pc, #100]	; (8005a78 <MX_SPI1_Init+0x6c>)
 8005a14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005a16:	4b17      	ldr	r3, [pc, #92]	; (8005a74 <MX_SPI1_Init+0x68>)
 8005a18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005a1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005a1e:	4b15      	ldr	r3, [pc, #84]	; (8005a74 <MX_SPI1_Init+0x68>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8005a24:	4b13      	ldr	r3, [pc, #76]	; (8005a74 <MX_SPI1_Init+0x68>)
 8005a26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a2a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a2c:	4b11      	ldr	r3, [pc, #68]	; (8005a74 <MX_SPI1_Init+0x68>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005a32:	4b10      	ldr	r3, [pc, #64]	; (8005a74 <MX_SPI1_Init+0x68>)
 8005a34:	2201      	movs	r2, #1
 8005a36:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005a38:	4b0e      	ldr	r3, [pc, #56]	; (8005a74 <MX_SPI1_Init+0x68>)
 8005a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a3e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005a40:	4b0c      	ldr	r3, [pc, #48]	; (8005a74 <MX_SPI1_Init+0x68>)
 8005a42:	2228      	movs	r2, #40	; 0x28
 8005a44:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005a46:	4b0b      	ldr	r3, [pc, #44]	; (8005a74 <MX_SPI1_Init+0x68>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005a4c:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <MX_SPI1_Init+0x68>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a52:	4b08      	ldr	r3, [pc, #32]	; (8005a74 <MX_SPI1_Init+0x68>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005a58:	4b06      	ldr	r3, [pc, #24]	; (8005a74 <MX_SPI1_Init+0x68>)
 8005a5a:	220a      	movs	r2, #10
 8005a5c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005a5e:	4805      	ldr	r0, [pc, #20]	; (8005a74 <MX_SPI1_Init+0x68>)
 8005a60:	f003 ff9c 	bl	800999c <HAL_SPI_Init>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8005a6a:	f7ff fb59 	bl	8005120 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005a6e:	bf00      	nop
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	20009578 	.word	0x20009578
 8005a78:	40013000 	.word	0x40013000

08005a7c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8005a80:	4b18      	ldr	r3, [pc, #96]	; (8005ae4 <MX_SPI3_Init+0x68>)
 8005a82:	4a19      	ldr	r2, [pc, #100]	; (8005ae8 <MX_SPI3_Init+0x6c>)
 8005a84:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005a86:	4b17      	ldr	r3, [pc, #92]	; (8005ae4 <MX_SPI3_Init+0x68>)
 8005a88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005a8c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005a8e:	4b15      	ldr	r3, [pc, #84]	; (8005ae4 <MX_SPI3_Init+0x68>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8005a94:	4b13      	ldr	r3, [pc, #76]	; (8005ae4 <MX_SPI3_Init+0x68>)
 8005a96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a9a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a9c:	4b11      	ldr	r3, [pc, #68]	; (8005ae4 <MX_SPI3_Init+0x68>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005aa2:	4b10      	ldr	r3, [pc, #64]	; (8005ae4 <MX_SPI3_Init+0x68>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005aa8:	4b0e      	ldr	r3, [pc, #56]	; (8005ae4 <MX_SPI3_Init+0x68>)
 8005aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aae:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ab0:	4b0c      	ldr	r3, [pc, #48]	; (8005ae4 <MX_SPI3_Init+0x68>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005ab6:	4b0b      	ldr	r3, [pc, #44]	; (8005ae4 <MX_SPI3_Init+0x68>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005abc:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <MX_SPI3_Init+0x68>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ac2:	4b08      	ldr	r3, [pc, #32]	; (8005ae4 <MX_SPI3_Init+0x68>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8005ac8:	4b06      	ldr	r3, [pc, #24]	; (8005ae4 <MX_SPI3_Init+0x68>)
 8005aca:	220a      	movs	r2, #10
 8005acc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005ace:	4805      	ldr	r0, [pc, #20]	; (8005ae4 <MX_SPI3_Init+0x68>)
 8005ad0:	f003 ff64 	bl	800999c <HAL_SPI_Init>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8005ada:	f7ff fb21 	bl	8005120 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005ade:	bf00      	nop
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20009520 	.word	0x20009520
 8005ae8:	40003c00 	.word	0x40003c00

08005aec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b08c      	sub	sp, #48	; 0x30
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005af4:	f107 031c 	add.w	r3, r7, #28
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	605a      	str	r2, [r3, #4]
 8005afe:	609a      	str	r2, [r3, #8]
 8005b00:	60da      	str	r2, [r3, #12]
 8005b02:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a32      	ldr	r2, [pc, #200]	; (8005bd4 <HAL_SPI_MspInit+0xe8>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d12c      	bne.n	8005b68 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005b0e:	2300      	movs	r3, #0
 8005b10:	61bb      	str	r3, [r7, #24]
 8005b12:	4b31      	ldr	r3, [pc, #196]	; (8005bd8 <HAL_SPI_MspInit+0xec>)
 8005b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b16:	4a30      	ldr	r2, [pc, #192]	; (8005bd8 <HAL_SPI_MspInit+0xec>)
 8005b18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8005b1e:	4b2e      	ldr	r3, [pc, #184]	; (8005bd8 <HAL_SPI_MspInit+0xec>)
 8005b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b26:	61bb      	str	r3, [r7, #24]
 8005b28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	617b      	str	r3, [r7, #20]
 8005b2e:	4b2a      	ldr	r3, [pc, #168]	; (8005bd8 <HAL_SPI_MspInit+0xec>)
 8005b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b32:	4a29      	ldr	r2, [pc, #164]	; (8005bd8 <HAL_SPI_MspInit+0xec>)
 8005b34:	f043 0301 	orr.w	r3, r3, #1
 8005b38:	6313      	str	r3, [r2, #48]	; 0x30
 8005b3a:	4b27      	ldr	r3, [pc, #156]	; (8005bd8 <HAL_SPI_MspInit+0xec>)
 8005b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005b46:	23e0      	movs	r3, #224	; 0xe0
 8005b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b52:	2303      	movs	r3, #3
 8005b54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005b56:	2305      	movs	r3, #5
 8005b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b5a:	f107 031c 	add.w	r3, r7, #28
 8005b5e:	4619      	mov	r1, r3
 8005b60:	481e      	ldr	r0, [pc, #120]	; (8005bdc <HAL_SPI_MspInit+0xf0>)
 8005b62:	f002 ff9b 	bl	8008a9c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005b66:	e031      	b.n	8005bcc <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI3)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a1c      	ldr	r2, [pc, #112]	; (8005be0 <HAL_SPI_MspInit+0xf4>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d12c      	bne.n	8005bcc <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005b72:	2300      	movs	r3, #0
 8005b74:	613b      	str	r3, [r7, #16]
 8005b76:	4b18      	ldr	r3, [pc, #96]	; (8005bd8 <HAL_SPI_MspInit+0xec>)
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	4a17      	ldr	r2, [pc, #92]	; (8005bd8 <HAL_SPI_MspInit+0xec>)
 8005b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b80:	6413      	str	r3, [r2, #64]	; 0x40
 8005b82:	4b15      	ldr	r3, [pc, #84]	; (8005bd8 <HAL_SPI_MspInit+0xec>)
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b8a:	613b      	str	r3, [r7, #16]
 8005b8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]
 8005b92:	4b11      	ldr	r3, [pc, #68]	; (8005bd8 <HAL_SPI_MspInit+0xec>)
 8005b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b96:	4a10      	ldr	r2, [pc, #64]	; (8005bd8 <HAL_SPI_MspInit+0xec>)
 8005b98:	f043 0304 	orr.w	r3, r3, #4
 8005b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b9e:	4b0e      	ldr	r3, [pc, #56]	; (8005bd8 <HAL_SPI_MspInit+0xec>)
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba2:	f003 0304 	and.w	r3, r3, #4
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005baa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005bbc:	2306      	movs	r3, #6
 8005bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005bc0:	f107 031c 	add.w	r3, r7, #28
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	4807      	ldr	r0, [pc, #28]	; (8005be4 <HAL_SPI_MspInit+0xf8>)
 8005bc8:	f002 ff68 	bl	8008a9c <HAL_GPIO_Init>
}
 8005bcc:	bf00      	nop
 8005bce:	3730      	adds	r7, #48	; 0x30
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	40013000 	.word	0x40013000
 8005bd8:	40023800 	.word	0x40023800
 8005bdc:	40020000 	.word	0x40020000
 8005be0:	40003c00 	.word	0x40003c00
 8005be4:	40020800 	.word	0x40020800

08005be8 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8005be8:	b480      	push	{r7}
 8005bea:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8005bec:	4b07      	ldr	r3, [pc, #28]	; (8005c0c <FLASH_Unlock+0x24>)
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	da05      	bge.n	8005c00 <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8005bf4:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <FLASH_Unlock+0x24>)
 8005bf6:	4a06      	ldr	r2, [pc, #24]	; (8005c10 <FLASH_Unlock+0x28>)
 8005bf8:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8005bfa:	4b04      	ldr	r3, [pc, #16]	; (8005c0c <FLASH_Unlock+0x24>)
 8005bfc:	4a05      	ldr	r2, [pc, #20]	; (8005c14 <FLASH_Unlock+0x2c>)
 8005bfe:	605a      	str	r2, [r3, #4]
  }  
}
 8005c00:	bf00      	nop
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	40023c00 	.word	0x40023c00
 8005c10:	45670123 	.word	0x45670123
 8005c14:	cdef89ab 	.word	0xcdef89ab

08005c18 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005c1c:	4b05      	ldr	r3, [pc, #20]	; (8005c34 <FLASH_Lock+0x1c>)
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	4a04      	ldr	r2, [pc, #16]	; (8005c34 <FLASH_Lock+0x1c>)
 8005c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c26:	6113      	str	r3, [r2, #16]
}
 8005c28:	bf00      	nop
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	40023c00 	.word	0x40023c00

08005c38 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	460b      	mov	r3, r1
 8005c42:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 8005c44:	2300      	movs	r3, #0
 8005c46:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE2;
 8005c48:	2309      	movs	r3, #9
 8005c4a:	72fb      	strb	r3, [r7, #11]
 
  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8005c4c:	78fb      	ldrb	r3, [r7, #3]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d102      	bne.n	8005c58 <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]
 8005c56:	e010      	b.n	8005c7a <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 8005c58:	78fb      	ldrb	r3, [r7, #3]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d103      	bne.n	8005c66 <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005c5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	e009      	b.n	8005c7a <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 8005c66:	78fb      	ldrb	r3, [r7, #3]
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d103      	bne.n	8005c74 <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005c6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	e002      	b.n	8005c7a <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005c74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005c78:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation2();
 8005c7a:	f000 f8bf 	bl	8005dfc <FLASH_WaitForLastOperation2>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE2)
 8005c82:	7afb      	ldrb	r3, [r7, #11]
 8005c84:	2b09      	cmp	r3, #9
 8005c86:	d12f      	bne.n	8005ce8 <FLASH_EraseSector+0xb0>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 8005c88:	4b1a      	ldr	r3, [pc, #104]	; (8005cf4 <FLASH_EraseSector+0xbc>)
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	4a19      	ldr	r2, [pc, #100]	; (8005cf4 <FLASH_EraseSector+0xbc>)
 8005c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c92:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 8005c94:	4b17      	ldr	r3, [pc, #92]	; (8005cf4 <FLASH_EraseSector+0xbc>)
 8005c96:	691a      	ldr	r2, [r3, #16]
 8005c98:	4916      	ldr	r1, [pc, #88]	; (8005cf4 <FLASH_EraseSector+0xbc>)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	610b      	str	r3, [r1, #16]
    FLASH->CR &= SECTOR_MASK;
 8005ca0:	4b14      	ldr	r3, [pc, #80]	; (8005cf4 <FLASH_EraseSector+0xbc>)
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	4a13      	ldr	r2, [pc, #76]	; (8005cf4 <FLASH_EraseSector+0xbc>)
 8005ca6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005caa:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8005cac:	4b11      	ldr	r3, [pc, #68]	; (8005cf4 <FLASH_EraseSector+0xbc>)
 8005cae:	691a      	ldr	r2, [r3, #16]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	4a0f      	ldr	r2, [pc, #60]	; (8005cf4 <FLASH_EraseSector+0xbc>)
 8005cb6:	f043 0302 	orr.w	r3, r3, #2
 8005cba:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8005cbc:	4b0d      	ldr	r3, [pc, #52]	; (8005cf4 <FLASH_EraseSector+0xbc>)
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	4a0c      	ldr	r2, [pc, #48]	; (8005cf4 <FLASH_EraseSector+0xbc>)
 8005cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cc6:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation2();
 8005cc8:	f000 f898 	bl	8005dfc <FLASH_WaitForLastOperation2>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 8005cd0:	4b08      	ldr	r3, [pc, #32]	; (8005cf4 <FLASH_EraseSector+0xbc>)
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	4a07      	ldr	r2, [pc, #28]	; (8005cf4 <FLASH_EraseSector+0xbc>)
 8005cd6:	f023 0302 	bic.w	r3, r3, #2
 8005cda:	6113      	str	r3, [r2, #16]
    FLASH->CR &= SECTOR_MASK; 
 8005cdc:	4b05      	ldr	r3, [pc, #20]	; (8005cf4 <FLASH_EraseSector+0xbc>)
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	4a04      	ldr	r2, [pc, #16]	; (8005cf4 <FLASH_EraseSector+0xbc>)
 8005ce2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005ce6:	6113      	str	r3, [r2, #16]
  }
  /* Return the Erase Status */
  return status;
 8005ce8:	7afb      	ldrb	r3, [r7, #11]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	40023c00 	.word	0x40023c00

08005cf8 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE2;
 8005d02:	2309      	movs	r3, #9
 8005d04:	73fb      	strb	r3, [r7, #15]
 
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation2();
 8005d06:	f000 f879 	bl	8005dfc <FLASH_WaitForLastOperation2>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE2)
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
 8005d10:	2b09      	cmp	r3, #9
 8005d12:	d11e      	bne.n	8005d52 <FLASH_ProgramWord+0x5a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8005d14:	4b11      	ldr	r3, [pc, #68]	; (8005d5c <FLASH_ProgramWord+0x64>)
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	4a10      	ldr	r2, [pc, #64]	; (8005d5c <FLASH_ProgramWord+0x64>)
 8005d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d1e:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 8005d20:	4b0e      	ldr	r3, [pc, #56]	; (8005d5c <FLASH_ProgramWord+0x64>)
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	4a0d      	ldr	r2, [pc, #52]	; (8005d5c <FLASH_ProgramWord+0x64>)
 8005d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d2a:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 8005d2c:	4b0b      	ldr	r3, [pc, #44]	; (8005d5c <FLASH_ProgramWord+0x64>)
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	4a0a      	ldr	r2, [pc, #40]	; (8005d5c <FLASH_ProgramWord+0x64>)
 8005d32:	f043 0301 	orr.w	r3, r3, #1
 8005d36:	6113      	str	r3, [r2, #16]
  
    *(__IO uint32_t*)Address = Data;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation2();
 8005d3e:	f000 f85d 	bl	8005dfc <FLASH_WaitForLastOperation2>
 8005d42:	4603      	mov	r3, r0
 8005d44:	73fb      	strb	r3, [r7, #15]
 
    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8005d46:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <FLASH_ProgramWord+0x64>)
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	4a04      	ldr	r2, [pc, #16]	; (8005d5c <FLASH_ProgramWord+0x64>)
 8005d4c:	f023 0301 	bic.w	r3, r3, #1
 8005d50:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 8005d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	40023c00 	.word	0x40023c00

08005d60 <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42xx/43xxx and STM32F401xx/411xE devices)   
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8005d68:	4a04      	ldr	r2, [pc, #16]	; (8005d7c <FLASH_ClearFlag+0x1c>)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	60d3      	str	r3, [r2, #12]
}
 8005d6e:	bf00      	nop
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	40023c00 	.word	0x40023c00

08005d80 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_RD2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE2;
 8005d86:	2309      	movs	r3, #9
 8005d88:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8005d8a:	4b1b      	ldr	r3, [pc, #108]	; (8005df8 <FLASH_GetStatus+0x78>)
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d96:	d102      	bne.n	8005d9e <FLASH_GetStatus+0x1e>
  {
    flashstatus = FLASH_BUSY2;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	71fb      	strb	r3, [r7, #7]
 8005d9c:	e025      	b.n	8005dea <FLASH_GetStatus+0x6a>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 8005d9e:	4b16      	ldr	r3, [pc, #88]	; (8005df8 <FLASH_GetStatus+0x78>)
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f003 0310 	and.w	r3, r3, #16
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <FLASH_GetStatus+0x30>
    { 
      flashstatus = FLASH_ERROR_WRP2;
 8005daa:	2306      	movs	r3, #6
 8005dac:	71fb      	strb	r3, [r7, #7]
 8005dae:	e01c      	b.n	8005dea <FLASH_GetStatus+0x6a>
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 8005db0:	4b11      	ldr	r3, [pc, #68]	; (8005df8 <FLASH_GetStatus+0x78>)
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d002      	beq.n	8005dc2 <FLASH_GetStatus+0x42>
      { 
        flashstatus = FLASH_ERROR_RD2;
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	71fb      	strb	r3, [r7, #7]
 8005dc0:	e013      	b.n	8005dea <FLASH_GetStatus+0x6a>
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
 8005dc2:	4b0d      	ldr	r3, [pc, #52]	; (8005df8 <FLASH_GetStatus+0x78>)
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <FLASH_GetStatus+0x54>
        {
          flashstatus = FLASH_ERROR_PROGRAM2; 
 8005dce:	2307      	movs	r3, #7
 8005dd0:	71fb      	strb	r3, [r7, #7]
 8005dd2:	e00a      	b.n	8005dea <FLASH_GetStatus+0x6a>
        }
        else
        {
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 8005dd4:	4b08      	ldr	r3, [pc, #32]	; (8005df8 <FLASH_GetStatus+0x78>)
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d002      	beq.n	8005de6 <FLASH_GetStatus+0x66>
          {
            flashstatus = FLASH_ERROR_OPERATION2;
 8005de0:	2308      	movs	r3, #8
 8005de2:	71fb      	strb	r3, [r7, #7]
 8005de4:	e001      	b.n	8005dea <FLASH_GetStatus+0x6a>
          }
          else
          {
            flashstatus = FLASH_COMPLETE2;
 8005de6:	2309      	movs	r3, #9
 8005de8:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 8005dea:	79fb      	ldrb	r3, [r7, #7]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	40023c00 	.word	0x40023c00

08005dfc <FLASH_WaitForLastOperation2>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_WaitForLastOperation2(void)
{ 
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE2;
 8005e02:	2309      	movs	r3, #9
 8005e04:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 8005e06:	f7ff ffbb 	bl	8005d80 <FLASH_GetStatus>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	71fb      	strb	r3, [r7, #7]
 
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY2)
 8005e0e:	e003      	b.n	8005e18 <FLASH_WaitForLastOperation2+0x1c>
  {
    status = FLASH_GetStatus();
 8005e10:	f7ff ffb6 	bl	8005d80 <FLASH_GetStatus>
 8005e14:	4603      	mov	r3, r0
 8005e16:	71fb      	strb	r3, [r7, #7]
  while(status == FLASH_BUSY2)
 8005e18:	79fb      	ldrb	r3, [r7, #7]
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d0f7      	beq.n	8005e10 <FLASH_WaitForLastOperation2+0x14>
  }
  /* Return the operation status */
  return status;
 8005e20:	79fb      	ldrb	r3, [r7, #7]
 8005e22:	b2db      	uxtb	r3, r3
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e32:	2300      	movs	r3, #0
 8005e34:	607b      	str	r3, [r7, #4]
 8005e36:	4b10      	ldr	r3, [pc, #64]	; (8005e78 <HAL_MspInit+0x4c>)
 8005e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3a:	4a0f      	ldr	r2, [pc, #60]	; (8005e78 <HAL_MspInit+0x4c>)
 8005e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e40:	6453      	str	r3, [r2, #68]	; 0x44
 8005e42:	4b0d      	ldr	r3, [pc, #52]	; (8005e78 <HAL_MspInit+0x4c>)
 8005e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e4a:	607b      	str	r3, [r7, #4]
 8005e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e4e:	2300      	movs	r3, #0
 8005e50:	603b      	str	r3, [r7, #0]
 8005e52:	4b09      	ldr	r3, [pc, #36]	; (8005e78 <HAL_MspInit+0x4c>)
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	4a08      	ldr	r2, [pc, #32]	; (8005e78 <HAL_MspInit+0x4c>)
 8005e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8005e5e:	4b06      	ldr	r3, [pc, #24]	; (8005e78 <HAL_MspInit+0x4c>)
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e66:	603b      	str	r3, [r7, #0]
 8005e68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005e6a:	2007      	movs	r0, #7
 8005e6c:	f002 fd42 	bl	80088f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e70:	bf00      	nop
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	40023800 	.word	0x40023800

08005e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005e80:	bf00      	nop
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005e8e:	e7fe      	b.n	8005e8e <HardFault_Handler+0x4>

08005e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005e90:	b480      	push	{r7}
 8005e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005e94:	e7fe      	b.n	8005e94 <MemManage_Handler+0x4>

08005e96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005e96:	b480      	push	{r7}
 8005e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005e9a:	e7fe      	b.n	8005e9a <BusFault_Handler+0x4>

08005e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ea0:	e7fe      	b.n	8005ea0 <UsageFault_Handler+0x4>

08005ea2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005ea6:	bf00      	nop
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005eb4:	bf00      	nop
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005ec2:	bf00      	nop
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005ed0:	f001 f994 	bl	80071fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005ed4:	bf00      	nop
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005edc:	4803      	ldr	r0, [pc, #12]	; (8005eec <CAN1_RX0_IRQHandler+0x14>)
 8005ede:	f002 fa00 	bl	80082e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  can_tx_rx();
 8005ee2:	f000 f849 	bl	8005f78 <can_tx_rx>

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8005ee6:	bf00      	nop
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20000400 	.word	0x20000400

08005ef0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	//LED_HIGH	// Useful for timing

	/* Sample ADCs */
	analog_sample(&controller);
 8005ef4:	480c      	ldr	r0, [pc, #48]	; (8005f28 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8005ef6:	f7fc fd21 	bl	800293c <analog_sample>

	/* Sample position sensor */
	ps_sample(&comm_encoder, DT);
 8005efa:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8005f2c <TIM1_UP_TIM10_IRQHandler+0x3c>
 8005efe:	480c      	ldr	r0, [pc, #48]	; (8005f30 <TIM1_UP_TIM10_IRQHandler+0x40>)
 8005f00:	f7ff faee 	bl	80054e0 <ps_sample>

	/* Run Finite State Machine */
	run_fsm(&state);
 8005f04:	480b      	ldr	r0, [pc, #44]	; (8005f34 <TIM1_UP_TIM10_IRQHandler+0x44>)
 8005f06:	f7fd fcd5 	bl	80038b4 <run_fsm>

	/* Check for CAN messages */
	can_tx_rx();
 8005f0a:	f000 f835 	bl	8005f78 <can_tx_rx>

	/* increment loop count */
	controller.loop_count++;
 8005f0e:	4b06      	ldr	r3, [pc, #24]	; (8005f28 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8005f10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005f14:	3301      	adds	r3, #1
 8005f16:	4a04      	ldr	r2, [pc, #16]	; (8005f28 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8005f18:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	//LED_LOW;

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005f1c:	4806      	ldr	r0, [pc, #24]	; (8005f38 <TIM1_UP_TIM10_IRQHandler+0x48>)
 8005f1e:	f004 fa15 	bl	800a34c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005f22:	bf00      	nop
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	2000085c 	.word	0x2000085c
 8005f2c:	37d1b717 	.word	0x37d1b717
 8005f30:	20000428 	.word	0x20000428
 8005f34:	20000738 	.word	0x20000738
 8005f38:	200095d0 	.word	0x200095d0

08005f3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8005f42:	480a      	ldr	r0, [pc, #40]	; (8005f6c <USART2_IRQHandler+0x30>)
 8005f44:	f005 f9c0 	bl	800b2c8 <HAL_UART_IRQHandler>
	state.print_uart_msg = 1;
 8005f48:	4b09      	ldr	r3, [pc, #36]	; (8005f70 <USART2_IRQHandler+0x34>)
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	711a      	strb	r2, [r3, #4]

	char c = Serial2RxBuffer[0];
 8005f4e:	4b09      	ldr	r3, [pc, #36]	; (8005f74 <USART2_IRQHandler+0x38>)
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	71fb      	strb	r3, [r7, #7]
	update_fsm(&state, c);
 8005f54:	79fb      	ldrb	r3, [r7, #7]
 8005f56:	4619      	mov	r1, r3
 8005f58:	4805      	ldr	r0, [pc, #20]	; (8005f70 <USART2_IRQHandler+0x34>)
 8005f5a:	f7fd ff15 	bl	8003d88 <update_fsm>

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005f5e:	4803      	ldr	r0, [pc, #12]	; (8005f6c <USART2_IRQHandler+0x30>)
 8005f60:	f005 f9b2 	bl	800b2c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8005f64:	bf00      	nop
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	20009618 	.word	0x20009618
 8005f70:	20000738 	.word	0x20000738
 8005f74:	20000734 	.word	0x20000734

08005f78 <can_tx_rx>:

/* USER CODE BEGIN 1 */

void can_tx_rx(void){
 8005f78:	b590      	push	{r4, r7, lr}
 8005f7a:	ed2d 8b04 	vpush	{d8-d9}
 8005f7e:	b099      	sub	sp, #100	; 0x64
 8005f80:	af16      	add	r7, sp, #88	; 0x58

	int no_mesage = HAL_CAN_GetRxMessage(&CAN_H, CAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Read CAN
 8005f82:	4ba4      	ldr	r3, [pc, #656]	; (8006214 <can_tx_rx+0x29c>)
 8005f84:	4aa4      	ldr	r2, [pc, #656]	; (8006218 <can_tx_rx+0x2a0>)
 8005f86:	2100      	movs	r1, #0
 8005f88:	48a4      	ldr	r0, [pc, #656]	; (800621c <can_tx_rx+0x2a4>)
 8005f8a:	f002 f898 	bl	80080be <HAL_CAN_GetRxMessage>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	607b      	str	r3, [r7, #4]
	if(!no_mesage){
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f040 822b 	bne.w	80063f0 <can_tx_rx+0x478>
		state.print_uart_msg = 0;
 8005f9a:	4ba1      	ldr	r3, [pc, #644]	; (8006220 <can_tx_rx+0x2a8>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	711a      	strb	r2, [r3, #4]
		uint32_t TxMailbox;

		/* Check for special commands by function code*/
		switch (can_rx.rx_header.StdId >> 7)
 8005fa0:	4ba0      	ldr	r3, [pc, #640]	; (8006224 <can_tx_rx+0x2ac>)
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	09db      	lsrs	r3, r3, #7
 8005fa6:	2b05      	cmp	r3, #5
 8005fa8:	f200 81dc 	bhi.w	8006364 <can_tx_rx+0x3ec>
 8005fac:	a201      	add	r2, pc, #4	; (adr r2, 8005fb4 <can_tx_rx+0x3c>)
 8005fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb2:	bf00      	nop
 8005fb4:	08005fcd 	.word	0x08005fcd
 8005fb8:	08006049 	.word	0x08006049
 8005fbc:	080060ed 	.word	0x080060ed
 8005fc0:	08006169 	.word	0x08006169
 8005fc4:	08006249 	.word	0x08006249
 8005fc8:	080062c5 	.word	0x080062c5
			{
				case FC_RESET:
					update_fsm(&state, MENU_CMD);
 8005fcc:	211b      	movs	r1, #27
 8005fce:	4894      	ldr	r0, [pc, #592]	; (8006220 <can_tx_rx+0x2a8>)
 8005fd0:	f7fd feda 	bl	8003d88 <update_fsm>
					pack_reply_default(can_rx, &can_tx, comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, VERSION_NUM, hall_cal.hall_cal_state, state.state);	// Pack response
 8005fd4:	4b94      	ldr	r3, [pc, #592]	; (8006228 <can_tx_rx+0x2b0>)
 8005fd6:	ed93 7a03 	vldr	s14, [r3, #12]
 8005fda:	4b94      	ldr	r3, [pc, #592]	; (800622c <can_tx_rx+0x2b4>)
 8005fdc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005fe0:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8005fe4:	4b90      	ldr	r3, [pc, #576]	; (8006228 <can_tx_rx+0x2b0>)
 8005fe6:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8005fea:	4b90      	ldr	r3, [pc, #576]	; (800622c <can_tx_rx+0x2b4>)
 8005fec:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005ff0:	eec7 8a27 	vdiv.f32	s17, s14, s15
 8005ff4:	4b8e      	ldr	r3, [pc, #568]	; (8006230 <can_tx_rx+0x2b8>)
 8005ff6:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8005ffa:	4b8c      	ldr	r3, [pc, #560]	; (800622c <can_tx_rx+0x2b4>)
 8005ffc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006000:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006004:	4b89      	ldr	r3, [pc, #548]	; (800622c <can_tx_rx+0x2b4>)
 8006006:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800600a:	ee27 9a27 	vmul.f32	s18, s14, s15
 800600e:	4b89      	ldr	r3, [pc, #548]	; (8006234 <can_tx_rx+0x2bc>)
 8006010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006012:	4a83      	ldr	r2, [pc, #524]	; (8006220 <can_tx_rx+0x2a8>)
 8006014:	7812      	ldrb	r2, [r2, #0]
 8006016:	4c83      	ldr	r4, [pc, #524]	; (8006224 <can_tx_rx+0x2ac>)
 8006018:	9215      	str	r2, [sp, #84]	; 0x54
 800601a:	9314      	str	r3, [sp, #80]	; 0x50
 800601c:	2305      	movs	r3, #5
 800601e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006020:	4b85      	ldr	r3, [pc, #532]	; (8006238 <can_tx_rx+0x2c0>)
 8006022:	9312      	str	r3, [sp, #72]	; 0x48
 8006024:	4668      	mov	r0, sp
 8006026:	f104 0310 	add.w	r3, r4, #16
 800602a:	2248      	movs	r2, #72	; 0x48
 800602c:	4619      	mov	r1, r3
 800602e:	f006 f9eb 	bl	800c408 <memcpy>
 8006032:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006036:	eeb0 1a49 	vmov.f32	s2, s18
 800603a:	eef0 0a68 	vmov.f32	s1, s17
 800603e:	eeb0 0a48 	vmov.f32	s0, s16
 8006042:	f7fb fe43 	bl	8001ccc <pack_reply_default>
					break;
 8006046:	e1c7      	b.n	80063d8 <can_tx_rx+0x460>

				case FC_MANAGE_CONFIG:
					if (can_rx.data[0] <= 1){
 8006048:	4b76      	ldr	r3, [pc, #472]	; (8006224 <can_tx_rx+0x2ac>)
 800604a:	7a1b      	ldrb	r3, [r3, #8]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d813      	bhi.n	8006078 <can_tx_rx+0x100>
						pack_reply_config(can_rx, &can_tx, VERSION_NUM, state.state);
 8006050:	4b73      	ldr	r3, [pc, #460]	; (8006220 <can_tx_rx+0x2a8>)
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	4c73      	ldr	r4, [pc, #460]	; (8006224 <can_tx_rx+0x2ac>)
 8006056:	9314      	str	r3, [sp, #80]	; 0x50
 8006058:	2305      	movs	r3, #5
 800605a:	9313      	str	r3, [sp, #76]	; 0x4c
 800605c:	4b76      	ldr	r3, [pc, #472]	; (8006238 <can_tx_rx+0x2c0>)
 800605e:	9312      	str	r3, [sp, #72]	; 0x48
 8006060:	4668      	mov	r0, sp
 8006062:	f104 0310 	add.w	r3, r4, #16
 8006066:	2248      	movs	r2, #72	; 0x48
 8006068:	4619      	mov	r1, r3
 800606a:	f006 f9cd 	bl	800c408 <memcpy>
 800606e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006072:	f7fb fecb 	bl	8001e0c <pack_reply_config>
					}
					else{
						pack_reply_default(can_rx, &can_tx, comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, VERSION_NUM, hall_cal.hall_cal_state, state.state);
					}
					break;
 8006076:	e1af      	b.n	80063d8 <can_tx_rx+0x460>
						pack_reply_default(can_rx, &can_tx, comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, VERSION_NUM, hall_cal.hall_cal_state, state.state);
 8006078:	4b6b      	ldr	r3, [pc, #428]	; (8006228 <can_tx_rx+0x2b0>)
 800607a:	ed93 7a03 	vldr	s14, [r3, #12]
 800607e:	4b6b      	ldr	r3, [pc, #428]	; (800622c <can_tx_rx+0x2b4>)
 8006080:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006084:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8006088:	4b67      	ldr	r3, [pc, #412]	; (8006228 <can_tx_rx+0x2b0>)
 800608a:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800608e:	4b67      	ldr	r3, [pc, #412]	; (800622c <can_tx_rx+0x2b4>)
 8006090:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006094:	eec7 8a27 	vdiv.f32	s17, s14, s15
 8006098:	4b65      	ldr	r3, [pc, #404]	; (8006230 <can_tx_rx+0x2b8>)
 800609a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800609e:	4b63      	ldr	r3, [pc, #396]	; (800622c <can_tx_rx+0x2b4>)
 80060a0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80060a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060a8:	4b60      	ldr	r3, [pc, #384]	; (800622c <can_tx_rx+0x2b4>)
 80060aa:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80060ae:	ee27 9a27 	vmul.f32	s18, s14, s15
 80060b2:	4b60      	ldr	r3, [pc, #384]	; (8006234 <can_tx_rx+0x2bc>)
 80060b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b6:	4a5a      	ldr	r2, [pc, #360]	; (8006220 <can_tx_rx+0x2a8>)
 80060b8:	7812      	ldrb	r2, [r2, #0]
 80060ba:	4c5a      	ldr	r4, [pc, #360]	; (8006224 <can_tx_rx+0x2ac>)
 80060bc:	9215      	str	r2, [sp, #84]	; 0x54
 80060be:	9314      	str	r3, [sp, #80]	; 0x50
 80060c0:	2305      	movs	r3, #5
 80060c2:	9313      	str	r3, [sp, #76]	; 0x4c
 80060c4:	4b5c      	ldr	r3, [pc, #368]	; (8006238 <can_tx_rx+0x2c0>)
 80060c6:	9312      	str	r3, [sp, #72]	; 0x48
 80060c8:	4668      	mov	r0, sp
 80060ca:	f104 0310 	add.w	r3, r4, #16
 80060ce:	2248      	movs	r2, #72	; 0x48
 80060d0:	4619      	mov	r1, r3
 80060d2:	f006 f999 	bl	800c408 <memcpy>
 80060d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80060da:	eeb0 1a49 	vmov.f32	s2, s18
 80060de:	eef0 0a68 	vmov.f32	s1, s17
 80060e2:	eeb0 0a48 	vmov.f32	s0, s16
 80060e6:	f7fb fdf1 	bl	8001ccc <pack_reply_default>
					break;
 80060ea:	e175      	b.n	80063d8 <can_tx_rx+0x460>

				case FC_SET_ZERO:
					update_fsm(&state, ZERO_CMD);
 80060ec:	217a      	movs	r1, #122	; 0x7a
 80060ee:	484c      	ldr	r0, [pc, #304]	; (8006220 <can_tx_rx+0x2a8>)
 80060f0:	f7fd fe4a 	bl	8003d88 <update_fsm>
					pack_reply_default(can_rx, &can_tx, comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, VERSION_NUM, hall_cal.hall_cal_state, state.state);
 80060f4:	4b4c      	ldr	r3, [pc, #304]	; (8006228 <can_tx_rx+0x2b0>)
 80060f6:	ed93 7a03 	vldr	s14, [r3, #12]
 80060fa:	4b4c      	ldr	r3, [pc, #304]	; (800622c <can_tx_rx+0x2b4>)
 80060fc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006100:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8006104:	4b48      	ldr	r3, [pc, #288]	; (8006228 <can_tx_rx+0x2b0>)
 8006106:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800610a:	4b48      	ldr	r3, [pc, #288]	; (800622c <can_tx_rx+0x2b4>)
 800610c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006110:	eec7 8a27 	vdiv.f32	s17, s14, s15
 8006114:	4b46      	ldr	r3, [pc, #280]	; (8006230 <can_tx_rx+0x2b8>)
 8006116:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800611a:	4b44      	ldr	r3, [pc, #272]	; (800622c <can_tx_rx+0x2b4>)
 800611c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006120:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006124:	4b41      	ldr	r3, [pc, #260]	; (800622c <can_tx_rx+0x2b4>)
 8006126:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800612a:	ee27 9a27 	vmul.f32	s18, s14, s15
 800612e:	4b41      	ldr	r3, [pc, #260]	; (8006234 <can_tx_rx+0x2bc>)
 8006130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006132:	4a3b      	ldr	r2, [pc, #236]	; (8006220 <can_tx_rx+0x2a8>)
 8006134:	7812      	ldrb	r2, [r2, #0]
 8006136:	4c3b      	ldr	r4, [pc, #236]	; (8006224 <can_tx_rx+0x2ac>)
 8006138:	9215      	str	r2, [sp, #84]	; 0x54
 800613a:	9314      	str	r3, [sp, #80]	; 0x50
 800613c:	2305      	movs	r3, #5
 800613e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006140:	4b3d      	ldr	r3, [pc, #244]	; (8006238 <can_tx_rx+0x2c0>)
 8006142:	9312      	str	r3, [sp, #72]	; 0x48
 8006144:	4668      	mov	r0, sp
 8006146:	f104 0310 	add.w	r3, r4, #16
 800614a:	2248      	movs	r2, #72	; 0x48
 800614c:	4619      	mov	r1, r3
 800614e:	f006 f95b 	bl	800c408 <memcpy>
 8006152:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006156:	eeb0 1a49 	vmov.f32	s2, s18
 800615a:	eef0 0a68 	vmov.f32	s1, s17
 800615e:	eeb0 0a48 	vmov.f32	s0, s16
 8006162:	f7fb fdb3 	bl	8001ccc <pack_reply_default>
					break;
 8006166:	e137      	b.n	80063d8 <can_tx_rx+0x460>

				case FC_HALL_CAL:
					hall_cal.hall_cal_count = 0;
 8006168:	4b32      	ldr	r3, [pc, #200]	; (8006234 <can_tx_rx+0x2bc>)
 800616a:	2200      	movs	r2, #0
 800616c:	625a      	str	r2, [r3, #36]	; 0x24
					hall_cal.hall_cal_state = 1; // calibrating
 800616e:	4b31      	ldr	r3, [pc, #196]	; (8006234 <can_tx_rx+0x2bc>)
 8006170:	2201      	movs	r2, #1
 8006172:	629a      	str	r2, [r3, #40]	; 0x28
					/*----- convert theta_mech to 0~359.9999deg -----*/
					hall_cal.hall_present_pos = controller.theta_mech;
 8006174:	4b2e      	ldr	r3, [pc, #184]	; (8006230 <can_tx_rx+0x2b8>)
 8006176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006178:	4a2e      	ldr	r2, [pc, #184]	; (8006234 <can_tx_rx+0x2bc>)
 800617a:	6113      	str	r3, [r2, #16]
					hall_cal.hall_cal_pcmd = controller.theta_mech;
 800617c:	4b2c      	ldr	r3, [pc, #176]	; (8006230 <can_tx_rx+0x2b8>)
 800617e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006180:	4a2c      	ldr	r2, [pc, #176]	; (8006234 <can_tx_rx+0x2bc>)
 8006182:	6093      	str	r3, [r2, #8]
					static float _f_cal_round;
					modff(hall_cal.hall_cal_pcmd/(2*PI_F),&_f_cal_round);
 8006184:	4b2b      	ldr	r3, [pc, #172]	; (8006234 <can_tx_rx+0x2bc>)
 8006186:	edd3 7a02 	vldr	s15, [r3, #8]
 800618a:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800623c <can_tx_rx+0x2c4>
 800618e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006192:	482b      	ldr	r0, [pc, #172]	; (8006240 <can_tx_rx+0x2c8>)
 8006194:	eeb0 0a47 	vmov.f32	s0, s14
 8006198:	f005 fe34 	bl	800be04 <modff>
					hall_cal.hall_cal_pcmd = hall_cal.hall_cal_pcmd - _f_cal_round*2*PI_F;
 800619c:	4b25      	ldr	r3, [pc, #148]	; (8006234 <can_tx_rx+0x2bc>)
 800619e:	ed93 7a02 	vldr	s14, [r3, #8]
 80061a2:	4b27      	ldr	r3, [pc, #156]	; (8006240 <can_tx_rx+0x2c8>)
 80061a4:	edd3 7a00 	vldr	s15, [r3]
 80061a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80061ac:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006244 <can_tx_rx+0x2cc>
 80061b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80061b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061b8:	4b1e      	ldr	r3, [pc, #120]	; (8006234 <can_tx_rx+0x2bc>)
 80061ba:	edc3 7a02 	vstr	s15, [r3, #8]
					if(hall_cal.hall_cal_pcmd < 0) hall_cal.hall_cal_pcmd = hall_cal.hall_cal_pcmd + 2*PI_F;
 80061be:	4b1d      	ldr	r3, [pc, #116]	; (8006234 <can_tx_rx+0x2bc>)
 80061c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80061c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061cc:	d509      	bpl.n	80061e2 <can_tx_rx+0x26a>
 80061ce:	4b19      	ldr	r3, [pc, #100]	; (8006234 <can_tx_rx+0x2bc>)
 80061d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80061d4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800623c <can_tx_rx+0x2c4>
 80061d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061dc:	4b15      	ldr	r3, [pc, #84]	; (8006234 <can_tx_rx+0x2bc>)
 80061de:	edc3 7a02 	vstr	s15, [r3, #8]
					update_fsm(&state, HALL_CAL_CMD);
 80061e2:	2168      	movs	r1, #104	; 0x68
 80061e4:	480e      	ldr	r0, [pc, #56]	; (8006220 <can_tx_rx+0x2a8>)
 80061e6:	f7fd fdcf 	bl	8003d88 <update_fsm>
					pack_reply_hall_cal(can_rx, &can_tx, VERSION_NUM, state.state);
 80061ea:	4b0d      	ldr	r3, [pc, #52]	; (8006220 <can_tx_rx+0x2a8>)
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	4c0d      	ldr	r4, [pc, #52]	; (8006224 <can_tx_rx+0x2ac>)
 80061f0:	9314      	str	r3, [sp, #80]	; 0x50
 80061f2:	2305      	movs	r3, #5
 80061f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80061f6:	4b10      	ldr	r3, [pc, #64]	; (8006238 <can_tx_rx+0x2c0>)
 80061f8:	9312      	str	r3, [sp, #72]	; 0x48
 80061fa:	4668      	mov	r0, sp
 80061fc:	f104 0310 	add.w	r3, r4, #16
 8006200:	2248      	movs	r2, #72	; 0x48
 8006202:	4619      	mov	r1, r3
 8006204:	f006 f900 	bl	800c408 <memcpy>
 8006208:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800620c:	f7fb fe8c 	bl	8001f28 <pack_reply_hall_cal>
					break;
 8006210:	e0e2      	b.n	80063d8 <can_tx_rx+0x460>
 8006212:	bf00      	nop
 8006214:	200094a8 	.word	0x200094a8
 8006218:	200094b0 	.word	0x200094b0
 800621c:	20000400 	.word	0x20000400
 8006220:	20000738 	.word	0x20000738
 8006224:	200094a0 	.word	0x200094a0
 8006228:	20000428 	.word	0x20000428
 800622c:	2000075c 	.word	0x2000075c
 8006230:	2000085c 	.word	0x2000085c
 8006234:	20000708 	.word	0x20000708
 8006238:	20009474 	.word	0x20009474
 800623c:	40c90fdb 	.word	0x40c90fdb
 8006240:	20000250 	.word	0x20000250
 8006244:	40490fdb 	.word	0x40490fdb

				case FC_ENTER_MOTOR:
					update_fsm(&state, MOTOR_CMD);
 8006248:	216d      	movs	r1, #109	; 0x6d
 800624a:	486c      	ldr	r0, [pc, #432]	; (80063fc <can_tx_rx+0x484>)
 800624c:	f7fd fd9c 	bl	8003d88 <update_fsm>
					pack_reply_default(can_rx, &can_tx, comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, VERSION_NUM, hall_cal.hall_cal_state, state.state);	// Pack response
 8006250:	4b6b      	ldr	r3, [pc, #428]	; (8006400 <can_tx_rx+0x488>)
 8006252:	ed93 7a03 	vldr	s14, [r3, #12]
 8006256:	4b6b      	ldr	r3, [pc, #428]	; (8006404 <can_tx_rx+0x48c>)
 8006258:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800625c:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8006260:	4b67      	ldr	r3, [pc, #412]	; (8006400 <can_tx_rx+0x488>)
 8006262:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8006266:	4b67      	ldr	r3, [pc, #412]	; (8006404 <can_tx_rx+0x48c>)
 8006268:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800626c:	eec7 8a27 	vdiv.f32	s17, s14, s15
 8006270:	4b65      	ldr	r3, [pc, #404]	; (8006408 <can_tx_rx+0x490>)
 8006272:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8006276:	4b63      	ldr	r3, [pc, #396]	; (8006404 <can_tx_rx+0x48c>)
 8006278:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800627c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006280:	4b60      	ldr	r3, [pc, #384]	; (8006404 <can_tx_rx+0x48c>)
 8006282:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006286:	ee27 9a27 	vmul.f32	s18, s14, s15
 800628a:	4b60      	ldr	r3, [pc, #384]	; (800640c <can_tx_rx+0x494>)
 800628c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628e:	4a5b      	ldr	r2, [pc, #364]	; (80063fc <can_tx_rx+0x484>)
 8006290:	7812      	ldrb	r2, [r2, #0]
 8006292:	4c5f      	ldr	r4, [pc, #380]	; (8006410 <can_tx_rx+0x498>)
 8006294:	9215      	str	r2, [sp, #84]	; 0x54
 8006296:	9314      	str	r3, [sp, #80]	; 0x50
 8006298:	2305      	movs	r3, #5
 800629a:	9313      	str	r3, [sp, #76]	; 0x4c
 800629c:	4b5d      	ldr	r3, [pc, #372]	; (8006414 <can_tx_rx+0x49c>)
 800629e:	9312      	str	r3, [sp, #72]	; 0x48
 80062a0:	4668      	mov	r0, sp
 80062a2:	f104 0310 	add.w	r3, r4, #16
 80062a6:	2248      	movs	r2, #72	; 0x48
 80062a8:	4619      	mov	r1, r3
 80062aa:	f006 f8ad 	bl	800c408 <memcpy>
 80062ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80062b2:	eeb0 1a49 	vmov.f32	s2, s18
 80062b6:	eef0 0a68 	vmov.f32	s1, s17
 80062ba:	eeb0 0a48 	vmov.f32	s0, s16
 80062be:	f7fb fd05 	bl	8001ccc <pack_reply_default>
					break;
 80062c2:	e089      	b.n	80063d8 <can_tx_rx+0x460>

				case FC_CONTROL_CMD:
					pack_reply_default(can_rx, &can_tx, comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, VERSION_NUM, hall_cal.hall_cal_state, state.state);	// Pack response
 80062c4:	4b4e      	ldr	r3, [pc, #312]	; (8006400 <can_tx_rx+0x488>)
 80062c6:	ed93 7a03 	vldr	s14, [r3, #12]
 80062ca:	4b4e      	ldr	r3, [pc, #312]	; (8006404 <can_tx_rx+0x48c>)
 80062cc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80062d0:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80062d4:	4b4a      	ldr	r3, [pc, #296]	; (8006400 <can_tx_rx+0x488>)
 80062d6:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80062da:	4b4a      	ldr	r3, [pc, #296]	; (8006404 <can_tx_rx+0x48c>)
 80062dc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80062e0:	eec7 8a27 	vdiv.f32	s17, s14, s15
 80062e4:	4b48      	ldr	r3, [pc, #288]	; (8006408 <can_tx_rx+0x490>)
 80062e6:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80062ea:	4b46      	ldr	r3, [pc, #280]	; (8006404 <can_tx_rx+0x48c>)
 80062ec:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80062f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062f4:	4b43      	ldr	r3, [pc, #268]	; (8006404 <can_tx_rx+0x48c>)
 80062f6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80062fa:	ee27 9a27 	vmul.f32	s18, s14, s15
 80062fe:	4b43      	ldr	r3, [pc, #268]	; (800640c <can_tx_rx+0x494>)
 8006300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006302:	4a3e      	ldr	r2, [pc, #248]	; (80063fc <can_tx_rx+0x484>)
 8006304:	7812      	ldrb	r2, [r2, #0]
 8006306:	4c42      	ldr	r4, [pc, #264]	; (8006410 <can_tx_rx+0x498>)
 8006308:	9215      	str	r2, [sp, #84]	; 0x54
 800630a:	9314      	str	r3, [sp, #80]	; 0x50
 800630c:	2305      	movs	r3, #5
 800630e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006310:	4b40      	ldr	r3, [pc, #256]	; (8006414 <can_tx_rx+0x49c>)
 8006312:	9312      	str	r3, [sp, #72]	; 0x48
 8006314:	4668      	mov	r0, sp
 8006316:	f104 0310 	add.w	r3, r4, #16
 800631a:	2248      	movs	r2, #72	; 0x48
 800631c:	4619      	mov	r1, r3
 800631e:	f006 f873 	bl	800c408 <memcpy>
 8006322:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006326:	eeb0 1a49 	vmov.f32	s2, s18
 800632a:	eef0 0a68 	vmov.f32	s1, s17
 800632e:	eeb0 0a48 	vmov.f32	s0, s16
 8006332:	f7fb fccb 	bl	8001ccc <pack_reply_default>
					unpack_control_cmd(can_rx, controller.commands);	// Unpack commands
 8006336:	4c36      	ldr	r4, [pc, #216]	; (8006410 <can_tx_rx+0x498>)
 8006338:	4b37      	ldr	r3, [pc, #220]	; (8006418 <can_tx_rx+0x4a0>)
 800633a:	9312      	str	r3, [sp, #72]	; 0x48
 800633c:	4668      	mov	r0, sp
 800633e:	f104 0310 	add.w	r3, r4, #16
 8006342:	2248      	movs	r2, #72	; 0x48
 8006344:	4619      	mov	r1, r3
 8006346:	f006 f85f 	bl	800c408 <memcpy>
 800634a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800634e:	f7fb fe2b 	bl	8001fa8 <unpack_control_cmd>

					controller.timeout = 0;					    // Reset timeout counter
 8006352:	4b2d      	ldr	r3, [pc, #180]	; (8006408 <can_tx_rx+0x490>)
 8006354:	2200      	movs	r2, #0
 8006356:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					controller.i_mag_max = controller.i_q;
 800635a:	4b2b      	ldr	r3, [pc, #172]	; (8006408 <can_tx_rx+0x490>)
 800635c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635e:	4a2a      	ldr	r2, [pc, #168]	; (8006408 <can_tx_rx+0x490>)
 8006360:	6513      	str	r3, [r2, #80]	; 0x50
					break;
 8006362:	e039      	b.n	80063d8 <can_tx_rx+0x460>

				default:
					pack_reply_default(can_rx, &can_tx, comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, VERSION_NUM, hall_cal.hall_cal_state, state.state);	// Pack response
 8006364:	4b26      	ldr	r3, [pc, #152]	; (8006400 <can_tx_rx+0x488>)
 8006366:	ed93 7a03 	vldr	s14, [r3, #12]
 800636a:	4b26      	ldr	r3, [pc, #152]	; (8006404 <can_tx_rx+0x48c>)
 800636c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006370:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8006374:	4b22      	ldr	r3, [pc, #136]	; (8006400 <can_tx_rx+0x488>)
 8006376:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800637a:	4b22      	ldr	r3, [pc, #136]	; (8006404 <can_tx_rx+0x48c>)
 800637c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006380:	eec7 8a27 	vdiv.f32	s17, s14, s15
 8006384:	4b20      	ldr	r3, [pc, #128]	; (8006408 <can_tx_rx+0x490>)
 8006386:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800638a:	4b1e      	ldr	r3, [pc, #120]	; (8006404 <can_tx_rx+0x48c>)
 800638c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006390:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006394:	4b1b      	ldr	r3, [pc, #108]	; (8006404 <can_tx_rx+0x48c>)
 8006396:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800639a:	ee27 9a27 	vmul.f32	s18, s14, s15
 800639e:	4b1b      	ldr	r3, [pc, #108]	; (800640c <can_tx_rx+0x494>)
 80063a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a2:	4a16      	ldr	r2, [pc, #88]	; (80063fc <can_tx_rx+0x484>)
 80063a4:	7812      	ldrb	r2, [r2, #0]
 80063a6:	4c1a      	ldr	r4, [pc, #104]	; (8006410 <can_tx_rx+0x498>)
 80063a8:	9215      	str	r2, [sp, #84]	; 0x54
 80063aa:	9314      	str	r3, [sp, #80]	; 0x50
 80063ac:	2305      	movs	r3, #5
 80063ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80063b0:	4b18      	ldr	r3, [pc, #96]	; (8006414 <can_tx_rx+0x49c>)
 80063b2:	9312      	str	r3, [sp, #72]	; 0x48
 80063b4:	4668      	mov	r0, sp
 80063b6:	f104 0310 	add.w	r3, r4, #16
 80063ba:	2248      	movs	r2, #72	; 0x48
 80063bc:	4619      	mov	r1, r3
 80063be:	f006 f823 	bl	800c408 <memcpy>
 80063c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80063c6:	eeb0 1a49 	vmov.f32	s2, s18
 80063ca:	eef0 0a68 	vmov.f32	s1, s17
 80063ce:	eeb0 0a48 	vmov.f32	s0, s16
 80063d2:	f7fb fc7b 	bl	8001ccc <pack_reply_default>
					break;
 80063d6:	bf00      	nop
			}

		can_tx.tx_header.StdId = can_rx.rx_header.StdId | 0x400;
 80063d8:	4b0d      	ldr	r3, [pc, #52]	; (8006410 <can_tx_rx+0x498>)
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80063e0:	4a0c      	ldr	r2, [pc, #48]	; (8006414 <can_tx_rx+0x49c>)
 80063e2:	60d3      	str	r3, [r2, #12]
		HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 80063e4:	463b      	mov	r3, r7
 80063e6:	4a0d      	ldr	r2, [pc, #52]	; (800641c <can_tx_rx+0x4a4>)
 80063e8:	490d      	ldr	r1, [pc, #52]	; (8006420 <can_tx_rx+0x4a8>)
 80063ea:	480e      	ldr	r0, [pc, #56]	; (8006424 <can_tx_rx+0x4ac>)
 80063ec:	f001 fd8c 	bl	8007f08 <HAL_CAN_AddTxMessage>
	}

}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	ecbd 8b04 	vpop	{d8-d9}
 80063fa:	bd90      	pop	{r4, r7, pc}
 80063fc:	20000738 	.word	0x20000738
 8006400:	20000428 	.word	0x20000428
 8006404:	2000075c 	.word	0x2000075c
 8006408:	2000085c 	.word	0x2000085c
 800640c:	20000708 	.word	0x20000708
 8006410:	200094a0 	.word	0x200094a0
 8006414:	20009474 	.word	0x20009474
 8006418:	20000934 	.word	0x20000934
 800641c:	20009475 	.word	0x20009475
 8006420:	20009480 	.word	0x20009480
 8006424:	20000400 	.word	0x20000400

08006428 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006428:	b480      	push	{r7}
 800642a:	af00      	add	r7, sp, #0
	return 1;
 800642c:	2301      	movs	r3, #1
}
 800642e:	4618      	mov	r0, r3
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <_kill>:

int _kill(int pid, int sig)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006442:	f005 ffb7 	bl	800c3b4 <__errno>
 8006446:	4603      	mov	r3, r0
 8006448:	2216      	movs	r2, #22
 800644a:	601a      	str	r2, [r3, #0]
	return -1;
 800644c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006450:	4618      	mov	r0, r3
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <_exit>:

void _exit (int status)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006460:	f04f 31ff 	mov.w	r1, #4294967295
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7ff ffe7 	bl	8006438 <_kill>
	while (1) {}		/* Make sure we hang here */
 800646a:	e7fe      	b.n	800646a <_exit+0x12>

0800646c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006478:	2300      	movs	r3, #0
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	e00a      	b.n	8006494 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800647e:	f3af 8000 	nop.w
 8006482:	4601      	mov	r1, r0
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	60ba      	str	r2, [r7, #8]
 800648a:	b2ca      	uxtb	r2, r1
 800648c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	3301      	adds	r3, #1
 8006492:	617b      	str	r3, [r7, #20]
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	429a      	cmp	r2, r3
 800649a:	dbf0      	blt.n	800647e <_read+0x12>
	}

return len;
 800649c:	687b      	ldr	r3, [r7, #4]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b086      	sub	sp, #24
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	60f8      	str	r0, [r7, #12]
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064b2:	2300      	movs	r3, #0
 80064b4:	617b      	str	r3, [r7, #20]
 80064b6:	e009      	b.n	80064cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	1c5a      	adds	r2, r3, #1
 80064bc:	60ba      	str	r2, [r7, #8]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 fa17 	bl	80068f4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	3301      	adds	r3, #1
 80064ca:	617b      	str	r3, [r7, #20]
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	dbf1      	blt.n	80064b8 <_write+0x12>
	}
	return len;
 80064d4:	687b      	ldr	r3, [r7, #4]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <_close>:

int _close(int file)
{
 80064de:	b480      	push	{r7}
 80064e0:	b083      	sub	sp, #12
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
	return -1;
 80064e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b083      	sub	sp, #12
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006506:	605a      	str	r2, [r3, #4]
	return 0;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <_isatty>:

int _isatty(int file)
{
 8006516:	b480      	push	{r7}
 8006518:	b083      	sub	sp, #12
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
	return 1;
 800651e:	2301      	movs	r3, #1
}
 8006520:	4618      	mov	r0, r3
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
	return 0;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
	...

08006548 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006550:	4b11      	ldr	r3, [pc, #68]	; (8006598 <_sbrk+0x50>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d102      	bne.n	800655e <_sbrk+0x16>
		heap_end = &end;
 8006558:	4b0f      	ldr	r3, [pc, #60]	; (8006598 <_sbrk+0x50>)
 800655a:	4a10      	ldr	r2, [pc, #64]	; (800659c <_sbrk+0x54>)
 800655c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800655e:	4b0e      	ldr	r3, [pc, #56]	; (8006598 <_sbrk+0x50>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006564:	4b0c      	ldr	r3, [pc, #48]	; (8006598 <_sbrk+0x50>)
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4413      	add	r3, r2
 800656c:	466a      	mov	r2, sp
 800656e:	4293      	cmp	r3, r2
 8006570:	d907      	bls.n	8006582 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006572:	f005 ff1f 	bl	800c3b4 <__errno>
 8006576:	4603      	mov	r3, r0
 8006578:	220c      	movs	r2, #12
 800657a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800657c:	f04f 33ff 	mov.w	r3, #4294967295
 8006580:	e006      	b.n	8006590 <_sbrk+0x48>
	}

	heap_end += incr;
 8006582:	4b05      	ldr	r3, [pc, #20]	; (8006598 <_sbrk+0x50>)
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4413      	add	r3, r2
 800658a:	4a03      	ldr	r2, [pc, #12]	; (8006598 <_sbrk+0x50>)
 800658c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800658e:	68fb      	ldr	r3, [r7, #12]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	20000254 	.word	0x20000254
 800659c:	2000aa70 	.word	0x2000aa70

080065a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80065a0:	b480      	push	{r7}
 80065a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80065a4:	4b08      	ldr	r3, [pc, #32]	; (80065c8 <SystemInit+0x28>)
 80065a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065aa:	4a07      	ldr	r2, [pc, #28]	; (80065c8 <SystemInit+0x28>)
 80065ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80065b4:	4b04      	ldr	r3, [pc, #16]	; (80065c8 <SystemInit+0x28>)
 80065b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80065ba:	609a      	str	r2, [r3, #8]
#endif
}
 80065bc:	bf00      	nop
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	e000ed00 	.word	0xe000ed00

080065cc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b096      	sub	sp, #88	; 0x58
 80065d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80065d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80065d6:	2200      	movs	r2, #0
 80065d8:	601a      	str	r2, [r3, #0]
 80065da:	605a      	str	r2, [r3, #4]
 80065dc:	609a      	str	r2, [r3, #8]
 80065de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80065e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80065e4:	2200      	movs	r2, #0
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80065ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065ee:	2200      	movs	r2, #0
 80065f0:	601a      	str	r2, [r3, #0]
 80065f2:	605a      	str	r2, [r3, #4]
 80065f4:	609a      	str	r2, [r3, #8]
 80065f6:	60da      	str	r2, [r3, #12]
 80065f8:	611a      	str	r2, [r3, #16]
 80065fa:	615a      	str	r2, [r3, #20]
 80065fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80065fe:	1d3b      	adds	r3, r7, #4
 8006600:	2220      	movs	r2, #32
 8006602:	2100      	movs	r1, #0
 8006604:	4618      	mov	r0, r3
 8006606:	f005 ff0d 	bl	800c424 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800660a:	4b4a      	ldr	r3, [pc, #296]	; (8006734 <MX_TIM1_Init+0x168>)
 800660c:	4a4a      	ldr	r2, [pc, #296]	; (8006738 <MX_TIM1_Init+0x16c>)
 800660e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006610:	4b48      	ldr	r3, [pc, #288]	; (8006734 <MX_TIM1_Init+0x168>)
 8006612:	2200      	movs	r2, #0
 8006614:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8006616:	4b47      	ldr	r3, [pc, #284]	; (8006734 <MX_TIM1_Init+0x168>)
 8006618:	2220      	movs	r2, #32
 800661a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0x8CA;
 800661c:	4b45      	ldr	r3, [pc, #276]	; (8006734 <MX_TIM1_Init+0x168>)
 800661e:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8006622:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006624:	4b43      	ldr	r3, [pc, #268]	; (8006734 <MX_TIM1_Init+0x168>)
 8006626:	2200      	movs	r2, #0
 8006628:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 800662a:	4b42      	ldr	r3, [pc, #264]	; (8006734 <MX_TIM1_Init+0x168>)
 800662c:	2201      	movs	r2, #1
 800662e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006630:	4b40      	ldr	r3, [pc, #256]	; (8006734 <MX_TIM1_Init+0x168>)
 8006632:	2280      	movs	r2, #128	; 0x80
 8006634:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006636:	483f      	ldr	r0, [pc, #252]	; (8006734 <MX_TIM1_Init+0x168>)
 8006638:	f003 fca6 	bl	8009f88 <HAL_TIM_Base_Init>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d001      	beq.n	8006646 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8006642:	f7fe fd6d 	bl	8005120 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800664a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800664c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006650:	4619      	mov	r1, r3
 8006652:	4838      	ldr	r0, [pc, #224]	; (8006734 <MX_TIM1_Init+0x168>)
 8006654:	f004 f840 	bl	800a6d8 <HAL_TIM_ConfigClockSource>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800665e:	f7fe fd5f 	bl	8005120 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006662:	4834      	ldr	r0, [pc, #208]	; (8006734 <MX_TIM1_Init+0x168>)
 8006664:	f003 fd50 	bl	800a108 <HAL_TIM_PWM_Init>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800666e:	f7fe fd57 	bl	8005120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006672:	2300      	movs	r3, #0
 8006674:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006676:	2300      	movs	r3, #0
 8006678:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800667a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800667e:	4619      	mov	r1, r3
 8006680:	482c      	ldr	r0, [pc, #176]	; (8006734 <MX_TIM1_Init+0x168>)
 8006682:	f004 fc2f 	bl	800aee4 <HAL_TIMEx_MasterConfigSynchronization>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d001      	beq.n	8006690 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800668c:	f7fe fd48 	bl	8005120 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006690:	2360      	movs	r3, #96	; 0x60
 8006692:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8006694:	2300      	movs	r3, #0
 8006696:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8006698:	2302      	movs	r3, #2
 800669a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800669c:	2300      	movs	r3, #0
 800669e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80066a0:	2304      	movs	r3, #4
 80066a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80066a4:	2300      	movs	r3, #0
 80066a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80066a8:	2300      	movs	r3, #0
 80066aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80066ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066b0:	2200      	movs	r2, #0
 80066b2:	4619      	mov	r1, r3
 80066b4:	481f      	ldr	r0, [pc, #124]	; (8006734 <MX_TIM1_Init+0x168>)
 80066b6:	f003 ff51 	bl	800a55c <HAL_TIM_PWM_ConfigChannel>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80066c0:	f7fe fd2e 	bl	8005120 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80066c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066c8:	2204      	movs	r2, #4
 80066ca:	4619      	mov	r1, r3
 80066cc:	4819      	ldr	r0, [pc, #100]	; (8006734 <MX_TIM1_Init+0x168>)
 80066ce:	f003 ff45 	bl	800a55c <HAL_TIM_PWM_ConfigChannel>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d001      	beq.n	80066dc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80066d8:	f7fe fd22 	bl	8005120 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80066dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066e0:	2208      	movs	r2, #8
 80066e2:	4619      	mov	r1, r3
 80066e4:	4813      	ldr	r0, [pc, #76]	; (8006734 <MX_TIM1_Init+0x168>)
 80066e6:	f003 ff39 	bl	800a55c <HAL_TIM_PWM_ConfigChannel>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80066f0:	f7fe fd16 	bl	8005120 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80066f4:	2300      	movs	r3, #0
 80066f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80066f8:	2300      	movs	r3, #0
 80066fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80066fc:	2300      	movs	r3, #0
 80066fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006700:	2300      	movs	r3, #0
 8006702:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006704:	2300      	movs	r3, #0
 8006706:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006708:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800670c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800670e:	2300      	movs	r3, #0
 8006710:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006712:	1d3b      	adds	r3, r7, #4
 8006714:	4619      	mov	r1, r3
 8006716:	4807      	ldr	r0, [pc, #28]	; (8006734 <MX_TIM1_Init+0x168>)
 8006718:	f004 fc60 	bl	800afdc <HAL_TIMEx_ConfigBreakDeadTime>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8006722:	f7fe fcfd 	bl	8005120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006726:	4803      	ldr	r0, [pc, #12]	; (8006734 <MX_TIM1_Init+0x168>)
 8006728:	f000 f830 	bl	800678c <HAL_TIM_MspPostInit>

}
 800672c:	bf00      	nop
 800672e:	3758      	adds	r7, #88	; 0x58
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	200095d0 	.word	0x200095d0
 8006738:	40010000 	.word	0x40010000

0800673c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a0e      	ldr	r2, [pc, #56]	; (8006784 <HAL_TIM_Base_MspInit+0x48>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d115      	bne.n	800677a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800674e:	2300      	movs	r3, #0
 8006750:	60fb      	str	r3, [r7, #12]
 8006752:	4b0d      	ldr	r3, [pc, #52]	; (8006788 <HAL_TIM_Base_MspInit+0x4c>)
 8006754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006756:	4a0c      	ldr	r2, [pc, #48]	; (8006788 <HAL_TIM_Base_MspInit+0x4c>)
 8006758:	f043 0301 	orr.w	r3, r3, #1
 800675c:	6453      	str	r3, [r2, #68]	; 0x44
 800675e:	4b0a      	ldr	r3, [pc, #40]	; (8006788 <HAL_TIM_Base_MspInit+0x4c>)
 8006760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	60fb      	str	r3, [r7, #12]
 8006768:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800676a:	2200      	movs	r2, #0
 800676c:	2100      	movs	r1, #0
 800676e:	2019      	movs	r0, #25
 8006770:	f002 f8cb 	bl	800890a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006774:	2019      	movs	r0, #25
 8006776:	f002 f8e4 	bl	8008942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800677a:	bf00      	nop
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	40010000 	.word	0x40010000
 8006788:	40023800 	.word	0x40023800

0800678c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b088      	sub	sp, #32
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006794:	f107 030c 	add.w	r3, r7, #12
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	605a      	str	r2, [r3, #4]
 800679e:	609a      	str	r2, [r3, #8]
 80067a0:	60da      	str	r2, [r3, #12]
 80067a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a12      	ldr	r2, [pc, #72]	; (80067f4 <HAL_TIM_MspPostInit+0x68>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d11e      	bne.n	80067ec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067ae:	2300      	movs	r3, #0
 80067b0:	60bb      	str	r3, [r7, #8]
 80067b2:	4b11      	ldr	r3, [pc, #68]	; (80067f8 <HAL_TIM_MspPostInit+0x6c>)
 80067b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b6:	4a10      	ldr	r2, [pc, #64]	; (80067f8 <HAL_TIM_MspPostInit+0x6c>)
 80067b8:	f043 0301 	orr.w	r3, r3, #1
 80067bc:	6313      	str	r3, [r2, #48]	; 0x30
 80067be:	4b0e      	ldr	r3, [pc, #56]	; (80067f8 <HAL_TIM_MspPostInit+0x6c>)
 80067c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	60bb      	str	r3, [r7, #8]
 80067c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80067ca:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80067ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067d0:	2302      	movs	r3, #2
 80067d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067d4:	2300      	movs	r3, #0
 80067d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067d8:	2303      	movs	r3, #3
 80067da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80067dc:	2301      	movs	r3, #1
 80067de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067e0:	f107 030c 	add.w	r3, r7, #12
 80067e4:	4619      	mov	r1, r3
 80067e6:	4805      	ldr	r0, [pc, #20]	; (80067fc <HAL_TIM_MspPostInit+0x70>)
 80067e8:	f002 f958 	bl	8008a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80067ec:	bf00      	nop
 80067ee:	3720      	adds	r7, #32
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	40010000 	.word	0x40010000
 80067f8:	40023800 	.word	0x40023800
 80067fc:	40020000 	.word	0x40020000

08006800 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006804:	4b11      	ldr	r3, [pc, #68]	; (800684c <MX_USART2_UART_Init+0x4c>)
 8006806:	4a12      	ldr	r2, [pc, #72]	; (8006850 <MX_USART2_UART_Init+0x50>)
 8006808:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800680a:	4b10      	ldr	r3, [pc, #64]	; (800684c <MX_USART2_UART_Init+0x4c>)
 800680c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006810:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006812:	4b0e      	ldr	r3, [pc, #56]	; (800684c <MX_USART2_UART_Init+0x4c>)
 8006814:	2200      	movs	r2, #0
 8006816:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006818:	4b0c      	ldr	r3, [pc, #48]	; (800684c <MX_USART2_UART_Init+0x4c>)
 800681a:	2200      	movs	r2, #0
 800681c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800681e:	4b0b      	ldr	r3, [pc, #44]	; (800684c <MX_USART2_UART_Init+0x4c>)
 8006820:	2200      	movs	r2, #0
 8006822:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006824:	4b09      	ldr	r3, [pc, #36]	; (800684c <MX_USART2_UART_Init+0x4c>)
 8006826:	220c      	movs	r2, #12
 8006828:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800682a:	4b08      	ldr	r3, [pc, #32]	; (800684c <MX_USART2_UART_Init+0x4c>)
 800682c:	2200      	movs	r2, #0
 800682e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006830:	4b06      	ldr	r3, [pc, #24]	; (800684c <MX_USART2_UART_Init+0x4c>)
 8006832:	2200      	movs	r2, #0
 8006834:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006836:	4805      	ldr	r0, [pc, #20]	; (800684c <MX_USART2_UART_Init+0x4c>)
 8006838:	f004 fc36 	bl	800b0a8 <HAL_UART_Init>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006842:	f7fe fc6d 	bl	8005120 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006846:	bf00      	nop
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	20009618 	.word	0x20009618
 8006850:	40004400 	.word	0x40004400

08006854 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b08a      	sub	sp, #40	; 0x28
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800685c:	f107 0314 	add.w	r3, r7, #20
 8006860:	2200      	movs	r2, #0
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	605a      	str	r2, [r3, #4]
 8006866:	609a      	str	r2, [r3, #8]
 8006868:	60da      	str	r2, [r3, #12]
 800686a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a1d      	ldr	r2, [pc, #116]	; (80068e8 <HAL_UART_MspInit+0x94>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d133      	bne.n	80068de <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006876:	2300      	movs	r3, #0
 8006878:	613b      	str	r3, [r7, #16]
 800687a:	4b1c      	ldr	r3, [pc, #112]	; (80068ec <HAL_UART_MspInit+0x98>)
 800687c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687e:	4a1b      	ldr	r2, [pc, #108]	; (80068ec <HAL_UART_MspInit+0x98>)
 8006880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006884:	6413      	str	r3, [r2, #64]	; 0x40
 8006886:	4b19      	ldr	r3, [pc, #100]	; (80068ec <HAL_UART_MspInit+0x98>)
 8006888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800688e:	613b      	str	r3, [r7, #16]
 8006890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006892:	2300      	movs	r3, #0
 8006894:	60fb      	str	r3, [r7, #12]
 8006896:	4b15      	ldr	r3, [pc, #84]	; (80068ec <HAL_UART_MspInit+0x98>)
 8006898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689a:	4a14      	ldr	r2, [pc, #80]	; (80068ec <HAL_UART_MspInit+0x98>)
 800689c:	f043 0301 	orr.w	r3, r3, #1
 80068a0:	6313      	str	r3, [r2, #48]	; 0x30
 80068a2:	4b12      	ldr	r3, [pc, #72]	; (80068ec <HAL_UART_MspInit+0x98>)
 80068a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80068ae:	230c      	movs	r3, #12
 80068b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068b2:	2302      	movs	r3, #2
 80068b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068b6:	2300      	movs	r3, #0
 80068b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068ba:	2303      	movs	r3, #3
 80068bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80068be:	2307      	movs	r3, #7
 80068c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068c2:	f107 0314 	add.w	r3, r7, #20
 80068c6:	4619      	mov	r1, r3
 80068c8:	4809      	ldr	r0, [pc, #36]	; (80068f0 <HAL_UART_MspInit+0x9c>)
 80068ca:	f002 f8e7 	bl	8008a9c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80068ce:	2200      	movs	r2, #0
 80068d0:	2100      	movs	r1, #0
 80068d2:	2026      	movs	r0, #38	; 0x26
 80068d4:	f002 f819 	bl	800890a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80068d8:	2026      	movs	r0, #38	; 0x26
 80068da:	f002 f832 	bl	8008942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80068de:	bf00      	nop
 80068e0:	3728      	adds	r7, #40	; 0x28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	40004400 	.word	0x40004400
 80068ec:	40023800 	.word	0x40023800
 80068f0:	40020000 	.word	0x40020000

080068f4 <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 80068fc:	1d39      	adds	r1, r7, #4
 80068fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006902:	2201      	movs	r2, #1
 8006904:	4803      	ldr	r0, [pc, #12]	; (8006914 <__io_putchar+0x20>)
 8006906:	f004 fc1c 	bl	800b142 <HAL_UART_Transmit>
return 0;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	20009618 	.word	0x20009618

08006918 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8006920:	2201      	movs	r2, #1
 8006922:	4904      	ldr	r1, [pc, #16]	; (8006934 <HAL_UART_RxCpltCallback+0x1c>)
 8006924:	4804      	ldr	r0, [pc, #16]	; (8006938 <HAL_UART_RxCpltCallback+0x20>)
 8006926:	f004 fc9e 	bl	800b266 <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800692a:	bf00      	nop
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	20000734 	.word	0x20000734
 8006938:	20009618 	.word	0x20009618

0800693c <user_config_initialize>:
#include <stdio.h>

struct FloatRegConfig float_reg_config[FLOAT_REG_LENGTH];
struct IntRegConfig int_reg_config[INT_REG_LENGTH];

void user_config_initialize(void){
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
	for (int i=0; i<FLOAT_REG_LENGTH; i++){
 8006942:	2300      	movs	r3, #0
 8006944:	607b      	str	r3, [r7, #4]
 8006946:	e01f      	b.n	8006988 <user_config_initialize+0x4c>
		float_reg_config[i].name = "";
 8006948:	4a12      	ldr	r2, [pc, #72]	; (8006994 <user_config_initialize+0x58>)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	011b      	lsls	r3, r3, #4
 800694e:	4413      	add	r3, r2
 8006950:	4a11      	ldr	r2, [pc, #68]	; (8006998 <user_config_initialize+0x5c>)
 8006952:	601a      	str	r2, [r3, #0]
		float_reg_config[i].cmd = ' ';
 8006954:	4a0f      	ldr	r2, [pc, #60]	; (8006994 <user_config_initialize+0x58>)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	011b      	lsls	r3, r3, #4
 800695a:	4413      	add	r3, r2
 800695c:	3304      	adds	r3, #4
 800695e:	2220      	movs	r2, #32
 8006960:	701a      	strb	r2, [r3, #0]
		float_reg_config[i].f_MIN = 0;
 8006962:	4a0c      	ldr	r2, [pc, #48]	; (8006994 <user_config_initialize+0x58>)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	011b      	lsls	r3, r3, #4
 8006968:	4413      	add	r3, r2
 800696a:	3308      	adds	r3, #8
 800696c:	f04f 0200 	mov.w	r2, #0
 8006970:	601a      	str	r2, [r3, #0]
		float_reg_config[i].f_MAX = 0;
 8006972:	4a08      	ldr	r2, [pc, #32]	; (8006994 <user_config_initialize+0x58>)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	011b      	lsls	r3, r3, #4
 8006978:	4413      	add	r3, r2
 800697a:	330c      	adds	r3, #12
 800697c:	f04f 0200 	mov.w	r2, #0
 8006980:	601a      	str	r2, [r3, #0]
	for (int i=0; i<FLOAT_REG_LENGTH; i++){
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	3301      	adds	r3, #1
 8006986:	607b      	str	r3, [r7, #4]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b3f      	cmp	r3, #63	; 0x3f
 800698c:	dddc      	ble.n	8006948 <user_config_initialize+0xc>
	}

	for (int i=0; i<INT_REG_LENGTH; i++){
 800698e:	2300      	movs	r3, #0
 8006990:	603b      	str	r3, [r7, #0]
 8006992:	e021      	b.n	80069d8 <user_config_initialize+0x9c>
 8006994:	2000965c 	.word	0x2000965c
 8006998:	08011328 	.word	0x08011328
		int_reg_config[i].name = "";
 800699c:	4ab7      	ldr	r2, [pc, #732]	; (8006c7c <user_config_initialize+0x340>)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	011b      	lsls	r3, r3, #4
 80069a2:	4413      	add	r3, r2
 80069a4:	4ab6      	ldr	r2, [pc, #728]	; (8006c80 <user_config_initialize+0x344>)
 80069a6:	601a      	str	r2, [r3, #0]
		int_reg_config[i].cmd = ' ';
 80069a8:	4ab4      	ldr	r2, [pc, #720]	; (8006c7c <user_config_initialize+0x340>)
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	011b      	lsls	r3, r3, #4
 80069ae:	4413      	add	r3, r2
 80069b0:	3304      	adds	r3, #4
 80069b2:	2220      	movs	r2, #32
 80069b4:	701a      	strb	r2, [r3, #0]
		int_reg_config[i].i_MIN = 0;
 80069b6:	4ab1      	ldr	r2, [pc, #708]	; (8006c7c <user_config_initialize+0x340>)
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	4413      	add	r3, r2
 80069be:	3308      	adds	r3, #8
 80069c0:	2200      	movs	r2, #0
 80069c2:	601a      	str	r2, [r3, #0]
		int_reg_config[i].i_MAX = 0;
 80069c4:	4aad      	ldr	r2, [pc, #692]	; (8006c7c <user_config_initialize+0x340>)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	011b      	lsls	r3, r3, #4
 80069ca:	4413      	add	r3, r2
 80069cc:	330c      	adds	r3, #12
 80069ce:	2200      	movs	r2, #0
 80069d0:	601a      	str	r2, [r3, #0]
	for (int i=0; i<INT_REG_LENGTH; i++){
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	3301      	adds	r3, #1
 80069d6:	603b      	str	r3, [r7, #0]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	2bff      	cmp	r3, #255	; 0xff
 80069dc:	ddde      	ble.n	800699c <user_config_initialize+0x60>
	}

	// initialize the float_reg_config array
	float_reg_config[ADDR_I_BW].name				= NAME_I_BW;
 80069de:	4ba9      	ldr	r3, [pc, #676]	; (8006c84 <user_config_initialize+0x348>)
 80069e0:	4aa9      	ldr	r2, [pc, #676]	; (8006c88 <user_config_initialize+0x34c>)
 80069e2:	621a      	str	r2, [r3, #32]
	float_reg_config[ADDR_I_BW].cmd					= CMD_I_BW;
 80069e4:	4ba7      	ldr	r3, [pc, #668]	; (8006c84 <user_config_initialize+0x348>)
 80069e6:	2262      	movs	r2, #98	; 0x62
 80069e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	float_reg_config[ADDR_I_BW].f_MIN				= MIN_I_BW;
 80069ec:	4ba5      	ldr	r3, [pc, #660]	; (8006c84 <user_config_initialize+0x348>)
 80069ee:	4aa7      	ldr	r2, [pc, #668]	; (8006c8c <user_config_initialize+0x350>)
 80069f0:	629a      	str	r2, [r3, #40]	; 0x28
	float_reg_config[ADDR_I_BW].f_MAX				= MAX_I_BW;
 80069f2:	4ba4      	ldr	r3, [pc, #656]	; (8006c84 <user_config_initialize+0x348>)
 80069f4:	4aa6      	ldr	r2, [pc, #664]	; (8006c90 <user_config_initialize+0x354>)
 80069f6:	62da      	str	r2, [r3, #44]	; 0x2c

	float_reg_config[ADDR_I_MAX].name				= NAME_I_MAX;
 80069f8:	4ba2      	ldr	r3, [pc, #648]	; (8006c84 <user_config_initialize+0x348>)
 80069fa:	4aa6      	ldr	r2, [pc, #664]	; (8006c94 <user_config_initialize+0x358>)
 80069fc:	631a      	str	r2, [r3, #48]	; 0x30
	float_reg_config[ADDR_I_MAX].cmd				= CMD_I_MAX;
 80069fe:	4ba1      	ldr	r3, [pc, #644]	; (8006c84 <user_config_initialize+0x348>)
 8006a00:	226c      	movs	r2, #108	; 0x6c
 8006a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	float_reg_config[ADDR_I_MAX].f_MIN				= MIN_I_MAX;
 8006a06:	4b9f      	ldr	r3, [pc, #636]	; (8006c84 <user_config_initialize+0x348>)
 8006a08:	f04f 0200 	mov.w	r2, #0
 8006a0c:	639a      	str	r2, [r3, #56]	; 0x38
	float_reg_config[ADDR_I_MAX].f_MAX				= MAX_I_MAX;
 8006a0e:	4b9d      	ldr	r3, [pc, #628]	; (8006c84 <user_config_initialize+0x348>)
 8006a10:	4aa1      	ldr	r2, [pc, #644]	; (8006c98 <user_config_initialize+0x35c>)
 8006a12:	63da      	str	r2, [r3, #60]	; 0x3c

	float_reg_config[ADDR_THETA_MIN].name			= NAME_THETA_MIN;
 8006a14:	4b9b      	ldr	r3, [pc, #620]	; (8006c84 <user_config_initialize+0x348>)
 8006a16:	4aa1      	ldr	r2, [pc, #644]	; (8006c9c <user_config_initialize+0x360>)
 8006a18:	641a      	str	r2, [r3, #64]	; 0x40
	float_reg_config[ADDR_THETA_MIN].cmd			= CMD_THETA_MIN;
 8006a1a:	4b9a      	ldr	r3, [pc, #616]	; (8006c84 <user_config_initialize+0x348>)
 8006a1c:	2220      	movs	r2, #32
 8006a1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	float_reg_config[ADDR_THETA_MIN].f_MIN			= MIN_THETA_MIN;
 8006a22:	4b98      	ldr	r3, [pc, #608]	; (8006c84 <user_config_initialize+0x348>)
 8006a24:	f04f 424f 	mov.w	r2, #3472883712	; 0xcf000000
 8006a28:	649a      	str	r2, [r3, #72]	; 0x48
	float_reg_config[ADDR_THETA_MIN].f_MAX			= MAX_THETA_MIN;
 8006a2a:	4b96      	ldr	r3, [pc, #600]	; (8006c84 <user_config_initialize+0x348>)
 8006a2c:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006a30:	64da      	str	r2, [r3, #76]	; 0x4c

	float_reg_config[ADDR_THETA_MAX].name			= NAME_THETA_MAX;
 8006a32:	4b94      	ldr	r3, [pc, #592]	; (8006c84 <user_config_initialize+0x348>)
 8006a34:	4a9a      	ldr	r2, [pc, #616]	; (8006ca0 <user_config_initialize+0x364>)
 8006a36:	651a      	str	r2, [r3, #80]	; 0x50
	float_reg_config[ADDR_THETA_MAX].cmd			= CMD_THETA_MAX;
 8006a38:	4b92      	ldr	r3, [pc, #584]	; (8006c84 <user_config_initialize+0x348>)
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	float_reg_config[ADDR_THETA_MAX].f_MIN			= MIN_THETA_MAX;
 8006a40:	4b90      	ldr	r3, [pc, #576]	; (8006c84 <user_config_initialize+0x348>)
 8006a42:	f04f 424f 	mov.w	r2, #3472883712	; 0xcf000000
 8006a46:	659a      	str	r2, [r3, #88]	; 0x58
	float_reg_config[ADDR_THETA_MAX].f_MAX			= MAX_THETA_MAX;
 8006a48:	4b8e      	ldr	r3, [pc, #568]	; (8006c84 <user_config_initialize+0x348>)
 8006a4a:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006a4e:	65da      	str	r2, [r3, #92]	; 0x5c

	float_reg_config[ADDR_I_FW_MAX].name			= NAME_I_FW_MAX;
 8006a50:	4b8c      	ldr	r3, [pc, #560]	; (8006c84 <user_config_initialize+0x348>)
 8006a52:	4a94      	ldr	r2, [pc, #592]	; (8006ca4 <user_config_initialize+0x368>)
 8006a54:	661a      	str	r2, [r3, #96]	; 0x60
	float_reg_config[ADDR_I_FW_MAX].cmd				= CMD_I_FW_MAX;
 8006a56:	4b8b      	ldr	r3, [pc, #556]	; (8006c84 <user_config_initialize+0x348>)
 8006a58:	2266      	movs	r2, #102	; 0x66
 8006a5a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	float_reg_config[ADDR_I_FW_MAX].f_MIN			= MIN_I_FW_MAX;
 8006a5e:	4b89      	ldr	r3, [pc, #548]	; (8006c84 <user_config_initialize+0x348>)
 8006a60:	f04f 0200 	mov.w	r2, #0
 8006a64:	669a      	str	r2, [r3, #104]	; 0x68
	float_reg_config[ADDR_I_FW_MAX].f_MAX			= MAX_I_FW_MAX;
 8006a66:	4b87      	ldr	r3, [pc, #540]	; (8006c84 <user_config_initialize+0x348>)
 8006a68:	4a8f      	ldr	r2, [pc, #572]	; (8006ca8 <user_config_initialize+0x36c>)
 8006a6a:	66da      	str	r2, [r3, #108]	; 0x6c

	float_reg_config[ADDR_R_NOMINAL].name			= NAME_R_NOMINAL;
 8006a6c:	4b85      	ldr	r3, [pc, #532]	; (8006c84 <user_config_initialize+0x348>)
 8006a6e:	4a8f      	ldr	r2, [pc, #572]	; (8006cac <user_config_initialize+0x370>)
 8006a70:	671a      	str	r2, [r3, #112]	; 0x70
	float_reg_config[ADDR_R_NOMINAL].cmd			= CMD_R_NOMINAL;
 8006a72:	4b84      	ldr	r3, [pc, #528]	; (8006c84 <user_config_initialize+0x348>)
 8006a74:	2220      	movs	r2, #32
 8006a76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	float_reg_config[ADDR_R_NOMINAL].f_MIN			= MIN_R_NOMINAL;
 8006a7a:	4b82      	ldr	r3, [pc, #520]	; (8006c84 <user_config_initialize+0x348>)
 8006a7c:	f04f 424f 	mov.w	r2, #3472883712	; 0xcf000000
 8006a80:	679a      	str	r2, [r3, #120]	; 0x78
	float_reg_config[ADDR_R_NOMINAL].f_MAX			= MAX_R_NOMINAL;
 8006a82:	4b80      	ldr	r3, [pc, #512]	; (8006c84 <user_config_initialize+0x348>)
 8006a84:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006a88:	67da      	str	r2, [r3, #124]	; 0x7c

	float_reg_config[ADDR_TEMP_MAX].name			= NAME_TEMP_MAX;
 8006a8a:	4b7e      	ldr	r3, [pc, #504]	; (8006c84 <user_config_initialize+0x348>)
 8006a8c:	4a88      	ldr	r2, [pc, #544]	; (8006cb0 <user_config_initialize+0x374>)
 8006a8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	float_reg_config[ADDR_TEMP_MAX].cmd				= CMD_TEMP_MAX;
 8006a92:	4b7c      	ldr	r3, [pc, #496]	; (8006c84 <user_config_initialize+0x348>)
 8006a94:	2220      	movs	r2, #32
 8006a96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	float_reg_config[ADDR_TEMP_MAX].f_MIN			= MIN_TEMP_MAX;
 8006a9a:	4b7a      	ldr	r3, [pc, #488]	; (8006c84 <user_config_initialize+0x348>)
 8006a9c:	f04f 424f 	mov.w	r2, #3472883712	; 0xcf000000
 8006aa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	float_reg_config[ADDR_TEMP_MAX].f_MAX			= MAX_TEMP_MAX;
 8006aa4:	4b77      	ldr	r3, [pc, #476]	; (8006c84 <user_config_initialize+0x348>)
 8006aa6:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006aaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	float_reg_config[ADDR_I_MAX_CONT].name			= NAME_I_MAX_CONT;
 8006aae:	4b75      	ldr	r3, [pc, #468]	; (8006c84 <user_config_initialize+0x348>)
 8006ab0:	4a80      	ldr	r2, [pc, #512]	; (8006cb4 <user_config_initialize+0x378>)
 8006ab2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	float_reg_config[ADDR_I_MAX_CONT].cmd			= CMD_I_MAX_CONT;
 8006ab6:	4b73      	ldr	r3, [pc, #460]	; (8006c84 <user_config_initialize+0x348>)
 8006ab8:	2220      	movs	r2, #32
 8006aba:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	float_reg_config[ADDR_I_MAX_CONT].f_MIN			= MIN_I_MAX_CONT;
 8006abe:	4b71      	ldr	r3, [pc, #452]	; (8006c84 <user_config_initialize+0x348>)
 8006ac0:	f04f 424f 	mov.w	r2, #3472883712	; 0xcf000000
 8006ac4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	float_reg_config[ADDR_I_MAX_CONT].f_MAX			= MAX_I_MAX_CONT;
 8006ac8:	4b6e      	ldr	r3, [pc, #440]	; (8006c84 <user_config_initialize+0x348>)
 8006aca:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006ace:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	float_reg_config[ADDR_PPAIRS].name				= NAME_PPAIRS;
 8006ad2:	4b6c      	ldr	r3, [pc, #432]	; (8006c84 <user_config_initialize+0x348>)
 8006ad4:	4a78      	ldr	r2, [pc, #480]	; (8006cb8 <user_config_initialize+0x37c>)
 8006ad6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	float_reg_config[ADDR_PPAIRS].cmd				= CMD_PPAIRS;
 8006ada:	4b6a      	ldr	r3, [pc, #424]	; (8006c84 <user_config_initialize+0x348>)
 8006adc:	2220      	movs	r2, #32
 8006ade:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	float_reg_config[ADDR_PPAIRS].f_MIN				= MIN_PPAIRS;
 8006ae2:	4b68      	ldr	r3, [pc, #416]	; (8006c84 <user_config_initialize+0x348>)
 8006ae4:	f04f 424f 	mov.w	r2, #3472883712	; 0xcf000000
 8006ae8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	float_reg_config[ADDR_PPAIRS].f_MAX				= MAX_PPAIRS;
 8006aec:	4b65      	ldr	r3, [pc, #404]	; (8006c84 <user_config_initialize+0x348>)
 8006aee:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006af2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	//	float_reg_config[ADDR_L_Q].name				= NAME_L_Q;
	//	float_reg_config[ADDR_L_Q].cmd				= CMD_L_Q;
	//	float_reg_config[ADDR_L_Q].f_MIN			= MIN_L_Q;
	//	float_reg_config[ADDR_L_Q].f_MAX			= MAX_L_Q;

	float_reg_config[ADDR_R_PHASE].name				= NAME_R_PHASE;
 8006af6:	4b63      	ldr	r3, [pc, #396]	; (8006c84 <user_config_initialize+0x348>)
 8006af8:	4a70      	ldr	r2, [pc, #448]	; (8006cbc <user_config_initialize+0x380>)
 8006afa:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	float_reg_config[ADDR_R_PHASE].cmd				= CMD_R_PHASE;
 8006afe:	4b61      	ldr	r3, [pc, #388]	; (8006c84 <user_config_initialize+0x348>)
 8006b00:	2220      	movs	r2, #32
 8006b02:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	float_reg_config[ADDR_R_PHASE].f_MIN			= MIN_R_PHASE;
 8006b06:	4b5f      	ldr	r3, [pc, #380]	; (8006c84 <user_config_initialize+0x348>)
 8006b08:	f04f 424f 	mov.w	r2, #3472883712	; 0xcf000000
 8006b0c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	float_reg_config[ADDR_R_PHASE].f_MAX			= MAX_R_PHASE;
 8006b10:	4b5c      	ldr	r3, [pc, #368]	; (8006c84 <user_config_initialize+0x348>)
 8006b12:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006b16:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

	float_reg_config[ADDR_KT].name					= NAME_KT;
 8006b1a:	4b5a      	ldr	r3, [pc, #360]	; (8006c84 <user_config_initialize+0x348>)
 8006b1c:	4a68      	ldr	r2, [pc, #416]	; (8006cc0 <user_config_initialize+0x384>)
 8006b1e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	float_reg_config[ADDR_KT].cmd					= CMD_KT;
 8006b22:	4b58      	ldr	r3, [pc, #352]	; (8006c84 <user_config_initialize+0x348>)
 8006b24:	2274      	movs	r2, #116	; 0x74
 8006b26:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
	float_reg_config[ADDR_KT].f_MIN					= MIN_KT;
 8006b2a:	4b56      	ldr	r3, [pc, #344]	; (8006c84 <user_config_initialize+0x348>)
 8006b2c:	4a65      	ldr	r2, [pc, #404]	; (8006cc4 <user_config_initialize+0x388>)
 8006b2e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	float_reg_config[ADDR_KT].f_MAX					= MAX_KT;
 8006b32:	4b54      	ldr	r3, [pc, #336]	; (8006c84 <user_config_initialize+0x348>)
 8006b34:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006b38:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	float_reg_config[ADDR_R_TH].name				= NAME_R_TH;
 8006b3c:	4b51      	ldr	r3, [pc, #324]	; (8006c84 <user_config_initialize+0x348>)
 8006b3e:	4a62      	ldr	r2, [pc, #392]	; (8006cc8 <user_config_initialize+0x38c>)
 8006b40:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	float_reg_config[ADDR_R_TH].cmd					= CMD_R_TH;
 8006b44:	4b4f      	ldr	r3, [pc, #316]	; (8006c84 <user_config_initialize+0x348>)
 8006b46:	2220      	movs	r2, #32
 8006b48:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
	float_reg_config[ADDR_R_TH].f_MIN				= MIN_R_TH;
 8006b4c:	4b4d      	ldr	r3, [pc, #308]	; (8006c84 <user_config_initialize+0x348>)
 8006b4e:	f04f 424f 	mov.w	r2, #3472883712	; 0xcf000000
 8006b52:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	float_reg_config[ADDR_R_TH].f_MAX				= MAX_R_TH;
 8006b56:	4b4b      	ldr	r3, [pc, #300]	; (8006c84 <user_config_initialize+0x348>)
 8006b58:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006b5c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

	float_reg_config[ADDR_C_TH].name				= NAME_C_TH;
 8006b60:	4b48      	ldr	r3, [pc, #288]	; (8006c84 <user_config_initialize+0x348>)
 8006b62:	4a5a      	ldr	r2, [pc, #360]	; (8006ccc <user_config_initialize+0x390>)
 8006b64:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	float_reg_config[ADDR_C_TH].cmd					= CMD_C_TH;
 8006b68:	4b46      	ldr	r3, [pc, #280]	; (8006c84 <user_config_initialize+0x348>)
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	float_reg_config[ADDR_C_TH].f_MIN				= MIN_C_TH;
 8006b70:	4b44      	ldr	r3, [pc, #272]	; (8006c84 <user_config_initialize+0x348>)
 8006b72:	f04f 424f 	mov.w	r2, #3472883712	; 0xcf000000
 8006b76:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	float_reg_config[ADDR_C_TH].f_MAX				= MAX_C_TH;
 8006b7a:	4b42      	ldr	r3, [pc, #264]	; (8006c84 <user_config_initialize+0x348>)
 8006b7c:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006b80:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	float_reg_config[ADDR_GR].name					= NAME_GR;
 8006b84:	4b3f      	ldr	r3, [pc, #252]	; (8006c84 <user_config_initialize+0x348>)
 8006b86:	4a52      	ldr	r2, [pc, #328]	; (8006cd0 <user_config_initialize+0x394>)
 8006b88:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	float_reg_config[ADDR_GR].cmd					= CMD_GR;
 8006b8c:	4b3d      	ldr	r3, [pc, #244]	; (8006c84 <user_config_initialize+0x348>)
 8006b8e:	2267      	movs	r2, #103	; 0x67
 8006b90:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
	float_reg_config[ADDR_GR].f_MIN					= MIN_GR;
 8006b94:	4b3b      	ldr	r3, [pc, #236]	; (8006c84 <user_config_initialize+0x348>)
 8006b96:	4a4f      	ldr	r2, [pc, #316]	; (8006cd4 <user_config_initialize+0x398>)
 8006b98:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	float_reg_config[ADDR_GR].f_MAX					= MAX_GR;
 8006b9c:	4b39      	ldr	r3, [pc, #228]	; (8006c84 <user_config_initialize+0x348>)
 8006b9e:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006ba2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	float_reg_config[ADDR_P_MIN].name				= NAME_P_MIN;
 8006ba6:	4b37      	ldr	r3, [pc, #220]	; (8006c84 <user_config_initialize+0x348>)
 8006ba8:	4a4b      	ldr	r2, [pc, #300]	; (8006cd8 <user_config_initialize+0x39c>)
 8006baa:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	float_reg_config[ADDR_P_MIN].cmd				= CMD_P_MIN;
 8006bae:	4b35      	ldr	r3, [pc, #212]	; (8006c84 <user_config_initialize+0x348>)
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
	float_reg_config[ADDR_P_MIN].f_MIN				= MIN_P_MIN;
 8006bb6:	4b33      	ldr	r3, [pc, #204]	; (8006c84 <user_config_initialize+0x348>)
 8006bb8:	f04f 0200 	mov.w	r2, #0
 8006bbc:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	float_reg_config[ADDR_P_MIN].f_MAX				= MAX_P_MIN;
 8006bc0:	4b30      	ldr	r3, [pc, #192]	; (8006c84 <user_config_initialize+0x348>)
 8006bc2:	f04f 0200 	mov.w	r2, #0
 8006bc6:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

	float_reg_config[ADDR_P_MAX].name				= NAME_P_MAX;
 8006bca:	4b2e      	ldr	r3, [pc, #184]	; (8006c84 <user_config_initialize+0x348>)
 8006bcc:	4a43      	ldr	r2, [pc, #268]	; (8006cdc <user_config_initialize+0x3a0>)
 8006bce:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	float_reg_config[ADDR_P_MAX].cmd				= CMD_P_MAX;
 8006bd2:	4b2c      	ldr	r3, [pc, #176]	; (8006c84 <user_config_initialize+0x348>)
 8006bd4:	2270      	movs	r2, #112	; 0x70
 8006bd6:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	float_reg_config[ADDR_P_MAX].f_MIN				= MIN_P_MAX;
 8006bda:	4b2a      	ldr	r3, [pc, #168]	; (8006c84 <user_config_initialize+0x348>)
 8006bdc:	f04f 0200 	mov.w	r2, #0
 8006be0:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	float_reg_config[ADDR_P_MAX].f_MAX				= MAX_P_MAX;
 8006be4:	4b27      	ldr	r3, [pc, #156]	; (8006c84 <user_config_initialize+0x348>)
 8006be6:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006bea:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

	float_reg_config[ADDR_V_MIN].name				= NAME_V_MIN;
 8006bee:	4b25      	ldr	r3, [pc, #148]	; (8006c84 <user_config_initialize+0x348>)
 8006bf0:	4a3b      	ldr	r2, [pc, #236]	; (8006ce0 <user_config_initialize+0x3a4>)
 8006bf2:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	float_reg_config[ADDR_V_MIN].cmd				= CMD_V_MIN;
 8006bf6:	4b23      	ldr	r3, [pc, #140]	; (8006c84 <user_config_initialize+0x348>)
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	float_reg_config[ADDR_V_MIN].f_MIN				= MIN_V_MIN;
 8006bfe:	4b21      	ldr	r3, [pc, #132]	; (8006c84 <user_config_initialize+0x348>)
 8006c00:	f04f 424f 	mov.w	r2, #3472883712	; 0xcf000000
 8006c04:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	float_reg_config[ADDR_V_MIN].f_MAX				= MAX_V_MIN;
 8006c08:	4b1e      	ldr	r3, [pc, #120]	; (8006c84 <user_config_initialize+0x348>)
 8006c0a:	f04f 0200 	mov.w	r2, #0
 8006c0e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

	float_reg_config[ADDR_V_MAX].name				= NAME_V_MAX;
 8006c12:	4b1c      	ldr	r3, [pc, #112]	; (8006c84 <user_config_initialize+0x348>)
 8006c14:	4a33      	ldr	r2, [pc, #204]	; (8006ce4 <user_config_initialize+0x3a8>)
 8006c16:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	float_reg_config[ADDR_V_MAX].cmd				= CMD_V_MAX;
 8006c1a:	4b1a      	ldr	r3, [pc, #104]	; (8006c84 <user_config_initialize+0x348>)
 8006c1c:	2276      	movs	r2, #118	; 0x76
 8006c1e:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
	float_reg_config[ADDR_V_MAX].f_MIN				= MIN_V_MAX;
 8006c22:	4b18      	ldr	r3, [pc, #96]	; (8006c84 <user_config_initialize+0x348>)
 8006c24:	f04f 0200 	mov.w	r2, #0
 8006c28:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	float_reg_config[ADDR_V_MAX].f_MAX				= MAX_V_MAX;
 8006c2c:	4b15      	ldr	r3, [pc, #84]	; (8006c84 <user_config_initialize+0x348>)
 8006c2e:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006c32:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

	float_reg_config[ADDR_KP_MAX].name				= NAME_KP_MAX;
 8006c36:	4b13      	ldr	r3, [pc, #76]	; (8006c84 <user_config_initialize+0x348>)
 8006c38:	4a2b      	ldr	r2, [pc, #172]	; (8006ce8 <user_config_initialize+0x3ac>)
 8006c3a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	float_reg_config[ADDR_KP_MAX].cmd				= CMD_KP_MAX;
 8006c3e:	4b11      	ldr	r3, [pc, #68]	; (8006c84 <user_config_initialize+0x348>)
 8006c40:	226b      	movs	r2, #107	; 0x6b
 8006c42:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
	float_reg_config[ADDR_KP_MAX].f_MIN				= MIN_KP_MAX;
 8006c46:	4b0f      	ldr	r3, [pc, #60]	; (8006c84 <user_config_initialize+0x348>)
 8006c48:	f04f 0200 	mov.w	r2, #0
 8006c4c:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	float_reg_config[ADDR_KP_MAX].f_MAX				= MAX_KP_MAX;
 8006c50:	4b0c      	ldr	r3, [pc, #48]	; (8006c84 <user_config_initialize+0x348>)
 8006c52:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006c56:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	float_reg_config[ADDR_KI_MAX].name				= NAME_KI_MAX;
 8006c5a:	4b0a      	ldr	r3, [pc, #40]	; (8006c84 <user_config_initialize+0x348>)
 8006c5c:	4a23      	ldr	r2, [pc, #140]	; (8006cec <user_config_initialize+0x3b0>)
 8006c5e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	float_reg_config[ADDR_KI_MAX].cmd				= CMD_KI_MAX;
 8006c62:	4b08      	ldr	r3, [pc, #32]	; (8006c84 <user_config_initialize+0x348>)
 8006c64:	2269      	movs	r2, #105	; 0x69
 8006c66:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
	float_reg_config[ADDR_KI_MAX].f_MIN				= MIN_KI_MAX;
 8006c6a:	4b06      	ldr	r3, [pc, #24]	; (8006c84 <user_config_initialize+0x348>)
 8006c6c:	f04f 0200 	mov.w	r2, #0
 8006c70:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	float_reg_config[ADDR_KI_MAX].f_MAX				= MAX_KI_MAX;
 8006c74:	4b03      	ldr	r3, [pc, #12]	; (8006c84 <user_config_initialize+0x348>)
 8006c76:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006c7a:	e039      	b.n	8006cf0 <user_config_initialize+0x3b4>
 8006c7c:	20009a5c 	.word	0x20009a5c
 8006c80:	08011328 	.word	0x08011328
 8006c84:	2000965c 	.word	0x2000965c
 8006c88:	0801132c 	.word	0x0801132c
 8006c8c:	42c80000 	.word	0x42c80000
 8006c90:	44fa0000 	.word	0x44fa0000
 8006c94:	08011334 	.word	0x08011334
 8006c98:	42960000 	.word	0x42960000
 8006c9c:	0801133c 	.word	0x0801133c
 8006ca0:	08011348 	.word	0x08011348
 8006ca4:	08011354 	.word	0x08011354
 8006ca8:	42040000 	.word	0x42040000
 8006cac:	08011360 	.word	0x08011360
 8006cb0:	0801136c 	.word	0x0801136c
 8006cb4:	08011378 	.word	0x08011378
 8006cb8:	08011384 	.word	0x08011384
 8006cbc:	0801138c 	.word	0x0801138c
 8006cc0:	08011394 	.word	0x08011394
 8006cc4:	38d1b717 	.word	0x38d1b717
 8006cc8:	08011398 	.word	0x08011398
 8006ccc:	080113a0 	.word	0x080113a0
 8006cd0:	080113a8 	.word	0x080113a8
 8006cd4:	3a83126f 	.word	0x3a83126f
 8006cd8:	080113ac 	.word	0x080113ac
 8006cdc:	080113b4 	.word	0x080113b4
 8006ce0:	080113bc 	.word	0x080113bc
 8006ce4:	080113c4 	.word	0x080113c4
 8006ce8:	080113cc 	.word	0x080113cc
 8006cec:	080113d4 	.word	0x080113d4
 8006cf0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

	float_reg_config[ADDR_KD_MAX].name				= NAME_KD_MAX;
 8006cf4:	4b52      	ldr	r3, [pc, #328]	; (8006e40 <user_config_initialize+0x504>)
 8006cf6:	4a53      	ldr	r2, [pc, #332]	; (8006e44 <user_config_initialize+0x508>)
 8006cf8:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	float_reg_config[ADDR_KD_MAX].cmd				= CMD_KD_MAX;
 8006cfc:	4b50      	ldr	r3, [pc, #320]	; (8006e40 <user_config_initialize+0x504>)
 8006cfe:	2264      	movs	r2, #100	; 0x64
 8006d00:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	float_reg_config[ADDR_KD_MAX].f_MIN				= MIN_KD_MAX;
 8006d04:	4b4e      	ldr	r3, [pc, #312]	; (8006e40 <user_config_initialize+0x504>)
 8006d06:	f04f 0200 	mov.w	r2, #0
 8006d0a:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	float_reg_config[ADDR_KD_MAX].f_MAX				= MAX_KD_MAX;
 8006d0e:	4b4c      	ldr	r3, [pc, #304]	; (8006e40 <user_config_initialize+0x504>)
 8006d10:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8006d14:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

	float_reg_config[ADDR_HALL_CAL_OFFSET].name		= NAME_HALL_CAL_OFFSET;
 8006d18:	4b49      	ldr	r3, [pc, #292]	; (8006e40 <user_config_initialize+0x504>)
 8006d1a:	4a4b      	ldr	r2, [pc, #300]	; (8006e48 <user_config_initialize+0x50c>)
 8006d1c:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	float_reg_config[ADDR_HALL_CAL_OFFSET].cmd		= CMD_HALL_CAL_OFFSET;
 8006d20:	4b47      	ldr	r3, [pc, #284]	; (8006e40 <user_config_initialize+0x504>)
 8006d22:	2265      	movs	r2, #101	; 0x65
 8006d24:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
	float_reg_config[ADDR_HALL_CAL_OFFSET].f_MIN	= MIN_HALL_CAL_OFFSET;
 8006d28:	4b45      	ldr	r3, [pc, #276]	; (8006e40 <user_config_initialize+0x504>)
 8006d2a:	f04f 0200 	mov.w	r2, #0
 8006d2e:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	float_reg_config[ADDR_HALL_CAL_OFFSET].f_MAX	= MAX_HALL_CAL_OFFSET;
 8006d32:	4b43      	ldr	r3, [pc, #268]	; (8006e40 <user_config_initialize+0x504>)
 8006d34:	4a45      	ldr	r2, [pc, #276]	; (8006e4c <user_config_initialize+0x510>)
 8006d36:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

	float_reg_config[ADDR_HALL_CAL_SPEED].name		= NAME_HALL_CAL_SPEED;
 8006d3a:	4b41      	ldr	r3, [pc, #260]	; (8006e40 <user_config_initialize+0x504>)
 8006d3c:	4a44      	ldr	r2, [pc, #272]	; (8006e50 <user_config_initialize+0x514>)
 8006d3e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	float_reg_config[ADDR_HALL_CAL_SPEED].cmd		= CMD_HALL_CAL_SPEED;
 8006d42:	4b3f      	ldr	r3, [pc, #252]	; (8006e40 <user_config_initialize+0x504>)
 8006d44:	2268      	movs	r2, #104	; 0x68
 8006d46:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	float_reg_config[ADDR_HALL_CAL_SPEED].f_MIN		= MIN_HALL_CAL_SPEED;
 8006d4a:	4b3d      	ldr	r3, [pc, #244]	; (8006e40 <user_config_initialize+0x504>)
 8006d4c:	f04f 0200 	mov.w	r2, #0
 8006d50:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	float_reg_config[ADDR_HALL_CAL_SPEED].f_MAX		= MAX_HALL_CAL_SPEED;
 8006d54:	4b3a      	ldr	r3, [pc, #232]	; (8006e40 <user_config_initialize+0x504>)
 8006d56:	4a3f      	ldr	r2, [pc, #252]	; (8006e54 <user_config_initialize+0x518>)
 8006d58:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc

	// initialize the int_reg_config array
	int_reg_config[ADDR_PHASE_ORDER].name			= NAME_PHASE_ORDER;
 8006d5c:	4b3e      	ldr	r3, [pc, #248]	; (8006e58 <user_config_initialize+0x51c>)
 8006d5e:	4a3f      	ldr	r2, [pc, #252]	; (8006e5c <user_config_initialize+0x520>)
 8006d60:	601a      	str	r2, [r3, #0]
	int_reg_config[ADDR_PHASE_ORDER].cmd			= CMD_PHASE_ORDER;
 8006d62:	4b3d      	ldr	r3, [pc, #244]	; (8006e58 <user_config_initialize+0x51c>)
 8006d64:	2220      	movs	r2, #32
 8006d66:	711a      	strb	r2, [r3, #4]
	int_reg_config[ADDR_PHASE_ORDER].i_MIN			= MIN_PHASE_ORDER;
 8006d68:	4b3b      	ldr	r3, [pc, #236]	; (8006e58 <user_config_initialize+0x51c>)
 8006d6a:	4a3d      	ldr	r2, [pc, #244]	; (8006e60 <user_config_initialize+0x524>)
 8006d6c:	609a      	str	r2, [r3, #8]
	int_reg_config[ADDR_PHASE_ORDER].i_MAX			= MAX_PHASE_ORDER;
 8006d6e:	4b3a      	ldr	r3, [pc, #232]	; (8006e58 <user_config_initialize+0x51c>)
 8006d70:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006d74:	60da      	str	r2, [r3, #12]

	int_reg_config[ADDR_CAN_ID].name				= NAME_CAN_ID;
 8006d76:	4b38      	ldr	r3, [pc, #224]	; (8006e58 <user_config_initialize+0x51c>)
 8006d78:	4a3a      	ldr	r2, [pc, #232]	; (8006e64 <user_config_initialize+0x528>)
 8006d7a:	611a      	str	r2, [r3, #16]
	int_reg_config[ADDR_CAN_ID].cmd					= CMD_CAN_ID;
 8006d7c:	4b36      	ldr	r3, [pc, #216]	; (8006e58 <user_config_initialize+0x51c>)
 8006d7e:	226e      	movs	r2, #110	; 0x6e
 8006d80:	751a      	strb	r2, [r3, #20]
	int_reg_config[ADDR_CAN_ID].i_MIN				= MIN_CAN_ID;
 8006d82:	4b35      	ldr	r3, [pc, #212]	; (8006e58 <user_config_initialize+0x51c>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	619a      	str	r2, [r3, #24]
	int_reg_config[ADDR_CAN_ID].i_MAX				= MAX_CAN_ID;
 8006d88:	4b33      	ldr	r3, [pc, #204]	; (8006e58 <user_config_initialize+0x51c>)
 8006d8a:	227f      	movs	r2, #127	; 0x7f
 8006d8c:	61da      	str	r2, [r3, #28]

	int_reg_config[ADDR_CAN_MASTER].name			= NAME_CAN_MASTER;
 8006d8e:	4b32      	ldr	r3, [pc, #200]	; (8006e58 <user_config_initialize+0x51c>)
 8006d90:	4a35      	ldr	r2, [pc, #212]	; (8006e68 <user_config_initialize+0x52c>)
 8006d92:	621a      	str	r2, [r3, #32]
	int_reg_config[ADDR_CAN_MASTER].cmd				= CMD_CAN_MASTER;
 8006d94:	4b30      	ldr	r3, [pc, #192]	; (8006e58 <user_config_initialize+0x51c>)
 8006d96:	226d      	movs	r2, #109	; 0x6d
 8006d98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	int_reg_config[ADDR_CAN_MASTER].i_MIN			= MIN_CAN_MASTER;
 8006d9c:	4b2e      	ldr	r3, [pc, #184]	; (8006e58 <user_config_initialize+0x51c>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	629a      	str	r2, [r3, #40]	; 0x28
	int_reg_config[ADDR_CAN_MASTER].i_MAX			= MAX_CAN_MASTER;
 8006da2:	4b2d      	ldr	r3, [pc, #180]	; (8006e58 <user_config_initialize+0x51c>)
 8006da4:	227f      	movs	r2, #127	; 0x7f
 8006da6:	62da      	str	r2, [r3, #44]	; 0x2c

	int_reg_config[ADDR_CAN_TIMEOUT].name			= NAME_CAN_TIMEOUT;
 8006da8:	4b2b      	ldr	r3, [pc, #172]	; (8006e58 <user_config_initialize+0x51c>)
 8006daa:	4a30      	ldr	r2, [pc, #192]	; (8006e6c <user_config_initialize+0x530>)
 8006dac:	631a      	str	r2, [r3, #48]	; 0x30
	int_reg_config[ADDR_CAN_TIMEOUT].cmd			= CMD_CAN_TIMEOUT;
 8006dae:	4b2a      	ldr	r3, [pc, #168]	; (8006e58 <user_config_initialize+0x51c>)
 8006db0:	226f      	movs	r2, #111	; 0x6f
 8006db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	int_reg_config[ADDR_CAN_TIMEOUT].i_MIN			= MIN_CAN_TIMEOUT;
 8006db6:	4b28      	ldr	r3, [pc, #160]	; (8006e58 <user_config_initialize+0x51c>)
 8006db8:	2200      	movs	r2, #0
 8006dba:	639a      	str	r2, [r3, #56]	; 0x38
	int_reg_config[ADDR_CAN_TIMEOUT].i_MAX			= MAX_CAN_TIMEOUT;
 8006dbc:	4b26      	ldr	r3, [pc, #152]	; (8006e58 <user_config_initialize+0x51c>)
 8006dbe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006dc2:	63da      	str	r2, [r3, #60]	; 0x3c

	int_reg_config[ADDR_M_ZERO].name				= NAME_M_ZERO;
 8006dc4:	4b24      	ldr	r3, [pc, #144]	; (8006e58 <user_config_initialize+0x51c>)
 8006dc6:	4a2a      	ldr	r2, [pc, #168]	; (8006e70 <user_config_initialize+0x534>)
 8006dc8:	641a      	str	r2, [r3, #64]	; 0x40
	int_reg_config[ADDR_M_ZERO].cmd					= CMD_M_ZERO;
 8006dca:	4b23      	ldr	r3, [pc, #140]	; (8006e58 <user_config_initialize+0x51c>)
 8006dcc:	2220      	movs	r2, #32
 8006dce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	int_reg_config[ADDR_M_ZERO].i_MIN				= MIN_M_ZERO;
 8006dd2:	4b21      	ldr	r3, [pc, #132]	; (8006e58 <user_config_initialize+0x51c>)
 8006dd4:	4a22      	ldr	r2, [pc, #136]	; (8006e60 <user_config_initialize+0x524>)
 8006dd6:	649a      	str	r2, [r3, #72]	; 0x48
	int_reg_config[ADDR_M_ZERO].i_MAX				= MAX_M_ZERO;
 8006dd8:	4b1f      	ldr	r3, [pc, #124]	; (8006e58 <user_config_initialize+0x51c>)
 8006dda:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006dde:	64da      	str	r2, [r3, #76]	; 0x4c

	int_reg_config[ADDR_E_ZERO].name				= NAME_E_ZERO;
 8006de0:	4b1d      	ldr	r3, [pc, #116]	; (8006e58 <user_config_initialize+0x51c>)
 8006de2:	4a24      	ldr	r2, [pc, #144]	; (8006e74 <user_config_initialize+0x538>)
 8006de4:	651a      	str	r2, [r3, #80]	; 0x50
	int_reg_config[ADDR_E_ZERO].cmd					= CMD_E_ZERO;
 8006de6:	4b1c      	ldr	r3, [pc, #112]	; (8006e58 <user_config_initialize+0x51c>)
 8006de8:	2220      	movs	r2, #32
 8006dea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	int_reg_config[ADDR_E_ZERO].i_MIN				= MIN_E_ZERO;
 8006dee:	4b1a      	ldr	r3, [pc, #104]	; (8006e58 <user_config_initialize+0x51c>)
 8006df0:	4a1b      	ldr	r2, [pc, #108]	; (8006e60 <user_config_initialize+0x524>)
 8006df2:	659a      	str	r2, [r3, #88]	; 0x58
	int_reg_config[ADDR_E_ZERO].i_MAX				= MAX_E_ZERO;
 8006df4:	4b18      	ldr	r3, [pc, #96]	; (8006e58 <user_config_initialize+0x51c>)
 8006df6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006dfa:	65da      	str	r2, [r3, #92]	; 0x5c

	int_reg_config[ADDR_HALL_CAL_DIR].name			= NAME_HALL_CAL_DIR;
 8006dfc:	4b16      	ldr	r3, [pc, #88]	; (8006e58 <user_config_initialize+0x51c>)
 8006dfe:	4a1e      	ldr	r2, [pc, #120]	; (8006e78 <user_config_initialize+0x53c>)
 8006e00:	661a      	str	r2, [r3, #96]	; 0x60
	int_reg_config[ADDR_HALL_CAL_DIR].cmd			= CMD_HALL_CAL_DIR;
 8006e02:	4b15      	ldr	r3, [pc, #84]	; (8006e58 <user_config_initialize+0x51c>)
 8006e04:	2272      	movs	r2, #114	; 0x72
 8006e06:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	int_reg_config[ADDR_HALL_CAL_DIR].i_MIN			= MIN_HALL_CAL_DIR;
 8006e0a:	4b13      	ldr	r3, [pc, #76]	; (8006e58 <user_config_initialize+0x51c>)
 8006e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e10:	669a      	str	r2, [r3, #104]	; 0x68
	int_reg_config[ADDR_HALL_CAL_DIR].i_MAX			= MAX_HALL_CAL_DIR;
 8006e12:	4b11      	ldr	r3, [pc, #68]	; (8006e58 <user_config_initialize+0x51c>)
 8006e14:	2201      	movs	r2, #1
 8006e16:	66da      	str	r2, [r3, #108]	; 0x6c

	int_reg_config[ADDR_ENCODER_LUT].name			= NAME_ENCODER_LUT;
 8006e18:	4b0f      	ldr	r3, [pc, #60]	; (8006e58 <user_config_initialize+0x51c>)
 8006e1a:	4a18      	ldr	r2, [pc, #96]	; (8006e7c <user_config_initialize+0x540>)
 8006e1c:	671a      	str	r2, [r3, #112]	; 0x70
	int_reg_config[ADDR_ENCODER_LUT].cmd			= CMD_ENCODER_LUT;
 8006e1e:	4b0e      	ldr	r3, [pc, #56]	; (8006e58 <user_config_initialize+0x51c>)
 8006e20:	2220      	movs	r2, #32
 8006e22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	int_reg_config[ADDR_ENCODER_LUT].i_MIN			= MIN_ENCODER_LUT;
 8006e26:	4b0c      	ldr	r3, [pc, #48]	; (8006e58 <user_config_initialize+0x51c>)
 8006e28:	4a0d      	ldr	r2, [pc, #52]	; (8006e60 <user_config_initialize+0x524>)
 8006e2a:	679a      	str	r2, [r3, #120]	; 0x78
	int_reg_config[ADDR_ENCODER_LUT].i_MAX			= MAX_ENCODER_LUT;
 8006e2c:	4b0a      	ldr	r3, [pc, #40]	; (8006e58 <user_config_initialize+0x51c>)
 8006e2e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006e32:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	2000965c 	.word	0x2000965c
 8006e44:	080113dc 	.word	0x080113dc
 8006e48:	080113e4 	.word	0x080113e4
 8006e4c:	430f0000 	.word	0x430f0000
 8006e50:	080113f4 	.word	0x080113f4
 8006e54:	41200000 	.word	0x41200000
 8006e58:	20009a5c 	.word	0x20009a5c
 8006e5c:	08011404 	.word	0x08011404
 8006e60:	80000001 	.word	0x80000001
 8006e64:	08011410 	.word	0x08011410
 8006e68:	08011418 	.word	0x08011418
 8006e6c:	08011424 	.word	0x08011424
 8006e70:	08011430 	.word	0x08011430
 8006e74:	08011438 	.word	0x08011438
 8006e78:	08011440 	.word	0x08011440
 8006e7c:	08011450 	.word	0x08011450

08006e80 <float_reg_update_uart>:

char* float_reg_update_uart(char cmd, const char *c_data){
 8006e80:	b590      	push	{r4, r7, lr}
 8006e82:	b087      	sub	sp, #28
 8006e84:	af02      	add	r7, sp, #8
 8006e86:	4603      	mov	r3, r0
 8006e88:	6039      	str	r1, [r7, #0]
 8006e8a:	71fb      	strb	r3, [r7, #7]
    static char response[100];
	float f_data = atof(c_data);
 8006e8c:	6838      	ldr	r0, [r7, #0]
 8006e8e:	f005 fa89 	bl	800c3a4 <atof>
 8006e92:	ec53 2b10 	vmov	r2, r3, d0
 8006e96:	4610      	mov	r0, r2
 8006e98:	4619      	mov	r1, r3
 8006e9a:	f7f9 fed5 	bl	8000c48 <__aeabi_d2f>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<FLOAT_REG_LENGTH; i++){
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	60fb      	str	r3, [r7, #12]
 8006ea6:	e042      	b.n	8006f2e <float_reg_update_uart+0xae>
		if (float_reg_config[i].cmd == cmd){
 8006ea8:	4a25      	ldr	r2, [pc, #148]	; (8006f40 <float_reg_update_uart+0xc0>)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	011b      	lsls	r3, r3, #4
 8006eae:	4413      	add	r3, r2
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	79fa      	ldrb	r2, [r7, #7]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d136      	bne.n	8006f28 <float_reg_update_uart+0xa8>
			if ((float_reg_config[i].f_MIN > f_data) || (float_reg_config[i].f_MAX < f_data)){
 8006eba:	4a21      	ldr	r2, [pc, #132]	; (8006f40 <float_reg_update_uart+0xc0>)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	011b      	lsls	r3, r3, #4
 8006ec0:	4413      	add	r3, r2
 8006ec2:	3308      	adds	r3, #8
 8006ec4:	edd3 7a00 	vldr	s15, [r3]
 8006ec8:	ed97 7a02 	vldr	s14, [r7, #8]
 8006ecc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed4:	d40d      	bmi.n	8006ef2 <float_reg_update_uart+0x72>
 8006ed6:	4a1a      	ldr	r2, [pc, #104]	; (8006f40 <float_reg_update_uart+0xc0>)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	011b      	lsls	r3, r3, #4
 8006edc:	4413      	add	r3, r2
 8006ede:	330c      	adds	r3, #12
 8006ee0:	edd3 7a00 	vldr	s15, [r3]
 8006ee4:	ed97 7a02 	vldr	s14, [r7, #8]
 8006ee8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ef0:	dd01      	ble.n	8006ef6 <float_reg_update_uart+0x76>
				return STR_INVALID_VALUE;
 8006ef2:	4b14      	ldr	r3, [pc, #80]	; (8006f44 <float_reg_update_uart+0xc4>)
 8006ef4:	e01f      	b.n	8006f36 <float_reg_update_uart+0xb6>
			}
			else{
				__float_reg[i] = f_data;
 8006ef6:	4a14      	ldr	r2, [pc, #80]	; (8006f48 <float_reg_update_uart+0xc8>)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	601a      	str	r2, [r3, #0]
                sprintf(response, "%s set to %f\r\n", float_reg_config[i].name, f_data);
 8006f02:	4a0f      	ldr	r2, [pc, #60]	; (8006f40 <float_reg_update_uart+0xc0>)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	011b      	lsls	r3, r3, #4
 8006f08:	4413      	add	r3, r2
 8006f0a:	681c      	ldr	r4, [r3, #0]
 8006f0c:	68b8      	ldr	r0, [r7, #8]
 8006f0e:	f7f9 fb4b 	bl	80005a8 <__aeabi_f2d>
 8006f12:	4602      	mov	r2, r0
 8006f14:	460b      	mov	r3, r1
 8006f16:	e9cd 2300 	strd	r2, r3, [sp]
 8006f1a:	4622      	mov	r2, r4
 8006f1c:	490b      	ldr	r1, [pc, #44]	; (8006f4c <float_reg_update_uart+0xcc>)
 8006f1e:	480c      	ldr	r0, [pc, #48]	; (8006f50 <float_reg_update_uart+0xd0>)
 8006f20:	f005 ff80 	bl	800ce24 <siprintf>
				return response;
 8006f24:	4b0a      	ldr	r3, [pc, #40]	; (8006f50 <float_reg_update_uart+0xd0>)
 8006f26:	e006      	b.n	8006f36 <float_reg_update_uart+0xb6>
	for (int i=0; i<FLOAT_REG_LENGTH; i++){
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	60fb      	str	r3, [r7, #12]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2b3f      	cmp	r3, #63	; 0x3f
 8006f32:	ddb9      	ble.n	8006ea8 <float_reg_update_uart+0x28>
			}
		}
	}
	return STR_INVALID_CMD;
 8006f34:	4b07      	ldr	r3, [pc, #28]	; (8006f54 <float_reg_update_uart+0xd4>)
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd90      	pop	{r4, r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	2000965c 	.word	0x2000965c
 8006f44:	0801145c 	.word	0x0801145c
 8006f48:	2000075c 	.word	0x2000075c
 8006f4c:	08011470 	.word	0x08011470
 8006f50:	20000258 	.word	0x20000258
 8006f54:	08011480 	.word	0x08011480

08006f58 <float_reg_update_can>:

int float_reg_update_can(int addr, float f_data){
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	ed87 0a00 	vstr	s0, [r7]
	if (addr < 0 || addr >= FLOAT_REG_LENGTH){
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	db02      	blt.n	8006f70 <float_reg_update_can+0x18>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2b3f      	cmp	r3, #63	; 0x3f
 8006f6e:	dd01      	ble.n	8006f74 <float_reg_update_can+0x1c>
		return CODE_INVALID_ADDR;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e02e      	b.n	8006fd2 <float_reg_update_can+0x7a>
	}
	else if (float_reg_config[addr].cmd == ' '){
 8006f74:	4a1a      	ldr	r2, [pc, #104]	; (8006fe0 <float_reg_update_can+0x88>)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	011b      	lsls	r3, r3, #4
 8006f7a:	4413      	add	r3, r2
 8006f7c:	3304      	adds	r3, #4
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	2b20      	cmp	r3, #32
 8006f82:	d101      	bne.n	8006f88 <float_reg_update_can+0x30>
		return CODE_READ_ONLY;
 8006f84:	2302      	movs	r3, #2
 8006f86:	e024      	b.n	8006fd2 <float_reg_update_can+0x7a>
	}
	else if ((float_reg_config[addr].f_MIN > f_data) || (float_reg_config[addr].f_MAX < f_data)){
 8006f88:	4a15      	ldr	r2, [pc, #84]	; (8006fe0 <float_reg_update_can+0x88>)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	011b      	lsls	r3, r3, #4
 8006f8e:	4413      	add	r3, r2
 8006f90:	3308      	adds	r3, #8
 8006f92:	edd3 7a00 	vldr	s15, [r3]
 8006f96:	ed97 7a00 	vldr	s14, [r7]
 8006f9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fa2:	d40d      	bmi.n	8006fc0 <float_reg_update_can+0x68>
 8006fa4:	4a0e      	ldr	r2, [pc, #56]	; (8006fe0 <float_reg_update_can+0x88>)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	011b      	lsls	r3, r3, #4
 8006faa:	4413      	add	r3, r2
 8006fac:	330c      	adds	r3, #12
 8006fae:	edd3 7a00 	vldr	s15, [r3]
 8006fb2:	ed97 7a00 	vldr	s14, [r7]
 8006fb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fbe:	dd01      	ble.n	8006fc4 <float_reg_update_can+0x6c>
		return CODE_INVALID_VALUE;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e006      	b.n	8006fd2 <float_reg_update_can+0x7a>
	}
	else{
		__float_reg[addr] = f_data;
 8006fc4:	4a07      	ldr	r2, [pc, #28]	; (8006fe4 <float_reg_update_can+0x8c>)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4413      	add	r3, r2
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	601a      	str	r2, [r3, #0]
		return CODE_CONFIG_SUCCESS;
 8006fd0:	2300      	movs	r3, #0
	}
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	2000965c 	.word	0x2000965c
 8006fe4:	2000075c 	.word	0x2000075c

08006fe8 <int_reg_update_uart>:

char* int_reg_update_uart(char cmd, const char *c_data){
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	4603      	mov	r3, r0
 8006ff0:	6039      	str	r1, [r7, #0]
 8006ff2:	71fb      	strb	r3, [r7, #7]
    static char response[100];
	int i_data = atoi(c_data);
 8006ff4:	6838      	ldr	r0, [r7, #0]
 8006ff6:	f005 f9d8 	bl	800c3aa <atoi>
 8006ffa:	60b8      	str	r0, [r7, #8]

	for (int i=0; i<INT_REG_LENGTH; i++){
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	60fb      	str	r3, [r7, #12]
 8007000:	e030      	b.n	8007064 <int_reg_update_uart+0x7c>
		if (int_reg_config[i].cmd == cmd){
 8007002:	4a1c      	ldr	r2, [pc, #112]	; (8007074 <int_reg_update_uart+0x8c>)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	011b      	lsls	r3, r3, #4
 8007008:	4413      	add	r3, r2
 800700a:	3304      	adds	r3, #4
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	79fa      	ldrb	r2, [r7, #7]
 8007010:	429a      	cmp	r2, r3
 8007012:	d124      	bne.n	800705e <int_reg_update_uart+0x76>
			if ((int_reg_config[i].i_MIN > i_data) || (int_reg_config[i].i_MAX < i_data)){
 8007014:	4a17      	ldr	r2, [pc, #92]	; (8007074 <int_reg_update_uart+0x8c>)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	011b      	lsls	r3, r3, #4
 800701a:	4413      	add	r3, r2
 800701c:	3308      	adds	r3, #8
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	429a      	cmp	r2, r3
 8007024:	db08      	blt.n	8007038 <int_reg_update_uart+0x50>
 8007026:	4a13      	ldr	r2, [pc, #76]	; (8007074 <int_reg_update_uart+0x8c>)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	011b      	lsls	r3, r3, #4
 800702c:	4413      	add	r3, r2
 800702e:	330c      	adds	r3, #12
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	429a      	cmp	r2, r3
 8007036:	dd01      	ble.n	800703c <int_reg_update_uart+0x54>
				return STR_INVALID_VALUE;
 8007038:	4b0f      	ldr	r3, [pc, #60]	; (8007078 <int_reg_update_uart+0x90>)
 800703a:	e017      	b.n	800706c <int_reg_update_uart+0x84>
			}
			else{
				__int_reg[i] = i_data;
 800703c:	490f      	ldr	r1, [pc, #60]	; (800707c <int_reg_update_uart+0x94>)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                sprintf(response, "%s set to %d\r\n", int_reg_config[i].name, i_data);
 8007046:	4a0b      	ldr	r2, [pc, #44]	; (8007074 <int_reg_update_uart+0x8c>)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	011b      	lsls	r3, r3, #4
 800704c:	4413      	add	r3, r2
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	490b      	ldr	r1, [pc, #44]	; (8007080 <int_reg_update_uart+0x98>)
 8007054:	480b      	ldr	r0, [pc, #44]	; (8007084 <int_reg_update_uart+0x9c>)
 8007056:	f005 fee5 	bl	800ce24 <siprintf>
				return response;
 800705a:	4b0a      	ldr	r3, [pc, #40]	; (8007084 <int_reg_update_uart+0x9c>)
 800705c:	e006      	b.n	800706c <int_reg_update_uart+0x84>
	for (int i=0; i<INT_REG_LENGTH; i++){
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	3301      	adds	r3, #1
 8007062:	60fb      	str	r3, [r7, #12]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2bff      	cmp	r3, #255	; 0xff
 8007068:	ddcb      	ble.n	8007002 <int_reg_update_uart+0x1a>
			}
		}
	}
	return STR_INVALID_CMD;
 800706a:	4b07      	ldr	r3, [pc, #28]	; (8007088 <int_reg_update_uart+0xa0>)
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	20009a5c 	.word	0x20009a5c
 8007078:	0801145c 	.word	0x0801145c
 800707c:	20009074 	.word	0x20009074
 8007080:	08011498 	.word	0x08011498
 8007084:	200002bc 	.word	0x200002bc
 8007088:	08011480 	.word	0x08011480

0800708c <int_reg_update_can>:

int int_reg_update_can(int addr, int i_data){
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
	if (addr < 0 || addr >= INT_REG_LENGTH){
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2b00      	cmp	r3, #0
 800709a:	db02      	blt.n	80070a2 <int_reg_update_can+0x16>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2bff      	cmp	r3, #255	; 0xff
 80070a0:	dd01      	ble.n	80070a6 <int_reg_update_can+0x1a>
		return CODE_INVALID_ADDR;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e023      	b.n	80070ee <int_reg_update_can+0x62>
	}
	else if (int_reg_config[addr].cmd == ' '){
 80070a6:	4a15      	ldr	r2, [pc, #84]	; (80070fc <int_reg_update_can+0x70>)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	011b      	lsls	r3, r3, #4
 80070ac:	4413      	add	r3, r2
 80070ae:	3304      	adds	r3, #4
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	2b20      	cmp	r3, #32
 80070b4:	d101      	bne.n	80070ba <int_reg_update_can+0x2e>
		return CODE_READ_ONLY;
 80070b6:	2302      	movs	r3, #2
 80070b8:	e019      	b.n	80070ee <int_reg_update_can+0x62>
	}
	else if ((int_reg_config[addr].i_MIN > i_data) || (int_reg_config[addr].i_MAX < i_data)){
 80070ba:	4a10      	ldr	r2, [pc, #64]	; (80070fc <int_reg_update_can+0x70>)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	011b      	lsls	r3, r3, #4
 80070c0:	4413      	add	r3, r2
 80070c2:	3308      	adds	r3, #8
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	db08      	blt.n	80070de <int_reg_update_can+0x52>
 80070cc:	4a0b      	ldr	r2, [pc, #44]	; (80070fc <int_reg_update_can+0x70>)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	011b      	lsls	r3, r3, #4
 80070d2:	4413      	add	r3, r2
 80070d4:	330c      	adds	r3, #12
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	429a      	cmp	r2, r3
 80070dc:	dd01      	ble.n	80070e2 <int_reg_update_can+0x56>
		return CODE_INVALID_VALUE;
 80070de:	2301      	movs	r3, #1
 80070e0:	e005      	b.n	80070ee <int_reg_update_can+0x62>
	}
	else{
		__int_reg[addr] = i_data;
 80070e2:	4907      	ldr	r1, [pc, #28]	; (8007100 <int_reg_update_can+0x74>)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		return CODE_CONFIG_SUCCESS;
 80070ec:	2300      	movs	r3, #0
	}
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	20009a5c 	.word	0x20009a5c
 8007100:	20009074 	.word	0x20009074

08007104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800713c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007108:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800710a:	e003      	b.n	8007114 <LoopCopyDataInit>

0800710c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800710c:	4b0c      	ldr	r3, [pc, #48]	; (8007140 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800710e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007110:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007112:	3104      	adds	r1, #4

08007114 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007114:	480b      	ldr	r0, [pc, #44]	; (8007144 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007116:	4b0c      	ldr	r3, [pc, #48]	; (8007148 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007118:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800711a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800711c:	d3f6      	bcc.n	800710c <CopyDataInit>
  ldr  r2, =_sbss
 800711e:	4a0b      	ldr	r2, [pc, #44]	; (800714c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007120:	e002      	b.n	8007128 <LoopFillZerobss>

08007122 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007122:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007124:	f842 3b04 	str.w	r3, [r2], #4

08007128 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007128:	4b09      	ldr	r3, [pc, #36]	; (8007150 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800712a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800712c:	d3f9      	bcc.n	8007122 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800712e:	f7ff fa37 	bl	80065a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007132:	f005 f945 	bl	800c3c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007136:	f7fd fc2d 	bl	8004994 <main>
  bx  lr    
 800713a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800713c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007140:	080121b4 	.word	0x080121b4
  ldr  r0, =_sdata
 8007144:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007148:	20000220 	.word	0x20000220
  ldr  r2, =_sbss
 800714c:	20000220 	.word	0x20000220
  ldr  r3, = _ebss
 8007150:	2000aa70 	.word	0x2000aa70

08007154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007154:	e7fe      	b.n	8007154 <ADC_IRQHandler>
	...

08007158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800715c:	4b0e      	ldr	r3, [pc, #56]	; (8007198 <HAL_Init+0x40>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a0d      	ldr	r2, [pc, #52]	; (8007198 <HAL_Init+0x40>)
 8007162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007168:	4b0b      	ldr	r3, [pc, #44]	; (8007198 <HAL_Init+0x40>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a0a      	ldr	r2, [pc, #40]	; (8007198 <HAL_Init+0x40>)
 800716e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007174:	4b08      	ldr	r3, [pc, #32]	; (8007198 <HAL_Init+0x40>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a07      	ldr	r2, [pc, #28]	; (8007198 <HAL_Init+0x40>)
 800717a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800717e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007180:	2003      	movs	r0, #3
 8007182:	f001 fbb7 	bl	80088f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007186:	2000      	movs	r0, #0
 8007188:	f000 f808 	bl	800719c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800718c:	f7fe fe4e 	bl	8005e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	40023c00 	.word	0x40023c00

0800719c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80071a4:	4b12      	ldr	r3, [pc, #72]	; (80071f0 <HAL_InitTick+0x54>)
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	4b12      	ldr	r3, [pc, #72]	; (80071f4 <HAL_InitTick+0x58>)
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	4619      	mov	r1, r3
 80071ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80071b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80071b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ba:	4618      	mov	r0, r3
 80071bc:	f001 fbcf 	bl	800895e <HAL_SYSTICK_Config>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e00e      	b.n	80071e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2b0f      	cmp	r3, #15
 80071ce:	d80a      	bhi.n	80071e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80071d0:	2200      	movs	r2, #0
 80071d2:	6879      	ldr	r1, [r7, #4]
 80071d4:	f04f 30ff 	mov.w	r0, #4294967295
 80071d8:	f001 fb97 	bl	800890a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80071dc:	4a06      	ldr	r2, [pc, #24]	; (80071f8 <HAL_InitTick+0x5c>)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	e000      	b.n	80071e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	20000040 	.word	0x20000040
 80071f4:	20000048 	.word	0x20000048
 80071f8:	20000044 	.word	0x20000044

080071fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80071fc:	b480      	push	{r7}
 80071fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007200:	4b06      	ldr	r3, [pc, #24]	; (800721c <HAL_IncTick+0x20>)
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	461a      	mov	r2, r3
 8007206:	4b06      	ldr	r3, [pc, #24]	; (8007220 <HAL_IncTick+0x24>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4413      	add	r3, r2
 800720c:	4a04      	ldr	r2, [pc, #16]	; (8007220 <HAL_IncTick+0x24>)
 800720e:	6013      	str	r3, [r2, #0]
}
 8007210:	bf00      	nop
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	20000048 	.word	0x20000048
 8007220:	2000aa5c 	.word	0x2000aa5c

08007224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007224:	b480      	push	{r7}
 8007226:	af00      	add	r7, sp, #0
  return uwTick;
 8007228:	4b03      	ldr	r3, [pc, #12]	; (8007238 <HAL_GetTick+0x14>)
 800722a:	681b      	ldr	r3, [r3, #0]
}
 800722c:	4618      	mov	r0, r3
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	2000aa5c 	.word	0x2000aa5c

0800723c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007244:	f7ff ffee 	bl	8007224 <HAL_GetTick>
 8007248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007254:	d005      	beq.n	8007262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007256:	4b0a      	ldr	r3, [pc, #40]	; (8007280 <HAL_Delay+0x44>)
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	461a      	mov	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	4413      	add	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007262:	bf00      	nop
 8007264:	f7ff ffde 	bl	8007224 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	429a      	cmp	r2, r3
 8007272:	d8f7      	bhi.n	8007264 <HAL_Delay+0x28>
  {
  }
}
 8007274:	bf00      	nop
 8007276:	bf00      	nop
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	20000048 	.word	0x20000048

08007284 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800728c:	2300      	movs	r3, #0
 800728e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d101      	bne.n	800729a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e033      	b.n	8007302 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d109      	bne.n	80072b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7f9 ffd0 	bl	8001248 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ba:	f003 0310 	and.w	r3, r3, #16
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d118      	bne.n	80072f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80072ca:	f023 0302 	bic.w	r3, r3, #2
 80072ce:	f043 0202 	orr.w	r2, r3, #2
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fab4 	bl	8007844 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e6:	f023 0303 	bic.w	r3, r3, #3
 80072ea:	f043 0201 	orr.w	r2, r3, #1
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	641a      	str	r2, [r3, #64]	; 0x40
 80072f2:	e001      	b.n	80072f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007300:	7bfb      	ldrb	r3, [r7, #15]
}
 8007302:	4618      	mov	r0, r3
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
	...

0800730c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8007314:	2300      	movs	r3, #0
 8007316:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800731e:	2b01      	cmp	r3, #1
 8007320:	d101      	bne.n	8007326 <HAL_ADC_Start+0x1a>
 8007322:	2302      	movs	r3, #2
 8007324:	e0b2      	b.n	800748c <HAL_ADC_Start+0x180>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f003 0301 	and.w	r3, r3, #1
 8007338:	2b01      	cmp	r3, #1
 800733a:	d018      	beq.n	800736e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	689a      	ldr	r2, [r3, #8]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f042 0201 	orr.w	r2, r2, #1
 800734a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800734c:	4b52      	ldr	r3, [pc, #328]	; (8007498 <HAL_ADC_Start+0x18c>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a52      	ldr	r2, [pc, #328]	; (800749c <HAL_ADC_Start+0x190>)
 8007352:	fba2 2303 	umull	r2, r3, r2, r3
 8007356:	0c9a      	lsrs	r2, r3, #18
 8007358:	4613      	mov	r3, r2
 800735a:	005b      	lsls	r3, r3, #1
 800735c:	4413      	add	r3, r2
 800735e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007360:	e002      	b.n	8007368 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	3b01      	subs	r3, #1
 8007366:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1f9      	bne.n	8007362 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f003 0301 	and.w	r3, r3, #1
 8007378:	2b01      	cmp	r3, #1
 800737a:	d17a      	bne.n	8007472 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007380:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007384:	f023 0301 	bic.w	r3, r3, #1
 8007388:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800739a:	2b00      	cmp	r3, #0
 800739c:	d007      	beq.n	80073ae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80073a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ba:	d106      	bne.n	80073ca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073c0:	f023 0206 	bic.w	r2, r3, #6
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	645a      	str	r2, [r3, #68]	; 0x44
 80073c8:	e002      	b.n	80073d0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80073d8:	4b31      	ldr	r3, [pc, #196]	; (80074a0 <HAL_ADC_Start+0x194>)
 80073da:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80073e4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f003 031f 	and.w	r3, r3, #31
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d12a      	bne.n	8007448 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a2b      	ldr	r2, [pc, #172]	; (80074a4 <HAL_ADC_Start+0x198>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d015      	beq.n	8007428 <HAL_ADC_Start+0x11c>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a29      	ldr	r2, [pc, #164]	; (80074a8 <HAL_ADC_Start+0x19c>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d105      	bne.n	8007412 <HAL_ADC_Start+0x106>
 8007406:	4b26      	ldr	r3, [pc, #152]	; (80074a0 <HAL_ADC_Start+0x194>)
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f003 031f 	and.w	r3, r3, #31
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00a      	beq.n	8007428 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a25      	ldr	r2, [pc, #148]	; (80074ac <HAL_ADC_Start+0x1a0>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d136      	bne.n	800748a <HAL_ADC_Start+0x17e>
 800741c:	4b20      	ldr	r3, [pc, #128]	; (80074a0 <HAL_ADC_Start+0x194>)
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f003 0310 	and.w	r3, r3, #16
 8007424:	2b00      	cmp	r3, #0
 8007426:	d130      	bne.n	800748a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d129      	bne.n	800748a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	689a      	ldr	r2, [r3, #8]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007444:	609a      	str	r2, [r3, #8]
 8007446:	e020      	b.n	800748a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a15      	ldr	r2, [pc, #84]	; (80074a4 <HAL_ADC_Start+0x198>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d11b      	bne.n	800748a <HAL_ADC_Start+0x17e>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d114      	bne.n	800748a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689a      	ldr	r2, [r3, #8]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800746e:	609a      	str	r2, [r3, #8]
 8007470:	e00b      	b.n	800748a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007476:	f043 0210 	orr.w	r2, r3, #16
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007482:	f043 0201 	orr.w	r2, r3, #1
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3714      	adds	r7, #20
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr
 8007498:	20000040 	.word	0x20000040
 800749c:	431bde83 	.word	0x431bde83
 80074a0:	40012300 	.word	0x40012300
 80074a4:	40012000 	.word	0x40012000
 80074a8:	40012100 	.word	0x40012100
 80074ac:	40012200 	.word	0x40012200

080074b0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80074ba:	2300      	movs	r3, #0
 80074bc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074cc:	d113      	bne.n	80074f6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80074d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074dc:	d10b      	bne.n	80074f6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e2:	f043 0220 	orr.w	r2, r3, #32
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e063      	b.n	80075be <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80074f6:	f7ff fe95 	bl	8007224 <HAL_GetTick>
 80074fa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80074fc:	e021      	b.n	8007542 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007504:	d01d      	beq.n	8007542 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d007      	beq.n	800751c <HAL_ADC_PollForConversion+0x6c>
 800750c:	f7ff fe8a 	bl	8007224 <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	429a      	cmp	r2, r3
 800751a:	d212      	bcs.n	8007542 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0302 	and.w	r3, r3, #2
 8007526:	2b02      	cmp	r3, #2
 8007528:	d00b      	beq.n	8007542 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752e:	f043 0204 	orr.w	r2, r3, #4
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e03d      	b.n	80075be <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0302 	and.w	r3, r3, #2
 800754c:	2b02      	cmp	r3, #2
 800754e:	d1d6      	bne.n	80074fe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f06f 0212 	mvn.w	r2, #18
 8007558:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007570:	2b00      	cmp	r3, #0
 8007572:	d123      	bne.n	80075bc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007578:	2b00      	cmp	r3, #0
 800757a:	d11f      	bne.n	80075bc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007582:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007586:	2b00      	cmp	r3, #0
 8007588:	d006      	beq.n	8007598 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007594:	2b00      	cmp	r3, #0
 8007596:	d111      	bne.n	80075bc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d105      	bne.n	80075bc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b4:	f043 0201 	orr.w	r2, r3, #1
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80075c6:	b480      	push	{r7}
 80075c8:	b083      	sub	sp, #12
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80075ea:	2300      	movs	r3, #0
 80075ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d101      	bne.n	80075fc <HAL_ADC_ConfigChannel+0x1c>
 80075f8:	2302      	movs	r3, #2
 80075fa:	e113      	b.n	8007824 <HAL_ADC_ConfigChannel+0x244>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2b09      	cmp	r3, #9
 800760a:	d925      	bls.n	8007658 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68d9      	ldr	r1, [r3, #12]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	b29b      	uxth	r3, r3
 8007618:	461a      	mov	r2, r3
 800761a:	4613      	mov	r3, r2
 800761c:	005b      	lsls	r3, r3, #1
 800761e:	4413      	add	r3, r2
 8007620:	3b1e      	subs	r3, #30
 8007622:	2207      	movs	r2, #7
 8007624:	fa02 f303 	lsl.w	r3, r2, r3
 8007628:	43da      	mvns	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	400a      	ands	r2, r1
 8007630:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68d9      	ldr	r1, [r3, #12]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	689a      	ldr	r2, [r3, #8]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	b29b      	uxth	r3, r3
 8007642:	4618      	mov	r0, r3
 8007644:	4603      	mov	r3, r0
 8007646:	005b      	lsls	r3, r3, #1
 8007648:	4403      	add	r3, r0
 800764a:	3b1e      	subs	r3, #30
 800764c:	409a      	lsls	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	430a      	orrs	r2, r1
 8007654:	60da      	str	r2, [r3, #12]
 8007656:	e022      	b.n	800769e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6919      	ldr	r1, [r3, #16]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	b29b      	uxth	r3, r3
 8007664:	461a      	mov	r2, r3
 8007666:	4613      	mov	r3, r2
 8007668:	005b      	lsls	r3, r3, #1
 800766a:	4413      	add	r3, r2
 800766c:	2207      	movs	r2, #7
 800766e:	fa02 f303 	lsl.w	r3, r2, r3
 8007672:	43da      	mvns	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	400a      	ands	r2, r1
 800767a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6919      	ldr	r1, [r3, #16]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	689a      	ldr	r2, [r3, #8]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	b29b      	uxth	r3, r3
 800768c:	4618      	mov	r0, r3
 800768e:	4603      	mov	r3, r0
 8007690:	005b      	lsls	r3, r3, #1
 8007692:	4403      	add	r3, r0
 8007694:	409a      	lsls	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	2b06      	cmp	r3, #6
 80076a4:	d824      	bhi.n	80076f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	4613      	mov	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4413      	add	r3, r2
 80076b6:	3b05      	subs	r3, #5
 80076b8:	221f      	movs	r2, #31
 80076ba:	fa02 f303 	lsl.w	r3, r2, r3
 80076be:	43da      	mvns	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	400a      	ands	r2, r1
 80076c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	4618      	mov	r0, r3
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	4613      	mov	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	3b05      	subs	r3, #5
 80076e2:	fa00 f203 	lsl.w	r2, r0, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	430a      	orrs	r2, r1
 80076ec:	635a      	str	r2, [r3, #52]	; 0x34
 80076ee:	e04c      	b.n	800778a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	2b0c      	cmp	r3, #12
 80076f6:	d824      	bhi.n	8007742 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	4613      	mov	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4413      	add	r3, r2
 8007708:	3b23      	subs	r3, #35	; 0x23
 800770a:	221f      	movs	r2, #31
 800770c:	fa02 f303 	lsl.w	r3, r2, r3
 8007710:	43da      	mvns	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	400a      	ands	r2, r1
 8007718:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	b29b      	uxth	r3, r3
 8007726:	4618      	mov	r0, r3
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	685a      	ldr	r2, [r3, #4]
 800772c:	4613      	mov	r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	3b23      	subs	r3, #35	; 0x23
 8007734:	fa00 f203 	lsl.w	r2, r0, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	430a      	orrs	r2, r1
 800773e:	631a      	str	r2, [r3, #48]	; 0x30
 8007740:	e023      	b.n	800778a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	4613      	mov	r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	4413      	add	r3, r2
 8007752:	3b41      	subs	r3, #65	; 0x41
 8007754:	221f      	movs	r2, #31
 8007756:	fa02 f303 	lsl.w	r3, r2, r3
 800775a:	43da      	mvns	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	400a      	ands	r2, r1
 8007762:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	b29b      	uxth	r3, r3
 8007770:	4618      	mov	r0, r3
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	685a      	ldr	r2, [r3, #4]
 8007776:	4613      	mov	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	3b41      	subs	r3, #65	; 0x41
 800777e:	fa00 f203 	lsl.w	r2, r0, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	430a      	orrs	r2, r1
 8007788:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800778a:	4b29      	ldr	r3, [pc, #164]	; (8007830 <HAL_ADC_ConfigChannel+0x250>)
 800778c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a28      	ldr	r2, [pc, #160]	; (8007834 <HAL_ADC_ConfigChannel+0x254>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d10f      	bne.n	80077b8 <HAL_ADC_ConfigChannel+0x1d8>
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2b12      	cmp	r3, #18
 800779e:	d10b      	bne.n	80077b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a1d      	ldr	r2, [pc, #116]	; (8007834 <HAL_ADC_ConfigChannel+0x254>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d12b      	bne.n	800781a <HAL_ADC_ConfigChannel+0x23a>
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a1c      	ldr	r2, [pc, #112]	; (8007838 <HAL_ADC_ConfigChannel+0x258>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d003      	beq.n	80077d4 <HAL_ADC_ConfigChannel+0x1f4>
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b11      	cmp	r3, #17
 80077d2:	d122      	bne.n	800781a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a11      	ldr	r2, [pc, #68]	; (8007838 <HAL_ADC_ConfigChannel+0x258>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d111      	bne.n	800781a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80077f6:	4b11      	ldr	r3, [pc, #68]	; (800783c <HAL_ADC_ConfigChannel+0x25c>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a11      	ldr	r2, [pc, #68]	; (8007840 <HAL_ADC_ConfigChannel+0x260>)
 80077fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007800:	0c9a      	lsrs	r2, r3, #18
 8007802:	4613      	mov	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4413      	add	r3, r2
 8007808:	005b      	lsls	r3, r3, #1
 800780a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800780c:	e002      	b.n	8007814 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	3b01      	subs	r3, #1
 8007812:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1f9      	bne.n	800780e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	40012300 	.word	0x40012300
 8007834:	40012000 	.word	0x40012000
 8007838:	10000012 	.word	0x10000012
 800783c:	20000040 	.word	0x20000040
 8007840:	431bde83 	.word	0x431bde83

08007844 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800784c:	4b79      	ldr	r3, [pc, #484]	; (8007a34 <ADC_Init+0x1f0>)
 800784e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	431a      	orrs	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	685a      	ldr	r2, [r3, #4]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007878:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	6859      	ldr	r1, [r3, #4]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	021a      	lsls	r2, r3, #8
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	430a      	orrs	r2, r1
 800788c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	685a      	ldr	r2, [r3, #4]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800789c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	6859      	ldr	r1, [r3, #4]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	689a      	ldr	r2, [r3, #8]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	430a      	orrs	r2, r1
 80078ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689a      	ldr	r2, [r3, #8]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6899      	ldr	r1, [r3, #8]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	68da      	ldr	r2, [r3, #12]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	430a      	orrs	r2, r1
 80078d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d6:	4a58      	ldr	r2, [pc, #352]	; (8007a38 <ADC_Init+0x1f4>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d022      	beq.n	8007922 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	689a      	ldr	r2, [r3, #8]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80078ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	6899      	ldr	r1, [r3, #8]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	689a      	ldr	r2, [r3, #8]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800790c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	6899      	ldr	r1, [r3, #8]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	430a      	orrs	r2, r1
 800791e:	609a      	str	r2, [r3, #8]
 8007920:	e00f      	b.n	8007942 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	689a      	ldr	r2, [r3, #8]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007930:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	689a      	ldr	r2, [r3, #8]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007940:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	689a      	ldr	r2, [r3, #8]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f022 0202 	bic.w	r2, r2, #2
 8007950:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	6899      	ldr	r1, [r3, #8]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	7e1b      	ldrb	r3, [r3, #24]
 800795c:	005a      	lsls	r2, r3, #1
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	430a      	orrs	r2, r1
 8007964:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 3020 	ldrb.w	r3, [r3, #32]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d01b      	beq.n	80079a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	685a      	ldr	r2, [r3, #4]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800797e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	685a      	ldr	r2, [r3, #4]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800798e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6859      	ldr	r1, [r3, #4]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799a:	3b01      	subs	r3, #1
 800799c:	035a      	lsls	r2, r3, #13
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	430a      	orrs	r2, r1
 80079a4:	605a      	str	r2, [r3, #4]
 80079a6:	e007      	b.n	80079b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	685a      	ldr	r2, [r3, #4]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80079c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	69db      	ldr	r3, [r3, #28]
 80079d2:	3b01      	subs	r3, #1
 80079d4:	051a      	lsls	r2, r3, #20
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	430a      	orrs	r2, r1
 80079dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689a      	ldr	r2, [r3, #8]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80079ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	6899      	ldr	r1, [r3, #8]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80079fa:	025a      	lsls	r2, r3, #9
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	430a      	orrs	r2, r1
 8007a02:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689a      	ldr	r2, [r3, #8]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	6899      	ldr	r1, [r3, #8]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	029a      	lsls	r2, r3, #10
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	430a      	orrs	r2, r1
 8007a26:	609a      	str	r2, [r3, #8]
}
 8007a28:	bf00      	nop
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr
 8007a34:	40012300 	.word	0x40012300
 8007a38:	0f000001 	.word	0x0f000001

08007a3c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d101      	bne.n	8007a54 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8007a50:	2302      	movs	r3, #2
 8007a52:	e031      	b.n	8007ab8 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007a5c:	4b19      	ldr	r3, [pc, #100]	; (8007ac4 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8007a5e:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	f023 021f 	bic.w	r2, r3, #31
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	685a      	ldr	r2, [r3, #4]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	431a      	orrs	r2, r3
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	685a      	ldr	r2, [r3, #4]
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	431a      	orrs	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	685a      	ldr	r2, [r3, #4]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr
 8007ac4:	40012300 	.word	0x40012300

08007ac8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d101      	bne.n	8007ada <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e0ed      	b.n	8007cb6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d102      	bne.n	8007aec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7fa f856 	bl	8001b98 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f022 0202 	bic.w	r2, r2, #2
 8007afa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007afc:	f7ff fb92 	bl	8007224 <HAL_GetTick>
 8007b00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007b02:	e012      	b.n	8007b2a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007b04:	f7ff fb8e 	bl	8007224 <HAL_GetTick>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	2b0a      	cmp	r3, #10
 8007b10:	d90b      	bls.n	8007b2a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2205      	movs	r2, #5
 8007b22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e0c5      	b.n	8007cb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	f003 0302 	and.w	r3, r3, #2
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d1e5      	bne.n	8007b04 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f042 0201 	orr.w	r2, r2, #1
 8007b46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b48:	f7ff fb6c 	bl	8007224 <HAL_GetTick>
 8007b4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007b4e:	e012      	b.n	8007b76 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007b50:	f7ff fb68 	bl	8007224 <HAL_GetTick>
 8007b54:	4602      	mov	r2, r0
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	2b0a      	cmp	r3, #10
 8007b5c:	d90b      	bls.n	8007b76 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2205      	movs	r2, #5
 8007b6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e09f      	b.n	8007cb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	f003 0301 	and.w	r3, r3, #1
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d0e5      	beq.n	8007b50 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	7e1b      	ldrb	r3, [r3, #24]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d108      	bne.n	8007b9e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b9a:	601a      	str	r2, [r3, #0]
 8007b9c:	e007      	b.n	8007bae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	7e5b      	ldrb	r3, [r3, #25]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d108      	bne.n	8007bc8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bc4:	601a      	str	r2, [r3, #0]
 8007bc6:	e007      	b.n	8007bd8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	7e9b      	ldrb	r3, [r3, #26]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d108      	bne.n	8007bf2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f042 0220 	orr.w	r2, r2, #32
 8007bee:	601a      	str	r2, [r3, #0]
 8007bf0:	e007      	b.n	8007c02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f022 0220 	bic.w	r2, r2, #32
 8007c00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	7edb      	ldrb	r3, [r3, #27]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d108      	bne.n	8007c1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f022 0210 	bic.w	r2, r2, #16
 8007c18:	601a      	str	r2, [r3, #0]
 8007c1a:	e007      	b.n	8007c2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f042 0210 	orr.w	r2, r2, #16
 8007c2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	7f1b      	ldrb	r3, [r3, #28]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d108      	bne.n	8007c46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f042 0208 	orr.w	r2, r2, #8
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	e007      	b.n	8007c56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f022 0208 	bic.w	r2, r2, #8
 8007c54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	7f5b      	ldrb	r3, [r3, #29]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d108      	bne.n	8007c70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f042 0204 	orr.w	r2, r2, #4
 8007c6c:	601a      	str	r2, [r3, #0]
 8007c6e:	e007      	b.n	8007c80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f022 0204 	bic.w	r2, r2, #4
 8007c7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	689a      	ldr	r2, [r3, #8]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	431a      	orrs	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	431a      	orrs	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	695b      	ldr	r3, [r3, #20]
 8007c94:	ea42 0103 	orr.w	r1, r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	1e5a      	subs	r2, r3, #1
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	430a      	orrs	r2, r1
 8007ca4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
	...

08007cc0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b087      	sub	sp, #28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007cd6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007cd8:	7cfb      	ldrb	r3, [r7, #19]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d003      	beq.n	8007ce6 <HAL_CAN_ConfigFilter+0x26>
 8007cde:	7cfb      	ldrb	r3, [r7, #19]
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	f040 80be 	bne.w	8007e62 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8007ce6:	4b65      	ldr	r3, [pc, #404]	; (8007e7c <HAL_CAN_ConfigFilter+0x1bc>)
 8007ce8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007cf0:	f043 0201 	orr.w	r2, r3, #1
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d00:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d14:	021b      	lsls	r3, r3, #8
 8007d16:	431a      	orrs	r2, r3
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	f003 031f 	and.w	r3, r3, #31
 8007d26:	2201      	movs	r2, #1
 8007d28:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	43db      	mvns	r3, r3
 8007d38:	401a      	ands	r2, r3
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	69db      	ldr	r3, [r3, #28]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d123      	bne.n	8007d90 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	43db      	mvns	r3, r3
 8007d52:	401a      	ands	r2, r3
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007d66:	683a      	ldr	r2, [r7, #0]
 8007d68:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007d6a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	3248      	adds	r2, #72	; 0x48
 8007d70:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007d84:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007d86:	6979      	ldr	r1, [r7, #20]
 8007d88:	3348      	adds	r3, #72	; 0x48
 8007d8a:	00db      	lsls	r3, r3, #3
 8007d8c:	440b      	add	r3, r1
 8007d8e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	69db      	ldr	r3, [r3, #28]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d122      	bne.n	8007dde <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	431a      	orrs	r2, r3
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007db4:	683a      	ldr	r2, [r7, #0]
 8007db6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007db8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	3248      	adds	r2, #72	; 0x48
 8007dbe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007dd2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007dd4:	6979      	ldr	r1, [r7, #20]
 8007dd6:	3348      	adds	r3, #72	; 0x48
 8007dd8:	00db      	lsls	r3, r3, #3
 8007dda:	440b      	add	r3, r1
 8007ddc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d109      	bne.n	8007dfa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	43db      	mvns	r3, r3
 8007df0:	401a      	ands	r2, r3
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007df8:	e007      	b.n	8007e0a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	431a      	orrs	r2, r3
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d109      	bne.n	8007e26 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	43db      	mvns	r3, r3
 8007e1c:	401a      	ands	r2, r3
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007e24:	e007      	b.n	8007e36 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	431a      	orrs	r2, r3
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	6a1b      	ldr	r3, [r3, #32]
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d107      	bne.n	8007e4e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	431a      	orrs	r2, r3
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e54:	f023 0201 	bic.w	r2, r3, #1
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	e006      	b.n	8007e70 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e66:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
  }
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	371c      	adds	r7, #28
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr
 8007e7c:	40006400 	.word	0x40006400

08007e80 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d12e      	bne.n	8007ef2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2202      	movs	r2, #2
 8007e98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f022 0201 	bic.w	r2, r2, #1
 8007eaa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007eac:	f7ff f9ba 	bl	8007224 <HAL_GetTick>
 8007eb0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007eb2:	e012      	b.n	8007eda <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007eb4:	f7ff f9b6 	bl	8007224 <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	2b0a      	cmp	r3, #10
 8007ec0:	d90b      	bls.n	8007eda <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2205      	movs	r2, #5
 8007ed2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e012      	b.n	8007f00 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d1e5      	bne.n	8007eb4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	e006      	b.n	8007f00 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
  }
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b089      	sub	sp, #36	; 0x24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
 8007f14:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f1c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007f26:	7ffb      	ldrb	r3, [r7, #31]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d003      	beq.n	8007f34 <HAL_CAN_AddTxMessage+0x2c>
 8007f2c:	7ffb      	ldrb	r3, [r7, #31]
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	f040 80b8 	bne.w	80080a4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10a      	bne.n	8007f54 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d105      	bne.n	8007f54 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f000 80a0 	beq.w	8008094 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	0e1b      	lsrs	r3, r3, #24
 8007f58:	f003 0303 	and.w	r3, r3, #3
 8007f5c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d907      	bls.n	8007f74 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f68:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e09e      	b.n	80080b2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007f74:	2201      	movs	r2, #1
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	409a      	lsls	r2, r3
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10d      	bne.n	8007fa2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007f90:	68f9      	ldr	r1, [r7, #12]
 8007f92:	6809      	ldr	r1, [r1, #0]
 8007f94:	431a      	orrs	r2, r3
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	3318      	adds	r3, #24
 8007f9a:	011b      	lsls	r3, r3, #4
 8007f9c:	440b      	add	r3, r1
 8007f9e:	601a      	str	r2, [r3, #0]
 8007fa0:	e00f      	b.n	8007fc2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007fac:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007fb2:	68f9      	ldr	r1, [r7, #12]
 8007fb4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007fb6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	3318      	adds	r3, #24
 8007fbc:	011b      	lsls	r3, r3, #4
 8007fbe:	440b      	add	r3, r1
 8007fc0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6819      	ldr	r1, [r3, #0]
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	691a      	ldr	r2, [r3, #16]
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	3318      	adds	r3, #24
 8007fce:	011b      	lsls	r3, r3, #4
 8007fd0:	440b      	add	r3, r1
 8007fd2:	3304      	adds	r3, #4
 8007fd4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	7d1b      	ldrb	r3, [r3, #20]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d111      	bne.n	8008002 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	3318      	adds	r3, #24
 8007fe6:	011b      	lsls	r3, r3, #4
 8007fe8:	4413      	add	r3, r2
 8007fea:	3304      	adds	r3, #4
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	6811      	ldr	r1, [r2, #0]
 8007ff2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	3318      	adds	r3, #24
 8007ffa:	011b      	lsls	r3, r3, #4
 8007ffc:	440b      	add	r3, r1
 8007ffe:	3304      	adds	r3, #4
 8008000:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	3307      	adds	r3, #7
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	061a      	lsls	r2, r3, #24
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	3306      	adds	r3, #6
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	041b      	lsls	r3, r3, #16
 8008012:	431a      	orrs	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	3305      	adds	r3, #5
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	021b      	lsls	r3, r3, #8
 800801c:	4313      	orrs	r3, r2
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	3204      	adds	r2, #4
 8008022:	7812      	ldrb	r2, [r2, #0]
 8008024:	4610      	mov	r0, r2
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	6811      	ldr	r1, [r2, #0]
 800802a:	ea43 0200 	orr.w	r2, r3, r0
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	011b      	lsls	r3, r3, #4
 8008032:	440b      	add	r3, r1
 8008034:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8008038:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	3303      	adds	r3, #3
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	061a      	lsls	r2, r3, #24
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	3302      	adds	r3, #2
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	041b      	lsls	r3, r3, #16
 800804a:	431a      	orrs	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	3301      	adds	r3, #1
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	021b      	lsls	r3, r3, #8
 8008054:	4313      	orrs	r3, r2
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	7812      	ldrb	r2, [r2, #0]
 800805a:	4610      	mov	r0, r2
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	6811      	ldr	r1, [r2, #0]
 8008060:	ea43 0200 	orr.w	r2, r3, r0
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	011b      	lsls	r3, r3, #4
 8008068:	440b      	add	r3, r1
 800806a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800806e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	3318      	adds	r3, #24
 8008078:	011b      	lsls	r3, r3, #4
 800807a:	4413      	add	r3, r2
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	6811      	ldr	r1, [r2, #0]
 8008082:	f043 0201 	orr.w	r2, r3, #1
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	3318      	adds	r3, #24
 800808a:	011b      	lsls	r3, r3, #4
 800808c:	440b      	add	r3, r1
 800808e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8008090:	2300      	movs	r3, #0
 8008092:	e00e      	b.n	80080b2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008098:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	e006      	b.n	80080b2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
  }
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3724      	adds	r7, #36	; 0x24
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80080be:	b480      	push	{r7}
 80080c0:	b087      	sub	sp, #28
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	60f8      	str	r0, [r7, #12]
 80080c6:	60b9      	str	r1, [r7, #8]
 80080c8:	607a      	str	r2, [r7, #4]
 80080ca:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80080d2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80080d4:	7dfb      	ldrb	r3, [r7, #23]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d003      	beq.n	80080e2 <HAL_CAN_GetRxMessage+0x24>
 80080da:	7dfb      	ldrb	r3, [r7, #23]
 80080dc:	2b02      	cmp	r3, #2
 80080de:	f040 80f3 	bne.w	80082c8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10e      	bne.n	8008106 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	f003 0303 	and.w	r3, r3, #3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d116      	bne.n	8008124 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e0e7      	b.n	80082d6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	f003 0303 	and.w	r3, r3, #3
 8008110:	2b00      	cmp	r3, #0
 8008112:	d107      	bne.n	8008124 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008118:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e0d8      	b.n	80082d6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	331b      	adds	r3, #27
 800812c:	011b      	lsls	r3, r3, #4
 800812e:	4413      	add	r3, r2
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0204 	and.w	r2, r3, #4
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d10c      	bne.n	800815c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	331b      	adds	r3, #27
 800814a:	011b      	lsls	r3, r3, #4
 800814c:	4413      	add	r3, r2
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	0d5b      	lsrs	r3, r3, #21
 8008152:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	e00b      	b.n	8008174 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	331b      	adds	r3, #27
 8008164:	011b      	lsls	r3, r3, #4
 8008166:	4413      	add	r3, r2
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	08db      	lsrs	r3, r3, #3
 800816c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	331b      	adds	r3, #27
 800817c:	011b      	lsls	r3, r3, #4
 800817e:	4413      	add	r3, r2
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 0202 	and.w	r2, r3, #2
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	331b      	adds	r3, #27
 8008192:	011b      	lsls	r3, r3, #4
 8008194:	4413      	add	r3, r2
 8008196:	3304      	adds	r3, #4
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 020f 	and.w	r2, r3, #15
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	331b      	adds	r3, #27
 80081aa:	011b      	lsls	r3, r3, #4
 80081ac:	4413      	add	r3, r2
 80081ae:	3304      	adds	r3, #4
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	0a1b      	lsrs	r3, r3, #8
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	331b      	adds	r3, #27
 80081c2:	011b      	lsls	r3, r3, #4
 80081c4:	4413      	add	r3, r2
 80081c6:	3304      	adds	r3, #4
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	0c1b      	lsrs	r3, r3, #16
 80081cc:	b29a      	uxth	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	011b      	lsls	r3, r3, #4
 80081da:	4413      	add	r3, r2
 80081dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	b2da      	uxtb	r2, r3
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	011b      	lsls	r3, r3, #4
 80081f0:	4413      	add	r3, r2
 80081f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	0a1a      	lsrs	r2, r3, #8
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	3301      	adds	r3, #1
 80081fe:	b2d2      	uxtb	r2, r2
 8008200:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	011b      	lsls	r3, r3, #4
 800820a:	4413      	add	r3, r2
 800820c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	0c1a      	lsrs	r2, r3, #16
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	3302      	adds	r3, #2
 8008218:	b2d2      	uxtb	r2, r2
 800821a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	011b      	lsls	r3, r3, #4
 8008224:	4413      	add	r3, r2
 8008226:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	0e1a      	lsrs	r2, r3, #24
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	3303      	adds	r3, #3
 8008232:	b2d2      	uxtb	r2, r2
 8008234:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	011b      	lsls	r3, r3, #4
 800823e:	4413      	add	r3, r2
 8008240:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	3304      	adds	r3, #4
 800824a:	b2d2      	uxtb	r2, r2
 800824c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	011b      	lsls	r3, r3, #4
 8008256:	4413      	add	r3, r2
 8008258:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	0a1a      	lsrs	r2, r3, #8
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	3305      	adds	r3, #5
 8008264:	b2d2      	uxtb	r2, r2
 8008266:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	011b      	lsls	r3, r3, #4
 8008270:	4413      	add	r3, r2
 8008272:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	0c1a      	lsrs	r2, r3, #16
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	3306      	adds	r3, #6
 800827e:	b2d2      	uxtb	r2, r2
 8008280:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	011b      	lsls	r3, r3, #4
 800828a:	4413      	add	r3, r2
 800828c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	0e1a      	lsrs	r2, r3, #24
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	3307      	adds	r3, #7
 8008298:	b2d2      	uxtb	r2, r2
 800829a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d108      	bne.n	80082b4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68da      	ldr	r2, [r3, #12]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f042 0220 	orr.w	r2, r2, #32
 80082b0:	60da      	str	r2, [r3, #12]
 80082b2:	e007      	b.n	80082c4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	691a      	ldr	r2, [r3, #16]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f042 0220 	orr.w	r2, r2, #32
 80082c2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80082c4:	2300      	movs	r3, #0
 80082c6:	e006      	b.n	80082d6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
  }
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	371c      	adds	r7, #28
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr

080082e2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b08a      	sub	sp, #40	; 0x28
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80082ea:	2300      	movs	r3, #0
 80082ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	695b      	ldr	r3, [r3, #20]
 80082f4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	699b      	ldr	r3, [r3, #24]
 800831c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800831e:	6a3b      	ldr	r3, [r7, #32]
 8008320:	f003 0301 	and.w	r3, r3, #1
 8008324:	2b00      	cmp	r3, #0
 8008326:	d07c      	beq.n	8008422 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	f003 0301 	and.w	r3, r3, #1
 800832e:	2b00      	cmp	r3, #0
 8008330:	d023      	beq.n	800837a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2201      	movs	r2, #1
 8008338:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	f003 0302 	and.w	r3, r3, #2
 8008340:	2b00      	cmp	r3, #0
 8008342:	d003      	beq.n	800834c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 f983 	bl	8008650 <HAL_CAN_TxMailbox0CompleteCallback>
 800834a:	e016      	b.n	800837a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	f003 0304 	and.w	r3, r3, #4
 8008352:	2b00      	cmp	r3, #0
 8008354:	d004      	beq.n	8008360 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008358:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800835c:	627b      	str	r3, [r7, #36]	; 0x24
 800835e:	e00c      	b.n	800837a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	f003 0308 	and.w	r3, r3, #8
 8008366:	2b00      	cmp	r3, #0
 8008368:	d004      	beq.n	8008374 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800836a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008370:	627b      	str	r3, [r7, #36]	; 0x24
 8008372:	e002      	b.n	800837a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 f989 	bl	800868c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008380:	2b00      	cmp	r3, #0
 8008382:	d024      	beq.n	80083ce <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f44f 7280 	mov.w	r2, #256	; 0x100
 800838c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008394:	2b00      	cmp	r3, #0
 8008396:	d003      	beq.n	80083a0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 f963 	bl	8008664 <HAL_CAN_TxMailbox1CompleteCallback>
 800839e:	e016      	b.n	80083ce <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d004      	beq.n	80083b4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80083b0:	627b      	str	r3, [r7, #36]	; 0x24
 80083b2:	e00c      	b.n	80083ce <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d004      	beq.n	80083c8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80083be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083c4:	627b      	str	r3, [r7, #36]	; 0x24
 80083c6:	e002      	b.n	80083ce <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 f969 	bl	80086a0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d024      	beq.n	8008422 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80083e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d003      	beq.n	80083f4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f943 	bl	8008678 <HAL_CAN_TxMailbox2CompleteCallback>
 80083f2:	e016      	b.n	8008422 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d004      	beq.n	8008408 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80083fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008404:	627b      	str	r3, [r7, #36]	; 0x24
 8008406:	e00c      	b.n	8008422 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d004      	beq.n	800841c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8008412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008418:	627b      	str	r3, [r7, #36]	; 0x24
 800841a:	e002      	b.n	8008422 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f949 	bl	80086b4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8008422:	6a3b      	ldr	r3, [r7, #32]
 8008424:	f003 0308 	and.w	r3, r3, #8
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00c      	beq.n	8008446 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	f003 0310 	and.w	r3, r3, #16
 8008432:	2b00      	cmp	r3, #0
 8008434:	d007      	beq.n	8008446 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8008436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008438:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800843c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2210      	movs	r2, #16
 8008444:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8008446:	6a3b      	ldr	r3, [r7, #32]
 8008448:	f003 0304 	and.w	r3, r3, #4
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00b      	beq.n	8008468 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	f003 0308 	and.w	r3, r3, #8
 8008456:	2b00      	cmp	r3, #0
 8008458:	d006      	beq.n	8008468 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2208      	movs	r2, #8
 8008460:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f93a 	bl	80086dc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8008468:	6a3b      	ldr	r3, [r7, #32]
 800846a:	f003 0302 	and.w	r3, r3, #2
 800846e:	2b00      	cmp	r3, #0
 8008470:	d009      	beq.n	8008486 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	f003 0303 	and.w	r3, r3, #3
 800847c:	2b00      	cmp	r3, #0
 800847e:	d002      	beq.n	8008486 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 f921 	bl	80086c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00c      	beq.n	80084aa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	f003 0310 	and.w	r3, r3, #16
 8008496:	2b00      	cmp	r3, #0
 8008498:	d007      	beq.n	80084aa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80084a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2210      	movs	r2, #16
 80084a8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80084aa:	6a3b      	ldr	r3, [r7, #32]
 80084ac:	f003 0320 	and.w	r3, r3, #32
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00b      	beq.n	80084cc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	f003 0308 	and.w	r3, r3, #8
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d006      	beq.n	80084cc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2208      	movs	r2, #8
 80084c4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f91c 	bl	8008704 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80084cc:	6a3b      	ldr	r3, [r7, #32]
 80084ce:	f003 0310 	and.w	r3, r3, #16
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d009      	beq.n	80084ea <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	f003 0303 	and.w	r3, r3, #3
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d002      	beq.n	80084ea <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 f903 	bl	80086f0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80084ea:	6a3b      	ldr	r3, [r7, #32]
 80084ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00b      	beq.n	800850c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	f003 0310 	and.w	r3, r3, #16
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d006      	beq.n	800850c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2210      	movs	r2, #16
 8008504:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f906 	bl	8008718 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800850c:	6a3b      	ldr	r3, [r7, #32]
 800850e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00b      	beq.n	800852e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	f003 0308 	and.w	r3, r3, #8
 800851c:	2b00      	cmp	r3, #0
 800851e:	d006      	beq.n	800852e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2208      	movs	r2, #8
 8008526:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 f8ff 	bl	800872c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008534:	2b00      	cmp	r3, #0
 8008536:	d07b      	beq.n	8008630 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	f003 0304 	and.w	r3, r3, #4
 800853e:	2b00      	cmp	r3, #0
 8008540:	d072      	beq.n	8008628 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008542:	6a3b      	ldr	r3, [r7, #32]
 8008544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008548:	2b00      	cmp	r3, #0
 800854a:	d008      	beq.n	800855e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008552:	2b00      	cmp	r3, #0
 8008554:	d003      	beq.n	800855e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8008556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008558:	f043 0301 	orr.w	r3, r3, #1
 800855c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800855e:	6a3b      	ldr	r3, [r7, #32]
 8008560:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008564:	2b00      	cmp	r3, #0
 8008566:	d008      	beq.n	800857a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800856e:	2b00      	cmp	r3, #0
 8008570:	d003      	beq.n	800857a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8008572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008574:	f043 0302 	orr.w	r3, r3, #2
 8008578:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800857a:	6a3b      	ldr	r3, [r7, #32]
 800857c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008580:	2b00      	cmp	r3, #0
 8008582:	d008      	beq.n	8008596 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800858a:	2b00      	cmp	r3, #0
 800858c:	d003      	beq.n	8008596 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800858e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008590:	f043 0304 	orr.w	r3, r3, #4
 8008594:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008596:	6a3b      	ldr	r3, [r7, #32]
 8008598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800859c:	2b00      	cmp	r3, #0
 800859e:	d043      	beq.n	8008628 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d03e      	beq.n	8008628 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085b0:	2b60      	cmp	r3, #96	; 0x60
 80085b2:	d02b      	beq.n	800860c <HAL_CAN_IRQHandler+0x32a>
 80085b4:	2b60      	cmp	r3, #96	; 0x60
 80085b6:	d82e      	bhi.n	8008616 <HAL_CAN_IRQHandler+0x334>
 80085b8:	2b50      	cmp	r3, #80	; 0x50
 80085ba:	d022      	beq.n	8008602 <HAL_CAN_IRQHandler+0x320>
 80085bc:	2b50      	cmp	r3, #80	; 0x50
 80085be:	d82a      	bhi.n	8008616 <HAL_CAN_IRQHandler+0x334>
 80085c0:	2b40      	cmp	r3, #64	; 0x40
 80085c2:	d019      	beq.n	80085f8 <HAL_CAN_IRQHandler+0x316>
 80085c4:	2b40      	cmp	r3, #64	; 0x40
 80085c6:	d826      	bhi.n	8008616 <HAL_CAN_IRQHandler+0x334>
 80085c8:	2b30      	cmp	r3, #48	; 0x30
 80085ca:	d010      	beq.n	80085ee <HAL_CAN_IRQHandler+0x30c>
 80085cc:	2b30      	cmp	r3, #48	; 0x30
 80085ce:	d822      	bhi.n	8008616 <HAL_CAN_IRQHandler+0x334>
 80085d0:	2b10      	cmp	r3, #16
 80085d2:	d002      	beq.n	80085da <HAL_CAN_IRQHandler+0x2f8>
 80085d4:	2b20      	cmp	r3, #32
 80085d6:	d005      	beq.n	80085e4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80085d8:	e01d      	b.n	8008616 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	f043 0308 	orr.w	r3, r3, #8
 80085e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80085e2:	e019      	b.n	8008618 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	f043 0310 	orr.w	r3, r3, #16
 80085ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80085ec:	e014      	b.n	8008618 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80085ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f0:	f043 0320 	orr.w	r3, r3, #32
 80085f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80085f6:	e00f      	b.n	8008618 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008600:	e00a      	b.n	8008618 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8008602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008608:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800860a:	e005      	b.n	8008618 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800860c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008612:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008614:	e000      	b.n	8008618 <HAL_CAN_IRQHandler+0x336>
            break;
 8008616:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	699a      	ldr	r2, [r3, #24]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008626:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2204      	movs	r2, #4
 800862e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	2b00      	cmp	r3, #0
 8008634:	d008      	beq.n	8008648 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800863a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863c:	431a      	orrs	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 f87c 	bl	8008740 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8008648:	bf00      	nop
 800864a:	3728      	adds	r7, #40	; 0x28
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800866c:	bf00      	nop
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80086a8:	bf00      	nop
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f003 0307 	and.w	r3, r3, #7
 8008762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008764:	4b0c      	ldr	r3, [pc, #48]	; (8008798 <__NVIC_SetPriorityGrouping+0x44>)
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008770:	4013      	ands	r3, r2
 8008772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800877c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008786:	4a04      	ldr	r2, [pc, #16]	; (8008798 <__NVIC_SetPriorityGrouping+0x44>)
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	60d3      	str	r3, [r2, #12]
}
 800878c:	bf00      	nop
 800878e:	3714      	adds	r7, #20
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	e000ed00 	.word	0xe000ed00

0800879c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800879c:	b480      	push	{r7}
 800879e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80087a0:	4b04      	ldr	r3, [pc, #16]	; (80087b4 <__NVIC_GetPriorityGrouping+0x18>)
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	0a1b      	lsrs	r3, r3, #8
 80087a6:	f003 0307 	and.w	r3, r3, #7
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr
 80087b4:	e000ed00 	.word	0xe000ed00

080087b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	4603      	mov	r3, r0
 80087c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80087c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	db0b      	blt.n	80087e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80087ca:	79fb      	ldrb	r3, [r7, #7]
 80087cc:	f003 021f 	and.w	r2, r3, #31
 80087d0:	4907      	ldr	r1, [pc, #28]	; (80087f0 <__NVIC_EnableIRQ+0x38>)
 80087d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087d6:	095b      	lsrs	r3, r3, #5
 80087d8:	2001      	movs	r0, #1
 80087da:	fa00 f202 	lsl.w	r2, r0, r2
 80087de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80087e2:	bf00      	nop
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	e000e100 	.word	0xe000e100

080087f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	4603      	mov	r3, r0
 80087fc:	6039      	str	r1, [r7, #0]
 80087fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008804:	2b00      	cmp	r3, #0
 8008806:	db0a      	blt.n	800881e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	b2da      	uxtb	r2, r3
 800880c:	490c      	ldr	r1, [pc, #48]	; (8008840 <__NVIC_SetPriority+0x4c>)
 800880e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008812:	0112      	lsls	r2, r2, #4
 8008814:	b2d2      	uxtb	r2, r2
 8008816:	440b      	add	r3, r1
 8008818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800881c:	e00a      	b.n	8008834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	b2da      	uxtb	r2, r3
 8008822:	4908      	ldr	r1, [pc, #32]	; (8008844 <__NVIC_SetPriority+0x50>)
 8008824:	79fb      	ldrb	r3, [r7, #7]
 8008826:	f003 030f 	and.w	r3, r3, #15
 800882a:	3b04      	subs	r3, #4
 800882c:	0112      	lsls	r2, r2, #4
 800882e:	b2d2      	uxtb	r2, r2
 8008830:	440b      	add	r3, r1
 8008832:	761a      	strb	r2, [r3, #24]
}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr
 8008840:	e000e100 	.word	0xe000e100
 8008844:	e000ed00 	.word	0xe000ed00

08008848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008848:	b480      	push	{r7}
 800884a:	b089      	sub	sp, #36	; 0x24
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f003 0307 	and.w	r3, r3, #7
 800885a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	f1c3 0307 	rsb	r3, r3, #7
 8008862:	2b04      	cmp	r3, #4
 8008864:	bf28      	it	cs
 8008866:	2304      	movcs	r3, #4
 8008868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	3304      	adds	r3, #4
 800886e:	2b06      	cmp	r3, #6
 8008870:	d902      	bls.n	8008878 <NVIC_EncodePriority+0x30>
 8008872:	69fb      	ldr	r3, [r7, #28]
 8008874:	3b03      	subs	r3, #3
 8008876:	e000      	b.n	800887a <NVIC_EncodePriority+0x32>
 8008878:	2300      	movs	r3, #0
 800887a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800887c:	f04f 32ff 	mov.w	r2, #4294967295
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	fa02 f303 	lsl.w	r3, r2, r3
 8008886:	43da      	mvns	r2, r3
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	401a      	ands	r2, r3
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008890:	f04f 31ff 	mov.w	r1, #4294967295
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	fa01 f303 	lsl.w	r3, r1, r3
 800889a:	43d9      	mvns	r1, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80088a0:	4313      	orrs	r3, r2
         );
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3724      	adds	r7, #36	; 0x24
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
	...

080088b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	3b01      	subs	r3, #1
 80088bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80088c0:	d301      	bcc.n	80088c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80088c2:	2301      	movs	r3, #1
 80088c4:	e00f      	b.n	80088e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80088c6:	4a0a      	ldr	r2, [pc, #40]	; (80088f0 <SysTick_Config+0x40>)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	3b01      	subs	r3, #1
 80088cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80088ce:	210f      	movs	r1, #15
 80088d0:	f04f 30ff 	mov.w	r0, #4294967295
 80088d4:	f7ff ff8e 	bl	80087f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80088d8:	4b05      	ldr	r3, [pc, #20]	; (80088f0 <SysTick_Config+0x40>)
 80088da:	2200      	movs	r2, #0
 80088dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80088de:	4b04      	ldr	r3, [pc, #16]	; (80088f0 <SysTick_Config+0x40>)
 80088e0:	2207      	movs	r2, #7
 80088e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	e000e010 	.word	0xe000e010

080088f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f7ff ff29 	bl	8008754 <__NVIC_SetPriorityGrouping>
}
 8008902:	bf00      	nop
 8008904:	3708      	adds	r7, #8
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800890a:	b580      	push	{r7, lr}
 800890c:	b086      	sub	sp, #24
 800890e:	af00      	add	r7, sp, #0
 8008910:	4603      	mov	r3, r0
 8008912:	60b9      	str	r1, [r7, #8]
 8008914:	607a      	str	r2, [r7, #4]
 8008916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008918:	2300      	movs	r3, #0
 800891a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800891c:	f7ff ff3e 	bl	800879c <__NVIC_GetPriorityGrouping>
 8008920:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	68b9      	ldr	r1, [r7, #8]
 8008926:	6978      	ldr	r0, [r7, #20]
 8008928:	f7ff ff8e 	bl	8008848 <NVIC_EncodePriority>
 800892c:	4602      	mov	r2, r0
 800892e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008932:	4611      	mov	r1, r2
 8008934:	4618      	mov	r0, r3
 8008936:	f7ff ff5d 	bl	80087f4 <__NVIC_SetPriority>
}
 800893a:	bf00      	nop
 800893c:	3718      	adds	r7, #24
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b082      	sub	sp, #8
 8008946:	af00      	add	r7, sp, #0
 8008948:	4603      	mov	r3, r0
 800894a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800894c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008950:	4618      	mov	r0, r3
 8008952:	f7ff ff31 	bl	80087b8 <__NVIC_EnableIRQ>
}
 8008956:	bf00      	nop
 8008958:	3708      	adds	r7, #8
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b082      	sub	sp, #8
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7ff ffa2 	bl	80088b0 <SysTick_Config>
 800896c:	4603      	mov	r3, r0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008982:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008984:	f7fe fc4e 	bl	8007224 <HAL_GetTick>
 8008988:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008990:	b2db      	uxtb	r3, r3
 8008992:	2b02      	cmp	r3, #2
 8008994:	d008      	beq.n	80089a8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2280      	movs	r2, #128	; 0x80
 800899a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	e052      	b.n	8008a4e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f022 0216 	bic.w	r2, r2, #22
 80089b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	695a      	ldr	r2, [r3, #20]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089c6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d103      	bne.n	80089d8 <HAL_DMA_Abort+0x62>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d007      	beq.n	80089e8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f022 0208 	bic.w	r2, r2, #8
 80089e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f022 0201 	bic.w	r2, r2, #1
 80089f6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80089f8:	e013      	b.n	8008a22 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80089fa:	f7fe fc13 	bl	8007224 <HAL_GetTick>
 80089fe:	4602      	mov	r2, r0
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	2b05      	cmp	r3, #5
 8008a06:	d90c      	bls.n	8008a22 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2220      	movs	r2, #32
 8008a0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2203      	movs	r2, #3
 8008a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e015      	b.n	8008a4e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 0301 	and.w	r3, r3, #1
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1e4      	bne.n	80089fa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a34:	223f      	movs	r2, #63	; 0x3f
 8008a36:	409a      	lsls	r2, r3
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008a56:	b480      	push	{r7}
 8008a58:	b083      	sub	sp, #12
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d004      	beq.n	8008a74 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2280      	movs	r2, #128	; 0x80
 8008a6e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e00c      	b.n	8008a8e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2205      	movs	r2, #5
 8008a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f022 0201 	bic.w	r2, r2, #1
 8008a8a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	370c      	adds	r7, #12
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr
	...

08008a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b089      	sub	sp, #36	; 0x24
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	61fb      	str	r3, [r7, #28]
 8008ab6:	e165      	b.n	8008d84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008ab8:	2201      	movs	r2, #1
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	697a      	ldr	r2, [r7, #20]
 8008ac8:	4013      	ands	r3, r2
 8008aca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008acc:	693a      	ldr	r2, [r7, #16]
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	f040 8154 	bne.w	8008d7e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	f003 0303 	and.w	r3, r3, #3
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d005      	beq.n	8008aee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d130      	bne.n	8008b50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	005b      	lsls	r3, r3, #1
 8008af8:	2203      	movs	r2, #3
 8008afa:	fa02 f303 	lsl.w	r3, r2, r3
 8008afe:	43db      	mvns	r3, r3
 8008b00:	69ba      	ldr	r2, [r7, #24]
 8008b02:	4013      	ands	r3, r2
 8008b04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	68da      	ldr	r2, [r3, #12]
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	005b      	lsls	r3, r3, #1
 8008b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b12:	69ba      	ldr	r2, [r7, #24]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	69ba      	ldr	r2, [r7, #24]
 8008b1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008b24:	2201      	movs	r2, #1
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	fa02 f303 	lsl.w	r3, r2, r3
 8008b2c:	43db      	mvns	r3, r3
 8008b2e:	69ba      	ldr	r2, [r7, #24]
 8008b30:	4013      	ands	r3, r2
 8008b32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	091b      	lsrs	r3, r3, #4
 8008b3a:	f003 0201 	and.w	r2, r3, #1
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	fa02 f303 	lsl.w	r3, r2, r3
 8008b44:	69ba      	ldr	r2, [r7, #24]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	69ba      	ldr	r2, [r7, #24]
 8008b4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	f003 0303 	and.w	r3, r3, #3
 8008b58:	2b03      	cmp	r3, #3
 8008b5a:	d017      	beq.n	8008b8c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	005b      	lsls	r3, r3, #1
 8008b66:	2203      	movs	r2, #3
 8008b68:	fa02 f303 	lsl.w	r3, r2, r3
 8008b6c:	43db      	mvns	r3, r3
 8008b6e:	69ba      	ldr	r2, [r7, #24]
 8008b70:	4013      	ands	r3, r2
 8008b72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	689a      	ldr	r2, [r3, #8]
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	005b      	lsls	r3, r3, #1
 8008b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b80:	69ba      	ldr	r2, [r7, #24]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	69ba      	ldr	r2, [r7, #24]
 8008b8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	f003 0303 	and.w	r3, r3, #3
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d123      	bne.n	8008be0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	08da      	lsrs	r2, r3, #3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	3208      	adds	r2, #8
 8008ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	f003 0307 	and.w	r3, r3, #7
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	220f      	movs	r2, #15
 8008bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb4:	43db      	mvns	r3, r3
 8008bb6:	69ba      	ldr	r2, [r7, #24]
 8008bb8:	4013      	ands	r3, r2
 8008bba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	691a      	ldr	r2, [r3, #16]
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	f003 0307 	and.w	r3, r3, #7
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bcc:	69ba      	ldr	r2, [r7, #24]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	08da      	lsrs	r2, r3, #3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	3208      	adds	r2, #8
 8008bda:	69b9      	ldr	r1, [r7, #24]
 8008bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	005b      	lsls	r3, r3, #1
 8008bea:	2203      	movs	r2, #3
 8008bec:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf0:	43db      	mvns	r3, r3
 8008bf2:	69ba      	ldr	r2, [r7, #24]
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	f003 0203 	and.w	r2, r3, #3
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	005b      	lsls	r3, r3, #1
 8008c04:	fa02 f303 	lsl.w	r3, r2, r3
 8008c08:	69ba      	ldr	r2, [r7, #24]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	69ba      	ldr	r2, [r7, #24]
 8008c12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f000 80ae 	beq.w	8008d7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c22:	2300      	movs	r3, #0
 8008c24:	60fb      	str	r3, [r7, #12]
 8008c26:	4b5d      	ldr	r3, [pc, #372]	; (8008d9c <HAL_GPIO_Init+0x300>)
 8008c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c2a:	4a5c      	ldr	r2, [pc, #368]	; (8008d9c <HAL_GPIO_Init+0x300>)
 8008c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c30:	6453      	str	r3, [r2, #68]	; 0x44
 8008c32:	4b5a      	ldr	r3, [pc, #360]	; (8008d9c <HAL_GPIO_Init+0x300>)
 8008c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008c3e:	4a58      	ldr	r2, [pc, #352]	; (8008da0 <HAL_GPIO_Init+0x304>)
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	089b      	lsrs	r3, r3, #2
 8008c44:	3302      	adds	r3, #2
 8008c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	f003 0303 	and.w	r3, r3, #3
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	220f      	movs	r2, #15
 8008c56:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5a:	43db      	mvns	r3, r3
 8008c5c:	69ba      	ldr	r2, [r7, #24]
 8008c5e:	4013      	ands	r3, r2
 8008c60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a4f      	ldr	r2, [pc, #316]	; (8008da4 <HAL_GPIO_Init+0x308>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d025      	beq.n	8008cb6 <HAL_GPIO_Init+0x21a>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a4e      	ldr	r2, [pc, #312]	; (8008da8 <HAL_GPIO_Init+0x30c>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d01f      	beq.n	8008cb2 <HAL_GPIO_Init+0x216>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4a4d      	ldr	r2, [pc, #308]	; (8008dac <HAL_GPIO_Init+0x310>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d019      	beq.n	8008cae <HAL_GPIO_Init+0x212>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4a4c      	ldr	r2, [pc, #304]	; (8008db0 <HAL_GPIO_Init+0x314>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d013      	beq.n	8008caa <HAL_GPIO_Init+0x20e>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4a4b      	ldr	r2, [pc, #300]	; (8008db4 <HAL_GPIO_Init+0x318>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d00d      	beq.n	8008ca6 <HAL_GPIO_Init+0x20a>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4a4a      	ldr	r2, [pc, #296]	; (8008db8 <HAL_GPIO_Init+0x31c>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d007      	beq.n	8008ca2 <HAL_GPIO_Init+0x206>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	4a49      	ldr	r2, [pc, #292]	; (8008dbc <HAL_GPIO_Init+0x320>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d101      	bne.n	8008c9e <HAL_GPIO_Init+0x202>
 8008c9a:	2306      	movs	r3, #6
 8008c9c:	e00c      	b.n	8008cb8 <HAL_GPIO_Init+0x21c>
 8008c9e:	2307      	movs	r3, #7
 8008ca0:	e00a      	b.n	8008cb8 <HAL_GPIO_Init+0x21c>
 8008ca2:	2305      	movs	r3, #5
 8008ca4:	e008      	b.n	8008cb8 <HAL_GPIO_Init+0x21c>
 8008ca6:	2304      	movs	r3, #4
 8008ca8:	e006      	b.n	8008cb8 <HAL_GPIO_Init+0x21c>
 8008caa:	2303      	movs	r3, #3
 8008cac:	e004      	b.n	8008cb8 <HAL_GPIO_Init+0x21c>
 8008cae:	2302      	movs	r3, #2
 8008cb0:	e002      	b.n	8008cb8 <HAL_GPIO_Init+0x21c>
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e000      	b.n	8008cb8 <HAL_GPIO_Init+0x21c>
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	69fa      	ldr	r2, [r7, #28]
 8008cba:	f002 0203 	and.w	r2, r2, #3
 8008cbe:	0092      	lsls	r2, r2, #2
 8008cc0:	4093      	lsls	r3, r2
 8008cc2:	69ba      	ldr	r2, [r7, #24]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008cc8:	4935      	ldr	r1, [pc, #212]	; (8008da0 <HAL_GPIO_Init+0x304>)
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	089b      	lsrs	r3, r3, #2
 8008cce:	3302      	adds	r3, #2
 8008cd0:	69ba      	ldr	r2, [r7, #24]
 8008cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008cd6:	4b3a      	ldr	r3, [pc, #232]	; (8008dc0 <HAL_GPIO_Init+0x324>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	43db      	mvns	r3, r3
 8008ce0:	69ba      	ldr	r2, [r7, #24]
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d003      	beq.n	8008cfa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008cf2:	69ba      	ldr	r2, [r7, #24]
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008cfa:	4a31      	ldr	r2, [pc, #196]	; (8008dc0 <HAL_GPIO_Init+0x324>)
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008d00:	4b2f      	ldr	r3, [pc, #188]	; (8008dc0 <HAL_GPIO_Init+0x324>)
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	43db      	mvns	r3, r3
 8008d0a:	69ba      	ldr	r2, [r7, #24]
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d003      	beq.n	8008d24 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008d1c:	69ba      	ldr	r2, [r7, #24]
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008d24:	4a26      	ldr	r2, [pc, #152]	; (8008dc0 <HAL_GPIO_Init+0x324>)
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008d2a:	4b25      	ldr	r3, [pc, #148]	; (8008dc0 <HAL_GPIO_Init+0x324>)
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	43db      	mvns	r3, r3
 8008d34:	69ba      	ldr	r2, [r7, #24]
 8008d36:	4013      	ands	r3, r2
 8008d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d003      	beq.n	8008d4e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8008d46:	69ba      	ldr	r2, [r7, #24]
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008d4e:	4a1c      	ldr	r2, [pc, #112]	; (8008dc0 <HAL_GPIO_Init+0x324>)
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008d54:	4b1a      	ldr	r3, [pc, #104]	; (8008dc0 <HAL_GPIO_Init+0x324>)
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	43db      	mvns	r3, r3
 8008d5e:	69ba      	ldr	r2, [r7, #24]
 8008d60:	4013      	ands	r3, r2
 8008d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d003      	beq.n	8008d78 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008d70:	69ba      	ldr	r2, [r7, #24]
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008d78:	4a11      	ldr	r2, [pc, #68]	; (8008dc0 <HAL_GPIO_Init+0x324>)
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	3301      	adds	r3, #1
 8008d82:	61fb      	str	r3, [r7, #28]
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	2b0f      	cmp	r3, #15
 8008d88:	f67f ae96 	bls.w	8008ab8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008d8c:	bf00      	nop
 8008d8e:	bf00      	nop
 8008d90:	3724      	adds	r7, #36	; 0x24
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	40023800 	.word	0x40023800
 8008da0:	40013800 	.word	0x40013800
 8008da4:	40020000 	.word	0x40020000
 8008da8:	40020400 	.word	0x40020400
 8008dac:	40020800 	.word	0x40020800
 8008db0:	40020c00 	.word	0x40020c00
 8008db4:	40021000 	.word	0x40021000
 8008db8:	40021400 	.word	0x40021400
 8008dbc:	40021800 	.word	0x40021800
 8008dc0:	40013c00 	.word	0x40013c00

08008dc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b085      	sub	sp, #20
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	460b      	mov	r3, r1
 8008dce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	691a      	ldr	r2, [r3, #16]
 8008dd4:	887b      	ldrh	r3, [r7, #2]
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d002      	beq.n	8008de2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	73fb      	strb	r3, [r7, #15]
 8008de0:	e001      	b.n	8008de6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008de2:	2300      	movs	r3, #0
 8008de4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3714      	adds	r7, #20
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	807b      	strh	r3, [r7, #2]
 8008e00:	4613      	mov	r3, r2
 8008e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008e04:	787b      	ldrb	r3, [r7, #1]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d003      	beq.n	8008e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008e0a:	887a      	ldrh	r2, [r7, #2]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008e10:	e003      	b.n	8008e1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008e12:	887b      	ldrh	r3, [r7, #2]
 8008e14:	041a      	lsls	r2, r3, #16
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	619a      	str	r2, [r3, #24]
}
 8008e1a:	bf00      	nop
 8008e1c:	370c      	adds	r7, #12
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
	...

08008e28 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008e32:	2300      	movs	r3, #0
 8008e34:	603b      	str	r3, [r7, #0]
 8008e36:	4b20      	ldr	r3, [pc, #128]	; (8008eb8 <HAL_PWREx_EnableOverDrive+0x90>)
 8008e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e3a:	4a1f      	ldr	r2, [pc, #124]	; (8008eb8 <HAL_PWREx_EnableOverDrive+0x90>)
 8008e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e40:	6413      	str	r3, [r2, #64]	; 0x40
 8008e42:	4b1d      	ldr	r3, [pc, #116]	; (8008eb8 <HAL_PWREx_EnableOverDrive+0x90>)
 8008e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e4a:	603b      	str	r3, [r7, #0]
 8008e4c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008e4e:	4b1b      	ldr	r3, [pc, #108]	; (8008ebc <HAL_PWREx_EnableOverDrive+0x94>)
 8008e50:	2201      	movs	r2, #1
 8008e52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008e54:	f7fe f9e6 	bl	8007224 <HAL_GetTick>
 8008e58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008e5a:	e009      	b.n	8008e70 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008e5c:	f7fe f9e2 	bl	8007224 <HAL_GetTick>
 8008e60:	4602      	mov	r2, r0
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e6a:	d901      	bls.n	8008e70 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e01f      	b.n	8008eb0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008e70:	4b13      	ldr	r3, [pc, #76]	; (8008ec0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e7c:	d1ee      	bne.n	8008e5c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008e7e:	4b11      	ldr	r3, [pc, #68]	; (8008ec4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008e80:	2201      	movs	r2, #1
 8008e82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008e84:	f7fe f9ce 	bl	8007224 <HAL_GetTick>
 8008e88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008e8a:	e009      	b.n	8008ea0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008e8c:	f7fe f9ca 	bl	8007224 <HAL_GetTick>
 8008e90:	4602      	mov	r2, r0
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	1ad3      	subs	r3, r2, r3
 8008e96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e9a:	d901      	bls.n	8008ea0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008e9c:	2303      	movs	r3, #3
 8008e9e:	e007      	b.n	8008eb0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008ea0:	4b07      	ldr	r3, [pc, #28]	; (8008ec0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ea8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008eac:	d1ee      	bne.n	8008e8c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	40023800 	.word	0x40023800
 8008ebc:	420e0040 	.word	0x420e0040
 8008ec0:	40007000 	.word	0x40007000
 8008ec4:	420e0044 	.word	0x420e0044

08008ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d101      	bne.n	8008edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e0cc      	b.n	8009076 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008edc:	4b68      	ldr	r3, [pc, #416]	; (8009080 <HAL_RCC_ClockConfig+0x1b8>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 030f 	and.w	r3, r3, #15
 8008ee4:	683a      	ldr	r2, [r7, #0]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d90c      	bls.n	8008f04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008eea:	4b65      	ldr	r3, [pc, #404]	; (8009080 <HAL_RCC_ClockConfig+0x1b8>)
 8008eec:	683a      	ldr	r2, [r7, #0]
 8008eee:	b2d2      	uxtb	r2, r2
 8008ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ef2:	4b63      	ldr	r3, [pc, #396]	; (8009080 <HAL_RCC_ClockConfig+0x1b8>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 030f 	and.w	r3, r3, #15
 8008efa:	683a      	ldr	r2, [r7, #0]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d001      	beq.n	8008f04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e0b8      	b.n	8009076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 0302 	and.w	r3, r3, #2
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d020      	beq.n	8008f52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f003 0304 	and.w	r3, r3, #4
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d005      	beq.n	8008f28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008f1c:	4b59      	ldr	r3, [pc, #356]	; (8009084 <HAL_RCC_ClockConfig+0x1bc>)
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	4a58      	ldr	r2, [pc, #352]	; (8009084 <HAL_RCC_ClockConfig+0x1bc>)
 8008f22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008f26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f003 0308 	and.w	r3, r3, #8
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d005      	beq.n	8008f40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008f34:	4b53      	ldr	r3, [pc, #332]	; (8009084 <HAL_RCC_ClockConfig+0x1bc>)
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	4a52      	ldr	r2, [pc, #328]	; (8009084 <HAL_RCC_ClockConfig+0x1bc>)
 8008f3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008f3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f40:	4b50      	ldr	r3, [pc, #320]	; (8009084 <HAL_RCC_ClockConfig+0x1bc>)
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	494d      	ldr	r1, [pc, #308]	; (8009084 <HAL_RCC_ClockConfig+0x1bc>)
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 0301 	and.w	r3, r3, #1
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d044      	beq.n	8008fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d107      	bne.n	8008f76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f66:	4b47      	ldr	r3, [pc, #284]	; (8009084 <HAL_RCC_ClockConfig+0x1bc>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d119      	bne.n	8008fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	e07f      	b.n	8009076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	2b02      	cmp	r3, #2
 8008f7c:	d003      	beq.n	8008f86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008f82:	2b03      	cmp	r3, #3
 8008f84:	d107      	bne.n	8008f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f86:	4b3f      	ldr	r3, [pc, #252]	; (8009084 <HAL_RCC_ClockConfig+0x1bc>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d109      	bne.n	8008fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e06f      	b.n	8009076 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f96:	4b3b      	ldr	r3, [pc, #236]	; (8009084 <HAL_RCC_ClockConfig+0x1bc>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f003 0302 	and.w	r3, r3, #2
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d101      	bne.n	8008fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e067      	b.n	8009076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008fa6:	4b37      	ldr	r3, [pc, #220]	; (8009084 <HAL_RCC_ClockConfig+0x1bc>)
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	f023 0203 	bic.w	r2, r3, #3
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	4934      	ldr	r1, [pc, #208]	; (8009084 <HAL_RCC_ClockConfig+0x1bc>)
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008fb8:	f7fe f934 	bl	8007224 <HAL_GetTick>
 8008fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fbe:	e00a      	b.n	8008fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fc0:	f7fe f930 	bl	8007224 <HAL_GetTick>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	1ad3      	subs	r3, r2, r3
 8008fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d901      	bls.n	8008fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008fd2:	2303      	movs	r3, #3
 8008fd4:	e04f      	b.n	8009076 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fd6:	4b2b      	ldr	r3, [pc, #172]	; (8009084 <HAL_RCC_ClockConfig+0x1bc>)
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	f003 020c 	and.w	r2, r3, #12
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d1eb      	bne.n	8008fc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008fe8:	4b25      	ldr	r3, [pc, #148]	; (8009080 <HAL_RCC_ClockConfig+0x1b8>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 030f 	and.w	r3, r3, #15
 8008ff0:	683a      	ldr	r2, [r7, #0]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d20c      	bcs.n	8009010 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ff6:	4b22      	ldr	r3, [pc, #136]	; (8009080 <HAL_RCC_ClockConfig+0x1b8>)
 8008ff8:	683a      	ldr	r2, [r7, #0]
 8008ffa:	b2d2      	uxtb	r2, r2
 8008ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ffe:	4b20      	ldr	r3, [pc, #128]	; (8009080 <HAL_RCC_ClockConfig+0x1b8>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f003 030f 	and.w	r3, r3, #15
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	429a      	cmp	r2, r3
 800900a:	d001      	beq.n	8009010 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	e032      	b.n	8009076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 0304 	and.w	r3, r3, #4
 8009018:	2b00      	cmp	r3, #0
 800901a:	d008      	beq.n	800902e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800901c:	4b19      	ldr	r3, [pc, #100]	; (8009084 <HAL_RCC_ClockConfig+0x1bc>)
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	4916      	ldr	r1, [pc, #88]	; (8009084 <HAL_RCC_ClockConfig+0x1bc>)
 800902a:	4313      	orrs	r3, r2
 800902c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 0308 	and.w	r3, r3, #8
 8009036:	2b00      	cmp	r3, #0
 8009038:	d009      	beq.n	800904e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800903a:	4b12      	ldr	r3, [pc, #72]	; (8009084 <HAL_RCC_ClockConfig+0x1bc>)
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	691b      	ldr	r3, [r3, #16]
 8009046:	00db      	lsls	r3, r3, #3
 8009048:	490e      	ldr	r1, [pc, #56]	; (8009084 <HAL_RCC_ClockConfig+0x1bc>)
 800904a:	4313      	orrs	r3, r2
 800904c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800904e:	f000 f855 	bl	80090fc <HAL_RCC_GetSysClockFreq>
 8009052:	4602      	mov	r2, r0
 8009054:	4b0b      	ldr	r3, [pc, #44]	; (8009084 <HAL_RCC_ClockConfig+0x1bc>)
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	091b      	lsrs	r3, r3, #4
 800905a:	f003 030f 	and.w	r3, r3, #15
 800905e:	490a      	ldr	r1, [pc, #40]	; (8009088 <HAL_RCC_ClockConfig+0x1c0>)
 8009060:	5ccb      	ldrb	r3, [r1, r3]
 8009062:	fa22 f303 	lsr.w	r3, r2, r3
 8009066:	4a09      	ldr	r2, [pc, #36]	; (800908c <HAL_RCC_ClockConfig+0x1c4>)
 8009068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800906a:	4b09      	ldr	r3, [pc, #36]	; (8009090 <HAL_RCC_ClockConfig+0x1c8>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4618      	mov	r0, r3
 8009070:	f7fe f894 	bl	800719c <HAL_InitTick>

  return HAL_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	40023c00 	.word	0x40023c00
 8009084:	40023800 	.word	0x40023800
 8009088:	08011ca8 	.word	0x08011ca8
 800908c:	20000040 	.word	0x20000040
 8009090:	20000044 	.word	0x20000044

08009094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009094:	b480      	push	{r7}
 8009096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009098:	4b03      	ldr	r3, [pc, #12]	; (80090a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800909a:	681b      	ldr	r3, [r3, #0]
}
 800909c:	4618      	mov	r0, r3
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	20000040 	.word	0x20000040

080090ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80090b0:	f7ff fff0 	bl	8009094 <HAL_RCC_GetHCLKFreq>
 80090b4:	4602      	mov	r2, r0
 80090b6:	4b05      	ldr	r3, [pc, #20]	; (80090cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	0a9b      	lsrs	r3, r3, #10
 80090bc:	f003 0307 	and.w	r3, r3, #7
 80090c0:	4903      	ldr	r1, [pc, #12]	; (80090d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80090c2:	5ccb      	ldrb	r3, [r1, r3]
 80090c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	40023800 	.word	0x40023800
 80090d0:	08011cb8 	.word	0x08011cb8

080090d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80090d8:	f7ff ffdc 	bl	8009094 <HAL_RCC_GetHCLKFreq>
 80090dc:	4602      	mov	r2, r0
 80090de:	4b05      	ldr	r3, [pc, #20]	; (80090f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	0b5b      	lsrs	r3, r3, #13
 80090e4:	f003 0307 	and.w	r3, r3, #7
 80090e8:	4903      	ldr	r1, [pc, #12]	; (80090f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80090ea:	5ccb      	ldrb	r3, [r1, r3]
 80090ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	40023800 	.word	0x40023800
 80090f8:	08011cb8 	.word	0x08011cb8

080090fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009100:	b088      	sub	sp, #32
 8009102:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009104:	2300      	movs	r3, #0
 8009106:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8009108:	2300      	movs	r3, #0
 800910a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800910c:	2300      	movs	r3, #0
 800910e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8009110:	2300      	movs	r3, #0
 8009112:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8009114:	2300      	movs	r3, #0
 8009116:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009118:	4bce      	ldr	r3, [pc, #824]	; (8009454 <HAL_RCC_GetSysClockFreq+0x358>)
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	f003 030c 	and.w	r3, r3, #12
 8009120:	2b0c      	cmp	r3, #12
 8009122:	f200 818d 	bhi.w	8009440 <HAL_RCC_GetSysClockFreq+0x344>
 8009126:	a201      	add	r2, pc, #4	; (adr r2, 800912c <HAL_RCC_GetSysClockFreq+0x30>)
 8009128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800912c:	08009161 	.word	0x08009161
 8009130:	08009441 	.word	0x08009441
 8009134:	08009441 	.word	0x08009441
 8009138:	08009441 	.word	0x08009441
 800913c:	08009167 	.word	0x08009167
 8009140:	08009441 	.word	0x08009441
 8009144:	08009441 	.word	0x08009441
 8009148:	08009441 	.word	0x08009441
 800914c:	0800916d 	.word	0x0800916d
 8009150:	08009441 	.word	0x08009441
 8009154:	08009441 	.word	0x08009441
 8009158:	08009441 	.word	0x08009441
 800915c:	080092e1 	.word	0x080092e1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009160:	4bbd      	ldr	r3, [pc, #756]	; (8009458 <HAL_RCC_GetSysClockFreq+0x35c>)
 8009162:	61bb      	str	r3, [r7, #24]
       break;
 8009164:	e16f      	b.n	8009446 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009166:	4bbd      	ldr	r3, [pc, #756]	; (800945c <HAL_RCC_GetSysClockFreq+0x360>)
 8009168:	61bb      	str	r3, [r7, #24]
      break;
 800916a:	e16c      	b.n	8009446 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800916c:	4bb9      	ldr	r3, [pc, #740]	; (8009454 <HAL_RCC_GetSysClockFreq+0x358>)
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009174:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009176:	4bb7      	ldr	r3, [pc, #732]	; (8009454 <HAL_RCC_GetSysClockFreq+0x358>)
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d053      	beq.n	800922a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009182:	4bb4      	ldr	r3, [pc, #720]	; (8009454 <HAL_RCC_GetSysClockFreq+0x358>)
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	099b      	lsrs	r3, r3, #6
 8009188:	461a      	mov	r2, r3
 800918a:	f04f 0300 	mov.w	r3, #0
 800918e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009192:	f04f 0100 	mov.w	r1, #0
 8009196:	ea02 0400 	and.w	r4, r2, r0
 800919a:	603c      	str	r4, [r7, #0]
 800919c:	400b      	ands	r3, r1
 800919e:	607b      	str	r3, [r7, #4]
 80091a0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80091a4:	4620      	mov	r0, r4
 80091a6:	4629      	mov	r1, r5
 80091a8:	f04f 0200 	mov.w	r2, #0
 80091ac:	f04f 0300 	mov.w	r3, #0
 80091b0:	014b      	lsls	r3, r1, #5
 80091b2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80091b6:	0142      	lsls	r2, r0, #5
 80091b8:	4610      	mov	r0, r2
 80091ba:	4619      	mov	r1, r3
 80091bc:	4623      	mov	r3, r4
 80091be:	1ac0      	subs	r0, r0, r3
 80091c0:	462b      	mov	r3, r5
 80091c2:	eb61 0103 	sbc.w	r1, r1, r3
 80091c6:	f04f 0200 	mov.w	r2, #0
 80091ca:	f04f 0300 	mov.w	r3, #0
 80091ce:	018b      	lsls	r3, r1, #6
 80091d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80091d4:	0182      	lsls	r2, r0, #6
 80091d6:	1a12      	subs	r2, r2, r0
 80091d8:	eb63 0301 	sbc.w	r3, r3, r1
 80091dc:	f04f 0000 	mov.w	r0, #0
 80091e0:	f04f 0100 	mov.w	r1, #0
 80091e4:	00d9      	lsls	r1, r3, #3
 80091e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80091ea:	00d0      	lsls	r0, r2, #3
 80091ec:	4602      	mov	r2, r0
 80091ee:	460b      	mov	r3, r1
 80091f0:	4621      	mov	r1, r4
 80091f2:	1852      	adds	r2, r2, r1
 80091f4:	4629      	mov	r1, r5
 80091f6:	eb43 0101 	adc.w	r1, r3, r1
 80091fa:	460b      	mov	r3, r1
 80091fc:	f04f 0000 	mov.w	r0, #0
 8009200:	f04f 0100 	mov.w	r1, #0
 8009204:	0259      	lsls	r1, r3, #9
 8009206:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800920a:	0250      	lsls	r0, r2, #9
 800920c:	4602      	mov	r2, r0
 800920e:	460b      	mov	r3, r1
 8009210:	4610      	mov	r0, r2
 8009212:	4619      	mov	r1, r3
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	461a      	mov	r2, r3
 8009218:	f04f 0300 	mov.w	r3, #0
 800921c:	f7f7 fd64 	bl	8000ce8 <__aeabi_uldivmod>
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	4613      	mov	r3, r2
 8009226:	61fb      	str	r3, [r7, #28]
 8009228:	e04c      	b.n	80092c4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800922a:	4b8a      	ldr	r3, [pc, #552]	; (8009454 <HAL_RCC_GetSysClockFreq+0x358>)
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	099b      	lsrs	r3, r3, #6
 8009230:	461a      	mov	r2, r3
 8009232:	f04f 0300 	mov.w	r3, #0
 8009236:	f240 10ff 	movw	r0, #511	; 0x1ff
 800923a:	f04f 0100 	mov.w	r1, #0
 800923e:	ea02 0a00 	and.w	sl, r2, r0
 8009242:	ea03 0b01 	and.w	fp, r3, r1
 8009246:	4650      	mov	r0, sl
 8009248:	4659      	mov	r1, fp
 800924a:	f04f 0200 	mov.w	r2, #0
 800924e:	f04f 0300 	mov.w	r3, #0
 8009252:	014b      	lsls	r3, r1, #5
 8009254:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009258:	0142      	lsls	r2, r0, #5
 800925a:	4610      	mov	r0, r2
 800925c:	4619      	mov	r1, r3
 800925e:	ebb0 000a 	subs.w	r0, r0, sl
 8009262:	eb61 010b 	sbc.w	r1, r1, fp
 8009266:	f04f 0200 	mov.w	r2, #0
 800926a:	f04f 0300 	mov.w	r3, #0
 800926e:	018b      	lsls	r3, r1, #6
 8009270:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009274:	0182      	lsls	r2, r0, #6
 8009276:	1a12      	subs	r2, r2, r0
 8009278:	eb63 0301 	sbc.w	r3, r3, r1
 800927c:	f04f 0000 	mov.w	r0, #0
 8009280:	f04f 0100 	mov.w	r1, #0
 8009284:	00d9      	lsls	r1, r3, #3
 8009286:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800928a:	00d0      	lsls	r0, r2, #3
 800928c:	4602      	mov	r2, r0
 800928e:	460b      	mov	r3, r1
 8009290:	eb12 020a 	adds.w	r2, r2, sl
 8009294:	eb43 030b 	adc.w	r3, r3, fp
 8009298:	f04f 0000 	mov.w	r0, #0
 800929c:	f04f 0100 	mov.w	r1, #0
 80092a0:	0299      	lsls	r1, r3, #10
 80092a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80092a6:	0290      	lsls	r0, r2, #10
 80092a8:	4602      	mov	r2, r0
 80092aa:	460b      	mov	r3, r1
 80092ac:	4610      	mov	r0, r2
 80092ae:	4619      	mov	r1, r3
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	461a      	mov	r2, r3
 80092b4:	f04f 0300 	mov.w	r3, #0
 80092b8:	f7f7 fd16 	bl	8000ce8 <__aeabi_uldivmod>
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	4613      	mov	r3, r2
 80092c2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80092c4:	4b63      	ldr	r3, [pc, #396]	; (8009454 <HAL_RCC_GetSysClockFreq+0x358>)
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	0c1b      	lsrs	r3, r3, #16
 80092ca:	f003 0303 	and.w	r3, r3, #3
 80092ce:	3301      	adds	r3, #1
 80092d0:	005b      	lsls	r3, r3, #1
 80092d2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80092d4:	69fa      	ldr	r2, [r7, #28]
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80092dc:	61bb      	str	r3, [r7, #24]
      break;
 80092de:	e0b2      	b.n	8009446 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80092e0:	4b5c      	ldr	r3, [pc, #368]	; (8009454 <HAL_RCC_GetSysClockFreq+0x358>)
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092e8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80092ea:	4b5a      	ldr	r3, [pc, #360]	; (8009454 <HAL_RCC_GetSysClockFreq+0x358>)
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d04d      	beq.n	8009392 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80092f6:	4b57      	ldr	r3, [pc, #348]	; (8009454 <HAL_RCC_GetSysClockFreq+0x358>)
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	099b      	lsrs	r3, r3, #6
 80092fc:	461a      	mov	r2, r3
 80092fe:	f04f 0300 	mov.w	r3, #0
 8009302:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009306:	f04f 0100 	mov.w	r1, #0
 800930a:	ea02 0800 	and.w	r8, r2, r0
 800930e:	ea03 0901 	and.w	r9, r3, r1
 8009312:	4640      	mov	r0, r8
 8009314:	4649      	mov	r1, r9
 8009316:	f04f 0200 	mov.w	r2, #0
 800931a:	f04f 0300 	mov.w	r3, #0
 800931e:	014b      	lsls	r3, r1, #5
 8009320:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009324:	0142      	lsls	r2, r0, #5
 8009326:	4610      	mov	r0, r2
 8009328:	4619      	mov	r1, r3
 800932a:	ebb0 0008 	subs.w	r0, r0, r8
 800932e:	eb61 0109 	sbc.w	r1, r1, r9
 8009332:	f04f 0200 	mov.w	r2, #0
 8009336:	f04f 0300 	mov.w	r3, #0
 800933a:	018b      	lsls	r3, r1, #6
 800933c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009340:	0182      	lsls	r2, r0, #6
 8009342:	1a12      	subs	r2, r2, r0
 8009344:	eb63 0301 	sbc.w	r3, r3, r1
 8009348:	f04f 0000 	mov.w	r0, #0
 800934c:	f04f 0100 	mov.w	r1, #0
 8009350:	00d9      	lsls	r1, r3, #3
 8009352:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009356:	00d0      	lsls	r0, r2, #3
 8009358:	4602      	mov	r2, r0
 800935a:	460b      	mov	r3, r1
 800935c:	eb12 0208 	adds.w	r2, r2, r8
 8009360:	eb43 0309 	adc.w	r3, r3, r9
 8009364:	f04f 0000 	mov.w	r0, #0
 8009368:	f04f 0100 	mov.w	r1, #0
 800936c:	0259      	lsls	r1, r3, #9
 800936e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8009372:	0250      	lsls	r0, r2, #9
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	4610      	mov	r0, r2
 800937a:	4619      	mov	r1, r3
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	461a      	mov	r2, r3
 8009380:	f04f 0300 	mov.w	r3, #0
 8009384:	f7f7 fcb0 	bl	8000ce8 <__aeabi_uldivmod>
 8009388:	4602      	mov	r2, r0
 800938a:	460b      	mov	r3, r1
 800938c:	4613      	mov	r3, r2
 800938e:	61fb      	str	r3, [r7, #28]
 8009390:	e04a      	b.n	8009428 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009392:	4b30      	ldr	r3, [pc, #192]	; (8009454 <HAL_RCC_GetSysClockFreq+0x358>)
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	099b      	lsrs	r3, r3, #6
 8009398:	461a      	mov	r2, r3
 800939a:	f04f 0300 	mov.w	r3, #0
 800939e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80093a2:	f04f 0100 	mov.w	r1, #0
 80093a6:	ea02 0400 	and.w	r4, r2, r0
 80093aa:	ea03 0501 	and.w	r5, r3, r1
 80093ae:	4620      	mov	r0, r4
 80093b0:	4629      	mov	r1, r5
 80093b2:	f04f 0200 	mov.w	r2, #0
 80093b6:	f04f 0300 	mov.w	r3, #0
 80093ba:	014b      	lsls	r3, r1, #5
 80093bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80093c0:	0142      	lsls	r2, r0, #5
 80093c2:	4610      	mov	r0, r2
 80093c4:	4619      	mov	r1, r3
 80093c6:	1b00      	subs	r0, r0, r4
 80093c8:	eb61 0105 	sbc.w	r1, r1, r5
 80093cc:	f04f 0200 	mov.w	r2, #0
 80093d0:	f04f 0300 	mov.w	r3, #0
 80093d4:	018b      	lsls	r3, r1, #6
 80093d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80093da:	0182      	lsls	r2, r0, #6
 80093dc:	1a12      	subs	r2, r2, r0
 80093de:	eb63 0301 	sbc.w	r3, r3, r1
 80093e2:	f04f 0000 	mov.w	r0, #0
 80093e6:	f04f 0100 	mov.w	r1, #0
 80093ea:	00d9      	lsls	r1, r3, #3
 80093ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80093f0:	00d0      	lsls	r0, r2, #3
 80093f2:	4602      	mov	r2, r0
 80093f4:	460b      	mov	r3, r1
 80093f6:	1912      	adds	r2, r2, r4
 80093f8:	eb45 0303 	adc.w	r3, r5, r3
 80093fc:	f04f 0000 	mov.w	r0, #0
 8009400:	f04f 0100 	mov.w	r1, #0
 8009404:	0299      	lsls	r1, r3, #10
 8009406:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800940a:	0290      	lsls	r0, r2, #10
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	4610      	mov	r0, r2
 8009412:	4619      	mov	r1, r3
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	461a      	mov	r2, r3
 8009418:	f04f 0300 	mov.w	r3, #0
 800941c:	f7f7 fc64 	bl	8000ce8 <__aeabi_uldivmod>
 8009420:	4602      	mov	r2, r0
 8009422:	460b      	mov	r3, r1
 8009424:	4613      	mov	r3, r2
 8009426:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009428:	4b0a      	ldr	r3, [pc, #40]	; (8009454 <HAL_RCC_GetSysClockFreq+0x358>)
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	0f1b      	lsrs	r3, r3, #28
 800942e:	f003 0307 	and.w	r3, r3, #7
 8009432:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8009434:	69fa      	ldr	r2, [r7, #28]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	fbb2 f3f3 	udiv	r3, r2, r3
 800943c:	61bb      	str	r3, [r7, #24]
      break;
 800943e:	e002      	b.n	8009446 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009440:	4b05      	ldr	r3, [pc, #20]	; (8009458 <HAL_RCC_GetSysClockFreq+0x35c>)
 8009442:	61bb      	str	r3, [r7, #24]
      break;
 8009444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009446:	69bb      	ldr	r3, [r7, #24]
}
 8009448:	4618      	mov	r0, r3
 800944a:	3720      	adds	r7, #32
 800944c:	46bd      	mov	sp, r7
 800944e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009452:	bf00      	nop
 8009454:	40023800 	.word	0x40023800
 8009458:	00f42400 	.word	0x00f42400
 800945c:	007a1200 	.word	0x007a1200

08009460 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b086      	sub	sp, #24
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d101      	bne.n	8009472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800946e:	2301      	movs	r3, #1
 8009470:	e28d      	b.n	800998e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f003 0301 	and.w	r3, r3, #1
 800947a:	2b00      	cmp	r3, #0
 800947c:	f000 8083 	beq.w	8009586 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009480:	4b94      	ldr	r3, [pc, #592]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	f003 030c 	and.w	r3, r3, #12
 8009488:	2b04      	cmp	r3, #4
 800948a:	d019      	beq.n	80094c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800948c:	4b91      	ldr	r3, [pc, #580]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009494:	2b08      	cmp	r3, #8
 8009496:	d106      	bne.n	80094a6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009498:	4b8e      	ldr	r3, [pc, #568]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094a4:	d00c      	beq.n	80094c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80094a6:	4b8b      	ldr	r3, [pc, #556]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80094ae:	2b0c      	cmp	r3, #12
 80094b0:	d112      	bne.n	80094d8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80094b2:	4b88      	ldr	r3, [pc, #544]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094be:	d10b      	bne.n	80094d8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094c0:	4b84      	ldr	r3, [pc, #528]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d05b      	beq.n	8009584 <HAL_RCC_OscConfig+0x124>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d157      	bne.n	8009584 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80094d4:	2301      	movs	r3, #1
 80094d6:	e25a      	b.n	800998e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094e0:	d106      	bne.n	80094f0 <HAL_RCC_OscConfig+0x90>
 80094e2:	4b7c      	ldr	r3, [pc, #496]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a7b      	ldr	r2, [pc, #492]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 80094e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094ec:	6013      	str	r3, [r2, #0]
 80094ee:	e01d      	b.n	800952c <HAL_RCC_OscConfig+0xcc>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80094f8:	d10c      	bne.n	8009514 <HAL_RCC_OscConfig+0xb4>
 80094fa:	4b76      	ldr	r3, [pc, #472]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a75      	ldr	r2, [pc, #468]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 8009500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009504:	6013      	str	r3, [r2, #0]
 8009506:	4b73      	ldr	r3, [pc, #460]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a72      	ldr	r2, [pc, #456]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 800950c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009510:	6013      	str	r3, [r2, #0]
 8009512:	e00b      	b.n	800952c <HAL_RCC_OscConfig+0xcc>
 8009514:	4b6f      	ldr	r3, [pc, #444]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a6e      	ldr	r2, [pc, #440]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 800951a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800951e:	6013      	str	r3, [r2, #0]
 8009520:	4b6c      	ldr	r3, [pc, #432]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a6b      	ldr	r2, [pc, #428]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 8009526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800952a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d013      	beq.n	800955c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009534:	f7fd fe76 	bl	8007224 <HAL_GetTick>
 8009538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800953a:	e008      	b.n	800954e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800953c:	f7fd fe72 	bl	8007224 <HAL_GetTick>
 8009540:	4602      	mov	r2, r0
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	1ad3      	subs	r3, r2, r3
 8009546:	2b64      	cmp	r3, #100	; 0x64
 8009548:	d901      	bls.n	800954e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800954a:	2303      	movs	r3, #3
 800954c:	e21f      	b.n	800998e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800954e:	4b61      	ldr	r3, [pc, #388]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009556:	2b00      	cmp	r3, #0
 8009558:	d0f0      	beq.n	800953c <HAL_RCC_OscConfig+0xdc>
 800955a:	e014      	b.n	8009586 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800955c:	f7fd fe62 	bl	8007224 <HAL_GetTick>
 8009560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009562:	e008      	b.n	8009576 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009564:	f7fd fe5e 	bl	8007224 <HAL_GetTick>
 8009568:	4602      	mov	r2, r0
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	1ad3      	subs	r3, r2, r3
 800956e:	2b64      	cmp	r3, #100	; 0x64
 8009570:	d901      	bls.n	8009576 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8009572:	2303      	movs	r3, #3
 8009574:	e20b      	b.n	800998e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009576:	4b57      	ldr	r3, [pc, #348]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1f0      	bne.n	8009564 <HAL_RCC_OscConfig+0x104>
 8009582:	e000      	b.n	8009586 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 0302 	and.w	r3, r3, #2
 800958e:	2b00      	cmp	r3, #0
 8009590:	d06f      	beq.n	8009672 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009592:	4b50      	ldr	r3, [pc, #320]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	f003 030c 	and.w	r3, r3, #12
 800959a:	2b00      	cmp	r3, #0
 800959c:	d017      	beq.n	80095ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800959e:	4b4d      	ldr	r3, [pc, #308]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80095a6:	2b08      	cmp	r3, #8
 80095a8:	d105      	bne.n	80095b6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80095aa:	4b4a      	ldr	r3, [pc, #296]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00b      	beq.n	80095ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80095b6:	4b47      	ldr	r3, [pc, #284]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80095be:	2b0c      	cmp	r3, #12
 80095c0:	d11c      	bne.n	80095fc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80095c2:	4b44      	ldr	r3, [pc, #272]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d116      	bne.n	80095fc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80095ce:	4b41      	ldr	r3, [pc, #260]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f003 0302 	and.w	r3, r3, #2
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d005      	beq.n	80095e6 <HAL_RCC_OscConfig+0x186>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d001      	beq.n	80095e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	e1d3      	b.n	800998e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095e6:	4b3b      	ldr	r3, [pc, #236]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	00db      	lsls	r3, r3, #3
 80095f4:	4937      	ldr	r1, [pc, #220]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 80095f6:	4313      	orrs	r3, r2
 80095f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80095fa:	e03a      	b.n	8009672 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d020      	beq.n	8009646 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009604:	4b34      	ldr	r3, [pc, #208]	; (80096d8 <HAL_RCC_OscConfig+0x278>)
 8009606:	2201      	movs	r2, #1
 8009608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800960a:	f7fd fe0b 	bl	8007224 <HAL_GetTick>
 800960e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009610:	e008      	b.n	8009624 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009612:	f7fd fe07 	bl	8007224 <HAL_GetTick>
 8009616:	4602      	mov	r2, r0
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	1ad3      	subs	r3, r2, r3
 800961c:	2b02      	cmp	r3, #2
 800961e:	d901      	bls.n	8009624 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8009620:	2303      	movs	r3, #3
 8009622:	e1b4      	b.n	800998e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009624:	4b2b      	ldr	r3, [pc, #172]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f003 0302 	and.w	r3, r3, #2
 800962c:	2b00      	cmp	r3, #0
 800962e:	d0f0      	beq.n	8009612 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009630:	4b28      	ldr	r3, [pc, #160]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	00db      	lsls	r3, r3, #3
 800963e:	4925      	ldr	r1, [pc, #148]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 8009640:	4313      	orrs	r3, r2
 8009642:	600b      	str	r3, [r1, #0]
 8009644:	e015      	b.n	8009672 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009646:	4b24      	ldr	r3, [pc, #144]	; (80096d8 <HAL_RCC_OscConfig+0x278>)
 8009648:	2200      	movs	r2, #0
 800964a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800964c:	f7fd fdea 	bl	8007224 <HAL_GetTick>
 8009650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009652:	e008      	b.n	8009666 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009654:	f7fd fde6 	bl	8007224 <HAL_GetTick>
 8009658:	4602      	mov	r2, r0
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	2b02      	cmp	r3, #2
 8009660:	d901      	bls.n	8009666 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009662:	2303      	movs	r3, #3
 8009664:	e193      	b.n	800998e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009666:	4b1b      	ldr	r3, [pc, #108]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f003 0302 	and.w	r3, r3, #2
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1f0      	bne.n	8009654 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f003 0308 	and.w	r3, r3, #8
 800967a:	2b00      	cmp	r3, #0
 800967c:	d036      	beq.n	80096ec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d016      	beq.n	80096b4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009686:	4b15      	ldr	r3, [pc, #84]	; (80096dc <HAL_RCC_OscConfig+0x27c>)
 8009688:	2201      	movs	r2, #1
 800968a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800968c:	f7fd fdca 	bl	8007224 <HAL_GetTick>
 8009690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009692:	e008      	b.n	80096a6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009694:	f7fd fdc6 	bl	8007224 <HAL_GetTick>
 8009698:	4602      	mov	r2, r0
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	1ad3      	subs	r3, r2, r3
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d901      	bls.n	80096a6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80096a2:	2303      	movs	r3, #3
 80096a4:	e173      	b.n	800998e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80096a6:	4b0b      	ldr	r3, [pc, #44]	; (80096d4 <HAL_RCC_OscConfig+0x274>)
 80096a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096aa:	f003 0302 	and.w	r3, r3, #2
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d0f0      	beq.n	8009694 <HAL_RCC_OscConfig+0x234>
 80096b2:	e01b      	b.n	80096ec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80096b4:	4b09      	ldr	r3, [pc, #36]	; (80096dc <HAL_RCC_OscConfig+0x27c>)
 80096b6:	2200      	movs	r2, #0
 80096b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096ba:	f7fd fdb3 	bl	8007224 <HAL_GetTick>
 80096be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80096c0:	e00e      	b.n	80096e0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80096c2:	f7fd fdaf 	bl	8007224 <HAL_GetTick>
 80096c6:	4602      	mov	r2, r0
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	1ad3      	subs	r3, r2, r3
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d907      	bls.n	80096e0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80096d0:	2303      	movs	r3, #3
 80096d2:	e15c      	b.n	800998e <HAL_RCC_OscConfig+0x52e>
 80096d4:	40023800 	.word	0x40023800
 80096d8:	42470000 	.word	0x42470000
 80096dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80096e0:	4b8a      	ldr	r3, [pc, #552]	; (800990c <HAL_RCC_OscConfig+0x4ac>)
 80096e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096e4:	f003 0302 	and.w	r3, r3, #2
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d1ea      	bne.n	80096c2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 0304 	and.w	r3, r3, #4
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f000 8097 	beq.w	8009828 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80096fa:	2300      	movs	r3, #0
 80096fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80096fe:	4b83      	ldr	r3, [pc, #524]	; (800990c <HAL_RCC_OscConfig+0x4ac>)
 8009700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10f      	bne.n	800972a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800970a:	2300      	movs	r3, #0
 800970c:	60bb      	str	r3, [r7, #8]
 800970e:	4b7f      	ldr	r3, [pc, #508]	; (800990c <HAL_RCC_OscConfig+0x4ac>)
 8009710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009712:	4a7e      	ldr	r2, [pc, #504]	; (800990c <HAL_RCC_OscConfig+0x4ac>)
 8009714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009718:	6413      	str	r3, [r2, #64]	; 0x40
 800971a:	4b7c      	ldr	r3, [pc, #496]	; (800990c <HAL_RCC_OscConfig+0x4ac>)
 800971c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009722:	60bb      	str	r3, [r7, #8]
 8009724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009726:	2301      	movs	r3, #1
 8009728:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800972a:	4b79      	ldr	r3, [pc, #484]	; (8009910 <HAL_RCC_OscConfig+0x4b0>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009732:	2b00      	cmp	r3, #0
 8009734:	d118      	bne.n	8009768 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009736:	4b76      	ldr	r3, [pc, #472]	; (8009910 <HAL_RCC_OscConfig+0x4b0>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a75      	ldr	r2, [pc, #468]	; (8009910 <HAL_RCC_OscConfig+0x4b0>)
 800973c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009742:	f7fd fd6f 	bl	8007224 <HAL_GetTick>
 8009746:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009748:	e008      	b.n	800975c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800974a:	f7fd fd6b 	bl	8007224 <HAL_GetTick>
 800974e:	4602      	mov	r2, r0
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	1ad3      	subs	r3, r2, r3
 8009754:	2b02      	cmp	r3, #2
 8009756:	d901      	bls.n	800975c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009758:	2303      	movs	r3, #3
 800975a:	e118      	b.n	800998e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800975c:	4b6c      	ldr	r3, [pc, #432]	; (8009910 <HAL_RCC_OscConfig+0x4b0>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009764:	2b00      	cmp	r3, #0
 8009766:	d0f0      	beq.n	800974a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	2b01      	cmp	r3, #1
 800976e:	d106      	bne.n	800977e <HAL_RCC_OscConfig+0x31e>
 8009770:	4b66      	ldr	r3, [pc, #408]	; (800990c <HAL_RCC_OscConfig+0x4ac>)
 8009772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009774:	4a65      	ldr	r2, [pc, #404]	; (800990c <HAL_RCC_OscConfig+0x4ac>)
 8009776:	f043 0301 	orr.w	r3, r3, #1
 800977a:	6713      	str	r3, [r2, #112]	; 0x70
 800977c:	e01c      	b.n	80097b8 <HAL_RCC_OscConfig+0x358>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	2b05      	cmp	r3, #5
 8009784:	d10c      	bne.n	80097a0 <HAL_RCC_OscConfig+0x340>
 8009786:	4b61      	ldr	r3, [pc, #388]	; (800990c <HAL_RCC_OscConfig+0x4ac>)
 8009788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800978a:	4a60      	ldr	r2, [pc, #384]	; (800990c <HAL_RCC_OscConfig+0x4ac>)
 800978c:	f043 0304 	orr.w	r3, r3, #4
 8009790:	6713      	str	r3, [r2, #112]	; 0x70
 8009792:	4b5e      	ldr	r3, [pc, #376]	; (800990c <HAL_RCC_OscConfig+0x4ac>)
 8009794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009796:	4a5d      	ldr	r2, [pc, #372]	; (800990c <HAL_RCC_OscConfig+0x4ac>)
 8009798:	f043 0301 	orr.w	r3, r3, #1
 800979c:	6713      	str	r3, [r2, #112]	; 0x70
 800979e:	e00b      	b.n	80097b8 <HAL_RCC_OscConfig+0x358>
 80097a0:	4b5a      	ldr	r3, [pc, #360]	; (800990c <HAL_RCC_OscConfig+0x4ac>)
 80097a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097a4:	4a59      	ldr	r2, [pc, #356]	; (800990c <HAL_RCC_OscConfig+0x4ac>)
 80097a6:	f023 0301 	bic.w	r3, r3, #1
 80097aa:	6713      	str	r3, [r2, #112]	; 0x70
 80097ac:	4b57      	ldr	r3, [pc, #348]	; (800990c <HAL_RCC_OscConfig+0x4ac>)
 80097ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097b0:	4a56      	ldr	r2, [pc, #344]	; (800990c <HAL_RCC_OscConfig+0x4ac>)
 80097b2:	f023 0304 	bic.w	r3, r3, #4
 80097b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d015      	beq.n	80097ec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097c0:	f7fd fd30 	bl	8007224 <HAL_GetTick>
 80097c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097c6:	e00a      	b.n	80097de <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80097c8:	f7fd fd2c 	bl	8007224 <HAL_GetTick>
 80097cc:	4602      	mov	r2, r0
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d901      	bls.n	80097de <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80097da:	2303      	movs	r3, #3
 80097dc:	e0d7      	b.n	800998e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097de:	4b4b      	ldr	r3, [pc, #300]	; (800990c <HAL_RCC_OscConfig+0x4ac>)
 80097e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097e2:	f003 0302 	and.w	r3, r3, #2
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d0ee      	beq.n	80097c8 <HAL_RCC_OscConfig+0x368>
 80097ea:	e014      	b.n	8009816 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097ec:	f7fd fd1a 	bl	8007224 <HAL_GetTick>
 80097f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80097f2:	e00a      	b.n	800980a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80097f4:	f7fd fd16 	bl	8007224 <HAL_GetTick>
 80097f8:	4602      	mov	r2, r0
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	1ad3      	subs	r3, r2, r3
 80097fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009802:	4293      	cmp	r3, r2
 8009804:	d901      	bls.n	800980a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8009806:	2303      	movs	r3, #3
 8009808:	e0c1      	b.n	800998e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800980a:	4b40      	ldr	r3, [pc, #256]	; (800990c <HAL_RCC_OscConfig+0x4ac>)
 800980c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800980e:	f003 0302 	and.w	r3, r3, #2
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1ee      	bne.n	80097f4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009816:	7dfb      	ldrb	r3, [r7, #23]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d105      	bne.n	8009828 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800981c:	4b3b      	ldr	r3, [pc, #236]	; (800990c <HAL_RCC_OscConfig+0x4ac>)
 800981e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009820:	4a3a      	ldr	r2, [pc, #232]	; (800990c <HAL_RCC_OscConfig+0x4ac>)
 8009822:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009826:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	699b      	ldr	r3, [r3, #24]
 800982c:	2b00      	cmp	r3, #0
 800982e:	f000 80ad 	beq.w	800998c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009832:	4b36      	ldr	r3, [pc, #216]	; (800990c <HAL_RCC_OscConfig+0x4ac>)
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	f003 030c 	and.w	r3, r3, #12
 800983a:	2b08      	cmp	r3, #8
 800983c:	d060      	beq.n	8009900 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	699b      	ldr	r3, [r3, #24]
 8009842:	2b02      	cmp	r3, #2
 8009844:	d145      	bne.n	80098d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009846:	4b33      	ldr	r3, [pc, #204]	; (8009914 <HAL_RCC_OscConfig+0x4b4>)
 8009848:	2200      	movs	r2, #0
 800984a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800984c:	f7fd fcea 	bl	8007224 <HAL_GetTick>
 8009850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009852:	e008      	b.n	8009866 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009854:	f7fd fce6 	bl	8007224 <HAL_GetTick>
 8009858:	4602      	mov	r2, r0
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	1ad3      	subs	r3, r2, r3
 800985e:	2b02      	cmp	r3, #2
 8009860:	d901      	bls.n	8009866 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8009862:	2303      	movs	r3, #3
 8009864:	e093      	b.n	800998e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009866:	4b29      	ldr	r3, [pc, #164]	; (800990c <HAL_RCC_OscConfig+0x4ac>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800986e:	2b00      	cmp	r3, #0
 8009870:	d1f0      	bne.n	8009854 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	69da      	ldr	r2, [r3, #28]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a1b      	ldr	r3, [r3, #32]
 800987a:	431a      	orrs	r2, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009880:	019b      	lsls	r3, r3, #6
 8009882:	431a      	orrs	r2, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009888:	085b      	lsrs	r3, r3, #1
 800988a:	3b01      	subs	r3, #1
 800988c:	041b      	lsls	r3, r3, #16
 800988e:	431a      	orrs	r2, r3
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009894:	061b      	lsls	r3, r3, #24
 8009896:	431a      	orrs	r2, r3
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800989c:	071b      	lsls	r3, r3, #28
 800989e:	491b      	ldr	r1, [pc, #108]	; (800990c <HAL_RCC_OscConfig+0x4ac>)
 80098a0:	4313      	orrs	r3, r2
 80098a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80098a4:	4b1b      	ldr	r3, [pc, #108]	; (8009914 <HAL_RCC_OscConfig+0x4b4>)
 80098a6:	2201      	movs	r2, #1
 80098a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098aa:	f7fd fcbb 	bl	8007224 <HAL_GetTick>
 80098ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80098b0:	e008      	b.n	80098c4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098b2:	f7fd fcb7 	bl	8007224 <HAL_GetTick>
 80098b6:	4602      	mov	r2, r0
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	1ad3      	subs	r3, r2, r3
 80098bc:	2b02      	cmp	r3, #2
 80098be:	d901      	bls.n	80098c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80098c0:	2303      	movs	r3, #3
 80098c2:	e064      	b.n	800998e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80098c4:	4b11      	ldr	r3, [pc, #68]	; (800990c <HAL_RCC_OscConfig+0x4ac>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d0f0      	beq.n	80098b2 <HAL_RCC_OscConfig+0x452>
 80098d0:	e05c      	b.n	800998c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098d2:	4b10      	ldr	r3, [pc, #64]	; (8009914 <HAL_RCC_OscConfig+0x4b4>)
 80098d4:	2200      	movs	r2, #0
 80098d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098d8:	f7fd fca4 	bl	8007224 <HAL_GetTick>
 80098dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098de:	e008      	b.n	80098f2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098e0:	f7fd fca0 	bl	8007224 <HAL_GetTick>
 80098e4:	4602      	mov	r2, r0
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	1ad3      	subs	r3, r2, r3
 80098ea:	2b02      	cmp	r3, #2
 80098ec:	d901      	bls.n	80098f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80098ee:	2303      	movs	r3, #3
 80098f0:	e04d      	b.n	800998e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098f2:	4b06      	ldr	r3, [pc, #24]	; (800990c <HAL_RCC_OscConfig+0x4ac>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1f0      	bne.n	80098e0 <HAL_RCC_OscConfig+0x480>
 80098fe:	e045      	b.n	800998c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	2b01      	cmp	r3, #1
 8009906:	d107      	bne.n	8009918 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	e040      	b.n	800998e <HAL_RCC_OscConfig+0x52e>
 800990c:	40023800 	.word	0x40023800
 8009910:	40007000 	.word	0x40007000
 8009914:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009918:	4b1f      	ldr	r3, [pc, #124]	; (8009998 <HAL_RCC_OscConfig+0x538>)
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	699b      	ldr	r3, [r3, #24]
 8009922:	2b01      	cmp	r3, #1
 8009924:	d030      	beq.n	8009988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009930:	429a      	cmp	r2, r3
 8009932:	d129      	bne.n	8009988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800993e:	429a      	cmp	r2, r3
 8009940:	d122      	bne.n	8009988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009948:	4013      	ands	r3, r2
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800994e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009950:	4293      	cmp	r3, r2
 8009952:	d119      	bne.n	8009988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800995e:	085b      	lsrs	r3, r3, #1
 8009960:	3b01      	subs	r3, #1
 8009962:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009964:	429a      	cmp	r2, r3
 8009966:	d10f      	bne.n	8009988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009972:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009974:	429a      	cmp	r2, r3
 8009976:	d107      	bne.n	8009988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009982:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009984:	429a      	cmp	r2, r3
 8009986:	d001      	beq.n	800998c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	e000      	b.n	800998e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3718      	adds	r7, #24
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	40023800 	.word	0x40023800

0800999c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d101      	bne.n	80099ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	e07b      	b.n	8009aa6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d108      	bne.n	80099c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099be:	d009      	beq.n	80099d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	61da      	str	r2, [r3, #28]
 80099c6:	e005      	b.n	80099d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d106      	bne.n	80099f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f7fc f87c 	bl	8005aec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2202      	movs	r2, #2
 80099f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009a1c:	431a      	orrs	r2, r3
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a26:	431a      	orrs	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	f003 0302 	and.w	r3, r3, #2
 8009a30:	431a      	orrs	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	695b      	ldr	r3, [r3, #20]
 8009a36:	f003 0301 	and.w	r3, r3, #1
 8009a3a:	431a      	orrs	r2, r3
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	699b      	ldr	r3, [r3, #24]
 8009a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a44:	431a      	orrs	r2, r3
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	69db      	ldr	r3, [r3, #28]
 8009a4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a4e:	431a      	orrs	r2, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6a1b      	ldr	r3, [r3, #32]
 8009a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a58:	ea42 0103 	orr.w	r1, r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a60:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	430a      	orrs	r2, r1
 8009a6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	699b      	ldr	r3, [r3, #24]
 8009a70:	0c1b      	lsrs	r3, r3, #16
 8009a72:	f003 0104 	and.w	r1, r3, #4
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7a:	f003 0210 	and.w	r2, r3, #16
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	430a      	orrs	r2, r1
 8009a84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	69da      	ldr	r2, [r3, #28]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3708      	adds	r7, #8
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b08c      	sub	sp, #48	; 0x30
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	60f8      	str	r0, [r7, #12]
 8009ab6:	60b9      	str	r1, [r7, #8]
 8009ab8:	607a      	str	r2, [r7, #4]
 8009aba:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009abc:	2301      	movs	r3, #1
 8009abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d101      	bne.n	8009ad4 <HAL_SPI_TransmitReceive+0x26>
 8009ad0:	2302      	movs	r3, #2
 8009ad2:	e18a      	b.n	8009dea <HAL_SPI_TransmitReceive+0x33c>
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009adc:	f7fd fba2 	bl	8007224 <HAL_GetTick>
 8009ae0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009af2:	887b      	ldrh	r3, [r7, #2]
 8009af4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009af6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d00f      	beq.n	8009b1e <HAL_SPI_TransmitReceive+0x70>
 8009afe:	69fb      	ldr	r3, [r7, #28]
 8009b00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b04:	d107      	bne.n	8009b16 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d103      	bne.n	8009b16 <HAL_SPI_TransmitReceive+0x68>
 8009b0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b12:	2b04      	cmp	r3, #4
 8009b14:	d003      	beq.n	8009b1e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009b16:	2302      	movs	r3, #2
 8009b18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009b1c:	e15b      	b.n	8009dd6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d005      	beq.n	8009b30 <HAL_SPI_TransmitReceive+0x82>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d002      	beq.n	8009b30 <HAL_SPI_TransmitReceive+0x82>
 8009b2a:	887b      	ldrh	r3, [r7, #2]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d103      	bne.n	8009b38 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009b36:	e14e      	b.n	8009dd6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	2b04      	cmp	r3, #4
 8009b42:	d003      	beq.n	8009b4c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2205      	movs	r2, #5
 8009b48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	887a      	ldrh	r2, [r7, #2]
 8009b5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	887a      	ldrh	r2, [r7, #2]
 8009b62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	887a      	ldrh	r2, [r7, #2]
 8009b6e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	887a      	ldrh	r2, [r7, #2]
 8009b74:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b8c:	2b40      	cmp	r3, #64	; 0x40
 8009b8e:	d007      	beq.n	8009ba0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ba8:	d178      	bne.n	8009c9c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d002      	beq.n	8009bb8 <HAL_SPI_TransmitReceive+0x10a>
 8009bb2:	8b7b      	ldrh	r3, [r7, #26]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d166      	bne.n	8009c86 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bbc:	881a      	ldrh	r2, [r3, #0]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bc8:	1c9a      	adds	r2, r3, #2
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	b29a      	uxth	r2, r3
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009bdc:	e053      	b.n	8009c86 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	f003 0302 	and.w	r3, r3, #2
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	d11b      	bne.n	8009c24 <HAL_SPI_TransmitReceive+0x176>
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d016      	beq.n	8009c24 <HAL_SPI_TransmitReceive+0x176>
 8009bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d113      	bne.n	8009c24 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c00:	881a      	ldrh	r2, [r3, #0]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c0c:	1c9a      	adds	r2, r3, #2
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	b29a      	uxth	r2, r3
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009c20:	2300      	movs	r3, #0
 8009c22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	f003 0301 	and.w	r3, r3, #1
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d119      	bne.n	8009c66 <HAL_SPI_TransmitReceive+0x1b8>
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d014      	beq.n	8009c66 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	68da      	ldr	r2, [r3, #12]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c46:	b292      	uxth	r2, r2
 8009c48:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c4e:	1c9a      	adds	r2, r3, #2
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	b29a      	uxth	r2, r3
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009c62:	2301      	movs	r3, #1
 8009c64:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009c66:	f7fd fadd 	bl	8007224 <HAL_GetTick>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6e:	1ad3      	subs	r3, r2, r3
 8009c70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d807      	bhi.n	8009c86 <HAL_SPI_TransmitReceive+0x1d8>
 8009c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c7c:	d003      	beq.n	8009c86 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009c7e:	2303      	movs	r3, #3
 8009c80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009c84:	e0a7      	b.n	8009dd6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1a6      	bne.n	8009bde <HAL_SPI_TransmitReceive+0x130>
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d1a1      	bne.n	8009bde <HAL_SPI_TransmitReceive+0x130>
 8009c9a:	e07c      	b.n	8009d96 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d002      	beq.n	8009caa <HAL_SPI_TransmitReceive+0x1fc>
 8009ca4:	8b7b      	ldrh	r3, [r7, #26]
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d16b      	bne.n	8009d82 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	330c      	adds	r3, #12
 8009cb4:	7812      	ldrb	r2, [r2, #0]
 8009cb6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cbc:	1c5a      	adds	r2, r3, #1
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	3b01      	subs	r3, #1
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009cd0:	e057      	b.n	8009d82 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	f003 0302 	and.w	r3, r3, #2
 8009cdc:	2b02      	cmp	r3, #2
 8009cde:	d11c      	bne.n	8009d1a <HAL_SPI_TransmitReceive+0x26c>
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d017      	beq.n	8009d1a <HAL_SPI_TransmitReceive+0x26c>
 8009cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d114      	bne.n	8009d1a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	330c      	adds	r3, #12
 8009cfa:	7812      	ldrb	r2, [r2, #0]
 8009cfc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d02:	1c5a      	adds	r2, r3, #1
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	3b01      	subs	r3, #1
 8009d10:	b29a      	uxth	r2, r3
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009d16:	2300      	movs	r3, #0
 8009d18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	f003 0301 	and.w	r3, r3, #1
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d119      	bne.n	8009d5c <HAL_SPI_TransmitReceive+0x2ae>
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d014      	beq.n	8009d5c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	68da      	ldr	r2, [r3, #12]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d3c:	b2d2      	uxtb	r2, r2
 8009d3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d44:	1c5a      	adds	r2, r3, #1
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	3b01      	subs	r3, #1
 8009d52:	b29a      	uxth	r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009d5c:	f7fd fa62 	bl	8007224 <HAL_GetTick>
 8009d60:	4602      	mov	r2, r0
 8009d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d64:	1ad3      	subs	r3, r2, r3
 8009d66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d803      	bhi.n	8009d74 <HAL_SPI_TransmitReceive+0x2c6>
 8009d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d72:	d102      	bne.n	8009d7a <HAL_SPI_TransmitReceive+0x2cc>
 8009d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d103      	bne.n	8009d82 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009d7a:	2303      	movs	r3, #3
 8009d7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009d80:	e029      	b.n	8009dd6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1a2      	bne.n	8009cd2 <HAL_SPI_TransmitReceive+0x224>
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d19d      	bne.n	8009cd2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f000 f8b2 	bl	8009f04 <SPI_EndRxTxTransaction>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d006      	beq.n	8009db4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2220      	movs	r2, #32
 8009db0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009db2:	e010      	b.n	8009dd6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d10b      	bne.n	8009dd4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	617b      	str	r3, [r7, #20]
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	617b      	str	r3, [r7, #20]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	617b      	str	r3, [r7, #20]
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	e000      	b.n	8009dd6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009dd4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009de6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3730      	adds	r7, #48	; 0x30
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
	...

08009df4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b088      	sub	sp, #32
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	603b      	str	r3, [r7, #0]
 8009e00:	4613      	mov	r3, r2
 8009e02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009e04:	f7fd fa0e 	bl	8007224 <HAL_GetTick>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0c:	1a9b      	subs	r3, r3, r2
 8009e0e:	683a      	ldr	r2, [r7, #0]
 8009e10:	4413      	add	r3, r2
 8009e12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009e14:	f7fd fa06 	bl	8007224 <HAL_GetTick>
 8009e18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009e1a:	4b39      	ldr	r3, [pc, #228]	; (8009f00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	015b      	lsls	r3, r3, #5
 8009e20:	0d1b      	lsrs	r3, r3, #20
 8009e22:	69fa      	ldr	r2, [r7, #28]
 8009e24:	fb02 f303 	mul.w	r3, r2, r3
 8009e28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e2a:	e054      	b.n	8009ed6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e32:	d050      	beq.n	8009ed6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009e34:	f7fd f9f6 	bl	8007224 <HAL_GetTick>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	1ad3      	subs	r3, r2, r3
 8009e3e:	69fa      	ldr	r2, [r7, #28]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d902      	bls.n	8009e4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d13d      	bne.n	8009ec6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	685a      	ldr	r2, [r3, #4]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009e58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e62:	d111      	bne.n	8009e88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e6c:	d004      	beq.n	8009e78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e76:	d107      	bne.n	8009e88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e90:	d10f      	bne.n	8009eb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ea0:	601a      	str	r2, [r3, #0]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009eb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	e017      	b.n	8009ef6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d101      	bne.n	8009ed0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	3b01      	subs	r3, #1
 8009ed4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	689a      	ldr	r2, [r3, #8]
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	4013      	ands	r3, r2
 8009ee0:	68ba      	ldr	r2, [r7, #8]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	bf0c      	ite	eq
 8009ee6:	2301      	moveq	r3, #1
 8009ee8:	2300      	movne	r3, #0
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	461a      	mov	r2, r3
 8009eee:	79fb      	ldrb	r3, [r7, #7]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d19b      	bne.n	8009e2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3720      	adds	r7, #32
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	20000040 	.word	0x20000040

08009f04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b088      	sub	sp, #32
 8009f08:	af02      	add	r7, sp, #8
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009f10:	4b1b      	ldr	r3, [pc, #108]	; (8009f80 <SPI_EndRxTxTransaction+0x7c>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a1b      	ldr	r2, [pc, #108]	; (8009f84 <SPI_EndRxTxTransaction+0x80>)
 8009f16:	fba2 2303 	umull	r2, r3, r2, r3
 8009f1a:	0d5b      	lsrs	r3, r3, #21
 8009f1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009f20:	fb02 f303 	mul.w	r3, r2, r3
 8009f24:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f2e:	d112      	bne.n	8009f56 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	2200      	movs	r2, #0
 8009f38:	2180      	movs	r1, #128	; 0x80
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	f7ff ff5a 	bl	8009df4 <SPI_WaitFlagStateUntilTimeout>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d016      	beq.n	8009f74 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f4a:	f043 0220 	orr.w	r2, r3, #32
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009f52:	2303      	movs	r3, #3
 8009f54:	e00f      	b.n	8009f76 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00a      	beq.n	8009f72 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f6c:	2b80      	cmp	r3, #128	; 0x80
 8009f6e:	d0f2      	beq.n	8009f56 <SPI_EndRxTxTransaction+0x52>
 8009f70:	e000      	b.n	8009f74 <SPI_EndRxTxTransaction+0x70>
        break;
 8009f72:	bf00      	nop
  }

  return HAL_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3718      	adds	r7, #24
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	20000040 	.word	0x20000040
 8009f84:	165e9f81 	.word	0x165e9f81

08009f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d101      	bne.n	8009f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	e041      	b.n	800a01e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d106      	bne.n	8009fb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f7fc fbc4 	bl	800673c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2202      	movs	r2, #2
 8009fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	3304      	adds	r3, #4
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	4610      	mov	r0, r2
 8009fc8:	f000 fc7c 	bl	800a8c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2201      	movs	r2, #1
 800a018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a01c:	2300      	movs	r3, #0
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3708      	adds	r7, #8
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
	...

0800a028 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a036:	b2db      	uxtb	r3, r3
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d001      	beq.n	800a040 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	e04e      	b.n	800a0de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2202      	movs	r2, #2
 800a044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	68da      	ldr	r2, [r3, #12]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f042 0201 	orr.w	r2, r2, #1
 800a056:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a23      	ldr	r2, [pc, #140]	; (800a0ec <HAL_TIM_Base_Start_IT+0xc4>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d022      	beq.n	800a0a8 <HAL_TIM_Base_Start_IT+0x80>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a06a:	d01d      	beq.n	800a0a8 <HAL_TIM_Base_Start_IT+0x80>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a1f      	ldr	r2, [pc, #124]	; (800a0f0 <HAL_TIM_Base_Start_IT+0xc8>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d018      	beq.n	800a0a8 <HAL_TIM_Base_Start_IT+0x80>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a1e      	ldr	r2, [pc, #120]	; (800a0f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d013      	beq.n	800a0a8 <HAL_TIM_Base_Start_IT+0x80>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a1c      	ldr	r2, [pc, #112]	; (800a0f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d00e      	beq.n	800a0a8 <HAL_TIM_Base_Start_IT+0x80>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a1b      	ldr	r2, [pc, #108]	; (800a0fc <HAL_TIM_Base_Start_IT+0xd4>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d009      	beq.n	800a0a8 <HAL_TIM_Base_Start_IT+0x80>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a19      	ldr	r2, [pc, #100]	; (800a100 <HAL_TIM_Base_Start_IT+0xd8>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d004      	beq.n	800a0a8 <HAL_TIM_Base_Start_IT+0x80>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a18      	ldr	r2, [pc, #96]	; (800a104 <HAL_TIM_Base_Start_IT+0xdc>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d111      	bne.n	800a0cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	f003 0307 	and.w	r3, r3, #7
 800a0b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2b06      	cmp	r3, #6
 800a0b8:	d010      	beq.n	800a0dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f042 0201 	orr.w	r2, r2, #1
 800a0c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0ca:	e007      	b.n	800a0dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f042 0201 	orr.w	r2, r2, #1
 800a0da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3714      	adds	r7, #20
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr
 800a0ea:	bf00      	nop
 800a0ec:	40010000 	.word	0x40010000
 800a0f0:	40000400 	.word	0x40000400
 800a0f4:	40000800 	.word	0x40000800
 800a0f8:	40000c00 	.word	0x40000c00
 800a0fc:	40010400 	.word	0x40010400
 800a100:	40014000 	.word	0x40014000
 800a104:	40001800 	.word	0x40001800

0800a108 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d101      	bne.n	800a11a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	e041      	b.n	800a19e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a120:	b2db      	uxtb	r3, r3
 800a122:	2b00      	cmp	r3, #0
 800a124:	d106      	bne.n	800a134 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 f839 	bl	800a1a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2202      	movs	r2, #2
 800a138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	3304      	adds	r3, #4
 800a144:	4619      	mov	r1, r3
 800a146:	4610      	mov	r0, r2
 800a148:	f000 fbbc 	bl	800a8c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2201      	movs	r2, #1
 800a158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2201      	movs	r2, #1
 800a160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2201      	movs	r2, #1
 800a188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2201      	movs	r2, #1
 800a198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3708      	adds	r7, #8
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a1a6:	b480      	push	{r7}
 800a1a8:	b083      	sub	sp, #12
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a1ae:	bf00      	nop
 800a1b0:	370c      	adds	r7, #12
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
	...

0800a1bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d109      	bne.n	800a1e0 <HAL_TIM_PWM_Start+0x24>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	bf14      	ite	ne
 800a1d8:	2301      	movne	r3, #1
 800a1da:	2300      	moveq	r3, #0
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	e022      	b.n	800a226 <HAL_TIM_PWM_Start+0x6a>
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	2b04      	cmp	r3, #4
 800a1e4:	d109      	bne.n	800a1fa <HAL_TIM_PWM_Start+0x3e>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	bf14      	ite	ne
 800a1f2:	2301      	movne	r3, #1
 800a1f4:	2300      	moveq	r3, #0
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	e015      	b.n	800a226 <HAL_TIM_PWM_Start+0x6a>
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	2b08      	cmp	r3, #8
 800a1fe:	d109      	bne.n	800a214 <HAL_TIM_PWM_Start+0x58>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a206:	b2db      	uxtb	r3, r3
 800a208:	2b01      	cmp	r3, #1
 800a20a:	bf14      	ite	ne
 800a20c:	2301      	movne	r3, #1
 800a20e:	2300      	moveq	r3, #0
 800a210:	b2db      	uxtb	r3, r3
 800a212:	e008      	b.n	800a226 <HAL_TIM_PWM_Start+0x6a>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	bf14      	ite	ne
 800a220:	2301      	movne	r3, #1
 800a222:	2300      	moveq	r3, #0
 800a224:	b2db      	uxtb	r3, r3
 800a226:	2b00      	cmp	r3, #0
 800a228:	d001      	beq.n	800a22e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	e07c      	b.n	800a328 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d104      	bne.n	800a23e <HAL_TIM_PWM_Start+0x82>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2202      	movs	r2, #2
 800a238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a23c:	e013      	b.n	800a266 <HAL_TIM_PWM_Start+0xaa>
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	2b04      	cmp	r3, #4
 800a242:	d104      	bne.n	800a24e <HAL_TIM_PWM_Start+0x92>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2202      	movs	r2, #2
 800a248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a24c:	e00b      	b.n	800a266 <HAL_TIM_PWM_Start+0xaa>
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	2b08      	cmp	r3, #8
 800a252:	d104      	bne.n	800a25e <HAL_TIM_PWM_Start+0xa2>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2202      	movs	r2, #2
 800a258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a25c:	e003      	b.n	800a266 <HAL_TIM_PWM_Start+0xaa>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2202      	movs	r2, #2
 800a262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2201      	movs	r2, #1
 800a26c:	6839      	ldr	r1, [r7, #0]
 800a26e:	4618      	mov	r0, r3
 800a270:	f000 fe12 	bl	800ae98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a2d      	ldr	r2, [pc, #180]	; (800a330 <HAL_TIM_PWM_Start+0x174>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d004      	beq.n	800a288 <HAL_TIM_PWM_Start+0xcc>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a2c      	ldr	r2, [pc, #176]	; (800a334 <HAL_TIM_PWM_Start+0x178>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d101      	bne.n	800a28c <HAL_TIM_PWM_Start+0xd0>
 800a288:	2301      	movs	r3, #1
 800a28a:	e000      	b.n	800a28e <HAL_TIM_PWM_Start+0xd2>
 800a28c:	2300      	movs	r3, #0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d007      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a2a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a22      	ldr	r2, [pc, #136]	; (800a330 <HAL_TIM_PWM_Start+0x174>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d022      	beq.n	800a2f2 <HAL_TIM_PWM_Start+0x136>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2b4:	d01d      	beq.n	800a2f2 <HAL_TIM_PWM_Start+0x136>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a1f      	ldr	r2, [pc, #124]	; (800a338 <HAL_TIM_PWM_Start+0x17c>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d018      	beq.n	800a2f2 <HAL_TIM_PWM_Start+0x136>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a1d      	ldr	r2, [pc, #116]	; (800a33c <HAL_TIM_PWM_Start+0x180>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d013      	beq.n	800a2f2 <HAL_TIM_PWM_Start+0x136>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a1c      	ldr	r2, [pc, #112]	; (800a340 <HAL_TIM_PWM_Start+0x184>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d00e      	beq.n	800a2f2 <HAL_TIM_PWM_Start+0x136>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a16      	ldr	r2, [pc, #88]	; (800a334 <HAL_TIM_PWM_Start+0x178>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d009      	beq.n	800a2f2 <HAL_TIM_PWM_Start+0x136>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a18      	ldr	r2, [pc, #96]	; (800a344 <HAL_TIM_PWM_Start+0x188>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d004      	beq.n	800a2f2 <HAL_TIM_PWM_Start+0x136>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a16      	ldr	r2, [pc, #88]	; (800a348 <HAL_TIM_PWM_Start+0x18c>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d111      	bne.n	800a316 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	f003 0307 	and.w	r3, r3, #7
 800a2fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2b06      	cmp	r3, #6
 800a302:	d010      	beq.n	800a326 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f042 0201 	orr.w	r2, r2, #1
 800a312:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a314:	e007      	b.n	800a326 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f042 0201 	orr.w	r2, r2, #1
 800a324:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	40010000 	.word	0x40010000
 800a334:	40010400 	.word	0x40010400
 800a338:	40000400 	.word	0x40000400
 800a33c:	40000800 	.word	0x40000800
 800a340:	40000c00 	.word	0x40000c00
 800a344:	40014000 	.word	0x40014000
 800a348:	40001800 	.word	0x40001800

0800a34c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	691b      	ldr	r3, [r3, #16]
 800a35a:	f003 0302 	and.w	r3, r3, #2
 800a35e:	2b02      	cmp	r3, #2
 800a360:	d122      	bne.n	800a3a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	f003 0302 	and.w	r3, r3, #2
 800a36c:	2b02      	cmp	r3, #2
 800a36e:	d11b      	bne.n	800a3a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f06f 0202 	mvn.w	r2, #2
 800a378:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2201      	movs	r2, #1
 800a37e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	699b      	ldr	r3, [r3, #24]
 800a386:	f003 0303 	and.w	r3, r3, #3
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d003      	beq.n	800a396 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 fa7a 	bl	800a888 <HAL_TIM_IC_CaptureCallback>
 800a394:	e005      	b.n	800a3a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 fa6c 	bl	800a874 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 fa7d 	bl	800a89c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	691b      	ldr	r3, [r3, #16]
 800a3ae:	f003 0304 	and.w	r3, r3, #4
 800a3b2:	2b04      	cmp	r3, #4
 800a3b4:	d122      	bne.n	800a3fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	f003 0304 	and.w	r3, r3, #4
 800a3c0:	2b04      	cmp	r3, #4
 800a3c2:	d11b      	bne.n	800a3fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f06f 0204 	mvn.w	r2, #4
 800a3cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2202      	movs	r2, #2
 800a3d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	699b      	ldr	r3, [r3, #24]
 800a3da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d003      	beq.n	800a3ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 fa50 	bl	800a888 <HAL_TIM_IC_CaptureCallback>
 800a3e8:	e005      	b.n	800a3f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fa42 	bl	800a874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 fa53 	bl	800a89c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	f003 0308 	and.w	r3, r3, #8
 800a406:	2b08      	cmp	r3, #8
 800a408:	d122      	bne.n	800a450 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	f003 0308 	and.w	r3, r3, #8
 800a414:	2b08      	cmp	r3, #8
 800a416:	d11b      	bne.n	800a450 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f06f 0208 	mvn.w	r2, #8
 800a420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2204      	movs	r2, #4
 800a426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	69db      	ldr	r3, [r3, #28]
 800a42e:	f003 0303 	and.w	r3, r3, #3
 800a432:	2b00      	cmp	r3, #0
 800a434:	d003      	beq.n	800a43e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 fa26 	bl	800a888 <HAL_TIM_IC_CaptureCallback>
 800a43c:	e005      	b.n	800a44a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 fa18 	bl	800a874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 fa29 	bl	800a89c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	f003 0310 	and.w	r3, r3, #16
 800a45a:	2b10      	cmp	r3, #16
 800a45c:	d122      	bne.n	800a4a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	f003 0310 	and.w	r3, r3, #16
 800a468:	2b10      	cmp	r3, #16
 800a46a:	d11b      	bne.n	800a4a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f06f 0210 	mvn.w	r2, #16
 800a474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2208      	movs	r2, #8
 800a47a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	69db      	ldr	r3, [r3, #28]
 800a482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a486:	2b00      	cmp	r3, #0
 800a488:	d003      	beq.n	800a492 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 f9fc 	bl	800a888 <HAL_TIM_IC_CaptureCallback>
 800a490:	e005      	b.n	800a49e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 f9ee 	bl	800a874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 f9ff 	bl	800a89c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	691b      	ldr	r3, [r3, #16]
 800a4aa:	f003 0301 	and.w	r3, r3, #1
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d10e      	bne.n	800a4d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	f003 0301 	and.w	r3, r3, #1
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d107      	bne.n	800a4d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f06f 0201 	mvn.w	r2, #1
 800a4c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 f9c8 	bl	800a860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	691b      	ldr	r3, [r3, #16]
 800a4d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4da:	2b80      	cmp	r3, #128	; 0x80
 800a4dc:	d10e      	bne.n	800a4fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	68db      	ldr	r3, [r3, #12]
 800a4e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4e8:	2b80      	cmp	r3, #128	; 0x80
 800a4ea:	d107      	bne.n	800a4fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a4f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 fdcc 	bl	800b094 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	691b      	ldr	r3, [r3, #16]
 800a502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a506:	2b40      	cmp	r3, #64	; 0x40
 800a508:	d10e      	bne.n	800a528 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a514:	2b40      	cmp	r3, #64	; 0x40
 800a516:	d107      	bne.n	800a528 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 f9c4 	bl	800a8b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	691b      	ldr	r3, [r3, #16]
 800a52e:	f003 0320 	and.w	r3, r3, #32
 800a532:	2b20      	cmp	r3, #32
 800a534:	d10e      	bne.n	800a554 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	f003 0320 	and.w	r3, r3, #32
 800a540:	2b20      	cmp	r3, #32
 800a542:	d107      	bne.n	800a554 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f06f 0220 	mvn.w	r2, #32
 800a54c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 fd96 	bl	800b080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a554:	bf00      	nop
 800a556:	3708      	adds	r7, #8
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d101      	bne.n	800a576 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a572:	2302      	movs	r3, #2
 800a574:	e0ac      	b.n	800a6d0 <HAL_TIM_PWM_ConfigChannel+0x174>
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2201      	movs	r2, #1
 800a57a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2b0c      	cmp	r3, #12
 800a582:	f200 809f 	bhi.w	800a6c4 <HAL_TIM_PWM_ConfigChannel+0x168>
 800a586:	a201      	add	r2, pc, #4	; (adr r2, 800a58c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a58c:	0800a5c1 	.word	0x0800a5c1
 800a590:	0800a6c5 	.word	0x0800a6c5
 800a594:	0800a6c5 	.word	0x0800a6c5
 800a598:	0800a6c5 	.word	0x0800a6c5
 800a59c:	0800a601 	.word	0x0800a601
 800a5a0:	0800a6c5 	.word	0x0800a6c5
 800a5a4:	0800a6c5 	.word	0x0800a6c5
 800a5a8:	0800a6c5 	.word	0x0800a6c5
 800a5ac:	0800a643 	.word	0x0800a643
 800a5b0:	0800a6c5 	.word	0x0800a6c5
 800a5b4:	0800a6c5 	.word	0x0800a6c5
 800a5b8:	0800a6c5 	.word	0x0800a6c5
 800a5bc:	0800a683 	.word	0x0800a683
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	68b9      	ldr	r1, [r7, #8]
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f000 fa1c 	bl	800aa04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	699a      	ldr	r2, [r3, #24]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f042 0208 	orr.w	r2, r2, #8
 800a5da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	699a      	ldr	r2, [r3, #24]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f022 0204 	bic.w	r2, r2, #4
 800a5ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	6999      	ldr	r1, [r3, #24]
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	691a      	ldr	r2, [r3, #16]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	430a      	orrs	r2, r1
 800a5fc:	619a      	str	r2, [r3, #24]
      break;
 800a5fe:	e062      	b.n	800a6c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	68b9      	ldr	r1, [r7, #8]
 800a606:	4618      	mov	r0, r3
 800a608:	f000 fa6c 	bl	800aae4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	699a      	ldr	r2, [r3, #24]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a61a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	699a      	ldr	r2, [r3, #24]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a62a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	6999      	ldr	r1, [r3, #24]
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	691b      	ldr	r3, [r3, #16]
 800a636:	021a      	lsls	r2, r3, #8
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	430a      	orrs	r2, r1
 800a63e:	619a      	str	r2, [r3, #24]
      break;
 800a640:	e041      	b.n	800a6c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	68b9      	ldr	r1, [r7, #8]
 800a648:	4618      	mov	r0, r3
 800a64a:	f000 fac1 	bl	800abd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	69da      	ldr	r2, [r3, #28]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f042 0208 	orr.w	r2, r2, #8
 800a65c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	69da      	ldr	r2, [r3, #28]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f022 0204 	bic.w	r2, r2, #4
 800a66c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	69d9      	ldr	r1, [r3, #28]
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	691a      	ldr	r2, [r3, #16]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	430a      	orrs	r2, r1
 800a67e:	61da      	str	r2, [r3, #28]
      break;
 800a680:	e021      	b.n	800a6c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	68b9      	ldr	r1, [r7, #8]
 800a688:	4618      	mov	r0, r3
 800a68a:	f000 fb15 	bl	800acb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	69da      	ldr	r2, [r3, #28]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a69c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	69da      	ldr	r2, [r3, #28]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	69d9      	ldr	r1, [r3, #28]
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	691b      	ldr	r3, [r3, #16]
 800a6b8:	021a      	lsls	r2, r3, #8
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	430a      	orrs	r2, r1
 800a6c0:	61da      	str	r2, [r3, #28]
      break;
 800a6c2:	e000      	b.n	800a6c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800a6c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6ce:	2300      	movs	r3, #0
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3710      	adds	r7, #16
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b084      	sub	sp, #16
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d101      	bne.n	800a6f0 <HAL_TIM_ConfigClockSource+0x18>
 800a6ec:	2302      	movs	r3, #2
 800a6ee:	e0b3      	b.n	800a858 <HAL_TIM_ConfigClockSource+0x180>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2202      	movs	r2, #2
 800a6fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a70e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a716:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	68fa      	ldr	r2, [r7, #12]
 800a71e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a728:	d03e      	beq.n	800a7a8 <HAL_TIM_ConfigClockSource+0xd0>
 800a72a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a72e:	f200 8087 	bhi.w	800a840 <HAL_TIM_ConfigClockSource+0x168>
 800a732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a736:	f000 8085 	beq.w	800a844 <HAL_TIM_ConfigClockSource+0x16c>
 800a73a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a73e:	d87f      	bhi.n	800a840 <HAL_TIM_ConfigClockSource+0x168>
 800a740:	2b70      	cmp	r3, #112	; 0x70
 800a742:	d01a      	beq.n	800a77a <HAL_TIM_ConfigClockSource+0xa2>
 800a744:	2b70      	cmp	r3, #112	; 0x70
 800a746:	d87b      	bhi.n	800a840 <HAL_TIM_ConfigClockSource+0x168>
 800a748:	2b60      	cmp	r3, #96	; 0x60
 800a74a:	d050      	beq.n	800a7ee <HAL_TIM_ConfigClockSource+0x116>
 800a74c:	2b60      	cmp	r3, #96	; 0x60
 800a74e:	d877      	bhi.n	800a840 <HAL_TIM_ConfigClockSource+0x168>
 800a750:	2b50      	cmp	r3, #80	; 0x50
 800a752:	d03c      	beq.n	800a7ce <HAL_TIM_ConfigClockSource+0xf6>
 800a754:	2b50      	cmp	r3, #80	; 0x50
 800a756:	d873      	bhi.n	800a840 <HAL_TIM_ConfigClockSource+0x168>
 800a758:	2b40      	cmp	r3, #64	; 0x40
 800a75a:	d058      	beq.n	800a80e <HAL_TIM_ConfigClockSource+0x136>
 800a75c:	2b40      	cmp	r3, #64	; 0x40
 800a75e:	d86f      	bhi.n	800a840 <HAL_TIM_ConfigClockSource+0x168>
 800a760:	2b30      	cmp	r3, #48	; 0x30
 800a762:	d064      	beq.n	800a82e <HAL_TIM_ConfigClockSource+0x156>
 800a764:	2b30      	cmp	r3, #48	; 0x30
 800a766:	d86b      	bhi.n	800a840 <HAL_TIM_ConfigClockSource+0x168>
 800a768:	2b20      	cmp	r3, #32
 800a76a:	d060      	beq.n	800a82e <HAL_TIM_ConfigClockSource+0x156>
 800a76c:	2b20      	cmp	r3, #32
 800a76e:	d867      	bhi.n	800a840 <HAL_TIM_ConfigClockSource+0x168>
 800a770:	2b00      	cmp	r3, #0
 800a772:	d05c      	beq.n	800a82e <HAL_TIM_ConfigClockSource+0x156>
 800a774:	2b10      	cmp	r3, #16
 800a776:	d05a      	beq.n	800a82e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a778:	e062      	b.n	800a840 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6818      	ldr	r0, [r3, #0]
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	6899      	ldr	r1, [r3, #8]
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	685a      	ldr	r2, [r3, #4]
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	f000 fb65 	bl	800ae58 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a79c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	609a      	str	r2, [r3, #8]
      break;
 800a7a6:	e04e      	b.n	800a846 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6818      	ldr	r0, [r3, #0]
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	6899      	ldr	r1, [r3, #8]
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	685a      	ldr	r2, [r3, #4]
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	f000 fb4e 	bl	800ae58 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	689a      	ldr	r2, [r3, #8]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a7ca:	609a      	str	r2, [r3, #8]
      break;
 800a7cc:	e03b      	b.n	800a846 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6818      	ldr	r0, [r3, #0]
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	6859      	ldr	r1, [r3, #4]
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	461a      	mov	r2, r3
 800a7dc:	f000 fac2 	bl	800ad64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	2150      	movs	r1, #80	; 0x50
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f000 fb1b 	bl	800ae22 <TIM_ITRx_SetConfig>
      break;
 800a7ec:	e02b      	b.n	800a846 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6818      	ldr	r0, [r3, #0]
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	6859      	ldr	r1, [r3, #4]
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	f000 fae1 	bl	800adc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	2160      	movs	r1, #96	; 0x60
 800a806:	4618      	mov	r0, r3
 800a808:	f000 fb0b 	bl	800ae22 <TIM_ITRx_SetConfig>
      break;
 800a80c:	e01b      	b.n	800a846 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6818      	ldr	r0, [r3, #0]
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	6859      	ldr	r1, [r3, #4]
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	461a      	mov	r2, r3
 800a81c:	f000 faa2 	bl	800ad64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	2140      	movs	r1, #64	; 0x40
 800a826:	4618      	mov	r0, r3
 800a828:	f000 fafb 	bl	800ae22 <TIM_ITRx_SetConfig>
      break;
 800a82c:	e00b      	b.n	800a846 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4619      	mov	r1, r3
 800a838:	4610      	mov	r0, r2
 800a83a:	f000 faf2 	bl	800ae22 <TIM_ITRx_SetConfig>
        break;
 800a83e:	e002      	b.n	800a846 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a840:	bf00      	nop
 800a842:	e000      	b.n	800a846 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a844:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2201      	movs	r2, #1
 800a84a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2200      	movs	r2, #0
 800a852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a856:	2300      	movs	r3, #0
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3710      	adds	r7, #16
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a860:	b480      	push	{r7}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a868:	bf00      	nop
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a87c:	bf00      	nop
 800a87e:	370c      	adds	r7, #12
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a888:	b480      	push	{r7}
 800a88a:	b083      	sub	sp, #12
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a890:	bf00      	nop
 800a892:	370c      	adds	r7, #12
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a8a4:	bf00      	nop
 800a8a6:	370c      	adds	r7, #12
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a8b8:	bf00      	nop
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b085      	sub	sp, #20
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	4a40      	ldr	r2, [pc, #256]	; (800a9d8 <TIM_Base_SetConfig+0x114>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d013      	beq.n	800a904 <TIM_Base_SetConfig+0x40>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8e2:	d00f      	beq.n	800a904 <TIM_Base_SetConfig+0x40>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	4a3d      	ldr	r2, [pc, #244]	; (800a9dc <TIM_Base_SetConfig+0x118>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d00b      	beq.n	800a904 <TIM_Base_SetConfig+0x40>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	4a3c      	ldr	r2, [pc, #240]	; (800a9e0 <TIM_Base_SetConfig+0x11c>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d007      	beq.n	800a904 <TIM_Base_SetConfig+0x40>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	4a3b      	ldr	r2, [pc, #236]	; (800a9e4 <TIM_Base_SetConfig+0x120>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d003      	beq.n	800a904 <TIM_Base_SetConfig+0x40>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4a3a      	ldr	r2, [pc, #232]	; (800a9e8 <TIM_Base_SetConfig+0x124>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d108      	bne.n	800a916 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a90a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	68fa      	ldr	r2, [r7, #12]
 800a912:	4313      	orrs	r3, r2
 800a914:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4a2f      	ldr	r2, [pc, #188]	; (800a9d8 <TIM_Base_SetConfig+0x114>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d02b      	beq.n	800a976 <TIM_Base_SetConfig+0xb2>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a924:	d027      	beq.n	800a976 <TIM_Base_SetConfig+0xb2>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4a2c      	ldr	r2, [pc, #176]	; (800a9dc <TIM_Base_SetConfig+0x118>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d023      	beq.n	800a976 <TIM_Base_SetConfig+0xb2>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a2b      	ldr	r2, [pc, #172]	; (800a9e0 <TIM_Base_SetConfig+0x11c>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d01f      	beq.n	800a976 <TIM_Base_SetConfig+0xb2>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4a2a      	ldr	r2, [pc, #168]	; (800a9e4 <TIM_Base_SetConfig+0x120>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d01b      	beq.n	800a976 <TIM_Base_SetConfig+0xb2>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a29      	ldr	r2, [pc, #164]	; (800a9e8 <TIM_Base_SetConfig+0x124>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d017      	beq.n	800a976 <TIM_Base_SetConfig+0xb2>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4a28      	ldr	r2, [pc, #160]	; (800a9ec <TIM_Base_SetConfig+0x128>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d013      	beq.n	800a976 <TIM_Base_SetConfig+0xb2>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4a27      	ldr	r2, [pc, #156]	; (800a9f0 <TIM_Base_SetConfig+0x12c>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d00f      	beq.n	800a976 <TIM_Base_SetConfig+0xb2>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4a26      	ldr	r2, [pc, #152]	; (800a9f4 <TIM_Base_SetConfig+0x130>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d00b      	beq.n	800a976 <TIM_Base_SetConfig+0xb2>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	4a25      	ldr	r2, [pc, #148]	; (800a9f8 <TIM_Base_SetConfig+0x134>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d007      	beq.n	800a976 <TIM_Base_SetConfig+0xb2>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4a24      	ldr	r2, [pc, #144]	; (800a9fc <TIM_Base_SetConfig+0x138>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d003      	beq.n	800a976 <TIM_Base_SetConfig+0xb2>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4a23      	ldr	r2, [pc, #140]	; (800aa00 <TIM_Base_SetConfig+0x13c>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d108      	bne.n	800a988 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a97c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	68fa      	ldr	r2, [r7, #12]
 800a984:	4313      	orrs	r3, r2
 800a986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	695b      	ldr	r3, [r3, #20]
 800a992:	4313      	orrs	r3, r2
 800a994:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	68fa      	ldr	r2, [r7, #12]
 800a99a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	689a      	ldr	r2, [r3, #8]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a0a      	ldr	r2, [pc, #40]	; (800a9d8 <TIM_Base_SetConfig+0x114>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d003      	beq.n	800a9bc <TIM_Base_SetConfig+0xf8>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a0c      	ldr	r2, [pc, #48]	; (800a9e8 <TIM_Base_SetConfig+0x124>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d103      	bne.n	800a9c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	691a      	ldr	r2, [r3, #16]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	615a      	str	r2, [r3, #20]
}
 800a9ca:	bf00      	nop
 800a9cc:	3714      	adds	r7, #20
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr
 800a9d6:	bf00      	nop
 800a9d8:	40010000 	.word	0x40010000
 800a9dc:	40000400 	.word	0x40000400
 800a9e0:	40000800 	.word	0x40000800
 800a9e4:	40000c00 	.word	0x40000c00
 800a9e8:	40010400 	.word	0x40010400
 800a9ec:	40014000 	.word	0x40014000
 800a9f0:	40014400 	.word	0x40014400
 800a9f4:	40014800 	.word	0x40014800
 800a9f8:	40001800 	.word	0x40001800
 800a9fc:	40001c00 	.word	0x40001c00
 800aa00:	40002000 	.word	0x40002000

0800aa04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b087      	sub	sp, #28
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6a1b      	ldr	r3, [r3, #32]
 800aa12:	f023 0201 	bic.w	r2, r3, #1
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6a1b      	ldr	r3, [r3, #32]
 800aa1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	699b      	ldr	r3, [r3, #24]
 800aa2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f023 0303 	bic.w	r3, r3, #3
 800aa3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	4313      	orrs	r3, r2
 800aa44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	f023 0302 	bic.w	r3, r3, #2
 800aa4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	689b      	ldr	r3, [r3, #8]
 800aa52:	697a      	ldr	r2, [r7, #20]
 800aa54:	4313      	orrs	r3, r2
 800aa56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	4a20      	ldr	r2, [pc, #128]	; (800aadc <TIM_OC1_SetConfig+0xd8>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d003      	beq.n	800aa68 <TIM_OC1_SetConfig+0x64>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	4a1f      	ldr	r2, [pc, #124]	; (800aae0 <TIM_OC1_SetConfig+0xdc>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d10c      	bne.n	800aa82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	f023 0308 	bic.w	r3, r3, #8
 800aa6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	697a      	ldr	r2, [r7, #20]
 800aa76:	4313      	orrs	r3, r2
 800aa78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	f023 0304 	bic.w	r3, r3, #4
 800aa80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4a15      	ldr	r2, [pc, #84]	; (800aadc <TIM_OC1_SetConfig+0xd8>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d003      	beq.n	800aa92 <TIM_OC1_SetConfig+0x8e>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	4a14      	ldr	r2, [pc, #80]	; (800aae0 <TIM_OC1_SetConfig+0xdc>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d111      	bne.n	800aab6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aaa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	695b      	ldr	r3, [r3, #20]
 800aaa6:	693a      	ldr	r2, [r7, #16]
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	699b      	ldr	r3, [r3, #24]
 800aab0:	693a      	ldr	r2, [r7, #16]
 800aab2:	4313      	orrs	r3, r2
 800aab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	693a      	ldr	r2, [r7, #16]
 800aaba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	68fa      	ldr	r2, [r7, #12]
 800aac0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	685a      	ldr	r2, [r3, #4]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	697a      	ldr	r2, [r7, #20]
 800aace:	621a      	str	r2, [r3, #32]
}
 800aad0:	bf00      	nop
 800aad2:	371c      	adds	r7, #28
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr
 800aadc:	40010000 	.word	0x40010000
 800aae0:	40010400 	.word	0x40010400

0800aae4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b087      	sub	sp, #28
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6a1b      	ldr	r3, [r3, #32]
 800aaf2:	f023 0210 	bic.w	r2, r3, #16
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a1b      	ldr	r3, [r3, #32]
 800aafe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	699b      	ldr	r3, [r3, #24]
 800ab0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	021b      	lsls	r3, r3, #8
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	4313      	orrs	r3, r2
 800ab26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	f023 0320 	bic.w	r3, r3, #32
 800ab2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	689b      	ldr	r3, [r3, #8]
 800ab34:	011b      	lsls	r3, r3, #4
 800ab36:	697a      	ldr	r2, [r7, #20]
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4a22      	ldr	r2, [pc, #136]	; (800abc8 <TIM_OC2_SetConfig+0xe4>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d003      	beq.n	800ab4c <TIM_OC2_SetConfig+0x68>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a21      	ldr	r2, [pc, #132]	; (800abcc <TIM_OC2_SetConfig+0xe8>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d10d      	bne.n	800ab68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	011b      	lsls	r3, r3, #4
 800ab5a:	697a      	ldr	r2, [r7, #20]
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	4a17      	ldr	r2, [pc, #92]	; (800abc8 <TIM_OC2_SetConfig+0xe4>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d003      	beq.n	800ab78 <TIM_OC2_SetConfig+0x94>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a16      	ldr	r2, [pc, #88]	; (800abcc <TIM_OC2_SetConfig+0xe8>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d113      	bne.n	800aba0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	695b      	ldr	r3, [r3, #20]
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	693a      	ldr	r2, [r7, #16]
 800ab90:	4313      	orrs	r3, r2
 800ab92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	699b      	ldr	r3, [r3, #24]
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	693a      	ldr	r2, [r7, #16]
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	693a      	ldr	r2, [r7, #16]
 800aba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	685a      	ldr	r2, [r3, #4]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	697a      	ldr	r2, [r7, #20]
 800abb8:	621a      	str	r2, [r3, #32]
}
 800abba:	bf00      	nop
 800abbc:	371c      	adds	r7, #28
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop
 800abc8:	40010000 	.word	0x40010000
 800abcc:	40010400 	.word	0x40010400

0800abd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b087      	sub	sp, #28
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6a1b      	ldr	r3, [r3, #32]
 800abde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6a1b      	ldr	r3, [r3, #32]
 800abea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	69db      	ldr	r3, [r3, #28]
 800abf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f023 0303 	bic.w	r3, r3, #3
 800ac06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	689b      	ldr	r3, [r3, #8]
 800ac1e:	021b      	lsls	r3, r3, #8
 800ac20:	697a      	ldr	r2, [r7, #20]
 800ac22:	4313      	orrs	r3, r2
 800ac24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	4a21      	ldr	r2, [pc, #132]	; (800acb0 <TIM_OC3_SetConfig+0xe0>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d003      	beq.n	800ac36 <TIM_OC3_SetConfig+0x66>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	4a20      	ldr	r2, [pc, #128]	; (800acb4 <TIM_OC3_SetConfig+0xe4>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d10d      	bne.n	800ac52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	021b      	lsls	r3, r3, #8
 800ac44:	697a      	ldr	r2, [r7, #20]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ac50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	4a16      	ldr	r2, [pc, #88]	; (800acb0 <TIM_OC3_SetConfig+0xe0>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d003      	beq.n	800ac62 <TIM_OC3_SetConfig+0x92>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	4a15      	ldr	r2, [pc, #84]	; (800acb4 <TIM_OC3_SetConfig+0xe4>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d113      	bne.n	800ac8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	695b      	ldr	r3, [r3, #20]
 800ac76:	011b      	lsls	r3, r3, #4
 800ac78:	693a      	ldr	r2, [r7, #16]
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	699b      	ldr	r3, [r3, #24]
 800ac82:	011b      	lsls	r3, r3, #4
 800ac84:	693a      	ldr	r2, [r7, #16]
 800ac86:	4313      	orrs	r3, r2
 800ac88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	693a      	ldr	r2, [r7, #16]
 800ac8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	685a      	ldr	r2, [r3, #4]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	697a      	ldr	r2, [r7, #20]
 800aca2:	621a      	str	r2, [r3, #32]
}
 800aca4:	bf00      	nop
 800aca6:	371c      	adds	r7, #28
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr
 800acb0:	40010000 	.word	0x40010000
 800acb4:	40010400 	.word	0x40010400

0800acb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800acb8:	b480      	push	{r7}
 800acba:	b087      	sub	sp, #28
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6a1b      	ldr	r3, [r3, #32]
 800acc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6a1b      	ldr	r3, [r3, #32]
 800acd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	69db      	ldr	r3, [r3, #28]
 800acde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ace6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	021b      	lsls	r3, r3, #8
 800acf6:	68fa      	ldr	r2, [r7, #12]
 800acf8:	4313      	orrs	r3, r2
 800acfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ad02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	689b      	ldr	r3, [r3, #8]
 800ad08:	031b      	lsls	r3, r3, #12
 800ad0a:	693a      	ldr	r2, [r7, #16]
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	4a12      	ldr	r2, [pc, #72]	; (800ad5c <TIM_OC4_SetConfig+0xa4>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d003      	beq.n	800ad20 <TIM_OC4_SetConfig+0x68>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	4a11      	ldr	r2, [pc, #68]	; (800ad60 <TIM_OC4_SetConfig+0xa8>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d109      	bne.n	800ad34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	695b      	ldr	r3, [r3, #20]
 800ad2c:	019b      	lsls	r3, r3, #6
 800ad2e:	697a      	ldr	r2, [r7, #20]
 800ad30:	4313      	orrs	r3, r2
 800ad32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	697a      	ldr	r2, [r7, #20]
 800ad38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	685a      	ldr	r2, [r3, #4]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	693a      	ldr	r2, [r7, #16]
 800ad4c:	621a      	str	r2, [r3, #32]
}
 800ad4e:	bf00      	nop
 800ad50:	371c      	adds	r7, #28
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr
 800ad5a:	bf00      	nop
 800ad5c:	40010000 	.word	0x40010000
 800ad60:	40010400 	.word	0x40010400

0800ad64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b087      	sub	sp, #28
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	60b9      	str	r1, [r7, #8]
 800ad6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6a1b      	ldr	r3, [r3, #32]
 800ad74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	6a1b      	ldr	r3, [r3, #32]
 800ad7a:	f023 0201 	bic.w	r2, r3, #1
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	699b      	ldr	r3, [r3, #24]
 800ad86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	011b      	lsls	r3, r3, #4
 800ad94:	693a      	ldr	r2, [r7, #16]
 800ad96:	4313      	orrs	r3, r2
 800ad98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	f023 030a 	bic.w	r3, r3, #10
 800ada0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ada2:	697a      	ldr	r2, [r7, #20]
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	4313      	orrs	r3, r2
 800ada8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	693a      	ldr	r2, [r7, #16]
 800adae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	697a      	ldr	r2, [r7, #20]
 800adb4:	621a      	str	r2, [r3, #32]
}
 800adb6:	bf00      	nop
 800adb8:	371c      	adds	r7, #28
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr

0800adc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adc2:	b480      	push	{r7}
 800adc4:	b087      	sub	sp, #28
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	60f8      	str	r0, [r7, #12]
 800adca:	60b9      	str	r1, [r7, #8]
 800adcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	6a1b      	ldr	r3, [r3, #32]
 800add2:	f023 0210 	bic.w	r2, r3, #16
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	699b      	ldr	r3, [r3, #24]
 800adde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	6a1b      	ldr	r3, [r3, #32]
 800ade4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800adec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	031b      	lsls	r3, r3, #12
 800adf2:	697a      	ldr	r2, [r7, #20]
 800adf4:	4313      	orrs	r3, r2
 800adf6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800adfe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	011b      	lsls	r3, r3, #4
 800ae04:	693a      	ldr	r2, [r7, #16]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	697a      	ldr	r2, [r7, #20]
 800ae0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	693a      	ldr	r2, [r7, #16]
 800ae14:	621a      	str	r2, [r3, #32]
}
 800ae16:	bf00      	nop
 800ae18:	371c      	adds	r7, #28
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr

0800ae22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae22:	b480      	push	{r7}
 800ae24:	b085      	sub	sp, #20
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
 800ae2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	689b      	ldr	r3, [r3, #8]
 800ae30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae3a:	683a      	ldr	r2, [r7, #0]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	f043 0307 	orr.w	r3, r3, #7
 800ae44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	609a      	str	r2, [r3, #8]
}
 800ae4c:	bf00      	nop
 800ae4e:	3714      	adds	r7, #20
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b087      	sub	sp, #28
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	60b9      	str	r1, [r7, #8]
 800ae62:	607a      	str	r2, [r7, #4]
 800ae64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	689b      	ldr	r3, [r3, #8]
 800ae6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	021a      	lsls	r2, r3, #8
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	431a      	orrs	r2, r3
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	697a      	ldr	r2, [r7, #20]
 800ae82:	4313      	orrs	r3, r2
 800ae84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	697a      	ldr	r2, [r7, #20]
 800ae8a:	609a      	str	r2, [r3, #8]
}
 800ae8c:	bf00      	nop
 800ae8e:	371c      	adds	r7, #28
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b087      	sub	sp, #28
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	f003 031f 	and.w	r3, r3, #31
 800aeaa:	2201      	movs	r2, #1
 800aeac:	fa02 f303 	lsl.w	r3, r2, r3
 800aeb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	6a1a      	ldr	r2, [r3, #32]
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	43db      	mvns	r3, r3
 800aeba:	401a      	ands	r2, r3
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6a1a      	ldr	r2, [r3, #32]
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	f003 031f 	and.w	r3, r3, #31
 800aeca:	6879      	ldr	r1, [r7, #4]
 800aecc:	fa01 f303 	lsl.w	r3, r1, r3
 800aed0:	431a      	orrs	r2, r3
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	621a      	str	r2, [r3, #32]
}
 800aed6:	bf00      	nop
 800aed8:	371c      	adds	r7, #28
 800aeda:	46bd      	mov	sp, r7
 800aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee0:	4770      	bx	lr
	...

0800aee4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b085      	sub	sp, #20
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d101      	bne.n	800aefc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aef8:	2302      	movs	r3, #2
 800aefa:	e05a      	b.n	800afb2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2201      	movs	r2, #1
 800af00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2202      	movs	r2, #2
 800af08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	4313      	orrs	r3, r2
 800af2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	68fa      	ldr	r2, [r7, #12]
 800af34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a21      	ldr	r2, [pc, #132]	; (800afc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d022      	beq.n	800af86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af48:	d01d      	beq.n	800af86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4a1d      	ldr	r2, [pc, #116]	; (800afc4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d018      	beq.n	800af86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a1b      	ldr	r2, [pc, #108]	; (800afc8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d013      	beq.n	800af86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4a1a      	ldr	r2, [pc, #104]	; (800afcc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d00e      	beq.n	800af86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a18      	ldr	r2, [pc, #96]	; (800afd0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d009      	beq.n	800af86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4a17      	ldr	r2, [pc, #92]	; (800afd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d004      	beq.n	800af86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a15      	ldr	r2, [pc, #84]	; (800afd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d10c      	bne.n	800afa0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	68ba      	ldr	r2, [r7, #8]
 800af94:	4313      	orrs	r3, r2
 800af96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	68ba      	ldr	r2, [r7, #8]
 800af9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2201      	movs	r2, #1
 800afa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2200      	movs	r2, #0
 800afac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800afb0:	2300      	movs	r3, #0
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3714      	adds	r7, #20
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr
 800afbe:	bf00      	nop
 800afc0:	40010000 	.word	0x40010000
 800afc4:	40000400 	.word	0x40000400
 800afc8:	40000800 	.word	0x40000800
 800afcc:	40000c00 	.word	0x40000c00
 800afd0:	40010400 	.word	0x40010400
 800afd4:	40014000 	.word	0x40014000
 800afd8:	40001800 	.word	0x40001800

0800afdc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800afdc:	b480      	push	{r7}
 800afde:	b085      	sub	sp, #20
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800afe6:	2300      	movs	r3, #0
 800afe8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d101      	bne.n	800aff8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aff4:	2302      	movs	r3, #2
 800aff6:	e03d      	b.n	800b074 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2201      	movs	r2, #1
 800affc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	68db      	ldr	r3, [r3, #12]
 800b00a:	4313      	orrs	r3, r2
 800b00c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	4313      	orrs	r3, r2
 800b01a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	4313      	orrs	r3, r2
 800b028:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4313      	orrs	r3, r2
 800b036:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	691b      	ldr	r3, [r3, #16]
 800b042:	4313      	orrs	r3, r2
 800b044:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	695b      	ldr	r3, [r3, #20]
 800b050:	4313      	orrs	r3, r2
 800b052:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	69db      	ldr	r3, [r3, #28]
 800b05e:	4313      	orrs	r3, r2
 800b060:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	68fa      	ldr	r2, [r7, #12]
 800b068:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b072:	2300      	movs	r3, #0
}
 800b074:	4618      	mov	r0, r3
 800b076:	3714      	adds	r7, #20
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr

0800b080 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b080:	b480      	push	{r7}
 800b082:	b083      	sub	sp, #12
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b088:	bf00      	nop
 800b08a:	370c      	adds	r7, #12
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr

0800b094 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b09c:	bf00      	nop
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d101      	bne.n	800b0ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e03f      	b.n	800b13a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d106      	bne.n	800b0d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f7fb fbc0 	bl	8006854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2224      	movs	r2, #36	; 0x24
 800b0d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	68da      	ldr	r2, [r3, #12]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b0ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 fc7b 	bl	800b9e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	691a      	ldr	r2, [r3, #16]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b100:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	695a      	ldr	r2, [r3, #20]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b110:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	68da      	ldr	r2, [r3, #12]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b120:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2200      	movs	r2, #0
 800b126:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2220      	movs	r2, #32
 800b12c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2220      	movs	r2, #32
 800b134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b138:	2300      	movs	r3, #0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3708      	adds	r7, #8
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}

0800b142 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b142:	b580      	push	{r7, lr}
 800b144:	b08a      	sub	sp, #40	; 0x28
 800b146:	af02      	add	r7, sp, #8
 800b148:	60f8      	str	r0, [r7, #12]
 800b14a:	60b9      	str	r1, [r7, #8]
 800b14c:	603b      	str	r3, [r7, #0]
 800b14e:	4613      	mov	r3, r2
 800b150:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b152:	2300      	movs	r3, #0
 800b154:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b15c:	b2db      	uxtb	r3, r3
 800b15e:	2b20      	cmp	r3, #32
 800b160:	d17c      	bne.n	800b25c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d002      	beq.n	800b16e <HAL_UART_Transmit+0x2c>
 800b168:	88fb      	ldrh	r3, [r7, #6]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d101      	bne.n	800b172 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b16e:	2301      	movs	r3, #1
 800b170:	e075      	b.n	800b25e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d101      	bne.n	800b180 <HAL_UART_Transmit+0x3e>
 800b17c:	2302      	movs	r3, #2
 800b17e:	e06e      	b.n	800b25e <HAL_UART_Transmit+0x11c>
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2201      	movs	r2, #1
 800b184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2200      	movs	r2, #0
 800b18c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2221      	movs	r2, #33	; 0x21
 800b192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b196:	f7fc f845 	bl	8007224 <HAL_GetTick>
 800b19a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	88fa      	ldrh	r2, [r7, #6]
 800b1a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	88fa      	ldrh	r2, [r7, #6]
 800b1a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	689b      	ldr	r3, [r3, #8]
 800b1ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1b0:	d108      	bne.n	800b1c4 <HAL_UART_Transmit+0x82>
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	691b      	ldr	r3, [r3, #16]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d104      	bne.n	800b1c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	61bb      	str	r3, [r7, #24]
 800b1c2:	e003      	b.n	800b1cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b1d4:	e02a      	b.n	800b22c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	9300      	str	r3, [sp, #0]
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	2180      	movs	r1, #128	; 0x80
 800b1e0:	68f8      	ldr	r0, [r7, #12]
 800b1e2:	f000 fa3d 	bl	800b660 <UART_WaitOnFlagUntilTimeout>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d001      	beq.n	800b1f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b1ec:	2303      	movs	r3, #3
 800b1ee:	e036      	b.n	800b25e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d10b      	bne.n	800b20e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b1f6:	69bb      	ldr	r3, [r7, #24]
 800b1f8:	881b      	ldrh	r3, [r3, #0]
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b204:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	3302      	adds	r3, #2
 800b20a:	61bb      	str	r3, [r7, #24]
 800b20c:	e007      	b.n	800b21e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	781a      	ldrb	r2, [r3, #0]
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b218:	69fb      	ldr	r3, [r7, #28]
 800b21a:	3301      	adds	r3, #1
 800b21c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b222:	b29b      	uxth	r3, r3
 800b224:	3b01      	subs	r3, #1
 800b226:	b29a      	uxth	r2, r3
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b230:	b29b      	uxth	r3, r3
 800b232:	2b00      	cmp	r3, #0
 800b234:	d1cf      	bne.n	800b1d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	9300      	str	r3, [sp, #0]
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	2200      	movs	r2, #0
 800b23e:	2140      	movs	r1, #64	; 0x40
 800b240:	68f8      	ldr	r0, [r7, #12]
 800b242:	f000 fa0d 	bl	800b660 <UART_WaitOnFlagUntilTimeout>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d001      	beq.n	800b250 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b24c:	2303      	movs	r3, #3
 800b24e:	e006      	b.n	800b25e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2220      	movs	r2, #32
 800b254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b258:	2300      	movs	r3, #0
 800b25a:	e000      	b.n	800b25e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b25c:	2302      	movs	r3, #2
  }
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3720      	adds	r7, #32
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b084      	sub	sp, #16
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	60f8      	str	r0, [r7, #12]
 800b26e:	60b9      	str	r1, [r7, #8]
 800b270:	4613      	mov	r3, r2
 800b272:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b27a:	b2db      	uxtb	r3, r3
 800b27c:	2b20      	cmp	r3, #32
 800b27e:	d11d      	bne.n	800b2bc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d002      	beq.n	800b28c <HAL_UART_Receive_IT+0x26>
 800b286:	88fb      	ldrh	r3, [r7, #6]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d101      	bne.n	800b290 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b28c:	2301      	movs	r3, #1
 800b28e:	e016      	b.n	800b2be <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b296:	2b01      	cmp	r3, #1
 800b298:	d101      	bne.n	800b29e <HAL_UART_Receive_IT+0x38>
 800b29a:	2302      	movs	r3, #2
 800b29c:	e00f      	b.n	800b2be <HAL_UART_Receive_IT+0x58>
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800b2ac:	88fb      	ldrh	r3, [r7, #6]
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	68b9      	ldr	r1, [r7, #8]
 800b2b2:	68f8      	ldr	r0, [r7, #12]
 800b2b4:	f000 fa1e 	bl	800b6f4 <UART_Start_Receive_IT>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	e000      	b.n	800b2be <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b2bc:	2302      	movs	r3, #2
  }
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
	...

0800b2c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b08a      	sub	sp, #40	; 0x28
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	68db      	ldr	r3, [r3, #12]
 800b2de:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	695b      	ldr	r3, [r3, #20]
 800b2e6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f2:	f003 030f 	and.w	r3, r3, #15
 800b2f6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800b2f8:	69bb      	ldr	r3, [r7, #24]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d10d      	bne.n	800b31a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b300:	f003 0320 	and.w	r3, r3, #32
 800b304:	2b00      	cmp	r3, #0
 800b306:	d008      	beq.n	800b31a <HAL_UART_IRQHandler+0x52>
 800b308:	6a3b      	ldr	r3, [r7, #32]
 800b30a:	f003 0320 	and.w	r3, r3, #32
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d003      	beq.n	800b31a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 fad1 	bl	800b8ba <UART_Receive_IT>
      return;
 800b318:	e17c      	b.n	800b614 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f000 80b1 	beq.w	800b484 <HAL_UART_IRQHandler+0x1bc>
 800b322:	69fb      	ldr	r3, [r7, #28]
 800b324:	f003 0301 	and.w	r3, r3, #1
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d105      	bne.n	800b338 <HAL_UART_IRQHandler+0x70>
 800b32c:	6a3b      	ldr	r3, [r7, #32]
 800b32e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b332:	2b00      	cmp	r3, #0
 800b334:	f000 80a6 	beq.w	800b484 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33a:	f003 0301 	and.w	r3, r3, #1
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d00a      	beq.n	800b358 <HAL_UART_IRQHandler+0x90>
 800b342:	6a3b      	ldr	r3, [r7, #32]
 800b344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d005      	beq.n	800b358 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b350:	f043 0201 	orr.w	r2, r3, #1
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b35a:	f003 0304 	and.w	r3, r3, #4
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d00a      	beq.n	800b378 <HAL_UART_IRQHandler+0xb0>
 800b362:	69fb      	ldr	r3, [r7, #28]
 800b364:	f003 0301 	and.w	r3, r3, #1
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d005      	beq.n	800b378 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b370:	f043 0202 	orr.w	r2, r3, #2
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37a:	f003 0302 	and.w	r3, r3, #2
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d00a      	beq.n	800b398 <HAL_UART_IRQHandler+0xd0>
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	f003 0301 	and.w	r3, r3, #1
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d005      	beq.n	800b398 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b390:	f043 0204 	orr.w	r2, r3, #4
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800b398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39a:	f003 0308 	and.w	r3, r3, #8
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d00f      	beq.n	800b3c2 <HAL_UART_IRQHandler+0xfa>
 800b3a2:	6a3b      	ldr	r3, [r7, #32]
 800b3a4:	f003 0320 	and.w	r3, r3, #32
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d104      	bne.n	800b3b6 <HAL_UART_IRQHandler+0xee>
 800b3ac:	69fb      	ldr	r3, [r7, #28]
 800b3ae:	f003 0301 	and.w	r3, r3, #1
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d005      	beq.n	800b3c2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ba:	f043 0208 	orr.w	r2, r3, #8
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	f000 811f 	beq.w	800b60a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ce:	f003 0320 	and.w	r3, r3, #32
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d007      	beq.n	800b3e6 <HAL_UART_IRQHandler+0x11e>
 800b3d6:	6a3b      	ldr	r3, [r7, #32]
 800b3d8:	f003 0320 	and.w	r3, r3, #32
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d002      	beq.n	800b3e6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 fa6a 	bl	800b8ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	695b      	ldr	r3, [r3, #20]
 800b3ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3f0:	2b40      	cmp	r3, #64	; 0x40
 800b3f2:	bf0c      	ite	eq
 800b3f4:	2301      	moveq	r3, #1
 800b3f6:	2300      	movne	r3, #0
 800b3f8:	b2db      	uxtb	r3, r3
 800b3fa:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b400:	f003 0308 	and.w	r3, r3, #8
 800b404:	2b00      	cmp	r3, #0
 800b406:	d102      	bne.n	800b40e <HAL_UART_IRQHandler+0x146>
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d031      	beq.n	800b472 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 f9aa 	bl	800b768 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	695b      	ldr	r3, [r3, #20]
 800b41a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b41e:	2b40      	cmp	r3, #64	; 0x40
 800b420:	d123      	bne.n	800b46a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	695a      	ldr	r2, [r3, #20]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b430:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b436:	2b00      	cmp	r3, #0
 800b438:	d013      	beq.n	800b462 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b43e:	4a77      	ldr	r2, [pc, #476]	; (800b61c <HAL_UART_IRQHandler+0x354>)
 800b440:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b446:	4618      	mov	r0, r3
 800b448:	f7fd fb05 	bl	8008a56 <HAL_DMA_Abort_IT>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d016      	beq.n	800b480 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b45c:	4610      	mov	r0, r2
 800b45e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b460:	e00e      	b.n	800b480 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 f8e6 	bl	800b634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b468:	e00a      	b.n	800b480 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 f8e2 	bl	800b634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b470:	e006      	b.n	800b480 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 f8de 	bl	800b634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b47e:	e0c4      	b.n	800b60a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b480:	bf00      	nop
    return;
 800b482:	e0c2      	b.n	800b60a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b488:	2b01      	cmp	r3, #1
 800b48a:	f040 80a2 	bne.w	800b5d2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800b48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b490:	f003 0310 	and.w	r3, r3, #16
 800b494:	2b00      	cmp	r3, #0
 800b496:	f000 809c 	beq.w	800b5d2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800b49a:	6a3b      	ldr	r3, [r7, #32]
 800b49c:	f003 0310 	and.w	r3, r3, #16
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	f000 8096 	beq.w	800b5d2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	60fb      	str	r3, [r7, #12]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	60fb      	str	r3, [r7, #12]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	60fb      	str	r3, [r7, #12]
 800b4ba:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	695b      	ldr	r3, [r3, #20]
 800b4c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4c6:	2b40      	cmp	r3, #64	; 0x40
 800b4c8:	d14f      	bne.n	800b56a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800b4d4:	8a3b      	ldrh	r3, [r7, #16]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	f000 8099 	beq.w	800b60e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b4e0:	8a3a      	ldrh	r2, [r7, #16]
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	f080 8093 	bcs.w	800b60e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	8a3a      	ldrh	r2, [r7, #16]
 800b4ec:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f2:	69db      	ldr	r3, [r3, #28]
 800b4f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4f8:	d02b      	beq.n	800b552 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	68da      	ldr	r2, [r3, #12]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b508:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	695a      	ldr	r2, [r3, #20]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f022 0201 	bic.w	r2, r2, #1
 800b518:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	695a      	ldr	r2, [r3, #20]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b528:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2220      	movs	r2, #32
 800b52e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2200      	movs	r2, #0
 800b536:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	68da      	ldr	r2, [r3, #12]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f022 0210 	bic.w	r2, r2, #16
 800b546:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b54c:	4618      	mov	r0, r3
 800b54e:	f7fd fa12 	bl	8008976 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	1ad3      	subs	r3, r2, r3
 800b55e:	b29b      	uxth	r3, r3
 800b560:	4619      	mov	r1, r3
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 f870 	bl	800b648 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b568:	e051      	b.n	800b60e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b572:	b29b      	uxth	r3, r3
 800b574:	1ad3      	subs	r3, r2, r3
 800b576:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b57c:	b29b      	uxth	r3, r3
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d047      	beq.n	800b612 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800b582:	8a7b      	ldrh	r3, [r7, #18]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d044      	beq.n	800b612 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	68da      	ldr	r2, [r3, #12]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b596:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	695a      	ldr	r2, [r3, #20]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f022 0201 	bic.w	r2, r2, #1
 800b5a6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2220      	movs	r2, #32
 800b5ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	68da      	ldr	r2, [r3, #12]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f022 0210 	bic.w	r2, r2, #16
 800b5c4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b5c6:	8a7b      	ldrh	r3, [r7, #18]
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 f83c 	bl	800b648 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b5d0:	e01f      	b.n	800b612 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d008      	beq.n	800b5ee <HAL_UART_IRQHandler+0x326>
 800b5dc:	6a3b      	ldr	r3, [r7, #32]
 800b5de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d003      	beq.n	800b5ee <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 f8ff 	bl	800b7ea <UART_Transmit_IT>
    return;
 800b5ec:	e012      	b.n	800b614 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d00d      	beq.n	800b614 <HAL_UART_IRQHandler+0x34c>
 800b5f8:	6a3b      	ldr	r3, [r7, #32]
 800b5fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d008      	beq.n	800b614 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 f941 	bl	800b88a <UART_EndTransmit_IT>
    return;
 800b608:	e004      	b.n	800b614 <HAL_UART_IRQHandler+0x34c>
    return;
 800b60a:	bf00      	nop
 800b60c:	e002      	b.n	800b614 <HAL_UART_IRQHandler+0x34c>
      return;
 800b60e:	bf00      	nop
 800b610:	e000      	b.n	800b614 <HAL_UART_IRQHandler+0x34c>
      return;
 800b612:	bf00      	nop
  }
}
 800b614:	3728      	adds	r7, #40	; 0x28
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	0800b7c3 	.word	0x0800b7c3

0800b620 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b620:	b480      	push	{r7}
 800b622:	b083      	sub	sp, #12
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b628:	bf00      	nop
 800b62a:	370c      	adds	r7, #12
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr

0800b634 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b634:	b480      	push	{r7}
 800b636:	b083      	sub	sp, #12
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b63c:	bf00      	nop
 800b63e:	370c      	adds	r7, #12
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr

0800b648 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	460b      	mov	r3, r1
 800b652:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b654:	bf00      	nop
 800b656:	370c      	adds	r7, #12
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr

0800b660 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	60b9      	str	r1, [r7, #8]
 800b66a:	603b      	str	r3, [r7, #0]
 800b66c:	4613      	mov	r3, r2
 800b66e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b670:	e02c      	b.n	800b6cc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b672:	69bb      	ldr	r3, [r7, #24]
 800b674:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b678:	d028      	beq.n	800b6cc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d007      	beq.n	800b690 <UART_WaitOnFlagUntilTimeout+0x30>
 800b680:	f7fb fdd0 	bl	8007224 <HAL_GetTick>
 800b684:	4602      	mov	r2, r0
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	1ad3      	subs	r3, r2, r3
 800b68a:	69ba      	ldr	r2, [r7, #24]
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d21d      	bcs.n	800b6cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	68da      	ldr	r2, [r3, #12]
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b69e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	695a      	ldr	r2, [r3, #20]
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f022 0201 	bic.w	r2, r2, #1
 800b6ae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2220      	movs	r2, #32
 800b6b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2220      	movs	r2, #32
 800b6bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b6c8:	2303      	movs	r3, #3
 800b6ca:	e00f      	b.n	800b6ec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	4013      	ands	r3, r2
 800b6d6:	68ba      	ldr	r2, [r7, #8]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	bf0c      	ite	eq
 800b6dc:	2301      	moveq	r3, #1
 800b6de:	2300      	movne	r3, #0
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	79fb      	ldrb	r3, [r7, #7]
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d0c3      	beq.n	800b672 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b6ea:	2300      	movs	r3, #0
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3710      	adds	r7, #16
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b085      	sub	sp, #20
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	4613      	mov	r3, r2
 800b700:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	68ba      	ldr	r2, [r7, #8]
 800b706:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	88fa      	ldrh	r2, [r7, #6]
 800b70c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	88fa      	ldrh	r2, [r7, #6]
 800b712:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2200      	movs	r2, #0
 800b718:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2222      	movs	r2, #34	; 0x22
 800b71e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2200      	movs	r2, #0
 800b726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	68da      	ldr	r2, [r3, #12]
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b738:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	695a      	ldr	r2, [r3, #20]
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f042 0201 	orr.w	r2, r2, #1
 800b748:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	68da      	ldr	r2, [r3, #12]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f042 0220 	orr.w	r2, r2, #32
 800b758:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b75a:	2300      	movs	r3, #0
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3714      	adds	r7, #20
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr

0800b768 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b768:	b480      	push	{r7}
 800b76a:	b083      	sub	sp, #12
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	68da      	ldr	r2, [r3, #12]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b77e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	695a      	ldr	r2, [r3, #20]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f022 0201 	bic.w	r2, r2, #1
 800b78e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b794:	2b01      	cmp	r3, #1
 800b796:	d107      	bne.n	800b7a8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	68da      	ldr	r2, [r3, #12]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f022 0210 	bic.w	r2, r2, #16
 800b7a6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2220      	movs	r2, #32
 800b7ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b7b6:	bf00      	nop
 800b7b8:	370c      	adds	r7, #12
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr

0800b7c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b084      	sub	sp, #16
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7dc:	68f8      	ldr	r0, [r7, #12]
 800b7de:	f7ff ff29 	bl	800b634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7e2:	bf00      	nop
 800b7e4:	3710      	adds	r7, #16
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b7ea:	b480      	push	{r7}
 800b7ec:	b085      	sub	sp, #20
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7f8:	b2db      	uxtb	r3, r3
 800b7fa:	2b21      	cmp	r3, #33	; 0x21
 800b7fc:	d13e      	bne.n	800b87c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	689b      	ldr	r3, [r3, #8]
 800b802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b806:	d114      	bne.n	800b832 <UART_Transmit_IT+0x48>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	691b      	ldr	r3, [r3, #16]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d110      	bne.n	800b832 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6a1b      	ldr	r3, [r3, #32]
 800b814:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	881b      	ldrh	r3, [r3, #0]
 800b81a:	461a      	mov	r2, r3
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b824:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6a1b      	ldr	r3, [r3, #32]
 800b82a:	1c9a      	adds	r2, r3, #2
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	621a      	str	r2, [r3, #32]
 800b830:	e008      	b.n	800b844 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6a1b      	ldr	r3, [r3, #32]
 800b836:	1c59      	adds	r1, r3, #1
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	6211      	str	r1, [r2, #32]
 800b83c:	781a      	ldrb	r2, [r3, #0]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b848:	b29b      	uxth	r3, r3
 800b84a:	3b01      	subs	r3, #1
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	4619      	mov	r1, r3
 800b852:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b854:	2b00      	cmp	r3, #0
 800b856:	d10f      	bne.n	800b878 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	68da      	ldr	r2, [r3, #12]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b866:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	68da      	ldr	r2, [r3, #12]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b876:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b878:	2300      	movs	r3, #0
 800b87a:	e000      	b.n	800b87e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b87c:	2302      	movs	r3, #2
  }
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3714      	adds	r7, #20
 800b882:	46bd      	mov	sp, r7
 800b884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b888:	4770      	bx	lr

0800b88a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b88a:	b580      	push	{r7, lr}
 800b88c:	b082      	sub	sp, #8
 800b88e:	af00      	add	r7, sp, #0
 800b890:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	68da      	ldr	r2, [r3, #12]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b8a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2220      	movs	r2, #32
 800b8a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f7ff feb8 	bl	800b620 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b8b0:	2300      	movs	r3, #0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3708      	adds	r7, #8
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}

0800b8ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b8ba:	b580      	push	{r7, lr}
 800b8bc:	b084      	sub	sp, #16
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b8c8:	b2db      	uxtb	r3, r3
 800b8ca:	2b22      	cmp	r3, #34	; 0x22
 800b8cc:	f040 8087 	bne.w	800b9de <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	689b      	ldr	r3, [r3, #8]
 800b8d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8d8:	d117      	bne.n	800b90a <UART_Receive_IT+0x50>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	691b      	ldr	r3, [r3, #16]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d113      	bne.n	800b90a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ea:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8f8:	b29a      	uxth	r2, r3
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b902:	1c9a      	adds	r2, r3, #2
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	629a      	str	r2, [r3, #40]	; 0x28
 800b908:	e026      	b.n	800b958 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b90e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800b910:	2300      	movs	r3, #0
 800b912:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	689b      	ldr	r3, [r3, #8]
 800b918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b91c:	d007      	beq.n	800b92e <UART_Receive_IT+0x74>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d10a      	bne.n	800b93c <UART_Receive_IT+0x82>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	691b      	ldr	r3, [r3, #16]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d106      	bne.n	800b93c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	b2da      	uxtb	r2, r3
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	701a      	strb	r2, [r3, #0]
 800b93a:	e008      	b.n	800b94e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	b2db      	uxtb	r3, r3
 800b944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b948:	b2da      	uxtb	r2, r3
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b952:	1c5a      	adds	r2, r3, #1
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	3b01      	subs	r3, #1
 800b960:	b29b      	uxth	r3, r3
 800b962:	687a      	ldr	r2, [r7, #4]
 800b964:	4619      	mov	r1, r3
 800b966:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d136      	bne.n	800b9da <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	68da      	ldr	r2, [r3, #12]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f022 0220 	bic.w	r2, r2, #32
 800b97a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	68da      	ldr	r2, [r3, #12]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b98a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	695a      	ldr	r2, [r3, #20]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f022 0201 	bic.w	r2, r2, #1
 800b99a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2220      	movs	r2, #32
 800b9a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	d10e      	bne.n	800b9ca <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	68da      	ldr	r2, [r3, #12]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f022 0210 	bic.w	r2, r2, #16
 800b9ba:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f7ff fe40 	bl	800b648 <HAL_UARTEx_RxEventCallback>
 800b9c8:	e002      	b.n	800b9d0 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f7fa ffa4 	bl	8006918 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	e002      	b.n	800b9e0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	e000      	b.n	800b9e0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800b9de:	2302      	movs	r3, #2
  }
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3710      	adds	r7, #16
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ec:	b09f      	sub	sp, #124	; 0x7c
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b9f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	691b      	ldr	r3, [r3, #16]
 800b9f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b9fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9fe:	68d9      	ldr	r1, [r3, #12]
 800ba00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba02:	681a      	ldr	r2, [r3, #0]
 800ba04:	ea40 0301 	orr.w	r3, r0, r1
 800ba08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ba0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba0c:	689a      	ldr	r2, [r3, #8]
 800ba0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba10:	691b      	ldr	r3, [r3, #16]
 800ba12:	431a      	orrs	r2, r3
 800ba14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba16:	695b      	ldr	r3, [r3, #20]
 800ba18:	431a      	orrs	r2, r3
 800ba1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba1c:	69db      	ldr	r3, [r3, #28]
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800ba22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	68db      	ldr	r3, [r3, #12]
 800ba28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ba2c:	f021 010c 	bic.w	r1, r1, #12
 800ba30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba36:	430b      	orrs	r3, r1
 800ba38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ba3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	695b      	ldr	r3, [r3, #20]
 800ba40:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ba44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba46:	6999      	ldr	r1, [r3, #24]
 800ba48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	ea40 0301 	orr.w	r3, r0, r1
 800ba50:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ba52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	4bc5      	ldr	r3, [pc, #788]	; (800bd6c <UART_SetConfig+0x384>)
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d004      	beq.n	800ba66 <UART_SetConfig+0x7e>
 800ba5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	4bc3      	ldr	r3, [pc, #780]	; (800bd70 <UART_SetConfig+0x388>)
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d103      	bne.n	800ba6e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ba66:	f7fd fb35 	bl	80090d4 <HAL_RCC_GetPCLK2Freq>
 800ba6a:	6778      	str	r0, [r7, #116]	; 0x74
 800ba6c:	e002      	b.n	800ba74 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ba6e:	f7fd fb1d 	bl	80090ac <HAL_RCC_GetPCLK1Freq>
 800ba72:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba76:	69db      	ldr	r3, [r3, #28]
 800ba78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba7c:	f040 80b6 	bne.w	800bbec <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ba80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba82:	461c      	mov	r4, r3
 800ba84:	f04f 0500 	mov.w	r5, #0
 800ba88:	4622      	mov	r2, r4
 800ba8a:	462b      	mov	r3, r5
 800ba8c:	1891      	adds	r1, r2, r2
 800ba8e:	6439      	str	r1, [r7, #64]	; 0x40
 800ba90:	415b      	adcs	r3, r3
 800ba92:	647b      	str	r3, [r7, #68]	; 0x44
 800ba94:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ba98:	1912      	adds	r2, r2, r4
 800ba9a:	eb45 0303 	adc.w	r3, r5, r3
 800ba9e:	f04f 0000 	mov.w	r0, #0
 800baa2:	f04f 0100 	mov.w	r1, #0
 800baa6:	00d9      	lsls	r1, r3, #3
 800baa8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800baac:	00d0      	lsls	r0, r2, #3
 800baae:	4602      	mov	r2, r0
 800bab0:	460b      	mov	r3, r1
 800bab2:	1911      	adds	r1, r2, r4
 800bab4:	6639      	str	r1, [r7, #96]	; 0x60
 800bab6:	416b      	adcs	r3, r5
 800bab8:	667b      	str	r3, [r7, #100]	; 0x64
 800baba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	461a      	mov	r2, r3
 800bac0:	f04f 0300 	mov.w	r3, #0
 800bac4:	1891      	adds	r1, r2, r2
 800bac6:	63b9      	str	r1, [r7, #56]	; 0x38
 800bac8:	415b      	adcs	r3, r3
 800baca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bacc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bad0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800bad4:	f7f5 f908 	bl	8000ce8 <__aeabi_uldivmod>
 800bad8:	4602      	mov	r2, r0
 800bada:	460b      	mov	r3, r1
 800badc:	4ba5      	ldr	r3, [pc, #660]	; (800bd74 <UART_SetConfig+0x38c>)
 800bade:	fba3 2302 	umull	r2, r3, r3, r2
 800bae2:	095b      	lsrs	r3, r3, #5
 800bae4:	011e      	lsls	r6, r3, #4
 800bae6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bae8:	461c      	mov	r4, r3
 800baea:	f04f 0500 	mov.w	r5, #0
 800baee:	4622      	mov	r2, r4
 800baf0:	462b      	mov	r3, r5
 800baf2:	1891      	adds	r1, r2, r2
 800baf4:	6339      	str	r1, [r7, #48]	; 0x30
 800baf6:	415b      	adcs	r3, r3
 800baf8:	637b      	str	r3, [r7, #52]	; 0x34
 800bafa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800bafe:	1912      	adds	r2, r2, r4
 800bb00:	eb45 0303 	adc.w	r3, r5, r3
 800bb04:	f04f 0000 	mov.w	r0, #0
 800bb08:	f04f 0100 	mov.w	r1, #0
 800bb0c:	00d9      	lsls	r1, r3, #3
 800bb0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bb12:	00d0      	lsls	r0, r2, #3
 800bb14:	4602      	mov	r2, r0
 800bb16:	460b      	mov	r3, r1
 800bb18:	1911      	adds	r1, r2, r4
 800bb1a:	65b9      	str	r1, [r7, #88]	; 0x58
 800bb1c:	416b      	adcs	r3, r5
 800bb1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	461a      	mov	r2, r3
 800bb26:	f04f 0300 	mov.w	r3, #0
 800bb2a:	1891      	adds	r1, r2, r2
 800bb2c:	62b9      	str	r1, [r7, #40]	; 0x28
 800bb2e:	415b      	adcs	r3, r3
 800bb30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bb36:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800bb3a:	f7f5 f8d5 	bl	8000ce8 <__aeabi_uldivmod>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	460b      	mov	r3, r1
 800bb42:	4b8c      	ldr	r3, [pc, #560]	; (800bd74 <UART_SetConfig+0x38c>)
 800bb44:	fba3 1302 	umull	r1, r3, r3, r2
 800bb48:	095b      	lsrs	r3, r3, #5
 800bb4a:	2164      	movs	r1, #100	; 0x64
 800bb4c:	fb01 f303 	mul.w	r3, r1, r3
 800bb50:	1ad3      	subs	r3, r2, r3
 800bb52:	00db      	lsls	r3, r3, #3
 800bb54:	3332      	adds	r3, #50	; 0x32
 800bb56:	4a87      	ldr	r2, [pc, #540]	; (800bd74 <UART_SetConfig+0x38c>)
 800bb58:	fba2 2303 	umull	r2, r3, r2, r3
 800bb5c:	095b      	lsrs	r3, r3, #5
 800bb5e:	005b      	lsls	r3, r3, #1
 800bb60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bb64:	441e      	add	r6, r3
 800bb66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f04f 0100 	mov.w	r1, #0
 800bb6e:	4602      	mov	r2, r0
 800bb70:	460b      	mov	r3, r1
 800bb72:	1894      	adds	r4, r2, r2
 800bb74:	623c      	str	r4, [r7, #32]
 800bb76:	415b      	adcs	r3, r3
 800bb78:	627b      	str	r3, [r7, #36]	; 0x24
 800bb7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bb7e:	1812      	adds	r2, r2, r0
 800bb80:	eb41 0303 	adc.w	r3, r1, r3
 800bb84:	f04f 0400 	mov.w	r4, #0
 800bb88:	f04f 0500 	mov.w	r5, #0
 800bb8c:	00dd      	lsls	r5, r3, #3
 800bb8e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bb92:	00d4      	lsls	r4, r2, #3
 800bb94:	4622      	mov	r2, r4
 800bb96:	462b      	mov	r3, r5
 800bb98:	1814      	adds	r4, r2, r0
 800bb9a:	653c      	str	r4, [r7, #80]	; 0x50
 800bb9c:	414b      	adcs	r3, r1
 800bb9e:	657b      	str	r3, [r7, #84]	; 0x54
 800bba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	461a      	mov	r2, r3
 800bba6:	f04f 0300 	mov.w	r3, #0
 800bbaa:	1891      	adds	r1, r2, r2
 800bbac:	61b9      	str	r1, [r7, #24]
 800bbae:	415b      	adcs	r3, r3
 800bbb0:	61fb      	str	r3, [r7, #28]
 800bbb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bbb6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800bbba:	f7f5 f895 	bl	8000ce8 <__aeabi_uldivmod>
 800bbbe:	4602      	mov	r2, r0
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	4b6c      	ldr	r3, [pc, #432]	; (800bd74 <UART_SetConfig+0x38c>)
 800bbc4:	fba3 1302 	umull	r1, r3, r3, r2
 800bbc8:	095b      	lsrs	r3, r3, #5
 800bbca:	2164      	movs	r1, #100	; 0x64
 800bbcc:	fb01 f303 	mul.w	r3, r1, r3
 800bbd0:	1ad3      	subs	r3, r2, r3
 800bbd2:	00db      	lsls	r3, r3, #3
 800bbd4:	3332      	adds	r3, #50	; 0x32
 800bbd6:	4a67      	ldr	r2, [pc, #412]	; (800bd74 <UART_SetConfig+0x38c>)
 800bbd8:	fba2 2303 	umull	r2, r3, r2, r3
 800bbdc:	095b      	lsrs	r3, r3, #5
 800bbde:	f003 0207 	and.w	r2, r3, #7
 800bbe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	4432      	add	r2, r6
 800bbe8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bbea:	e0b9      	b.n	800bd60 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bbec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbee:	461c      	mov	r4, r3
 800bbf0:	f04f 0500 	mov.w	r5, #0
 800bbf4:	4622      	mov	r2, r4
 800bbf6:	462b      	mov	r3, r5
 800bbf8:	1891      	adds	r1, r2, r2
 800bbfa:	6139      	str	r1, [r7, #16]
 800bbfc:	415b      	adcs	r3, r3
 800bbfe:	617b      	str	r3, [r7, #20]
 800bc00:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bc04:	1912      	adds	r2, r2, r4
 800bc06:	eb45 0303 	adc.w	r3, r5, r3
 800bc0a:	f04f 0000 	mov.w	r0, #0
 800bc0e:	f04f 0100 	mov.w	r1, #0
 800bc12:	00d9      	lsls	r1, r3, #3
 800bc14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bc18:	00d0      	lsls	r0, r2, #3
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	eb12 0804 	adds.w	r8, r2, r4
 800bc22:	eb43 0905 	adc.w	r9, r3, r5
 800bc26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f04f 0100 	mov.w	r1, #0
 800bc30:	f04f 0200 	mov.w	r2, #0
 800bc34:	f04f 0300 	mov.w	r3, #0
 800bc38:	008b      	lsls	r3, r1, #2
 800bc3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bc3e:	0082      	lsls	r2, r0, #2
 800bc40:	4640      	mov	r0, r8
 800bc42:	4649      	mov	r1, r9
 800bc44:	f7f5 f850 	bl	8000ce8 <__aeabi_uldivmod>
 800bc48:	4602      	mov	r2, r0
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	4b49      	ldr	r3, [pc, #292]	; (800bd74 <UART_SetConfig+0x38c>)
 800bc4e:	fba3 2302 	umull	r2, r3, r3, r2
 800bc52:	095b      	lsrs	r3, r3, #5
 800bc54:	011e      	lsls	r6, r3, #4
 800bc56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f04f 0100 	mov.w	r1, #0
 800bc5e:	4602      	mov	r2, r0
 800bc60:	460b      	mov	r3, r1
 800bc62:	1894      	adds	r4, r2, r2
 800bc64:	60bc      	str	r4, [r7, #8]
 800bc66:	415b      	adcs	r3, r3
 800bc68:	60fb      	str	r3, [r7, #12]
 800bc6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bc6e:	1812      	adds	r2, r2, r0
 800bc70:	eb41 0303 	adc.w	r3, r1, r3
 800bc74:	f04f 0400 	mov.w	r4, #0
 800bc78:	f04f 0500 	mov.w	r5, #0
 800bc7c:	00dd      	lsls	r5, r3, #3
 800bc7e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bc82:	00d4      	lsls	r4, r2, #3
 800bc84:	4622      	mov	r2, r4
 800bc86:	462b      	mov	r3, r5
 800bc88:	1814      	adds	r4, r2, r0
 800bc8a:	64bc      	str	r4, [r7, #72]	; 0x48
 800bc8c:	414b      	adcs	r3, r1
 800bc8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	4618      	mov	r0, r3
 800bc96:	f04f 0100 	mov.w	r1, #0
 800bc9a:	f04f 0200 	mov.w	r2, #0
 800bc9e:	f04f 0300 	mov.w	r3, #0
 800bca2:	008b      	lsls	r3, r1, #2
 800bca4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bca8:	0082      	lsls	r2, r0, #2
 800bcaa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800bcae:	f7f5 f81b 	bl	8000ce8 <__aeabi_uldivmod>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	4b2f      	ldr	r3, [pc, #188]	; (800bd74 <UART_SetConfig+0x38c>)
 800bcb8:	fba3 1302 	umull	r1, r3, r3, r2
 800bcbc:	095b      	lsrs	r3, r3, #5
 800bcbe:	2164      	movs	r1, #100	; 0x64
 800bcc0:	fb01 f303 	mul.w	r3, r1, r3
 800bcc4:	1ad3      	subs	r3, r2, r3
 800bcc6:	011b      	lsls	r3, r3, #4
 800bcc8:	3332      	adds	r3, #50	; 0x32
 800bcca:	4a2a      	ldr	r2, [pc, #168]	; (800bd74 <UART_SetConfig+0x38c>)
 800bccc:	fba2 2303 	umull	r2, r3, r2, r3
 800bcd0:	095b      	lsrs	r3, r3, #5
 800bcd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bcd6:	441e      	add	r6, r3
 800bcd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f04f 0100 	mov.w	r1, #0
 800bce0:	4602      	mov	r2, r0
 800bce2:	460b      	mov	r3, r1
 800bce4:	1894      	adds	r4, r2, r2
 800bce6:	603c      	str	r4, [r7, #0]
 800bce8:	415b      	adcs	r3, r3
 800bcea:	607b      	str	r3, [r7, #4]
 800bcec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcf0:	1812      	adds	r2, r2, r0
 800bcf2:	eb41 0303 	adc.w	r3, r1, r3
 800bcf6:	f04f 0400 	mov.w	r4, #0
 800bcfa:	f04f 0500 	mov.w	r5, #0
 800bcfe:	00dd      	lsls	r5, r3, #3
 800bd00:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bd04:	00d4      	lsls	r4, r2, #3
 800bd06:	4622      	mov	r2, r4
 800bd08:	462b      	mov	r3, r5
 800bd0a:	eb12 0a00 	adds.w	sl, r2, r0
 800bd0e:	eb43 0b01 	adc.w	fp, r3, r1
 800bd12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	4618      	mov	r0, r3
 800bd18:	f04f 0100 	mov.w	r1, #0
 800bd1c:	f04f 0200 	mov.w	r2, #0
 800bd20:	f04f 0300 	mov.w	r3, #0
 800bd24:	008b      	lsls	r3, r1, #2
 800bd26:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bd2a:	0082      	lsls	r2, r0, #2
 800bd2c:	4650      	mov	r0, sl
 800bd2e:	4659      	mov	r1, fp
 800bd30:	f7f4 ffda 	bl	8000ce8 <__aeabi_uldivmod>
 800bd34:	4602      	mov	r2, r0
 800bd36:	460b      	mov	r3, r1
 800bd38:	4b0e      	ldr	r3, [pc, #56]	; (800bd74 <UART_SetConfig+0x38c>)
 800bd3a:	fba3 1302 	umull	r1, r3, r3, r2
 800bd3e:	095b      	lsrs	r3, r3, #5
 800bd40:	2164      	movs	r1, #100	; 0x64
 800bd42:	fb01 f303 	mul.w	r3, r1, r3
 800bd46:	1ad3      	subs	r3, r2, r3
 800bd48:	011b      	lsls	r3, r3, #4
 800bd4a:	3332      	adds	r3, #50	; 0x32
 800bd4c:	4a09      	ldr	r2, [pc, #36]	; (800bd74 <UART_SetConfig+0x38c>)
 800bd4e:	fba2 2303 	umull	r2, r3, r2, r3
 800bd52:	095b      	lsrs	r3, r3, #5
 800bd54:	f003 020f 	and.w	r2, r3, #15
 800bd58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4432      	add	r2, r6
 800bd5e:	609a      	str	r2, [r3, #8]
}
 800bd60:	bf00      	nop
 800bd62:	377c      	adds	r7, #124	; 0x7c
 800bd64:	46bd      	mov	sp, r7
 800bd66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd6a:	bf00      	nop
 800bd6c:	40011000 	.word	0x40011000
 800bd70:	40011400 	.word	0x40011400
 800bd74:	51eb851f 	.word	0x51eb851f

0800bd78 <round>:
 800bd78:	ec51 0b10 	vmov	r0, r1, d0
 800bd7c:	b570      	push	{r4, r5, r6, lr}
 800bd7e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800bd82:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800bd86:	2c13      	cmp	r4, #19
 800bd88:	ee10 2a10 	vmov	r2, s0
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	dc19      	bgt.n	800bdc4 <round+0x4c>
 800bd90:	2c00      	cmp	r4, #0
 800bd92:	da09      	bge.n	800bda8 <round+0x30>
 800bd94:	3401      	adds	r4, #1
 800bd96:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800bd9a:	d103      	bne.n	800bda4 <round+0x2c>
 800bd9c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bda0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bda4:	2100      	movs	r1, #0
 800bda6:	e028      	b.n	800bdfa <round+0x82>
 800bda8:	4d15      	ldr	r5, [pc, #84]	; (800be00 <round+0x88>)
 800bdaa:	4125      	asrs	r5, r4
 800bdac:	ea01 0605 	and.w	r6, r1, r5
 800bdb0:	4332      	orrs	r2, r6
 800bdb2:	d00e      	beq.n	800bdd2 <round+0x5a>
 800bdb4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800bdb8:	fa42 f404 	asr.w	r4, r2, r4
 800bdbc:	4423      	add	r3, r4
 800bdbe:	ea23 0305 	bic.w	r3, r3, r5
 800bdc2:	e7ef      	b.n	800bda4 <round+0x2c>
 800bdc4:	2c33      	cmp	r4, #51	; 0x33
 800bdc6:	dd07      	ble.n	800bdd8 <round+0x60>
 800bdc8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800bdcc:	d101      	bne.n	800bdd2 <round+0x5a>
 800bdce:	f7f4 fa8d 	bl	80002ec <__adddf3>
 800bdd2:	ec41 0b10 	vmov	d0, r0, r1
 800bdd6:	bd70      	pop	{r4, r5, r6, pc}
 800bdd8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800bddc:	f04f 35ff 	mov.w	r5, #4294967295
 800bde0:	40f5      	lsrs	r5, r6
 800bde2:	4228      	tst	r0, r5
 800bde4:	d0f5      	beq.n	800bdd2 <round+0x5a>
 800bde6:	2101      	movs	r1, #1
 800bde8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800bdec:	fa01 f404 	lsl.w	r4, r1, r4
 800bdf0:	1912      	adds	r2, r2, r4
 800bdf2:	bf28      	it	cs
 800bdf4:	185b      	addcs	r3, r3, r1
 800bdf6:	ea22 0105 	bic.w	r1, r2, r5
 800bdfa:	4608      	mov	r0, r1
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	e7e8      	b.n	800bdd2 <round+0x5a>
 800be00:	000fffff 	.word	0x000fffff

0800be04 <modff>:
 800be04:	ee10 3a10 	vmov	r3, s0
 800be08:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800be0c:	3a7f      	subs	r2, #127	; 0x7f
 800be0e:	2a16      	cmp	r2, #22
 800be10:	dc0a      	bgt.n	800be28 <modff+0x24>
 800be12:	2a00      	cmp	r2, #0
 800be14:	da03      	bge.n	800be1e <modff+0x1a>
 800be16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be1a:	6003      	str	r3, [r0, #0]
 800be1c:	4770      	bx	lr
 800be1e:	490a      	ldr	r1, [pc, #40]	; (800be48 <modff+0x44>)
 800be20:	fa41 f202 	asr.w	r2, r1, r2
 800be24:	4213      	tst	r3, r2
 800be26:	d106      	bne.n	800be36 <modff+0x32>
 800be28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be2c:	ed80 0a00 	vstr	s0, [r0]
 800be30:	ee00 3a10 	vmov	s0, r3
 800be34:	4770      	bx	lr
 800be36:	ea23 0302 	bic.w	r3, r3, r2
 800be3a:	ee07 3a90 	vmov	s15, r3
 800be3e:	6003      	str	r3, [r0, #0]
 800be40:	ee30 0a67 	vsub.f32	s0, s0, s15
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	007fffff 	.word	0x007fffff
 800be4c:	00000000 	.word	0x00000000

0800be50 <exp>:
 800be50:	b538      	push	{r3, r4, r5, lr}
 800be52:	ed2d 8b02 	vpush	{d8}
 800be56:	ec55 4b10 	vmov	r4, r5, d0
 800be5a:	f000 f899 	bl	800bf90 <__ieee754_exp>
 800be5e:	4b22      	ldr	r3, [pc, #136]	; (800bee8 <exp+0x98>)
 800be60:	eeb0 8a40 	vmov.f32	s16, s0
 800be64:	eef0 8a60 	vmov.f32	s17, s1
 800be68:	f993 3000 	ldrsb.w	r3, [r3]
 800be6c:	3301      	adds	r3, #1
 800be6e:	d012      	beq.n	800be96 <exp+0x46>
 800be70:	ec45 4b10 	vmov	d0, r4, r5
 800be74:	f000 fa8b 	bl	800c38e <finite>
 800be78:	b168      	cbz	r0, 800be96 <exp+0x46>
 800be7a:	a313      	add	r3, pc, #76	; (adr r3, 800bec8 <exp+0x78>)
 800be7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be80:	4620      	mov	r0, r4
 800be82:	4629      	mov	r1, r5
 800be84:	f7f4 fe78 	bl	8000b78 <__aeabi_dcmpgt>
 800be88:	b160      	cbz	r0, 800bea4 <exp+0x54>
 800be8a:	f000 fa93 	bl	800c3b4 <__errno>
 800be8e:	ed9f 8b10 	vldr	d8, [pc, #64]	; 800bed0 <exp+0x80>
 800be92:	2322      	movs	r3, #34	; 0x22
 800be94:	6003      	str	r3, [r0, #0]
 800be96:	eeb0 0a48 	vmov.f32	s0, s16
 800be9a:	eef0 0a68 	vmov.f32	s1, s17
 800be9e:	ecbd 8b02 	vpop	{d8}
 800bea2:	bd38      	pop	{r3, r4, r5, pc}
 800bea4:	a30c      	add	r3, pc, #48	; (adr r3, 800bed8 <exp+0x88>)
 800bea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beaa:	4620      	mov	r0, r4
 800beac:	4629      	mov	r1, r5
 800beae:	f7f4 fe45 	bl	8000b3c <__aeabi_dcmplt>
 800beb2:	2800      	cmp	r0, #0
 800beb4:	d0ef      	beq.n	800be96 <exp+0x46>
 800beb6:	f000 fa7d 	bl	800c3b4 <__errno>
 800beba:	2322      	movs	r3, #34	; 0x22
 800bebc:	ed9f 8b08 	vldr	d8, [pc, #32]	; 800bee0 <exp+0x90>
 800bec0:	6003      	str	r3, [r0, #0]
 800bec2:	e7e8      	b.n	800be96 <exp+0x46>
 800bec4:	f3af 8000 	nop.w
 800bec8:	fefa39ef 	.word	0xfefa39ef
 800becc:	40862e42 	.word	0x40862e42
 800bed0:	00000000 	.word	0x00000000
 800bed4:	7ff00000 	.word	0x7ff00000
 800bed8:	d52d3051 	.word	0xd52d3051
 800bedc:	c0874910 	.word	0xc0874910
	...
 800bee8:	20000049 	.word	0x20000049

0800beec <fmodf>:
 800beec:	b508      	push	{r3, lr}
 800beee:	ed2d 8b02 	vpush	{d8}
 800bef2:	eef0 8a40 	vmov.f32	s17, s0
 800bef6:	eeb0 8a60 	vmov.f32	s16, s1
 800befa:	f000 f9c3 	bl	800c284 <__ieee754_fmodf>
 800befe:	4b0f      	ldr	r3, [pc, #60]	; (800bf3c <fmodf+0x50>)
 800bf00:	f993 3000 	ldrsb.w	r3, [r3]
 800bf04:	3301      	adds	r3, #1
 800bf06:	d016      	beq.n	800bf36 <fmodf+0x4a>
 800bf08:	eeb4 8a48 	vcmp.f32	s16, s16
 800bf0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf10:	d611      	bvs.n	800bf36 <fmodf+0x4a>
 800bf12:	eef4 8a68 	vcmp.f32	s17, s17
 800bf16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf1a:	d60c      	bvs.n	800bf36 <fmodf+0x4a>
 800bf1c:	eddf 8a08 	vldr	s17, [pc, #32]	; 800bf40 <fmodf+0x54>
 800bf20:	eeb4 8a68 	vcmp.f32	s16, s17
 800bf24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf28:	d105      	bne.n	800bf36 <fmodf+0x4a>
 800bf2a:	f000 fa43 	bl	800c3b4 <__errno>
 800bf2e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bf32:	2321      	movs	r3, #33	; 0x21
 800bf34:	6003      	str	r3, [r0, #0]
 800bf36:	ecbd 8b02 	vpop	{d8}
 800bf3a:	bd08      	pop	{r3, pc}
 800bf3c:	20000049 	.word	0x20000049
 800bf40:	00000000 	.word	0x00000000

0800bf44 <sqrtf>:
 800bf44:	b508      	push	{r3, lr}
 800bf46:	ed2d 8b02 	vpush	{d8}
 800bf4a:	eeb0 8a40 	vmov.f32	s16, s0
 800bf4e:	f000 fa1b 	bl	800c388 <__ieee754_sqrtf>
 800bf52:	4b0d      	ldr	r3, [pc, #52]	; (800bf88 <sqrtf+0x44>)
 800bf54:	f993 3000 	ldrsb.w	r3, [r3]
 800bf58:	3301      	adds	r3, #1
 800bf5a:	d011      	beq.n	800bf80 <sqrtf+0x3c>
 800bf5c:	eeb4 8a48 	vcmp.f32	s16, s16
 800bf60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf64:	d60c      	bvs.n	800bf80 <sqrtf+0x3c>
 800bf66:	eddf 8a09 	vldr	s17, [pc, #36]	; 800bf8c <sqrtf+0x48>
 800bf6a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bf6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf72:	d505      	bpl.n	800bf80 <sqrtf+0x3c>
 800bf74:	f000 fa1e 	bl	800c3b4 <__errno>
 800bf78:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bf7c:	2321      	movs	r3, #33	; 0x21
 800bf7e:	6003      	str	r3, [r0, #0]
 800bf80:	ecbd 8b02 	vpop	{d8}
 800bf84:	bd08      	pop	{r3, pc}
 800bf86:	bf00      	nop
 800bf88:	20000049 	.word	0x20000049
 800bf8c:	00000000 	.word	0x00000000

0800bf90 <__ieee754_exp>:
 800bf90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf94:	ec55 4b10 	vmov	r4, r5, d0
 800bf98:	49b1      	ldr	r1, [pc, #708]	; (800c260 <__ieee754_exp+0x2d0>)
 800bf9a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bf9e:	428b      	cmp	r3, r1
 800bfa0:	ed2d 8b04 	vpush	{d8-d9}
 800bfa4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800bfa8:	d937      	bls.n	800c01a <__ieee754_exp+0x8a>
 800bfaa:	49ae      	ldr	r1, [pc, #696]	; (800c264 <__ieee754_exp+0x2d4>)
 800bfac:	428b      	cmp	r3, r1
 800bfae:	d916      	bls.n	800bfde <__ieee754_exp+0x4e>
 800bfb0:	ee10 3a10 	vmov	r3, s0
 800bfb4:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	d009      	beq.n	800bfd0 <__ieee754_exp+0x40>
 800bfbc:	ee10 2a10 	vmov	r2, s0
 800bfc0:	462b      	mov	r3, r5
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	4629      	mov	r1, r5
 800bfc6:	f7f4 f991 	bl	80002ec <__adddf3>
 800bfca:	4604      	mov	r4, r0
 800bfcc:	460d      	mov	r5, r1
 800bfce:	e000      	b.n	800bfd2 <__ieee754_exp+0x42>
 800bfd0:	bb06      	cbnz	r6, 800c014 <__ieee754_exp+0x84>
 800bfd2:	ecbd 8b04 	vpop	{d8-d9}
 800bfd6:	ec45 4b10 	vmov	d0, r4, r5
 800bfda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfde:	a38a      	add	r3, pc, #552	; (adr r3, 800c208 <__ieee754_exp+0x278>)
 800bfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe4:	ee10 0a10 	vmov	r0, s0
 800bfe8:	4629      	mov	r1, r5
 800bfea:	f7f4 fdc5 	bl	8000b78 <__aeabi_dcmpgt>
 800bfee:	b138      	cbz	r0, 800c000 <__ieee754_exp+0x70>
 800bff0:	a387      	add	r3, pc, #540	; (adr r3, 800c210 <__ieee754_exp+0x280>)
 800bff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff6:	4610      	mov	r0, r2
 800bff8:	4619      	mov	r1, r3
 800bffa:	f7f4 fb2d 	bl	8000658 <__aeabi_dmul>
 800bffe:	e7e4      	b.n	800bfca <__ieee754_exp+0x3a>
 800c000:	a385      	add	r3, pc, #532	; (adr r3, 800c218 <__ieee754_exp+0x288>)
 800c002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c006:	4620      	mov	r0, r4
 800c008:	4629      	mov	r1, r5
 800c00a:	f7f4 fd97 	bl	8000b3c <__aeabi_dcmplt>
 800c00e:	2800      	cmp	r0, #0
 800c010:	f000 8087 	beq.w	800c122 <__ieee754_exp+0x192>
 800c014:	2400      	movs	r4, #0
 800c016:	2500      	movs	r5, #0
 800c018:	e7db      	b.n	800bfd2 <__ieee754_exp+0x42>
 800c01a:	4a93      	ldr	r2, [pc, #588]	; (800c268 <__ieee754_exp+0x2d8>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	f240 80ac 	bls.w	800c17a <__ieee754_exp+0x1ea>
 800c022:	4a92      	ldr	r2, [pc, #584]	; (800c26c <__ieee754_exp+0x2dc>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d87c      	bhi.n	800c122 <__ieee754_exp+0x192>
 800c028:	4b91      	ldr	r3, [pc, #580]	; (800c270 <__ieee754_exp+0x2e0>)
 800c02a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c032:	ee10 0a10 	vmov	r0, s0
 800c036:	4629      	mov	r1, r5
 800c038:	f7f4 f956 	bl	80002e8 <__aeabi_dsub>
 800c03c:	4b8d      	ldr	r3, [pc, #564]	; (800c274 <__ieee754_exp+0x2e4>)
 800c03e:	00f7      	lsls	r7, r6, #3
 800c040:	443b      	add	r3, r7
 800c042:	ed93 7b00 	vldr	d7, [r3]
 800c046:	f1c6 0a01 	rsb	sl, r6, #1
 800c04a:	4680      	mov	r8, r0
 800c04c:	4689      	mov	r9, r1
 800c04e:	ebaa 0a06 	sub.w	sl, sl, r6
 800c052:	eeb0 8a47 	vmov.f32	s16, s14
 800c056:	eef0 8a67 	vmov.f32	s17, s15
 800c05a:	ec53 2b18 	vmov	r2, r3, d8
 800c05e:	4640      	mov	r0, r8
 800c060:	4649      	mov	r1, r9
 800c062:	f7f4 f941 	bl	80002e8 <__aeabi_dsub>
 800c066:	4604      	mov	r4, r0
 800c068:	460d      	mov	r5, r1
 800c06a:	4622      	mov	r2, r4
 800c06c:	462b      	mov	r3, r5
 800c06e:	4620      	mov	r0, r4
 800c070:	4629      	mov	r1, r5
 800c072:	f7f4 faf1 	bl	8000658 <__aeabi_dmul>
 800c076:	a36a      	add	r3, pc, #424	; (adr r3, 800c220 <__ieee754_exp+0x290>)
 800c078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07c:	4606      	mov	r6, r0
 800c07e:	460f      	mov	r7, r1
 800c080:	f7f4 faea 	bl	8000658 <__aeabi_dmul>
 800c084:	a368      	add	r3, pc, #416	; (adr r3, 800c228 <__ieee754_exp+0x298>)
 800c086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08a:	f7f4 f92d 	bl	80002e8 <__aeabi_dsub>
 800c08e:	4632      	mov	r2, r6
 800c090:	463b      	mov	r3, r7
 800c092:	f7f4 fae1 	bl	8000658 <__aeabi_dmul>
 800c096:	a366      	add	r3, pc, #408	; (adr r3, 800c230 <__ieee754_exp+0x2a0>)
 800c098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09c:	f7f4 f926 	bl	80002ec <__adddf3>
 800c0a0:	4632      	mov	r2, r6
 800c0a2:	463b      	mov	r3, r7
 800c0a4:	f7f4 fad8 	bl	8000658 <__aeabi_dmul>
 800c0a8:	a363      	add	r3, pc, #396	; (adr r3, 800c238 <__ieee754_exp+0x2a8>)
 800c0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ae:	f7f4 f91b 	bl	80002e8 <__aeabi_dsub>
 800c0b2:	4632      	mov	r2, r6
 800c0b4:	463b      	mov	r3, r7
 800c0b6:	f7f4 facf 	bl	8000658 <__aeabi_dmul>
 800c0ba:	a361      	add	r3, pc, #388	; (adr r3, 800c240 <__ieee754_exp+0x2b0>)
 800c0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c0:	f7f4 f914 	bl	80002ec <__adddf3>
 800c0c4:	4632      	mov	r2, r6
 800c0c6:	463b      	mov	r3, r7
 800c0c8:	f7f4 fac6 	bl	8000658 <__aeabi_dmul>
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	4629      	mov	r1, r5
 800c0d4:	f7f4 f908 	bl	80002e8 <__aeabi_dsub>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	460b      	mov	r3, r1
 800c0dc:	4606      	mov	r6, r0
 800c0de:	460f      	mov	r7, r1
 800c0e0:	4620      	mov	r0, r4
 800c0e2:	4629      	mov	r1, r5
 800c0e4:	f7f4 fab8 	bl	8000658 <__aeabi_dmul>
 800c0e8:	ec41 0b19 	vmov	d9, r0, r1
 800c0ec:	f1ba 0f00 	cmp.w	sl, #0
 800c0f0:	d15d      	bne.n	800c1ae <__ieee754_exp+0x21e>
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c0f8:	4630      	mov	r0, r6
 800c0fa:	4639      	mov	r1, r7
 800c0fc:	f7f4 f8f4 	bl	80002e8 <__aeabi_dsub>
 800c100:	4602      	mov	r2, r0
 800c102:	460b      	mov	r3, r1
 800c104:	ec51 0b19 	vmov	r0, r1, d9
 800c108:	f7f4 fbd0 	bl	80008ac <__aeabi_ddiv>
 800c10c:	4622      	mov	r2, r4
 800c10e:	462b      	mov	r3, r5
 800c110:	f7f4 f8ea 	bl	80002e8 <__aeabi_dsub>
 800c114:	4602      	mov	r2, r0
 800c116:	460b      	mov	r3, r1
 800c118:	2000      	movs	r0, #0
 800c11a:	4957      	ldr	r1, [pc, #348]	; (800c278 <__ieee754_exp+0x2e8>)
 800c11c:	f7f4 f8e4 	bl	80002e8 <__aeabi_dsub>
 800c120:	e753      	b.n	800bfca <__ieee754_exp+0x3a>
 800c122:	4856      	ldr	r0, [pc, #344]	; (800c27c <__ieee754_exp+0x2ec>)
 800c124:	a348      	add	r3, pc, #288	; (adr r3, 800c248 <__ieee754_exp+0x2b8>)
 800c126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12a:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800c12e:	4629      	mov	r1, r5
 800c130:	4620      	mov	r0, r4
 800c132:	f7f4 fa91 	bl	8000658 <__aeabi_dmul>
 800c136:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c13a:	f7f4 f8d7 	bl	80002ec <__adddf3>
 800c13e:	f7f4 fd3b 	bl	8000bb8 <__aeabi_d2iz>
 800c142:	4682      	mov	sl, r0
 800c144:	f7f4 fa1e 	bl	8000584 <__aeabi_i2d>
 800c148:	a341      	add	r3, pc, #260	; (adr r3, 800c250 <__ieee754_exp+0x2c0>)
 800c14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14e:	4606      	mov	r6, r0
 800c150:	460f      	mov	r7, r1
 800c152:	f7f4 fa81 	bl	8000658 <__aeabi_dmul>
 800c156:	4602      	mov	r2, r0
 800c158:	460b      	mov	r3, r1
 800c15a:	4620      	mov	r0, r4
 800c15c:	4629      	mov	r1, r5
 800c15e:	f7f4 f8c3 	bl	80002e8 <__aeabi_dsub>
 800c162:	a33d      	add	r3, pc, #244	; (adr r3, 800c258 <__ieee754_exp+0x2c8>)
 800c164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c168:	4680      	mov	r8, r0
 800c16a:	4689      	mov	r9, r1
 800c16c:	4630      	mov	r0, r6
 800c16e:	4639      	mov	r1, r7
 800c170:	f7f4 fa72 	bl	8000658 <__aeabi_dmul>
 800c174:	ec41 0b18 	vmov	d8, r0, r1
 800c178:	e76f      	b.n	800c05a <__ieee754_exp+0xca>
 800c17a:	4a41      	ldr	r2, [pc, #260]	; (800c280 <__ieee754_exp+0x2f0>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d811      	bhi.n	800c1a4 <__ieee754_exp+0x214>
 800c180:	a323      	add	r3, pc, #140	; (adr r3, 800c210 <__ieee754_exp+0x280>)
 800c182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c186:	ee10 0a10 	vmov	r0, s0
 800c18a:	4629      	mov	r1, r5
 800c18c:	f7f4 f8ae 	bl	80002ec <__adddf3>
 800c190:	4b39      	ldr	r3, [pc, #228]	; (800c278 <__ieee754_exp+0x2e8>)
 800c192:	2200      	movs	r2, #0
 800c194:	f7f4 fcf0 	bl	8000b78 <__aeabi_dcmpgt>
 800c198:	b138      	cbz	r0, 800c1aa <__ieee754_exp+0x21a>
 800c19a:	4b37      	ldr	r3, [pc, #220]	; (800c278 <__ieee754_exp+0x2e8>)
 800c19c:	2200      	movs	r2, #0
 800c19e:	4620      	mov	r0, r4
 800c1a0:	4629      	mov	r1, r5
 800c1a2:	e710      	b.n	800bfc6 <__ieee754_exp+0x36>
 800c1a4:	f04f 0a00 	mov.w	sl, #0
 800c1a8:	e75f      	b.n	800c06a <__ieee754_exp+0xda>
 800c1aa:	4682      	mov	sl, r0
 800c1ac:	e75d      	b.n	800c06a <__ieee754_exp+0xda>
 800c1ae:	4632      	mov	r2, r6
 800c1b0:	463b      	mov	r3, r7
 800c1b2:	2000      	movs	r0, #0
 800c1b4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c1b8:	f7f4 f896 	bl	80002e8 <__aeabi_dsub>
 800c1bc:	4602      	mov	r2, r0
 800c1be:	460b      	mov	r3, r1
 800c1c0:	ec51 0b19 	vmov	r0, r1, d9
 800c1c4:	f7f4 fb72 	bl	80008ac <__aeabi_ddiv>
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	460b      	mov	r3, r1
 800c1cc:	ec51 0b18 	vmov	r0, r1, d8
 800c1d0:	f7f4 f88a 	bl	80002e8 <__aeabi_dsub>
 800c1d4:	4642      	mov	r2, r8
 800c1d6:	464b      	mov	r3, r9
 800c1d8:	f7f4 f886 	bl	80002e8 <__aeabi_dsub>
 800c1dc:	4602      	mov	r2, r0
 800c1de:	460b      	mov	r3, r1
 800c1e0:	2000      	movs	r0, #0
 800c1e2:	4925      	ldr	r1, [pc, #148]	; (800c278 <__ieee754_exp+0x2e8>)
 800c1e4:	f7f4 f880 	bl	80002e8 <__aeabi_dsub>
 800c1e8:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800c1ec:	4592      	cmp	sl, r2
 800c1ee:	db02      	blt.n	800c1f6 <__ieee754_exp+0x266>
 800c1f0:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800c1f4:	e6e9      	b.n	800bfca <__ieee754_exp+0x3a>
 800c1f6:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800c1fa:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800c1fe:	2200      	movs	r2, #0
 800c200:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800c204:	e6f9      	b.n	800bffa <__ieee754_exp+0x6a>
 800c206:	bf00      	nop
 800c208:	fefa39ef 	.word	0xfefa39ef
 800c20c:	40862e42 	.word	0x40862e42
 800c210:	8800759c 	.word	0x8800759c
 800c214:	7e37e43c 	.word	0x7e37e43c
 800c218:	d52d3051 	.word	0xd52d3051
 800c21c:	c0874910 	.word	0xc0874910
 800c220:	72bea4d0 	.word	0x72bea4d0
 800c224:	3e663769 	.word	0x3e663769
 800c228:	c5d26bf1 	.word	0xc5d26bf1
 800c22c:	3ebbbd41 	.word	0x3ebbbd41
 800c230:	af25de2c 	.word	0xaf25de2c
 800c234:	3f11566a 	.word	0x3f11566a
 800c238:	16bebd93 	.word	0x16bebd93
 800c23c:	3f66c16c 	.word	0x3f66c16c
 800c240:	5555553e 	.word	0x5555553e
 800c244:	3fc55555 	.word	0x3fc55555
 800c248:	652b82fe 	.word	0x652b82fe
 800c24c:	3ff71547 	.word	0x3ff71547
 800c250:	fee00000 	.word	0xfee00000
 800c254:	3fe62e42 	.word	0x3fe62e42
 800c258:	35793c76 	.word	0x35793c76
 800c25c:	3dea39ef 	.word	0x3dea39ef
 800c260:	40862e41 	.word	0x40862e41
 800c264:	7fefffff 	.word	0x7fefffff
 800c268:	3fd62e42 	.word	0x3fd62e42
 800c26c:	3ff0a2b1 	.word	0x3ff0a2b1
 800c270:	08011cd0 	.word	0x08011cd0
 800c274:	08011ce0 	.word	0x08011ce0
 800c278:	3ff00000 	.word	0x3ff00000
 800c27c:	08011cc0 	.word	0x08011cc0
 800c280:	3e2fffff 	.word	0x3e2fffff

0800c284 <__ieee754_fmodf>:
 800c284:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c286:	ee10 6a90 	vmov	r6, s1
 800c28a:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 800c28e:	d009      	beq.n	800c2a4 <__ieee754_fmodf+0x20>
 800c290:	ee10 2a10 	vmov	r2, s0
 800c294:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800c298:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c29c:	da02      	bge.n	800c2a4 <__ieee754_fmodf+0x20>
 800c29e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c2a2:	dd04      	ble.n	800c2ae <__ieee754_fmodf+0x2a>
 800c2a4:	ee60 0a20 	vmul.f32	s1, s0, s1
 800c2a8:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800c2ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2ae:	42ab      	cmp	r3, r5
 800c2b0:	dbfc      	blt.n	800c2ac <__ieee754_fmodf+0x28>
 800c2b2:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 800c2b6:	d106      	bne.n	800c2c6 <__ieee754_fmodf+0x42>
 800c2b8:	4a32      	ldr	r2, [pc, #200]	; (800c384 <__ieee754_fmodf+0x100>)
 800c2ba:	0fe3      	lsrs	r3, r4, #31
 800c2bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c2c0:	ed93 0a00 	vldr	s0, [r3]
 800c2c4:	e7f2      	b.n	800c2ac <__ieee754_fmodf+0x28>
 800c2c6:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800c2ca:	d13f      	bne.n	800c34c <__ieee754_fmodf+0xc8>
 800c2cc:	0219      	lsls	r1, r3, #8
 800c2ce:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800c2d2:	2900      	cmp	r1, #0
 800c2d4:	dc37      	bgt.n	800c346 <__ieee754_fmodf+0xc2>
 800c2d6:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800c2da:	d13d      	bne.n	800c358 <__ieee754_fmodf+0xd4>
 800c2dc:	022f      	lsls	r7, r5, #8
 800c2de:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800c2e2:	2f00      	cmp	r7, #0
 800c2e4:	da35      	bge.n	800c352 <__ieee754_fmodf+0xce>
 800c2e6:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800c2ea:	bfbb      	ittet	lt
 800c2ec:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800c2f0:	1a12      	sublt	r2, r2, r0
 800c2f2:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800c2f6:	4093      	lsllt	r3, r2
 800c2f8:	bfa8      	it	ge
 800c2fa:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800c2fe:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800c302:	bfb5      	itete	lt
 800c304:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800c308:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 800c30c:	1a52      	sublt	r2, r2, r1
 800c30e:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 800c312:	bfb8      	it	lt
 800c314:	4095      	lsllt	r5, r2
 800c316:	1a40      	subs	r0, r0, r1
 800c318:	1b5a      	subs	r2, r3, r5
 800c31a:	bb00      	cbnz	r0, 800c35e <__ieee754_fmodf+0xda>
 800c31c:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800c320:	bf38      	it	cc
 800c322:	4613      	movcc	r3, r2
 800c324:	2b00      	cmp	r3, #0
 800c326:	d0c7      	beq.n	800c2b8 <__ieee754_fmodf+0x34>
 800c328:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c32c:	db1f      	blt.n	800c36e <__ieee754_fmodf+0xea>
 800c32e:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800c332:	db1f      	blt.n	800c374 <__ieee754_fmodf+0xf0>
 800c334:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800c338:	317f      	adds	r1, #127	; 0x7f
 800c33a:	4323      	orrs	r3, r4
 800c33c:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800c340:	ee00 3a10 	vmov	s0, r3
 800c344:	e7b2      	b.n	800c2ac <__ieee754_fmodf+0x28>
 800c346:	3801      	subs	r0, #1
 800c348:	0049      	lsls	r1, r1, #1
 800c34a:	e7c2      	b.n	800c2d2 <__ieee754_fmodf+0x4e>
 800c34c:	15d8      	asrs	r0, r3, #23
 800c34e:	387f      	subs	r0, #127	; 0x7f
 800c350:	e7c1      	b.n	800c2d6 <__ieee754_fmodf+0x52>
 800c352:	3901      	subs	r1, #1
 800c354:	007f      	lsls	r7, r7, #1
 800c356:	e7c4      	b.n	800c2e2 <__ieee754_fmodf+0x5e>
 800c358:	15e9      	asrs	r1, r5, #23
 800c35a:	397f      	subs	r1, #127	; 0x7f
 800c35c:	e7c3      	b.n	800c2e6 <__ieee754_fmodf+0x62>
 800c35e:	2a00      	cmp	r2, #0
 800c360:	da02      	bge.n	800c368 <__ieee754_fmodf+0xe4>
 800c362:	005b      	lsls	r3, r3, #1
 800c364:	3801      	subs	r0, #1
 800c366:	e7d7      	b.n	800c318 <__ieee754_fmodf+0x94>
 800c368:	d0a6      	beq.n	800c2b8 <__ieee754_fmodf+0x34>
 800c36a:	0053      	lsls	r3, r2, #1
 800c36c:	e7fa      	b.n	800c364 <__ieee754_fmodf+0xe0>
 800c36e:	005b      	lsls	r3, r3, #1
 800c370:	3901      	subs	r1, #1
 800c372:	e7d9      	b.n	800c328 <__ieee754_fmodf+0xa4>
 800c374:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800c378:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800c37c:	3182      	adds	r1, #130	; 0x82
 800c37e:	410b      	asrs	r3, r1
 800c380:	4323      	orrs	r3, r4
 800c382:	e7dd      	b.n	800c340 <__ieee754_fmodf+0xbc>
 800c384:	08011cf0 	.word	0x08011cf0

0800c388 <__ieee754_sqrtf>:
 800c388:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c38c:	4770      	bx	lr

0800c38e <finite>:
 800c38e:	b082      	sub	sp, #8
 800c390:	ed8d 0b00 	vstr	d0, [sp]
 800c394:	9801      	ldr	r0, [sp, #4]
 800c396:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c39a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c39e:	0fc0      	lsrs	r0, r0, #31
 800c3a0:	b002      	add	sp, #8
 800c3a2:	4770      	bx	lr

0800c3a4 <atof>:
 800c3a4:	2100      	movs	r1, #0
 800c3a6:	f001 bb85 	b.w	800dab4 <strtod>

0800c3aa <atoi>:
 800c3aa:	220a      	movs	r2, #10
 800c3ac:	2100      	movs	r1, #0
 800c3ae:	f001 bc11 	b.w	800dbd4 <strtol>
	...

0800c3b4 <__errno>:
 800c3b4:	4b01      	ldr	r3, [pc, #4]	; (800c3bc <__errno+0x8>)
 800c3b6:	6818      	ldr	r0, [r3, #0]
 800c3b8:	4770      	bx	lr
 800c3ba:	bf00      	nop
 800c3bc:	2000004c 	.word	0x2000004c

0800c3c0 <__libc_init_array>:
 800c3c0:	b570      	push	{r4, r5, r6, lr}
 800c3c2:	4d0d      	ldr	r5, [pc, #52]	; (800c3f8 <__libc_init_array+0x38>)
 800c3c4:	4c0d      	ldr	r4, [pc, #52]	; (800c3fc <__libc_init_array+0x3c>)
 800c3c6:	1b64      	subs	r4, r4, r5
 800c3c8:	10a4      	asrs	r4, r4, #2
 800c3ca:	2600      	movs	r6, #0
 800c3cc:	42a6      	cmp	r6, r4
 800c3ce:	d109      	bne.n	800c3e4 <__libc_init_array+0x24>
 800c3d0:	4d0b      	ldr	r5, [pc, #44]	; (800c400 <__libc_init_array+0x40>)
 800c3d2:	4c0c      	ldr	r4, [pc, #48]	; (800c404 <__libc_init_array+0x44>)
 800c3d4:	f004 faca 	bl	801096c <_init>
 800c3d8:	1b64      	subs	r4, r4, r5
 800c3da:	10a4      	asrs	r4, r4, #2
 800c3dc:	2600      	movs	r6, #0
 800c3de:	42a6      	cmp	r6, r4
 800c3e0:	d105      	bne.n	800c3ee <__libc_init_array+0x2e>
 800c3e2:	bd70      	pop	{r4, r5, r6, pc}
 800c3e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3e8:	4798      	blx	r3
 800c3ea:	3601      	adds	r6, #1
 800c3ec:	e7ee      	b.n	800c3cc <__libc_init_array+0xc>
 800c3ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3f2:	4798      	blx	r3
 800c3f4:	3601      	adds	r6, #1
 800c3f6:	e7f2      	b.n	800c3de <__libc_init_array+0x1e>
 800c3f8:	080121ac 	.word	0x080121ac
 800c3fc:	080121ac 	.word	0x080121ac
 800c400:	080121ac 	.word	0x080121ac
 800c404:	080121b0 	.word	0x080121b0

0800c408 <memcpy>:
 800c408:	440a      	add	r2, r1
 800c40a:	4291      	cmp	r1, r2
 800c40c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c410:	d100      	bne.n	800c414 <memcpy+0xc>
 800c412:	4770      	bx	lr
 800c414:	b510      	push	{r4, lr}
 800c416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c41a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c41e:	4291      	cmp	r1, r2
 800c420:	d1f9      	bne.n	800c416 <memcpy+0xe>
 800c422:	bd10      	pop	{r4, pc}

0800c424 <memset>:
 800c424:	4402      	add	r2, r0
 800c426:	4603      	mov	r3, r0
 800c428:	4293      	cmp	r3, r2
 800c42a:	d100      	bne.n	800c42e <memset+0xa>
 800c42c:	4770      	bx	lr
 800c42e:	f803 1b01 	strb.w	r1, [r3], #1
 800c432:	e7f9      	b.n	800c428 <memset+0x4>

0800c434 <__cvt>:
 800c434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c438:	ec55 4b10 	vmov	r4, r5, d0
 800c43c:	2d00      	cmp	r5, #0
 800c43e:	460e      	mov	r6, r1
 800c440:	4619      	mov	r1, r3
 800c442:	462b      	mov	r3, r5
 800c444:	bfbb      	ittet	lt
 800c446:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c44a:	461d      	movlt	r5, r3
 800c44c:	2300      	movge	r3, #0
 800c44e:	232d      	movlt	r3, #45	; 0x2d
 800c450:	700b      	strb	r3, [r1, #0]
 800c452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c454:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c458:	4691      	mov	r9, r2
 800c45a:	f023 0820 	bic.w	r8, r3, #32
 800c45e:	bfbc      	itt	lt
 800c460:	4622      	movlt	r2, r4
 800c462:	4614      	movlt	r4, r2
 800c464:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c468:	d005      	beq.n	800c476 <__cvt+0x42>
 800c46a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c46e:	d100      	bne.n	800c472 <__cvt+0x3e>
 800c470:	3601      	adds	r6, #1
 800c472:	2102      	movs	r1, #2
 800c474:	e000      	b.n	800c478 <__cvt+0x44>
 800c476:	2103      	movs	r1, #3
 800c478:	ab03      	add	r3, sp, #12
 800c47a:	9301      	str	r3, [sp, #4]
 800c47c:	ab02      	add	r3, sp, #8
 800c47e:	9300      	str	r3, [sp, #0]
 800c480:	ec45 4b10 	vmov	d0, r4, r5
 800c484:	4653      	mov	r3, sl
 800c486:	4632      	mov	r2, r6
 800c488:	f001 fcfa 	bl	800de80 <_dtoa_r>
 800c48c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c490:	4607      	mov	r7, r0
 800c492:	d102      	bne.n	800c49a <__cvt+0x66>
 800c494:	f019 0f01 	tst.w	r9, #1
 800c498:	d022      	beq.n	800c4e0 <__cvt+0xac>
 800c49a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c49e:	eb07 0906 	add.w	r9, r7, r6
 800c4a2:	d110      	bne.n	800c4c6 <__cvt+0x92>
 800c4a4:	783b      	ldrb	r3, [r7, #0]
 800c4a6:	2b30      	cmp	r3, #48	; 0x30
 800c4a8:	d10a      	bne.n	800c4c0 <__cvt+0x8c>
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	4620      	mov	r0, r4
 800c4b0:	4629      	mov	r1, r5
 800c4b2:	f7f4 fb39 	bl	8000b28 <__aeabi_dcmpeq>
 800c4b6:	b918      	cbnz	r0, 800c4c0 <__cvt+0x8c>
 800c4b8:	f1c6 0601 	rsb	r6, r6, #1
 800c4bc:	f8ca 6000 	str.w	r6, [sl]
 800c4c0:	f8da 3000 	ldr.w	r3, [sl]
 800c4c4:	4499      	add	r9, r3
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	4629      	mov	r1, r5
 800c4ce:	f7f4 fb2b 	bl	8000b28 <__aeabi_dcmpeq>
 800c4d2:	b108      	cbz	r0, 800c4d8 <__cvt+0xa4>
 800c4d4:	f8cd 900c 	str.w	r9, [sp, #12]
 800c4d8:	2230      	movs	r2, #48	; 0x30
 800c4da:	9b03      	ldr	r3, [sp, #12]
 800c4dc:	454b      	cmp	r3, r9
 800c4de:	d307      	bcc.n	800c4f0 <__cvt+0xbc>
 800c4e0:	9b03      	ldr	r3, [sp, #12]
 800c4e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4e4:	1bdb      	subs	r3, r3, r7
 800c4e6:	4638      	mov	r0, r7
 800c4e8:	6013      	str	r3, [r2, #0]
 800c4ea:	b004      	add	sp, #16
 800c4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4f0:	1c59      	adds	r1, r3, #1
 800c4f2:	9103      	str	r1, [sp, #12]
 800c4f4:	701a      	strb	r2, [r3, #0]
 800c4f6:	e7f0      	b.n	800c4da <__cvt+0xa6>

0800c4f8 <__exponent>:
 800c4f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	2900      	cmp	r1, #0
 800c4fe:	bfb8      	it	lt
 800c500:	4249      	neglt	r1, r1
 800c502:	f803 2b02 	strb.w	r2, [r3], #2
 800c506:	bfb4      	ite	lt
 800c508:	222d      	movlt	r2, #45	; 0x2d
 800c50a:	222b      	movge	r2, #43	; 0x2b
 800c50c:	2909      	cmp	r1, #9
 800c50e:	7042      	strb	r2, [r0, #1]
 800c510:	dd2a      	ble.n	800c568 <__exponent+0x70>
 800c512:	f10d 0407 	add.w	r4, sp, #7
 800c516:	46a4      	mov	ip, r4
 800c518:	270a      	movs	r7, #10
 800c51a:	46a6      	mov	lr, r4
 800c51c:	460a      	mov	r2, r1
 800c51e:	fb91 f6f7 	sdiv	r6, r1, r7
 800c522:	fb07 1516 	mls	r5, r7, r6, r1
 800c526:	3530      	adds	r5, #48	; 0x30
 800c528:	2a63      	cmp	r2, #99	; 0x63
 800c52a:	f104 34ff 	add.w	r4, r4, #4294967295
 800c52e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c532:	4631      	mov	r1, r6
 800c534:	dcf1      	bgt.n	800c51a <__exponent+0x22>
 800c536:	3130      	adds	r1, #48	; 0x30
 800c538:	f1ae 0502 	sub.w	r5, lr, #2
 800c53c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c540:	1c44      	adds	r4, r0, #1
 800c542:	4629      	mov	r1, r5
 800c544:	4561      	cmp	r1, ip
 800c546:	d30a      	bcc.n	800c55e <__exponent+0x66>
 800c548:	f10d 0209 	add.w	r2, sp, #9
 800c54c:	eba2 020e 	sub.w	r2, r2, lr
 800c550:	4565      	cmp	r5, ip
 800c552:	bf88      	it	hi
 800c554:	2200      	movhi	r2, #0
 800c556:	4413      	add	r3, r2
 800c558:	1a18      	subs	r0, r3, r0
 800c55a:	b003      	add	sp, #12
 800c55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c55e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c562:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c566:	e7ed      	b.n	800c544 <__exponent+0x4c>
 800c568:	2330      	movs	r3, #48	; 0x30
 800c56a:	3130      	adds	r1, #48	; 0x30
 800c56c:	7083      	strb	r3, [r0, #2]
 800c56e:	70c1      	strb	r1, [r0, #3]
 800c570:	1d03      	adds	r3, r0, #4
 800c572:	e7f1      	b.n	800c558 <__exponent+0x60>

0800c574 <_printf_float>:
 800c574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c578:	ed2d 8b02 	vpush	{d8}
 800c57c:	b08d      	sub	sp, #52	; 0x34
 800c57e:	460c      	mov	r4, r1
 800c580:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c584:	4616      	mov	r6, r2
 800c586:	461f      	mov	r7, r3
 800c588:	4605      	mov	r5, r0
 800c58a:	f002 ff8b 	bl	800f4a4 <_localeconv_r>
 800c58e:	f8d0 a000 	ldr.w	sl, [r0]
 800c592:	4650      	mov	r0, sl
 800c594:	f7f3 fe46 	bl	8000224 <strlen>
 800c598:	2300      	movs	r3, #0
 800c59a:	930a      	str	r3, [sp, #40]	; 0x28
 800c59c:	6823      	ldr	r3, [r4, #0]
 800c59e:	9305      	str	r3, [sp, #20]
 800c5a0:	f8d8 3000 	ldr.w	r3, [r8]
 800c5a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c5a8:	3307      	adds	r3, #7
 800c5aa:	f023 0307 	bic.w	r3, r3, #7
 800c5ae:	f103 0208 	add.w	r2, r3, #8
 800c5b2:	f8c8 2000 	str.w	r2, [r8]
 800c5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c5be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c5c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c5c6:	9307      	str	r3, [sp, #28]
 800c5c8:	f8cd 8018 	str.w	r8, [sp, #24]
 800c5cc:	ee08 0a10 	vmov	s16, r0
 800c5d0:	4b9f      	ldr	r3, [pc, #636]	; (800c850 <_printf_float+0x2dc>)
 800c5d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5d6:	f04f 32ff 	mov.w	r2, #4294967295
 800c5da:	f7f4 fad7 	bl	8000b8c <__aeabi_dcmpun>
 800c5de:	bb88      	cbnz	r0, 800c644 <_printf_float+0xd0>
 800c5e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5e4:	4b9a      	ldr	r3, [pc, #616]	; (800c850 <_printf_float+0x2dc>)
 800c5e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c5ea:	f7f4 fab1 	bl	8000b50 <__aeabi_dcmple>
 800c5ee:	bb48      	cbnz	r0, 800c644 <_printf_float+0xd0>
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	4640      	mov	r0, r8
 800c5f6:	4649      	mov	r1, r9
 800c5f8:	f7f4 faa0 	bl	8000b3c <__aeabi_dcmplt>
 800c5fc:	b110      	cbz	r0, 800c604 <_printf_float+0x90>
 800c5fe:	232d      	movs	r3, #45	; 0x2d
 800c600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c604:	4b93      	ldr	r3, [pc, #588]	; (800c854 <_printf_float+0x2e0>)
 800c606:	4894      	ldr	r0, [pc, #592]	; (800c858 <_printf_float+0x2e4>)
 800c608:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c60c:	bf94      	ite	ls
 800c60e:	4698      	movls	r8, r3
 800c610:	4680      	movhi	r8, r0
 800c612:	2303      	movs	r3, #3
 800c614:	6123      	str	r3, [r4, #16]
 800c616:	9b05      	ldr	r3, [sp, #20]
 800c618:	f023 0204 	bic.w	r2, r3, #4
 800c61c:	6022      	str	r2, [r4, #0]
 800c61e:	f04f 0900 	mov.w	r9, #0
 800c622:	9700      	str	r7, [sp, #0]
 800c624:	4633      	mov	r3, r6
 800c626:	aa0b      	add	r2, sp, #44	; 0x2c
 800c628:	4621      	mov	r1, r4
 800c62a:	4628      	mov	r0, r5
 800c62c:	f000 f9d8 	bl	800c9e0 <_printf_common>
 800c630:	3001      	adds	r0, #1
 800c632:	f040 8090 	bne.w	800c756 <_printf_float+0x1e2>
 800c636:	f04f 30ff 	mov.w	r0, #4294967295
 800c63a:	b00d      	add	sp, #52	; 0x34
 800c63c:	ecbd 8b02 	vpop	{d8}
 800c640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c644:	4642      	mov	r2, r8
 800c646:	464b      	mov	r3, r9
 800c648:	4640      	mov	r0, r8
 800c64a:	4649      	mov	r1, r9
 800c64c:	f7f4 fa9e 	bl	8000b8c <__aeabi_dcmpun>
 800c650:	b140      	cbz	r0, 800c664 <_printf_float+0xf0>
 800c652:	464b      	mov	r3, r9
 800c654:	2b00      	cmp	r3, #0
 800c656:	bfbc      	itt	lt
 800c658:	232d      	movlt	r3, #45	; 0x2d
 800c65a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c65e:	487f      	ldr	r0, [pc, #508]	; (800c85c <_printf_float+0x2e8>)
 800c660:	4b7f      	ldr	r3, [pc, #508]	; (800c860 <_printf_float+0x2ec>)
 800c662:	e7d1      	b.n	800c608 <_printf_float+0x94>
 800c664:	6863      	ldr	r3, [r4, #4]
 800c666:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c66a:	9206      	str	r2, [sp, #24]
 800c66c:	1c5a      	adds	r2, r3, #1
 800c66e:	d13f      	bne.n	800c6f0 <_printf_float+0x17c>
 800c670:	2306      	movs	r3, #6
 800c672:	6063      	str	r3, [r4, #4]
 800c674:	9b05      	ldr	r3, [sp, #20]
 800c676:	6861      	ldr	r1, [r4, #4]
 800c678:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c67c:	2300      	movs	r3, #0
 800c67e:	9303      	str	r3, [sp, #12]
 800c680:	ab0a      	add	r3, sp, #40	; 0x28
 800c682:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c686:	ab09      	add	r3, sp, #36	; 0x24
 800c688:	ec49 8b10 	vmov	d0, r8, r9
 800c68c:	9300      	str	r3, [sp, #0]
 800c68e:	6022      	str	r2, [r4, #0]
 800c690:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c694:	4628      	mov	r0, r5
 800c696:	f7ff fecd 	bl	800c434 <__cvt>
 800c69a:	9b06      	ldr	r3, [sp, #24]
 800c69c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c69e:	2b47      	cmp	r3, #71	; 0x47
 800c6a0:	4680      	mov	r8, r0
 800c6a2:	d108      	bne.n	800c6b6 <_printf_float+0x142>
 800c6a4:	1cc8      	adds	r0, r1, #3
 800c6a6:	db02      	blt.n	800c6ae <_printf_float+0x13a>
 800c6a8:	6863      	ldr	r3, [r4, #4]
 800c6aa:	4299      	cmp	r1, r3
 800c6ac:	dd41      	ble.n	800c732 <_printf_float+0x1be>
 800c6ae:	f1ab 0b02 	sub.w	fp, fp, #2
 800c6b2:	fa5f fb8b 	uxtb.w	fp, fp
 800c6b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c6ba:	d820      	bhi.n	800c6fe <_printf_float+0x18a>
 800c6bc:	3901      	subs	r1, #1
 800c6be:	465a      	mov	r2, fp
 800c6c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c6c4:	9109      	str	r1, [sp, #36]	; 0x24
 800c6c6:	f7ff ff17 	bl	800c4f8 <__exponent>
 800c6ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6cc:	1813      	adds	r3, r2, r0
 800c6ce:	2a01      	cmp	r2, #1
 800c6d0:	4681      	mov	r9, r0
 800c6d2:	6123      	str	r3, [r4, #16]
 800c6d4:	dc02      	bgt.n	800c6dc <_printf_float+0x168>
 800c6d6:	6822      	ldr	r2, [r4, #0]
 800c6d8:	07d2      	lsls	r2, r2, #31
 800c6da:	d501      	bpl.n	800c6e0 <_printf_float+0x16c>
 800c6dc:	3301      	adds	r3, #1
 800c6de:	6123      	str	r3, [r4, #16]
 800c6e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d09c      	beq.n	800c622 <_printf_float+0xae>
 800c6e8:	232d      	movs	r3, #45	; 0x2d
 800c6ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6ee:	e798      	b.n	800c622 <_printf_float+0xae>
 800c6f0:	9a06      	ldr	r2, [sp, #24]
 800c6f2:	2a47      	cmp	r2, #71	; 0x47
 800c6f4:	d1be      	bne.n	800c674 <_printf_float+0x100>
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d1bc      	bne.n	800c674 <_printf_float+0x100>
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	e7b9      	b.n	800c672 <_printf_float+0xfe>
 800c6fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c702:	d118      	bne.n	800c736 <_printf_float+0x1c2>
 800c704:	2900      	cmp	r1, #0
 800c706:	6863      	ldr	r3, [r4, #4]
 800c708:	dd0b      	ble.n	800c722 <_printf_float+0x1ae>
 800c70a:	6121      	str	r1, [r4, #16]
 800c70c:	b913      	cbnz	r3, 800c714 <_printf_float+0x1a0>
 800c70e:	6822      	ldr	r2, [r4, #0]
 800c710:	07d0      	lsls	r0, r2, #31
 800c712:	d502      	bpl.n	800c71a <_printf_float+0x1a6>
 800c714:	3301      	adds	r3, #1
 800c716:	440b      	add	r3, r1
 800c718:	6123      	str	r3, [r4, #16]
 800c71a:	65a1      	str	r1, [r4, #88]	; 0x58
 800c71c:	f04f 0900 	mov.w	r9, #0
 800c720:	e7de      	b.n	800c6e0 <_printf_float+0x16c>
 800c722:	b913      	cbnz	r3, 800c72a <_printf_float+0x1b6>
 800c724:	6822      	ldr	r2, [r4, #0]
 800c726:	07d2      	lsls	r2, r2, #31
 800c728:	d501      	bpl.n	800c72e <_printf_float+0x1ba>
 800c72a:	3302      	adds	r3, #2
 800c72c:	e7f4      	b.n	800c718 <_printf_float+0x1a4>
 800c72e:	2301      	movs	r3, #1
 800c730:	e7f2      	b.n	800c718 <_printf_float+0x1a4>
 800c732:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c738:	4299      	cmp	r1, r3
 800c73a:	db05      	blt.n	800c748 <_printf_float+0x1d4>
 800c73c:	6823      	ldr	r3, [r4, #0]
 800c73e:	6121      	str	r1, [r4, #16]
 800c740:	07d8      	lsls	r0, r3, #31
 800c742:	d5ea      	bpl.n	800c71a <_printf_float+0x1a6>
 800c744:	1c4b      	adds	r3, r1, #1
 800c746:	e7e7      	b.n	800c718 <_printf_float+0x1a4>
 800c748:	2900      	cmp	r1, #0
 800c74a:	bfd4      	ite	le
 800c74c:	f1c1 0202 	rsble	r2, r1, #2
 800c750:	2201      	movgt	r2, #1
 800c752:	4413      	add	r3, r2
 800c754:	e7e0      	b.n	800c718 <_printf_float+0x1a4>
 800c756:	6823      	ldr	r3, [r4, #0]
 800c758:	055a      	lsls	r2, r3, #21
 800c75a:	d407      	bmi.n	800c76c <_printf_float+0x1f8>
 800c75c:	6923      	ldr	r3, [r4, #16]
 800c75e:	4642      	mov	r2, r8
 800c760:	4631      	mov	r1, r6
 800c762:	4628      	mov	r0, r5
 800c764:	47b8      	blx	r7
 800c766:	3001      	adds	r0, #1
 800c768:	d12c      	bne.n	800c7c4 <_printf_float+0x250>
 800c76a:	e764      	b.n	800c636 <_printf_float+0xc2>
 800c76c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c770:	f240 80e0 	bls.w	800c934 <_printf_float+0x3c0>
 800c774:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c778:	2200      	movs	r2, #0
 800c77a:	2300      	movs	r3, #0
 800c77c:	f7f4 f9d4 	bl	8000b28 <__aeabi_dcmpeq>
 800c780:	2800      	cmp	r0, #0
 800c782:	d034      	beq.n	800c7ee <_printf_float+0x27a>
 800c784:	4a37      	ldr	r2, [pc, #220]	; (800c864 <_printf_float+0x2f0>)
 800c786:	2301      	movs	r3, #1
 800c788:	4631      	mov	r1, r6
 800c78a:	4628      	mov	r0, r5
 800c78c:	47b8      	blx	r7
 800c78e:	3001      	adds	r0, #1
 800c790:	f43f af51 	beq.w	800c636 <_printf_float+0xc2>
 800c794:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c798:	429a      	cmp	r2, r3
 800c79a:	db02      	blt.n	800c7a2 <_printf_float+0x22e>
 800c79c:	6823      	ldr	r3, [r4, #0]
 800c79e:	07d8      	lsls	r0, r3, #31
 800c7a0:	d510      	bpl.n	800c7c4 <_printf_float+0x250>
 800c7a2:	ee18 3a10 	vmov	r3, s16
 800c7a6:	4652      	mov	r2, sl
 800c7a8:	4631      	mov	r1, r6
 800c7aa:	4628      	mov	r0, r5
 800c7ac:	47b8      	blx	r7
 800c7ae:	3001      	adds	r0, #1
 800c7b0:	f43f af41 	beq.w	800c636 <_printf_float+0xc2>
 800c7b4:	f04f 0800 	mov.w	r8, #0
 800c7b8:	f104 091a 	add.w	r9, r4, #26
 800c7bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7be:	3b01      	subs	r3, #1
 800c7c0:	4543      	cmp	r3, r8
 800c7c2:	dc09      	bgt.n	800c7d8 <_printf_float+0x264>
 800c7c4:	6823      	ldr	r3, [r4, #0]
 800c7c6:	079b      	lsls	r3, r3, #30
 800c7c8:	f100 8105 	bmi.w	800c9d6 <_printf_float+0x462>
 800c7cc:	68e0      	ldr	r0, [r4, #12]
 800c7ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7d0:	4298      	cmp	r0, r3
 800c7d2:	bfb8      	it	lt
 800c7d4:	4618      	movlt	r0, r3
 800c7d6:	e730      	b.n	800c63a <_printf_float+0xc6>
 800c7d8:	2301      	movs	r3, #1
 800c7da:	464a      	mov	r2, r9
 800c7dc:	4631      	mov	r1, r6
 800c7de:	4628      	mov	r0, r5
 800c7e0:	47b8      	blx	r7
 800c7e2:	3001      	adds	r0, #1
 800c7e4:	f43f af27 	beq.w	800c636 <_printf_float+0xc2>
 800c7e8:	f108 0801 	add.w	r8, r8, #1
 800c7ec:	e7e6      	b.n	800c7bc <_printf_float+0x248>
 800c7ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	dc39      	bgt.n	800c868 <_printf_float+0x2f4>
 800c7f4:	4a1b      	ldr	r2, [pc, #108]	; (800c864 <_printf_float+0x2f0>)
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	4631      	mov	r1, r6
 800c7fa:	4628      	mov	r0, r5
 800c7fc:	47b8      	blx	r7
 800c7fe:	3001      	adds	r0, #1
 800c800:	f43f af19 	beq.w	800c636 <_printf_float+0xc2>
 800c804:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c808:	4313      	orrs	r3, r2
 800c80a:	d102      	bne.n	800c812 <_printf_float+0x29e>
 800c80c:	6823      	ldr	r3, [r4, #0]
 800c80e:	07d9      	lsls	r1, r3, #31
 800c810:	d5d8      	bpl.n	800c7c4 <_printf_float+0x250>
 800c812:	ee18 3a10 	vmov	r3, s16
 800c816:	4652      	mov	r2, sl
 800c818:	4631      	mov	r1, r6
 800c81a:	4628      	mov	r0, r5
 800c81c:	47b8      	blx	r7
 800c81e:	3001      	adds	r0, #1
 800c820:	f43f af09 	beq.w	800c636 <_printf_float+0xc2>
 800c824:	f04f 0900 	mov.w	r9, #0
 800c828:	f104 0a1a 	add.w	sl, r4, #26
 800c82c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c82e:	425b      	negs	r3, r3
 800c830:	454b      	cmp	r3, r9
 800c832:	dc01      	bgt.n	800c838 <_printf_float+0x2c4>
 800c834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c836:	e792      	b.n	800c75e <_printf_float+0x1ea>
 800c838:	2301      	movs	r3, #1
 800c83a:	4652      	mov	r2, sl
 800c83c:	4631      	mov	r1, r6
 800c83e:	4628      	mov	r0, r5
 800c840:	47b8      	blx	r7
 800c842:	3001      	adds	r0, #1
 800c844:	f43f aef7 	beq.w	800c636 <_printf_float+0xc2>
 800c848:	f109 0901 	add.w	r9, r9, #1
 800c84c:	e7ee      	b.n	800c82c <_printf_float+0x2b8>
 800c84e:	bf00      	nop
 800c850:	7fefffff 	.word	0x7fefffff
 800c854:	08011cfc 	.word	0x08011cfc
 800c858:	08011d00 	.word	0x08011d00
 800c85c:	08011d08 	.word	0x08011d08
 800c860:	08011d04 	.word	0x08011d04
 800c864:	08011d0c 	.word	0x08011d0c
 800c868:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c86a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c86c:	429a      	cmp	r2, r3
 800c86e:	bfa8      	it	ge
 800c870:	461a      	movge	r2, r3
 800c872:	2a00      	cmp	r2, #0
 800c874:	4691      	mov	r9, r2
 800c876:	dc37      	bgt.n	800c8e8 <_printf_float+0x374>
 800c878:	f04f 0b00 	mov.w	fp, #0
 800c87c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c880:	f104 021a 	add.w	r2, r4, #26
 800c884:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c886:	9305      	str	r3, [sp, #20]
 800c888:	eba3 0309 	sub.w	r3, r3, r9
 800c88c:	455b      	cmp	r3, fp
 800c88e:	dc33      	bgt.n	800c8f8 <_printf_float+0x384>
 800c890:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c894:	429a      	cmp	r2, r3
 800c896:	db3b      	blt.n	800c910 <_printf_float+0x39c>
 800c898:	6823      	ldr	r3, [r4, #0]
 800c89a:	07da      	lsls	r2, r3, #31
 800c89c:	d438      	bmi.n	800c910 <_printf_float+0x39c>
 800c89e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8a0:	9b05      	ldr	r3, [sp, #20]
 800c8a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8a4:	1ad3      	subs	r3, r2, r3
 800c8a6:	eba2 0901 	sub.w	r9, r2, r1
 800c8aa:	4599      	cmp	r9, r3
 800c8ac:	bfa8      	it	ge
 800c8ae:	4699      	movge	r9, r3
 800c8b0:	f1b9 0f00 	cmp.w	r9, #0
 800c8b4:	dc35      	bgt.n	800c922 <_printf_float+0x3ae>
 800c8b6:	f04f 0800 	mov.w	r8, #0
 800c8ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c8be:	f104 0a1a 	add.w	sl, r4, #26
 800c8c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c8c6:	1a9b      	subs	r3, r3, r2
 800c8c8:	eba3 0309 	sub.w	r3, r3, r9
 800c8cc:	4543      	cmp	r3, r8
 800c8ce:	f77f af79 	ble.w	800c7c4 <_printf_float+0x250>
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	4652      	mov	r2, sl
 800c8d6:	4631      	mov	r1, r6
 800c8d8:	4628      	mov	r0, r5
 800c8da:	47b8      	blx	r7
 800c8dc:	3001      	adds	r0, #1
 800c8de:	f43f aeaa 	beq.w	800c636 <_printf_float+0xc2>
 800c8e2:	f108 0801 	add.w	r8, r8, #1
 800c8e6:	e7ec      	b.n	800c8c2 <_printf_float+0x34e>
 800c8e8:	4613      	mov	r3, r2
 800c8ea:	4631      	mov	r1, r6
 800c8ec:	4642      	mov	r2, r8
 800c8ee:	4628      	mov	r0, r5
 800c8f0:	47b8      	blx	r7
 800c8f2:	3001      	adds	r0, #1
 800c8f4:	d1c0      	bne.n	800c878 <_printf_float+0x304>
 800c8f6:	e69e      	b.n	800c636 <_printf_float+0xc2>
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	4631      	mov	r1, r6
 800c8fc:	4628      	mov	r0, r5
 800c8fe:	9205      	str	r2, [sp, #20]
 800c900:	47b8      	blx	r7
 800c902:	3001      	adds	r0, #1
 800c904:	f43f ae97 	beq.w	800c636 <_printf_float+0xc2>
 800c908:	9a05      	ldr	r2, [sp, #20]
 800c90a:	f10b 0b01 	add.w	fp, fp, #1
 800c90e:	e7b9      	b.n	800c884 <_printf_float+0x310>
 800c910:	ee18 3a10 	vmov	r3, s16
 800c914:	4652      	mov	r2, sl
 800c916:	4631      	mov	r1, r6
 800c918:	4628      	mov	r0, r5
 800c91a:	47b8      	blx	r7
 800c91c:	3001      	adds	r0, #1
 800c91e:	d1be      	bne.n	800c89e <_printf_float+0x32a>
 800c920:	e689      	b.n	800c636 <_printf_float+0xc2>
 800c922:	9a05      	ldr	r2, [sp, #20]
 800c924:	464b      	mov	r3, r9
 800c926:	4442      	add	r2, r8
 800c928:	4631      	mov	r1, r6
 800c92a:	4628      	mov	r0, r5
 800c92c:	47b8      	blx	r7
 800c92e:	3001      	adds	r0, #1
 800c930:	d1c1      	bne.n	800c8b6 <_printf_float+0x342>
 800c932:	e680      	b.n	800c636 <_printf_float+0xc2>
 800c934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c936:	2a01      	cmp	r2, #1
 800c938:	dc01      	bgt.n	800c93e <_printf_float+0x3ca>
 800c93a:	07db      	lsls	r3, r3, #31
 800c93c:	d538      	bpl.n	800c9b0 <_printf_float+0x43c>
 800c93e:	2301      	movs	r3, #1
 800c940:	4642      	mov	r2, r8
 800c942:	4631      	mov	r1, r6
 800c944:	4628      	mov	r0, r5
 800c946:	47b8      	blx	r7
 800c948:	3001      	adds	r0, #1
 800c94a:	f43f ae74 	beq.w	800c636 <_printf_float+0xc2>
 800c94e:	ee18 3a10 	vmov	r3, s16
 800c952:	4652      	mov	r2, sl
 800c954:	4631      	mov	r1, r6
 800c956:	4628      	mov	r0, r5
 800c958:	47b8      	blx	r7
 800c95a:	3001      	adds	r0, #1
 800c95c:	f43f ae6b 	beq.w	800c636 <_printf_float+0xc2>
 800c960:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c964:	2200      	movs	r2, #0
 800c966:	2300      	movs	r3, #0
 800c968:	f7f4 f8de 	bl	8000b28 <__aeabi_dcmpeq>
 800c96c:	b9d8      	cbnz	r0, 800c9a6 <_printf_float+0x432>
 800c96e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c970:	f108 0201 	add.w	r2, r8, #1
 800c974:	3b01      	subs	r3, #1
 800c976:	4631      	mov	r1, r6
 800c978:	4628      	mov	r0, r5
 800c97a:	47b8      	blx	r7
 800c97c:	3001      	adds	r0, #1
 800c97e:	d10e      	bne.n	800c99e <_printf_float+0x42a>
 800c980:	e659      	b.n	800c636 <_printf_float+0xc2>
 800c982:	2301      	movs	r3, #1
 800c984:	4652      	mov	r2, sl
 800c986:	4631      	mov	r1, r6
 800c988:	4628      	mov	r0, r5
 800c98a:	47b8      	blx	r7
 800c98c:	3001      	adds	r0, #1
 800c98e:	f43f ae52 	beq.w	800c636 <_printf_float+0xc2>
 800c992:	f108 0801 	add.w	r8, r8, #1
 800c996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c998:	3b01      	subs	r3, #1
 800c99a:	4543      	cmp	r3, r8
 800c99c:	dcf1      	bgt.n	800c982 <_printf_float+0x40e>
 800c99e:	464b      	mov	r3, r9
 800c9a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c9a4:	e6dc      	b.n	800c760 <_printf_float+0x1ec>
 800c9a6:	f04f 0800 	mov.w	r8, #0
 800c9aa:	f104 0a1a 	add.w	sl, r4, #26
 800c9ae:	e7f2      	b.n	800c996 <_printf_float+0x422>
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	4642      	mov	r2, r8
 800c9b4:	e7df      	b.n	800c976 <_printf_float+0x402>
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	464a      	mov	r2, r9
 800c9ba:	4631      	mov	r1, r6
 800c9bc:	4628      	mov	r0, r5
 800c9be:	47b8      	blx	r7
 800c9c0:	3001      	adds	r0, #1
 800c9c2:	f43f ae38 	beq.w	800c636 <_printf_float+0xc2>
 800c9c6:	f108 0801 	add.w	r8, r8, #1
 800c9ca:	68e3      	ldr	r3, [r4, #12]
 800c9cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c9ce:	1a5b      	subs	r3, r3, r1
 800c9d0:	4543      	cmp	r3, r8
 800c9d2:	dcf0      	bgt.n	800c9b6 <_printf_float+0x442>
 800c9d4:	e6fa      	b.n	800c7cc <_printf_float+0x258>
 800c9d6:	f04f 0800 	mov.w	r8, #0
 800c9da:	f104 0919 	add.w	r9, r4, #25
 800c9de:	e7f4      	b.n	800c9ca <_printf_float+0x456>

0800c9e0 <_printf_common>:
 800c9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9e4:	4616      	mov	r6, r2
 800c9e6:	4699      	mov	r9, r3
 800c9e8:	688a      	ldr	r2, [r1, #8]
 800c9ea:	690b      	ldr	r3, [r1, #16]
 800c9ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	bfb8      	it	lt
 800c9f4:	4613      	movlt	r3, r2
 800c9f6:	6033      	str	r3, [r6, #0]
 800c9f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9fc:	4607      	mov	r7, r0
 800c9fe:	460c      	mov	r4, r1
 800ca00:	b10a      	cbz	r2, 800ca06 <_printf_common+0x26>
 800ca02:	3301      	adds	r3, #1
 800ca04:	6033      	str	r3, [r6, #0]
 800ca06:	6823      	ldr	r3, [r4, #0]
 800ca08:	0699      	lsls	r1, r3, #26
 800ca0a:	bf42      	ittt	mi
 800ca0c:	6833      	ldrmi	r3, [r6, #0]
 800ca0e:	3302      	addmi	r3, #2
 800ca10:	6033      	strmi	r3, [r6, #0]
 800ca12:	6825      	ldr	r5, [r4, #0]
 800ca14:	f015 0506 	ands.w	r5, r5, #6
 800ca18:	d106      	bne.n	800ca28 <_printf_common+0x48>
 800ca1a:	f104 0a19 	add.w	sl, r4, #25
 800ca1e:	68e3      	ldr	r3, [r4, #12]
 800ca20:	6832      	ldr	r2, [r6, #0]
 800ca22:	1a9b      	subs	r3, r3, r2
 800ca24:	42ab      	cmp	r3, r5
 800ca26:	dc26      	bgt.n	800ca76 <_printf_common+0x96>
 800ca28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca2c:	1e13      	subs	r3, r2, #0
 800ca2e:	6822      	ldr	r2, [r4, #0]
 800ca30:	bf18      	it	ne
 800ca32:	2301      	movne	r3, #1
 800ca34:	0692      	lsls	r2, r2, #26
 800ca36:	d42b      	bmi.n	800ca90 <_printf_common+0xb0>
 800ca38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca3c:	4649      	mov	r1, r9
 800ca3e:	4638      	mov	r0, r7
 800ca40:	47c0      	blx	r8
 800ca42:	3001      	adds	r0, #1
 800ca44:	d01e      	beq.n	800ca84 <_printf_common+0xa4>
 800ca46:	6823      	ldr	r3, [r4, #0]
 800ca48:	68e5      	ldr	r5, [r4, #12]
 800ca4a:	6832      	ldr	r2, [r6, #0]
 800ca4c:	f003 0306 	and.w	r3, r3, #6
 800ca50:	2b04      	cmp	r3, #4
 800ca52:	bf08      	it	eq
 800ca54:	1aad      	subeq	r5, r5, r2
 800ca56:	68a3      	ldr	r3, [r4, #8]
 800ca58:	6922      	ldr	r2, [r4, #16]
 800ca5a:	bf0c      	ite	eq
 800ca5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca60:	2500      	movne	r5, #0
 800ca62:	4293      	cmp	r3, r2
 800ca64:	bfc4      	itt	gt
 800ca66:	1a9b      	subgt	r3, r3, r2
 800ca68:	18ed      	addgt	r5, r5, r3
 800ca6a:	2600      	movs	r6, #0
 800ca6c:	341a      	adds	r4, #26
 800ca6e:	42b5      	cmp	r5, r6
 800ca70:	d11a      	bne.n	800caa8 <_printf_common+0xc8>
 800ca72:	2000      	movs	r0, #0
 800ca74:	e008      	b.n	800ca88 <_printf_common+0xa8>
 800ca76:	2301      	movs	r3, #1
 800ca78:	4652      	mov	r2, sl
 800ca7a:	4649      	mov	r1, r9
 800ca7c:	4638      	mov	r0, r7
 800ca7e:	47c0      	blx	r8
 800ca80:	3001      	adds	r0, #1
 800ca82:	d103      	bne.n	800ca8c <_printf_common+0xac>
 800ca84:	f04f 30ff 	mov.w	r0, #4294967295
 800ca88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca8c:	3501      	adds	r5, #1
 800ca8e:	e7c6      	b.n	800ca1e <_printf_common+0x3e>
 800ca90:	18e1      	adds	r1, r4, r3
 800ca92:	1c5a      	adds	r2, r3, #1
 800ca94:	2030      	movs	r0, #48	; 0x30
 800ca96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca9a:	4422      	add	r2, r4
 800ca9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800caa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800caa4:	3302      	adds	r3, #2
 800caa6:	e7c7      	b.n	800ca38 <_printf_common+0x58>
 800caa8:	2301      	movs	r3, #1
 800caaa:	4622      	mov	r2, r4
 800caac:	4649      	mov	r1, r9
 800caae:	4638      	mov	r0, r7
 800cab0:	47c0      	blx	r8
 800cab2:	3001      	adds	r0, #1
 800cab4:	d0e6      	beq.n	800ca84 <_printf_common+0xa4>
 800cab6:	3601      	adds	r6, #1
 800cab8:	e7d9      	b.n	800ca6e <_printf_common+0x8e>
	...

0800cabc <_printf_i>:
 800cabc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cac0:	460c      	mov	r4, r1
 800cac2:	4691      	mov	r9, r2
 800cac4:	7e27      	ldrb	r7, [r4, #24]
 800cac6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cac8:	2f78      	cmp	r7, #120	; 0x78
 800caca:	4680      	mov	r8, r0
 800cacc:	469a      	mov	sl, r3
 800cace:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cad2:	d807      	bhi.n	800cae4 <_printf_i+0x28>
 800cad4:	2f62      	cmp	r7, #98	; 0x62
 800cad6:	d80a      	bhi.n	800caee <_printf_i+0x32>
 800cad8:	2f00      	cmp	r7, #0
 800cada:	f000 80d8 	beq.w	800cc8e <_printf_i+0x1d2>
 800cade:	2f58      	cmp	r7, #88	; 0x58
 800cae0:	f000 80a3 	beq.w	800cc2a <_printf_i+0x16e>
 800cae4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cae8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800caec:	e03a      	b.n	800cb64 <_printf_i+0xa8>
 800caee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800caf2:	2b15      	cmp	r3, #21
 800caf4:	d8f6      	bhi.n	800cae4 <_printf_i+0x28>
 800caf6:	a001      	add	r0, pc, #4	; (adr r0, 800cafc <_printf_i+0x40>)
 800caf8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cafc:	0800cb55 	.word	0x0800cb55
 800cb00:	0800cb69 	.word	0x0800cb69
 800cb04:	0800cae5 	.word	0x0800cae5
 800cb08:	0800cae5 	.word	0x0800cae5
 800cb0c:	0800cae5 	.word	0x0800cae5
 800cb10:	0800cae5 	.word	0x0800cae5
 800cb14:	0800cb69 	.word	0x0800cb69
 800cb18:	0800cae5 	.word	0x0800cae5
 800cb1c:	0800cae5 	.word	0x0800cae5
 800cb20:	0800cae5 	.word	0x0800cae5
 800cb24:	0800cae5 	.word	0x0800cae5
 800cb28:	0800cc75 	.word	0x0800cc75
 800cb2c:	0800cb99 	.word	0x0800cb99
 800cb30:	0800cc57 	.word	0x0800cc57
 800cb34:	0800cae5 	.word	0x0800cae5
 800cb38:	0800cae5 	.word	0x0800cae5
 800cb3c:	0800cc97 	.word	0x0800cc97
 800cb40:	0800cae5 	.word	0x0800cae5
 800cb44:	0800cb99 	.word	0x0800cb99
 800cb48:	0800cae5 	.word	0x0800cae5
 800cb4c:	0800cae5 	.word	0x0800cae5
 800cb50:	0800cc5f 	.word	0x0800cc5f
 800cb54:	680b      	ldr	r3, [r1, #0]
 800cb56:	1d1a      	adds	r2, r3, #4
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	600a      	str	r2, [r1, #0]
 800cb5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cb60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb64:	2301      	movs	r3, #1
 800cb66:	e0a3      	b.n	800ccb0 <_printf_i+0x1f4>
 800cb68:	6825      	ldr	r5, [r4, #0]
 800cb6a:	6808      	ldr	r0, [r1, #0]
 800cb6c:	062e      	lsls	r6, r5, #24
 800cb6e:	f100 0304 	add.w	r3, r0, #4
 800cb72:	d50a      	bpl.n	800cb8a <_printf_i+0xce>
 800cb74:	6805      	ldr	r5, [r0, #0]
 800cb76:	600b      	str	r3, [r1, #0]
 800cb78:	2d00      	cmp	r5, #0
 800cb7a:	da03      	bge.n	800cb84 <_printf_i+0xc8>
 800cb7c:	232d      	movs	r3, #45	; 0x2d
 800cb7e:	426d      	negs	r5, r5
 800cb80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb84:	485e      	ldr	r0, [pc, #376]	; (800cd00 <_printf_i+0x244>)
 800cb86:	230a      	movs	r3, #10
 800cb88:	e019      	b.n	800cbbe <_printf_i+0x102>
 800cb8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cb8e:	6805      	ldr	r5, [r0, #0]
 800cb90:	600b      	str	r3, [r1, #0]
 800cb92:	bf18      	it	ne
 800cb94:	b22d      	sxthne	r5, r5
 800cb96:	e7ef      	b.n	800cb78 <_printf_i+0xbc>
 800cb98:	680b      	ldr	r3, [r1, #0]
 800cb9a:	6825      	ldr	r5, [r4, #0]
 800cb9c:	1d18      	adds	r0, r3, #4
 800cb9e:	6008      	str	r0, [r1, #0]
 800cba0:	0628      	lsls	r0, r5, #24
 800cba2:	d501      	bpl.n	800cba8 <_printf_i+0xec>
 800cba4:	681d      	ldr	r5, [r3, #0]
 800cba6:	e002      	b.n	800cbae <_printf_i+0xf2>
 800cba8:	0669      	lsls	r1, r5, #25
 800cbaa:	d5fb      	bpl.n	800cba4 <_printf_i+0xe8>
 800cbac:	881d      	ldrh	r5, [r3, #0]
 800cbae:	4854      	ldr	r0, [pc, #336]	; (800cd00 <_printf_i+0x244>)
 800cbb0:	2f6f      	cmp	r7, #111	; 0x6f
 800cbb2:	bf0c      	ite	eq
 800cbb4:	2308      	moveq	r3, #8
 800cbb6:	230a      	movne	r3, #10
 800cbb8:	2100      	movs	r1, #0
 800cbba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cbbe:	6866      	ldr	r6, [r4, #4]
 800cbc0:	60a6      	str	r6, [r4, #8]
 800cbc2:	2e00      	cmp	r6, #0
 800cbc4:	bfa2      	ittt	ge
 800cbc6:	6821      	ldrge	r1, [r4, #0]
 800cbc8:	f021 0104 	bicge.w	r1, r1, #4
 800cbcc:	6021      	strge	r1, [r4, #0]
 800cbce:	b90d      	cbnz	r5, 800cbd4 <_printf_i+0x118>
 800cbd0:	2e00      	cmp	r6, #0
 800cbd2:	d04d      	beq.n	800cc70 <_printf_i+0x1b4>
 800cbd4:	4616      	mov	r6, r2
 800cbd6:	fbb5 f1f3 	udiv	r1, r5, r3
 800cbda:	fb03 5711 	mls	r7, r3, r1, r5
 800cbde:	5dc7      	ldrb	r7, [r0, r7]
 800cbe0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cbe4:	462f      	mov	r7, r5
 800cbe6:	42bb      	cmp	r3, r7
 800cbe8:	460d      	mov	r5, r1
 800cbea:	d9f4      	bls.n	800cbd6 <_printf_i+0x11a>
 800cbec:	2b08      	cmp	r3, #8
 800cbee:	d10b      	bne.n	800cc08 <_printf_i+0x14c>
 800cbf0:	6823      	ldr	r3, [r4, #0]
 800cbf2:	07df      	lsls	r7, r3, #31
 800cbf4:	d508      	bpl.n	800cc08 <_printf_i+0x14c>
 800cbf6:	6923      	ldr	r3, [r4, #16]
 800cbf8:	6861      	ldr	r1, [r4, #4]
 800cbfa:	4299      	cmp	r1, r3
 800cbfc:	bfde      	ittt	le
 800cbfe:	2330      	movle	r3, #48	; 0x30
 800cc00:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cc04:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cc08:	1b92      	subs	r2, r2, r6
 800cc0a:	6122      	str	r2, [r4, #16]
 800cc0c:	f8cd a000 	str.w	sl, [sp]
 800cc10:	464b      	mov	r3, r9
 800cc12:	aa03      	add	r2, sp, #12
 800cc14:	4621      	mov	r1, r4
 800cc16:	4640      	mov	r0, r8
 800cc18:	f7ff fee2 	bl	800c9e0 <_printf_common>
 800cc1c:	3001      	adds	r0, #1
 800cc1e:	d14c      	bne.n	800ccba <_printf_i+0x1fe>
 800cc20:	f04f 30ff 	mov.w	r0, #4294967295
 800cc24:	b004      	add	sp, #16
 800cc26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc2a:	4835      	ldr	r0, [pc, #212]	; (800cd00 <_printf_i+0x244>)
 800cc2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cc30:	6823      	ldr	r3, [r4, #0]
 800cc32:	680e      	ldr	r6, [r1, #0]
 800cc34:	061f      	lsls	r7, r3, #24
 800cc36:	f856 5b04 	ldr.w	r5, [r6], #4
 800cc3a:	600e      	str	r6, [r1, #0]
 800cc3c:	d514      	bpl.n	800cc68 <_printf_i+0x1ac>
 800cc3e:	07d9      	lsls	r1, r3, #31
 800cc40:	bf44      	itt	mi
 800cc42:	f043 0320 	orrmi.w	r3, r3, #32
 800cc46:	6023      	strmi	r3, [r4, #0]
 800cc48:	b91d      	cbnz	r5, 800cc52 <_printf_i+0x196>
 800cc4a:	6823      	ldr	r3, [r4, #0]
 800cc4c:	f023 0320 	bic.w	r3, r3, #32
 800cc50:	6023      	str	r3, [r4, #0]
 800cc52:	2310      	movs	r3, #16
 800cc54:	e7b0      	b.n	800cbb8 <_printf_i+0xfc>
 800cc56:	6823      	ldr	r3, [r4, #0]
 800cc58:	f043 0320 	orr.w	r3, r3, #32
 800cc5c:	6023      	str	r3, [r4, #0]
 800cc5e:	2378      	movs	r3, #120	; 0x78
 800cc60:	4828      	ldr	r0, [pc, #160]	; (800cd04 <_printf_i+0x248>)
 800cc62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cc66:	e7e3      	b.n	800cc30 <_printf_i+0x174>
 800cc68:	065e      	lsls	r6, r3, #25
 800cc6a:	bf48      	it	mi
 800cc6c:	b2ad      	uxthmi	r5, r5
 800cc6e:	e7e6      	b.n	800cc3e <_printf_i+0x182>
 800cc70:	4616      	mov	r6, r2
 800cc72:	e7bb      	b.n	800cbec <_printf_i+0x130>
 800cc74:	680b      	ldr	r3, [r1, #0]
 800cc76:	6826      	ldr	r6, [r4, #0]
 800cc78:	6960      	ldr	r0, [r4, #20]
 800cc7a:	1d1d      	adds	r5, r3, #4
 800cc7c:	600d      	str	r5, [r1, #0]
 800cc7e:	0635      	lsls	r5, r6, #24
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	d501      	bpl.n	800cc88 <_printf_i+0x1cc>
 800cc84:	6018      	str	r0, [r3, #0]
 800cc86:	e002      	b.n	800cc8e <_printf_i+0x1d2>
 800cc88:	0671      	lsls	r1, r6, #25
 800cc8a:	d5fb      	bpl.n	800cc84 <_printf_i+0x1c8>
 800cc8c:	8018      	strh	r0, [r3, #0]
 800cc8e:	2300      	movs	r3, #0
 800cc90:	6123      	str	r3, [r4, #16]
 800cc92:	4616      	mov	r6, r2
 800cc94:	e7ba      	b.n	800cc0c <_printf_i+0x150>
 800cc96:	680b      	ldr	r3, [r1, #0]
 800cc98:	1d1a      	adds	r2, r3, #4
 800cc9a:	600a      	str	r2, [r1, #0]
 800cc9c:	681e      	ldr	r6, [r3, #0]
 800cc9e:	6862      	ldr	r2, [r4, #4]
 800cca0:	2100      	movs	r1, #0
 800cca2:	4630      	mov	r0, r6
 800cca4:	f7f3 facc 	bl	8000240 <memchr>
 800cca8:	b108      	cbz	r0, 800ccae <_printf_i+0x1f2>
 800ccaa:	1b80      	subs	r0, r0, r6
 800ccac:	6060      	str	r0, [r4, #4]
 800ccae:	6863      	ldr	r3, [r4, #4]
 800ccb0:	6123      	str	r3, [r4, #16]
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccb8:	e7a8      	b.n	800cc0c <_printf_i+0x150>
 800ccba:	6923      	ldr	r3, [r4, #16]
 800ccbc:	4632      	mov	r2, r6
 800ccbe:	4649      	mov	r1, r9
 800ccc0:	4640      	mov	r0, r8
 800ccc2:	47d0      	blx	sl
 800ccc4:	3001      	adds	r0, #1
 800ccc6:	d0ab      	beq.n	800cc20 <_printf_i+0x164>
 800ccc8:	6823      	ldr	r3, [r4, #0]
 800ccca:	079b      	lsls	r3, r3, #30
 800cccc:	d413      	bmi.n	800ccf6 <_printf_i+0x23a>
 800ccce:	68e0      	ldr	r0, [r4, #12]
 800ccd0:	9b03      	ldr	r3, [sp, #12]
 800ccd2:	4298      	cmp	r0, r3
 800ccd4:	bfb8      	it	lt
 800ccd6:	4618      	movlt	r0, r3
 800ccd8:	e7a4      	b.n	800cc24 <_printf_i+0x168>
 800ccda:	2301      	movs	r3, #1
 800ccdc:	4632      	mov	r2, r6
 800ccde:	4649      	mov	r1, r9
 800cce0:	4640      	mov	r0, r8
 800cce2:	47d0      	blx	sl
 800cce4:	3001      	adds	r0, #1
 800cce6:	d09b      	beq.n	800cc20 <_printf_i+0x164>
 800cce8:	3501      	adds	r5, #1
 800ccea:	68e3      	ldr	r3, [r4, #12]
 800ccec:	9903      	ldr	r1, [sp, #12]
 800ccee:	1a5b      	subs	r3, r3, r1
 800ccf0:	42ab      	cmp	r3, r5
 800ccf2:	dcf2      	bgt.n	800ccda <_printf_i+0x21e>
 800ccf4:	e7eb      	b.n	800ccce <_printf_i+0x212>
 800ccf6:	2500      	movs	r5, #0
 800ccf8:	f104 0619 	add.w	r6, r4, #25
 800ccfc:	e7f5      	b.n	800ccea <_printf_i+0x22e>
 800ccfe:	bf00      	nop
 800cd00:	08011d0e 	.word	0x08011d0e
 800cd04:	08011d1f 	.word	0x08011d1f

0800cd08 <iprintf>:
 800cd08:	b40f      	push	{r0, r1, r2, r3}
 800cd0a:	4b0a      	ldr	r3, [pc, #40]	; (800cd34 <iprintf+0x2c>)
 800cd0c:	b513      	push	{r0, r1, r4, lr}
 800cd0e:	681c      	ldr	r4, [r3, #0]
 800cd10:	b124      	cbz	r4, 800cd1c <iprintf+0x14>
 800cd12:	69a3      	ldr	r3, [r4, #24]
 800cd14:	b913      	cbnz	r3, 800cd1c <iprintf+0x14>
 800cd16:	4620      	mov	r0, r4
 800cd18:	f001 ffb8 	bl	800ec8c <__sinit>
 800cd1c:	ab05      	add	r3, sp, #20
 800cd1e:	9a04      	ldr	r2, [sp, #16]
 800cd20:	68a1      	ldr	r1, [r4, #8]
 800cd22:	9301      	str	r3, [sp, #4]
 800cd24:	4620      	mov	r0, r4
 800cd26:	f003 fb3d 	bl	80103a4 <_vfiprintf_r>
 800cd2a:	b002      	add	sp, #8
 800cd2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd30:	b004      	add	sp, #16
 800cd32:	4770      	bx	lr
 800cd34:	2000004c 	.word	0x2000004c

0800cd38 <_puts_r>:
 800cd38:	b570      	push	{r4, r5, r6, lr}
 800cd3a:	460e      	mov	r6, r1
 800cd3c:	4605      	mov	r5, r0
 800cd3e:	b118      	cbz	r0, 800cd48 <_puts_r+0x10>
 800cd40:	6983      	ldr	r3, [r0, #24]
 800cd42:	b90b      	cbnz	r3, 800cd48 <_puts_r+0x10>
 800cd44:	f001 ffa2 	bl	800ec8c <__sinit>
 800cd48:	69ab      	ldr	r3, [r5, #24]
 800cd4a:	68ac      	ldr	r4, [r5, #8]
 800cd4c:	b913      	cbnz	r3, 800cd54 <_puts_r+0x1c>
 800cd4e:	4628      	mov	r0, r5
 800cd50:	f001 ff9c 	bl	800ec8c <__sinit>
 800cd54:	4b2c      	ldr	r3, [pc, #176]	; (800ce08 <_puts_r+0xd0>)
 800cd56:	429c      	cmp	r4, r3
 800cd58:	d120      	bne.n	800cd9c <_puts_r+0x64>
 800cd5a:	686c      	ldr	r4, [r5, #4]
 800cd5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd5e:	07db      	lsls	r3, r3, #31
 800cd60:	d405      	bmi.n	800cd6e <_puts_r+0x36>
 800cd62:	89a3      	ldrh	r3, [r4, #12]
 800cd64:	0598      	lsls	r0, r3, #22
 800cd66:	d402      	bmi.n	800cd6e <_puts_r+0x36>
 800cd68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd6a:	f002 fba0 	bl	800f4ae <__retarget_lock_acquire_recursive>
 800cd6e:	89a3      	ldrh	r3, [r4, #12]
 800cd70:	0719      	lsls	r1, r3, #28
 800cd72:	d51d      	bpl.n	800cdb0 <_puts_r+0x78>
 800cd74:	6923      	ldr	r3, [r4, #16]
 800cd76:	b1db      	cbz	r3, 800cdb0 <_puts_r+0x78>
 800cd78:	3e01      	subs	r6, #1
 800cd7a:	68a3      	ldr	r3, [r4, #8]
 800cd7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cd80:	3b01      	subs	r3, #1
 800cd82:	60a3      	str	r3, [r4, #8]
 800cd84:	bb39      	cbnz	r1, 800cdd6 <_puts_r+0x9e>
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	da38      	bge.n	800cdfc <_puts_r+0xc4>
 800cd8a:	4622      	mov	r2, r4
 800cd8c:	210a      	movs	r1, #10
 800cd8e:	4628      	mov	r0, r5
 800cd90:	f000 ff2a 	bl	800dbe8 <__swbuf_r>
 800cd94:	3001      	adds	r0, #1
 800cd96:	d011      	beq.n	800cdbc <_puts_r+0x84>
 800cd98:	250a      	movs	r5, #10
 800cd9a:	e011      	b.n	800cdc0 <_puts_r+0x88>
 800cd9c:	4b1b      	ldr	r3, [pc, #108]	; (800ce0c <_puts_r+0xd4>)
 800cd9e:	429c      	cmp	r4, r3
 800cda0:	d101      	bne.n	800cda6 <_puts_r+0x6e>
 800cda2:	68ac      	ldr	r4, [r5, #8]
 800cda4:	e7da      	b.n	800cd5c <_puts_r+0x24>
 800cda6:	4b1a      	ldr	r3, [pc, #104]	; (800ce10 <_puts_r+0xd8>)
 800cda8:	429c      	cmp	r4, r3
 800cdaa:	bf08      	it	eq
 800cdac:	68ec      	ldreq	r4, [r5, #12]
 800cdae:	e7d5      	b.n	800cd5c <_puts_r+0x24>
 800cdb0:	4621      	mov	r1, r4
 800cdb2:	4628      	mov	r0, r5
 800cdb4:	f000 ff6a 	bl	800dc8c <__swsetup_r>
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	d0dd      	beq.n	800cd78 <_puts_r+0x40>
 800cdbc:	f04f 35ff 	mov.w	r5, #4294967295
 800cdc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cdc2:	07da      	lsls	r2, r3, #31
 800cdc4:	d405      	bmi.n	800cdd2 <_puts_r+0x9a>
 800cdc6:	89a3      	ldrh	r3, [r4, #12]
 800cdc8:	059b      	lsls	r3, r3, #22
 800cdca:	d402      	bmi.n	800cdd2 <_puts_r+0x9a>
 800cdcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdce:	f002 fb6f 	bl	800f4b0 <__retarget_lock_release_recursive>
 800cdd2:	4628      	mov	r0, r5
 800cdd4:	bd70      	pop	{r4, r5, r6, pc}
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	da04      	bge.n	800cde4 <_puts_r+0xac>
 800cdda:	69a2      	ldr	r2, [r4, #24]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	dc06      	bgt.n	800cdee <_puts_r+0xb6>
 800cde0:	290a      	cmp	r1, #10
 800cde2:	d004      	beq.n	800cdee <_puts_r+0xb6>
 800cde4:	6823      	ldr	r3, [r4, #0]
 800cde6:	1c5a      	adds	r2, r3, #1
 800cde8:	6022      	str	r2, [r4, #0]
 800cdea:	7019      	strb	r1, [r3, #0]
 800cdec:	e7c5      	b.n	800cd7a <_puts_r+0x42>
 800cdee:	4622      	mov	r2, r4
 800cdf0:	4628      	mov	r0, r5
 800cdf2:	f000 fef9 	bl	800dbe8 <__swbuf_r>
 800cdf6:	3001      	adds	r0, #1
 800cdf8:	d1bf      	bne.n	800cd7a <_puts_r+0x42>
 800cdfa:	e7df      	b.n	800cdbc <_puts_r+0x84>
 800cdfc:	6823      	ldr	r3, [r4, #0]
 800cdfe:	250a      	movs	r5, #10
 800ce00:	1c5a      	adds	r2, r3, #1
 800ce02:	6022      	str	r2, [r4, #0]
 800ce04:	701d      	strb	r5, [r3, #0]
 800ce06:	e7db      	b.n	800cdc0 <_puts_r+0x88>
 800ce08:	08011f38 	.word	0x08011f38
 800ce0c:	08011f58 	.word	0x08011f58
 800ce10:	08011f18 	.word	0x08011f18

0800ce14 <puts>:
 800ce14:	4b02      	ldr	r3, [pc, #8]	; (800ce20 <puts+0xc>)
 800ce16:	4601      	mov	r1, r0
 800ce18:	6818      	ldr	r0, [r3, #0]
 800ce1a:	f7ff bf8d 	b.w	800cd38 <_puts_r>
 800ce1e:	bf00      	nop
 800ce20:	2000004c 	.word	0x2000004c

0800ce24 <siprintf>:
 800ce24:	b40e      	push	{r1, r2, r3}
 800ce26:	b500      	push	{lr}
 800ce28:	b09c      	sub	sp, #112	; 0x70
 800ce2a:	ab1d      	add	r3, sp, #116	; 0x74
 800ce2c:	9002      	str	r0, [sp, #8]
 800ce2e:	9006      	str	r0, [sp, #24]
 800ce30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ce34:	4809      	ldr	r0, [pc, #36]	; (800ce5c <siprintf+0x38>)
 800ce36:	9107      	str	r1, [sp, #28]
 800ce38:	9104      	str	r1, [sp, #16]
 800ce3a:	4909      	ldr	r1, [pc, #36]	; (800ce60 <siprintf+0x3c>)
 800ce3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce40:	9105      	str	r1, [sp, #20]
 800ce42:	6800      	ldr	r0, [r0, #0]
 800ce44:	9301      	str	r3, [sp, #4]
 800ce46:	a902      	add	r1, sp, #8
 800ce48:	f003 f982 	bl	8010150 <_svfiprintf_r>
 800ce4c:	9b02      	ldr	r3, [sp, #8]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	701a      	strb	r2, [r3, #0]
 800ce52:	b01c      	add	sp, #112	; 0x70
 800ce54:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce58:	b003      	add	sp, #12
 800ce5a:	4770      	bx	lr
 800ce5c:	2000004c 	.word	0x2000004c
 800ce60:	ffff0208 	.word	0xffff0208

0800ce64 <sulp>:
 800ce64:	b570      	push	{r4, r5, r6, lr}
 800ce66:	4604      	mov	r4, r0
 800ce68:	460d      	mov	r5, r1
 800ce6a:	ec45 4b10 	vmov	d0, r4, r5
 800ce6e:	4616      	mov	r6, r2
 800ce70:	f002 ff0a 	bl	800fc88 <__ulp>
 800ce74:	ec51 0b10 	vmov	r0, r1, d0
 800ce78:	b17e      	cbz	r6, 800ce9a <sulp+0x36>
 800ce7a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ce7e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	dd09      	ble.n	800ce9a <sulp+0x36>
 800ce86:	051b      	lsls	r3, r3, #20
 800ce88:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ce8c:	2400      	movs	r4, #0
 800ce8e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ce92:	4622      	mov	r2, r4
 800ce94:	462b      	mov	r3, r5
 800ce96:	f7f3 fbdf 	bl	8000658 <__aeabi_dmul>
 800ce9a:	bd70      	pop	{r4, r5, r6, pc}
 800ce9c:	0000      	movs	r0, r0
	...

0800cea0 <_strtod_l>:
 800cea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cea4:	b0a3      	sub	sp, #140	; 0x8c
 800cea6:	461f      	mov	r7, r3
 800cea8:	2300      	movs	r3, #0
 800ceaa:	931e      	str	r3, [sp, #120]	; 0x78
 800ceac:	4ba4      	ldr	r3, [pc, #656]	; (800d140 <_strtod_l+0x2a0>)
 800ceae:	9219      	str	r2, [sp, #100]	; 0x64
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	9307      	str	r3, [sp, #28]
 800ceb4:	4604      	mov	r4, r0
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	4688      	mov	r8, r1
 800ceba:	f7f3 f9b3 	bl	8000224 <strlen>
 800cebe:	f04f 0a00 	mov.w	sl, #0
 800cec2:	4605      	mov	r5, r0
 800cec4:	f04f 0b00 	mov.w	fp, #0
 800cec8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800cecc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cece:	781a      	ldrb	r2, [r3, #0]
 800ced0:	2a2b      	cmp	r2, #43	; 0x2b
 800ced2:	d04c      	beq.n	800cf6e <_strtod_l+0xce>
 800ced4:	d839      	bhi.n	800cf4a <_strtod_l+0xaa>
 800ced6:	2a0d      	cmp	r2, #13
 800ced8:	d832      	bhi.n	800cf40 <_strtod_l+0xa0>
 800ceda:	2a08      	cmp	r2, #8
 800cedc:	d832      	bhi.n	800cf44 <_strtod_l+0xa4>
 800cede:	2a00      	cmp	r2, #0
 800cee0:	d03c      	beq.n	800cf5c <_strtod_l+0xbc>
 800cee2:	2300      	movs	r3, #0
 800cee4:	930e      	str	r3, [sp, #56]	; 0x38
 800cee6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800cee8:	7833      	ldrb	r3, [r6, #0]
 800ceea:	2b30      	cmp	r3, #48	; 0x30
 800ceec:	f040 80b4 	bne.w	800d058 <_strtod_l+0x1b8>
 800cef0:	7873      	ldrb	r3, [r6, #1]
 800cef2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cef6:	2b58      	cmp	r3, #88	; 0x58
 800cef8:	d16c      	bne.n	800cfd4 <_strtod_l+0x134>
 800cefa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cefc:	9301      	str	r3, [sp, #4]
 800cefe:	ab1e      	add	r3, sp, #120	; 0x78
 800cf00:	9702      	str	r7, [sp, #8]
 800cf02:	9300      	str	r3, [sp, #0]
 800cf04:	4a8f      	ldr	r2, [pc, #572]	; (800d144 <_strtod_l+0x2a4>)
 800cf06:	ab1f      	add	r3, sp, #124	; 0x7c
 800cf08:	a91d      	add	r1, sp, #116	; 0x74
 800cf0a:	4620      	mov	r0, r4
 800cf0c:	f001 ffc2 	bl	800ee94 <__gethex>
 800cf10:	f010 0707 	ands.w	r7, r0, #7
 800cf14:	4605      	mov	r5, r0
 800cf16:	d005      	beq.n	800cf24 <_strtod_l+0x84>
 800cf18:	2f06      	cmp	r7, #6
 800cf1a:	d12a      	bne.n	800cf72 <_strtod_l+0xd2>
 800cf1c:	3601      	adds	r6, #1
 800cf1e:	2300      	movs	r3, #0
 800cf20:	961d      	str	r6, [sp, #116]	; 0x74
 800cf22:	930e      	str	r3, [sp, #56]	; 0x38
 800cf24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	f040 8596 	bne.w	800da58 <_strtod_l+0xbb8>
 800cf2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf2e:	b1db      	cbz	r3, 800cf68 <_strtod_l+0xc8>
 800cf30:	4652      	mov	r2, sl
 800cf32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cf36:	ec43 2b10 	vmov	d0, r2, r3
 800cf3a:	b023      	add	sp, #140	; 0x8c
 800cf3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf40:	2a20      	cmp	r2, #32
 800cf42:	d1ce      	bne.n	800cee2 <_strtod_l+0x42>
 800cf44:	3301      	adds	r3, #1
 800cf46:	931d      	str	r3, [sp, #116]	; 0x74
 800cf48:	e7c0      	b.n	800cecc <_strtod_l+0x2c>
 800cf4a:	2a2d      	cmp	r2, #45	; 0x2d
 800cf4c:	d1c9      	bne.n	800cee2 <_strtod_l+0x42>
 800cf4e:	2201      	movs	r2, #1
 800cf50:	920e      	str	r2, [sp, #56]	; 0x38
 800cf52:	1c5a      	adds	r2, r3, #1
 800cf54:	921d      	str	r2, [sp, #116]	; 0x74
 800cf56:	785b      	ldrb	r3, [r3, #1]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d1c4      	bne.n	800cee6 <_strtod_l+0x46>
 800cf5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cf5e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	f040 8576 	bne.w	800da54 <_strtod_l+0xbb4>
 800cf68:	4652      	mov	r2, sl
 800cf6a:	465b      	mov	r3, fp
 800cf6c:	e7e3      	b.n	800cf36 <_strtod_l+0x96>
 800cf6e:	2200      	movs	r2, #0
 800cf70:	e7ee      	b.n	800cf50 <_strtod_l+0xb0>
 800cf72:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cf74:	b13a      	cbz	r2, 800cf86 <_strtod_l+0xe6>
 800cf76:	2135      	movs	r1, #53	; 0x35
 800cf78:	a820      	add	r0, sp, #128	; 0x80
 800cf7a:	f002 ff90 	bl	800fe9e <__copybits>
 800cf7e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cf80:	4620      	mov	r0, r4
 800cf82:	f002 fb55 	bl	800f630 <_Bfree>
 800cf86:	3f01      	subs	r7, #1
 800cf88:	2f05      	cmp	r7, #5
 800cf8a:	d807      	bhi.n	800cf9c <_strtod_l+0xfc>
 800cf8c:	e8df f007 	tbb	[pc, r7]
 800cf90:	1d180b0e 	.word	0x1d180b0e
 800cf94:	030e      	.short	0x030e
 800cf96:	f04f 0b00 	mov.w	fp, #0
 800cf9a:	46da      	mov	sl, fp
 800cf9c:	0728      	lsls	r0, r5, #28
 800cf9e:	d5c1      	bpl.n	800cf24 <_strtod_l+0x84>
 800cfa0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800cfa4:	e7be      	b.n	800cf24 <_strtod_l+0x84>
 800cfa6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800cfaa:	e7f7      	b.n	800cf9c <_strtod_l+0xfc>
 800cfac:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800cfb0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800cfb2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cfb6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cfba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cfbe:	e7ed      	b.n	800cf9c <_strtod_l+0xfc>
 800cfc0:	f8df b184 	ldr.w	fp, [pc, #388]	; 800d148 <_strtod_l+0x2a8>
 800cfc4:	f04f 0a00 	mov.w	sl, #0
 800cfc8:	e7e8      	b.n	800cf9c <_strtod_l+0xfc>
 800cfca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cfce:	f04f 3aff 	mov.w	sl, #4294967295
 800cfd2:	e7e3      	b.n	800cf9c <_strtod_l+0xfc>
 800cfd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cfd6:	1c5a      	adds	r2, r3, #1
 800cfd8:	921d      	str	r2, [sp, #116]	; 0x74
 800cfda:	785b      	ldrb	r3, [r3, #1]
 800cfdc:	2b30      	cmp	r3, #48	; 0x30
 800cfde:	d0f9      	beq.n	800cfd4 <_strtod_l+0x134>
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d09f      	beq.n	800cf24 <_strtod_l+0x84>
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	f04f 0900 	mov.w	r9, #0
 800cfea:	9304      	str	r3, [sp, #16]
 800cfec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cfee:	930a      	str	r3, [sp, #40]	; 0x28
 800cff0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800cff4:	464f      	mov	r7, r9
 800cff6:	220a      	movs	r2, #10
 800cff8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800cffa:	7806      	ldrb	r6, [r0, #0]
 800cffc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d000:	b2d9      	uxtb	r1, r3
 800d002:	2909      	cmp	r1, #9
 800d004:	d92a      	bls.n	800d05c <_strtod_l+0x1bc>
 800d006:	9907      	ldr	r1, [sp, #28]
 800d008:	462a      	mov	r2, r5
 800d00a:	f003 fb58 	bl	80106be <strncmp>
 800d00e:	b398      	cbz	r0, 800d078 <_strtod_l+0x1d8>
 800d010:	2000      	movs	r0, #0
 800d012:	4633      	mov	r3, r6
 800d014:	463d      	mov	r5, r7
 800d016:	9007      	str	r0, [sp, #28]
 800d018:	4602      	mov	r2, r0
 800d01a:	2b65      	cmp	r3, #101	; 0x65
 800d01c:	d001      	beq.n	800d022 <_strtod_l+0x182>
 800d01e:	2b45      	cmp	r3, #69	; 0x45
 800d020:	d118      	bne.n	800d054 <_strtod_l+0x1b4>
 800d022:	b91d      	cbnz	r5, 800d02c <_strtod_l+0x18c>
 800d024:	9b04      	ldr	r3, [sp, #16]
 800d026:	4303      	orrs	r3, r0
 800d028:	d098      	beq.n	800cf5c <_strtod_l+0xbc>
 800d02a:	2500      	movs	r5, #0
 800d02c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800d030:	f108 0301 	add.w	r3, r8, #1
 800d034:	931d      	str	r3, [sp, #116]	; 0x74
 800d036:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d03a:	2b2b      	cmp	r3, #43	; 0x2b
 800d03c:	d075      	beq.n	800d12a <_strtod_l+0x28a>
 800d03e:	2b2d      	cmp	r3, #45	; 0x2d
 800d040:	d07b      	beq.n	800d13a <_strtod_l+0x29a>
 800d042:	f04f 0c00 	mov.w	ip, #0
 800d046:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d04a:	2909      	cmp	r1, #9
 800d04c:	f240 8082 	bls.w	800d154 <_strtod_l+0x2b4>
 800d050:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d054:	2600      	movs	r6, #0
 800d056:	e09d      	b.n	800d194 <_strtod_l+0x2f4>
 800d058:	2300      	movs	r3, #0
 800d05a:	e7c4      	b.n	800cfe6 <_strtod_l+0x146>
 800d05c:	2f08      	cmp	r7, #8
 800d05e:	bfd8      	it	le
 800d060:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800d062:	f100 0001 	add.w	r0, r0, #1
 800d066:	bfda      	itte	le
 800d068:	fb02 3301 	mlale	r3, r2, r1, r3
 800d06c:	9309      	strle	r3, [sp, #36]	; 0x24
 800d06e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d072:	3701      	adds	r7, #1
 800d074:	901d      	str	r0, [sp, #116]	; 0x74
 800d076:	e7bf      	b.n	800cff8 <_strtod_l+0x158>
 800d078:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d07a:	195a      	adds	r2, r3, r5
 800d07c:	921d      	str	r2, [sp, #116]	; 0x74
 800d07e:	5d5b      	ldrb	r3, [r3, r5]
 800d080:	2f00      	cmp	r7, #0
 800d082:	d037      	beq.n	800d0f4 <_strtod_l+0x254>
 800d084:	9007      	str	r0, [sp, #28]
 800d086:	463d      	mov	r5, r7
 800d088:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800d08c:	2a09      	cmp	r2, #9
 800d08e:	d912      	bls.n	800d0b6 <_strtod_l+0x216>
 800d090:	2201      	movs	r2, #1
 800d092:	e7c2      	b.n	800d01a <_strtod_l+0x17a>
 800d094:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d096:	1c5a      	adds	r2, r3, #1
 800d098:	921d      	str	r2, [sp, #116]	; 0x74
 800d09a:	785b      	ldrb	r3, [r3, #1]
 800d09c:	3001      	adds	r0, #1
 800d09e:	2b30      	cmp	r3, #48	; 0x30
 800d0a0:	d0f8      	beq.n	800d094 <_strtod_l+0x1f4>
 800d0a2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d0a6:	2a08      	cmp	r2, #8
 800d0a8:	f200 84db 	bhi.w	800da62 <_strtod_l+0xbc2>
 800d0ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d0ae:	9007      	str	r0, [sp, #28]
 800d0b0:	2000      	movs	r0, #0
 800d0b2:	920a      	str	r2, [sp, #40]	; 0x28
 800d0b4:	4605      	mov	r5, r0
 800d0b6:	3b30      	subs	r3, #48	; 0x30
 800d0b8:	f100 0201 	add.w	r2, r0, #1
 800d0bc:	d014      	beq.n	800d0e8 <_strtod_l+0x248>
 800d0be:	9907      	ldr	r1, [sp, #28]
 800d0c0:	4411      	add	r1, r2
 800d0c2:	9107      	str	r1, [sp, #28]
 800d0c4:	462a      	mov	r2, r5
 800d0c6:	eb00 0e05 	add.w	lr, r0, r5
 800d0ca:	210a      	movs	r1, #10
 800d0cc:	4572      	cmp	r2, lr
 800d0ce:	d113      	bne.n	800d0f8 <_strtod_l+0x258>
 800d0d0:	182a      	adds	r2, r5, r0
 800d0d2:	2a08      	cmp	r2, #8
 800d0d4:	f105 0501 	add.w	r5, r5, #1
 800d0d8:	4405      	add	r5, r0
 800d0da:	dc1c      	bgt.n	800d116 <_strtod_l+0x276>
 800d0dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d0de:	220a      	movs	r2, #10
 800d0e0:	fb02 3301 	mla	r3, r2, r1, r3
 800d0e4:	9309      	str	r3, [sp, #36]	; 0x24
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d0ea:	1c59      	adds	r1, r3, #1
 800d0ec:	911d      	str	r1, [sp, #116]	; 0x74
 800d0ee:	785b      	ldrb	r3, [r3, #1]
 800d0f0:	4610      	mov	r0, r2
 800d0f2:	e7c9      	b.n	800d088 <_strtod_l+0x1e8>
 800d0f4:	4638      	mov	r0, r7
 800d0f6:	e7d2      	b.n	800d09e <_strtod_l+0x1fe>
 800d0f8:	2a08      	cmp	r2, #8
 800d0fa:	dc04      	bgt.n	800d106 <_strtod_l+0x266>
 800d0fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d0fe:	434e      	muls	r6, r1
 800d100:	9609      	str	r6, [sp, #36]	; 0x24
 800d102:	3201      	adds	r2, #1
 800d104:	e7e2      	b.n	800d0cc <_strtod_l+0x22c>
 800d106:	f102 0c01 	add.w	ip, r2, #1
 800d10a:	f1bc 0f10 	cmp.w	ip, #16
 800d10e:	bfd8      	it	le
 800d110:	fb01 f909 	mulle.w	r9, r1, r9
 800d114:	e7f5      	b.n	800d102 <_strtod_l+0x262>
 800d116:	2d10      	cmp	r5, #16
 800d118:	bfdc      	itt	le
 800d11a:	220a      	movle	r2, #10
 800d11c:	fb02 3909 	mlale	r9, r2, r9, r3
 800d120:	e7e1      	b.n	800d0e6 <_strtod_l+0x246>
 800d122:	2300      	movs	r3, #0
 800d124:	9307      	str	r3, [sp, #28]
 800d126:	2201      	movs	r2, #1
 800d128:	e77c      	b.n	800d024 <_strtod_l+0x184>
 800d12a:	f04f 0c00 	mov.w	ip, #0
 800d12e:	f108 0302 	add.w	r3, r8, #2
 800d132:	931d      	str	r3, [sp, #116]	; 0x74
 800d134:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d138:	e785      	b.n	800d046 <_strtod_l+0x1a6>
 800d13a:	f04f 0c01 	mov.w	ip, #1
 800d13e:	e7f6      	b.n	800d12e <_strtod_l+0x28e>
 800d140:	08011fe4 	.word	0x08011fe4
 800d144:	08011d30 	.word	0x08011d30
 800d148:	7ff00000 	.word	0x7ff00000
 800d14c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d14e:	1c59      	adds	r1, r3, #1
 800d150:	911d      	str	r1, [sp, #116]	; 0x74
 800d152:	785b      	ldrb	r3, [r3, #1]
 800d154:	2b30      	cmp	r3, #48	; 0x30
 800d156:	d0f9      	beq.n	800d14c <_strtod_l+0x2ac>
 800d158:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800d15c:	2908      	cmp	r1, #8
 800d15e:	f63f af79 	bhi.w	800d054 <_strtod_l+0x1b4>
 800d162:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800d166:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d168:	9308      	str	r3, [sp, #32]
 800d16a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d16c:	1c59      	adds	r1, r3, #1
 800d16e:	911d      	str	r1, [sp, #116]	; 0x74
 800d170:	785b      	ldrb	r3, [r3, #1]
 800d172:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800d176:	2e09      	cmp	r6, #9
 800d178:	d937      	bls.n	800d1ea <_strtod_l+0x34a>
 800d17a:	9e08      	ldr	r6, [sp, #32]
 800d17c:	1b89      	subs	r1, r1, r6
 800d17e:	2908      	cmp	r1, #8
 800d180:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d184:	dc02      	bgt.n	800d18c <_strtod_l+0x2ec>
 800d186:	4576      	cmp	r6, lr
 800d188:	bfa8      	it	ge
 800d18a:	4676      	movge	r6, lr
 800d18c:	f1bc 0f00 	cmp.w	ip, #0
 800d190:	d000      	beq.n	800d194 <_strtod_l+0x2f4>
 800d192:	4276      	negs	r6, r6
 800d194:	2d00      	cmp	r5, #0
 800d196:	d14f      	bne.n	800d238 <_strtod_l+0x398>
 800d198:	9904      	ldr	r1, [sp, #16]
 800d19a:	4301      	orrs	r1, r0
 800d19c:	f47f aec2 	bne.w	800cf24 <_strtod_l+0x84>
 800d1a0:	2a00      	cmp	r2, #0
 800d1a2:	f47f aedb 	bne.w	800cf5c <_strtod_l+0xbc>
 800d1a6:	2b69      	cmp	r3, #105	; 0x69
 800d1a8:	d027      	beq.n	800d1fa <_strtod_l+0x35a>
 800d1aa:	dc24      	bgt.n	800d1f6 <_strtod_l+0x356>
 800d1ac:	2b49      	cmp	r3, #73	; 0x49
 800d1ae:	d024      	beq.n	800d1fa <_strtod_l+0x35a>
 800d1b0:	2b4e      	cmp	r3, #78	; 0x4e
 800d1b2:	f47f aed3 	bne.w	800cf5c <_strtod_l+0xbc>
 800d1b6:	499e      	ldr	r1, [pc, #632]	; (800d430 <_strtod_l+0x590>)
 800d1b8:	a81d      	add	r0, sp, #116	; 0x74
 800d1ba:	f002 f8c3 	bl	800f344 <__match>
 800d1be:	2800      	cmp	r0, #0
 800d1c0:	f43f aecc 	beq.w	800cf5c <_strtod_l+0xbc>
 800d1c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d1c6:	781b      	ldrb	r3, [r3, #0]
 800d1c8:	2b28      	cmp	r3, #40	; 0x28
 800d1ca:	d12d      	bne.n	800d228 <_strtod_l+0x388>
 800d1cc:	4999      	ldr	r1, [pc, #612]	; (800d434 <_strtod_l+0x594>)
 800d1ce:	aa20      	add	r2, sp, #128	; 0x80
 800d1d0:	a81d      	add	r0, sp, #116	; 0x74
 800d1d2:	f002 f8cb 	bl	800f36c <__hexnan>
 800d1d6:	2805      	cmp	r0, #5
 800d1d8:	d126      	bne.n	800d228 <_strtod_l+0x388>
 800d1da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1dc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800d1e0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d1e4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d1e8:	e69c      	b.n	800cf24 <_strtod_l+0x84>
 800d1ea:	210a      	movs	r1, #10
 800d1ec:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d1f0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d1f4:	e7b9      	b.n	800d16a <_strtod_l+0x2ca>
 800d1f6:	2b6e      	cmp	r3, #110	; 0x6e
 800d1f8:	e7db      	b.n	800d1b2 <_strtod_l+0x312>
 800d1fa:	498f      	ldr	r1, [pc, #572]	; (800d438 <_strtod_l+0x598>)
 800d1fc:	a81d      	add	r0, sp, #116	; 0x74
 800d1fe:	f002 f8a1 	bl	800f344 <__match>
 800d202:	2800      	cmp	r0, #0
 800d204:	f43f aeaa 	beq.w	800cf5c <_strtod_l+0xbc>
 800d208:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d20a:	498c      	ldr	r1, [pc, #560]	; (800d43c <_strtod_l+0x59c>)
 800d20c:	3b01      	subs	r3, #1
 800d20e:	a81d      	add	r0, sp, #116	; 0x74
 800d210:	931d      	str	r3, [sp, #116]	; 0x74
 800d212:	f002 f897 	bl	800f344 <__match>
 800d216:	b910      	cbnz	r0, 800d21e <_strtod_l+0x37e>
 800d218:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d21a:	3301      	adds	r3, #1
 800d21c:	931d      	str	r3, [sp, #116]	; 0x74
 800d21e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800d44c <_strtod_l+0x5ac>
 800d222:	f04f 0a00 	mov.w	sl, #0
 800d226:	e67d      	b.n	800cf24 <_strtod_l+0x84>
 800d228:	4885      	ldr	r0, [pc, #532]	; (800d440 <_strtod_l+0x5a0>)
 800d22a:	f003 f9ed 	bl	8010608 <nan>
 800d22e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d232:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d236:	e675      	b.n	800cf24 <_strtod_l+0x84>
 800d238:	9b07      	ldr	r3, [sp, #28]
 800d23a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d23c:	1af3      	subs	r3, r6, r3
 800d23e:	2f00      	cmp	r7, #0
 800d240:	bf08      	it	eq
 800d242:	462f      	moveq	r7, r5
 800d244:	2d10      	cmp	r5, #16
 800d246:	9308      	str	r3, [sp, #32]
 800d248:	46a8      	mov	r8, r5
 800d24a:	bfa8      	it	ge
 800d24c:	f04f 0810 	movge.w	r8, #16
 800d250:	f7f3 f988 	bl	8000564 <__aeabi_ui2d>
 800d254:	2d09      	cmp	r5, #9
 800d256:	4682      	mov	sl, r0
 800d258:	468b      	mov	fp, r1
 800d25a:	dd13      	ble.n	800d284 <_strtod_l+0x3e4>
 800d25c:	4b79      	ldr	r3, [pc, #484]	; (800d444 <_strtod_l+0x5a4>)
 800d25e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d262:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d266:	f7f3 f9f7 	bl	8000658 <__aeabi_dmul>
 800d26a:	4682      	mov	sl, r0
 800d26c:	4648      	mov	r0, r9
 800d26e:	468b      	mov	fp, r1
 800d270:	f7f3 f978 	bl	8000564 <__aeabi_ui2d>
 800d274:	4602      	mov	r2, r0
 800d276:	460b      	mov	r3, r1
 800d278:	4650      	mov	r0, sl
 800d27a:	4659      	mov	r1, fp
 800d27c:	f7f3 f836 	bl	80002ec <__adddf3>
 800d280:	4682      	mov	sl, r0
 800d282:	468b      	mov	fp, r1
 800d284:	2d0f      	cmp	r5, #15
 800d286:	dc38      	bgt.n	800d2fa <_strtod_l+0x45a>
 800d288:	9b08      	ldr	r3, [sp, #32]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	f43f ae4a 	beq.w	800cf24 <_strtod_l+0x84>
 800d290:	dd24      	ble.n	800d2dc <_strtod_l+0x43c>
 800d292:	2b16      	cmp	r3, #22
 800d294:	dc0b      	bgt.n	800d2ae <_strtod_l+0x40e>
 800d296:	4d6b      	ldr	r5, [pc, #428]	; (800d444 <_strtod_l+0x5a4>)
 800d298:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800d29c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d2a0:	4652      	mov	r2, sl
 800d2a2:	465b      	mov	r3, fp
 800d2a4:	f7f3 f9d8 	bl	8000658 <__aeabi_dmul>
 800d2a8:	4682      	mov	sl, r0
 800d2aa:	468b      	mov	fp, r1
 800d2ac:	e63a      	b.n	800cf24 <_strtod_l+0x84>
 800d2ae:	9a08      	ldr	r2, [sp, #32]
 800d2b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	db20      	blt.n	800d2fa <_strtod_l+0x45a>
 800d2b8:	4c62      	ldr	r4, [pc, #392]	; (800d444 <_strtod_l+0x5a4>)
 800d2ba:	f1c5 050f 	rsb	r5, r5, #15
 800d2be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d2c2:	4652      	mov	r2, sl
 800d2c4:	465b      	mov	r3, fp
 800d2c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2ca:	f7f3 f9c5 	bl	8000658 <__aeabi_dmul>
 800d2ce:	9b08      	ldr	r3, [sp, #32]
 800d2d0:	1b5d      	subs	r5, r3, r5
 800d2d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d2d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d2da:	e7e3      	b.n	800d2a4 <_strtod_l+0x404>
 800d2dc:	9b08      	ldr	r3, [sp, #32]
 800d2de:	3316      	adds	r3, #22
 800d2e0:	db0b      	blt.n	800d2fa <_strtod_l+0x45a>
 800d2e2:	9b07      	ldr	r3, [sp, #28]
 800d2e4:	4a57      	ldr	r2, [pc, #348]	; (800d444 <_strtod_l+0x5a4>)
 800d2e6:	1b9e      	subs	r6, r3, r6
 800d2e8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800d2ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d2f0:	4650      	mov	r0, sl
 800d2f2:	4659      	mov	r1, fp
 800d2f4:	f7f3 fada 	bl	80008ac <__aeabi_ddiv>
 800d2f8:	e7d6      	b.n	800d2a8 <_strtod_l+0x408>
 800d2fa:	9b08      	ldr	r3, [sp, #32]
 800d2fc:	eba5 0808 	sub.w	r8, r5, r8
 800d300:	4498      	add	r8, r3
 800d302:	f1b8 0f00 	cmp.w	r8, #0
 800d306:	dd71      	ble.n	800d3ec <_strtod_l+0x54c>
 800d308:	f018 030f 	ands.w	r3, r8, #15
 800d30c:	d00a      	beq.n	800d324 <_strtod_l+0x484>
 800d30e:	494d      	ldr	r1, [pc, #308]	; (800d444 <_strtod_l+0x5a4>)
 800d310:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d314:	4652      	mov	r2, sl
 800d316:	465b      	mov	r3, fp
 800d318:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d31c:	f7f3 f99c 	bl	8000658 <__aeabi_dmul>
 800d320:	4682      	mov	sl, r0
 800d322:	468b      	mov	fp, r1
 800d324:	f038 080f 	bics.w	r8, r8, #15
 800d328:	d04d      	beq.n	800d3c6 <_strtod_l+0x526>
 800d32a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d32e:	dd22      	ble.n	800d376 <_strtod_l+0x4d6>
 800d330:	2500      	movs	r5, #0
 800d332:	462e      	mov	r6, r5
 800d334:	9509      	str	r5, [sp, #36]	; 0x24
 800d336:	9507      	str	r5, [sp, #28]
 800d338:	2322      	movs	r3, #34	; 0x22
 800d33a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800d44c <_strtod_l+0x5ac>
 800d33e:	6023      	str	r3, [r4, #0]
 800d340:	f04f 0a00 	mov.w	sl, #0
 800d344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d346:	2b00      	cmp	r3, #0
 800d348:	f43f adec 	beq.w	800cf24 <_strtod_l+0x84>
 800d34c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d34e:	4620      	mov	r0, r4
 800d350:	f002 f96e 	bl	800f630 <_Bfree>
 800d354:	9907      	ldr	r1, [sp, #28]
 800d356:	4620      	mov	r0, r4
 800d358:	f002 f96a 	bl	800f630 <_Bfree>
 800d35c:	4631      	mov	r1, r6
 800d35e:	4620      	mov	r0, r4
 800d360:	f002 f966 	bl	800f630 <_Bfree>
 800d364:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d366:	4620      	mov	r0, r4
 800d368:	f002 f962 	bl	800f630 <_Bfree>
 800d36c:	4629      	mov	r1, r5
 800d36e:	4620      	mov	r0, r4
 800d370:	f002 f95e 	bl	800f630 <_Bfree>
 800d374:	e5d6      	b.n	800cf24 <_strtod_l+0x84>
 800d376:	2300      	movs	r3, #0
 800d378:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d37c:	4650      	mov	r0, sl
 800d37e:	4659      	mov	r1, fp
 800d380:	4699      	mov	r9, r3
 800d382:	f1b8 0f01 	cmp.w	r8, #1
 800d386:	dc21      	bgt.n	800d3cc <_strtod_l+0x52c>
 800d388:	b10b      	cbz	r3, 800d38e <_strtod_l+0x4ee>
 800d38a:	4682      	mov	sl, r0
 800d38c:	468b      	mov	fp, r1
 800d38e:	4b2e      	ldr	r3, [pc, #184]	; (800d448 <_strtod_l+0x5a8>)
 800d390:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d394:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d398:	4652      	mov	r2, sl
 800d39a:	465b      	mov	r3, fp
 800d39c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d3a0:	f7f3 f95a 	bl	8000658 <__aeabi_dmul>
 800d3a4:	4b29      	ldr	r3, [pc, #164]	; (800d44c <_strtod_l+0x5ac>)
 800d3a6:	460a      	mov	r2, r1
 800d3a8:	400b      	ands	r3, r1
 800d3aa:	4929      	ldr	r1, [pc, #164]	; (800d450 <_strtod_l+0x5b0>)
 800d3ac:	428b      	cmp	r3, r1
 800d3ae:	4682      	mov	sl, r0
 800d3b0:	d8be      	bhi.n	800d330 <_strtod_l+0x490>
 800d3b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d3b6:	428b      	cmp	r3, r1
 800d3b8:	bf86      	itte	hi
 800d3ba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800d454 <_strtod_l+0x5b4>
 800d3be:	f04f 3aff 	movhi.w	sl, #4294967295
 800d3c2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	9304      	str	r3, [sp, #16]
 800d3ca:	e081      	b.n	800d4d0 <_strtod_l+0x630>
 800d3cc:	f018 0f01 	tst.w	r8, #1
 800d3d0:	d007      	beq.n	800d3e2 <_strtod_l+0x542>
 800d3d2:	4b1d      	ldr	r3, [pc, #116]	; (800d448 <_strtod_l+0x5a8>)
 800d3d4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800d3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3dc:	f7f3 f93c 	bl	8000658 <__aeabi_dmul>
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	f109 0901 	add.w	r9, r9, #1
 800d3e6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d3ea:	e7ca      	b.n	800d382 <_strtod_l+0x4e2>
 800d3ec:	d0eb      	beq.n	800d3c6 <_strtod_l+0x526>
 800d3ee:	f1c8 0800 	rsb	r8, r8, #0
 800d3f2:	f018 020f 	ands.w	r2, r8, #15
 800d3f6:	d00a      	beq.n	800d40e <_strtod_l+0x56e>
 800d3f8:	4b12      	ldr	r3, [pc, #72]	; (800d444 <_strtod_l+0x5a4>)
 800d3fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d3fe:	4650      	mov	r0, sl
 800d400:	4659      	mov	r1, fp
 800d402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d406:	f7f3 fa51 	bl	80008ac <__aeabi_ddiv>
 800d40a:	4682      	mov	sl, r0
 800d40c:	468b      	mov	fp, r1
 800d40e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d412:	d0d8      	beq.n	800d3c6 <_strtod_l+0x526>
 800d414:	f1b8 0f1f 	cmp.w	r8, #31
 800d418:	dd1e      	ble.n	800d458 <_strtod_l+0x5b8>
 800d41a:	2500      	movs	r5, #0
 800d41c:	462e      	mov	r6, r5
 800d41e:	9509      	str	r5, [sp, #36]	; 0x24
 800d420:	9507      	str	r5, [sp, #28]
 800d422:	2322      	movs	r3, #34	; 0x22
 800d424:	f04f 0a00 	mov.w	sl, #0
 800d428:	f04f 0b00 	mov.w	fp, #0
 800d42c:	6023      	str	r3, [r4, #0]
 800d42e:	e789      	b.n	800d344 <_strtod_l+0x4a4>
 800d430:	08011d09 	.word	0x08011d09
 800d434:	08011d44 	.word	0x08011d44
 800d438:	08011d01 	.word	0x08011d01
 800d43c:	08011e84 	.word	0x08011e84
 800d440:	080121a0 	.word	0x080121a0
 800d444:	08012080 	.word	0x08012080
 800d448:	08012058 	.word	0x08012058
 800d44c:	7ff00000 	.word	0x7ff00000
 800d450:	7ca00000 	.word	0x7ca00000
 800d454:	7fefffff 	.word	0x7fefffff
 800d458:	f018 0310 	ands.w	r3, r8, #16
 800d45c:	bf18      	it	ne
 800d45e:	236a      	movne	r3, #106	; 0x6a
 800d460:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800d818 <_strtod_l+0x978>
 800d464:	9304      	str	r3, [sp, #16]
 800d466:	4650      	mov	r0, sl
 800d468:	4659      	mov	r1, fp
 800d46a:	2300      	movs	r3, #0
 800d46c:	f018 0f01 	tst.w	r8, #1
 800d470:	d004      	beq.n	800d47c <_strtod_l+0x5dc>
 800d472:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d476:	f7f3 f8ef 	bl	8000658 <__aeabi_dmul>
 800d47a:	2301      	movs	r3, #1
 800d47c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d480:	f109 0908 	add.w	r9, r9, #8
 800d484:	d1f2      	bne.n	800d46c <_strtod_l+0x5cc>
 800d486:	b10b      	cbz	r3, 800d48c <_strtod_l+0x5ec>
 800d488:	4682      	mov	sl, r0
 800d48a:	468b      	mov	fp, r1
 800d48c:	9b04      	ldr	r3, [sp, #16]
 800d48e:	b1bb      	cbz	r3, 800d4c0 <_strtod_l+0x620>
 800d490:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800d494:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d498:	2b00      	cmp	r3, #0
 800d49a:	4659      	mov	r1, fp
 800d49c:	dd10      	ble.n	800d4c0 <_strtod_l+0x620>
 800d49e:	2b1f      	cmp	r3, #31
 800d4a0:	f340 8128 	ble.w	800d6f4 <_strtod_l+0x854>
 800d4a4:	2b34      	cmp	r3, #52	; 0x34
 800d4a6:	bfde      	ittt	le
 800d4a8:	3b20      	suble	r3, #32
 800d4aa:	f04f 32ff 	movle.w	r2, #4294967295
 800d4ae:	fa02 f303 	lslle.w	r3, r2, r3
 800d4b2:	f04f 0a00 	mov.w	sl, #0
 800d4b6:	bfcc      	ite	gt
 800d4b8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d4bc:	ea03 0b01 	andle.w	fp, r3, r1
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	4650      	mov	r0, sl
 800d4c6:	4659      	mov	r1, fp
 800d4c8:	f7f3 fb2e 	bl	8000b28 <__aeabi_dcmpeq>
 800d4cc:	2800      	cmp	r0, #0
 800d4ce:	d1a4      	bne.n	800d41a <_strtod_l+0x57a>
 800d4d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4d2:	9300      	str	r3, [sp, #0]
 800d4d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d4d6:	462b      	mov	r3, r5
 800d4d8:	463a      	mov	r2, r7
 800d4da:	4620      	mov	r0, r4
 800d4dc:	f002 f914 	bl	800f708 <__s2b>
 800d4e0:	9009      	str	r0, [sp, #36]	; 0x24
 800d4e2:	2800      	cmp	r0, #0
 800d4e4:	f43f af24 	beq.w	800d330 <_strtod_l+0x490>
 800d4e8:	9b07      	ldr	r3, [sp, #28]
 800d4ea:	1b9e      	subs	r6, r3, r6
 800d4ec:	9b08      	ldr	r3, [sp, #32]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	bfb4      	ite	lt
 800d4f2:	4633      	movlt	r3, r6
 800d4f4:	2300      	movge	r3, #0
 800d4f6:	9310      	str	r3, [sp, #64]	; 0x40
 800d4f8:	9b08      	ldr	r3, [sp, #32]
 800d4fa:	2500      	movs	r5, #0
 800d4fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d500:	9318      	str	r3, [sp, #96]	; 0x60
 800d502:	462e      	mov	r6, r5
 800d504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d506:	4620      	mov	r0, r4
 800d508:	6859      	ldr	r1, [r3, #4]
 800d50a:	f002 f851 	bl	800f5b0 <_Balloc>
 800d50e:	9007      	str	r0, [sp, #28]
 800d510:	2800      	cmp	r0, #0
 800d512:	f43f af11 	beq.w	800d338 <_strtod_l+0x498>
 800d516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d518:	691a      	ldr	r2, [r3, #16]
 800d51a:	3202      	adds	r2, #2
 800d51c:	f103 010c 	add.w	r1, r3, #12
 800d520:	0092      	lsls	r2, r2, #2
 800d522:	300c      	adds	r0, #12
 800d524:	f7fe ff70 	bl	800c408 <memcpy>
 800d528:	ec4b ab10 	vmov	d0, sl, fp
 800d52c:	aa20      	add	r2, sp, #128	; 0x80
 800d52e:	a91f      	add	r1, sp, #124	; 0x7c
 800d530:	4620      	mov	r0, r4
 800d532:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800d536:	f002 fc23 	bl	800fd80 <__d2b>
 800d53a:	901e      	str	r0, [sp, #120]	; 0x78
 800d53c:	2800      	cmp	r0, #0
 800d53e:	f43f aefb 	beq.w	800d338 <_strtod_l+0x498>
 800d542:	2101      	movs	r1, #1
 800d544:	4620      	mov	r0, r4
 800d546:	f002 f979 	bl	800f83c <__i2b>
 800d54a:	4606      	mov	r6, r0
 800d54c:	2800      	cmp	r0, #0
 800d54e:	f43f aef3 	beq.w	800d338 <_strtod_l+0x498>
 800d552:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d554:	9904      	ldr	r1, [sp, #16]
 800d556:	2b00      	cmp	r3, #0
 800d558:	bfab      	itete	ge
 800d55a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800d55c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800d55e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800d560:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800d564:	bfac      	ite	ge
 800d566:	eb03 0902 	addge.w	r9, r3, r2
 800d56a:	1ad7      	sublt	r7, r2, r3
 800d56c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d56e:	eba3 0801 	sub.w	r8, r3, r1
 800d572:	4490      	add	r8, r2
 800d574:	4ba3      	ldr	r3, [pc, #652]	; (800d804 <_strtod_l+0x964>)
 800d576:	f108 38ff 	add.w	r8, r8, #4294967295
 800d57a:	4598      	cmp	r8, r3
 800d57c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d580:	f280 80cc 	bge.w	800d71c <_strtod_l+0x87c>
 800d584:	eba3 0308 	sub.w	r3, r3, r8
 800d588:	2b1f      	cmp	r3, #31
 800d58a:	eba2 0203 	sub.w	r2, r2, r3
 800d58e:	f04f 0101 	mov.w	r1, #1
 800d592:	f300 80b6 	bgt.w	800d702 <_strtod_l+0x862>
 800d596:	fa01 f303 	lsl.w	r3, r1, r3
 800d59a:	9311      	str	r3, [sp, #68]	; 0x44
 800d59c:	2300      	movs	r3, #0
 800d59e:	930c      	str	r3, [sp, #48]	; 0x30
 800d5a0:	eb09 0802 	add.w	r8, r9, r2
 800d5a4:	9b04      	ldr	r3, [sp, #16]
 800d5a6:	45c1      	cmp	r9, r8
 800d5a8:	4417      	add	r7, r2
 800d5aa:	441f      	add	r7, r3
 800d5ac:	464b      	mov	r3, r9
 800d5ae:	bfa8      	it	ge
 800d5b0:	4643      	movge	r3, r8
 800d5b2:	42bb      	cmp	r3, r7
 800d5b4:	bfa8      	it	ge
 800d5b6:	463b      	movge	r3, r7
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	bfc2      	ittt	gt
 800d5bc:	eba8 0803 	subgt.w	r8, r8, r3
 800d5c0:	1aff      	subgt	r7, r7, r3
 800d5c2:	eba9 0903 	subgt.w	r9, r9, r3
 800d5c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	dd17      	ble.n	800d5fc <_strtod_l+0x75c>
 800d5cc:	4631      	mov	r1, r6
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	4620      	mov	r0, r4
 800d5d2:	f002 f9ef 	bl	800f9b4 <__pow5mult>
 800d5d6:	4606      	mov	r6, r0
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	f43f aead 	beq.w	800d338 <_strtod_l+0x498>
 800d5de:	4601      	mov	r1, r0
 800d5e0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d5e2:	4620      	mov	r0, r4
 800d5e4:	f002 f940 	bl	800f868 <__multiply>
 800d5e8:	900f      	str	r0, [sp, #60]	; 0x3c
 800d5ea:	2800      	cmp	r0, #0
 800d5ec:	f43f aea4 	beq.w	800d338 <_strtod_l+0x498>
 800d5f0:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d5f2:	4620      	mov	r0, r4
 800d5f4:	f002 f81c 	bl	800f630 <_Bfree>
 800d5f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d5fa:	931e      	str	r3, [sp, #120]	; 0x78
 800d5fc:	f1b8 0f00 	cmp.w	r8, #0
 800d600:	f300 8091 	bgt.w	800d726 <_strtod_l+0x886>
 800d604:	9b08      	ldr	r3, [sp, #32]
 800d606:	2b00      	cmp	r3, #0
 800d608:	dd08      	ble.n	800d61c <_strtod_l+0x77c>
 800d60a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d60c:	9907      	ldr	r1, [sp, #28]
 800d60e:	4620      	mov	r0, r4
 800d610:	f002 f9d0 	bl	800f9b4 <__pow5mult>
 800d614:	9007      	str	r0, [sp, #28]
 800d616:	2800      	cmp	r0, #0
 800d618:	f43f ae8e 	beq.w	800d338 <_strtod_l+0x498>
 800d61c:	2f00      	cmp	r7, #0
 800d61e:	dd08      	ble.n	800d632 <_strtod_l+0x792>
 800d620:	9907      	ldr	r1, [sp, #28]
 800d622:	463a      	mov	r2, r7
 800d624:	4620      	mov	r0, r4
 800d626:	f002 fa1f 	bl	800fa68 <__lshift>
 800d62a:	9007      	str	r0, [sp, #28]
 800d62c:	2800      	cmp	r0, #0
 800d62e:	f43f ae83 	beq.w	800d338 <_strtod_l+0x498>
 800d632:	f1b9 0f00 	cmp.w	r9, #0
 800d636:	dd08      	ble.n	800d64a <_strtod_l+0x7aa>
 800d638:	4631      	mov	r1, r6
 800d63a:	464a      	mov	r2, r9
 800d63c:	4620      	mov	r0, r4
 800d63e:	f002 fa13 	bl	800fa68 <__lshift>
 800d642:	4606      	mov	r6, r0
 800d644:	2800      	cmp	r0, #0
 800d646:	f43f ae77 	beq.w	800d338 <_strtod_l+0x498>
 800d64a:	9a07      	ldr	r2, [sp, #28]
 800d64c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d64e:	4620      	mov	r0, r4
 800d650:	f002 fa92 	bl	800fb78 <__mdiff>
 800d654:	4605      	mov	r5, r0
 800d656:	2800      	cmp	r0, #0
 800d658:	f43f ae6e 	beq.w	800d338 <_strtod_l+0x498>
 800d65c:	68c3      	ldr	r3, [r0, #12]
 800d65e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d660:	2300      	movs	r3, #0
 800d662:	60c3      	str	r3, [r0, #12]
 800d664:	4631      	mov	r1, r6
 800d666:	f002 fa6b 	bl	800fb40 <__mcmp>
 800d66a:	2800      	cmp	r0, #0
 800d66c:	da65      	bge.n	800d73a <_strtod_l+0x89a>
 800d66e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d670:	ea53 030a 	orrs.w	r3, r3, sl
 800d674:	f040 8087 	bne.w	800d786 <_strtod_l+0x8e6>
 800d678:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	f040 8082 	bne.w	800d786 <_strtod_l+0x8e6>
 800d682:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d686:	0d1b      	lsrs	r3, r3, #20
 800d688:	051b      	lsls	r3, r3, #20
 800d68a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d68e:	d97a      	bls.n	800d786 <_strtod_l+0x8e6>
 800d690:	696b      	ldr	r3, [r5, #20]
 800d692:	b913      	cbnz	r3, 800d69a <_strtod_l+0x7fa>
 800d694:	692b      	ldr	r3, [r5, #16]
 800d696:	2b01      	cmp	r3, #1
 800d698:	dd75      	ble.n	800d786 <_strtod_l+0x8e6>
 800d69a:	4629      	mov	r1, r5
 800d69c:	2201      	movs	r2, #1
 800d69e:	4620      	mov	r0, r4
 800d6a0:	f002 f9e2 	bl	800fa68 <__lshift>
 800d6a4:	4631      	mov	r1, r6
 800d6a6:	4605      	mov	r5, r0
 800d6a8:	f002 fa4a 	bl	800fb40 <__mcmp>
 800d6ac:	2800      	cmp	r0, #0
 800d6ae:	dd6a      	ble.n	800d786 <_strtod_l+0x8e6>
 800d6b0:	9904      	ldr	r1, [sp, #16]
 800d6b2:	4a55      	ldr	r2, [pc, #340]	; (800d808 <_strtod_l+0x968>)
 800d6b4:	465b      	mov	r3, fp
 800d6b6:	2900      	cmp	r1, #0
 800d6b8:	f000 8085 	beq.w	800d7c6 <_strtod_l+0x926>
 800d6bc:	ea02 010b 	and.w	r1, r2, fp
 800d6c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d6c4:	dc7f      	bgt.n	800d7c6 <_strtod_l+0x926>
 800d6c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d6ca:	f77f aeaa 	ble.w	800d422 <_strtod_l+0x582>
 800d6ce:	4a4f      	ldr	r2, [pc, #316]	; (800d80c <_strtod_l+0x96c>)
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800d6d6:	4650      	mov	r0, sl
 800d6d8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800d6dc:	4659      	mov	r1, fp
 800d6de:	f7f2 ffbb 	bl	8000658 <__aeabi_dmul>
 800d6e2:	460b      	mov	r3, r1
 800d6e4:	4303      	orrs	r3, r0
 800d6e6:	bf08      	it	eq
 800d6e8:	2322      	moveq	r3, #34	; 0x22
 800d6ea:	4682      	mov	sl, r0
 800d6ec:	468b      	mov	fp, r1
 800d6ee:	bf08      	it	eq
 800d6f0:	6023      	streq	r3, [r4, #0]
 800d6f2:	e62b      	b.n	800d34c <_strtod_l+0x4ac>
 800d6f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d6f8:	fa02 f303 	lsl.w	r3, r2, r3
 800d6fc:	ea03 0a0a 	and.w	sl, r3, sl
 800d700:	e6de      	b.n	800d4c0 <_strtod_l+0x620>
 800d702:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d706:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d70a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d70e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d712:	fa01 f308 	lsl.w	r3, r1, r8
 800d716:	930c      	str	r3, [sp, #48]	; 0x30
 800d718:	9111      	str	r1, [sp, #68]	; 0x44
 800d71a:	e741      	b.n	800d5a0 <_strtod_l+0x700>
 800d71c:	2300      	movs	r3, #0
 800d71e:	930c      	str	r3, [sp, #48]	; 0x30
 800d720:	2301      	movs	r3, #1
 800d722:	9311      	str	r3, [sp, #68]	; 0x44
 800d724:	e73c      	b.n	800d5a0 <_strtod_l+0x700>
 800d726:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d728:	4642      	mov	r2, r8
 800d72a:	4620      	mov	r0, r4
 800d72c:	f002 f99c 	bl	800fa68 <__lshift>
 800d730:	901e      	str	r0, [sp, #120]	; 0x78
 800d732:	2800      	cmp	r0, #0
 800d734:	f47f af66 	bne.w	800d604 <_strtod_l+0x764>
 800d738:	e5fe      	b.n	800d338 <_strtod_l+0x498>
 800d73a:	465f      	mov	r7, fp
 800d73c:	d16e      	bne.n	800d81c <_strtod_l+0x97c>
 800d73e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d740:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d744:	b342      	cbz	r2, 800d798 <_strtod_l+0x8f8>
 800d746:	4a32      	ldr	r2, [pc, #200]	; (800d810 <_strtod_l+0x970>)
 800d748:	4293      	cmp	r3, r2
 800d74a:	d128      	bne.n	800d79e <_strtod_l+0x8fe>
 800d74c:	9b04      	ldr	r3, [sp, #16]
 800d74e:	4650      	mov	r0, sl
 800d750:	b1eb      	cbz	r3, 800d78e <_strtod_l+0x8ee>
 800d752:	4a2d      	ldr	r2, [pc, #180]	; (800d808 <_strtod_l+0x968>)
 800d754:	403a      	ands	r2, r7
 800d756:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d75a:	f04f 31ff 	mov.w	r1, #4294967295
 800d75e:	d819      	bhi.n	800d794 <_strtod_l+0x8f4>
 800d760:	0d12      	lsrs	r2, r2, #20
 800d762:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d766:	fa01 f303 	lsl.w	r3, r1, r3
 800d76a:	4298      	cmp	r0, r3
 800d76c:	d117      	bne.n	800d79e <_strtod_l+0x8fe>
 800d76e:	4b29      	ldr	r3, [pc, #164]	; (800d814 <_strtod_l+0x974>)
 800d770:	429f      	cmp	r7, r3
 800d772:	d102      	bne.n	800d77a <_strtod_l+0x8da>
 800d774:	3001      	adds	r0, #1
 800d776:	f43f addf 	beq.w	800d338 <_strtod_l+0x498>
 800d77a:	4b23      	ldr	r3, [pc, #140]	; (800d808 <_strtod_l+0x968>)
 800d77c:	403b      	ands	r3, r7
 800d77e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d782:	f04f 0a00 	mov.w	sl, #0
 800d786:	9b04      	ldr	r3, [sp, #16]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d1a0      	bne.n	800d6ce <_strtod_l+0x82e>
 800d78c:	e5de      	b.n	800d34c <_strtod_l+0x4ac>
 800d78e:	f04f 33ff 	mov.w	r3, #4294967295
 800d792:	e7ea      	b.n	800d76a <_strtod_l+0x8ca>
 800d794:	460b      	mov	r3, r1
 800d796:	e7e8      	b.n	800d76a <_strtod_l+0x8ca>
 800d798:	ea53 030a 	orrs.w	r3, r3, sl
 800d79c:	d088      	beq.n	800d6b0 <_strtod_l+0x810>
 800d79e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d7a0:	b1db      	cbz	r3, 800d7da <_strtod_l+0x93a>
 800d7a2:	423b      	tst	r3, r7
 800d7a4:	d0ef      	beq.n	800d786 <_strtod_l+0x8e6>
 800d7a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d7a8:	9a04      	ldr	r2, [sp, #16]
 800d7aa:	4650      	mov	r0, sl
 800d7ac:	4659      	mov	r1, fp
 800d7ae:	b1c3      	cbz	r3, 800d7e2 <_strtod_l+0x942>
 800d7b0:	f7ff fb58 	bl	800ce64 <sulp>
 800d7b4:	4602      	mov	r2, r0
 800d7b6:	460b      	mov	r3, r1
 800d7b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d7bc:	f7f2 fd96 	bl	80002ec <__adddf3>
 800d7c0:	4682      	mov	sl, r0
 800d7c2:	468b      	mov	fp, r1
 800d7c4:	e7df      	b.n	800d786 <_strtod_l+0x8e6>
 800d7c6:	4013      	ands	r3, r2
 800d7c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d7cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d7d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d7d4:	f04f 3aff 	mov.w	sl, #4294967295
 800d7d8:	e7d5      	b.n	800d786 <_strtod_l+0x8e6>
 800d7da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d7dc:	ea13 0f0a 	tst.w	r3, sl
 800d7e0:	e7e0      	b.n	800d7a4 <_strtod_l+0x904>
 800d7e2:	f7ff fb3f 	bl	800ce64 <sulp>
 800d7e6:	4602      	mov	r2, r0
 800d7e8:	460b      	mov	r3, r1
 800d7ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d7ee:	f7f2 fd7b 	bl	80002e8 <__aeabi_dsub>
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	4682      	mov	sl, r0
 800d7f8:	468b      	mov	fp, r1
 800d7fa:	f7f3 f995 	bl	8000b28 <__aeabi_dcmpeq>
 800d7fe:	2800      	cmp	r0, #0
 800d800:	d0c1      	beq.n	800d786 <_strtod_l+0x8e6>
 800d802:	e60e      	b.n	800d422 <_strtod_l+0x582>
 800d804:	fffffc02 	.word	0xfffffc02
 800d808:	7ff00000 	.word	0x7ff00000
 800d80c:	39500000 	.word	0x39500000
 800d810:	000fffff 	.word	0x000fffff
 800d814:	7fefffff 	.word	0x7fefffff
 800d818:	08011d58 	.word	0x08011d58
 800d81c:	4631      	mov	r1, r6
 800d81e:	4628      	mov	r0, r5
 800d820:	f002 fb0a 	bl	800fe38 <__ratio>
 800d824:	ec59 8b10 	vmov	r8, r9, d0
 800d828:	ee10 0a10 	vmov	r0, s0
 800d82c:	2200      	movs	r2, #0
 800d82e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d832:	4649      	mov	r1, r9
 800d834:	f7f3 f98c 	bl	8000b50 <__aeabi_dcmple>
 800d838:	2800      	cmp	r0, #0
 800d83a:	d07c      	beq.n	800d936 <_strtod_l+0xa96>
 800d83c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d04c      	beq.n	800d8dc <_strtod_l+0xa3c>
 800d842:	4b95      	ldr	r3, [pc, #596]	; (800da98 <_strtod_l+0xbf8>)
 800d844:	2200      	movs	r2, #0
 800d846:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d84a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800da98 <_strtod_l+0xbf8>
 800d84e:	f04f 0800 	mov.w	r8, #0
 800d852:	4b92      	ldr	r3, [pc, #584]	; (800da9c <_strtod_l+0xbfc>)
 800d854:	403b      	ands	r3, r7
 800d856:	9311      	str	r3, [sp, #68]	; 0x44
 800d858:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d85a:	4b91      	ldr	r3, [pc, #580]	; (800daa0 <_strtod_l+0xc00>)
 800d85c:	429a      	cmp	r2, r3
 800d85e:	f040 80b2 	bne.w	800d9c6 <_strtod_l+0xb26>
 800d862:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d866:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d86a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d86e:	ec4b ab10 	vmov	d0, sl, fp
 800d872:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800d876:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d87a:	f002 fa05 	bl	800fc88 <__ulp>
 800d87e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d882:	ec53 2b10 	vmov	r2, r3, d0
 800d886:	f7f2 fee7 	bl	8000658 <__aeabi_dmul>
 800d88a:	4652      	mov	r2, sl
 800d88c:	465b      	mov	r3, fp
 800d88e:	f7f2 fd2d 	bl	80002ec <__adddf3>
 800d892:	460b      	mov	r3, r1
 800d894:	4981      	ldr	r1, [pc, #516]	; (800da9c <_strtod_l+0xbfc>)
 800d896:	4a83      	ldr	r2, [pc, #524]	; (800daa4 <_strtod_l+0xc04>)
 800d898:	4019      	ands	r1, r3
 800d89a:	4291      	cmp	r1, r2
 800d89c:	4682      	mov	sl, r0
 800d89e:	d95e      	bls.n	800d95e <_strtod_l+0xabe>
 800d8a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8a2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d103      	bne.n	800d8b2 <_strtod_l+0xa12>
 800d8aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8ac:	3301      	adds	r3, #1
 800d8ae:	f43f ad43 	beq.w	800d338 <_strtod_l+0x498>
 800d8b2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800dab0 <_strtod_l+0xc10>
 800d8b6:	f04f 3aff 	mov.w	sl, #4294967295
 800d8ba:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d8bc:	4620      	mov	r0, r4
 800d8be:	f001 feb7 	bl	800f630 <_Bfree>
 800d8c2:	9907      	ldr	r1, [sp, #28]
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	f001 feb3 	bl	800f630 <_Bfree>
 800d8ca:	4631      	mov	r1, r6
 800d8cc:	4620      	mov	r0, r4
 800d8ce:	f001 feaf 	bl	800f630 <_Bfree>
 800d8d2:	4629      	mov	r1, r5
 800d8d4:	4620      	mov	r0, r4
 800d8d6:	f001 feab 	bl	800f630 <_Bfree>
 800d8da:	e613      	b.n	800d504 <_strtod_l+0x664>
 800d8dc:	f1ba 0f00 	cmp.w	sl, #0
 800d8e0:	d11b      	bne.n	800d91a <_strtod_l+0xa7a>
 800d8e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d8e6:	b9f3      	cbnz	r3, 800d926 <_strtod_l+0xa86>
 800d8e8:	4b6b      	ldr	r3, [pc, #428]	; (800da98 <_strtod_l+0xbf8>)
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	4640      	mov	r0, r8
 800d8ee:	4649      	mov	r1, r9
 800d8f0:	f7f3 f924 	bl	8000b3c <__aeabi_dcmplt>
 800d8f4:	b9d0      	cbnz	r0, 800d92c <_strtod_l+0xa8c>
 800d8f6:	4640      	mov	r0, r8
 800d8f8:	4649      	mov	r1, r9
 800d8fa:	4b6b      	ldr	r3, [pc, #428]	; (800daa8 <_strtod_l+0xc08>)
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	f7f2 feab 	bl	8000658 <__aeabi_dmul>
 800d902:	4680      	mov	r8, r0
 800d904:	4689      	mov	r9, r1
 800d906:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d90a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800d90e:	931b      	str	r3, [sp, #108]	; 0x6c
 800d910:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800d914:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d918:	e79b      	b.n	800d852 <_strtod_l+0x9b2>
 800d91a:	f1ba 0f01 	cmp.w	sl, #1
 800d91e:	d102      	bne.n	800d926 <_strtod_l+0xa86>
 800d920:	2f00      	cmp	r7, #0
 800d922:	f43f ad7e 	beq.w	800d422 <_strtod_l+0x582>
 800d926:	4b61      	ldr	r3, [pc, #388]	; (800daac <_strtod_l+0xc0c>)
 800d928:	2200      	movs	r2, #0
 800d92a:	e78c      	b.n	800d846 <_strtod_l+0x9a6>
 800d92c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800daa8 <_strtod_l+0xc08>
 800d930:	f04f 0800 	mov.w	r8, #0
 800d934:	e7e7      	b.n	800d906 <_strtod_l+0xa66>
 800d936:	4b5c      	ldr	r3, [pc, #368]	; (800daa8 <_strtod_l+0xc08>)
 800d938:	4640      	mov	r0, r8
 800d93a:	4649      	mov	r1, r9
 800d93c:	2200      	movs	r2, #0
 800d93e:	f7f2 fe8b 	bl	8000658 <__aeabi_dmul>
 800d942:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d944:	4680      	mov	r8, r0
 800d946:	4689      	mov	r9, r1
 800d948:	b933      	cbnz	r3, 800d958 <_strtod_l+0xab8>
 800d94a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d94e:	9012      	str	r0, [sp, #72]	; 0x48
 800d950:	9313      	str	r3, [sp, #76]	; 0x4c
 800d952:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800d956:	e7dd      	b.n	800d914 <_strtod_l+0xa74>
 800d958:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800d95c:	e7f9      	b.n	800d952 <_strtod_l+0xab2>
 800d95e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d962:	9b04      	ldr	r3, [sp, #16]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d1a8      	bne.n	800d8ba <_strtod_l+0xa1a>
 800d968:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d96c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d96e:	0d1b      	lsrs	r3, r3, #20
 800d970:	051b      	lsls	r3, r3, #20
 800d972:	429a      	cmp	r2, r3
 800d974:	d1a1      	bne.n	800d8ba <_strtod_l+0xa1a>
 800d976:	4640      	mov	r0, r8
 800d978:	4649      	mov	r1, r9
 800d97a:	f7f3 f9cd 	bl	8000d18 <__aeabi_d2lz>
 800d97e:	f7f2 fe3d 	bl	80005fc <__aeabi_l2d>
 800d982:	4602      	mov	r2, r0
 800d984:	460b      	mov	r3, r1
 800d986:	4640      	mov	r0, r8
 800d988:	4649      	mov	r1, r9
 800d98a:	f7f2 fcad 	bl	80002e8 <__aeabi_dsub>
 800d98e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d990:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d994:	ea43 030a 	orr.w	r3, r3, sl
 800d998:	4313      	orrs	r3, r2
 800d99a:	4680      	mov	r8, r0
 800d99c:	4689      	mov	r9, r1
 800d99e:	d053      	beq.n	800da48 <_strtod_l+0xba8>
 800d9a0:	a335      	add	r3, pc, #212	; (adr r3, 800da78 <_strtod_l+0xbd8>)
 800d9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a6:	f7f3 f8c9 	bl	8000b3c <__aeabi_dcmplt>
 800d9aa:	2800      	cmp	r0, #0
 800d9ac:	f47f acce 	bne.w	800d34c <_strtod_l+0x4ac>
 800d9b0:	a333      	add	r3, pc, #204	; (adr r3, 800da80 <_strtod_l+0xbe0>)
 800d9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b6:	4640      	mov	r0, r8
 800d9b8:	4649      	mov	r1, r9
 800d9ba:	f7f3 f8dd 	bl	8000b78 <__aeabi_dcmpgt>
 800d9be:	2800      	cmp	r0, #0
 800d9c0:	f43f af7b 	beq.w	800d8ba <_strtod_l+0xa1a>
 800d9c4:	e4c2      	b.n	800d34c <_strtod_l+0x4ac>
 800d9c6:	9b04      	ldr	r3, [sp, #16]
 800d9c8:	b333      	cbz	r3, 800da18 <_strtod_l+0xb78>
 800d9ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d9cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d9d0:	d822      	bhi.n	800da18 <_strtod_l+0xb78>
 800d9d2:	a32d      	add	r3, pc, #180	; (adr r3, 800da88 <_strtod_l+0xbe8>)
 800d9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d8:	4640      	mov	r0, r8
 800d9da:	4649      	mov	r1, r9
 800d9dc:	f7f3 f8b8 	bl	8000b50 <__aeabi_dcmple>
 800d9e0:	b1a0      	cbz	r0, 800da0c <_strtod_l+0xb6c>
 800d9e2:	4649      	mov	r1, r9
 800d9e4:	4640      	mov	r0, r8
 800d9e6:	f7f3 f90f 	bl	8000c08 <__aeabi_d2uiz>
 800d9ea:	2801      	cmp	r0, #1
 800d9ec:	bf38      	it	cc
 800d9ee:	2001      	movcc	r0, #1
 800d9f0:	f7f2 fdb8 	bl	8000564 <__aeabi_ui2d>
 800d9f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d9f6:	4680      	mov	r8, r0
 800d9f8:	4689      	mov	r9, r1
 800d9fa:	bb13      	cbnz	r3, 800da42 <_strtod_l+0xba2>
 800d9fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da00:	9014      	str	r0, [sp, #80]	; 0x50
 800da02:	9315      	str	r3, [sp, #84]	; 0x54
 800da04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800da08:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800da0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800da10:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800da14:	1a9b      	subs	r3, r3, r2
 800da16:	930d      	str	r3, [sp, #52]	; 0x34
 800da18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800da1c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800da20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800da24:	f002 f930 	bl	800fc88 <__ulp>
 800da28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800da2c:	ec53 2b10 	vmov	r2, r3, d0
 800da30:	f7f2 fe12 	bl	8000658 <__aeabi_dmul>
 800da34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800da38:	f7f2 fc58 	bl	80002ec <__adddf3>
 800da3c:	4682      	mov	sl, r0
 800da3e:	468b      	mov	fp, r1
 800da40:	e78f      	b.n	800d962 <_strtod_l+0xac2>
 800da42:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800da46:	e7dd      	b.n	800da04 <_strtod_l+0xb64>
 800da48:	a311      	add	r3, pc, #68	; (adr r3, 800da90 <_strtod_l+0xbf0>)
 800da4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da4e:	f7f3 f875 	bl	8000b3c <__aeabi_dcmplt>
 800da52:	e7b4      	b.n	800d9be <_strtod_l+0xb1e>
 800da54:	2300      	movs	r3, #0
 800da56:	930e      	str	r3, [sp, #56]	; 0x38
 800da58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800da5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800da5c:	6013      	str	r3, [r2, #0]
 800da5e:	f7ff ba65 	b.w	800cf2c <_strtod_l+0x8c>
 800da62:	2b65      	cmp	r3, #101	; 0x65
 800da64:	f43f ab5d 	beq.w	800d122 <_strtod_l+0x282>
 800da68:	2b45      	cmp	r3, #69	; 0x45
 800da6a:	f43f ab5a 	beq.w	800d122 <_strtod_l+0x282>
 800da6e:	2201      	movs	r2, #1
 800da70:	f7ff bb92 	b.w	800d198 <_strtod_l+0x2f8>
 800da74:	f3af 8000 	nop.w
 800da78:	94a03595 	.word	0x94a03595
 800da7c:	3fdfffff 	.word	0x3fdfffff
 800da80:	35afe535 	.word	0x35afe535
 800da84:	3fe00000 	.word	0x3fe00000
 800da88:	ffc00000 	.word	0xffc00000
 800da8c:	41dfffff 	.word	0x41dfffff
 800da90:	94a03595 	.word	0x94a03595
 800da94:	3fcfffff 	.word	0x3fcfffff
 800da98:	3ff00000 	.word	0x3ff00000
 800da9c:	7ff00000 	.word	0x7ff00000
 800daa0:	7fe00000 	.word	0x7fe00000
 800daa4:	7c9fffff 	.word	0x7c9fffff
 800daa8:	3fe00000 	.word	0x3fe00000
 800daac:	bff00000 	.word	0xbff00000
 800dab0:	7fefffff 	.word	0x7fefffff

0800dab4 <strtod>:
 800dab4:	460a      	mov	r2, r1
 800dab6:	4601      	mov	r1, r0
 800dab8:	4802      	ldr	r0, [pc, #8]	; (800dac4 <strtod+0x10>)
 800daba:	4b03      	ldr	r3, [pc, #12]	; (800dac8 <strtod+0x14>)
 800dabc:	6800      	ldr	r0, [r0, #0]
 800dabe:	f7ff b9ef 	b.w	800cea0 <_strtod_l>
 800dac2:	bf00      	nop
 800dac4:	2000004c 	.word	0x2000004c
 800dac8:	200000b4 	.word	0x200000b4

0800dacc <_strtol_l.isra.0>:
 800dacc:	2b01      	cmp	r3, #1
 800dace:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dad2:	d001      	beq.n	800dad8 <_strtol_l.isra.0+0xc>
 800dad4:	2b24      	cmp	r3, #36	; 0x24
 800dad6:	d906      	bls.n	800dae6 <_strtol_l.isra.0+0x1a>
 800dad8:	f7fe fc6c 	bl	800c3b4 <__errno>
 800dadc:	2316      	movs	r3, #22
 800dade:	6003      	str	r3, [r0, #0]
 800dae0:	2000      	movs	r0, #0
 800dae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dae6:	4f3a      	ldr	r7, [pc, #232]	; (800dbd0 <_strtol_l.isra.0+0x104>)
 800dae8:	468e      	mov	lr, r1
 800daea:	4676      	mov	r6, lr
 800daec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800daf0:	5de5      	ldrb	r5, [r4, r7]
 800daf2:	f015 0508 	ands.w	r5, r5, #8
 800daf6:	d1f8      	bne.n	800daea <_strtol_l.isra.0+0x1e>
 800daf8:	2c2d      	cmp	r4, #45	; 0x2d
 800dafa:	d134      	bne.n	800db66 <_strtol_l.isra.0+0x9a>
 800dafc:	f89e 4000 	ldrb.w	r4, [lr]
 800db00:	f04f 0801 	mov.w	r8, #1
 800db04:	f106 0e02 	add.w	lr, r6, #2
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d05c      	beq.n	800dbc6 <_strtol_l.isra.0+0xfa>
 800db0c:	2b10      	cmp	r3, #16
 800db0e:	d10c      	bne.n	800db2a <_strtol_l.isra.0+0x5e>
 800db10:	2c30      	cmp	r4, #48	; 0x30
 800db12:	d10a      	bne.n	800db2a <_strtol_l.isra.0+0x5e>
 800db14:	f89e 4000 	ldrb.w	r4, [lr]
 800db18:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800db1c:	2c58      	cmp	r4, #88	; 0x58
 800db1e:	d14d      	bne.n	800dbbc <_strtol_l.isra.0+0xf0>
 800db20:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800db24:	2310      	movs	r3, #16
 800db26:	f10e 0e02 	add.w	lr, lr, #2
 800db2a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800db2e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800db32:	2600      	movs	r6, #0
 800db34:	fbbc f9f3 	udiv	r9, ip, r3
 800db38:	4635      	mov	r5, r6
 800db3a:	fb03 ca19 	mls	sl, r3, r9, ip
 800db3e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800db42:	2f09      	cmp	r7, #9
 800db44:	d818      	bhi.n	800db78 <_strtol_l.isra.0+0xac>
 800db46:	463c      	mov	r4, r7
 800db48:	42a3      	cmp	r3, r4
 800db4a:	dd24      	ble.n	800db96 <_strtol_l.isra.0+0xca>
 800db4c:	2e00      	cmp	r6, #0
 800db4e:	db1f      	blt.n	800db90 <_strtol_l.isra.0+0xc4>
 800db50:	45a9      	cmp	r9, r5
 800db52:	d31d      	bcc.n	800db90 <_strtol_l.isra.0+0xc4>
 800db54:	d101      	bne.n	800db5a <_strtol_l.isra.0+0x8e>
 800db56:	45a2      	cmp	sl, r4
 800db58:	db1a      	blt.n	800db90 <_strtol_l.isra.0+0xc4>
 800db5a:	fb05 4503 	mla	r5, r5, r3, r4
 800db5e:	2601      	movs	r6, #1
 800db60:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800db64:	e7eb      	b.n	800db3e <_strtol_l.isra.0+0x72>
 800db66:	2c2b      	cmp	r4, #43	; 0x2b
 800db68:	bf08      	it	eq
 800db6a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800db6e:	46a8      	mov	r8, r5
 800db70:	bf08      	it	eq
 800db72:	f106 0e02 	addeq.w	lr, r6, #2
 800db76:	e7c7      	b.n	800db08 <_strtol_l.isra.0+0x3c>
 800db78:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800db7c:	2f19      	cmp	r7, #25
 800db7e:	d801      	bhi.n	800db84 <_strtol_l.isra.0+0xb8>
 800db80:	3c37      	subs	r4, #55	; 0x37
 800db82:	e7e1      	b.n	800db48 <_strtol_l.isra.0+0x7c>
 800db84:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800db88:	2f19      	cmp	r7, #25
 800db8a:	d804      	bhi.n	800db96 <_strtol_l.isra.0+0xca>
 800db8c:	3c57      	subs	r4, #87	; 0x57
 800db8e:	e7db      	b.n	800db48 <_strtol_l.isra.0+0x7c>
 800db90:	f04f 36ff 	mov.w	r6, #4294967295
 800db94:	e7e4      	b.n	800db60 <_strtol_l.isra.0+0x94>
 800db96:	2e00      	cmp	r6, #0
 800db98:	da05      	bge.n	800dba6 <_strtol_l.isra.0+0xda>
 800db9a:	2322      	movs	r3, #34	; 0x22
 800db9c:	6003      	str	r3, [r0, #0]
 800db9e:	4665      	mov	r5, ip
 800dba0:	b942      	cbnz	r2, 800dbb4 <_strtol_l.isra.0+0xe8>
 800dba2:	4628      	mov	r0, r5
 800dba4:	e79d      	b.n	800dae2 <_strtol_l.isra.0+0x16>
 800dba6:	f1b8 0f00 	cmp.w	r8, #0
 800dbaa:	d000      	beq.n	800dbae <_strtol_l.isra.0+0xe2>
 800dbac:	426d      	negs	r5, r5
 800dbae:	2a00      	cmp	r2, #0
 800dbb0:	d0f7      	beq.n	800dba2 <_strtol_l.isra.0+0xd6>
 800dbb2:	b10e      	cbz	r6, 800dbb8 <_strtol_l.isra.0+0xec>
 800dbb4:	f10e 31ff 	add.w	r1, lr, #4294967295
 800dbb8:	6011      	str	r1, [r2, #0]
 800dbba:	e7f2      	b.n	800dba2 <_strtol_l.isra.0+0xd6>
 800dbbc:	2430      	movs	r4, #48	; 0x30
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d1b3      	bne.n	800db2a <_strtol_l.isra.0+0x5e>
 800dbc2:	2308      	movs	r3, #8
 800dbc4:	e7b1      	b.n	800db2a <_strtol_l.isra.0+0x5e>
 800dbc6:	2c30      	cmp	r4, #48	; 0x30
 800dbc8:	d0a4      	beq.n	800db14 <_strtol_l.isra.0+0x48>
 800dbca:	230a      	movs	r3, #10
 800dbcc:	e7ad      	b.n	800db2a <_strtol_l.isra.0+0x5e>
 800dbce:	bf00      	nop
 800dbd0:	08011d81 	.word	0x08011d81

0800dbd4 <strtol>:
 800dbd4:	4613      	mov	r3, r2
 800dbd6:	460a      	mov	r2, r1
 800dbd8:	4601      	mov	r1, r0
 800dbda:	4802      	ldr	r0, [pc, #8]	; (800dbe4 <strtol+0x10>)
 800dbdc:	6800      	ldr	r0, [r0, #0]
 800dbde:	f7ff bf75 	b.w	800dacc <_strtol_l.isra.0>
 800dbe2:	bf00      	nop
 800dbe4:	2000004c 	.word	0x2000004c

0800dbe8 <__swbuf_r>:
 800dbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbea:	460e      	mov	r6, r1
 800dbec:	4614      	mov	r4, r2
 800dbee:	4605      	mov	r5, r0
 800dbf0:	b118      	cbz	r0, 800dbfa <__swbuf_r+0x12>
 800dbf2:	6983      	ldr	r3, [r0, #24]
 800dbf4:	b90b      	cbnz	r3, 800dbfa <__swbuf_r+0x12>
 800dbf6:	f001 f849 	bl	800ec8c <__sinit>
 800dbfa:	4b21      	ldr	r3, [pc, #132]	; (800dc80 <__swbuf_r+0x98>)
 800dbfc:	429c      	cmp	r4, r3
 800dbfe:	d12b      	bne.n	800dc58 <__swbuf_r+0x70>
 800dc00:	686c      	ldr	r4, [r5, #4]
 800dc02:	69a3      	ldr	r3, [r4, #24]
 800dc04:	60a3      	str	r3, [r4, #8]
 800dc06:	89a3      	ldrh	r3, [r4, #12]
 800dc08:	071a      	lsls	r2, r3, #28
 800dc0a:	d52f      	bpl.n	800dc6c <__swbuf_r+0x84>
 800dc0c:	6923      	ldr	r3, [r4, #16]
 800dc0e:	b36b      	cbz	r3, 800dc6c <__swbuf_r+0x84>
 800dc10:	6923      	ldr	r3, [r4, #16]
 800dc12:	6820      	ldr	r0, [r4, #0]
 800dc14:	1ac0      	subs	r0, r0, r3
 800dc16:	6963      	ldr	r3, [r4, #20]
 800dc18:	b2f6      	uxtb	r6, r6
 800dc1a:	4283      	cmp	r3, r0
 800dc1c:	4637      	mov	r7, r6
 800dc1e:	dc04      	bgt.n	800dc2a <__swbuf_r+0x42>
 800dc20:	4621      	mov	r1, r4
 800dc22:	4628      	mov	r0, r5
 800dc24:	f000 ff9e 	bl	800eb64 <_fflush_r>
 800dc28:	bb30      	cbnz	r0, 800dc78 <__swbuf_r+0x90>
 800dc2a:	68a3      	ldr	r3, [r4, #8]
 800dc2c:	3b01      	subs	r3, #1
 800dc2e:	60a3      	str	r3, [r4, #8]
 800dc30:	6823      	ldr	r3, [r4, #0]
 800dc32:	1c5a      	adds	r2, r3, #1
 800dc34:	6022      	str	r2, [r4, #0]
 800dc36:	701e      	strb	r6, [r3, #0]
 800dc38:	6963      	ldr	r3, [r4, #20]
 800dc3a:	3001      	adds	r0, #1
 800dc3c:	4283      	cmp	r3, r0
 800dc3e:	d004      	beq.n	800dc4a <__swbuf_r+0x62>
 800dc40:	89a3      	ldrh	r3, [r4, #12]
 800dc42:	07db      	lsls	r3, r3, #31
 800dc44:	d506      	bpl.n	800dc54 <__swbuf_r+0x6c>
 800dc46:	2e0a      	cmp	r6, #10
 800dc48:	d104      	bne.n	800dc54 <__swbuf_r+0x6c>
 800dc4a:	4621      	mov	r1, r4
 800dc4c:	4628      	mov	r0, r5
 800dc4e:	f000 ff89 	bl	800eb64 <_fflush_r>
 800dc52:	b988      	cbnz	r0, 800dc78 <__swbuf_r+0x90>
 800dc54:	4638      	mov	r0, r7
 800dc56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc58:	4b0a      	ldr	r3, [pc, #40]	; (800dc84 <__swbuf_r+0x9c>)
 800dc5a:	429c      	cmp	r4, r3
 800dc5c:	d101      	bne.n	800dc62 <__swbuf_r+0x7a>
 800dc5e:	68ac      	ldr	r4, [r5, #8]
 800dc60:	e7cf      	b.n	800dc02 <__swbuf_r+0x1a>
 800dc62:	4b09      	ldr	r3, [pc, #36]	; (800dc88 <__swbuf_r+0xa0>)
 800dc64:	429c      	cmp	r4, r3
 800dc66:	bf08      	it	eq
 800dc68:	68ec      	ldreq	r4, [r5, #12]
 800dc6a:	e7ca      	b.n	800dc02 <__swbuf_r+0x1a>
 800dc6c:	4621      	mov	r1, r4
 800dc6e:	4628      	mov	r0, r5
 800dc70:	f000 f80c 	bl	800dc8c <__swsetup_r>
 800dc74:	2800      	cmp	r0, #0
 800dc76:	d0cb      	beq.n	800dc10 <__swbuf_r+0x28>
 800dc78:	f04f 37ff 	mov.w	r7, #4294967295
 800dc7c:	e7ea      	b.n	800dc54 <__swbuf_r+0x6c>
 800dc7e:	bf00      	nop
 800dc80:	08011f38 	.word	0x08011f38
 800dc84:	08011f58 	.word	0x08011f58
 800dc88:	08011f18 	.word	0x08011f18

0800dc8c <__swsetup_r>:
 800dc8c:	4b32      	ldr	r3, [pc, #200]	; (800dd58 <__swsetup_r+0xcc>)
 800dc8e:	b570      	push	{r4, r5, r6, lr}
 800dc90:	681d      	ldr	r5, [r3, #0]
 800dc92:	4606      	mov	r6, r0
 800dc94:	460c      	mov	r4, r1
 800dc96:	b125      	cbz	r5, 800dca2 <__swsetup_r+0x16>
 800dc98:	69ab      	ldr	r3, [r5, #24]
 800dc9a:	b913      	cbnz	r3, 800dca2 <__swsetup_r+0x16>
 800dc9c:	4628      	mov	r0, r5
 800dc9e:	f000 fff5 	bl	800ec8c <__sinit>
 800dca2:	4b2e      	ldr	r3, [pc, #184]	; (800dd5c <__swsetup_r+0xd0>)
 800dca4:	429c      	cmp	r4, r3
 800dca6:	d10f      	bne.n	800dcc8 <__swsetup_r+0x3c>
 800dca8:	686c      	ldr	r4, [r5, #4]
 800dcaa:	89a3      	ldrh	r3, [r4, #12]
 800dcac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dcb0:	0719      	lsls	r1, r3, #28
 800dcb2:	d42c      	bmi.n	800dd0e <__swsetup_r+0x82>
 800dcb4:	06dd      	lsls	r5, r3, #27
 800dcb6:	d411      	bmi.n	800dcdc <__swsetup_r+0x50>
 800dcb8:	2309      	movs	r3, #9
 800dcba:	6033      	str	r3, [r6, #0]
 800dcbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dcc0:	81a3      	strh	r3, [r4, #12]
 800dcc2:	f04f 30ff 	mov.w	r0, #4294967295
 800dcc6:	e03e      	b.n	800dd46 <__swsetup_r+0xba>
 800dcc8:	4b25      	ldr	r3, [pc, #148]	; (800dd60 <__swsetup_r+0xd4>)
 800dcca:	429c      	cmp	r4, r3
 800dccc:	d101      	bne.n	800dcd2 <__swsetup_r+0x46>
 800dcce:	68ac      	ldr	r4, [r5, #8]
 800dcd0:	e7eb      	b.n	800dcaa <__swsetup_r+0x1e>
 800dcd2:	4b24      	ldr	r3, [pc, #144]	; (800dd64 <__swsetup_r+0xd8>)
 800dcd4:	429c      	cmp	r4, r3
 800dcd6:	bf08      	it	eq
 800dcd8:	68ec      	ldreq	r4, [r5, #12]
 800dcda:	e7e6      	b.n	800dcaa <__swsetup_r+0x1e>
 800dcdc:	0758      	lsls	r0, r3, #29
 800dcde:	d512      	bpl.n	800dd06 <__swsetup_r+0x7a>
 800dce0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dce2:	b141      	cbz	r1, 800dcf6 <__swsetup_r+0x6a>
 800dce4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dce8:	4299      	cmp	r1, r3
 800dcea:	d002      	beq.n	800dcf2 <__swsetup_r+0x66>
 800dcec:	4630      	mov	r0, r6
 800dcee:	f002 f929 	bl	800ff44 <_free_r>
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	6363      	str	r3, [r4, #52]	; 0x34
 800dcf6:	89a3      	ldrh	r3, [r4, #12]
 800dcf8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dcfc:	81a3      	strh	r3, [r4, #12]
 800dcfe:	2300      	movs	r3, #0
 800dd00:	6063      	str	r3, [r4, #4]
 800dd02:	6923      	ldr	r3, [r4, #16]
 800dd04:	6023      	str	r3, [r4, #0]
 800dd06:	89a3      	ldrh	r3, [r4, #12]
 800dd08:	f043 0308 	orr.w	r3, r3, #8
 800dd0c:	81a3      	strh	r3, [r4, #12]
 800dd0e:	6923      	ldr	r3, [r4, #16]
 800dd10:	b94b      	cbnz	r3, 800dd26 <__swsetup_r+0x9a>
 800dd12:	89a3      	ldrh	r3, [r4, #12]
 800dd14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dd18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd1c:	d003      	beq.n	800dd26 <__swsetup_r+0x9a>
 800dd1e:	4621      	mov	r1, r4
 800dd20:	4630      	mov	r0, r6
 800dd22:	f001 fbeb 	bl	800f4fc <__smakebuf_r>
 800dd26:	89a0      	ldrh	r0, [r4, #12]
 800dd28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd2c:	f010 0301 	ands.w	r3, r0, #1
 800dd30:	d00a      	beq.n	800dd48 <__swsetup_r+0xbc>
 800dd32:	2300      	movs	r3, #0
 800dd34:	60a3      	str	r3, [r4, #8]
 800dd36:	6963      	ldr	r3, [r4, #20]
 800dd38:	425b      	negs	r3, r3
 800dd3a:	61a3      	str	r3, [r4, #24]
 800dd3c:	6923      	ldr	r3, [r4, #16]
 800dd3e:	b943      	cbnz	r3, 800dd52 <__swsetup_r+0xc6>
 800dd40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dd44:	d1ba      	bne.n	800dcbc <__swsetup_r+0x30>
 800dd46:	bd70      	pop	{r4, r5, r6, pc}
 800dd48:	0781      	lsls	r1, r0, #30
 800dd4a:	bf58      	it	pl
 800dd4c:	6963      	ldrpl	r3, [r4, #20]
 800dd4e:	60a3      	str	r3, [r4, #8]
 800dd50:	e7f4      	b.n	800dd3c <__swsetup_r+0xb0>
 800dd52:	2000      	movs	r0, #0
 800dd54:	e7f7      	b.n	800dd46 <__swsetup_r+0xba>
 800dd56:	bf00      	nop
 800dd58:	2000004c 	.word	0x2000004c
 800dd5c:	08011f38 	.word	0x08011f38
 800dd60:	08011f58 	.word	0x08011f58
 800dd64:	08011f18 	.word	0x08011f18

0800dd68 <quorem>:
 800dd68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd6c:	6903      	ldr	r3, [r0, #16]
 800dd6e:	690c      	ldr	r4, [r1, #16]
 800dd70:	42a3      	cmp	r3, r4
 800dd72:	4607      	mov	r7, r0
 800dd74:	f2c0 8081 	blt.w	800de7a <quorem+0x112>
 800dd78:	3c01      	subs	r4, #1
 800dd7a:	f101 0814 	add.w	r8, r1, #20
 800dd7e:	f100 0514 	add.w	r5, r0, #20
 800dd82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd86:	9301      	str	r3, [sp, #4]
 800dd88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dd8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd90:	3301      	adds	r3, #1
 800dd92:	429a      	cmp	r2, r3
 800dd94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dd98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dd9c:	fbb2 f6f3 	udiv	r6, r2, r3
 800dda0:	d331      	bcc.n	800de06 <quorem+0x9e>
 800dda2:	f04f 0e00 	mov.w	lr, #0
 800dda6:	4640      	mov	r0, r8
 800dda8:	46ac      	mov	ip, r5
 800ddaa:	46f2      	mov	sl, lr
 800ddac:	f850 2b04 	ldr.w	r2, [r0], #4
 800ddb0:	b293      	uxth	r3, r2
 800ddb2:	fb06 e303 	mla	r3, r6, r3, lr
 800ddb6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ddba:	b29b      	uxth	r3, r3
 800ddbc:	ebaa 0303 	sub.w	r3, sl, r3
 800ddc0:	0c12      	lsrs	r2, r2, #16
 800ddc2:	f8dc a000 	ldr.w	sl, [ip]
 800ddc6:	fb06 e202 	mla	r2, r6, r2, lr
 800ddca:	fa13 f38a 	uxtah	r3, r3, sl
 800ddce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ddd2:	fa1f fa82 	uxth.w	sl, r2
 800ddd6:	f8dc 2000 	ldr.w	r2, [ip]
 800ddda:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ddde:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dde8:	4581      	cmp	r9, r0
 800ddea:	f84c 3b04 	str.w	r3, [ip], #4
 800ddee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ddf2:	d2db      	bcs.n	800ddac <quorem+0x44>
 800ddf4:	f855 300b 	ldr.w	r3, [r5, fp]
 800ddf8:	b92b      	cbnz	r3, 800de06 <quorem+0x9e>
 800ddfa:	9b01      	ldr	r3, [sp, #4]
 800ddfc:	3b04      	subs	r3, #4
 800ddfe:	429d      	cmp	r5, r3
 800de00:	461a      	mov	r2, r3
 800de02:	d32e      	bcc.n	800de62 <quorem+0xfa>
 800de04:	613c      	str	r4, [r7, #16]
 800de06:	4638      	mov	r0, r7
 800de08:	f001 fe9a 	bl	800fb40 <__mcmp>
 800de0c:	2800      	cmp	r0, #0
 800de0e:	db24      	blt.n	800de5a <quorem+0xf2>
 800de10:	3601      	adds	r6, #1
 800de12:	4628      	mov	r0, r5
 800de14:	f04f 0c00 	mov.w	ip, #0
 800de18:	f858 2b04 	ldr.w	r2, [r8], #4
 800de1c:	f8d0 e000 	ldr.w	lr, [r0]
 800de20:	b293      	uxth	r3, r2
 800de22:	ebac 0303 	sub.w	r3, ip, r3
 800de26:	0c12      	lsrs	r2, r2, #16
 800de28:	fa13 f38e 	uxtah	r3, r3, lr
 800de2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800de30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800de34:	b29b      	uxth	r3, r3
 800de36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de3a:	45c1      	cmp	r9, r8
 800de3c:	f840 3b04 	str.w	r3, [r0], #4
 800de40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800de44:	d2e8      	bcs.n	800de18 <quorem+0xb0>
 800de46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de4e:	b922      	cbnz	r2, 800de5a <quorem+0xf2>
 800de50:	3b04      	subs	r3, #4
 800de52:	429d      	cmp	r5, r3
 800de54:	461a      	mov	r2, r3
 800de56:	d30a      	bcc.n	800de6e <quorem+0x106>
 800de58:	613c      	str	r4, [r7, #16]
 800de5a:	4630      	mov	r0, r6
 800de5c:	b003      	add	sp, #12
 800de5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de62:	6812      	ldr	r2, [r2, #0]
 800de64:	3b04      	subs	r3, #4
 800de66:	2a00      	cmp	r2, #0
 800de68:	d1cc      	bne.n	800de04 <quorem+0x9c>
 800de6a:	3c01      	subs	r4, #1
 800de6c:	e7c7      	b.n	800ddfe <quorem+0x96>
 800de6e:	6812      	ldr	r2, [r2, #0]
 800de70:	3b04      	subs	r3, #4
 800de72:	2a00      	cmp	r2, #0
 800de74:	d1f0      	bne.n	800de58 <quorem+0xf0>
 800de76:	3c01      	subs	r4, #1
 800de78:	e7eb      	b.n	800de52 <quorem+0xea>
 800de7a:	2000      	movs	r0, #0
 800de7c:	e7ee      	b.n	800de5c <quorem+0xf4>
	...

0800de80 <_dtoa_r>:
 800de80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de84:	ed2d 8b02 	vpush	{d8}
 800de88:	ec57 6b10 	vmov	r6, r7, d0
 800de8c:	b095      	sub	sp, #84	; 0x54
 800de8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800de90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800de94:	9105      	str	r1, [sp, #20]
 800de96:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800de9a:	4604      	mov	r4, r0
 800de9c:	9209      	str	r2, [sp, #36]	; 0x24
 800de9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800dea0:	b975      	cbnz	r5, 800dec0 <_dtoa_r+0x40>
 800dea2:	2010      	movs	r0, #16
 800dea4:	f001 fb6a 	bl	800f57c <malloc>
 800dea8:	4602      	mov	r2, r0
 800deaa:	6260      	str	r0, [r4, #36]	; 0x24
 800deac:	b920      	cbnz	r0, 800deb8 <_dtoa_r+0x38>
 800deae:	4bb2      	ldr	r3, [pc, #712]	; (800e178 <_dtoa_r+0x2f8>)
 800deb0:	21ea      	movs	r1, #234	; 0xea
 800deb2:	48b2      	ldr	r0, [pc, #712]	; (800e17c <_dtoa_r+0x2fc>)
 800deb4:	f002 fc34 	bl	8010720 <__assert_func>
 800deb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800debc:	6005      	str	r5, [r0, #0]
 800debe:	60c5      	str	r5, [r0, #12]
 800dec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dec2:	6819      	ldr	r1, [r3, #0]
 800dec4:	b151      	cbz	r1, 800dedc <_dtoa_r+0x5c>
 800dec6:	685a      	ldr	r2, [r3, #4]
 800dec8:	604a      	str	r2, [r1, #4]
 800deca:	2301      	movs	r3, #1
 800decc:	4093      	lsls	r3, r2
 800dece:	608b      	str	r3, [r1, #8]
 800ded0:	4620      	mov	r0, r4
 800ded2:	f001 fbad 	bl	800f630 <_Bfree>
 800ded6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ded8:	2200      	movs	r2, #0
 800deda:	601a      	str	r2, [r3, #0]
 800dedc:	1e3b      	subs	r3, r7, #0
 800dede:	bfb9      	ittee	lt
 800dee0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dee4:	9303      	strlt	r3, [sp, #12]
 800dee6:	2300      	movge	r3, #0
 800dee8:	f8c8 3000 	strge.w	r3, [r8]
 800deec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800def0:	4ba3      	ldr	r3, [pc, #652]	; (800e180 <_dtoa_r+0x300>)
 800def2:	bfbc      	itt	lt
 800def4:	2201      	movlt	r2, #1
 800def6:	f8c8 2000 	strlt.w	r2, [r8]
 800defa:	ea33 0309 	bics.w	r3, r3, r9
 800defe:	d11b      	bne.n	800df38 <_dtoa_r+0xb8>
 800df00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800df02:	f242 730f 	movw	r3, #9999	; 0x270f
 800df06:	6013      	str	r3, [r2, #0]
 800df08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800df0c:	4333      	orrs	r3, r6
 800df0e:	f000 857a 	beq.w	800ea06 <_dtoa_r+0xb86>
 800df12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df14:	b963      	cbnz	r3, 800df30 <_dtoa_r+0xb0>
 800df16:	4b9b      	ldr	r3, [pc, #620]	; (800e184 <_dtoa_r+0x304>)
 800df18:	e024      	b.n	800df64 <_dtoa_r+0xe4>
 800df1a:	4b9b      	ldr	r3, [pc, #620]	; (800e188 <_dtoa_r+0x308>)
 800df1c:	9300      	str	r3, [sp, #0]
 800df1e:	3308      	adds	r3, #8
 800df20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800df22:	6013      	str	r3, [r2, #0]
 800df24:	9800      	ldr	r0, [sp, #0]
 800df26:	b015      	add	sp, #84	; 0x54
 800df28:	ecbd 8b02 	vpop	{d8}
 800df2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df30:	4b94      	ldr	r3, [pc, #592]	; (800e184 <_dtoa_r+0x304>)
 800df32:	9300      	str	r3, [sp, #0]
 800df34:	3303      	adds	r3, #3
 800df36:	e7f3      	b.n	800df20 <_dtoa_r+0xa0>
 800df38:	ed9d 7b02 	vldr	d7, [sp, #8]
 800df3c:	2200      	movs	r2, #0
 800df3e:	ec51 0b17 	vmov	r0, r1, d7
 800df42:	2300      	movs	r3, #0
 800df44:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800df48:	f7f2 fdee 	bl	8000b28 <__aeabi_dcmpeq>
 800df4c:	4680      	mov	r8, r0
 800df4e:	b158      	cbz	r0, 800df68 <_dtoa_r+0xe8>
 800df50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800df52:	2301      	movs	r3, #1
 800df54:	6013      	str	r3, [r2, #0]
 800df56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df58:	2b00      	cmp	r3, #0
 800df5a:	f000 8551 	beq.w	800ea00 <_dtoa_r+0xb80>
 800df5e:	488b      	ldr	r0, [pc, #556]	; (800e18c <_dtoa_r+0x30c>)
 800df60:	6018      	str	r0, [r3, #0]
 800df62:	1e43      	subs	r3, r0, #1
 800df64:	9300      	str	r3, [sp, #0]
 800df66:	e7dd      	b.n	800df24 <_dtoa_r+0xa4>
 800df68:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800df6c:	aa12      	add	r2, sp, #72	; 0x48
 800df6e:	a913      	add	r1, sp, #76	; 0x4c
 800df70:	4620      	mov	r0, r4
 800df72:	f001 ff05 	bl	800fd80 <__d2b>
 800df76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800df7a:	4683      	mov	fp, r0
 800df7c:	2d00      	cmp	r5, #0
 800df7e:	d07c      	beq.n	800e07a <_dtoa_r+0x1fa>
 800df80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df82:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800df86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df8a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800df8e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800df92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800df96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800df9a:	4b7d      	ldr	r3, [pc, #500]	; (800e190 <_dtoa_r+0x310>)
 800df9c:	2200      	movs	r2, #0
 800df9e:	4630      	mov	r0, r6
 800dfa0:	4639      	mov	r1, r7
 800dfa2:	f7f2 f9a1 	bl	80002e8 <__aeabi_dsub>
 800dfa6:	a36e      	add	r3, pc, #440	; (adr r3, 800e160 <_dtoa_r+0x2e0>)
 800dfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfac:	f7f2 fb54 	bl	8000658 <__aeabi_dmul>
 800dfb0:	a36d      	add	r3, pc, #436	; (adr r3, 800e168 <_dtoa_r+0x2e8>)
 800dfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb6:	f7f2 f999 	bl	80002ec <__adddf3>
 800dfba:	4606      	mov	r6, r0
 800dfbc:	4628      	mov	r0, r5
 800dfbe:	460f      	mov	r7, r1
 800dfc0:	f7f2 fae0 	bl	8000584 <__aeabi_i2d>
 800dfc4:	a36a      	add	r3, pc, #424	; (adr r3, 800e170 <_dtoa_r+0x2f0>)
 800dfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfca:	f7f2 fb45 	bl	8000658 <__aeabi_dmul>
 800dfce:	4602      	mov	r2, r0
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	4630      	mov	r0, r6
 800dfd4:	4639      	mov	r1, r7
 800dfd6:	f7f2 f989 	bl	80002ec <__adddf3>
 800dfda:	4606      	mov	r6, r0
 800dfdc:	460f      	mov	r7, r1
 800dfde:	f7f2 fdeb 	bl	8000bb8 <__aeabi_d2iz>
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	4682      	mov	sl, r0
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	4630      	mov	r0, r6
 800dfea:	4639      	mov	r1, r7
 800dfec:	f7f2 fda6 	bl	8000b3c <__aeabi_dcmplt>
 800dff0:	b148      	cbz	r0, 800e006 <_dtoa_r+0x186>
 800dff2:	4650      	mov	r0, sl
 800dff4:	f7f2 fac6 	bl	8000584 <__aeabi_i2d>
 800dff8:	4632      	mov	r2, r6
 800dffa:	463b      	mov	r3, r7
 800dffc:	f7f2 fd94 	bl	8000b28 <__aeabi_dcmpeq>
 800e000:	b908      	cbnz	r0, 800e006 <_dtoa_r+0x186>
 800e002:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e006:	f1ba 0f16 	cmp.w	sl, #22
 800e00a:	d854      	bhi.n	800e0b6 <_dtoa_r+0x236>
 800e00c:	4b61      	ldr	r3, [pc, #388]	; (800e194 <_dtoa_r+0x314>)
 800e00e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e016:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e01a:	f7f2 fd8f 	bl	8000b3c <__aeabi_dcmplt>
 800e01e:	2800      	cmp	r0, #0
 800e020:	d04b      	beq.n	800e0ba <_dtoa_r+0x23a>
 800e022:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e026:	2300      	movs	r3, #0
 800e028:	930e      	str	r3, [sp, #56]	; 0x38
 800e02a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e02c:	1b5d      	subs	r5, r3, r5
 800e02e:	1e6b      	subs	r3, r5, #1
 800e030:	9304      	str	r3, [sp, #16]
 800e032:	bf43      	ittte	mi
 800e034:	2300      	movmi	r3, #0
 800e036:	f1c5 0801 	rsbmi	r8, r5, #1
 800e03a:	9304      	strmi	r3, [sp, #16]
 800e03c:	f04f 0800 	movpl.w	r8, #0
 800e040:	f1ba 0f00 	cmp.w	sl, #0
 800e044:	db3b      	blt.n	800e0be <_dtoa_r+0x23e>
 800e046:	9b04      	ldr	r3, [sp, #16]
 800e048:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800e04c:	4453      	add	r3, sl
 800e04e:	9304      	str	r3, [sp, #16]
 800e050:	2300      	movs	r3, #0
 800e052:	9306      	str	r3, [sp, #24]
 800e054:	9b05      	ldr	r3, [sp, #20]
 800e056:	2b09      	cmp	r3, #9
 800e058:	d869      	bhi.n	800e12e <_dtoa_r+0x2ae>
 800e05a:	2b05      	cmp	r3, #5
 800e05c:	bfc4      	itt	gt
 800e05e:	3b04      	subgt	r3, #4
 800e060:	9305      	strgt	r3, [sp, #20]
 800e062:	9b05      	ldr	r3, [sp, #20]
 800e064:	f1a3 0302 	sub.w	r3, r3, #2
 800e068:	bfcc      	ite	gt
 800e06a:	2500      	movgt	r5, #0
 800e06c:	2501      	movle	r5, #1
 800e06e:	2b03      	cmp	r3, #3
 800e070:	d869      	bhi.n	800e146 <_dtoa_r+0x2c6>
 800e072:	e8df f003 	tbb	[pc, r3]
 800e076:	4e2c      	.short	0x4e2c
 800e078:	5a4c      	.short	0x5a4c
 800e07a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800e07e:	441d      	add	r5, r3
 800e080:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e084:	2b20      	cmp	r3, #32
 800e086:	bfc1      	itttt	gt
 800e088:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e08c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e090:	fa09 f303 	lslgt.w	r3, r9, r3
 800e094:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e098:	bfda      	itte	le
 800e09a:	f1c3 0320 	rsble	r3, r3, #32
 800e09e:	fa06 f003 	lslle.w	r0, r6, r3
 800e0a2:	4318      	orrgt	r0, r3
 800e0a4:	f7f2 fa5e 	bl	8000564 <__aeabi_ui2d>
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	4606      	mov	r6, r0
 800e0ac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e0b0:	3d01      	subs	r5, #1
 800e0b2:	9310      	str	r3, [sp, #64]	; 0x40
 800e0b4:	e771      	b.n	800df9a <_dtoa_r+0x11a>
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	e7b6      	b.n	800e028 <_dtoa_r+0x1a8>
 800e0ba:	900e      	str	r0, [sp, #56]	; 0x38
 800e0bc:	e7b5      	b.n	800e02a <_dtoa_r+0x1aa>
 800e0be:	f1ca 0300 	rsb	r3, sl, #0
 800e0c2:	9306      	str	r3, [sp, #24]
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	eba8 080a 	sub.w	r8, r8, sl
 800e0ca:	930d      	str	r3, [sp, #52]	; 0x34
 800e0cc:	e7c2      	b.n	800e054 <_dtoa_r+0x1d4>
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	9308      	str	r3, [sp, #32]
 800e0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	dc39      	bgt.n	800e14c <_dtoa_r+0x2cc>
 800e0d8:	f04f 0901 	mov.w	r9, #1
 800e0dc:	f8cd 9004 	str.w	r9, [sp, #4]
 800e0e0:	464b      	mov	r3, r9
 800e0e2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e0e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	6042      	str	r2, [r0, #4]
 800e0ec:	2204      	movs	r2, #4
 800e0ee:	f102 0614 	add.w	r6, r2, #20
 800e0f2:	429e      	cmp	r6, r3
 800e0f4:	6841      	ldr	r1, [r0, #4]
 800e0f6:	d92f      	bls.n	800e158 <_dtoa_r+0x2d8>
 800e0f8:	4620      	mov	r0, r4
 800e0fa:	f001 fa59 	bl	800f5b0 <_Balloc>
 800e0fe:	9000      	str	r0, [sp, #0]
 800e100:	2800      	cmp	r0, #0
 800e102:	d14b      	bne.n	800e19c <_dtoa_r+0x31c>
 800e104:	4b24      	ldr	r3, [pc, #144]	; (800e198 <_dtoa_r+0x318>)
 800e106:	4602      	mov	r2, r0
 800e108:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e10c:	e6d1      	b.n	800deb2 <_dtoa_r+0x32>
 800e10e:	2301      	movs	r3, #1
 800e110:	e7de      	b.n	800e0d0 <_dtoa_r+0x250>
 800e112:	2300      	movs	r3, #0
 800e114:	9308      	str	r3, [sp, #32]
 800e116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e118:	eb0a 0903 	add.w	r9, sl, r3
 800e11c:	f109 0301 	add.w	r3, r9, #1
 800e120:	2b01      	cmp	r3, #1
 800e122:	9301      	str	r3, [sp, #4]
 800e124:	bfb8      	it	lt
 800e126:	2301      	movlt	r3, #1
 800e128:	e7dd      	b.n	800e0e6 <_dtoa_r+0x266>
 800e12a:	2301      	movs	r3, #1
 800e12c:	e7f2      	b.n	800e114 <_dtoa_r+0x294>
 800e12e:	2501      	movs	r5, #1
 800e130:	2300      	movs	r3, #0
 800e132:	9305      	str	r3, [sp, #20]
 800e134:	9508      	str	r5, [sp, #32]
 800e136:	f04f 39ff 	mov.w	r9, #4294967295
 800e13a:	2200      	movs	r2, #0
 800e13c:	f8cd 9004 	str.w	r9, [sp, #4]
 800e140:	2312      	movs	r3, #18
 800e142:	9209      	str	r2, [sp, #36]	; 0x24
 800e144:	e7cf      	b.n	800e0e6 <_dtoa_r+0x266>
 800e146:	2301      	movs	r3, #1
 800e148:	9308      	str	r3, [sp, #32]
 800e14a:	e7f4      	b.n	800e136 <_dtoa_r+0x2b6>
 800e14c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e150:	f8cd 9004 	str.w	r9, [sp, #4]
 800e154:	464b      	mov	r3, r9
 800e156:	e7c6      	b.n	800e0e6 <_dtoa_r+0x266>
 800e158:	3101      	adds	r1, #1
 800e15a:	6041      	str	r1, [r0, #4]
 800e15c:	0052      	lsls	r2, r2, #1
 800e15e:	e7c6      	b.n	800e0ee <_dtoa_r+0x26e>
 800e160:	636f4361 	.word	0x636f4361
 800e164:	3fd287a7 	.word	0x3fd287a7
 800e168:	8b60c8b3 	.word	0x8b60c8b3
 800e16c:	3fc68a28 	.word	0x3fc68a28
 800e170:	509f79fb 	.word	0x509f79fb
 800e174:	3fd34413 	.word	0x3fd34413
 800e178:	08011e8e 	.word	0x08011e8e
 800e17c:	08011ea5 	.word	0x08011ea5
 800e180:	7ff00000 	.word	0x7ff00000
 800e184:	08011e8a 	.word	0x08011e8a
 800e188:	08011e81 	.word	0x08011e81
 800e18c:	08011d0d 	.word	0x08011d0d
 800e190:	3ff80000 	.word	0x3ff80000
 800e194:	08012080 	.word	0x08012080
 800e198:	08011f04 	.word	0x08011f04
 800e19c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e19e:	9a00      	ldr	r2, [sp, #0]
 800e1a0:	601a      	str	r2, [r3, #0]
 800e1a2:	9b01      	ldr	r3, [sp, #4]
 800e1a4:	2b0e      	cmp	r3, #14
 800e1a6:	f200 80ad 	bhi.w	800e304 <_dtoa_r+0x484>
 800e1aa:	2d00      	cmp	r5, #0
 800e1ac:	f000 80aa 	beq.w	800e304 <_dtoa_r+0x484>
 800e1b0:	f1ba 0f00 	cmp.w	sl, #0
 800e1b4:	dd36      	ble.n	800e224 <_dtoa_r+0x3a4>
 800e1b6:	4ac3      	ldr	r2, [pc, #780]	; (800e4c4 <_dtoa_r+0x644>)
 800e1b8:	f00a 030f 	and.w	r3, sl, #15
 800e1bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e1c0:	ed93 7b00 	vldr	d7, [r3]
 800e1c4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800e1c8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800e1cc:	eeb0 8a47 	vmov.f32	s16, s14
 800e1d0:	eef0 8a67 	vmov.f32	s17, s15
 800e1d4:	d016      	beq.n	800e204 <_dtoa_r+0x384>
 800e1d6:	4bbc      	ldr	r3, [pc, #752]	; (800e4c8 <_dtoa_r+0x648>)
 800e1d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e1dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e1e0:	f7f2 fb64 	bl	80008ac <__aeabi_ddiv>
 800e1e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1e8:	f007 070f 	and.w	r7, r7, #15
 800e1ec:	2503      	movs	r5, #3
 800e1ee:	4eb6      	ldr	r6, [pc, #728]	; (800e4c8 <_dtoa_r+0x648>)
 800e1f0:	b957      	cbnz	r7, 800e208 <_dtoa_r+0x388>
 800e1f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1f6:	ec53 2b18 	vmov	r2, r3, d8
 800e1fa:	f7f2 fb57 	bl	80008ac <__aeabi_ddiv>
 800e1fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e202:	e029      	b.n	800e258 <_dtoa_r+0x3d8>
 800e204:	2502      	movs	r5, #2
 800e206:	e7f2      	b.n	800e1ee <_dtoa_r+0x36e>
 800e208:	07f9      	lsls	r1, r7, #31
 800e20a:	d508      	bpl.n	800e21e <_dtoa_r+0x39e>
 800e20c:	ec51 0b18 	vmov	r0, r1, d8
 800e210:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e214:	f7f2 fa20 	bl	8000658 <__aeabi_dmul>
 800e218:	ec41 0b18 	vmov	d8, r0, r1
 800e21c:	3501      	adds	r5, #1
 800e21e:	107f      	asrs	r7, r7, #1
 800e220:	3608      	adds	r6, #8
 800e222:	e7e5      	b.n	800e1f0 <_dtoa_r+0x370>
 800e224:	f000 80a6 	beq.w	800e374 <_dtoa_r+0x4f4>
 800e228:	f1ca 0600 	rsb	r6, sl, #0
 800e22c:	4ba5      	ldr	r3, [pc, #660]	; (800e4c4 <_dtoa_r+0x644>)
 800e22e:	4fa6      	ldr	r7, [pc, #664]	; (800e4c8 <_dtoa_r+0x648>)
 800e230:	f006 020f 	and.w	r2, r6, #15
 800e234:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e23c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e240:	f7f2 fa0a 	bl	8000658 <__aeabi_dmul>
 800e244:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e248:	1136      	asrs	r6, r6, #4
 800e24a:	2300      	movs	r3, #0
 800e24c:	2502      	movs	r5, #2
 800e24e:	2e00      	cmp	r6, #0
 800e250:	f040 8085 	bne.w	800e35e <_dtoa_r+0x4de>
 800e254:	2b00      	cmp	r3, #0
 800e256:	d1d2      	bne.n	800e1fe <_dtoa_r+0x37e>
 800e258:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	f000 808c 	beq.w	800e378 <_dtoa_r+0x4f8>
 800e260:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e264:	4b99      	ldr	r3, [pc, #612]	; (800e4cc <_dtoa_r+0x64c>)
 800e266:	2200      	movs	r2, #0
 800e268:	4630      	mov	r0, r6
 800e26a:	4639      	mov	r1, r7
 800e26c:	f7f2 fc66 	bl	8000b3c <__aeabi_dcmplt>
 800e270:	2800      	cmp	r0, #0
 800e272:	f000 8081 	beq.w	800e378 <_dtoa_r+0x4f8>
 800e276:	9b01      	ldr	r3, [sp, #4]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d07d      	beq.n	800e378 <_dtoa_r+0x4f8>
 800e27c:	f1b9 0f00 	cmp.w	r9, #0
 800e280:	dd3c      	ble.n	800e2fc <_dtoa_r+0x47c>
 800e282:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e286:	9307      	str	r3, [sp, #28]
 800e288:	2200      	movs	r2, #0
 800e28a:	4b91      	ldr	r3, [pc, #580]	; (800e4d0 <_dtoa_r+0x650>)
 800e28c:	4630      	mov	r0, r6
 800e28e:	4639      	mov	r1, r7
 800e290:	f7f2 f9e2 	bl	8000658 <__aeabi_dmul>
 800e294:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e298:	3501      	adds	r5, #1
 800e29a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800e29e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e2a2:	4628      	mov	r0, r5
 800e2a4:	f7f2 f96e 	bl	8000584 <__aeabi_i2d>
 800e2a8:	4632      	mov	r2, r6
 800e2aa:	463b      	mov	r3, r7
 800e2ac:	f7f2 f9d4 	bl	8000658 <__aeabi_dmul>
 800e2b0:	4b88      	ldr	r3, [pc, #544]	; (800e4d4 <_dtoa_r+0x654>)
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	f7f2 f81a 	bl	80002ec <__adddf3>
 800e2b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e2bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2c0:	9303      	str	r3, [sp, #12]
 800e2c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d15c      	bne.n	800e382 <_dtoa_r+0x502>
 800e2c8:	4b83      	ldr	r3, [pc, #524]	; (800e4d8 <_dtoa_r+0x658>)
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	4630      	mov	r0, r6
 800e2ce:	4639      	mov	r1, r7
 800e2d0:	f7f2 f80a 	bl	80002e8 <__aeabi_dsub>
 800e2d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2d8:	4606      	mov	r6, r0
 800e2da:	460f      	mov	r7, r1
 800e2dc:	f7f2 fc4c 	bl	8000b78 <__aeabi_dcmpgt>
 800e2e0:	2800      	cmp	r0, #0
 800e2e2:	f040 8296 	bne.w	800e812 <_dtoa_r+0x992>
 800e2e6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e2ea:	4630      	mov	r0, r6
 800e2ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e2f0:	4639      	mov	r1, r7
 800e2f2:	f7f2 fc23 	bl	8000b3c <__aeabi_dcmplt>
 800e2f6:	2800      	cmp	r0, #0
 800e2f8:	f040 8288 	bne.w	800e80c <_dtoa_r+0x98c>
 800e2fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e300:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e304:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e306:	2b00      	cmp	r3, #0
 800e308:	f2c0 8158 	blt.w	800e5bc <_dtoa_r+0x73c>
 800e30c:	f1ba 0f0e 	cmp.w	sl, #14
 800e310:	f300 8154 	bgt.w	800e5bc <_dtoa_r+0x73c>
 800e314:	4b6b      	ldr	r3, [pc, #428]	; (800e4c4 <_dtoa_r+0x644>)
 800e316:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e31a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e31e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e320:	2b00      	cmp	r3, #0
 800e322:	f280 80e3 	bge.w	800e4ec <_dtoa_r+0x66c>
 800e326:	9b01      	ldr	r3, [sp, #4]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	f300 80df 	bgt.w	800e4ec <_dtoa_r+0x66c>
 800e32e:	f040 826d 	bne.w	800e80c <_dtoa_r+0x98c>
 800e332:	4b69      	ldr	r3, [pc, #420]	; (800e4d8 <_dtoa_r+0x658>)
 800e334:	2200      	movs	r2, #0
 800e336:	4640      	mov	r0, r8
 800e338:	4649      	mov	r1, r9
 800e33a:	f7f2 f98d 	bl	8000658 <__aeabi_dmul>
 800e33e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e342:	f7f2 fc0f 	bl	8000b64 <__aeabi_dcmpge>
 800e346:	9e01      	ldr	r6, [sp, #4]
 800e348:	4637      	mov	r7, r6
 800e34a:	2800      	cmp	r0, #0
 800e34c:	f040 8243 	bne.w	800e7d6 <_dtoa_r+0x956>
 800e350:	9d00      	ldr	r5, [sp, #0]
 800e352:	2331      	movs	r3, #49	; 0x31
 800e354:	f805 3b01 	strb.w	r3, [r5], #1
 800e358:	f10a 0a01 	add.w	sl, sl, #1
 800e35c:	e23f      	b.n	800e7de <_dtoa_r+0x95e>
 800e35e:	07f2      	lsls	r2, r6, #31
 800e360:	d505      	bpl.n	800e36e <_dtoa_r+0x4ee>
 800e362:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e366:	f7f2 f977 	bl	8000658 <__aeabi_dmul>
 800e36a:	3501      	adds	r5, #1
 800e36c:	2301      	movs	r3, #1
 800e36e:	1076      	asrs	r6, r6, #1
 800e370:	3708      	adds	r7, #8
 800e372:	e76c      	b.n	800e24e <_dtoa_r+0x3ce>
 800e374:	2502      	movs	r5, #2
 800e376:	e76f      	b.n	800e258 <_dtoa_r+0x3d8>
 800e378:	9b01      	ldr	r3, [sp, #4]
 800e37a:	f8cd a01c 	str.w	sl, [sp, #28]
 800e37e:	930c      	str	r3, [sp, #48]	; 0x30
 800e380:	e78d      	b.n	800e29e <_dtoa_r+0x41e>
 800e382:	9900      	ldr	r1, [sp, #0]
 800e384:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e386:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e388:	4b4e      	ldr	r3, [pc, #312]	; (800e4c4 <_dtoa_r+0x644>)
 800e38a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e38e:	4401      	add	r1, r0
 800e390:	9102      	str	r1, [sp, #8]
 800e392:	9908      	ldr	r1, [sp, #32]
 800e394:	eeb0 8a47 	vmov.f32	s16, s14
 800e398:	eef0 8a67 	vmov.f32	s17, s15
 800e39c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e3a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e3a4:	2900      	cmp	r1, #0
 800e3a6:	d045      	beq.n	800e434 <_dtoa_r+0x5b4>
 800e3a8:	494c      	ldr	r1, [pc, #304]	; (800e4dc <_dtoa_r+0x65c>)
 800e3aa:	2000      	movs	r0, #0
 800e3ac:	f7f2 fa7e 	bl	80008ac <__aeabi_ddiv>
 800e3b0:	ec53 2b18 	vmov	r2, r3, d8
 800e3b4:	f7f1 ff98 	bl	80002e8 <__aeabi_dsub>
 800e3b8:	9d00      	ldr	r5, [sp, #0]
 800e3ba:	ec41 0b18 	vmov	d8, r0, r1
 800e3be:	4639      	mov	r1, r7
 800e3c0:	4630      	mov	r0, r6
 800e3c2:	f7f2 fbf9 	bl	8000bb8 <__aeabi_d2iz>
 800e3c6:	900c      	str	r0, [sp, #48]	; 0x30
 800e3c8:	f7f2 f8dc 	bl	8000584 <__aeabi_i2d>
 800e3cc:	4602      	mov	r2, r0
 800e3ce:	460b      	mov	r3, r1
 800e3d0:	4630      	mov	r0, r6
 800e3d2:	4639      	mov	r1, r7
 800e3d4:	f7f1 ff88 	bl	80002e8 <__aeabi_dsub>
 800e3d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e3da:	3330      	adds	r3, #48	; 0x30
 800e3dc:	f805 3b01 	strb.w	r3, [r5], #1
 800e3e0:	ec53 2b18 	vmov	r2, r3, d8
 800e3e4:	4606      	mov	r6, r0
 800e3e6:	460f      	mov	r7, r1
 800e3e8:	f7f2 fba8 	bl	8000b3c <__aeabi_dcmplt>
 800e3ec:	2800      	cmp	r0, #0
 800e3ee:	d165      	bne.n	800e4bc <_dtoa_r+0x63c>
 800e3f0:	4632      	mov	r2, r6
 800e3f2:	463b      	mov	r3, r7
 800e3f4:	4935      	ldr	r1, [pc, #212]	; (800e4cc <_dtoa_r+0x64c>)
 800e3f6:	2000      	movs	r0, #0
 800e3f8:	f7f1 ff76 	bl	80002e8 <__aeabi_dsub>
 800e3fc:	ec53 2b18 	vmov	r2, r3, d8
 800e400:	f7f2 fb9c 	bl	8000b3c <__aeabi_dcmplt>
 800e404:	2800      	cmp	r0, #0
 800e406:	f040 80b9 	bne.w	800e57c <_dtoa_r+0x6fc>
 800e40a:	9b02      	ldr	r3, [sp, #8]
 800e40c:	429d      	cmp	r5, r3
 800e40e:	f43f af75 	beq.w	800e2fc <_dtoa_r+0x47c>
 800e412:	4b2f      	ldr	r3, [pc, #188]	; (800e4d0 <_dtoa_r+0x650>)
 800e414:	ec51 0b18 	vmov	r0, r1, d8
 800e418:	2200      	movs	r2, #0
 800e41a:	f7f2 f91d 	bl	8000658 <__aeabi_dmul>
 800e41e:	4b2c      	ldr	r3, [pc, #176]	; (800e4d0 <_dtoa_r+0x650>)
 800e420:	ec41 0b18 	vmov	d8, r0, r1
 800e424:	2200      	movs	r2, #0
 800e426:	4630      	mov	r0, r6
 800e428:	4639      	mov	r1, r7
 800e42a:	f7f2 f915 	bl	8000658 <__aeabi_dmul>
 800e42e:	4606      	mov	r6, r0
 800e430:	460f      	mov	r7, r1
 800e432:	e7c4      	b.n	800e3be <_dtoa_r+0x53e>
 800e434:	ec51 0b17 	vmov	r0, r1, d7
 800e438:	f7f2 f90e 	bl	8000658 <__aeabi_dmul>
 800e43c:	9b02      	ldr	r3, [sp, #8]
 800e43e:	9d00      	ldr	r5, [sp, #0]
 800e440:	930c      	str	r3, [sp, #48]	; 0x30
 800e442:	ec41 0b18 	vmov	d8, r0, r1
 800e446:	4639      	mov	r1, r7
 800e448:	4630      	mov	r0, r6
 800e44a:	f7f2 fbb5 	bl	8000bb8 <__aeabi_d2iz>
 800e44e:	9011      	str	r0, [sp, #68]	; 0x44
 800e450:	f7f2 f898 	bl	8000584 <__aeabi_i2d>
 800e454:	4602      	mov	r2, r0
 800e456:	460b      	mov	r3, r1
 800e458:	4630      	mov	r0, r6
 800e45a:	4639      	mov	r1, r7
 800e45c:	f7f1 ff44 	bl	80002e8 <__aeabi_dsub>
 800e460:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e462:	3330      	adds	r3, #48	; 0x30
 800e464:	f805 3b01 	strb.w	r3, [r5], #1
 800e468:	9b02      	ldr	r3, [sp, #8]
 800e46a:	429d      	cmp	r5, r3
 800e46c:	4606      	mov	r6, r0
 800e46e:	460f      	mov	r7, r1
 800e470:	f04f 0200 	mov.w	r2, #0
 800e474:	d134      	bne.n	800e4e0 <_dtoa_r+0x660>
 800e476:	4b19      	ldr	r3, [pc, #100]	; (800e4dc <_dtoa_r+0x65c>)
 800e478:	ec51 0b18 	vmov	r0, r1, d8
 800e47c:	f7f1 ff36 	bl	80002ec <__adddf3>
 800e480:	4602      	mov	r2, r0
 800e482:	460b      	mov	r3, r1
 800e484:	4630      	mov	r0, r6
 800e486:	4639      	mov	r1, r7
 800e488:	f7f2 fb76 	bl	8000b78 <__aeabi_dcmpgt>
 800e48c:	2800      	cmp	r0, #0
 800e48e:	d175      	bne.n	800e57c <_dtoa_r+0x6fc>
 800e490:	ec53 2b18 	vmov	r2, r3, d8
 800e494:	4911      	ldr	r1, [pc, #68]	; (800e4dc <_dtoa_r+0x65c>)
 800e496:	2000      	movs	r0, #0
 800e498:	f7f1 ff26 	bl	80002e8 <__aeabi_dsub>
 800e49c:	4602      	mov	r2, r0
 800e49e:	460b      	mov	r3, r1
 800e4a0:	4630      	mov	r0, r6
 800e4a2:	4639      	mov	r1, r7
 800e4a4:	f7f2 fb4a 	bl	8000b3c <__aeabi_dcmplt>
 800e4a8:	2800      	cmp	r0, #0
 800e4aa:	f43f af27 	beq.w	800e2fc <_dtoa_r+0x47c>
 800e4ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e4b0:	1e6b      	subs	r3, r5, #1
 800e4b2:	930c      	str	r3, [sp, #48]	; 0x30
 800e4b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e4b8:	2b30      	cmp	r3, #48	; 0x30
 800e4ba:	d0f8      	beq.n	800e4ae <_dtoa_r+0x62e>
 800e4bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e4c0:	e04a      	b.n	800e558 <_dtoa_r+0x6d8>
 800e4c2:	bf00      	nop
 800e4c4:	08012080 	.word	0x08012080
 800e4c8:	08012058 	.word	0x08012058
 800e4cc:	3ff00000 	.word	0x3ff00000
 800e4d0:	40240000 	.word	0x40240000
 800e4d4:	401c0000 	.word	0x401c0000
 800e4d8:	40140000 	.word	0x40140000
 800e4dc:	3fe00000 	.word	0x3fe00000
 800e4e0:	4baf      	ldr	r3, [pc, #700]	; (800e7a0 <_dtoa_r+0x920>)
 800e4e2:	f7f2 f8b9 	bl	8000658 <__aeabi_dmul>
 800e4e6:	4606      	mov	r6, r0
 800e4e8:	460f      	mov	r7, r1
 800e4ea:	e7ac      	b.n	800e446 <_dtoa_r+0x5c6>
 800e4ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e4f0:	9d00      	ldr	r5, [sp, #0]
 800e4f2:	4642      	mov	r2, r8
 800e4f4:	464b      	mov	r3, r9
 800e4f6:	4630      	mov	r0, r6
 800e4f8:	4639      	mov	r1, r7
 800e4fa:	f7f2 f9d7 	bl	80008ac <__aeabi_ddiv>
 800e4fe:	f7f2 fb5b 	bl	8000bb8 <__aeabi_d2iz>
 800e502:	9002      	str	r0, [sp, #8]
 800e504:	f7f2 f83e 	bl	8000584 <__aeabi_i2d>
 800e508:	4642      	mov	r2, r8
 800e50a:	464b      	mov	r3, r9
 800e50c:	f7f2 f8a4 	bl	8000658 <__aeabi_dmul>
 800e510:	4602      	mov	r2, r0
 800e512:	460b      	mov	r3, r1
 800e514:	4630      	mov	r0, r6
 800e516:	4639      	mov	r1, r7
 800e518:	f7f1 fee6 	bl	80002e8 <__aeabi_dsub>
 800e51c:	9e02      	ldr	r6, [sp, #8]
 800e51e:	9f01      	ldr	r7, [sp, #4]
 800e520:	3630      	adds	r6, #48	; 0x30
 800e522:	f805 6b01 	strb.w	r6, [r5], #1
 800e526:	9e00      	ldr	r6, [sp, #0]
 800e528:	1bae      	subs	r6, r5, r6
 800e52a:	42b7      	cmp	r7, r6
 800e52c:	4602      	mov	r2, r0
 800e52e:	460b      	mov	r3, r1
 800e530:	d137      	bne.n	800e5a2 <_dtoa_r+0x722>
 800e532:	f7f1 fedb 	bl	80002ec <__adddf3>
 800e536:	4642      	mov	r2, r8
 800e538:	464b      	mov	r3, r9
 800e53a:	4606      	mov	r6, r0
 800e53c:	460f      	mov	r7, r1
 800e53e:	f7f2 fb1b 	bl	8000b78 <__aeabi_dcmpgt>
 800e542:	b9c8      	cbnz	r0, 800e578 <_dtoa_r+0x6f8>
 800e544:	4642      	mov	r2, r8
 800e546:	464b      	mov	r3, r9
 800e548:	4630      	mov	r0, r6
 800e54a:	4639      	mov	r1, r7
 800e54c:	f7f2 faec 	bl	8000b28 <__aeabi_dcmpeq>
 800e550:	b110      	cbz	r0, 800e558 <_dtoa_r+0x6d8>
 800e552:	9b02      	ldr	r3, [sp, #8]
 800e554:	07d9      	lsls	r1, r3, #31
 800e556:	d40f      	bmi.n	800e578 <_dtoa_r+0x6f8>
 800e558:	4620      	mov	r0, r4
 800e55a:	4659      	mov	r1, fp
 800e55c:	f001 f868 	bl	800f630 <_Bfree>
 800e560:	2300      	movs	r3, #0
 800e562:	702b      	strb	r3, [r5, #0]
 800e564:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e566:	f10a 0001 	add.w	r0, sl, #1
 800e56a:	6018      	str	r0, [r3, #0]
 800e56c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e56e:	2b00      	cmp	r3, #0
 800e570:	f43f acd8 	beq.w	800df24 <_dtoa_r+0xa4>
 800e574:	601d      	str	r5, [r3, #0]
 800e576:	e4d5      	b.n	800df24 <_dtoa_r+0xa4>
 800e578:	f8cd a01c 	str.w	sl, [sp, #28]
 800e57c:	462b      	mov	r3, r5
 800e57e:	461d      	mov	r5, r3
 800e580:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e584:	2a39      	cmp	r2, #57	; 0x39
 800e586:	d108      	bne.n	800e59a <_dtoa_r+0x71a>
 800e588:	9a00      	ldr	r2, [sp, #0]
 800e58a:	429a      	cmp	r2, r3
 800e58c:	d1f7      	bne.n	800e57e <_dtoa_r+0x6fe>
 800e58e:	9a07      	ldr	r2, [sp, #28]
 800e590:	9900      	ldr	r1, [sp, #0]
 800e592:	3201      	adds	r2, #1
 800e594:	9207      	str	r2, [sp, #28]
 800e596:	2230      	movs	r2, #48	; 0x30
 800e598:	700a      	strb	r2, [r1, #0]
 800e59a:	781a      	ldrb	r2, [r3, #0]
 800e59c:	3201      	adds	r2, #1
 800e59e:	701a      	strb	r2, [r3, #0]
 800e5a0:	e78c      	b.n	800e4bc <_dtoa_r+0x63c>
 800e5a2:	4b7f      	ldr	r3, [pc, #508]	; (800e7a0 <_dtoa_r+0x920>)
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	f7f2 f857 	bl	8000658 <__aeabi_dmul>
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	4606      	mov	r6, r0
 800e5b0:	460f      	mov	r7, r1
 800e5b2:	f7f2 fab9 	bl	8000b28 <__aeabi_dcmpeq>
 800e5b6:	2800      	cmp	r0, #0
 800e5b8:	d09b      	beq.n	800e4f2 <_dtoa_r+0x672>
 800e5ba:	e7cd      	b.n	800e558 <_dtoa_r+0x6d8>
 800e5bc:	9a08      	ldr	r2, [sp, #32]
 800e5be:	2a00      	cmp	r2, #0
 800e5c0:	f000 80c4 	beq.w	800e74c <_dtoa_r+0x8cc>
 800e5c4:	9a05      	ldr	r2, [sp, #20]
 800e5c6:	2a01      	cmp	r2, #1
 800e5c8:	f300 80a8 	bgt.w	800e71c <_dtoa_r+0x89c>
 800e5cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e5ce:	2a00      	cmp	r2, #0
 800e5d0:	f000 80a0 	beq.w	800e714 <_dtoa_r+0x894>
 800e5d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e5d8:	9e06      	ldr	r6, [sp, #24]
 800e5da:	4645      	mov	r5, r8
 800e5dc:	9a04      	ldr	r2, [sp, #16]
 800e5de:	2101      	movs	r1, #1
 800e5e0:	441a      	add	r2, r3
 800e5e2:	4620      	mov	r0, r4
 800e5e4:	4498      	add	r8, r3
 800e5e6:	9204      	str	r2, [sp, #16]
 800e5e8:	f001 f928 	bl	800f83c <__i2b>
 800e5ec:	4607      	mov	r7, r0
 800e5ee:	2d00      	cmp	r5, #0
 800e5f0:	dd0b      	ble.n	800e60a <_dtoa_r+0x78a>
 800e5f2:	9b04      	ldr	r3, [sp, #16]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	dd08      	ble.n	800e60a <_dtoa_r+0x78a>
 800e5f8:	42ab      	cmp	r3, r5
 800e5fa:	9a04      	ldr	r2, [sp, #16]
 800e5fc:	bfa8      	it	ge
 800e5fe:	462b      	movge	r3, r5
 800e600:	eba8 0803 	sub.w	r8, r8, r3
 800e604:	1aed      	subs	r5, r5, r3
 800e606:	1ad3      	subs	r3, r2, r3
 800e608:	9304      	str	r3, [sp, #16]
 800e60a:	9b06      	ldr	r3, [sp, #24]
 800e60c:	b1fb      	cbz	r3, 800e64e <_dtoa_r+0x7ce>
 800e60e:	9b08      	ldr	r3, [sp, #32]
 800e610:	2b00      	cmp	r3, #0
 800e612:	f000 809f 	beq.w	800e754 <_dtoa_r+0x8d4>
 800e616:	2e00      	cmp	r6, #0
 800e618:	dd11      	ble.n	800e63e <_dtoa_r+0x7be>
 800e61a:	4639      	mov	r1, r7
 800e61c:	4632      	mov	r2, r6
 800e61e:	4620      	mov	r0, r4
 800e620:	f001 f9c8 	bl	800f9b4 <__pow5mult>
 800e624:	465a      	mov	r2, fp
 800e626:	4601      	mov	r1, r0
 800e628:	4607      	mov	r7, r0
 800e62a:	4620      	mov	r0, r4
 800e62c:	f001 f91c 	bl	800f868 <__multiply>
 800e630:	4659      	mov	r1, fp
 800e632:	9007      	str	r0, [sp, #28]
 800e634:	4620      	mov	r0, r4
 800e636:	f000 fffb 	bl	800f630 <_Bfree>
 800e63a:	9b07      	ldr	r3, [sp, #28]
 800e63c:	469b      	mov	fp, r3
 800e63e:	9b06      	ldr	r3, [sp, #24]
 800e640:	1b9a      	subs	r2, r3, r6
 800e642:	d004      	beq.n	800e64e <_dtoa_r+0x7ce>
 800e644:	4659      	mov	r1, fp
 800e646:	4620      	mov	r0, r4
 800e648:	f001 f9b4 	bl	800f9b4 <__pow5mult>
 800e64c:	4683      	mov	fp, r0
 800e64e:	2101      	movs	r1, #1
 800e650:	4620      	mov	r0, r4
 800e652:	f001 f8f3 	bl	800f83c <__i2b>
 800e656:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e658:	2b00      	cmp	r3, #0
 800e65a:	4606      	mov	r6, r0
 800e65c:	dd7c      	ble.n	800e758 <_dtoa_r+0x8d8>
 800e65e:	461a      	mov	r2, r3
 800e660:	4601      	mov	r1, r0
 800e662:	4620      	mov	r0, r4
 800e664:	f001 f9a6 	bl	800f9b4 <__pow5mult>
 800e668:	9b05      	ldr	r3, [sp, #20]
 800e66a:	2b01      	cmp	r3, #1
 800e66c:	4606      	mov	r6, r0
 800e66e:	dd76      	ble.n	800e75e <_dtoa_r+0x8de>
 800e670:	2300      	movs	r3, #0
 800e672:	9306      	str	r3, [sp, #24]
 800e674:	6933      	ldr	r3, [r6, #16]
 800e676:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e67a:	6918      	ldr	r0, [r3, #16]
 800e67c:	f001 f88e 	bl	800f79c <__hi0bits>
 800e680:	f1c0 0020 	rsb	r0, r0, #32
 800e684:	9b04      	ldr	r3, [sp, #16]
 800e686:	4418      	add	r0, r3
 800e688:	f010 001f 	ands.w	r0, r0, #31
 800e68c:	f000 8086 	beq.w	800e79c <_dtoa_r+0x91c>
 800e690:	f1c0 0320 	rsb	r3, r0, #32
 800e694:	2b04      	cmp	r3, #4
 800e696:	dd7f      	ble.n	800e798 <_dtoa_r+0x918>
 800e698:	f1c0 001c 	rsb	r0, r0, #28
 800e69c:	9b04      	ldr	r3, [sp, #16]
 800e69e:	4403      	add	r3, r0
 800e6a0:	4480      	add	r8, r0
 800e6a2:	4405      	add	r5, r0
 800e6a4:	9304      	str	r3, [sp, #16]
 800e6a6:	f1b8 0f00 	cmp.w	r8, #0
 800e6aa:	dd05      	ble.n	800e6b8 <_dtoa_r+0x838>
 800e6ac:	4659      	mov	r1, fp
 800e6ae:	4642      	mov	r2, r8
 800e6b0:	4620      	mov	r0, r4
 800e6b2:	f001 f9d9 	bl	800fa68 <__lshift>
 800e6b6:	4683      	mov	fp, r0
 800e6b8:	9b04      	ldr	r3, [sp, #16]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	dd05      	ble.n	800e6ca <_dtoa_r+0x84a>
 800e6be:	4631      	mov	r1, r6
 800e6c0:	461a      	mov	r2, r3
 800e6c2:	4620      	mov	r0, r4
 800e6c4:	f001 f9d0 	bl	800fa68 <__lshift>
 800e6c8:	4606      	mov	r6, r0
 800e6ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d069      	beq.n	800e7a4 <_dtoa_r+0x924>
 800e6d0:	4631      	mov	r1, r6
 800e6d2:	4658      	mov	r0, fp
 800e6d4:	f001 fa34 	bl	800fb40 <__mcmp>
 800e6d8:	2800      	cmp	r0, #0
 800e6da:	da63      	bge.n	800e7a4 <_dtoa_r+0x924>
 800e6dc:	2300      	movs	r3, #0
 800e6de:	4659      	mov	r1, fp
 800e6e0:	220a      	movs	r2, #10
 800e6e2:	4620      	mov	r0, r4
 800e6e4:	f000 ffc6 	bl	800f674 <__multadd>
 800e6e8:	9b08      	ldr	r3, [sp, #32]
 800e6ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e6ee:	4683      	mov	fp, r0
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	f000 818f 	beq.w	800ea14 <_dtoa_r+0xb94>
 800e6f6:	4639      	mov	r1, r7
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	220a      	movs	r2, #10
 800e6fc:	4620      	mov	r0, r4
 800e6fe:	f000 ffb9 	bl	800f674 <__multadd>
 800e702:	f1b9 0f00 	cmp.w	r9, #0
 800e706:	4607      	mov	r7, r0
 800e708:	f300 808e 	bgt.w	800e828 <_dtoa_r+0x9a8>
 800e70c:	9b05      	ldr	r3, [sp, #20]
 800e70e:	2b02      	cmp	r3, #2
 800e710:	dc50      	bgt.n	800e7b4 <_dtoa_r+0x934>
 800e712:	e089      	b.n	800e828 <_dtoa_r+0x9a8>
 800e714:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e716:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e71a:	e75d      	b.n	800e5d8 <_dtoa_r+0x758>
 800e71c:	9b01      	ldr	r3, [sp, #4]
 800e71e:	1e5e      	subs	r6, r3, #1
 800e720:	9b06      	ldr	r3, [sp, #24]
 800e722:	42b3      	cmp	r3, r6
 800e724:	bfbf      	itttt	lt
 800e726:	9b06      	ldrlt	r3, [sp, #24]
 800e728:	9606      	strlt	r6, [sp, #24]
 800e72a:	1af2      	sublt	r2, r6, r3
 800e72c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e72e:	bfb6      	itet	lt
 800e730:	189b      	addlt	r3, r3, r2
 800e732:	1b9e      	subge	r6, r3, r6
 800e734:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e736:	9b01      	ldr	r3, [sp, #4]
 800e738:	bfb8      	it	lt
 800e73a:	2600      	movlt	r6, #0
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	bfb5      	itete	lt
 800e740:	eba8 0503 	sublt.w	r5, r8, r3
 800e744:	9b01      	ldrge	r3, [sp, #4]
 800e746:	2300      	movlt	r3, #0
 800e748:	4645      	movge	r5, r8
 800e74a:	e747      	b.n	800e5dc <_dtoa_r+0x75c>
 800e74c:	9e06      	ldr	r6, [sp, #24]
 800e74e:	9f08      	ldr	r7, [sp, #32]
 800e750:	4645      	mov	r5, r8
 800e752:	e74c      	b.n	800e5ee <_dtoa_r+0x76e>
 800e754:	9a06      	ldr	r2, [sp, #24]
 800e756:	e775      	b.n	800e644 <_dtoa_r+0x7c4>
 800e758:	9b05      	ldr	r3, [sp, #20]
 800e75a:	2b01      	cmp	r3, #1
 800e75c:	dc18      	bgt.n	800e790 <_dtoa_r+0x910>
 800e75e:	9b02      	ldr	r3, [sp, #8]
 800e760:	b9b3      	cbnz	r3, 800e790 <_dtoa_r+0x910>
 800e762:	9b03      	ldr	r3, [sp, #12]
 800e764:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e768:	b9a3      	cbnz	r3, 800e794 <_dtoa_r+0x914>
 800e76a:	9b03      	ldr	r3, [sp, #12]
 800e76c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e770:	0d1b      	lsrs	r3, r3, #20
 800e772:	051b      	lsls	r3, r3, #20
 800e774:	b12b      	cbz	r3, 800e782 <_dtoa_r+0x902>
 800e776:	9b04      	ldr	r3, [sp, #16]
 800e778:	3301      	adds	r3, #1
 800e77a:	9304      	str	r3, [sp, #16]
 800e77c:	f108 0801 	add.w	r8, r8, #1
 800e780:	2301      	movs	r3, #1
 800e782:	9306      	str	r3, [sp, #24]
 800e784:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e786:	2b00      	cmp	r3, #0
 800e788:	f47f af74 	bne.w	800e674 <_dtoa_r+0x7f4>
 800e78c:	2001      	movs	r0, #1
 800e78e:	e779      	b.n	800e684 <_dtoa_r+0x804>
 800e790:	2300      	movs	r3, #0
 800e792:	e7f6      	b.n	800e782 <_dtoa_r+0x902>
 800e794:	9b02      	ldr	r3, [sp, #8]
 800e796:	e7f4      	b.n	800e782 <_dtoa_r+0x902>
 800e798:	d085      	beq.n	800e6a6 <_dtoa_r+0x826>
 800e79a:	4618      	mov	r0, r3
 800e79c:	301c      	adds	r0, #28
 800e79e:	e77d      	b.n	800e69c <_dtoa_r+0x81c>
 800e7a0:	40240000 	.word	0x40240000
 800e7a4:	9b01      	ldr	r3, [sp, #4]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	dc38      	bgt.n	800e81c <_dtoa_r+0x99c>
 800e7aa:	9b05      	ldr	r3, [sp, #20]
 800e7ac:	2b02      	cmp	r3, #2
 800e7ae:	dd35      	ble.n	800e81c <_dtoa_r+0x99c>
 800e7b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e7b4:	f1b9 0f00 	cmp.w	r9, #0
 800e7b8:	d10d      	bne.n	800e7d6 <_dtoa_r+0x956>
 800e7ba:	4631      	mov	r1, r6
 800e7bc:	464b      	mov	r3, r9
 800e7be:	2205      	movs	r2, #5
 800e7c0:	4620      	mov	r0, r4
 800e7c2:	f000 ff57 	bl	800f674 <__multadd>
 800e7c6:	4601      	mov	r1, r0
 800e7c8:	4606      	mov	r6, r0
 800e7ca:	4658      	mov	r0, fp
 800e7cc:	f001 f9b8 	bl	800fb40 <__mcmp>
 800e7d0:	2800      	cmp	r0, #0
 800e7d2:	f73f adbd 	bgt.w	800e350 <_dtoa_r+0x4d0>
 800e7d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7d8:	9d00      	ldr	r5, [sp, #0]
 800e7da:	ea6f 0a03 	mvn.w	sl, r3
 800e7de:	f04f 0800 	mov.w	r8, #0
 800e7e2:	4631      	mov	r1, r6
 800e7e4:	4620      	mov	r0, r4
 800e7e6:	f000 ff23 	bl	800f630 <_Bfree>
 800e7ea:	2f00      	cmp	r7, #0
 800e7ec:	f43f aeb4 	beq.w	800e558 <_dtoa_r+0x6d8>
 800e7f0:	f1b8 0f00 	cmp.w	r8, #0
 800e7f4:	d005      	beq.n	800e802 <_dtoa_r+0x982>
 800e7f6:	45b8      	cmp	r8, r7
 800e7f8:	d003      	beq.n	800e802 <_dtoa_r+0x982>
 800e7fa:	4641      	mov	r1, r8
 800e7fc:	4620      	mov	r0, r4
 800e7fe:	f000 ff17 	bl	800f630 <_Bfree>
 800e802:	4639      	mov	r1, r7
 800e804:	4620      	mov	r0, r4
 800e806:	f000 ff13 	bl	800f630 <_Bfree>
 800e80a:	e6a5      	b.n	800e558 <_dtoa_r+0x6d8>
 800e80c:	2600      	movs	r6, #0
 800e80e:	4637      	mov	r7, r6
 800e810:	e7e1      	b.n	800e7d6 <_dtoa_r+0x956>
 800e812:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e814:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e818:	4637      	mov	r7, r6
 800e81a:	e599      	b.n	800e350 <_dtoa_r+0x4d0>
 800e81c:	9b08      	ldr	r3, [sp, #32]
 800e81e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e822:	2b00      	cmp	r3, #0
 800e824:	f000 80fd 	beq.w	800ea22 <_dtoa_r+0xba2>
 800e828:	2d00      	cmp	r5, #0
 800e82a:	dd05      	ble.n	800e838 <_dtoa_r+0x9b8>
 800e82c:	4639      	mov	r1, r7
 800e82e:	462a      	mov	r2, r5
 800e830:	4620      	mov	r0, r4
 800e832:	f001 f919 	bl	800fa68 <__lshift>
 800e836:	4607      	mov	r7, r0
 800e838:	9b06      	ldr	r3, [sp, #24]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d05c      	beq.n	800e8f8 <_dtoa_r+0xa78>
 800e83e:	6879      	ldr	r1, [r7, #4]
 800e840:	4620      	mov	r0, r4
 800e842:	f000 feb5 	bl	800f5b0 <_Balloc>
 800e846:	4605      	mov	r5, r0
 800e848:	b928      	cbnz	r0, 800e856 <_dtoa_r+0x9d6>
 800e84a:	4b80      	ldr	r3, [pc, #512]	; (800ea4c <_dtoa_r+0xbcc>)
 800e84c:	4602      	mov	r2, r0
 800e84e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e852:	f7ff bb2e 	b.w	800deb2 <_dtoa_r+0x32>
 800e856:	693a      	ldr	r2, [r7, #16]
 800e858:	3202      	adds	r2, #2
 800e85a:	0092      	lsls	r2, r2, #2
 800e85c:	f107 010c 	add.w	r1, r7, #12
 800e860:	300c      	adds	r0, #12
 800e862:	f7fd fdd1 	bl	800c408 <memcpy>
 800e866:	2201      	movs	r2, #1
 800e868:	4629      	mov	r1, r5
 800e86a:	4620      	mov	r0, r4
 800e86c:	f001 f8fc 	bl	800fa68 <__lshift>
 800e870:	9b00      	ldr	r3, [sp, #0]
 800e872:	3301      	adds	r3, #1
 800e874:	9301      	str	r3, [sp, #4]
 800e876:	9b00      	ldr	r3, [sp, #0]
 800e878:	444b      	add	r3, r9
 800e87a:	9307      	str	r3, [sp, #28]
 800e87c:	9b02      	ldr	r3, [sp, #8]
 800e87e:	f003 0301 	and.w	r3, r3, #1
 800e882:	46b8      	mov	r8, r7
 800e884:	9306      	str	r3, [sp, #24]
 800e886:	4607      	mov	r7, r0
 800e888:	9b01      	ldr	r3, [sp, #4]
 800e88a:	4631      	mov	r1, r6
 800e88c:	3b01      	subs	r3, #1
 800e88e:	4658      	mov	r0, fp
 800e890:	9302      	str	r3, [sp, #8]
 800e892:	f7ff fa69 	bl	800dd68 <quorem>
 800e896:	4603      	mov	r3, r0
 800e898:	3330      	adds	r3, #48	; 0x30
 800e89a:	9004      	str	r0, [sp, #16]
 800e89c:	4641      	mov	r1, r8
 800e89e:	4658      	mov	r0, fp
 800e8a0:	9308      	str	r3, [sp, #32]
 800e8a2:	f001 f94d 	bl	800fb40 <__mcmp>
 800e8a6:	463a      	mov	r2, r7
 800e8a8:	4681      	mov	r9, r0
 800e8aa:	4631      	mov	r1, r6
 800e8ac:	4620      	mov	r0, r4
 800e8ae:	f001 f963 	bl	800fb78 <__mdiff>
 800e8b2:	68c2      	ldr	r2, [r0, #12]
 800e8b4:	9b08      	ldr	r3, [sp, #32]
 800e8b6:	4605      	mov	r5, r0
 800e8b8:	bb02      	cbnz	r2, 800e8fc <_dtoa_r+0xa7c>
 800e8ba:	4601      	mov	r1, r0
 800e8bc:	4658      	mov	r0, fp
 800e8be:	f001 f93f 	bl	800fb40 <__mcmp>
 800e8c2:	9b08      	ldr	r3, [sp, #32]
 800e8c4:	4602      	mov	r2, r0
 800e8c6:	4629      	mov	r1, r5
 800e8c8:	4620      	mov	r0, r4
 800e8ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e8ce:	f000 feaf 	bl	800f630 <_Bfree>
 800e8d2:	9b05      	ldr	r3, [sp, #20]
 800e8d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e8d6:	9d01      	ldr	r5, [sp, #4]
 800e8d8:	ea43 0102 	orr.w	r1, r3, r2
 800e8dc:	9b06      	ldr	r3, [sp, #24]
 800e8de:	430b      	orrs	r3, r1
 800e8e0:	9b08      	ldr	r3, [sp, #32]
 800e8e2:	d10d      	bne.n	800e900 <_dtoa_r+0xa80>
 800e8e4:	2b39      	cmp	r3, #57	; 0x39
 800e8e6:	d029      	beq.n	800e93c <_dtoa_r+0xabc>
 800e8e8:	f1b9 0f00 	cmp.w	r9, #0
 800e8ec:	dd01      	ble.n	800e8f2 <_dtoa_r+0xa72>
 800e8ee:	9b04      	ldr	r3, [sp, #16]
 800e8f0:	3331      	adds	r3, #49	; 0x31
 800e8f2:	9a02      	ldr	r2, [sp, #8]
 800e8f4:	7013      	strb	r3, [r2, #0]
 800e8f6:	e774      	b.n	800e7e2 <_dtoa_r+0x962>
 800e8f8:	4638      	mov	r0, r7
 800e8fa:	e7b9      	b.n	800e870 <_dtoa_r+0x9f0>
 800e8fc:	2201      	movs	r2, #1
 800e8fe:	e7e2      	b.n	800e8c6 <_dtoa_r+0xa46>
 800e900:	f1b9 0f00 	cmp.w	r9, #0
 800e904:	db06      	blt.n	800e914 <_dtoa_r+0xa94>
 800e906:	9905      	ldr	r1, [sp, #20]
 800e908:	ea41 0909 	orr.w	r9, r1, r9
 800e90c:	9906      	ldr	r1, [sp, #24]
 800e90e:	ea59 0101 	orrs.w	r1, r9, r1
 800e912:	d120      	bne.n	800e956 <_dtoa_r+0xad6>
 800e914:	2a00      	cmp	r2, #0
 800e916:	ddec      	ble.n	800e8f2 <_dtoa_r+0xa72>
 800e918:	4659      	mov	r1, fp
 800e91a:	2201      	movs	r2, #1
 800e91c:	4620      	mov	r0, r4
 800e91e:	9301      	str	r3, [sp, #4]
 800e920:	f001 f8a2 	bl	800fa68 <__lshift>
 800e924:	4631      	mov	r1, r6
 800e926:	4683      	mov	fp, r0
 800e928:	f001 f90a 	bl	800fb40 <__mcmp>
 800e92c:	2800      	cmp	r0, #0
 800e92e:	9b01      	ldr	r3, [sp, #4]
 800e930:	dc02      	bgt.n	800e938 <_dtoa_r+0xab8>
 800e932:	d1de      	bne.n	800e8f2 <_dtoa_r+0xa72>
 800e934:	07da      	lsls	r2, r3, #31
 800e936:	d5dc      	bpl.n	800e8f2 <_dtoa_r+0xa72>
 800e938:	2b39      	cmp	r3, #57	; 0x39
 800e93a:	d1d8      	bne.n	800e8ee <_dtoa_r+0xa6e>
 800e93c:	9a02      	ldr	r2, [sp, #8]
 800e93e:	2339      	movs	r3, #57	; 0x39
 800e940:	7013      	strb	r3, [r2, #0]
 800e942:	462b      	mov	r3, r5
 800e944:	461d      	mov	r5, r3
 800e946:	3b01      	subs	r3, #1
 800e948:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e94c:	2a39      	cmp	r2, #57	; 0x39
 800e94e:	d050      	beq.n	800e9f2 <_dtoa_r+0xb72>
 800e950:	3201      	adds	r2, #1
 800e952:	701a      	strb	r2, [r3, #0]
 800e954:	e745      	b.n	800e7e2 <_dtoa_r+0x962>
 800e956:	2a00      	cmp	r2, #0
 800e958:	dd03      	ble.n	800e962 <_dtoa_r+0xae2>
 800e95a:	2b39      	cmp	r3, #57	; 0x39
 800e95c:	d0ee      	beq.n	800e93c <_dtoa_r+0xabc>
 800e95e:	3301      	adds	r3, #1
 800e960:	e7c7      	b.n	800e8f2 <_dtoa_r+0xa72>
 800e962:	9a01      	ldr	r2, [sp, #4]
 800e964:	9907      	ldr	r1, [sp, #28]
 800e966:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e96a:	428a      	cmp	r2, r1
 800e96c:	d02a      	beq.n	800e9c4 <_dtoa_r+0xb44>
 800e96e:	4659      	mov	r1, fp
 800e970:	2300      	movs	r3, #0
 800e972:	220a      	movs	r2, #10
 800e974:	4620      	mov	r0, r4
 800e976:	f000 fe7d 	bl	800f674 <__multadd>
 800e97a:	45b8      	cmp	r8, r7
 800e97c:	4683      	mov	fp, r0
 800e97e:	f04f 0300 	mov.w	r3, #0
 800e982:	f04f 020a 	mov.w	r2, #10
 800e986:	4641      	mov	r1, r8
 800e988:	4620      	mov	r0, r4
 800e98a:	d107      	bne.n	800e99c <_dtoa_r+0xb1c>
 800e98c:	f000 fe72 	bl	800f674 <__multadd>
 800e990:	4680      	mov	r8, r0
 800e992:	4607      	mov	r7, r0
 800e994:	9b01      	ldr	r3, [sp, #4]
 800e996:	3301      	adds	r3, #1
 800e998:	9301      	str	r3, [sp, #4]
 800e99a:	e775      	b.n	800e888 <_dtoa_r+0xa08>
 800e99c:	f000 fe6a 	bl	800f674 <__multadd>
 800e9a0:	4639      	mov	r1, r7
 800e9a2:	4680      	mov	r8, r0
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	220a      	movs	r2, #10
 800e9a8:	4620      	mov	r0, r4
 800e9aa:	f000 fe63 	bl	800f674 <__multadd>
 800e9ae:	4607      	mov	r7, r0
 800e9b0:	e7f0      	b.n	800e994 <_dtoa_r+0xb14>
 800e9b2:	f1b9 0f00 	cmp.w	r9, #0
 800e9b6:	9a00      	ldr	r2, [sp, #0]
 800e9b8:	bfcc      	ite	gt
 800e9ba:	464d      	movgt	r5, r9
 800e9bc:	2501      	movle	r5, #1
 800e9be:	4415      	add	r5, r2
 800e9c0:	f04f 0800 	mov.w	r8, #0
 800e9c4:	4659      	mov	r1, fp
 800e9c6:	2201      	movs	r2, #1
 800e9c8:	4620      	mov	r0, r4
 800e9ca:	9301      	str	r3, [sp, #4]
 800e9cc:	f001 f84c 	bl	800fa68 <__lshift>
 800e9d0:	4631      	mov	r1, r6
 800e9d2:	4683      	mov	fp, r0
 800e9d4:	f001 f8b4 	bl	800fb40 <__mcmp>
 800e9d8:	2800      	cmp	r0, #0
 800e9da:	dcb2      	bgt.n	800e942 <_dtoa_r+0xac2>
 800e9dc:	d102      	bne.n	800e9e4 <_dtoa_r+0xb64>
 800e9de:	9b01      	ldr	r3, [sp, #4]
 800e9e0:	07db      	lsls	r3, r3, #31
 800e9e2:	d4ae      	bmi.n	800e942 <_dtoa_r+0xac2>
 800e9e4:	462b      	mov	r3, r5
 800e9e6:	461d      	mov	r5, r3
 800e9e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e9ec:	2a30      	cmp	r2, #48	; 0x30
 800e9ee:	d0fa      	beq.n	800e9e6 <_dtoa_r+0xb66>
 800e9f0:	e6f7      	b.n	800e7e2 <_dtoa_r+0x962>
 800e9f2:	9a00      	ldr	r2, [sp, #0]
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	d1a5      	bne.n	800e944 <_dtoa_r+0xac4>
 800e9f8:	f10a 0a01 	add.w	sl, sl, #1
 800e9fc:	2331      	movs	r3, #49	; 0x31
 800e9fe:	e779      	b.n	800e8f4 <_dtoa_r+0xa74>
 800ea00:	4b13      	ldr	r3, [pc, #76]	; (800ea50 <_dtoa_r+0xbd0>)
 800ea02:	f7ff baaf 	b.w	800df64 <_dtoa_r+0xe4>
 800ea06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	f47f aa86 	bne.w	800df1a <_dtoa_r+0x9a>
 800ea0e:	4b11      	ldr	r3, [pc, #68]	; (800ea54 <_dtoa_r+0xbd4>)
 800ea10:	f7ff baa8 	b.w	800df64 <_dtoa_r+0xe4>
 800ea14:	f1b9 0f00 	cmp.w	r9, #0
 800ea18:	dc03      	bgt.n	800ea22 <_dtoa_r+0xba2>
 800ea1a:	9b05      	ldr	r3, [sp, #20]
 800ea1c:	2b02      	cmp	r3, #2
 800ea1e:	f73f aec9 	bgt.w	800e7b4 <_dtoa_r+0x934>
 800ea22:	9d00      	ldr	r5, [sp, #0]
 800ea24:	4631      	mov	r1, r6
 800ea26:	4658      	mov	r0, fp
 800ea28:	f7ff f99e 	bl	800dd68 <quorem>
 800ea2c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ea30:	f805 3b01 	strb.w	r3, [r5], #1
 800ea34:	9a00      	ldr	r2, [sp, #0]
 800ea36:	1aaa      	subs	r2, r5, r2
 800ea38:	4591      	cmp	r9, r2
 800ea3a:	ddba      	ble.n	800e9b2 <_dtoa_r+0xb32>
 800ea3c:	4659      	mov	r1, fp
 800ea3e:	2300      	movs	r3, #0
 800ea40:	220a      	movs	r2, #10
 800ea42:	4620      	mov	r0, r4
 800ea44:	f000 fe16 	bl	800f674 <__multadd>
 800ea48:	4683      	mov	fp, r0
 800ea4a:	e7eb      	b.n	800ea24 <_dtoa_r+0xba4>
 800ea4c:	08011f04 	.word	0x08011f04
 800ea50:	08011d0c 	.word	0x08011d0c
 800ea54:	08011e81 	.word	0x08011e81

0800ea58 <__sflush_r>:
 800ea58:	898a      	ldrh	r2, [r1, #12]
 800ea5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea5e:	4605      	mov	r5, r0
 800ea60:	0710      	lsls	r0, r2, #28
 800ea62:	460c      	mov	r4, r1
 800ea64:	d458      	bmi.n	800eb18 <__sflush_r+0xc0>
 800ea66:	684b      	ldr	r3, [r1, #4]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	dc05      	bgt.n	800ea78 <__sflush_r+0x20>
 800ea6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	dc02      	bgt.n	800ea78 <__sflush_r+0x20>
 800ea72:	2000      	movs	r0, #0
 800ea74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea7a:	2e00      	cmp	r6, #0
 800ea7c:	d0f9      	beq.n	800ea72 <__sflush_r+0x1a>
 800ea7e:	2300      	movs	r3, #0
 800ea80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ea84:	682f      	ldr	r7, [r5, #0]
 800ea86:	602b      	str	r3, [r5, #0]
 800ea88:	d032      	beq.n	800eaf0 <__sflush_r+0x98>
 800ea8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ea8c:	89a3      	ldrh	r3, [r4, #12]
 800ea8e:	075a      	lsls	r2, r3, #29
 800ea90:	d505      	bpl.n	800ea9e <__sflush_r+0x46>
 800ea92:	6863      	ldr	r3, [r4, #4]
 800ea94:	1ac0      	subs	r0, r0, r3
 800ea96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ea98:	b10b      	cbz	r3, 800ea9e <__sflush_r+0x46>
 800ea9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ea9c:	1ac0      	subs	r0, r0, r3
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	4602      	mov	r2, r0
 800eaa2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eaa4:	6a21      	ldr	r1, [r4, #32]
 800eaa6:	4628      	mov	r0, r5
 800eaa8:	47b0      	blx	r6
 800eaaa:	1c43      	adds	r3, r0, #1
 800eaac:	89a3      	ldrh	r3, [r4, #12]
 800eaae:	d106      	bne.n	800eabe <__sflush_r+0x66>
 800eab0:	6829      	ldr	r1, [r5, #0]
 800eab2:	291d      	cmp	r1, #29
 800eab4:	d82c      	bhi.n	800eb10 <__sflush_r+0xb8>
 800eab6:	4a2a      	ldr	r2, [pc, #168]	; (800eb60 <__sflush_r+0x108>)
 800eab8:	40ca      	lsrs	r2, r1
 800eaba:	07d6      	lsls	r6, r2, #31
 800eabc:	d528      	bpl.n	800eb10 <__sflush_r+0xb8>
 800eabe:	2200      	movs	r2, #0
 800eac0:	6062      	str	r2, [r4, #4]
 800eac2:	04d9      	lsls	r1, r3, #19
 800eac4:	6922      	ldr	r2, [r4, #16]
 800eac6:	6022      	str	r2, [r4, #0]
 800eac8:	d504      	bpl.n	800ead4 <__sflush_r+0x7c>
 800eaca:	1c42      	adds	r2, r0, #1
 800eacc:	d101      	bne.n	800ead2 <__sflush_r+0x7a>
 800eace:	682b      	ldr	r3, [r5, #0]
 800ead0:	b903      	cbnz	r3, 800ead4 <__sflush_r+0x7c>
 800ead2:	6560      	str	r0, [r4, #84]	; 0x54
 800ead4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ead6:	602f      	str	r7, [r5, #0]
 800ead8:	2900      	cmp	r1, #0
 800eada:	d0ca      	beq.n	800ea72 <__sflush_r+0x1a>
 800eadc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eae0:	4299      	cmp	r1, r3
 800eae2:	d002      	beq.n	800eaea <__sflush_r+0x92>
 800eae4:	4628      	mov	r0, r5
 800eae6:	f001 fa2d 	bl	800ff44 <_free_r>
 800eaea:	2000      	movs	r0, #0
 800eaec:	6360      	str	r0, [r4, #52]	; 0x34
 800eaee:	e7c1      	b.n	800ea74 <__sflush_r+0x1c>
 800eaf0:	6a21      	ldr	r1, [r4, #32]
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	4628      	mov	r0, r5
 800eaf6:	47b0      	blx	r6
 800eaf8:	1c41      	adds	r1, r0, #1
 800eafa:	d1c7      	bne.n	800ea8c <__sflush_r+0x34>
 800eafc:	682b      	ldr	r3, [r5, #0]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d0c4      	beq.n	800ea8c <__sflush_r+0x34>
 800eb02:	2b1d      	cmp	r3, #29
 800eb04:	d001      	beq.n	800eb0a <__sflush_r+0xb2>
 800eb06:	2b16      	cmp	r3, #22
 800eb08:	d101      	bne.n	800eb0e <__sflush_r+0xb6>
 800eb0a:	602f      	str	r7, [r5, #0]
 800eb0c:	e7b1      	b.n	800ea72 <__sflush_r+0x1a>
 800eb0e:	89a3      	ldrh	r3, [r4, #12]
 800eb10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb14:	81a3      	strh	r3, [r4, #12]
 800eb16:	e7ad      	b.n	800ea74 <__sflush_r+0x1c>
 800eb18:	690f      	ldr	r7, [r1, #16]
 800eb1a:	2f00      	cmp	r7, #0
 800eb1c:	d0a9      	beq.n	800ea72 <__sflush_r+0x1a>
 800eb1e:	0793      	lsls	r3, r2, #30
 800eb20:	680e      	ldr	r6, [r1, #0]
 800eb22:	bf08      	it	eq
 800eb24:	694b      	ldreq	r3, [r1, #20]
 800eb26:	600f      	str	r7, [r1, #0]
 800eb28:	bf18      	it	ne
 800eb2a:	2300      	movne	r3, #0
 800eb2c:	eba6 0807 	sub.w	r8, r6, r7
 800eb30:	608b      	str	r3, [r1, #8]
 800eb32:	f1b8 0f00 	cmp.w	r8, #0
 800eb36:	dd9c      	ble.n	800ea72 <__sflush_r+0x1a>
 800eb38:	6a21      	ldr	r1, [r4, #32]
 800eb3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eb3c:	4643      	mov	r3, r8
 800eb3e:	463a      	mov	r2, r7
 800eb40:	4628      	mov	r0, r5
 800eb42:	47b0      	blx	r6
 800eb44:	2800      	cmp	r0, #0
 800eb46:	dc06      	bgt.n	800eb56 <__sflush_r+0xfe>
 800eb48:	89a3      	ldrh	r3, [r4, #12]
 800eb4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb4e:	81a3      	strh	r3, [r4, #12]
 800eb50:	f04f 30ff 	mov.w	r0, #4294967295
 800eb54:	e78e      	b.n	800ea74 <__sflush_r+0x1c>
 800eb56:	4407      	add	r7, r0
 800eb58:	eba8 0800 	sub.w	r8, r8, r0
 800eb5c:	e7e9      	b.n	800eb32 <__sflush_r+0xda>
 800eb5e:	bf00      	nop
 800eb60:	20400001 	.word	0x20400001

0800eb64 <_fflush_r>:
 800eb64:	b538      	push	{r3, r4, r5, lr}
 800eb66:	690b      	ldr	r3, [r1, #16]
 800eb68:	4605      	mov	r5, r0
 800eb6a:	460c      	mov	r4, r1
 800eb6c:	b913      	cbnz	r3, 800eb74 <_fflush_r+0x10>
 800eb6e:	2500      	movs	r5, #0
 800eb70:	4628      	mov	r0, r5
 800eb72:	bd38      	pop	{r3, r4, r5, pc}
 800eb74:	b118      	cbz	r0, 800eb7e <_fflush_r+0x1a>
 800eb76:	6983      	ldr	r3, [r0, #24]
 800eb78:	b90b      	cbnz	r3, 800eb7e <_fflush_r+0x1a>
 800eb7a:	f000 f887 	bl	800ec8c <__sinit>
 800eb7e:	4b14      	ldr	r3, [pc, #80]	; (800ebd0 <_fflush_r+0x6c>)
 800eb80:	429c      	cmp	r4, r3
 800eb82:	d11b      	bne.n	800ebbc <_fflush_r+0x58>
 800eb84:	686c      	ldr	r4, [r5, #4]
 800eb86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d0ef      	beq.n	800eb6e <_fflush_r+0xa>
 800eb8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eb90:	07d0      	lsls	r0, r2, #31
 800eb92:	d404      	bmi.n	800eb9e <_fflush_r+0x3a>
 800eb94:	0599      	lsls	r1, r3, #22
 800eb96:	d402      	bmi.n	800eb9e <_fflush_r+0x3a>
 800eb98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb9a:	f000 fc88 	bl	800f4ae <__retarget_lock_acquire_recursive>
 800eb9e:	4628      	mov	r0, r5
 800eba0:	4621      	mov	r1, r4
 800eba2:	f7ff ff59 	bl	800ea58 <__sflush_r>
 800eba6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eba8:	07da      	lsls	r2, r3, #31
 800ebaa:	4605      	mov	r5, r0
 800ebac:	d4e0      	bmi.n	800eb70 <_fflush_r+0xc>
 800ebae:	89a3      	ldrh	r3, [r4, #12]
 800ebb0:	059b      	lsls	r3, r3, #22
 800ebb2:	d4dd      	bmi.n	800eb70 <_fflush_r+0xc>
 800ebb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ebb6:	f000 fc7b 	bl	800f4b0 <__retarget_lock_release_recursive>
 800ebba:	e7d9      	b.n	800eb70 <_fflush_r+0xc>
 800ebbc:	4b05      	ldr	r3, [pc, #20]	; (800ebd4 <_fflush_r+0x70>)
 800ebbe:	429c      	cmp	r4, r3
 800ebc0:	d101      	bne.n	800ebc6 <_fflush_r+0x62>
 800ebc2:	68ac      	ldr	r4, [r5, #8]
 800ebc4:	e7df      	b.n	800eb86 <_fflush_r+0x22>
 800ebc6:	4b04      	ldr	r3, [pc, #16]	; (800ebd8 <_fflush_r+0x74>)
 800ebc8:	429c      	cmp	r4, r3
 800ebca:	bf08      	it	eq
 800ebcc:	68ec      	ldreq	r4, [r5, #12]
 800ebce:	e7da      	b.n	800eb86 <_fflush_r+0x22>
 800ebd0:	08011f38 	.word	0x08011f38
 800ebd4:	08011f58 	.word	0x08011f58
 800ebd8:	08011f18 	.word	0x08011f18

0800ebdc <std>:
 800ebdc:	2300      	movs	r3, #0
 800ebde:	b510      	push	{r4, lr}
 800ebe0:	4604      	mov	r4, r0
 800ebe2:	e9c0 3300 	strd	r3, r3, [r0]
 800ebe6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ebea:	6083      	str	r3, [r0, #8]
 800ebec:	8181      	strh	r1, [r0, #12]
 800ebee:	6643      	str	r3, [r0, #100]	; 0x64
 800ebf0:	81c2      	strh	r2, [r0, #14]
 800ebf2:	6183      	str	r3, [r0, #24]
 800ebf4:	4619      	mov	r1, r3
 800ebf6:	2208      	movs	r2, #8
 800ebf8:	305c      	adds	r0, #92	; 0x5c
 800ebfa:	f7fd fc13 	bl	800c424 <memset>
 800ebfe:	4b05      	ldr	r3, [pc, #20]	; (800ec14 <std+0x38>)
 800ec00:	6263      	str	r3, [r4, #36]	; 0x24
 800ec02:	4b05      	ldr	r3, [pc, #20]	; (800ec18 <std+0x3c>)
 800ec04:	62a3      	str	r3, [r4, #40]	; 0x28
 800ec06:	4b05      	ldr	r3, [pc, #20]	; (800ec1c <std+0x40>)
 800ec08:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ec0a:	4b05      	ldr	r3, [pc, #20]	; (800ec20 <std+0x44>)
 800ec0c:	6224      	str	r4, [r4, #32]
 800ec0e:	6323      	str	r3, [r4, #48]	; 0x30
 800ec10:	bd10      	pop	{r4, pc}
 800ec12:	bf00      	nop
 800ec14:	08010639 	.word	0x08010639
 800ec18:	0801065b 	.word	0x0801065b
 800ec1c:	08010693 	.word	0x08010693
 800ec20:	080106b7 	.word	0x080106b7

0800ec24 <_cleanup_r>:
 800ec24:	4901      	ldr	r1, [pc, #4]	; (800ec2c <_cleanup_r+0x8>)
 800ec26:	f000 b8af 	b.w	800ed88 <_fwalk_reent>
 800ec2a:	bf00      	nop
 800ec2c:	0800eb65 	.word	0x0800eb65

0800ec30 <__sfmoreglue>:
 800ec30:	b570      	push	{r4, r5, r6, lr}
 800ec32:	1e4a      	subs	r2, r1, #1
 800ec34:	2568      	movs	r5, #104	; 0x68
 800ec36:	4355      	muls	r5, r2
 800ec38:	460e      	mov	r6, r1
 800ec3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ec3e:	f001 f9d1 	bl	800ffe4 <_malloc_r>
 800ec42:	4604      	mov	r4, r0
 800ec44:	b140      	cbz	r0, 800ec58 <__sfmoreglue+0x28>
 800ec46:	2100      	movs	r1, #0
 800ec48:	e9c0 1600 	strd	r1, r6, [r0]
 800ec4c:	300c      	adds	r0, #12
 800ec4e:	60a0      	str	r0, [r4, #8]
 800ec50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ec54:	f7fd fbe6 	bl	800c424 <memset>
 800ec58:	4620      	mov	r0, r4
 800ec5a:	bd70      	pop	{r4, r5, r6, pc}

0800ec5c <__sfp_lock_acquire>:
 800ec5c:	4801      	ldr	r0, [pc, #4]	; (800ec64 <__sfp_lock_acquire+0x8>)
 800ec5e:	f000 bc26 	b.w	800f4ae <__retarget_lock_acquire_recursive>
 800ec62:	bf00      	nop
 800ec64:	2000aa68 	.word	0x2000aa68

0800ec68 <__sfp_lock_release>:
 800ec68:	4801      	ldr	r0, [pc, #4]	; (800ec70 <__sfp_lock_release+0x8>)
 800ec6a:	f000 bc21 	b.w	800f4b0 <__retarget_lock_release_recursive>
 800ec6e:	bf00      	nop
 800ec70:	2000aa68 	.word	0x2000aa68

0800ec74 <__sinit_lock_acquire>:
 800ec74:	4801      	ldr	r0, [pc, #4]	; (800ec7c <__sinit_lock_acquire+0x8>)
 800ec76:	f000 bc1a 	b.w	800f4ae <__retarget_lock_acquire_recursive>
 800ec7a:	bf00      	nop
 800ec7c:	2000aa63 	.word	0x2000aa63

0800ec80 <__sinit_lock_release>:
 800ec80:	4801      	ldr	r0, [pc, #4]	; (800ec88 <__sinit_lock_release+0x8>)
 800ec82:	f000 bc15 	b.w	800f4b0 <__retarget_lock_release_recursive>
 800ec86:	bf00      	nop
 800ec88:	2000aa63 	.word	0x2000aa63

0800ec8c <__sinit>:
 800ec8c:	b510      	push	{r4, lr}
 800ec8e:	4604      	mov	r4, r0
 800ec90:	f7ff fff0 	bl	800ec74 <__sinit_lock_acquire>
 800ec94:	69a3      	ldr	r3, [r4, #24]
 800ec96:	b11b      	cbz	r3, 800eca0 <__sinit+0x14>
 800ec98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec9c:	f7ff bff0 	b.w	800ec80 <__sinit_lock_release>
 800eca0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eca4:	6523      	str	r3, [r4, #80]	; 0x50
 800eca6:	4b13      	ldr	r3, [pc, #76]	; (800ecf4 <__sinit+0x68>)
 800eca8:	4a13      	ldr	r2, [pc, #76]	; (800ecf8 <__sinit+0x6c>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	62a2      	str	r2, [r4, #40]	; 0x28
 800ecae:	42a3      	cmp	r3, r4
 800ecb0:	bf04      	itt	eq
 800ecb2:	2301      	moveq	r3, #1
 800ecb4:	61a3      	streq	r3, [r4, #24]
 800ecb6:	4620      	mov	r0, r4
 800ecb8:	f000 f820 	bl	800ecfc <__sfp>
 800ecbc:	6060      	str	r0, [r4, #4]
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	f000 f81c 	bl	800ecfc <__sfp>
 800ecc4:	60a0      	str	r0, [r4, #8]
 800ecc6:	4620      	mov	r0, r4
 800ecc8:	f000 f818 	bl	800ecfc <__sfp>
 800eccc:	2200      	movs	r2, #0
 800ecce:	60e0      	str	r0, [r4, #12]
 800ecd0:	2104      	movs	r1, #4
 800ecd2:	6860      	ldr	r0, [r4, #4]
 800ecd4:	f7ff ff82 	bl	800ebdc <std>
 800ecd8:	68a0      	ldr	r0, [r4, #8]
 800ecda:	2201      	movs	r2, #1
 800ecdc:	2109      	movs	r1, #9
 800ecde:	f7ff ff7d 	bl	800ebdc <std>
 800ece2:	68e0      	ldr	r0, [r4, #12]
 800ece4:	2202      	movs	r2, #2
 800ece6:	2112      	movs	r1, #18
 800ece8:	f7ff ff78 	bl	800ebdc <std>
 800ecec:	2301      	movs	r3, #1
 800ecee:	61a3      	str	r3, [r4, #24]
 800ecf0:	e7d2      	b.n	800ec98 <__sinit+0xc>
 800ecf2:	bf00      	nop
 800ecf4:	08011cf8 	.word	0x08011cf8
 800ecf8:	0800ec25 	.word	0x0800ec25

0800ecfc <__sfp>:
 800ecfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecfe:	4607      	mov	r7, r0
 800ed00:	f7ff ffac 	bl	800ec5c <__sfp_lock_acquire>
 800ed04:	4b1e      	ldr	r3, [pc, #120]	; (800ed80 <__sfp+0x84>)
 800ed06:	681e      	ldr	r6, [r3, #0]
 800ed08:	69b3      	ldr	r3, [r6, #24]
 800ed0a:	b913      	cbnz	r3, 800ed12 <__sfp+0x16>
 800ed0c:	4630      	mov	r0, r6
 800ed0e:	f7ff ffbd 	bl	800ec8c <__sinit>
 800ed12:	3648      	adds	r6, #72	; 0x48
 800ed14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ed18:	3b01      	subs	r3, #1
 800ed1a:	d503      	bpl.n	800ed24 <__sfp+0x28>
 800ed1c:	6833      	ldr	r3, [r6, #0]
 800ed1e:	b30b      	cbz	r3, 800ed64 <__sfp+0x68>
 800ed20:	6836      	ldr	r6, [r6, #0]
 800ed22:	e7f7      	b.n	800ed14 <__sfp+0x18>
 800ed24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ed28:	b9d5      	cbnz	r5, 800ed60 <__sfp+0x64>
 800ed2a:	4b16      	ldr	r3, [pc, #88]	; (800ed84 <__sfp+0x88>)
 800ed2c:	60e3      	str	r3, [r4, #12]
 800ed2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ed32:	6665      	str	r5, [r4, #100]	; 0x64
 800ed34:	f000 fbba 	bl	800f4ac <__retarget_lock_init_recursive>
 800ed38:	f7ff ff96 	bl	800ec68 <__sfp_lock_release>
 800ed3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ed40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ed44:	6025      	str	r5, [r4, #0]
 800ed46:	61a5      	str	r5, [r4, #24]
 800ed48:	2208      	movs	r2, #8
 800ed4a:	4629      	mov	r1, r5
 800ed4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ed50:	f7fd fb68 	bl	800c424 <memset>
 800ed54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ed58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ed5c:	4620      	mov	r0, r4
 800ed5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed60:	3468      	adds	r4, #104	; 0x68
 800ed62:	e7d9      	b.n	800ed18 <__sfp+0x1c>
 800ed64:	2104      	movs	r1, #4
 800ed66:	4638      	mov	r0, r7
 800ed68:	f7ff ff62 	bl	800ec30 <__sfmoreglue>
 800ed6c:	4604      	mov	r4, r0
 800ed6e:	6030      	str	r0, [r6, #0]
 800ed70:	2800      	cmp	r0, #0
 800ed72:	d1d5      	bne.n	800ed20 <__sfp+0x24>
 800ed74:	f7ff ff78 	bl	800ec68 <__sfp_lock_release>
 800ed78:	230c      	movs	r3, #12
 800ed7a:	603b      	str	r3, [r7, #0]
 800ed7c:	e7ee      	b.n	800ed5c <__sfp+0x60>
 800ed7e:	bf00      	nop
 800ed80:	08011cf8 	.word	0x08011cf8
 800ed84:	ffff0001 	.word	0xffff0001

0800ed88 <_fwalk_reent>:
 800ed88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed8c:	4606      	mov	r6, r0
 800ed8e:	4688      	mov	r8, r1
 800ed90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ed94:	2700      	movs	r7, #0
 800ed96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed9a:	f1b9 0901 	subs.w	r9, r9, #1
 800ed9e:	d505      	bpl.n	800edac <_fwalk_reent+0x24>
 800eda0:	6824      	ldr	r4, [r4, #0]
 800eda2:	2c00      	cmp	r4, #0
 800eda4:	d1f7      	bne.n	800ed96 <_fwalk_reent+0xe>
 800eda6:	4638      	mov	r0, r7
 800eda8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edac:	89ab      	ldrh	r3, [r5, #12]
 800edae:	2b01      	cmp	r3, #1
 800edb0:	d907      	bls.n	800edc2 <_fwalk_reent+0x3a>
 800edb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800edb6:	3301      	adds	r3, #1
 800edb8:	d003      	beq.n	800edc2 <_fwalk_reent+0x3a>
 800edba:	4629      	mov	r1, r5
 800edbc:	4630      	mov	r0, r6
 800edbe:	47c0      	blx	r8
 800edc0:	4307      	orrs	r7, r0
 800edc2:	3568      	adds	r5, #104	; 0x68
 800edc4:	e7e9      	b.n	800ed9a <_fwalk_reent+0x12>

0800edc6 <rshift>:
 800edc6:	6903      	ldr	r3, [r0, #16]
 800edc8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800edcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800edd0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800edd4:	f100 0414 	add.w	r4, r0, #20
 800edd8:	dd45      	ble.n	800ee66 <rshift+0xa0>
 800edda:	f011 011f 	ands.w	r1, r1, #31
 800edde:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ede2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ede6:	d10c      	bne.n	800ee02 <rshift+0x3c>
 800ede8:	f100 0710 	add.w	r7, r0, #16
 800edec:	4629      	mov	r1, r5
 800edee:	42b1      	cmp	r1, r6
 800edf0:	d334      	bcc.n	800ee5c <rshift+0x96>
 800edf2:	1a9b      	subs	r3, r3, r2
 800edf4:	009b      	lsls	r3, r3, #2
 800edf6:	1eea      	subs	r2, r5, #3
 800edf8:	4296      	cmp	r6, r2
 800edfa:	bf38      	it	cc
 800edfc:	2300      	movcc	r3, #0
 800edfe:	4423      	add	r3, r4
 800ee00:	e015      	b.n	800ee2e <rshift+0x68>
 800ee02:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ee06:	f1c1 0820 	rsb	r8, r1, #32
 800ee0a:	40cf      	lsrs	r7, r1
 800ee0c:	f105 0e04 	add.w	lr, r5, #4
 800ee10:	46a1      	mov	r9, r4
 800ee12:	4576      	cmp	r6, lr
 800ee14:	46f4      	mov	ip, lr
 800ee16:	d815      	bhi.n	800ee44 <rshift+0x7e>
 800ee18:	1a9b      	subs	r3, r3, r2
 800ee1a:	009a      	lsls	r2, r3, #2
 800ee1c:	3a04      	subs	r2, #4
 800ee1e:	3501      	adds	r5, #1
 800ee20:	42ae      	cmp	r6, r5
 800ee22:	bf38      	it	cc
 800ee24:	2200      	movcc	r2, #0
 800ee26:	18a3      	adds	r3, r4, r2
 800ee28:	50a7      	str	r7, [r4, r2]
 800ee2a:	b107      	cbz	r7, 800ee2e <rshift+0x68>
 800ee2c:	3304      	adds	r3, #4
 800ee2e:	1b1a      	subs	r2, r3, r4
 800ee30:	42a3      	cmp	r3, r4
 800ee32:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ee36:	bf08      	it	eq
 800ee38:	2300      	moveq	r3, #0
 800ee3a:	6102      	str	r2, [r0, #16]
 800ee3c:	bf08      	it	eq
 800ee3e:	6143      	streq	r3, [r0, #20]
 800ee40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee44:	f8dc c000 	ldr.w	ip, [ip]
 800ee48:	fa0c fc08 	lsl.w	ip, ip, r8
 800ee4c:	ea4c 0707 	orr.w	r7, ip, r7
 800ee50:	f849 7b04 	str.w	r7, [r9], #4
 800ee54:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ee58:	40cf      	lsrs	r7, r1
 800ee5a:	e7da      	b.n	800ee12 <rshift+0x4c>
 800ee5c:	f851 cb04 	ldr.w	ip, [r1], #4
 800ee60:	f847 cf04 	str.w	ip, [r7, #4]!
 800ee64:	e7c3      	b.n	800edee <rshift+0x28>
 800ee66:	4623      	mov	r3, r4
 800ee68:	e7e1      	b.n	800ee2e <rshift+0x68>

0800ee6a <__hexdig_fun>:
 800ee6a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ee6e:	2b09      	cmp	r3, #9
 800ee70:	d802      	bhi.n	800ee78 <__hexdig_fun+0xe>
 800ee72:	3820      	subs	r0, #32
 800ee74:	b2c0      	uxtb	r0, r0
 800ee76:	4770      	bx	lr
 800ee78:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ee7c:	2b05      	cmp	r3, #5
 800ee7e:	d801      	bhi.n	800ee84 <__hexdig_fun+0x1a>
 800ee80:	3847      	subs	r0, #71	; 0x47
 800ee82:	e7f7      	b.n	800ee74 <__hexdig_fun+0xa>
 800ee84:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ee88:	2b05      	cmp	r3, #5
 800ee8a:	d801      	bhi.n	800ee90 <__hexdig_fun+0x26>
 800ee8c:	3827      	subs	r0, #39	; 0x27
 800ee8e:	e7f1      	b.n	800ee74 <__hexdig_fun+0xa>
 800ee90:	2000      	movs	r0, #0
 800ee92:	4770      	bx	lr

0800ee94 <__gethex>:
 800ee94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee98:	ed2d 8b02 	vpush	{d8}
 800ee9c:	b089      	sub	sp, #36	; 0x24
 800ee9e:	ee08 0a10 	vmov	s16, r0
 800eea2:	9304      	str	r3, [sp, #16]
 800eea4:	4bbc      	ldr	r3, [pc, #752]	; (800f198 <__gethex+0x304>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	9301      	str	r3, [sp, #4]
 800eeaa:	4618      	mov	r0, r3
 800eeac:	468b      	mov	fp, r1
 800eeae:	4690      	mov	r8, r2
 800eeb0:	f7f1 f9b8 	bl	8000224 <strlen>
 800eeb4:	9b01      	ldr	r3, [sp, #4]
 800eeb6:	f8db 2000 	ldr.w	r2, [fp]
 800eeba:	4403      	add	r3, r0
 800eebc:	4682      	mov	sl, r0
 800eebe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800eec2:	9305      	str	r3, [sp, #20]
 800eec4:	1c93      	adds	r3, r2, #2
 800eec6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800eeca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800eece:	32fe      	adds	r2, #254	; 0xfe
 800eed0:	18d1      	adds	r1, r2, r3
 800eed2:	461f      	mov	r7, r3
 800eed4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800eed8:	9100      	str	r1, [sp, #0]
 800eeda:	2830      	cmp	r0, #48	; 0x30
 800eedc:	d0f8      	beq.n	800eed0 <__gethex+0x3c>
 800eede:	f7ff ffc4 	bl	800ee6a <__hexdig_fun>
 800eee2:	4604      	mov	r4, r0
 800eee4:	2800      	cmp	r0, #0
 800eee6:	d13a      	bne.n	800ef5e <__gethex+0xca>
 800eee8:	9901      	ldr	r1, [sp, #4]
 800eeea:	4652      	mov	r2, sl
 800eeec:	4638      	mov	r0, r7
 800eeee:	f001 fbe6 	bl	80106be <strncmp>
 800eef2:	4605      	mov	r5, r0
 800eef4:	2800      	cmp	r0, #0
 800eef6:	d168      	bne.n	800efca <__gethex+0x136>
 800eef8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800eefc:	eb07 060a 	add.w	r6, r7, sl
 800ef00:	f7ff ffb3 	bl	800ee6a <__hexdig_fun>
 800ef04:	2800      	cmp	r0, #0
 800ef06:	d062      	beq.n	800efce <__gethex+0x13a>
 800ef08:	4633      	mov	r3, r6
 800ef0a:	7818      	ldrb	r0, [r3, #0]
 800ef0c:	2830      	cmp	r0, #48	; 0x30
 800ef0e:	461f      	mov	r7, r3
 800ef10:	f103 0301 	add.w	r3, r3, #1
 800ef14:	d0f9      	beq.n	800ef0a <__gethex+0x76>
 800ef16:	f7ff ffa8 	bl	800ee6a <__hexdig_fun>
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	fab0 f480 	clz	r4, r0
 800ef20:	0964      	lsrs	r4, r4, #5
 800ef22:	4635      	mov	r5, r6
 800ef24:	9300      	str	r3, [sp, #0]
 800ef26:	463a      	mov	r2, r7
 800ef28:	4616      	mov	r6, r2
 800ef2a:	3201      	adds	r2, #1
 800ef2c:	7830      	ldrb	r0, [r6, #0]
 800ef2e:	f7ff ff9c 	bl	800ee6a <__hexdig_fun>
 800ef32:	2800      	cmp	r0, #0
 800ef34:	d1f8      	bne.n	800ef28 <__gethex+0x94>
 800ef36:	9901      	ldr	r1, [sp, #4]
 800ef38:	4652      	mov	r2, sl
 800ef3a:	4630      	mov	r0, r6
 800ef3c:	f001 fbbf 	bl	80106be <strncmp>
 800ef40:	b980      	cbnz	r0, 800ef64 <__gethex+0xd0>
 800ef42:	b94d      	cbnz	r5, 800ef58 <__gethex+0xc4>
 800ef44:	eb06 050a 	add.w	r5, r6, sl
 800ef48:	462a      	mov	r2, r5
 800ef4a:	4616      	mov	r6, r2
 800ef4c:	3201      	adds	r2, #1
 800ef4e:	7830      	ldrb	r0, [r6, #0]
 800ef50:	f7ff ff8b 	bl	800ee6a <__hexdig_fun>
 800ef54:	2800      	cmp	r0, #0
 800ef56:	d1f8      	bne.n	800ef4a <__gethex+0xb6>
 800ef58:	1bad      	subs	r5, r5, r6
 800ef5a:	00ad      	lsls	r5, r5, #2
 800ef5c:	e004      	b.n	800ef68 <__gethex+0xd4>
 800ef5e:	2400      	movs	r4, #0
 800ef60:	4625      	mov	r5, r4
 800ef62:	e7e0      	b.n	800ef26 <__gethex+0x92>
 800ef64:	2d00      	cmp	r5, #0
 800ef66:	d1f7      	bne.n	800ef58 <__gethex+0xc4>
 800ef68:	7833      	ldrb	r3, [r6, #0]
 800ef6a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ef6e:	2b50      	cmp	r3, #80	; 0x50
 800ef70:	d13b      	bne.n	800efea <__gethex+0x156>
 800ef72:	7873      	ldrb	r3, [r6, #1]
 800ef74:	2b2b      	cmp	r3, #43	; 0x2b
 800ef76:	d02c      	beq.n	800efd2 <__gethex+0x13e>
 800ef78:	2b2d      	cmp	r3, #45	; 0x2d
 800ef7a:	d02e      	beq.n	800efda <__gethex+0x146>
 800ef7c:	1c71      	adds	r1, r6, #1
 800ef7e:	f04f 0900 	mov.w	r9, #0
 800ef82:	7808      	ldrb	r0, [r1, #0]
 800ef84:	f7ff ff71 	bl	800ee6a <__hexdig_fun>
 800ef88:	1e43      	subs	r3, r0, #1
 800ef8a:	b2db      	uxtb	r3, r3
 800ef8c:	2b18      	cmp	r3, #24
 800ef8e:	d82c      	bhi.n	800efea <__gethex+0x156>
 800ef90:	f1a0 0210 	sub.w	r2, r0, #16
 800ef94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ef98:	f7ff ff67 	bl	800ee6a <__hexdig_fun>
 800ef9c:	1e43      	subs	r3, r0, #1
 800ef9e:	b2db      	uxtb	r3, r3
 800efa0:	2b18      	cmp	r3, #24
 800efa2:	d91d      	bls.n	800efe0 <__gethex+0x14c>
 800efa4:	f1b9 0f00 	cmp.w	r9, #0
 800efa8:	d000      	beq.n	800efac <__gethex+0x118>
 800efaa:	4252      	negs	r2, r2
 800efac:	4415      	add	r5, r2
 800efae:	f8cb 1000 	str.w	r1, [fp]
 800efb2:	b1e4      	cbz	r4, 800efee <__gethex+0x15a>
 800efb4:	9b00      	ldr	r3, [sp, #0]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	bf14      	ite	ne
 800efba:	2700      	movne	r7, #0
 800efbc:	2706      	moveq	r7, #6
 800efbe:	4638      	mov	r0, r7
 800efc0:	b009      	add	sp, #36	; 0x24
 800efc2:	ecbd 8b02 	vpop	{d8}
 800efc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efca:	463e      	mov	r6, r7
 800efcc:	4625      	mov	r5, r4
 800efce:	2401      	movs	r4, #1
 800efd0:	e7ca      	b.n	800ef68 <__gethex+0xd4>
 800efd2:	f04f 0900 	mov.w	r9, #0
 800efd6:	1cb1      	adds	r1, r6, #2
 800efd8:	e7d3      	b.n	800ef82 <__gethex+0xee>
 800efda:	f04f 0901 	mov.w	r9, #1
 800efde:	e7fa      	b.n	800efd6 <__gethex+0x142>
 800efe0:	230a      	movs	r3, #10
 800efe2:	fb03 0202 	mla	r2, r3, r2, r0
 800efe6:	3a10      	subs	r2, #16
 800efe8:	e7d4      	b.n	800ef94 <__gethex+0x100>
 800efea:	4631      	mov	r1, r6
 800efec:	e7df      	b.n	800efae <__gethex+0x11a>
 800efee:	1bf3      	subs	r3, r6, r7
 800eff0:	3b01      	subs	r3, #1
 800eff2:	4621      	mov	r1, r4
 800eff4:	2b07      	cmp	r3, #7
 800eff6:	dc0b      	bgt.n	800f010 <__gethex+0x17c>
 800eff8:	ee18 0a10 	vmov	r0, s16
 800effc:	f000 fad8 	bl	800f5b0 <_Balloc>
 800f000:	4604      	mov	r4, r0
 800f002:	b940      	cbnz	r0, 800f016 <__gethex+0x182>
 800f004:	4b65      	ldr	r3, [pc, #404]	; (800f19c <__gethex+0x308>)
 800f006:	4602      	mov	r2, r0
 800f008:	21de      	movs	r1, #222	; 0xde
 800f00a:	4865      	ldr	r0, [pc, #404]	; (800f1a0 <__gethex+0x30c>)
 800f00c:	f001 fb88 	bl	8010720 <__assert_func>
 800f010:	3101      	adds	r1, #1
 800f012:	105b      	asrs	r3, r3, #1
 800f014:	e7ee      	b.n	800eff4 <__gethex+0x160>
 800f016:	f100 0914 	add.w	r9, r0, #20
 800f01a:	f04f 0b00 	mov.w	fp, #0
 800f01e:	f1ca 0301 	rsb	r3, sl, #1
 800f022:	f8cd 9008 	str.w	r9, [sp, #8]
 800f026:	f8cd b000 	str.w	fp, [sp]
 800f02a:	9306      	str	r3, [sp, #24]
 800f02c:	42b7      	cmp	r7, r6
 800f02e:	d340      	bcc.n	800f0b2 <__gethex+0x21e>
 800f030:	9802      	ldr	r0, [sp, #8]
 800f032:	9b00      	ldr	r3, [sp, #0]
 800f034:	f840 3b04 	str.w	r3, [r0], #4
 800f038:	eba0 0009 	sub.w	r0, r0, r9
 800f03c:	1080      	asrs	r0, r0, #2
 800f03e:	0146      	lsls	r6, r0, #5
 800f040:	6120      	str	r0, [r4, #16]
 800f042:	4618      	mov	r0, r3
 800f044:	f000 fbaa 	bl	800f79c <__hi0bits>
 800f048:	1a30      	subs	r0, r6, r0
 800f04a:	f8d8 6000 	ldr.w	r6, [r8]
 800f04e:	42b0      	cmp	r0, r6
 800f050:	dd63      	ble.n	800f11a <__gethex+0x286>
 800f052:	1b87      	subs	r7, r0, r6
 800f054:	4639      	mov	r1, r7
 800f056:	4620      	mov	r0, r4
 800f058:	f000 ff44 	bl	800fee4 <__any_on>
 800f05c:	4682      	mov	sl, r0
 800f05e:	b1a8      	cbz	r0, 800f08c <__gethex+0x1f8>
 800f060:	1e7b      	subs	r3, r7, #1
 800f062:	1159      	asrs	r1, r3, #5
 800f064:	f003 021f 	and.w	r2, r3, #31
 800f068:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f06c:	f04f 0a01 	mov.w	sl, #1
 800f070:	fa0a f202 	lsl.w	r2, sl, r2
 800f074:	420a      	tst	r2, r1
 800f076:	d009      	beq.n	800f08c <__gethex+0x1f8>
 800f078:	4553      	cmp	r3, sl
 800f07a:	dd05      	ble.n	800f088 <__gethex+0x1f4>
 800f07c:	1eb9      	subs	r1, r7, #2
 800f07e:	4620      	mov	r0, r4
 800f080:	f000 ff30 	bl	800fee4 <__any_on>
 800f084:	2800      	cmp	r0, #0
 800f086:	d145      	bne.n	800f114 <__gethex+0x280>
 800f088:	f04f 0a02 	mov.w	sl, #2
 800f08c:	4639      	mov	r1, r7
 800f08e:	4620      	mov	r0, r4
 800f090:	f7ff fe99 	bl	800edc6 <rshift>
 800f094:	443d      	add	r5, r7
 800f096:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f09a:	42ab      	cmp	r3, r5
 800f09c:	da4c      	bge.n	800f138 <__gethex+0x2a4>
 800f09e:	ee18 0a10 	vmov	r0, s16
 800f0a2:	4621      	mov	r1, r4
 800f0a4:	f000 fac4 	bl	800f630 <_Bfree>
 800f0a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	6013      	str	r3, [r2, #0]
 800f0ae:	27a3      	movs	r7, #163	; 0xa3
 800f0b0:	e785      	b.n	800efbe <__gethex+0x12a>
 800f0b2:	1e73      	subs	r3, r6, #1
 800f0b4:	9a05      	ldr	r2, [sp, #20]
 800f0b6:	9303      	str	r3, [sp, #12]
 800f0b8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f0bc:	4293      	cmp	r3, r2
 800f0be:	d019      	beq.n	800f0f4 <__gethex+0x260>
 800f0c0:	f1bb 0f20 	cmp.w	fp, #32
 800f0c4:	d107      	bne.n	800f0d6 <__gethex+0x242>
 800f0c6:	9b02      	ldr	r3, [sp, #8]
 800f0c8:	9a00      	ldr	r2, [sp, #0]
 800f0ca:	f843 2b04 	str.w	r2, [r3], #4
 800f0ce:	9302      	str	r3, [sp, #8]
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	9300      	str	r3, [sp, #0]
 800f0d4:	469b      	mov	fp, r3
 800f0d6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f0da:	f7ff fec6 	bl	800ee6a <__hexdig_fun>
 800f0de:	9b00      	ldr	r3, [sp, #0]
 800f0e0:	f000 000f 	and.w	r0, r0, #15
 800f0e4:	fa00 f00b 	lsl.w	r0, r0, fp
 800f0e8:	4303      	orrs	r3, r0
 800f0ea:	9300      	str	r3, [sp, #0]
 800f0ec:	f10b 0b04 	add.w	fp, fp, #4
 800f0f0:	9b03      	ldr	r3, [sp, #12]
 800f0f2:	e00d      	b.n	800f110 <__gethex+0x27c>
 800f0f4:	9b03      	ldr	r3, [sp, #12]
 800f0f6:	9a06      	ldr	r2, [sp, #24]
 800f0f8:	4413      	add	r3, r2
 800f0fa:	42bb      	cmp	r3, r7
 800f0fc:	d3e0      	bcc.n	800f0c0 <__gethex+0x22c>
 800f0fe:	4618      	mov	r0, r3
 800f100:	9901      	ldr	r1, [sp, #4]
 800f102:	9307      	str	r3, [sp, #28]
 800f104:	4652      	mov	r2, sl
 800f106:	f001 fada 	bl	80106be <strncmp>
 800f10a:	9b07      	ldr	r3, [sp, #28]
 800f10c:	2800      	cmp	r0, #0
 800f10e:	d1d7      	bne.n	800f0c0 <__gethex+0x22c>
 800f110:	461e      	mov	r6, r3
 800f112:	e78b      	b.n	800f02c <__gethex+0x198>
 800f114:	f04f 0a03 	mov.w	sl, #3
 800f118:	e7b8      	b.n	800f08c <__gethex+0x1f8>
 800f11a:	da0a      	bge.n	800f132 <__gethex+0x29e>
 800f11c:	1a37      	subs	r7, r6, r0
 800f11e:	4621      	mov	r1, r4
 800f120:	ee18 0a10 	vmov	r0, s16
 800f124:	463a      	mov	r2, r7
 800f126:	f000 fc9f 	bl	800fa68 <__lshift>
 800f12a:	1bed      	subs	r5, r5, r7
 800f12c:	4604      	mov	r4, r0
 800f12e:	f100 0914 	add.w	r9, r0, #20
 800f132:	f04f 0a00 	mov.w	sl, #0
 800f136:	e7ae      	b.n	800f096 <__gethex+0x202>
 800f138:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f13c:	42a8      	cmp	r0, r5
 800f13e:	dd72      	ble.n	800f226 <__gethex+0x392>
 800f140:	1b45      	subs	r5, r0, r5
 800f142:	42ae      	cmp	r6, r5
 800f144:	dc36      	bgt.n	800f1b4 <__gethex+0x320>
 800f146:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f14a:	2b02      	cmp	r3, #2
 800f14c:	d02a      	beq.n	800f1a4 <__gethex+0x310>
 800f14e:	2b03      	cmp	r3, #3
 800f150:	d02c      	beq.n	800f1ac <__gethex+0x318>
 800f152:	2b01      	cmp	r3, #1
 800f154:	d115      	bne.n	800f182 <__gethex+0x2ee>
 800f156:	42ae      	cmp	r6, r5
 800f158:	d113      	bne.n	800f182 <__gethex+0x2ee>
 800f15a:	2e01      	cmp	r6, #1
 800f15c:	d10b      	bne.n	800f176 <__gethex+0x2e2>
 800f15e:	9a04      	ldr	r2, [sp, #16]
 800f160:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f164:	6013      	str	r3, [r2, #0]
 800f166:	2301      	movs	r3, #1
 800f168:	6123      	str	r3, [r4, #16]
 800f16a:	f8c9 3000 	str.w	r3, [r9]
 800f16e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f170:	2762      	movs	r7, #98	; 0x62
 800f172:	601c      	str	r4, [r3, #0]
 800f174:	e723      	b.n	800efbe <__gethex+0x12a>
 800f176:	1e71      	subs	r1, r6, #1
 800f178:	4620      	mov	r0, r4
 800f17a:	f000 feb3 	bl	800fee4 <__any_on>
 800f17e:	2800      	cmp	r0, #0
 800f180:	d1ed      	bne.n	800f15e <__gethex+0x2ca>
 800f182:	ee18 0a10 	vmov	r0, s16
 800f186:	4621      	mov	r1, r4
 800f188:	f000 fa52 	bl	800f630 <_Bfree>
 800f18c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f18e:	2300      	movs	r3, #0
 800f190:	6013      	str	r3, [r2, #0]
 800f192:	2750      	movs	r7, #80	; 0x50
 800f194:	e713      	b.n	800efbe <__gethex+0x12a>
 800f196:	bf00      	nop
 800f198:	08011fe4 	.word	0x08011fe4
 800f19c:	08011f04 	.word	0x08011f04
 800f1a0:	08011f78 	.word	0x08011f78
 800f1a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d1eb      	bne.n	800f182 <__gethex+0x2ee>
 800f1aa:	e7d8      	b.n	800f15e <__gethex+0x2ca>
 800f1ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d1d5      	bne.n	800f15e <__gethex+0x2ca>
 800f1b2:	e7e6      	b.n	800f182 <__gethex+0x2ee>
 800f1b4:	1e6f      	subs	r7, r5, #1
 800f1b6:	f1ba 0f00 	cmp.w	sl, #0
 800f1ba:	d131      	bne.n	800f220 <__gethex+0x38c>
 800f1bc:	b127      	cbz	r7, 800f1c8 <__gethex+0x334>
 800f1be:	4639      	mov	r1, r7
 800f1c0:	4620      	mov	r0, r4
 800f1c2:	f000 fe8f 	bl	800fee4 <__any_on>
 800f1c6:	4682      	mov	sl, r0
 800f1c8:	117b      	asrs	r3, r7, #5
 800f1ca:	2101      	movs	r1, #1
 800f1cc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f1d0:	f007 071f 	and.w	r7, r7, #31
 800f1d4:	fa01 f707 	lsl.w	r7, r1, r7
 800f1d8:	421f      	tst	r7, r3
 800f1da:	4629      	mov	r1, r5
 800f1dc:	4620      	mov	r0, r4
 800f1de:	bf18      	it	ne
 800f1e0:	f04a 0a02 	orrne.w	sl, sl, #2
 800f1e4:	1b76      	subs	r6, r6, r5
 800f1e6:	f7ff fdee 	bl	800edc6 <rshift>
 800f1ea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f1ee:	2702      	movs	r7, #2
 800f1f0:	f1ba 0f00 	cmp.w	sl, #0
 800f1f4:	d048      	beq.n	800f288 <__gethex+0x3f4>
 800f1f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f1fa:	2b02      	cmp	r3, #2
 800f1fc:	d015      	beq.n	800f22a <__gethex+0x396>
 800f1fe:	2b03      	cmp	r3, #3
 800f200:	d017      	beq.n	800f232 <__gethex+0x39e>
 800f202:	2b01      	cmp	r3, #1
 800f204:	d109      	bne.n	800f21a <__gethex+0x386>
 800f206:	f01a 0f02 	tst.w	sl, #2
 800f20a:	d006      	beq.n	800f21a <__gethex+0x386>
 800f20c:	f8d9 0000 	ldr.w	r0, [r9]
 800f210:	ea4a 0a00 	orr.w	sl, sl, r0
 800f214:	f01a 0f01 	tst.w	sl, #1
 800f218:	d10e      	bne.n	800f238 <__gethex+0x3a4>
 800f21a:	f047 0710 	orr.w	r7, r7, #16
 800f21e:	e033      	b.n	800f288 <__gethex+0x3f4>
 800f220:	f04f 0a01 	mov.w	sl, #1
 800f224:	e7d0      	b.n	800f1c8 <__gethex+0x334>
 800f226:	2701      	movs	r7, #1
 800f228:	e7e2      	b.n	800f1f0 <__gethex+0x35c>
 800f22a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f22c:	f1c3 0301 	rsb	r3, r3, #1
 800f230:	9315      	str	r3, [sp, #84]	; 0x54
 800f232:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f234:	2b00      	cmp	r3, #0
 800f236:	d0f0      	beq.n	800f21a <__gethex+0x386>
 800f238:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f23c:	f104 0314 	add.w	r3, r4, #20
 800f240:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f244:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f248:	f04f 0c00 	mov.w	ip, #0
 800f24c:	4618      	mov	r0, r3
 800f24e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f252:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f256:	d01c      	beq.n	800f292 <__gethex+0x3fe>
 800f258:	3201      	adds	r2, #1
 800f25a:	6002      	str	r2, [r0, #0]
 800f25c:	2f02      	cmp	r7, #2
 800f25e:	f104 0314 	add.w	r3, r4, #20
 800f262:	d13f      	bne.n	800f2e4 <__gethex+0x450>
 800f264:	f8d8 2000 	ldr.w	r2, [r8]
 800f268:	3a01      	subs	r2, #1
 800f26a:	42b2      	cmp	r2, r6
 800f26c:	d10a      	bne.n	800f284 <__gethex+0x3f0>
 800f26e:	1171      	asrs	r1, r6, #5
 800f270:	2201      	movs	r2, #1
 800f272:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f276:	f006 061f 	and.w	r6, r6, #31
 800f27a:	fa02 f606 	lsl.w	r6, r2, r6
 800f27e:	421e      	tst	r6, r3
 800f280:	bf18      	it	ne
 800f282:	4617      	movne	r7, r2
 800f284:	f047 0720 	orr.w	r7, r7, #32
 800f288:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f28a:	601c      	str	r4, [r3, #0]
 800f28c:	9b04      	ldr	r3, [sp, #16]
 800f28e:	601d      	str	r5, [r3, #0]
 800f290:	e695      	b.n	800efbe <__gethex+0x12a>
 800f292:	4299      	cmp	r1, r3
 800f294:	f843 cc04 	str.w	ip, [r3, #-4]
 800f298:	d8d8      	bhi.n	800f24c <__gethex+0x3b8>
 800f29a:	68a3      	ldr	r3, [r4, #8]
 800f29c:	459b      	cmp	fp, r3
 800f29e:	db19      	blt.n	800f2d4 <__gethex+0x440>
 800f2a0:	6861      	ldr	r1, [r4, #4]
 800f2a2:	ee18 0a10 	vmov	r0, s16
 800f2a6:	3101      	adds	r1, #1
 800f2a8:	f000 f982 	bl	800f5b0 <_Balloc>
 800f2ac:	4681      	mov	r9, r0
 800f2ae:	b918      	cbnz	r0, 800f2b8 <__gethex+0x424>
 800f2b0:	4b1a      	ldr	r3, [pc, #104]	; (800f31c <__gethex+0x488>)
 800f2b2:	4602      	mov	r2, r0
 800f2b4:	2184      	movs	r1, #132	; 0x84
 800f2b6:	e6a8      	b.n	800f00a <__gethex+0x176>
 800f2b8:	6922      	ldr	r2, [r4, #16]
 800f2ba:	3202      	adds	r2, #2
 800f2bc:	f104 010c 	add.w	r1, r4, #12
 800f2c0:	0092      	lsls	r2, r2, #2
 800f2c2:	300c      	adds	r0, #12
 800f2c4:	f7fd f8a0 	bl	800c408 <memcpy>
 800f2c8:	4621      	mov	r1, r4
 800f2ca:	ee18 0a10 	vmov	r0, s16
 800f2ce:	f000 f9af 	bl	800f630 <_Bfree>
 800f2d2:	464c      	mov	r4, r9
 800f2d4:	6923      	ldr	r3, [r4, #16]
 800f2d6:	1c5a      	adds	r2, r3, #1
 800f2d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f2dc:	6122      	str	r2, [r4, #16]
 800f2de:	2201      	movs	r2, #1
 800f2e0:	615a      	str	r2, [r3, #20]
 800f2e2:	e7bb      	b.n	800f25c <__gethex+0x3c8>
 800f2e4:	6922      	ldr	r2, [r4, #16]
 800f2e6:	455a      	cmp	r2, fp
 800f2e8:	dd0b      	ble.n	800f302 <__gethex+0x46e>
 800f2ea:	2101      	movs	r1, #1
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	f7ff fd6a 	bl	800edc6 <rshift>
 800f2f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f2f6:	3501      	adds	r5, #1
 800f2f8:	42ab      	cmp	r3, r5
 800f2fa:	f6ff aed0 	blt.w	800f09e <__gethex+0x20a>
 800f2fe:	2701      	movs	r7, #1
 800f300:	e7c0      	b.n	800f284 <__gethex+0x3f0>
 800f302:	f016 061f 	ands.w	r6, r6, #31
 800f306:	d0fa      	beq.n	800f2fe <__gethex+0x46a>
 800f308:	449a      	add	sl, r3
 800f30a:	f1c6 0620 	rsb	r6, r6, #32
 800f30e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f312:	f000 fa43 	bl	800f79c <__hi0bits>
 800f316:	42b0      	cmp	r0, r6
 800f318:	dbe7      	blt.n	800f2ea <__gethex+0x456>
 800f31a:	e7f0      	b.n	800f2fe <__gethex+0x46a>
 800f31c:	08011f04 	.word	0x08011f04

0800f320 <L_shift>:
 800f320:	f1c2 0208 	rsb	r2, r2, #8
 800f324:	0092      	lsls	r2, r2, #2
 800f326:	b570      	push	{r4, r5, r6, lr}
 800f328:	f1c2 0620 	rsb	r6, r2, #32
 800f32c:	6843      	ldr	r3, [r0, #4]
 800f32e:	6804      	ldr	r4, [r0, #0]
 800f330:	fa03 f506 	lsl.w	r5, r3, r6
 800f334:	432c      	orrs	r4, r5
 800f336:	40d3      	lsrs	r3, r2
 800f338:	6004      	str	r4, [r0, #0]
 800f33a:	f840 3f04 	str.w	r3, [r0, #4]!
 800f33e:	4288      	cmp	r0, r1
 800f340:	d3f4      	bcc.n	800f32c <L_shift+0xc>
 800f342:	bd70      	pop	{r4, r5, r6, pc}

0800f344 <__match>:
 800f344:	b530      	push	{r4, r5, lr}
 800f346:	6803      	ldr	r3, [r0, #0]
 800f348:	3301      	adds	r3, #1
 800f34a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f34e:	b914      	cbnz	r4, 800f356 <__match+0x12>
 800f350:	6003      	str	r3, [r0, #0]
 800f352:	2001      	movs	r0, #1
 800f354:	bd30      	pop	{r4, r5, pc}
 800f356:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f35a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f35e:	2d19      	cmp	r5, #25
 800f360:	bf98      	it	ls
 800f362:	3220      	addls	r2, #32
 800f364:	42a2      	cmp	r2, r4
 800f366:	d0f0      	beq.n	800f34a <__match+0x6>
 800f368:	2000      	movs	r0, #0
 800f36a:	e7f3      	b.n	800f354 <__match+0x10>

0800f36c <__hexnan>:
 800f36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f370:	680b      	ldr	r3, [r1, #0]
 800f372:	6801      	ldr	r1, [r0, #0]
 800f374:	115e      	asrs	r6, r3, #5
 800f376:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f37a:	f013 031f 	ands.w	r3, r3, #31
 800f37e:	b087      	sub	sp, #28
 800f380:	bf18      	it	ne
 800f382:	3604      	addne	r6, #4
 800f384:	2500      	movs	r5, #0
 800f386:	1f37      	subs	r7, r6, #4
 800f388:	4682      	mov	sl, r0
 800f38a:	4690      	mov	r8, r2
 800f38c:	9301      	str	r3, [sp, #4]
 800f38e:	f846 5c04 	str.w	r5, [r6, #-4]
 800f392:	46b9      	mov	r9, r7
 800f394:	463c      	mov	r4, r7
 800f396:	9502      	str	r5, [sp, #8]
 800f398:	46ab      	mov	fp, r5
 800f39a:	784a      	ldrb	r2, [r1, #1]
 800f39c:	1c4b      	adds	r3, r1, #1
 800f39e:	9303      	str	r3, [sp, #12]
 800f3a0:	b342      	cbz	r2, 800f3f4 <__hexnan+0x88>
 800f3a2:	4610      	mov	r0, r2
 800f3a4:	9105      	str	r1, [sp, #20]
 800f3a6:	9204      	str	r2, [sp, #16]
 800f3a8:	f7ff fd5f 	bl	800ee6a <__hexdig_fun>
 800f3ac:	2800      	cmp	r0, #0
 800f3ae:	d14f      	bne.n	800f450 <__hexnan+0xe4>
 800f3b0:	9a04      	ldr	r2, [sp, #16]
 800f3b2:	9905      	ldr	r1, [sp, #20]
 800f3b4:	2a20      	cmp	r2, #32
 800f3b6:	d818      	bhi.n	800f3ea <__hexnan+0x7e>
 800f3b8:	9b02      	ldr	r3, [sp, #8]
 800f3ba:	459b      	cmp	fp, r3
 800f3bc:	dd13      	ble.n	800f3e6 <__hexnan+0x7a>
 800f3be:	454c      	cmp	r4, r9
 800f3c0:	d206      	bcs.n	800f3d0 <__hexnan+0x64>
 800f3c2:	2d07      	cmp	r5, #7
 800f3c4:	dc04      	bgt.n	800f3d0 <__hexnan+0x64>
 800f3c6:	462a      	mov	r2, r5
 800f3c8:	4649      	mov	r1, r9
 800f3ca:	4620      	mov	r0, r4
 800f3cc:	f7ff ffa8 	bl	800f320 <L_shift>
 800f3d0:	4544      	cmp	r4, r8
 800f3d2:	d950      	bls.n	800f476 <__hexnan+0x10a>
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	f1a4 0904 	sub.w	r9, r4, #4
 800f3da:	f844 3c04 	str.w	r3, [r4, #-4]
 800f3de:	f8cd b008 	str.w	fp, [sp, #8]
 800f3e2:	464c      	mov	r4, r9
 800f3e4:	461d      	mov	r5, r3
 800f3e6:	9903      	ldr	r1, [sp, #12]
 800f3e8:	e7d7      	b.n	800f39a <__hexnan+0x2e>
 800f3ea:	2a29      	cmp	r2, #41	; 0x29
 800f3ec:	d156      	bne.n	800f49c <__hexnan+0x130>
 800f3ee:	3102      	adds	r1, #2
 800f3f0:	f8ca 1000 	str.w	r1, [sl]
 800f3f4:	f1bb 0f00 	cmp.w	fp, #0
 800f3f8:	d050      	beq.n	800f49c <__hexnan+0x130>
 800f3fa:	454c      	cmp	r4, r9
 800f3fc:	d206      	bcs.n	800f40c <__hexnan+0xa0>
 800f3fe:	2d07      	cmp	r5, #7
 800f400:	dc04      	bgt.n	800f40c <__hexnan+0xa0>
 800f402:	462a      	mov	r2, r5
 800f404:	4649      	mov	r1, r9
 800f406:	4620      	mov	r0, r4
 800f408:	f7ff ff8a 	bl	800f320 <L_shift>
 800f40c:	4544      	cmp	r4, r8
 800f40e:	d934      	bls.n	800f47a <__hexnan+0x10e>
 800f410:	f1a8 0204 	sub.w	r2, r8, #4
 800f414:	4623      	mov	r3, r4
 800f416:	f853 1b04 	ldr.w	r1, [r3], #4
 800f41a:	f842 1f04 	str.w	r1, [r2, #4]!
 800f41e:	429f      	cmp	r7, r3
 800f420:	d2f9      	bcs.n	800f416 <__hexnan+0xaa>
 800f422:	1b3b      	subs	r3, r7, r4
 800f424:	f023 0303 	bic.w	r3, r3, #3
 800f428:	3304      	adds	r3, #4
 800f42a:	3401      	adds	r4, #1
 800f42c:	3e03      	subs	r6, #3
 800f42e:	42b4      	cmp	r4, r6
 800f430:	bf88      	it	hi
 800f432:	2304      	movhi	r3, #4
 800f434:	4443      	add	r3, r8
 800f436:	2200      	movs	r2, #0
 800f438:	f843 2b04 	str.w	r2, [r3], #4
 800f43c:	429f      	cmp	r7, r3
 800f43e:	d2fb      	bcs.n	800f438 <__hexnan+0xcc>
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	b91b      	cbnz	r3, 800f44c <__hexnan+0xe0>
 800f444:	4547      	cmp	r7, r8
 800f446:	d127      	bne.n	800f498 <__hexnan+0x12c>
 800f448:	2301      	movs	r3, #1
 800f44a:	603b      	str	r3, [r7, #0]
 800f44c:	2005      	movs	r0, #5
 800f44e:	e026      	b.n	800f49e <__hexnan+0x132>
 800f450:	3501      	adds	r5, #1
 800f452:	2d08      	cmp	r5, #8
 800f454:	f10b 0b01 	add.w	fp, fp, #1
 800f458:	dd06      	ble.n	800f468 <__hexnan+0xfc>
 800f45a:	4544      	cmp	r4, r8
 800f45c:	d9c3      	bls.n	800f3e6 <__hexnan+0x7a>
 800f45e:	2300      	movs	r3, #0
 800f460:	f844 3c04 	str.w	r3, [r4, #-4]
 800f464:	2501      	movs	r5, #1
 800f466:	3c04      	subs	r4, #4
 800f468:	6822      	ldr	r2, [r4, #0]
 800f46a:	f000 000f 	and.w	r0, r0, #15
 800f46e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f472:	6022      	str	r2, [r4, #0]
 800f474:	e7b7      	b.n	800f3e6 <__hexnan+0x7a>
 800f476:	2508      	movs	r5, #8
 800f478:	e7b5      	b.n	800f3e6 <__hexnan+0x7a>
 800f47a:	9b01      	ldr	r3, [sp, #4]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d0df      	beq.n	800f440 <__hexnan+0xd4>
 800f480:	f04f 32ff 	mov.w	r2, #4294967295
 800f484:	f1c3 0320 	rsb	r3, r3, #32
 800f488:	fa22 f303 	lsr.w	r3, r2, r3
 800f48c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f490:	401a      	ands	r2, r3
 800f492:	f846 2c04 	str.w	r2, [r6, #-4]
 800f496:	e7d3      	b.n	800f440 <__hexnan+0xd4>
 800f498:	3f04      	subs	r7, #4
 800f49a:	e7d1      	b.n	800f440 <__hexnan+0xd4>
 800f49c:	2004      	movs	r0, #4
 800f49e:	b007      	add	sp, #28
 800f4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f4a4 <_localeconv_r>:
 800f4a4:	4800      	ldr	r0, [pc, #0]	; (800f4a8 <_localeconv_r+0x4>)
 800f4a6:	4770      	bx	lr
 800f4a8:	200001a4 	.word	0x200001a4

0800f4ac <__retarget_lock_init_recursive>:
 800f4ac:	4770      	bx	lr

0800f4ae <__retarget_lock_acquire_recursive>:
 800f4ae:	4770      	bx	lr

0800f4b0 <__retarget_lock_release_recursive>:
 800f4b0:	4770      	bx	lr

0800f4b2 <__swhatbuf_r>:
 800f4b2:	b570      	push	{r4, r5, r6, lr}
 800f4b4:	460e      	mov	r6, r1
 800f4b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4ba:	2900      	cmp	r1, #0
 800f4bc:	b096      	sub	sp, #88	; 0x58
 800f4be:	4614      	mov	r4, r2
 800f4c0:	461d      	mov	r5, r3
 800f4c2:	da07      	bge.n	800f4d4 <__swhatbuf_r+0x22>
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	602b      	str	r3, [r5, #0]
 800f4c8:	89b3      	ldrh	r3, [r6, #12]
 800f4ca:	061a      	lsls	r2, r3, #24
 800f4cc:	d410      	bmi.n	800f4f0 <__swhatbuf_r+0x3e>
 800f4ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4d2:	e00e      	b.n	800f4f2 <__swhatbuf_r+0x40>
 800f4d4:	466a      	mov	r2, sp
 800f4d6:	f001 f963 	bl	80107a0 <_fstat_r>
 800f4da:	2800      	cmp	r0, #0
 800f4dc:	dbf2      	blt.n	800f4c4 <__swhatbuf_r+0x12>
 800f4de:	9a01      	ldr	r2, [sp, #4]
 800f4e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f4e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f4e8:	425a      	negs	r2, r3
 800f4ea:	415a      	adcs	r2, r3
 800f4ec:	602a      	str	r2, [r5, #0]
 800f4ee:	e7ee      	b.n	800f4ce <__swhatbuf_r+0x1c>
 800f4f0:	2340      	movs	r3, #64	; 0x40
 800f4f2:	2000      	movs	r0, #0
 800f4f4:	6023      	str	r3, [r4, #0]
 800f4f6:	b016      	add	sp, #88	; 0x58
 800f4f8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f4fc <__smakebuf_r>:
 800f4fc:	898b      	ldrh	r3, [r1, #12]
 800f4fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f500:	079d      	lsls	r5, r3, #30
 800f502:	4606      	mov	r6, r0
 800f504:	460c      	mov	r4, r1
 800f506:	d507      	bpl.n	800f518 <__smakebuf_r+0x1c>
 800f508:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f50c:	6023      	str	r3, [r4, #0]
 800f50e:	6123      	str	r3, [r4, #16]
 800f510:	2301      	movs	r3, #1
 800f512:	6163      	str	r3, [r4, #20]
 800f514:	b002      	add	sp, #8
 800f516:	bd70      	pop	{r4, r5, r6, pc}
 800f518:	ab01      	add	r3, sp, #4
 800f51a:	466a      	mov	r2, sp
 800f51c:	f7ff ffc9 	bl	800f4b2 <__swhatbuf_r>
 800f520:	9900      	ldr	r1, [sp, #0]
 800f522:	4605      	mov	r5, r0
 800f524:	4630      	mov	r0, r6
 800f526:	f000 fd5d 	bl	800ffe4 <_malloc_r>
 800f52a:	b948      	cbnz	r0, 800f540 <__smakebuf_r+0x44>
 800f52c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f530:	059a      	lsls	r2, r3, #22
 800f532:	d4ef      	bmi.n	800f514 <__smakebuf_r+0x18>
 800f534:	f023 0303 	bic.w	r3, r3, #3
 800f538:	f043 0302 	orr.w	r3, r3, #2
 800f53c:	81a3      	strh	r3, [r4, #12]
 800f53e:	e7e3      	b.n	800f508 <__smakebuf_r+0xc>
 800f540:	4b0d      	ldr	r3, [pc, #52]	; (800f578 <__smakebuf_r+0x7c>)
 800f542:	62b3      	str	r3, [r6, #40]	; 0x28
 800f544:	89a3      	ldrh	r3, [r4, #12]
 800f546:	6020      	str	r0, [r4, #0]
 800f548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f54c:	81a3      	strh	r3, [r4, #12]
 800f54e:	9b00      	ldr	r3, [sp, #0]
 800f550:	6163      	str	r3, [r4, #20]
 800f552:	9b01      	ldr	r3, [sp, #4]
 800f554:	6120      	str	r0, [r4, #16]
 800f556:	b15b      	cbz	r3, 800f570 <__smakebuf_r+0x74>
 800f558:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f55c:	4630      	mov	r0, r6
 800f55e:	f001 f931 	bl	80107c4 <_isatty_r>
 800f562:	b128      	cbz	r0, 800f570 <__smakebuf_r+0x74>
 800f564:	89a3      	ldrh	r3, [r4, #12]
 800f566:	f023 0303 	bic.w	r3, r3, #3
 800f56a:	f043 0301 	orr.w	r3, r3, #1
 800f56e:	81a3      	strh	r3, [r4, #12]
 800f570:	89a0      	ldrh	r0, [r4, #12]
 800f572:	4305      	orrs	r5, r0
 800f574:	81a5      	strh	r5, [r4, #12]
 800f576:	e7cd      	b.n	800f514 <__smakebuf_r+0x18>
 800f578:	0800ec25 	.word	0x0800ec25

0800f57c <malloc>:
 800f57c:	4b02      	ldr	r3, [pc, #8]	; (800f588 <malloc+0xc>)
 800f57e:	4601      	mov	r1, r0
 800f580:	6818      	ldr	r0, [r3, #0]
 800f582:	f000 bd2f 	b.w	800ffe4 <_malloc_r>
 800f586:	bf00      	nop
 800f588:	2000004c 	.word	0x2000004c

0800f58c <__ascii_mbtowc>:
 800f58c:	b082      	sub	sp, #8
 800f58e:	b901      	cbnz	r1, 800f592 <__ascii_mbtowc+0x6>
 800f590:	a901      	add	r1, sp, #4
 800f592:	b142      	cbz	r2, 800f5a6 <__ascii_mbtowc+0x1a>
 800f594:	b14b      	cbz	r3, 800f5aa <__ascii_mbtowc+0x1e>
 800f596:	7813      	ldrb	r3, [r2, #0]
 800f598:	600b      	str	r3, [r1, #0]
 800f59a:	7812      	ldrb	r2, [r2, #0]
 800f59c:	1e10      	subs	r0, r2, #0
 800f59e:	bf18      	it	ne
 800f5a0:	2001      	movne	r0, #1
 800f5a2:	b002      	add	sp, #8
 800f5a4:	4770      	bx	lr
 800f5a6:	4610      	mov	r0, r2
 800f5a8:	e7fb      	b.n	800f5a2 <__ascii_mbtowc+0x16>
 800f5aa:	f06f 0001 	mvn.w	r0, #1
 800f5ae:	e7f8      	b.n	800f5a2 <__ascii_mbtowc+0x16>

0800f5b0 <_Balloc>:
 800f5b0:	b570      	push	{r4, r5, r6, lr}
 800f5b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f5b4:	4604      	mov	r4, r0
 800f5b6:	460d      	mov	r5, r1
 800f5b8:	b976      	cbnz	r6, 800f5d8 <_Balloc+0x28>
 800f5ba:	2010      	movs	r0, #16
 800f5bc:	f7ff ffde 	bl	800f57c <malloc>
 800f5c0:	4602      	mov	r2, r0
 800f5c2:	6260      	str	r0, [r4, #36]	; 0x24
 800f5c4:	b920      	cbnz	r0, 800f5d0 <_Balloc+0x20>
 800f5c6:	4b18      	ldr	r3, [pc, #96]	; (800f628 <_Balloc+0x78>)
 800f5c8:	4818      	ldr	r0, [pc, #96]	; (800f62c <_Balloc+0x7c>)
 800f5ca:	2166      	movs	r1, #102	; 0x66
 800f5cc:	f001 f8a8 	bl	8010720 <__assert_func>
 800f5d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f5d4:	6006      	str	r6, [r0, #0]
 800f5d6:	60c6      	str	r6, [r0, #12]
 800f5d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f5da:	68f3      	ldr	r3, [r6, #12]
 800f5dc:	b183      	cbz	r3, 800f600 <_Balloc+0x50>
 800f5de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5e0:	68db      	ldr	r3, [r3, #12]
 800f5e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f5e6:	b9b8      	cbnz	r0, 800f618 <_Balloc+0x68>
 800f5e8:	2101      	movs	r1, #1
 800f5ea:	fa01 f605 	lsl.w	r6, r1, r5
 800f5ee:	1d72      	adds	r2, r6, #5
 800f5f0:	0092      	lsls	r2, r2, #2
 800f5f2:	4620      	mov	r0, r4
 800f5f4:	f000 fc97 	bl	800ff26 <_calloc_r>
 800f5f8:	b160      	cbz	r0, 800f614 <_Balloc+0x64>
 800f5fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f5fe:	e00e      	b.n	800f61e <_Balloc+0x6e>
 800f600:	2221      	movs	r2, #33	; 0x21
 800f602:	2104      	movs	r1, #4
 800f604:	4620      	mov	r0, r4
 800f606:	f000 fc8e 	bl	800ff26 <_calloc_r>
 800f60a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f60c:	60f0      	str	r0, [r6, #12]
 800f60e:	68db      	ldr	r3, [r3, #12]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d1e4      	bne.n	800f5de <_Balloc+0x2e>
 800f614:	2000      	movs	r0, #0
 800f616:	bd70      	pop	{r4, r5, r6, pc}
 800f618:	6802      	ldr	r2, [r0, #0]
 800f61a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f61e:	2300      	movs	r3, #0
 800f620:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f624:	e7f7      	b.n	800f616 <_Balloc+0x66>
 800f626:	bf00      	nop
 800f628:	08011e8e 	.word	0x08011e8e
 800f62c:	08011ff8 	.word	0x08011ff8

0800f630 <_Bfree>:
 800f630:	b570      	push	{r4, r5, r6, lr}
 800f632:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f634:	4605      	mov	r5, r0
 800f636:	460c      	mov	r4, r1
 800f638:	b976      	cbnz	r6, 800f658 <_Bfree+0x28>
 800f63a:	2010      	movs	r0, #16
 800f63c:	f7ff ff9e 	bl	800f57c <malloc>
 800f640:	4602      	mov	r2, r0
 800f642:	6268      	str	r0, [r5, #36]	; 0x24
 800f644:	b920      	cbnz	r0, 800f650 <_Bfree+0x20>
 800f646:	4b09      	ldr	r3, [pc, #36]	; (800f66c <_Bfree+0x3c>)
 800f648:	4809      	ldr	r0, [pc, #36]	; (800f670 <_Bfree+0x40>)
 800f64a:	218a      	movs	r1, #138	; 0x8a
 800f64c:	f001 f868 	bl	8010720 <__assert_func>
 800f650:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f654:	6006      	str	r6, [r0, #0]
 800f656:	60c6      	str	r6, [r0, #12]
 800f658:	b13c      	cbz	r4, 800f66a <_Bfree+0x3a>
 800f65a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f65c:	6862      	ldr	r2, [r4, #4]
 800f65e:	68db      	ldr	r3, [r3, #12]
 800f660:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f664:	6021      	str	r1, [r4, #0]
 800f666:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f66a:	bd70      	pop	{r4, r5, r6, pc}
 800f66c:	08011e8e 	.word	0x08011e8e
 800f670:	08011ff8 	.word	0x08011ff8

0800f674 <__multadd>:
 800f674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f678:	690e      	ldr	r6, [r1, #16]
 800f67a:	4607      	mov	r7, r0
 800f67c:	4698      	mov	r8, r3
 800f67e:	460c      	mov	r4, r1
 800f680:	f101 0014 	add.w	r0, r1, #20
 800f684:	2300      	movs	r3, #0
 800f686:	6805      	ldr	r5, [r0, #0]
 800f688:	b2a9      	uxth	r1, r5
 800f68a:	fb02 8101 	mla	r1, r2, r1, r8
 800f68e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f692:	0c2d      	lsrs	r5, r5, #16
 800f694:	fb02 c505 	mla	r5, r2, r5, ip
 800f698:	b289      	uxth	r1, r1
 800f69a:	3301      	adds	r3, #1
 800f69c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f6a0:	429e      	cmp	r6, r3
 800f6a2:	f840 1b04 	str.w	r1, [r0], #4
 800f6a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f6aa:	dcec      	bgt.n	800f686 <__multadd+0x12>
 800f6ac:	f1b8 0f00 	cmp.w	r8, #0
 800f6b0:	d022      	beq.n	800f6f8 <__multadd+0x84>
 800f6b2:	68a3      	ldr	r3, [r4, #8]
 800f6b4:	42b3      	cmp	r3, r6
 800f6b6:	dc19      	bgt.n	800f6ec <__multadd+0x78>
 800f6b8:	6861      	ldr	r1, [r4, #4]
 800f6ba:	4638      	mov	r0, r7
 800f6bc:	3101      	adds	r1, #1
 800f6be:	f7ff ff77 	bl	800f5b0 <_Balloc>
 800f6c2:	4605      	mov	r5, r0
 800f6c4:	b928      	cbnz	r0, 800f6d2 <__multadd+0x5e>
 800f6c6:	4602      	mov	r2, r0
 800f6c8:	4b0d      	ldr	r3, [pc, #52]	; (800f700 <__multadd+0x8c>)
 800f6ca:	480e      	ldr	r0, [pc, #56]	; (800f704 <__multadd+0x90>)
 800f6cc:	21b5      	movs	r1, #181	; 0xb5
 800f6ce:	f001 f827 	bl	8010720 <__assert_func>
 800f6d2:	6922      	ldr	r2, [r4, #16]
 800f6d4:	3202      	adds	r2, #2
 800f6d6:	f104 010c 	add.w	r1, r4, #12
 800f6da:	0092      	lsls	r2, r2, #2
 800f6dc:	300c      	adds	r0, #12
 800f6de:	f7fc fe93 	bl	800c408 <memcpy>
 800f6e2:	4621      	mov	r1, r4
 800f6e4:	4638      	mov	r0, r7
 800f6e6:	f7ff ffa3 	bl	800f630 <_Bfree>
 800f6ea:	462c      	mov	r4, r5
 800f6ec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f6f0:	3601      	adds	r6, #1
 800f6f2:	f8c3 8014 	str.w	r8, [r3, #20]
 800f6f6:	6126      	str	r6, [r4, #16]
 800f6f8:	4620      	mov	r0, r4
 800f6fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6fe:	bf00      	nop
 800f700:	08011f04 	.word	0x08011f04
 800f704:	08011ff8 	.word	0x08011ff8

0800f708 <__s2b>:
 800f708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f70c:	460c      	mov	r4, r1
 800f70e:	4615      	mov	r5, r2
 800f710:	461f      	mov	r7, r3
 800f712:	2209      	movs	r2, #9
 800f714:	3308      	adds	r3, #8
 800f716:	4606      	mov	r6, r0
 800f718:	fb93 f3f2 	sdiv	r3, r3, r2
 800f71c:	2100      	movs	r1, #0
 800f71e:	2201      	movs	r2, #1
 800f720:	429a      	cmp	r2, r3
 800f722:	db09      	blt.n	800f738 <__s2b+0x30>
 800f724:	4630      	mov	r0, r6
 800f726:	f7ff ff43 	bl	800f5b0 <_Balloc>
 800f72a:	b940      	cbnz	r0, 800f73e <__s2b+0x36>
 800f72c:	4602      	mov	r2, r0
 800f72e:	4b19      	ldr	r3, [pc, #100]	; (800f794 <__s2b+0x8c>)
 800f730:	4819      	ldr	r0, [pc, #100]	; (800f798 <__s2b+0x90>)
 800f732:	21ce      	movs	r1, #206	; 0xce
 800f734:	f000 fff4 	bl	8010720 <__assert_func>
 800f738:	0052      	lsls	r2, r2, #1
 800f73a:	3101      	adds	r1, #1
 800f73c:	e7f0      	b.n	800f720 <__s2b+0x18>
 800f73e:	9b08      	ldr	r3, [sp, #32]
 800f740:	6143      	str	r3, [r0, #20]
 800f742:	2d09      	cmp	r5, #9
 800f744:	f04f 0301 	mov.w	r3, #1
 800f748:	6103      	str	r3, [r0, #16]
 800f74a:	dd16      	ble.n	800f77a <__s2b+0x72>
 800f74c:	f104 0909 	add.w	r9, r4, #9
 800f750:	46c8      	mov	r8, r9
 800f752:	442c      	add	r4, r5
 800f754:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f758:	4601      	mov	r1, r0
 800f75a:	3b30      	subs	r3, #48	; 0x30
 800f75c:	220a      	movs	r2, #10
 800f75e:	4630      	mov	r0, r6
 800f760:	f7ff ff88 	bl	800f674 <__multadd>
 800f764:	45a0      	cmp	r8, r4
 800f766:	d1f5      	bne.n	800f754 <__s2b+0x4c>
 800f768:	f1a5 0408 	sub.w	r4, r5, #8
 800f76c:	444c      	add	r4, r9
 800f76e:	1b2d      	subs	r5, r5, r4
 800f770:	1963      	adds	r3, r4, r5
 800f772:	42bb      	cmp	r3, r7
 800f774:	db04      	blt.n	800f780 <__s2b+0x78>
 800f776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f77a:	340a      	adds	r4, #10
 800f77c:	2509      	movs	r5, #9
 800f77e:	e7f6      	b.n	800f76e <__s2b+0x66>
 800f780:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f784:	4601      	mov	r1, r0
 800f786:	3b30      	subs	r3, #48	; 0x30
 800f788:	220a      	movs	r2, #10
 800f78a:	4630      	mov	r0, r6
 800f78c:	f7ff ff72 	bl	800f674 <__multadd>
 800f790:	e7ee      	b.n	800f770 <__s2b+0x68>
 800f792:	bf00      	nop
 800f794:	08011f04 	.word	0x08011f04
 800f798:	08011ff8 	.word	0x08011ff8

0800f79c <__hi0bits>:
 800f79c:	0c03      	lsrs	r3, r0, #16
 800f79e:	041b      	lsls	r3, r3, #16
 800f7a0:	b9d3      	cbnz	r3, 800f7d8 <__hi0bits+0x3c>
 800f7a2:	0400      	lsls	r0, r0, #16
 800f7a4:	2310      	movs	r3, #16
 800f7a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f7aa:	bf04      	itt	eq
 800f7ac:	0200      	lsleq	r0, r0, #8
 800f7ae:	3308      	addeq	r3, #8
 800f7b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f7b4:	bf04      	itt	eq
 800f7b6:	0100      	lsleq	r0, r0, #4
 800f7b8:	3304      	addeq	r3, #4
 800f7ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f7be:	bf04      	itt	eq
 800f7c0:	0080      	lsleq	r0, r0, #2
 800f7c2:	3302      	addeq	r3, #2
 800f7c4:	2800      	cmp	r0, #0
 800f7c6:	db05      	blt.n	800f7d4 <__hi0bits+0x38>
 800f7c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f7cc:	f103 0301 	add.w	r3, r3, #1
 800f7d0:	bf08      	it	eq
 800f7d2:	2320      	moveq	r3, #32
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	4770      	bx	lr
 800f7d8:	2300      	movs	r3, #0
 800f7da:	e7e4      	b.n	800f7a6 <__hi0bits+0xa>

0800f7dc <__lo0bits>:
 800f7dc:	6803      	ldr	r3, [r0, #0]
 800f7de:	f013 0207 	ands.w	r2, r3, #7
 800f7e2:	4601      	mov	r1, r0
 800f7e4:	d00b      	beq.n	800f7fe <__lo0bits+0x22>
 800f7e6:	07da      	lsls	r2, r3, #31
 800f7e8:	d424      	bmi.n	800f834 <__lo0bits+0x58>
 800f7ea:	0798      	lsls	r0, r3, #30
 800f7ec:	bf49      	itett	mi
 800f7ee:	085b      	lsrmi	r3, r3, #1
 800f7f0:	089b      	lsrpl	r3, r3, #2
 800f7f2:	2001      	movmi	r0, #1
 800f7f4:	600b      	strmi	r3, [r1, #0]
 800f7f6:	bf5c      	itt	pl
 800f7f8:	600b      	strpl	r3, [r1, #0]
 800f7fa:	2002      	movpl	r0, #2
 800f7fc:	4770      	bx	lr
 800f7fe:	b298      	uxth	r0, r3
 800f800:	b9b0      	cbnz	r0, 800f830 <__lo0bits+0x54>
 800f802:	0c1b      	lsrs	r3, r3, #16
 800f804:	2010      	movs	r0, #16
 800f806:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f80a:	bf04      	itt	eq
 800f80c:	0a1b      	lsreq	r3, r3, #8
 800f80e:	3008      	addeq	r0, #8
 800f810:	071a      	lsls	r2, r3, #28
 800f812:	bf04      	itt	eq
 800f814:	091b      	lsreq	r3, r3, #4
 800f816:	3004      	addeq	r0, #4
 800f818:	079a      	lsls	r2, r3, #30
 800f81a:	bf04      	itt	eq
 800f81c:	089b      	lsreq	r3, r3, #2
 800f81e:	3002      	addeq	r0, #2
 800f820:	07da      	lsls	r2, r3, #31
 800f822:	d403      	bmi.n	800f82c <__lo0bits+0x50>
 800f824:	085b      	lsrs	r3, r3, #1
 800f826:	f100 0001 	add.w	r0, r0, #1
 800f82a:	d005      	beq.n	800f838 <__lo0bits+0x5c>
 800f82c:	600b      	str	r3, [r1, #0]
 800f82e:	4770      	bx	lr
 800f830:	4610      	mov	r0, r2
 800f832:	e7e8      	b.n	800f806 <__lo0bits+0x2a>
 800f834:	2000      	movs	r0, #0
 800f836:	4770      	bx	lr
 800f838:	2020      	movs	r0, #32
 800f83a:	4770      	bx	lr

0800f83c <__i2b>:
 800f83c:	b510      	push	{r4, lr}
 800f83e:	460c      	mov	r4, r1
 800f840:	2101      	movs	r1, #1
 800f842:	f7ff feb5 	bl	800f5b0 <_Balloc>
 800f846:	4602      	mov	r2, r0
 800f848:	b928      	cbnz	r0, 800f856 <__i2b+0x1a>
 800f84a:	4b05      	ldr	r3, [pc, #20]	; (800f860 <__i2b+0x24>)
 800f84c:	4805      	ldr	r0, [pc, #20]	; (800f864 <__i2b+0x28>)
 800f84e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f852:	f000 ff65 	bl	8010720 <__assert_func>
 800f856:	2301      	movs	r3, #1
 800f858:	6144      	str	r4, [r0, #20]
 800f85a:	6103      	str	r3, [r0, #16]
 800f85c:	bd10      	pop	{r4, pc}
 800f85e:	bf00      	nop
 800f860:	08011f04 	.word	0x08011f04
 800f864:	08011ff8 	.word	0x08011ff8

0800f868 <__multiply>:
 800f868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f86c:	4614      	mov	r4, r2
 800f86e:	690a      	ldr	r2, [r1, #16]
 800f870:	6923      	ldr	r3, [r4, #16]
 800f872:	429a      	cmp	r2, r3
 800f874:	bfb8      	it	lt
 800f876:	460b      	movlt	r3, r1
 800f878:	460d      	mov	r5, r1
 800f87a:	bfbc      	itt	lt
 800f87c:	4625      	movlt	r5, r4
 800f87e:	461c      	movlt	r4, r3
 800f880:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f884:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f888:	68ab      	ldr	r3, [r5, #8]
 800f88a:	6869      	ldr	r1, [r5, #4]
 800f88c:	eb0a 0709 	add.w	r7, sl, r9
 800f890:	42bb      	cmp	r3, r7
 800f892:	b085      	sub	sp, #20
 800f894:	bfb8      	it	lt
 800f896:	3101      	addlt	r1, #1
 800f898:	f7ff fe8a 	bl	800f5b0 <_Balloc>
 800f89c:	b930      	cbnz	r0, 800f8ac <__multiply+0x44>
 800f89e:	4602      	mov	r2, r0
 800f8a0:	4b42      	ldr	r3, [pc, #264]	; (800f9ac <__multiply+0x144>)
 800f8a2:	4843      	ldr	r0, [pc, #268]	; (800f9b0 <__multiply+0x148>)
 800f8a4:	f240 115d 	movw	r1, #349	; 0x15d
 800f8a8:	f000 ff3a 	bl	8010720 <__assert_func>
 800f8ac:	f100 0614 	add.w	r6, r0, #20
 800f8b0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f8b4:	4633      	mov	r3, r6
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	4543      	cmp	r3, r8
 800f8ba:	d31e      	bcc.n	800f8fa <__multiply+0x92>
 800f8bc:	f105 0c14 	add.w	ip, r5, #20
 800f8c0:	f104 0314 	add.w	r3, r4, #20
 800f8c4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f8c8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f8cc:	9202      	str	r2, [sp, #8]
 800f8ce:	ebac 0205 	sub.w	r2, ip, r5
 800f8d2:	3a15      	subs	r2, #21
 800f8d4:	f022 0203 	bic.w	r2, r2, #3
 800f8d8:	3204      	adds	r2, #4
 800f8da:	f105 0115 	add.w	r1, r5, #21
 800f8de:	458c      	cmp	ip, r1
 800f8e0:	bf38      	it	cc
 800f8e2:	2204      	movcc	r2, #4
 800f8e4:	9201      	str	r2, [sp, #4]
 800f8e6:	9a02      	ldr	r2, [sp, #8]
 800f8e8:	9303      	str	r3, [sp, #12]
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	d808      	bhi.n	800f900 <__multiply+0x98>
 800f8ee:	2f00      	cmp	r7, #0
 800f8f0:	dc55      	bgt.n	800f99e <__multiply+0x136>
 800f8f2:	6107      	str	r7, [r0, #16]
 800f8f4:	b005      	add	sp, #20
 800f8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8fa:	f843 2b04 	str.w	r2, [r3], #4
 800f8fe:	e7db      	b.n	800f8b8 <__multiply+0x50>
 800f900:	f8b3 a000 	ldrh.w	sl, [r3]
 800f904:	f1ba 0f00 	cmp.w	sl, #0
 800f908:	d020      	beq.n	800f94c <__multiply+0xe4>
 800f90a:	f105 0e14 	add.w	lr, r5, #20
 800f90e:	46b1      	mov	r9, r6
 800f910:	2200      	movs	r2, #0
 800f912:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f916:	f8d9 b000 	ldr.w	fp, [r9]
 800f91a:	b2a1      	uxth	r1, r4
 800f91c:	fa1f fb8b 	uxth.w	fp, fp
 800f920:	fb0a b101 	mla	r1, sl, r1, fp
 800f924:	4411      	add	r1, r2
 800f926:	f8d9 2000 	ldr.w	r2, [r9]
 800f92a:	0c24      	lsrs	r4, r4, #16
 800f92c:	0c12      	lsrs	r2, r2, #16
 800f92e:	fb0a 2404 	mla	r4, sl, r4, r2
 800f932:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f936:	b289      	uxth	r1, r1
 800f938:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f93c:	45f4      	cmp	ip, lr
 800f93e:	f849 1b04 	str.w	r1, [r9], #4
 800f942:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f946:	d8e4      	bhi.n	800f912 <__multiply+0xaa>
 800f948:	9901      	ldr	r1, [sp, #4]
 800f94a:	5072      	str	r2, [r6, r1]
 800f94c:	9a03      	ldr	r2, [sp, #12]
 800f94e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f952:	3304      	adds	r3, #4
 800f954:	f1b9 0f00 	cmp.w	r9, #0
 800f958:	d01f      	beq.n	800f99a <__multiply+0x132>
 800f95a:	6834      	ldr	r4, [r6, #0]
 800f95c:	f105 0114 	add.w	r1, r5, #20
 800f960:	46b6      	mov	lr, r6
 800f962:	f04f 0a00 	mov.w	sl, #0
 800f966:	880a      	ldrh	r2, [r1, #0]
 800f968:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f96c:	fb09 b202 	mla	r2, r9, r2, fp
 800f970:	4492      	add	sl, r2
 800f972:	b2a4      	uxth	r4, r4
 800f974:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f978:	f84e 4b04 	str.w	r4, [lr], #4
 800f97c:	f851 4b04 	ldr.w	r4, [r1], #4
 800f980:	f8be 2000 	ldrh.w	r2, [lr]
 800f984:	0c24      	lsrs	r4, r4, #16
 800f986:	fb09 2404 	mla	r4, r9, r4, r2
 800f98a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f98e:	458c      	cmp	ip, r1
 800f990:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f994:	d8e7      	bhi.n	800f966 <__multiply+0xfe>
 800f996:	9a01      	ldr	r2, [sp, #4]
 800f998:	50b4      	str	r4, [r6, r2]
 800f99a:	3604      	adds	r6, #4
 800f99c:	e7a3      	b.n	800f8e6 <__multiply+0x7e>
 800f99e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d1a5      	bne.n	800f8f2 <__multiply+0x8a>
 800f9a6:	3f01      	subs	r7, #1
 800f9a8:	e7a1      	b.n	800f8ee <__multiply+0x86>
 800f9aa:	bf00      	nop
 800f9ac:	08011f04 	.word	0x08011f04
 800f9b0:	08011ff8 	.word	0x08011ff8

0800f9b4 <__pow5mult>:
 800f9b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9b8:	4615      	mov	r5, r2
 800f9ba:	f012 0203 	ands.w	r2, r2, #3
 800f9be:	4606      	mov	r6, r0
 800f9c0:	460f      	mov	r7, r1
 800f9c2:	d007      	beq.n	800f9d4 <__pow5mult+0x20>
 800f9c4:	4c25      	ldr	r4, [pc, #148]	; (800fa5c <__pow5mult+0xa8>)
 800f9c6:	3a01      	subs	r2, #1
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f9ce:	f7ff fe51 	bl	800f674 <__multadd>
 800f9d2:	4607      	mov	r7, r0
 800f9d4:	10ad      	asrs	r5, r5, #2
 800f9d6:	d03d      	beq.n	800fa54 <__pow5mult+0xa0>
 800f9d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f9da:	b97c      	cbnz	r4, 800f9fc <__pow5mult+0x48>
 800f9dc:	2010      	movs	r0, #16
 800f9de:	f7ff fdcd 	bl	800f57c <malloc>
 800f9e2:	4602      	mov	r2, r0
 800f9e4:	6270      	str	r0, [r6, #36]	; 0x24
 800f9e6:	b928      	cbnz	r0, 800f9f4 <__pow5mult+0x40>
 800f9e8:	4b1d      	ldr	r3, [pc, #116]	; (800fa60 <__pow5mult+0xac>)
 800f9ea:	481e      	ldr	r0, [pc, #120]	; (800fa64 <__pow5mult+0xb0>)
 800f9ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f9f0:	f000 fe96 	bl	8010720 <__assert_func>
 800f9f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f9f8:	6004      	str	r4, [r0, #0]
 800f9fa:	60c4      	str	r4, [r0, #12]
 800f9fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fa00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fa04:	b94c      	cbnz	r4, 800fa1a <__pow5mult+0x66>
 800fa06:	f240 2171 	movw	r1, #625	; 0x271
 800fa0a:	4630      	mov	r0, r6
 800fa0c:	f7ff ff16 	bl	800f83c <__i2b>
 800fa10:	2300      	movs	r3, #0
 800fa12:	f8c8 0008 	str.w	r0, [r8, #8]
 800fa16:	4604      	mov	r4, r0
 800fa18:	6003      	str	r3, [r0, #0]
 800fa1a:	f04f 0900 	mov.w	r9, #0
 800fa1e:	07eb      	lsls	r3, r5, #31
 800fa20:	d50a      	bpl.n	800fa38 <__pow5mult+0x84>
 800fa22:	4639      	mov	r1, r7
 800fa24:	4622      	mov	r2, r4
 800fa26:	4630      	mov	r0, r6
 800fa28:	f7ff ff1e 	bl	800f868 <__multiply>
 800fa2c:	4639      	mov	r1, r7
 800fa2e:	4680      	mov	r8, r0
 800fa30:	4630      	mov	r0, r6
 800fa32:	f7ff fdfd 	bl	800f630 <_Bfree>
 800fa36:	4647      	mov	r7, r8
 800fa38:	106d      	asrs	r5, r5, #1
 800fa3a:	d00b      	beq.n	800fa54 <__pow5mult+0xa0>
 800fa3c:	6820      	ldr	r0, [r4, #0]
 800fa3e:	b938      	cbnz	r0, 800fa50 <__pow5mult+0x9c>
 800fa40:	4622      	mov	r2, r4
 800fa42:	4621      	mov	r1, r4
 800fa44:	4630      	mov	r0, r6
 800fa46:	f7ff ff0f 	bl	800f868 <__multiply>
 800fa4a:	6020      	str	r0, [r4, #0]
 800fa4c:	f8c0 9000 	str.w	r9, [r0]
 800fa50:	4604      	mov	r4, r0
 800fa52:	e7e4      	b.n	800fa1e <__pow5mult+0x6a>
 800fa54:	4638      	mov	r0, r7
 800fa56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa5a:	bf00      	nop
 800fa5c:	08012148 	.word	0x08012148
 800fa60:	08011e8e 	.word	0x08011e8e
 800fa64:	08011ff8 	.word	0x08011ff8

0800fa68 <__lshift>:
 800fa68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa6c:	460c      	mov	r4, r1
 800fa6e:	6849      	ldr	r1, [r1, #4]
 800fa70:	6923      	ldr	r3, [r4, #16]
 800fa72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fa76:	68a3      	ldr	r3, [r4, #8]
 800fa78:	4607      	mov	r7, r0
 800fa7a:	4691      	mov	r9, r2
 800fa7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fa80:	f108 0601 	add.w	r6, r8, #1
 800fa84:	42b3      	cmp	r3, r6
 800fa86:	db0b      	blt.n	800faa0 <__lshift+0x38>
 800fa88:	4638      	mov	r0, r7
 800fa8a:	f7ff fd91 	bl	800f5b0 <_Balloc>
 800fa8e:	4605      	mov	r5, r0
 800fa90:	b948      	cbnz	r0, 800faa6 <__lshift+0x3e>
 800fa92:	4602      	mov	r2, r0
 800fa94:	4b28      	ldr	r3, [pc, #160]	; (800fb38 <__lshift+0xd0>)
 800fa96:	4829      	ldr	r0, [pc, #164]	; (800fb3c <__lshift+0xd4>)
 800fa98:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fa9c:	f000 fe40 	bl	8010720 <__assert_func>
 800faa0:	3101      	adds	r1, #1
 800faa2:	005b      	lsls	r3, r3, #1
 800faa4:	e7ee      	b.n	800fa84 <__lshift+0x1c>
 800faa6:	2300      	movs	r3, #0
 800faa8:	f100 0114 	add.w	r1, r0, #20
 800faac:	f100 0210 	add.w	r2, r0, #16
 800fab0:	4618      	mov	r0, r3
 800fab2:	4553      	cmp	r3, sl
 800fab4:	db33      	blt.n	800fb1e <__lshift+0xb6>
 800fab6:	6920      	ldr	r0, [r4, #16]
 800fab8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fabc:	f104 0314 	add.w	r3, r4, #20
 800fac0:	f019 091f 	ands.w	r9, r9, #31
 800fac4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fac8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800facc:	d02b      	beq.n	800fb26 <__lshift+0xbe>
 800face:	f1c9 0e20 	rsb	lr, r9, #32
 800fad2:	468a      	mov	sl, r1
 800fad4:	2200      	movs	r2, #0
 800fad6:	6818      	ldr	r0, [r3, #0]
 800fad8:	fa00 f009 	lsl.w	r0, r0, r9
 800fadc:	4302      	orrs	r2, r0
 800fade:	f84a 2b04 	str.w	r2, [sl], #4
 800fae2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fae6:	459c      	cmp	ip, r3
 800fae8:	fa22 f20e 	lsr.w	r2, r2, lr
 800faec:	d8f3      	bhi.n	800fad6 <__lshift+0x6e>
 800faee:	ebac 0304 	sub.w	r3, ip, r4
 800faf2:	3b15      	subs	r3, #21
 800faf4:	f023 0303 	bic.w	r3, r3, #3
 800faf8:	3304      	adds	r3, #4
 800fafa:	f104 0015 	add.w	r0, r4, #21
 800fafe:	4584      	cmp	ip, r0
 800fb00:	bf38      	it	cc
 800fb02:	2304      	movcc	r3, #4
 800fb04:	50ca      	str	r2, [r1, r3]
 800fb06:	b10a      	cbz	r2, 800fb0c <__lshift+0xa4>
 800fb08:	f108 0602 	add.w	r6, r8, #2
 800fb0c:	3e01      	subs	r6, #1
 800fb0e:	4638      	mov	r0, r7
 800fb10:	612e      	str	r6, [r5, #16]
 800fb12:	4621      	mov	r1, r4
 800fb14:	f7ff fd8c 	bl	800f630 <_Bfree>
 800fb18:	4628      	mov	r0, r5
 800fb1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb1e:	f842 0f04 	str.w	r0, [r2, #4]!
 800fb22:	3301      	adds	r3, #1
 800fb24:	e7c5      	b.n	800fab2 <__lshift+0x4a>
 800fb26:	3904      	subs	r1, #4
 800fb28:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb2c:	f841 2f04 	str.w	r2, [r1, #4]!
 800fb30:	459c      	cmp	ip, r3
 800fb32:	d8f9      	bhi.n	800fb28 <__lshift+0xc0>
 800fb34:	e7ea      	b.n	800fb0c <__lshift+0xa4>
 800fb36:	bf00      	nop
 800fb38:	08011f04 	.word	0x08011f04
 800fb3c:	08011ff8 	.word	0x08011ff8

0800fb40 <__mcmp>:
 800fb40:	b530      	push	{r4, r5, lr}
 800fb42:	6902      	ldr	r2, [r0, #16]
 800fb44:	690c      	ldr	r4, [r1, #16]
 800fb46:	1b12      	subs	r2, r2, r4
 800fb48:	d10e      	bne.n	800fb68 <__mcmp+0x28>
 800fb4a:	f100 0314 	add.w	r3, r0, #20
 800fb4e:	3114      	adds	r1, #20
 800fb50:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fb54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fb58:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fb5c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fb60:	42a5      	cmp	r5, r4
 800fb62:	d003      	beq.n	800fb6c <__mcmp+0x2c>
 800fb64:	d305      	bcc.n	800fb72 <__mcmp+0x32>
 800fb66:	2201      	movs	r2, #1
 800fb68:	4610      	mov	r0, r2
 800fb6a:	bd30      	pop	{r4, r5, pc}
 800fb6c:	4283      	cmp	r3, r0
 800fb6e:	d3f3      	bcc.n	800fb58 <__mcmp+0x18>
 800fb70:	e7fa      	b.n	800fb68 <__mcmp+0x28>
 800fb72:	f04f 32ff 	mov.w	r2, #4294967295
 800fb76:	e7f7      	b.n	800fb68 <__mcmp+0x28>

0800fb78 <__mdiff>:
 800fb78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb7c:	460c      	mov	r4, r1
 800fb7e:	4606      	mov	r6, r0
 800fb80:	4611      	mov	r1, r2
 800fb82:	4620      	mov	r0, r4
 800fb84:	4617      	mov	r7, r2
 800fb86:	f7ff ffdb 	bl	800fb40 <__mcmp>
 800fb8a:	1e05      	subs	r5, r0, #0
 800fb8c:	d110      	bne.n	800fbb0 <__mdiff+0x38>
 800fb8e:	4629      	mov	r1, r5
 800fb90:	4630      	mov	r0, r6
 800fb92:	f7ff fd0d 	bl	800f5b0 <_Balloc>
 800fb96:	b930      	cbnz	r0, 800fba6 <__mdiff+0x2e>
 800fb98:	4b39      	ldr	r3, [pc, #228]	; (800fc80 <__mdiff+0x108>)
 800fb9a:	4602      	mov	r2, r0
 800fb9c:	f240 2132 	movw	r1, #562	; 0x232
 800fba0:	4838      	ldr	r0, [pc, #224]	; (800fc84 <__mdiff+0x10c>)
 800fba2:	f000 fdbd 	bl	8010720 <__assert_func>
 800fba6:	2301      	movs	r3, #1
 800fba8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fbac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbb0:	bfa4      	itt	ge
 800fbb2:	463b      	movge	r3, r7
 800fbb4:	4627      	movge	r7, r4
 800fbb6:	4630      	mov	r0, r6
 800fbb8:	6879      	ldr	r1, [r7, #4]
 800fbba:	bfa6      	itte	ge
 800fbbc:	461c      	movge	r4, r3
 800fbbe:	2500      	movge	r5, #0
 800fbc0:	2501      	movlt	r5, #1
 800fbc2:	f7ff fcf5 	bl	800f5b0 <_Balloc>
 800fbc6:	b920      	cbnz	r0, 800fbd2 <__mdiff+0x5a>
 800fbc8:	4b2d      	ldr	r3, [pc, #180]	; (800fc80 <__mdiff+0x108>)
 800fbca:	4602      	mov	r2, r0
 800fbcc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fbd0:	e7e6      	b.n	800fba0 <__mdiff+0x28>
 800fbd2:	693e      	ldr	r6, [r7, #16]
 800fbd4:	60c5      	str	r5, [r0, #12]
 800fbd6:	6925      	ldr	r5, [r4, #16]
 800fbd8:	f107 0114 	add.w	r1, r7, #20
 800fbdc:	f104 0914 	add.w	r9, r4, #20
 800fbe0:	f100 0e14 	add.w	lr, r0, #20
 800fbe4:	f107 0210 	add.w	r2, r7, #16
 800fbe8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800fbec:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800fbf0:	46f2      	mov	sl, lr
 800fbf2:	2700      	movs	r7, #0
 800fbf4:	f859 3b04 	ldr.w	r3, [r9], #4
 800fbf8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fbfc:	fa1f f883 	uxth.w	r8, r3
 800fc00:	fa17 f78b 	uxtah	r7, r7, fp
 800fc04:	0c1b      	lsrs	r3, r3, #16
 800fc06:	eba7 0808 	sub.w	r8, r7, r8
 800fc0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fc0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fc12:	fa1f f888 	uxth.w	r8, r8
 800fc16:	141f      	asrs	r7, r3, #16
 800fc18:	454d      	cmp	r5, r9
 800fc1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fc1e:	f84a 3b04 	str.w	r3, [sl], #4
 800fc22:	d8e7      	bhi.n	800fbf4 <__mdiff+0x7c>
 800fc24:	1b2b      	subs	r3, r5, r4
 800fc26:	3b15      	subs	r3, #21
 800fc28:	f023 0303 	bic.w	r3, r3, #3
 800fc2c:	3304      	adds	r3, #4
 800fc2e:	3415      	adds	r4, #21
 800fc30:	42a5      	cmp	r5, r4
 800fc32:	bf38      	it	cc
 800fc34:	2304      	movcc	r3, #4
 800fc36:	4419      	add	r1, r3
 800fc38:	4473      	add	r3, lr
 800fc3a:	469e      	mov	lr, r3
 800fc3c:	460d      	mov	r5, r1
 800fc3e:	4565      	cmp	r5, ip
 800fc40:	d30e      	bcc.n	800fc60 <__mdiff+0xe8>
 800fc42:	f10c 0203 	add.w	r2, ip, #3
 800fc46:	1a52      	subs	r2, r2, r1
 800fc48:	f022 0203 	bic.w	r2, r2, #3
 800fc4c:	3903      	subs	r1, #3
 800fc4e:	458c      	cmp	ip, r1
 800fc50:	bf38      	it	cc
 800fc52:	2200      	movcc	r2, #0
 800fc54:	441a      	add	r2, r3
 800fc56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fc5a:	b17b      	cbz	r3, 800fc7c <__mdiff+0x104>
 800fc5c:	6106      	str	r6, [r0, #16]
 800fc5e:	e7a5      	b.n	800fbac <__mdiff+0x34>
 800fc60:	f855 8b04 	ldr.w	r8, [r5], #4
 800fc64:	fa17 f488 	uxtah	r4, r7, r8
 800fc68:	1422      	asrs	r2, r4, #16
 800fc6a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800fc6e:	b2a4      	uxth	r4, r4
 800fc70:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800fc74:	f84e 4b04 	str.w	r4, [lr], #4
 800fc78:	1417      	asrs	r7, r2, #16
 800fc7a:	e7e0      	b.n	800fc3e <__mdiff+0xc6>
 800fc7c:	3e01      	subs	r6, #1
 800fc7e:	e7ea      	b.n	800fc56 <__mdiff+0xde>
 800fc80:	08011f04 	.word	0x08011f04
 800fc84:	08011ff8 	.word	0x08011ff8

0800fc88 <__ulp>:
 800fc88:	b082      	sub	sp, #8
 800fc8a:	ed8d 0b00 	vstr	d0, [sp]
 800fc8e:	9b01      	ldr	r3, [sp, #4]
 800fc90:	4912      	ldr	r1, [pc, #72]	; (800fcdc <__ulp+0x54>)
 800fc92:	4019      	ands	r1, r3
 800fc94:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800fc98:	2900      	cmp	r1, #0
 800fc9a:	dd05      	ble.n	800fca8 <__ulp+0x20>
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	460b      	mov	r3, r1
 800fca0:	ec43 2b10 	vmov	d0, r2, r3
 800fca4:	b002      	add	sp, #8
 800fca6:	4770      	bx	lr
 800fca8:	4249      	negs	r1, r1
 800fcaa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fcae:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fcb2:	f04f 0200 	mov.w	r2, #0
 800fcb6:	f04f 0300 	mov.w	r3, #0
 800fcba:	da04      	bge.n	800fcc6 <__ulp+0x3e>
 800fcbc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800fcc0:	fa41 f300 	asr.w	r3, r1, r0
 800fcc4:	e7ec      	b.n	800fca0 <__ulp+0x18>
 800fcc6:	f1a0 0114 	sub.w	r1, r0, #20
 800fcca:	291e      	cmp	r1, #30
 800fccc:	bfda      	itte	le
 800fcce:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800fcd2:	fa20 f101 	lsrle.w	r1, r0, r1
 800fcd6:	2101      	movgt	r1, #1
 800fcd8:	460a      	mov	r2, r1
 800fcda:	e7e1      	b.n	800fca0 <__ulp+0x18>
 800fcdc:	7ff00000 	.word	0x7ff00000

0800fce0 <__b2d>:
 800fce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fce2:	6905      	ldr	r5, [r0, #16]
 800fce4:	f100 0714 	add.w	r7, r0, #20
 800fce8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fcec:	1f2e      	subs	r6, r5, #4
 800fcee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fcf2:	4620      	mov	r0, r4
 800fcf4:	f7ff fd52 	bl	800f79c <__hi0bits>
 800fcf8:	f1c0 0320 	rsb	r3, r0, #32
 800fcfc:	280a      	cmp	r0, #10
 800fcfe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800fd7c <__b2d+0x9c>
 800fd02:	600b      	str	r3, [r1, #0]
 800fd04:	dc14      	bgt.n	800fd30 <__b2d+0x50>
 800fd06:	f1c0 0e0b 	rsb	lr, r0, #11
 800fd0a:	fa24 f10e 	lsr.w	r1, r4, lr
 800fd0e:	42b7      	cmp	r7, r6
 800fd10:	ea41 030c 	orr.w	r3, r1, ip
 800fd14:	bf34      	ite	cc
 800fd16:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fd1a:	2100      	movcs	r1, #0
 800fd1c:	3015      	adds	r0, #21
 800fd1e:	fa04 f000 	lsl.w	r0, r4, r0
 800fd22:	fa21 f10e 	lsr.w	r1, r1, lr
 800fd26:	ea40 0201 	orr.w	r2, r0, r1
 800fd2a:	ec43 2b10 	vmov	d0, r2, r3
 800fd2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd30:	42b7      	cmp	r7, r6
 800fd32:	bf3a      	itte	cc
 800fd34:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fd38:	f1a5 0608 	subcc.w	r6, r5, #8
 800fd3c:	2100      	movcs	r1, #0
 800fd3e:	380b      	subs	r0, #11
 800fd40:	d017      	beq.n	800fd72 <__b2d+0x92>
 800fd42:	f1c0 0c20 	rsb	ip, r0, #32
 800fd46:	fa04 f500 	lsl.w	r5, r4, r0
 800fd4a:	42be      	cmp	r6, r7
 800fd4c:	fa21 f40c 	lsr.w	r4, r1, ip
 800fd50:	ea45 0504 	orr.w	r5, r5, r4
 800fd54:	bf8c      	ite	hi
 800fd56:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fd5a:	2400      	movls	r4, #0
 800fd5c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800fd60:	fa01 f000 	lsl.w	r0, r1, r0
 800fd64:	fa24 f40c 	lsr.w	r4, r4, ip
 800fd68:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fd6c:	ea40 0204 	orr.w	r2, r0, r4
 800fd70:	e7db      	b.n	800fd2a <__b2d+0x4a>
 800fd72:	ea44 030c 	orr.w	r3, r4, ip
 800fd76:	460a      	mov	r2, r1
 800fd78:	e7d7      	b.n	800fd2a <__b2d+0x4a>
 800fd7a:	bf00      	nop
 800fd7c:	3ff00000 	.word	0x3ff00000

0800fd80 <__d2b>:
 800fd80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fd84:	4689      	mov	r9, r1
 800fd86:	2101      	movs	r1, #1
 800fd88:	ec57 6b10 	vmov	r6, r7, d0
 800fd8c:	4690      	mov	r8, r2
 800fd8e:	f7ff fc0f 	bl	800f5b0 <_Balloc>
 800fd92:	4604      	mov	r4, r0
 800fd94:	b930      	cbnz	r0, 800fda4 <__d2b+0x24>
 800fd96:	4602      	mov	r2, r0
 800fd98:	4b25      	ldr	r3, [pc, #148]	; (800fe30 <__d2b+0xb0>)
 800fd9a:	4826      	ldr	r0, [pc, #152]	; (800fe34 <__d2b+0xb4>)
 800fd9c:	f240 310a 	movw	r1, #778	; 0x30a
 800fda0:	f000 fcbe 	bl	8010720 <__assert_func>
 800fda4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fda8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fdac:	bb35      	cbnz	r5, 800fdfc <__d2b+0x7c>
 800fdae:	2e00      	cmp	r6, #0
 800fdb0:	9301      	str	r3, [sp, #4]
 800fdb2:	d028      	beq.n	800fe06 <__d2b+0x86>
 800fdb4:	4668      	mov	r0, sp
 800fdb6:	9600      	str	r6, [sp, #0]
 800fdb8:	f7ff fd10 	bl	800f7dc <__lo0bits>
 800fdbc:	9900      	ldr	r1, [sp, #0]
 800fdbe:	b300      	cbz	r0, 800fe02 <__d2b+0x82>
 800fdc0:	9a01      	ldr	r2, [sp, #4]
 800fdc2:	f1c0 0320 	rsb	r3, r0, #32
 800fdc6:	fa02 f303 	lsl.w	r3, r2, r3
 800fdca:	430b      	orrs	r3, r1
 800fdcc:	40c2      	lsrs	r2, r0
 800fdce:	6163      	str	r3, [r4, #20]
 800fdd0:	9201      	str	r2, [sp, #4]
 800fdd2:	9b01      	ldr	r3, [sp, #4]
 800fdd4:	61a3      	str	r3, [r4, #24]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	bf14      	ite	ne
 800fdda:	2202      	movne	r2, #2
 800fddc:	2201      	moveq	r2, #1
 800fdde:	6122      	str	r2, [r4, #16]
 800fde0:	b1d5      	cbz	r5, 800fe18 <__d2b+0x98>
 800fde2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fde6:	4405      	add	r5, r0
 800fde8:	f8c9 5000 	str.w	r5, [r9]
 800fdec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fdf0:	f8c8 0000 	str.w	r0, [r8]
 800fdf4:	4620      	mov	r0, r4
 800fdf6:	b003      	add	sp, #12
 800fdf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fe00:	e7d5      	b.n	800fdae <__d2b+0x2e>
 800fe02:	6161      	str	r1, [r4, #20]
 800fe04:	e7e5      	b.n	800fdd2 <__d2b+0x52>
 800fe06:	a801      	add	r0, sp, #4
 800fe08:	f7ff fce8 	bl	800f7dc <__lo0bits>
 800fe0c:	9b01      	ldr	r3, [sp, #4]
 800fe0e:	6163      	str	r3, [r4, #20]
 800fe10:	2201      	movs	r2, #1
 800fe12:	6122      	str	r2, [r4, #16]
 800fe14:	3020      	adds	r0, #32
 800fe16:	e7e3      	b.n	800fde0 <__d2b+0x60>
 800fe18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fe1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fe20:	f8c9 0000 	str.w	r0, [r9]
 800fe24:	6918      	ldr	r0, [r3, #16]
 800fe26:	f7ff fcb9 	bl	800f79c <__hi0bits>
 800fe2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fe2e:	e7df      	b.n	800fdf0 <__d2b+0x70>
 800fe30:	08011f04 	.word	0x08011f04
 800fe34:	08011ff8 	.word	0x08011ff8

0800fe38 <__ratio>:
 800fe38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe3c:	4688      	mov	r8, r1
 800fe3e:	4669      	mov	r1, sp
 800fe40:	4681      	mov	r9, r0
 800fe42:	f7ff ff4d 	bl	800fce0 <__b2d>
 800fe46:	a901      	add	r1, sp, #4
 800fe48:	4640      	mov	r0, r8
 800fe4a:	ec55 4b10 	vmov	r4, r5, d0
 800fe4e:	f7ff ff47 	bl	800fce0 <__b2d>
 800fe52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fe56:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fe5a:	eba3 0c02 	sub.w	ip, r3, r2
 800fe5e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fe62:	1a9b      	subs	r3, r3, r2
 800fe64:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fe68:	ec51 0b10 	vmov	r0, r1, d0
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	bfd6      	itet	le
 800fe70:	460a      	movle	r2, r1
 800fe72:	462a      	movgt	r2, r5
 800fe74:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fe78:	468b      	mov	fp, r1
 800fe7a:	462f      	mov	r7, r5
 800fe7c:	bfd4      	ite	le
 800fe7e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fe82:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fe86:	4620      	mov	r0, r4
 800fe88:	ee10 2a10 	vmov	r2, s0
 800fe8c:	465b      	mov	r3, fp
 800fe8e:	4639      	mov	r1, r7
 800fe90:	f7f0 fd0c 	bl	80008ac <__aeabi_ddiv>
 800fe94:	ec41 0b10 	vmov	d0, r0, r1
 800fe98:	b003      	add	sp, #12
 800fe9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fe9e <__copybits>:
 800fe9e:	3901      	subs	r1, #1
 800fea0:	b570      	push	{r4, r5, r6, lr}
 800fea2:	1149      	asrs	r1, r1, #5
 800fea4:	6914      	ldr	r4, [r2, #16]
 800fea6:	3101      	adds	r1, #1
 800fea8:	f102 0314 	add.w	r3, r2, #20
 800feac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800feb0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800feb4:	1f05      	subs	r5, r0, #4
 800feb6:	42a3      	cmp	r3, r4
 800feb8:	d30c      	bcc.n	800fed4 <__copybits+0x36>
 800feba:	1aa3      	subs	r3, r4, r2
 800febc:	3b11      	subs	r3, #17
 800febe:	f023 0303 	bic.w	r3, r3, #3
 800fec2:	3211      	adds	r2, #17
 800fec4:	42a2      	cmp	r2, r4
 800fec6:	bf88      	it	hi
 800fec8:	2300      	movhi	r3, #0
 800feca:	4418      	add	r0, r3
 800fecc:	2300      	movs	r3, #0
 800fece:	4288      	cmp	r0, r1
 800fed0:	d305      	bcc.n	800fede <__copybits+0x40>
 800fed2:	bd70      	pop	{r4, r5, r6, pc}
 800fed4:	f853 6b04 	ldr.w	r6, [r3], #4
 800fed8:	f845 6f04 	str.w	r6, [r5, #4]!
 800fedc:	e7eb      	b.n	800feb6 <__copybits+0x18>
 800fede:	f840 3b04 	str.w	r3, [r0], #4
 800fee2:	e7f4      	b.n	800fece <__copybits+0x30>

0800fee4 <__any_on>:
 800fee4:	f100 0214 	add.w	r2, r0, #20
 800fee8:	6900      	ldr	r0, [r0, #16]
 800feea:	114b      	asrs	r3, r1, #5
 800feec:	4298      	cmp	r0, r3
 800feee:	b510      	push	{r4, lr}
 800fef0:	db11      	blt.n	800ff16 <__any_on+0x32>
 800fef2:	dd0a      	ble.n	800ff0a <__any_on+0x26>
 800fef4:	f011 011f 	ands.w	r1, r1, #31
 800fef8:	d007      	beq.n	800ff0a <__any_on+0x26>
 800fefa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fefe:	fa24 f001 	lsr.w	r0, r4, r1
 800ff02:	fa00 f101 	lsl.w	r1, r0, r1
 800ff06:	428c      	cmp	r4, r1
 800ff08:	d10b      	bne.n	800ff22 <__any_on+0x3e>
 800ff0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ff0e:	4293      	cmp	r3, r2
 800ff10:	d803      	bhi.n	800ff1a <__any_on+0x36>
 800ff12:	2000      	movs	r0, #0
 800ff14:	bd10      	pop	{r4, pc}
 800ff16:	4603      	mov	r3, r0
 800ff18:	e7f7      	b.n	800ff0a <__any_on+0x26>
 800ff1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ff1e:	2900      	cmp	r1, #0
 800ff20:	d0f5      	beq.n	800ff0e <__any_on+0x2a>
 800ff22:	2001      	movs	r0, #1
 800ff24:	e7f6      	b.n	800ff14 <__any_on+0x30>

0800ff26 <_calloc_r>:
 800ff26:	b513      	push	{r0, r1, r4, lr}
 800ff28:	434a      	muls	r2, r1
 800ff2a:	4611      	mov	r1, r2
 800ff2c:	9201      	str	r2, [sp, #4]
 800ff2e:	f000 f859 	bl	800ffe4 <_malloc_r>
 800ff32:	4604      	mov	r4, r0
 800ff34:	b118      	cbz	r0, 800ff3e <_calloc_r+0x18>
 800ff36:	9a01      	ldr	r2, [sp, #4]
 800ff38:	2100      	movs	r1, #0
 800ff3a:	f7fc fa73 	bl	800c424 <memset>
 800ff3e:	4620      	mov	r0, r4
 800ff40:	b002      	add	sp, #8
 800ff42:	bd10      	pop	{r4, pc}

0800ff44 <_free_r>:
 800ff44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff46:	2900      	cmp	r1, #0
 800ff48:	d048      	beq.n	800ffdc <_free_r+0x98>
 800ff4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff4e:	9001      	str	r0, [sp, #4]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	f1a1 0404 	sub.w	r4, r1, #4
 800ff56:	bfb8      	it	lt
 800ff58:	18e4      	addlt	r4, r4, r3
 800ff5a:	f000 fc6f 	bl	801083c <__malloc_lock>
 800ff5e:	4a20      	ldr	r2, [pc, #128]	; (800ffe0 <_free_r+0x9c>)
 800ff60:	9801      	ldr	r0, [sp, #4]
 800ff62:	6813      	ldr	r3, [r2, #0]
 800ff64:	4615      	mov	r5, r2
 800ff66:	b933      	cbnz	r3, 800ff76 <_free_r+0x32>
 800ff68:	6063      	str	r3, [r4, #4]
 800ff6a:	6014      	str	r4, [r2, #0]
 800ff6c:	b003      	add	sp, #12
 800ff6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff72:	f000 bc69 	b.w	8010848 <__malloc_unlock>
 800ff76:	42a3      	cmp	r3, r4
 800ff78:	d90b      	bls.n	800ff92 <_free_r+0x4e>
 800ff7a:	6821      	ldr	r1, [r4, #0]
 800ff7c:	1862      	adds	r2, r4, r1
 800ff7e:	4293      	cmp	r3, r2
 800ff80:	bf04      	itt	eq
 800ff82:	681a      	ldreq	r2, [r3, #0]
 800ff84:	685b      	ldreq	r3, [r3, #4]
 800ff86:	6063      	str	r3, [r4, #4]
 800ff88:	bf04      	itt	eq
 800ff8a:	1852      	addeq	r2, r2, r1
 800ff8c:	6022      	streq	r2, [r4, #0]
 800ff8e:	602c      	str	r4, [r5, #0]
 800ff90:	e7ec      	b.n	800ff6c <_free_r+0x28>
 800ff92:	461a      	mov	r2, r3
 800ff94:	685b      	ldr	r3, [r3, #4]
 800ff96:	b10b      	cbz	r3, 800ff9c <_free_r+0x58>
 800ff98:	42a3      	cmp	r3, r4
 800ff9a:	d9fa      	bls.n	800ff92 <_free_r+0x4e>
 800ff9c:	6811      	ldr	r1, [r2, #0]
 800ff9e:	1855      	adds	r5, r2, r1
 800ffa0:	42a5      	cmp	r5, r4
 800ffa2:	d10b      	bne.n	800ffbc <_free_r+0x78>
 800ffa4:	6824      	ldr	r4, [r4, #0]
 800ffa6:	4421      	add	r1, r4
 800ffa8:	1854      	adds	r4, r2, r1
 800ffaa:	42a3      	cmp	r3, r4
 800ffac:	6011      	str	r1, [r2, #0]
 800ffae:	d1dd      	bne.n	800ff6c <_free_r+0x28>
 800ffb0:	681c      	ldr	r4, [r3, #0]
 800ffb2:	685b      	ldr	r3, [r3, #4]
 800ffb4:	6053      	str	r3, [r2, #4]
 800ffb6:	4421      	add	r1, r4
 800ffb8:	6011      	str	r1, [r2, #0]
 800ffba:	e7d7      	b.n	800ff6c <_free_r+0x28>
 800ffbc:	d902      	bls.n	800ffc4 <_free_r+0x80>
 800ffbe:	230c      	movs	r3, #12
 800ffc0:	6003      	str	r3, [r0, #0]
 800ffc2:	e7d3      	b.n	800ff6c <_free_r+0x28>
 800ffc4:	6825      	ldr	r5, [r4, #0]
 800ffc6:	1961      	adds	r1, r4, r5
 800ffc8:	428b      	cmp	r3, r1
 800ffca:	bf04      	itt	eq
 800ffcc:	6819      	ldreq	r1, [r3, #0]
 800ffce:	685b      	ldreq	r3, [r3, #4]
 800ffd0:	6063      	str	r3, [r4, #4]
 800ffd2:	bf04      	itt	eq
 800ffd4:	1949      	addeq	r1, r1, r5
 800ffd6:	6021      	streq	r1, [r4, #0]
 800ffd8:	6054      	str	r4, [r2, #4]
 800ffda:	e7c7      	b.n	800ff6c <_free_r+0x28>
 800ffdc:	b003      	add	sp, #12
 800ffde:	bd30      	pop	{r4, r5, pc}
 800ffe0:	20000320 	.word	0x20000320

0800ffe4 <_malloc_r>:
 800ffe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffe6:	1ccd      	adds	r5, r1, #3
 800ffe8:	f025 0503 	bic.w	r5, r5, #3
 800ffec:	3508      	adds	r5, #8
 800ffee:	2d0c      	cmp	r5, #12
 800fff0:	bf38      	it	cc
 800fff2:	250c      	movcc	r5, #12
 800fff4:	2d00      	cmp	r5, #0
 800fff6:	4606      	mov	r6, r0
 800fff8:	db01      	blt.n	800fffe <_malloc_r+0x1a>
 800fffa:	42a9      	cmp	r1, r5
 800fffc:	d903      	bls.n	8010006 <_malloc_r+0x22>
 800fffe:	230c      	movs	r3, #12
 8010000:	6033      	str	r3, [r6, #0]
 8010002:	2000      	movs	r0, #0
 8010004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010006:	f000 fc19 	bl	801083c <__malloc_lock>
 801000a:	4921      	ldr	r1, [pc, #132]	; (8010090 <_malloc_r+0xac>)
 801000c:	680a      	ldr	r2, [r1, #0]
 801000e:	4614      	mov	r4, r2
 8010010:	b99c      	cbnz	r4, 801003a <_malloc_r+0x56>
 8010012:	4f20      	ldr	r7, [pc, #128]	; (8010094 <_malloc_r+0xb0>)
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	b923      	cbnz	r3, 8010022 <_malloc_r+0x3e>
 8010018:	4621      	mov	r1, r4
 801001a:	4630      	mov	r0, r6
 801001c:	f000 fafc 	bl	8010618 <_sbrk_r>
 8010020:	6038      	str	r0, [r7, #0]
 8010022:	4629      	mov	r1, r5
 8010024:	4630      	mov	r0, r6
 8010026:	f000 faf7 	bl	8010618 <_sbrk_r>
 801002a:	1c43      	adds	r3, r0, #1
 801002c:	d123      	bne.n	8010076 <_malloc_r+0x92>
 801002e:	230c      	movs	r3, #12
 8010030:	6033      	str	r3, [r6, #0]
 8010032:	4630      	mov	r0, r6
 8010034:	f000 fc08 	bl	8010848 <__malloc_unlock>
 8010038:	e7e3      	b.n	8010002 <_malloc_r+0x1e>
 801003a:	6823      	ldr	r3, [r4, #0]
 801003c:	1b5b      	subs	r3, r3, r5
 801003e:	d417      	bmi.n	8010070 <_malloc_r+0x8c>
 8010040:	2b0b      	cmp	r3, #11
 8010042:	d903      	bls.n	801004c <_malloc_r+0x68>
 8010044:	6023      	str	r3, [r4, #0]
 8010046:	441c      	add	r4, r3
 8010048:	6025      	str	r5, [r4, #0]
 801004a:	e004      	b.n	8010056 <_malloc_r+0x72>
 801004c:	6863      	ldr	r3, [r4, #4]
 801004e:	42a2      	cmp	r2, r4
 8010050:	bf0c      	ite	eq
 8010052:	600b      	streq	r3, [r1, #0]
 8010054:	6053      	strne	r3, [r2, #4]
 8010056:	4630      	mov	r0, r6
 8010058:	f000 fbf6 	bl	8010848 <__malloc_unlock>
 801005c:	f104 000b 	add.w	r0, r4, #11
 8010060:	1d23      	adds	r3, r4, #4
 8010062:	f020 0007 	bic.w	r0, r0, #7
 8010066:	1ac2      	subs	r2, r0, r3
 8010068:	d0cc      	beq.n	8010004 <_malloc_r+0x20>
 801006a:	1a1b      	subs	r3, r3, r0
 801006c:	50a3      	str	r3, [r4, r2]
 801006e:	e7c9      	b.n	8010004 <_malloc_r+0x20>
 8010070:	4622      	mov	r2, r4
 8010072:	6864      	ldr	r4, [r4, #4]
 8010074:	e7cc      	b.n	8010010 <_malloc_r+0x2c>
 8010076:	1cc4      	adds	r4, r0, #3
 8010078:	f024 0403 	bic.w	r4, r4, #3
 801007c:	42a0      	cmp	r0, r4
 801007e:	d0e3      	beq.n	8010048 <_malloc_r+0x64>
 8010080:	1a21      	subs	r1, r4, r0
 8010082:	4630      	mov	r0, r6
 8010084:	f000 fac8 	bl	8010618 <_sbrk_r>
 8010088:	3001      	adds	r0, #1
 801008a:	d1dd      	bne.n	8010048 <_malloc_r+0x64>
 801008c:	e7cf      	b.n	801002e <_malloc_r+0x4a>
 801008e:	bf00      	nop
 8010090:	20000320 	.word	0x20000320
 8010094:	20000324 	.word	0x20000324

08010098 <__ssputs_r>:
 8010098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801009c:	688e      	ldr	r6, [r1, #8]
 801009e:	429e      	cmp	r6, r3
 80100a0:	4682      	mov	sl, r0
 80100a2:	460c      	mov	r4, r1
 80100a4:	4690      	mov	r8, r2
 80100a6:	461f      	mov	r7, r3
 80100a8:	d838      	bhi.n	801011c <__ssputs_r+0x84>
 80100aa:	898a      	ldrh	r2, [r1, #12]
 80100ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80100b0:	d032      	beq.n	8010118 <__ssputs_r+0x80>
 80100b2:	6825      	ldr	r5, [r4, #0]
 80100b4:	6909      	ldr	r1, [r1, #16]
 80100b6:	eba5 0901 	sub.w	r9, r5, r1
 80100ba:	6965      	ldr	r5, [r4, #20]
 80100bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80100c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80100c4:	3301      	adds	r3, #1
 80100c6:	444b      	add	r3, r9
 80100c8:	106d      	asrs	r5, r5, #1
 80100ca:	429d      	cmp	r5, r3
 80100cc:	bf38      	it	cc
 80100ce:	461d      	movcc	r5, r3
 80100d0:	0553      	lsls	r3, r2, #21
 80100d2:	d531      	bpl.n	8010138 <__ssputs_r+0xa0>
 80100d4:	4629      	mov	r1, r5
 80100d6:	f7ff ff85 	bl	800ffe4 <_malloc_r>
 80100da:	4606      	mov	r6, r0
 80100dc:	b950      	cbnz	r0, 80100f4 <__ssputs_r+0x5c>
 80100de:	230c      	movs	r3, #12
 80100e0:	f8ca 3000 	str.w	r3, [sl]
 80100e4:	89a3      	ldrh	r3, [r4, #12]
 80100e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100ea:	81a3      	strh	r3, [r4, #12]
 80100ec:	f04f 30ff 	mov.w	r0, #4294967295
 80100f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100f4:	6921      	ldr	r1, [r4, #16]
 80100f6:	464a      	mov	r2, r9
 80100f8:	f7fc f986 	bl	800c408 <memcpy>
 80100fc:	89a3      	ldrh	r3, [r4, #12]
 80100fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010106:	81a3      	strh	r3, [r4, #12]
 8010108:	6126      	str	r6, [r4, #16]
 801010a:	6165      	str	r5, [r4, #20]
 801010c:	444e      	add	r6, r9
 801010e:	eba5 0509 	sub.w	r5, r5, r9
 8010112:	6026      	str	r6, [r4, #0]
 8010114:	60a5      	str	r5, [r4, #8]
 8010116:	463e      	mov	r6, r7
 8010118:	42be      	cmp	r6, r7
 801011a:	d900      	bls.n	801011e <__ssputs_r+0x86>
 801011c:	463e      	mov	r6, r7
 801011e:	4632      	mov	r2, r6
 8010120:	6820      	ldr	r0, [r4, #0]
 8010122:	4641      	mov	r1, r8
 8010124:	f000 fb70 	bl	8010808 <memmove>
 8010128:	68a3      	ldr	r3, [r4, #8]
 801012a:	6822      	ldr	r2, [r4, #0]
 801012c:	1b9b      	subs	r3, r3, r6
 801012e:	4432      	add	r2, r6
 8010130:	60a3      	str	r3, [r4, #8]
 8010132:	6022      	str	r2, [r4, #0]
 8010134:	2000      	movs	r0, #0
 8010136:	e7db      	b.n	80100f0 <__ssputs_r+0x58>
 8010138:	462a      	mov	r2, r5
 801013a:	f000 fb8b 	bl	8010854 <_realloc_r>
 801013e:	4606      	mov	r6, r0
 8010140:	2800      	cmp	r0, #0
 8010142:	d1e1      	bne.n	8010108 <__ssputs_r+0x70>
 8010144:	6921      	ldr	r1, [r4, #16]
 8010146:	4650      	mov	r0, sl
 8010148:	f7ff fefc 	bl	800ff44 <_free_r>
 801014c:	e7c7      	b.n	80100de <__ssputs_r+0x46>
	...

08010150 <_svfiprintf_r>:
 8010150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010154:	4698      	mov	r8, r3
 8010156:	898b      	ldrh	r3, [r1, #12]
 8010158:	061b      	lsls	r3, r3, #24
 801015a:	b09d      	sub	sp, #116	; 0x74
 801015c:	4607      	mov	r7, r0
 801015e:	460d      	mov	r5, r1
 8010160:	4614      	mov	r4, r2
 8010162:	d50e      	bpl.n	8010182 <_svfiprintf_r+0x32>
 8010164:	690b      	ldr	r3, [r1, #16]
 8010166:	b963      	cbnz	r3, 8010182 <_svfiprintf_r+0x32>
 8010168:	2140      	movs	r1, #64	; 0x40
 801016a:	f7ff ff3b 	bl	800ffe4 <_malloc_r>
 801016e:	6028      	str	r0, [r5, #0]
 8010170:	6128      	str	r0, [r5, #16]
 8010172:	b920      	cbnz	r0, 801017e <_svfiprintf_r+0x2e>
 8010174:	230c      	movs	r3, #12
 8010176:	603b      	str	r3, [r7, #0]
 8010178:	f04f 30ff 	mov.w	r0, #4294967295
 801017c:	e0d1      	b.n	8010322 <_svfiprintf_r+0x1d2>
 801017e:	2340      	movs	r3, #64	; 0x40
 8010180:	616b      	str	r3, [r5, #20]
 8010182:	2300      	movs	r3, #0
 8010184:	9309      	str	r3, [sp, #36]	; 0x24
 8010186:	2320      	movs	r3, #32
 8010188:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801018c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010190:	2330      	movs	r3, #48	; 0x30
 8010192:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801033c <_svfiprintf_r+0x1ec>
 8010196:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801019a:	f04f 0901 	mov.w	r9, #1
 801019e:	4623      	mov	r3, r4
 80101a0:	469a      	mov	sl, r3
 80101a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101a6:	b10a      	cbz	r2, 80101ac <_svfiprintf_r+0x5c>
 80101a8:	2a25      	cmp	r2, #37	; 0x25
 80101aa:	d1f9      	bne.n	80101a0 <_svfiprintf_r+0x50>
 80101ac:	ebba 0b04 	subs.w	fp, sl, r4
 80101b0:	d00b      	beq.n	80101ca <_svfiprintf_r+0x7a>
 80101b2:	465b      	mov	r3, fp
 80101b4:	4622      	mov	r2, r4
 80101b6:	4629      	mov	r1, r5
 80101b8:	4638      	mov	r0, r7
 80101ba:	f7ff ff6d 	bl	8010098 <__ssputs_r>
 80101be:	3001      	adds	r0, #1
 80101c0:	f000 80aa 	beq.w	8010318 <_svfiprintf_r+0x1c8>
 80101c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80101c6:	445a      	add	r2, fp
 80101c8:	9209      	str	r2, [sp, #36]	; 0x24
 80101ca:	f89a 3000 	ldrb.w	r3, [sl]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	f000 80a2 	beq.w	8010318 <_svfiprintf_r+0x1c8>
 80101d4:	2300      	movs	r3, #0
 80101d6:	f04f 32ff 	mov.w	r2, #4294967295
 80101da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80101de:	f10a 0a01 	add.w	sl, sl, #1
 80101e2:	9304      	str	r3, [sp, #16]
 80101e4:	9307      	str	r3, [sp, #28]
 80101e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80101ea:	931a      	str	r3, [sp, #104]	; 0x68
 80101ec:	4654      	mov	r4, sl
 80101ee:	2205      	movs	r2, #5
 80101f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101f4:	4851      	ldr	r0, [pc, #324]	; (801033c <_svfiprintf_r+0x1ec>)
 80101f6:	f7f0 f823 	bl	8000240 <memchr>
 80101fa:	9a04      	ldr	r2, [sp, #16]
 80101fc:	b9d8      	cbnz	r0, 8010236 <_svfiprintf_r+0xe6>
 80101fe:	06d0      	lsls	r0, r2, #27
 8010200:	bf44      	itt	mi
 8010202:	2320      	movmi	r3, #32
 8010204:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010208:	0711      	lsls	r1, r2, #28
 801020a:	bf44      	itt	mi
 801020c:	232b      	movmi	r3, #43	; 0x2b
 801020e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010212:	f89a 3000 	ldrb.w	r3, [sl]
 8010216:	2b2a      	cmp	r3, #42	; 0x2a
 8010218:	d015      	beq.n	8010246 <_svfiprintf_r+0xf6>
 801021a:	9a07      	ldr	r2, [sp, #28]
 801021c:	4654      	mov	r4, sl
 801021e:	2000      	movs	r0, #0
 8010220:	f04f 0c0a 	mov.w	ip, #10
 8010224:	4621      	mov	r1, r4
 8010226:	f811 3b01 	ldrb.w	r3, [r1], #1
 801022a:	3b30      	subs	r3, #48	; 0x30
 801022c:	2b09      	cmp	r3, #9
 801022e:	d94e      	bls.n	80102ce <_svfiprintf_r+0x17e>
 8010230:	b1b0      	cbz	r0, 8010260 <_svfiprintf_r+0x110>
 8010232:	9207      	str	r2, [sp, #28]
 8010234:	e014      	b.n	8010260 <_svfiprintf_r+0x110>
 8010236:	eba0 0308 	sub.w	r3, r0, r8
 801023a:	fa09 f303 	lsl.w	r3, r9, r3
 801023e:	4313      	orrs	r3, r2
 8010240:	9304      	str	r3, [sp, #16]
 8010242:	46a2      	mov	sl, r4
 8010244:	e7d2      	b.n	80101ec <_svfiprintf_r+0x9c>
 8010246:	9b03      	ldr	r3, [sp, #12]
 8010248:	1d19      	adds	r1, r3, #4
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	9103      	str	r1, [sp, #12]
 801024e:	2b00      	cmp	r3, #0
 8010250:	bfbb      	ittet	lt
 8010252:	425b      	neglt	r3, r3
 8010254:	f042 0202 	orrlt.w	r2, r2, #2
 8010258:	9307      	strge	r3, [sp, #28]
 801025a:	9307      	strlt	r3, [sp, #28]
 801025c:	bfb8      	it	lt
 801025e:	9204      	strlt	r2, [sp, #16]
 8010260:	7823      	ldrb	r3, [r4, #0]
 8010262:	2b2e      	cmp	r3, #46	; 0x2e
 8010264:	d10c      	bne.n	8010280 <_svfiprintf_r+0x130>
 8010266:	7863      	ldrb	r3, [r4, #1]
 8010268:	2b2a      	cmp	r3, #42	; 0x2a
 801026a:	d135      	bne.n	80102d8 <_svfiprintf_r+0x188>
 801026c:	9b03      	ldr	r3, [sp, #12]
 801026e:	1d1a      	adds	r2, r3, #4
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	9203      	str	r2, [sp, #12]
 8010274:	2b00      	cmp	r3, #0
 8010276:	bfb8      	it	lt
 8010278:	f04f 33ff 	movlt.w	r3, #4294967295
 801027c:	3402      	adds	r4, #2
 801027e:	9305      	str	r3, [sp, #20]
 8010280:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801034c <_svfiprintf_r+0x1fc>
 8010284:	7821      	ldrb	r1, [r4, #0]
 8010286:	2203      	movs	r2, #3
 8010288:	4650      	mov	r0, sl
 801028a:	f7ef ffd9 	bl	8000240 <memchr>
 801028e:	b140      	cbz	r0, 80102a2 <_svfiprintf_r+0x152>
 8010290:	2340      	movs	r3, #64	; 0x40
 8010292:	eba0 000a 	sub.w	r0, r0, sl
 8010296:	fa03 f000 	lsl.w	r0, r3, r0
 801029a:	9b04      	ldr	r3, [sp, #16]
 801029c:	4303      	orrs	r3, r0
 801029e:	3401      	adds	r4, #1
 80102a0:	9304      	str	r3, [sp, #16]
 80102a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102a6:	4826      	ldr	r0, [pc, #152]	; (8010340 <_svfiprintf_r+0x1f0>)
 80102a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80102ac:	2206      	movs	r2, #6
 80102ae:	f7ef ffc7 	bl	8000240 <memchr>
 80102b2:	2800      	cmp	r0, #0
 80102b4:	d038      	beq.n	8010328 <_svfiprintf_r+0x1d8>
 80102b6:	4b23      	ldr	r3, [pc, #140]	; (8010344 <_svfiprintf_r+0x1f4>)
 80102b8:	bb1b      	cbnz	r3, 8010302 <_svfiprintf_r+0x1b2>
 80102ba:	9b03      	ldr	r3, [sp, #12]
 80102bc:	3307      	adds	r3, #7
 80102be:	f023 0307 	bic.w	r3, r3, #7
 80102c2:	3308      	adds	r3, #8
 80102c4:	9303      	str	r3, [sp, #12]
 80102c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102c8:	4433      	add	r3, r6
 80102ca:	9309      	str	r3, [sp, #36]	; 0x24
 80102cc:	e767      	b.n	801019e <_svfiprintf_r+0x4e>
 80102ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80102d2:	460c      	mov	r4, r1
 80102d4:	2001      	movs	r0, #1
 80102d6:	e7a5      	b.n	8010224 <_svfiprintf_r+0xd4>
 80102d8:	2300      	movs	r3, #0
 80102da:	3401      	adds	r4, #1
 80102dc:	9305      	str	r3, [sp, #20]
 80102de:	4619      	mov	r1, r3
 80102e0:	f04f 0c0a 	mov.w	ip, #10
 80102e4:	4620      	mov	r0, r4
 80102e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102ea:	3a30      	subs	r2, #48	; 0x30
 80102ec:	2a09      	cmp	r2, #9
 80102ee:	d903      	bls.n	80102f8 <_svfiprintf_r+0x1a8>
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d0c5      	beq.n	8010280 <_svfiprintf_r+0x130>
 80102f4:	9105      	str	r1, [sp, #20]
 80102f6:	e7c3      	b.n	8010280 <_svfiprintf_r+0x130>
 80102f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80102fc:	4604      	mov	r4, r0
 80102fe:	2301      	movs	r3, #1
 8010300:	e7f0      	b.n	80102e4 <_svfiprintf_r+0x194>
 8010302:	ab03      	add	r3, sp, #12
 8010304:	9300      	str	r3, [sp, #0]
 8010306:	462a      	mov	r2, r5
 8010308:	4b0f      	ldr	r3, [pc, #60]	; (8010348 <_svfiprintf_r+0x1f8>)
 801030a:	a904      	add	r1, sp, #16
 801030c:	4638      	mov	r0, r7
 801030e:	f7fc f931 	bl	800c574 <_printf_float>
 8010312:	1c42      	adds	r2, r0, #1
 8010314:	4606      	mov	r6, r0
 8010316:	d1d6      	bne.n	80102c6 <_svfiprintf_r+0x176>
 8010318:	89ab      	ldrh	r3, [r5, #12]
 801031a:	065b      	lsls	r3, r3, #25
 801031c:	f53f af2c 	bmi.w	8010178 <_svfiprintf_r+0x28>
 8010320:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010322:	b01d      	add	sp, #116	; 0x74
 8010324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010328:	ab03      	add	r3, sp, #12
 801032a:	9300      	str	r3, [sp, #0]
 801032c:	462a      	mov	r2, r5
 801032e:	4b06      	ldr	r3, [pc, #24]	; (8010348 <_svfiprintf_r+0x1f8>)
 8010330:	a904      	add	r1, sp, #16
 8010332:	4638      	mov	r0, r7
 8010334:	f7fc fbc2 	bl	800cabc <_printf_i>
 8010338:	e7eb      	b.n	8010312 <_svfiprintf_r+0x1c2>
 801033a:	bf00      	nop
 801033c:	08012154 	.word	0x08012154
 8010340:	0801215e 	.word	0x0801215e
 8010344:	0800c575 	.word	0x0800c575
 8010348:	08010099 	.word	0x08010099
 801034c:	0801215a 	.word	0x0801215a

08010350 <__sfputc_r>:
 8010350:	6893      	ldr	r3, [r2, #8]
 8010352:	3b01      	subs	r3, #1
 8010354:	2b00      	cmp	r3, #0
 8010356:	b410      	push	{r4}
 8010358:	6093      	str	r3, [r2, #8]
 801035a:	da08      	bge.n	801036e <__sfputc_r+0x1e>
 801035c:	6994      	ldr	r4, [r2, #24]
 801035e:	42a3      	cmp	r3, r4
 8010360:	db01      	blt.n	8010366 <__sfputc_r+0x16>
 8010362:	290a      	cmp	r1, #10
 8010364:	d103      	bne.n	801036e <__sfputc_r+0x1e>
 8010366:	f85d 4b04 	ldr.w	r4, [sp], #4
 801036a:	f7fd bc3d 	b.w	800dbe8 <__swbuf_r>
 801036e:	6813      	ldr	r3, [r2, #0]
 8010370:	1c58      	adds	r0, r3, #1
 8010372:	6010      	str	r0, [r2, #0]
 8010374:	7019      	strb	r1, [r3, #0]
 8010376:	4608      	mov	r0, r1
 8010378:	f85d 4b04 	ldr.w	r4, [sp], #4
 801037c:	4770      	bx	lr

0801037e <__sfputs_r>:
 801037e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010380:	4606      	mov	r6, r0
 8010382:	460f      	mov	r7, r1
 8010384:	4614      	mov	r4, r2
 8010386:	18d5      	adds	r5, r2, r3
 8010388:	42ac      	cmp	r4, r5
 801038a:	d101      	bne.n	8010390 <__sfputs_r+0x12>
 801038c:	2000      	movs	r0, #0
 801038e:	e007      	b.n	80103a0 <__sfputs_r+0x22>
 8010390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010394:	463a      	mov	r2, r7
 8010396:	4630      	mov	r0, r6
 8010398:	f7ff ffda 	bl	8010350 <__sfputc_r>
 801039c:	1c43      	adds	r3, r0, #1
 801039e:	d1f3      	bne.n	8010388 <__sfputs_r+0xa>
 80103a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080103a4 <_vfiprintf_r>:
 80103a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103a8:	460d      	mov	r5, r1
 80103aa:	b09d      	sub	sp, #116	; 0x74
 80103ac:	4614      	mov	r4, r2
 80103ae:	4698      	mov	r8, r3
 80103b0:	4606      	mov	r6, r0
 80103b2:	b118      	cbz	r0, 80103bc <_vfiprintf_r+0x18>
 80103b4:	6983      	ldr	r3, [r0, #24]
 80103b6:	b90b      	cbnz	r3, 80103bc <_vfiprintf_r+0x18>
 80103b8:	f7fe fc68 	bl	800ec8c <__sinit>
 80103bc:	4b89      	ldr	r3, [pc, #548]	; (80105e4 <_vfiprintf_r+0x240>)
 80103be:	429d      	cmp	r5, r3
 80103c0:	d11b      	bne.n	80103fa <_vfiprintf_r+0x56>
 80103c2:	6875      	ldr	r5, [r6, #4]
 80103c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103c6:	07d9      	lsls	r1, r3, #31
 80103c8:	d405      	bmi.n	80103d6 <_vfiprintf_r+0x32>
 80103ca:	89ab      	ldrh	r3, [r5, #12]
 80103cc:	059a      	lsls	r2, r3, #22
 80103ce:	d402      	bmi.n	80103d6 <_vfiprintf_r+0x32>
 80103d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103d2:	f7ff f86c 	bl	800f4ae <__retarget_lock_acquire_recursive>
 80103d6:	89ab      	ldrh	r3, [r5, #12]
 80103d8:	071b      	lsls	r3, r3, #28
 80103da:	d501      	bpl.n	80103e0 <_vfiprintf_r+0x3c>
 80103dc:	692b      	ldr	r3, [r5, #16]
 80103de:	b9eb      	cbnz	r3, 801041c <_vfiprintf_r+0x78>
 80103e0:	4629      	mov	r1, r5
 80103e2:	4630      	mov	r0, r6
 80103e4:	f7fd fc52 	bl	800dc8c <__swsetup_r>
 80103e8:	b1c0      	cbz	r0, 801041c <_vfiprintf_r+0x78>
 80103ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103ec:	07dc      	lsls	r4, r3, #31
 80103ee:	d50e      	bpl.n	801040e <_vfiprintf_r+0x6a>
 80103f0:	f04f 30ff 	mov.w	r0, #4294967295
 80103f4:	b01d      	add	sp, #116	; 0x74
 80103f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103fa:	4b7b      	ldr	r3, [pc, #492]	; (80105e8 <_vfiprintf_r+0x244>)
 80103fc:	429d      	cmp	r5, r3
 80103fe:	d101      	bne.n	8010404 <_vfiprintf_r+0x60>
 8010400:	68b5      	ldr	r5, [r6, #8]
 8010402:	e7df      	b.n	80103c4 <_vfiprintf_r+0x20>
 8010404:	4b79      	ldr	r3, [pc, #484]	; (80105ec <_vfiprintf_r+0x248>)
 8010406:	429d      	cmp	r5, r3
 8010408:	bf08      	it	eq
 801040a:	68f5      	ldreq	r5, [r6, #12]
 801040c:	e7da      	b.n	80103c4 <_vfiprintf_r+0x20>
 801040e:	89ab      	ldrh	r3, [r5, #12]
 8010410:	0598      	lsls	r0, r3, #22
 8010412:	d4ed      	bmi.n	80103f0 <_vfiprintf_r+0x4c>
 8010414:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010416:	f7ff f84b 	bl	800f4b0 <__retarget_lock_release_recursive>
 801041a:	e7e9      	b.n	80103f0 <_vfiprintf_r+0x4c>
 801041c:	2300      	movs	r3, #0
 801041e:	9309      	str	r3, [sp, #36]	; 0x24
 8010420:	2320      	movs	r3, #32
 8010422:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010426:	f8cd 800c 	str.w	r8, [sp, #12]
 801042a:	2330      	movs	r3, #48	; 0x30
 801042c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80105f0 <_vfiprintf_r+0x24c>
 8010430:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010434:	f04f 0901 	mov.w	r9, #1
 8010438:	4623      	mov	r3, r4
 801043a:	469a      	mov	sl, r3
 801043c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010440:	b10a      	cbz	r2, 8010446 <_vfiprintf_r+0xa2>
 8010442:	2a25      	cmp	r2, #37	; 0x25
 8010444:	d1f9      	bne.n	801043a <_vfiprintf_r+0x96>
 8010446:	ebba 0b04 	subs.w	fp, sl, r4
 801044a:	d00b      	beq.n	8010464 <_vfiprintf_r+0xc0>
 801044c:	465b      	mov	r3, fp
 801044e:	4622      	mov	r2, r4
 8010450:	4629      	mov	r1, r5
 8010452:	4630      	mov	r0, r6
 8010454:	f7ff ff93 	bl	801037e <__sfputs_r>
 8010458:	3001      	adds	r0, #1
 801045a:	f000 80aa 	beq.w	80105b2 <_vfiprintf_r+0x20e>
 801045e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010460:	445a      	add	r2, fp
 8010462:	9209      	str	r2, [sp, #36]	; 0x24
 8010464:	f89a 3000 	ldrb.w	r3, [sl]
 8010468:	2b00      	cmp	r3, #0
 801046a:	f000 80a2 	beq.w	80105b2 <_vfiprintf_r+0x20e>
 801046e:	2300      	movs	r3, #0
 8010470:	f04f 32ff 	mov.w	r2, #4294967295
 8010474:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010478:	f10a 0a01 	add.w	sl, sl, #1
 801047c:	9304      	str	r3, [sp, #16]
 801047e:	9307      	str	r3, [sp, #28]
 8010480:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010484:	931a      	str	r3, [sp, #104]	; 0x68
 8010486:	4654      	mov	r4, sl
 8010488:	2205      	movs	r2, #5
 801048a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801048e:	4858      	ldr	r0, [pc, #352]	; (80105f0 <_vfiprintf_r+0x24c>)
 8010490:	f7ef fed6 	bl	8000240 <memchr>
 8010494:	9a04      	ldr	r2, [sp, #16]
 8010496:	b9d8      	cbnz	r0, 80104d0 <_vfiprintf_r+0x12c>
 8010498:	06d1      	lsls	r1, r2, #27
 801049a:	bf44      	itt	mi
 801049c:	2320      	movmi	r3, #32
 801049e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80104a2:	0713      	lsls	r3, r2, #28
 80104a4:	bf44      	itt	mi
 80104a6:	232b      	movmi	r3, #43	; 0x2b
 80104a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80104ac:	f89a 3000 	ldrb.w	r3, [sl]
 80104b0:	2b2a      	cmp	r3, #42	; 0x2a
 80104b2:	d015      	beq.n	80104e0 <_vfiprintf_r+0x13c>
 80104b4:	9a07      	ldr	r2, [sp, #28]
 80104b6:	4654      	mov	r4, sl
 80104b8:	2000      	movs	r0, #0
 80104ba:	f04f 0c0a 	mov.w	ip, #10
 80104be:	4621      	mov	r1, r4
 80104c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80104c4:	3b30      	subs	r3, #48	; 0x30
 80104c6:	2b09      	cmp	r3, #9
 80104c8:	d94e      	bls.n	8010568 <_vfiprintf_r+0x1c4>
 80104ca:	b1b0      	cbz	r0, 80104fa <_vfiprintf_r+0x156>
 80104cc:	9207      	str	r2, [sp, #28]
 80104ce:	e014      	b.n	80104fa <_vfiprintf_r+0x156>
 80104d0:	eba0 0308 	sub.w	r3, r0, r8
 80104d4:	fa09 f303 	lsl.w	r3, r9, r3
 80104d8:	4313      	orrs	r3, r2
 80104da:	9304      	str	r3, [sp, #16]
 80104dc:	46a2      	mov	sl, r4
 80104de:	e7d2      	b.n	8010486 <_vfiprintf_r+0xe2>
 80104e0:	9b03      	ldr	r3, [sp, #12]
 80104e2:	1d19      	adds	r1, r3, #4
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	9103      	str	r1, [sp, #12]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	bfbb      	ittet	lt
 80104ec:	425b      	neglt	r3, r3
 80104ee:	f042 0202 	orrlt.w	r2, r2, #2
 80104f2:	9307      	strge	r3, [sp, #28]
 80104f4:	9307      	strlt	r3, [sp, #28]
 80104f6:	bfb8      	it	lt
 80104f8:	9204      	strlt	r2, [sp, #16]
 80104fa:	7823      	ldrb	r3, [r4, #0]
 80104fc:	2b2e      	cmp	r3, #46	; 0x2e
 80104fe:	d10c      	bne.n	801051a <_vfiprintf_r+0x176>
 8010500:	7863      	ldrb	r3, [r4, #1]
 8010502:	2b2a      	cmp	r3, #42	; 0x2a
 8010504:	d135      	bne.n	8010572 <_vfiprintf_r+0x1ce>
 8010506:	9b03      	ldr	r3, [sp, #12]
 8010508:	1d1a      	adds	r2, r3, #4
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	9203      	str	r2, [sp, #12]
 801050e:	2b00      	cmp	r3, #0
 8010510:	bfb8      	it	lt
 8010512:	f04f 33ff 	movlt.w	r3, #4294967295
 8010516:	3402      	adds	r4, #2
 8010518:	9305      	str	r3, [sp, #20]
 801051a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010600 <_vfiprintf_r+0x25c>
 801051e:	7821      	ldrb	r1, [r4, #0]
 8010520:	2203      	movs	r2, #3
 8010522:	4650      	mov	r0, sl
 8010524:	f7ef fe8c 	bl	8000240 <memchr>
 8010528:	b140      	cbz	r0, 801053c <_vfiprintf_r+0x198>
 801052a:	2340      	movs	r3, #64	; 0x40
 801052c:	eba0 000a 	sub.w	r0, r0, sl
 8010530:	fa03 f000 	lsl.w	r0, r3, r0
 8010534:	9b04      	ldr	r3, [sp, #16]
 8010536:	4303      	orrs	r3, r0
 8010538:	3401      	adds	r4, #1
 801053a:	9304      	str	r3, [sp, #16]
 801053c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010540:	482c      	ldr	r0, [pc, #176]	; (80105f4 <_vfiprintf_r+0x250>)
 8010542:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010546:	2206      	movs	r2, #6
 8010548:	f7ef fe7a 	bl	8000240 <memchr>
 801054c:	2800      	cmp	r0, #0
 801054e:	d03f      	beq.n	80105d0 <_vfiprintf_r+0x22c>
 8010550:	4b29      	ldr	r3, [pc, #164]	; (80105f8 <_vfiprintf_r+0x254>)
 8010552:	bb1b      	cbnz	r3, 801059c <_vfiprintf_r+0x1f8>
 8010554:	9b03      	ldr	r3, [sp, #12]
 8010556:	3307      	adds	r3, #7
 8010558:	f023 0307 	bic.w	r3, r3, #7
 801055c:	3308      	adds	r3, #8
 801055e:	9303      	str	r3, [sp, #12]
 8010560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010562:	443b      	add	r3, r7
 8010564:	9309      	str	r3, [sp, #36]	; 0x24
 8010566:	e767      	b.n	8010438 <_vfiprintf_r+0x94>
 8010568:	fb0c 3202 	mla	r2, ip, r2, r3
 801056c:	460c      	mov	r4, r1
 801056e:	2001      	movs	r0, #1
 8010570:	e7a5      	b.n	80104be <_vfiprintf_r+0x11a>
 8010572:	2300      	movs	r3, #0
 8010574:	3401      	adds	r4, #1
 8010576:	9305      	str	r3, [sp, #20]
 8010578:	4619      	mov	r1, r3
 801057a:	f04f 0c0a 	mov.w	ip, #10
 801057e:	4620      	mov	r0, r4
 8010580:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010584:	3a30      	subs	r2, #48	; 0x30
 8010586:	2a09      	cmp	r2, #9
 8010588:	d903      	bls.n	8010592 <_vfiprintf_r+0x1ee>
 801058a:	2b00      	cmp	r3, #0
 801058c:	d0c5      	beq.n	801051a <_vfiprintf_r+0x176>
 801058e:	9105      	str	r1, [sp, #20]
 8010590:	e7c3      	b.n	801051a <_vfiprintf_r+0x176>
 8010592:	fb0c 2101 	mla	r1, ip, r1, r2
 8010596:	4604      	mov	r4, r0
 8010598:	2301      	movs	r3, #1
 801059a:	e7f0      	b.n	801057e <_vfiprintf_r+0x1da>
 801059c:	ab03      	add	r3, sp, #12
 801059e:	9300      	str	r3, [sp, #0]
 80105a0:	462a      	mov	r2, r5
 80105a2:	4b16      	ldr	r3, [pc, #88]	; (80105fc <_vfiprintf_r+0x258>)
 80105a4:	a904      	add	r1, sp, #16
 80105a6:	4630      	mov	r0, r6
 80105a8:	f7fb ffe4 	bl	800c574 <_printf_float>
 80105ac:	4607      	mov	r7, r0
 80105ae:	1c78      	adds	r0, r7, #1
 80105b0:	d1d6      	bne.n	8010560 <_vfiprintf_r+0x1bc>
 80105b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80105b4:	07d9      	lsls	r1, r3, #31
 80105b6:	d405      	bmi.n	80105c4 <_vfiprintf_r+0x220>
 80105b8:	89ab      	ldrh	r3, [r5, #12]
 80105ba:	059a      	lsls	r2, r3, #22
 80105bc:	d402      	bmi.n	80105c4 <_vfiprintf_r+0x220>
 80105be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80105c0:	f7fe ff76 	bl	800f4b0 <__retarget_lock_release_recursive>
 80105c4:	89ab      	ldrh	r3, [r5, #12]
 80105c6:	065b      	lsls	r3, r3, #25
 80105c8:	f53f af12 	bmi.w	80103f0 <_vfiprintf_r+0x4c>
 80105cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80105ce:	e711      	b.n	80103f4 <_vfiprintf_r+0x50>
 80105d0:	ab03      	add	r3, sp, #12
 80105d2:	9300      	str	r3, [sp, #0]
 80105d4:	462a      	mov	r2, r5
 80105d6:	4b09      	ldr	r3, [pc, #36]	; (80105fc <_vfiprintf_r+0x258>)
 80105d8:	a904      	add	r1, sp, #16
 80105da:	4630      	mov	r0, r6
 80105dc:	f7fc fa6e 	bl	800cabc <_printf_i>
 80105e0:	e7e4      	b.n	80105ac <_vfiprintf_r+0x208>
 80105e2:	bf00      	nop
 80105e4:	08011f38 	.word	0x08011f38
 80105e8:	08011f58 	.word	0x08011f58
 80105ec:	08011f18 	.word	0x08011f18
 80105f0:	08012154 	.word	0x08012154
 80105f4:	0801215e 	.word	0x0801215e
 80105f8:	0800c575 	.word	0x0800c575
 80105fc:	0801037f 	.word	0x0801037f
 8010600:	0801215a 	.word	0x0801215a
 8010604:	00000000 	.word	0x00000000

08010608 <nan>:
 8010608:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010610 <nan+0x8>
 801060c:	4770      	bx	lr
 801060e:	bf00      	nop
 8010610:	00000000 	.word	0x00000000
 8010614:	7ff80000 	.word	0x7ff80000

08010618 <_sbrk_r>:
 8010618:	b538      	push	{r3, r4, r5, lr}
 801061a:	4d06      	ldr	r5, [pc, #24]	; (8010634 <_sbrk_r+0x1c>)
 801061c:	2300      	movs	r3, #0
 801061e:	4604      	mov	r4, r0
 8010620:	4608      	mov	r0, r1
 8010622:	602b      	str	r3, [r5, #0]
 8010624:	f7f5 ff90 	bl	8006548 <_sbrk>
 8010628:	1c43      	adds	r3, r0, #1
 801062a:	d102      	bne.n	8010632 <_sbrk_r+0x1a>
 801062c:	682b      	ldr	r3, [r5, #0]
 801062e:	b103      	cbz	r3, 8010632 <_sbrk_r+0x1a>
 8010630:	6023      	str	r3, [r4, #0]
 8010632:	bd38      	pop	{r3, r4, r5, pc}
 8010634:	2000aa6c 	.word	0x2000aa6c

08010638 <__sread>:
 8010638:	b510      	push	{r4, lr}
 801063a:	460c      	mov	r4, r1
 801063c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010640:	f000 f92e 	bl	80108a0 <_read_r>
 8010644:	2800      	cmp	r0, #0
 8010646:	bfab      	itete	ge
 8010648:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801064a:	89a3      	ldrhlt	r3, [r4, #12]
 801064c:	181b      	addge	r3, r3, r0
 801064e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010652:	bfac      	ite	ge
 8010654:	6563      	strge	r3, [r4, #84]	; 0x54
 8010656:	81a3      	strhlt	r3, [r4, #12]
 8010658:	bd10      	pop	{r4, pc}

0801065a <__swrite>:
 801065a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801065e:	461f      	mov	r7, r3
 8010660:	898b      	ldrh	r3, [r1, #12]
 8010662:	05db      	lsls	r3, r3, #23
 8010664:	4605      	mov	r5, r0
 8010666:	460c      	mov	r4, r1
 8010668:	4616      	mov	r6, r2
 801066a:	d505      	bpl.n	8010678 <__swrite+0x1e>
 801066c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010670:	2302      	movs	r3, #2
 8010672:	2200      	movs	r2, #0
 8010674:	f000 f8b6 	bl	80107e4 <_lseek_r>
 8010678:	89a3      	ldrh	r3, [r4, #12]
 801067a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801067e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010682:	81a3      	strh	r3, [r4, #12]
 8010684:	4632      	mov	r2, r6
 8010686:	463b      	mov	r3, r7
 8010688:	4628      	mov	r0, r5
 801068a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801068e:	f000 b835 	b.w	80106fc <_write_r>

08010692 <__sseek>:
 8010692:	b510      	push	{r4, lr}
 8010694:	460c      	mov	r4, r1
 8010696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801069a:	f000 f8a3 	bl	80107e4 <_lseek_r>
 801069e:	1c43      	adds	r3, r0, #1
 80106a0:	89a3      	ldrh	r3, [r4, #12]
 80106a2:	bf15      	itete	ne
 80106a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80106a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80106aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80106ae:	81a3      	strheq	r3, [r4, #12]
 80106b0:	bf18      	it	ne
 80106b2:	81a3      	strhne	r3, [r4, #12]
 80106b4:	bd10      	pop	{r4, pc}

080106b6 <__sclose>:
 80106b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106ba:	f000 b84f 	b.w	801075c <_close_r>

080106be <strncmp>:
 80106be:	b510      	push	{r4, lr}
 80106c0:	b16a      	cbz	r2, 80106de <strncmp+0x20>
 80106c2:	3901      	subs	r1, #1
 80106c4:	1884      	adds	r4, r0, r2
 80106c6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80106ca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80106ce:	4293      	cmp	r3, r2
 80106d0:	d103      	bne.n	80106da <strncmp+0x1c>
 80106d2:	42a0      	cmp	r0, r4
 80106d4:	d001      	beq.n	80106da <strncmp+0x1c>
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d1f5      	bne.n	80106c6 <strncmp+0x8>
 80106da:	1a98      	subs	r0, r3, r2
 80106dc:	bd10      	pop	{r4, pc}
 80106de:	4610      	mov	r0, r2
 80106e0:	e7fc      	b.n	80106dc <strncmp+0x1e>

080106e2 <__ascii_wctomb>:
 80106e2:	b149      	cbz	r1, 80106f8 <__ascii_wctomb+0x16>
 80106e4:	2aff      	cmp	r2, #255	; 0xff
 80106e6:	bf85      	ittet	hi
 80106e8:	238a      	movhi	r3, #138	; 0x8a
 80106ea:	6003      	strhi	r3, [r0, #0]
 80106ec:	700a      	strbls	r2, [r1, #0]
 80106ee:	f04f 30ff 	movhi.w	r0, #4294967295
 80106f2:	bf98      	it	ls
 80106f4:	2001      	movls	r0, #1
 80106f6:	4770      	bx	lr
 80106f8:	4608      	mov	r0, r1
 80106fa:	4770      	bx	lr

080106fc <_write_r>:
 80106fc:	b538      	push	{r3, r4, r5, lr}
 80106fe:	4d07      	ldr	r5, [pc, #28]	; (801071c <_write_r+0x20>)
 8010700:	4604      	mov	r4, r0
 8010702:	4608      	mov	r0, r1
 8010704:	4611      	mov	r1, r2
 8010706:	2200      	movs	r2, #0
 8010708:	602a      	str	r2, [r5, #0]
 801070a:	461a      	mov	r2, r3
 801070c:	f7f5 fecb 	bl	80064a6 <_write>
 8010710:	1c43      	adds	r3, r0, #1
 8010712:	d102      	bne.n	801071a <_write_r+0x1e>
 8010714:	682b      	ldr	r3, [r5, #0]
 8010716:	b103      	cbz	r3, 801071a <_write_r+0x1e>
 8010718:	6023      	str	r3, [r4, #0]
 801071a:	bd38      	pop	{r3, r4, r5, pc}
 801071c:	2000aa6c 	.word	0x2000aa6c

08010720 <__assert_func>:
 8010720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010722:	4614      	mov	r4, r2
 8010724:	461a      	mov	r2, r3
 8010726:	4b09      	ldr	r3, [pc, #36]	; (801074c <__assert_func+0x2c>)
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	4605      	mov	r5, r0
 801072c:	68d8      	ldr	r0, [r3, #12]
 801072e:	b14c      	cbz	r4, 8010744 <__assert_func+0x24>
 8010730:	4b07      	ldr	r3, [pc, #28]	; (8010750 <__assert_func+0x30>)
 8010732:	9100      	str	r1, [sp, #0]
 8010734:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010738:	4906      	ldr	r1, [pc, #24]	; (8010754 <__assert_func+0x34>)
 801073a:	462b      	mov	r3, r5
 801073c:	f000 f81e 	bl	801077c <fiprintf>
 8010740:	f000 f8c0 	bl	80108c4 <abort>
 8010744:	4b04      	ldr	r3, [pc, #16]	; (8010758 <__assert_func+0x38>)
 8010746:	461c      	mov	r4, r3
 8010748:	e7f3      	b.n	8010732 <__assert_func+0x12>
 801074a:	bf00      	nop
 801074c:	2000004c 	.word	0x2000004c
 8010750:	08012165 	.word	0x08012165
 8010754:	08012172 	.word	0x08012172
 8010758:	080121a0 	.word	0x080121a0

0801075c <_close_r>:
 801075c:	b538      	push	{r3, r4, r5, lr}
 801075e:	4d06      	ldr	r5, [pc, #24]	; (8010778 <_close_r+0x1c>)
 8010760:	2300      	movs	r3, #0
 8010762:	4604      	mov	r4, r0
 8010764:	4608      	mov	r0, r1
 8010766:	602b      	str	r3, [r5, #0]
 8010768:	f7f5 feb9 	bl	80064de <_close>
 801076c:	1c43      	adds	r3, r0, #1
 801076e:	d102      	bne.n	8010776 <_close_r+0x1a>
 8010770:	682b      	ldr	r3, [r5, #0]
 8010772:	b103      	cbz	r3, 8010776 <_close_r+0x1a>
 8010774:	6023      	str	r3, [r4, #0]
 8010776:	bd38      	pop	{r3, r4, r5, pc}
 8010778:	2000aa6c 	.word	0x2000aa6c

0801077c <fiprintf>:
 801077c:	b40e      	push	{r1, r2, r3}
 801077e:	b503      	push	{r0, r1, lr}
 8010780:	4601      	mov	r1, r0
 8010782:	ab03      	add	r3, sp, #12
 8010784:	4805      	ldr	r0, [pc, #20]	; (801079c <fiprintf+0x20>)
 8010786:	f853 2b04 	ldr.w	r2, [r3], #4
 801078a:	6800      	ldr	r0, [r0, #0]
 801078c:	9301      	str	r3, [sp, #4]
 801078e:	f7ff fe09 	bl	80103a4 <_vfiprintf_r>
 8010792:	b002      	add	sp, #8
 8010794:	f85d eb04 	ldr.w	lr, [sp], #4
 8010798:	b003      	add	sp, #12
 801079a:	4770      	bx	lr
 801079c:	2000004c 	.word	0x2000004c

080107a0 <_fstat_r>:
 80107a0:	b538      	push	{r3, r4, r5, lr}
 80107a2:	4d07      	ldr	r5, [pc, #28]	; (80107c0 <_fstat_r+0x20>)
 80107a4:	2300      	movs	r3, #0
 80107a6:	4604      	mov	r4, r0
 80107a8:	4608      	mov	r0, r1
 80107aa:	4611      	mov	r1, r2
 80107ac:	602b      	str	r3, [r5, #0]
 80107ae:	f7f5 fea2 	bl	80064f6 <_fstat>
 80107b2:	1c43      	adds	r3, r0, #1
 80107b4:	d102      	bne.n	80107bc <_fstat_r+0x1c>
 80107b6:	682b      	ldr	r3, [r5, #0]
 80107b8:	b103      	cbz	r3, 80107bc <_fstat_r+0x1c>
 80107ba:	6023      	str	r3, [r4, #0]
 80107bc:	bd38      	pop	{r3, r4, r5, pc}
 80107be:	bf00      	nop
 80107c0:	2000aa6c 	.word	0x2000aa6c

080107c4 <_isatty_r>:
 80107c4:	b538      	push	{r3, r4, r5, lr}
 80107c6:	4d06      	ldr	r5, [pc, #24]	; (80107e0 <_isatty_r+0x1c>)
 80107c8:	2300      	movs	r3, #0
 80107ca:	4604      	mov	r4, r0
 80107cc:	4608      	mov	r0, r1
 80107ce:	602b      	str	r3, [r5, #0]
 80107d0:	f7f5 fea1 	bl	8006516 <_isatty>
 80107d4:	1c43      	adds	r3, r0, #1
 80107d6:	d102      	bne.n	80107de <_isatty_r+0x1a>
 80107d8:	682b      	ldr	r3, [r5, #0]
 80107da:	b103      	cbz	r3, 80107de <_isatty_r+0x1a>
 80107dc:	6023      	str	r3, [r4, #0]
 80107de:	bd38      	pop	{r3, r4, r5, pc}
 80107e0:	2000aa6c 	.word	0x2000aa6c

080107e4 <_lseek_r>:
 80107e4:	b538      	push	{r3, r4, r5, lr}
 80107e6:	4d07      	ldr	r5, [pc, #28]	; (8010804 <_lseek_r+0x20>)
 80107e8:	4604      	mov	r4, r0
 80107ea:	4608      	mov	r0, r1
 80107ec:	4611      	mov	r1, r2
 80107ee:	2200      	movs	r2, #0
 80107f0:	602a      	str	r2, [r5, #0]
 80107f2:	461a      	mov	r2, r3
 80107f4:	f7f5 fe9a 	bl	800652c <_lseek>
 80107f8:	1c43      	adds	r3, r0, #1
 80107fa:	d102      	bne.n	8010802 <_lseek_r+0x1e>
 80107fc:	682b      	ldr	r3, [r5, #0]
 80107fe:	b103      	cbz	r3, 8010802 <_lseek_r+0x1e>
 8010800:	6023      	str	r3, [r4, #0]
 8010802:	bd38      	pop	{r3, r4, r5, pc}
 8010804:	2000aa6c 	.word	0x2000aa6c

08010808 <memmove>:
 8010808:	4288      	cmp	r0, r1
 801080a:	b510      	push	{r4, lr}
 801080c:	eb01 0402 	add.w	r4, r1, r2
 8010810:	d902      	bls.n	8010818 <memmove+0x10>
 8010812:	4284      	cmp	r4, r0
 8010814:	4623      	mov	r3, r4
 8010816:	d807      	bhi.n	8010828 <memmove+0x20>
 8010818:	1e43      	subs	r3, r0, #1
 801081a:	42a1      	cmp	r1, r4
 801081c:	d008      	beq.n	8010830 <memmove+0x28>
 801081e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010822:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010826:	e7f8      	b.n	801081a <memmove+0x12>
 8010828:	4402      	add	r2, r0
 801082a:	4601      	mov	r1, r0
 801082c:	428a      	cmp	r2, r1
 801082e:	d100      	bne.n	8010832 <memmove+0x2a>
 8010830:	bd10      	pop	{r4, pc}
 8010832:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010836:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801083a:	e7f7      	b.n	801082c <memmove+0x24>

0801083c <__malloc_lock>:
 801083c:	4801      	ldr	r0, [pc, #4]	; (8010844 <__malloc_lock+0x8>)
 801083e:	f7fe be36 	b.w	800f4ae <__retarget_lock_acquire_recursive>
 8010842:	bf00      	nop
 8010844:	2000aa64 	.word	0x2000aa64

08010848 <__malloc_unlock>:
 8010848:	4801      	ldr	r0, [pc, #4]	; (8010850 <__malloc_unlock+0x8>)
 801084a:	f7fe be31 	b.w	800f4b0 <__retarget_lock_release_recursive>
 801084e:	bf00      	nop
 8010850:	2000aa64 	.word	0x2000aa64

08010854 <_realloc_r>:
 8010854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010856:	4607      	mov	r7, r0
 8010858:	4614      	mov	r4, r2
 801085a:	460e      	mov	r6, r1
 801085c:	b921      	cbnz	r1, 8010868 <_realloc_r+0x14>
 801085e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010862:	4611      	mov	r1, r2
 8010864:	f7ff bbbe 	b.w	800ffe4 <_malloc_r>
 8010868:	b922      	cbnz	r2, 8010874 <_realloc_r+0x20>
 801086a:	f7ff fb6b 	bl	800ff44 <_free_r>
 801086e:	4625      	mov	r5, r4
 8010870:	4628      	mov	r0, r5
 8010872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010874:	f000 f82d 	bl	80108d2 <_malloc_usable_size_r>
 8010878:	42a0      	cmp	r0, r4
 801087a:	d20f      	bcs.n	801089c <_realloc_r+0x48>
 801087c:	4621      	mov	r1, r4
 801087e:	4638      	mov	r0, r7
 8010880:	f7ff fbb0 	bl	800ffe4 <_malloc_r>
 8010884:	4605      	mov	r5, r0
 8010886:	2800      	cmp	r0, #0
 8010888:	d0f2      	beq.n	8010870 <_realloc_r+0x1c>
 801088a:	4631      	mov	r1, r6
 801088c:	4622      	mov	r2, r4
 801088e:	f7fb fdbb 	bl	800c408 <memcpy>
 8010892:	4631      	mov	r1, r6
 8010894:	4638      	mov	r0, r7
 8010896:	f7ff fb55 	bl	800ff44 <_free_r>
 801089a:	e7e9      	b.n	8010870 <_realloc_r+0x1c>
 801089c:	4635      	mov	r5, r6
 801089e:	e7e7      	b.n	8010870 <_realloc_r+0x1c>

080108a0 <_read_r>:
 80108a0:	b538      	push	{r3, r4, r5, lr}
 80108a2:	4d07      	ldr	r5, [pc, #28]	; (80108c0 <_read_r+0x20>)
 80108a4:	4604      	mov	r4, r0
 80108a6:	4608      	mov	r0, r1
 80108a8:	4611      	mov	r1, r2
 80108aa:	2200      	movs	r2, #0
 80108ac:	602a      	str	r2, [r5, #0]
 80108ae:	461a      	mov	r2, r3
 80108b0:	f7f5 fddc 	bl	800646c <_read>
 80108b4:	1c43      	adds	r3, r0, #1
 80108b6:	d102      	bne.n	80108be <_read_r+0x1e>
 80108b8:	682b      	ldr	r3, [r5, #0]
 80108ba:	b103      	cbz	r3, 80108be <_read_r+0x1e>
 80108bc:	6023      	str	r3, [r4, #0]
 80108be:	bd38      	pop	{r3, r4, r5, pc}
 80108c0:	2000aa6c 	.word	0x2000aa6c

080108c4 <abort>:
 80108c4:	b508      	push	{r3, lr}
 80108c6:	2006      	movs	r0, #6
 80108c8:	f000 f834 	bl	8010934 <raise>
 80108cc:	2001      	movs	r0, #1
 80108ce:	f7f5 fdc3 	bl	8006458 <_exit>

080108d2 <_malloc_usable_size_r>:
 80108d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108d6:	1f18      	subs	r0, r3, #4
 80108d8:	2b00      	cmp	r3, #0
 80108da:	bfbc      	itt	lt
 80108dc:	580b      	ldrlt	r3, [r1, r0]
 80108de:	18c0      	addlt	r0, r0, r3
 80108e0:	4770      	bx	lr

080108e2 <_raise_r>:
 80108e2:	291f      	cmp	r1, #31
 80108e4:	b538      	push	{r3, r4, r5, lr}
 80108e6:	4604      	mov	r4, r0
 80108e8:	460d      	mov	r5, r1
 80108ea:	d904      	bls.n	80108f6 <_raise_r+0x14>
 80108ec:	2316      	movs	r3, #22
 80108ee:	6003      	str	r3, [r0, #0]
 80108f0:	f04f 30ff 	mov.w	r0, #4294967295
 80108f4:	bd38      	pop	{r3, r4, r5, pc}
 80108f6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80108f8:	b112      	cbz	r2, 8010900 <_raise_r+0x1e>
 80108fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80108fe:	b94b      	cbnz	r3, 8010914 <_raise_r+0x32>
 8010900:	4620      	mov	r0, r4
 8010902:	f000 f831 	bl	8010968 <_getpid_r>
 8010906:	462a      	mov	r2, r5
 8010908:	4601      	mov	r1, r0
 801090a:	4620      	mov	r0, r4
 801090c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010910:	f000 b818 	b.w	8010944 <_kill_r>
 8010914:	2b01      	cmp	r3, #1
 8010916:	d00a      	beq.n	801092e <_raise_r+0x4c>
 8010918:	1c59      	adds	r1, r3, #1
 801091a:	d103      	bne.n	8010924 <_raise_r+0x42>
 801091c:	2316      	movs	r3, #22
 801091e:	6003      	str	r3, [r0, #0]
 8010920:	2001      	movs	r0, #1
 8010922:	e7e7      	b.n	80108f4 <_raise_r+0x12>
 8010924:	2400      	movs	r4, #0
 8010926:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801092a:	4628      	mov	r0, r5
 801092c:	4798      	blx	r3
 801092e:	2000      	movs	r0, #0
 8010930:	e7e0      	b.n	80108f4 <_raise_r+0x12>
	...

08010934 <raise>:
 8010934:	4b02      	ldr	r3, [pc, #8]	; (8010940 <raise+0xc>)
 8010936:	4601      	mov	r1, r0
 8010938:	6818      	ldr	r0, [r3, #0]
 801093a:	f7ff bfd2 	b.w	80108e2 <_raise_r>
 801093e:	bf00      	nop
 8010940:	2000004c 	.word	0x2000004c

08010944 <_kill_r>:
 8010944:	b538      	push	{r3, r4, r5, lr}
 8010946:	4d07      	ldr	r5, [pc, #28]	; (8010964 <_kill_r+0x20>)
 8010948:	2300      	movs	r3, #0
 801094a:	4604      	mov	r4, r0
 801094c:	4608      	mov	r0, r1
 801094e:	4611      	mov	r1, r2
 8010950:	602b      	str	r3, [r5, #0]
 8010952:	f7f5 fd71 	bl	8006438 <_kill>
 8010956:	1c43      	adds	r3, r0, #1
 8010958:	d102      	bne.n	8010960 <_kill_r+0x1c>
 801095a:	682b      	ldr	r3, [r5, #0]
 801095c:	b103      	cbz	r3, 8010960 <_kill_r+0x1c>
 801095e:	6023      	str	r3, [r4, #0]
 8010960:	bd38      	pop	{r3, r4, r5, pc}
 8010962:	bf00      	nop
 8010964:	2000aa6c 	.word	0x2000aa6c

08010968 <_getpid_r>:
 8010968:	f7f5 bd5e 	b.w	8006428 <_getpid>

0801096c <_init>:
 801096c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801096e:	bf00      	nop
 8010970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010972:	bc08      	pop	{r3}
 8010974:	469e      	mov	lr, r3
 8010976:	4770      	bx	lr

08010978 <_fini>:
 8010978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801097a:	bf00      	nop
 801097c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801097e:	bc08      	pop	{r3}
 8010980:	469e      	mov	lr, r3
 8010982:	4770      	bx	lr
