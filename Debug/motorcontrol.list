
motorcontrol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ffc4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000183c  08010198  08010198  00020198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080119d4  080119d4  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  080119d4  080119d4  000219d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080119dc  080119dc  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080119dc  080119dc  000219dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080119e0  080119e0  000219e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  080119e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009388  20000220  08011c04  00030220  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200095a8  08011c04  000395a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025c2d  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cbe  00000000  00000000  00055e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a8  00000000  00000000  0005ab40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b8  00000000  00000000  0005c2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029484  00000000  00000000  0005d8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001efd6  00000000  00000000  00086d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e74df  00000000  00000000  000a5cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018d1d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000781c  00000000  00000000  0018d22c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801017c 	.word	0x0801017c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	0801017c 	.word	0x0801017c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800104a:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <MX_ADC1_Init+0xc8>)
 800104c:	4a2a      	ldr	r2, [pc, #168]	; (80010f8 <MX_ADC1_Init+0xcc>)
 800104e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001050:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <MX_ADC1_Init+0xc8>)
 8001052:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001056:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001058:	4b26      	ldr	r3, [pc, #152]	; (80010f4 <MX_ADC1_Init+0xc8>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800105e:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <MX_ADC1_Init+0xc8>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001064:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <MX_ADC1_Init+0xc8>)
 8001066:	2200      	movs	r2, #0
 8001068:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800106a:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <MX_ADC1_Init+0xc8>)
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001072:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <MX_ADC1_Init+0xc8>)
 8001074:	2200      	movs	r2, #0
 8001076:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001078:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <MX_ADC1_Init+0xc8>)
 800107a:	4a20      	ldr	r2, [pc, #128]	; (80010fc <MX_ADC1_Init+0xd0>)
 800107c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107e:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <MX_ADC1_Init+0xc8>)
 8001080:	2200      	movs	r2, #0
 8001082:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001084:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <MX_ADC1_Init+0xc8>)
 8001086:	2201      	movs	r2, #1
 8001088:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <MX_ADC1_Init+0xc8>)
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <MX_ADC1_Init+0xc8>)
 8001094:	2201      	movs	r2, #1
 8001096:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001098:	4816      	ldr	r0, [pc, #88]	; (80010f4 <MX_ADC1_Init+0xc8>)
 800109a:	f005 fe6f 	bl	8006d7c <HAL_ADC_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80010a4:	f004 f9ca 	bl	800543c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 80010a8:	2316      	movs	r3, #22
 80010aa:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4619      	mov	r1, r3
 80010ba:	480e      	ldr	r0, [pc, #56]	; (80010f4 <MX_ADC1_Init+0xc8>)
 80010bc:	f006 fa3a 	bl	8007534 <HAL_ADCEx_MultiModeConfigChannel>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80010c6:	f004 f9b9 	bl	800543c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010ca:	230a      	movs	r3, #10
 80010cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 80010ce:	2301      	movs	r3, #1
 80010d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	4619      	mov	r1, r3
 80010da:	4806      	ldr	r0, [pc, #24]	; (80010f4 <MX_ADC1_Init+0xc8>)
 80010dc:	f005 fffc 	bl	80070d8 <HAL_ADC_ConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80010e6:	f004 f9a9 	bl	800543c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	3720      	adds	r7, #32
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200002a4 	.word	0x200002a4
 80010f8:	40012000 	.word	0x40012000
 80010fc:	0f000001 	.word	0x0f000001

08001100 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001106:	463b      	mov	r3, r7
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001112:	4b1e      	ldr	r3, [pc, #120]	; (800118c <MX_ADC2_Init+0x8c>)
 8001114:	4a1e      	ldr	r2, [pc, #120]	; (8001190 <MX_ADC2_Init+0x90>)
 8001116:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <MX_ADC2_Init+0x8c>)
 800111a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800111e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001120:	4b1a      	ldr	r3, [pc, #104]	; (800118c <MX_ADC2_Init+0x8c>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <MX_ADC2_Init+0x8c>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <MX_ADC2_Init+0x8c>)
 800112e:	2200      	movs	r2, #0
 8001130:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001132:	4b16      	ldr	r3, [pc, #88]	; (800118c <MX_ADC2_Init+0x8c>)
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <MX_ADC2_Init+0x8c>)
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <MX_ADC2_Init+0x8c>)
 8001142:	2201      	movs	r2, #1
 8001144:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_ADC2_Init+0x8c>)
 8001148:	2200      	movs	r2, #0
 800114a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800114e:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MX_ADC2_Init+0x8c>)
 8001150:	2201      	movs	r2, #1
 8001152:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001154:	480d      	ldr	r0, [pc, #52]	; (800118c <MX_ADC2_Init+0x8c>)
 8001156:	f005 fe11 	bl	8006d7c <HAL_ADC_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 8001160:	f004 f96c 	bl	800543c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001164:	230b      	movs	r3, #11
 8001166:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001168:	2301      	movs	r3, #1
 800116a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800116c:	2300      	movs	r3, #0
 800116e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001170:	463b      	mov	r3, r7
 8001172:	4619      	mov	r1, r3
 8001174:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_ADC2_Init+0x8c>)
 8001176:	f005 ffaf 	bl	80070d8 <HAL_ADC_ConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8001180:	f004 f95c 	bl	800543c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	2000025c 	.word	0x2000025c
 8001190:	40012100 	.word	0x40012100

08001194 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800119a:	463b      	mov	r3, r7
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80011a6:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <MX_ADC3_Init+0x8c>)
 80011a8:	4a1e      	ldr	r2, [pc, #120]	; (8001224 <MX_ADC3_Init+0x90>)
 80011aa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011ac:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <MX_ADC3_Init+0x8c>)
 80011ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011b2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011b4:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <MX_ADC3_Init+0x8c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80011ba:	4b19      	ldr	r3, [pc, #100]	; (8001220 <MX_ADC3_Init+0x8c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011c0:	4b17      	ldr	r3, [pc, #92]	; (8001220 <MX_ADC3_Init+0x8c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <MX_ADC3_Init+0x8c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <MX_ADC3_Init+0x8c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <MX_ADC3_Init+0x8c>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_ADC3_Init+0x8c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_ADC3_Init+0x8c>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011e8:	480d      	ldr	r0, [pc, #52]	; (8001220 <MX_ADC3_Init+0x8c>)
 80011ea:	f005 fdc7 	bl	8006d7c <HAL_ADC_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_ADC3_Init+0x64>
  {
    Error_Handler();
 80011f4:	f004 f922 	bl	800543c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011fc:	2301      	movs	r3, #1
 80011fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001204:	463b      	mov	r3, r7
 8001206:	4619      	mov	r1, r3
 8001208:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_ADC3_Init+0x8c>)
 800120a:	f005 ff65 	bl	80070d8 <HAL_ADC_ConfigChannel>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8001214:	f004 f912 	bl	800543c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200002ec 	.word	0x200002ec
 8001224:	40012200 	.word	0x40012200

08001228 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08e      	sub	sp, #56	; 0x38
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a45      	ldr	r2, [pc, #276]	; (800135c <HAL_ADC_MspInit+0x134>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d128      	bne.n	800129c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	623b      	str	r3, [r7, #32]
 800124e:	4b44      	ldr	r3, [pc, #272]	; (8001360 <HAL_ADC_MspInit+0x138>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	4a43      	ldr	r2, [pc, #268]	; (8001360 <HAL_ADC_MspInit+0x138>)
 8001254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001258:	6453      	str	r3, [r2, #68]	; 0x44
 800125a:	4b41      	ldr	r3, [pc, #260]	; (8001360 <HAL_ADC_MspInit+0x138>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001262:	623b      	str	r3, [r7, #32]
 8001264:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
 800126a:	4b3d      	ldr	r3, [pc, #244]	; (8001360 <HAL_ADC_MspInit+0x138>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a3c      	ldr	r2, [pc, #240]	; (8001360 <HAL_ADC_MspInit+0x138>)
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b3a      	ldr	r3, [pc, #232]	; (8001360 <HAL_ADC_MspInit+0x138>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001282:	2301      	movs	r3, #1
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001286:	2303      	movs	r3, #3
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001292:	4619      	mov	r1, r3
 8001294:	4833      	ldr	r0, [pc, #204]	; (8001364 <HAL_ADC_MspInit+0x13c>)
 8001296:	f007 f97d 	bl	8008594 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800129a:	e05a      	b.n	8001352 <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC2)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a31      	ldr	r2, [pc, #196]	; (8001368 <HAL_ADC_MspInit+0x140>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d128      	bne.n	80012f8 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
 80012aa:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <HAL_ADC_MspInit+0x138>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	4a2c      	ldr	r2, [pc, #176]	; (8001360 <HAL_ADC_MspInit+0x138>)
 80012b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012b4:	6453      	str	r3, [r2, #68]	; 0x44
 80012b6:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <HAL_ADC_MspInit+0x138>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012be:	61bb      	str	r3, [r7, #24]
 80012c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	4b26      	ldr	r3, [pc, #152]	; (8001360 <HAL_ADC_MspInit+0x138>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a25      	ldr	r2, [pc, #148]	; (8001360 <HAL_ADC_MspInit+0x138>)
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b23      	ldr	r3, [pc, #140]	; (8001360 <HAL_ADC_MspInit+0x138>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012de:	2302      	movs	r3, #2
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e2:	2303      	movs	r3, #3
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ee:	4619      	mov	r1, r3
 80012f0:	481c      	ldr	r0, [pc, #112]	; (8001364 <HAL_ADC_MspInit+0x13c>)
 80012f2:	f007 f94f 	bl	8008594 <HAL_GPIO_Init>
}
 80012f6:	e02c      	b.n	8001352 <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC3)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a1b      	ldr	r2, [pc, #108]	; (800136c <HAL_ADC_MspInit+0x144>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d127      	bne.n	8001352 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_ADC_MspInit+0x138>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	4a15      	ldr	r2, [pc, #84]	; (8001360 <HAL_ADC_MspInit+0x138>)
 800130c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001310:	6453      	str	r3, [r2, #68]	; 0x44
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <HAL_ADC_MspInit+0x138>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <HAL_ADC_MspInit+0x138>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a0e      	ldr	r2, [pc, #56]	; (8001360 <HAL_ADC_MspInit+0x138>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <HAL_ADC_MspInit+0x138>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800133a:	2301      	movs	r3, #1
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133e:	2303      	movs	r3, #3
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134a:	4619      	mov	r1, r3
 800134c:	4808      	ldr	r0, [pc, #32]	; (8001370 <HAL_ADC_MspInit+0x148>)
 800134e:	f007 f921 	bl	8008594 <HAL_GPIO_Init>
}
 8001352:	bf00      	nop
 8001354:	3738      	adds	r7, #56	; 0x38
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40012000 	.word	0x40012000
 8001360:	40023800 	.word	0x40023800
 8001364:	40020800 	.word	0x40020800
 8001368:	40012100 	.word	0x40012100
 800136c:	40012200 	.word	0x40012200
 8001370:	40020000 	.word	0x40020000

08001374 <order_phases>:
#include <stdio.h>
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001374:	b5b0      	push	{r4, r5, r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af02      	add	r7, sp, #8
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
 8001380:	603b      	str	r3, [r7, #0]
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 8001382:	4b76      	ldr	r3, [pc, #472]	; (800155c <order_phases+0x1e8>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]

	if(!cal->started){
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	7c1b      	ldrb	r3, [r3, #16]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d108      	bne.n	80013a2 <order_phases+0x2e>
		printf("Checking phase sign, pole pairs\r\n");
 8001390:	4873      	ldr	r0, [pc, #460]	; (8001560 <order_phases+0x1ec>)
 8001392:	f00b fb0b 	bl	800c9ac <puts>
		cal->started = 1;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	60da      	str	r2, [r3, #12]
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	ee07 3a90 	vmov	s15, r3
 80013ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b2:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001564 <order_phases+0x1f0>
 80013b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	edd3 7a05 	vldr	s15, [r3, #20]
 80013c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d2:	d528      	bpl.n	8001426 <order_phases+0xb2>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80013e6:	3388      	adds	r3, #136	; 0x88
 80013e8:	601a      	str	r2, [r3, #0]
        cal->cal_position.elec_velocity = 0;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80013f0:	3390      	adds	r3, #144	; 0x90
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
        controller->i_d_des = I_CAL;
 80013f8:	4b5b      	ldr	r3, [pc, #364]	; (8001568 <order_phases+0x1f4>)
 80013fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        controller->i_q_des = 0.0f;
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        commutate(controller, &cal->cal_position);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001412:	332c      	adds	r3, #44	; 0x2c
 8001414:	4619      	mov	r1, r3
 8001416:	68b8      	ldr	r0, [r7, #8]
 8001418:	f001 fdc6 	bl	8002fa8 <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	68da      	ldr	r2, [r3, #12]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	619a      	str	r2, [r3, #24]
    	return;
 8001424:	e096      	b.n	8001554 <order_phases+0x1e0>
    }

    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	edd3 7a05 	vldr	s15, [r3, #20]
 800142c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800156c <order_phases+0x1f8>
 8001430:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001438:	d51d      	bpl.n	8001476 <order_phases+0x102>
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001440:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001444:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001448:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800144c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	edc3 7a02 	vstr	s15, [r3, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001460:	3388      	adds	r3, #136	; 0x88
 8001462:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800146a:	332c      	adds	r3, #44	; 0x2c
 800146c:	4619      	mov	r1, r3
 800146e:	68b8      	ldr	r0, [r7, #8]
 8001470:	f001 fd9a 	bl	8002fa8 <commutate>
    	return;
 8001474:	e06e      	b.n	8001554 <order_phases+0x1e0>
    }

	reset_foc(controller);
 8001476:	68b8      	ldr	r0, [r7, #8]
 8001478:	f001 fc7c 	bl	8002d74 <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	617b      	str	r3, [r7, #20]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	edd3 7a06 	vldr	s15, [r3, #24]
 8001488:	ed97 7a05 	vldr	s14, [r7, #20]
 800148c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001490:	eef0 7ae7 	vabs.f32	s15, s15
 8001494:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001570 <order_phases+0x1fc>
 8001498:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800149c:	ee16 0a90 	vmov	r0, s13
 80014a0:	f7ff f872 	bl	8000588 <__aeabi_f2d>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	ec43 2b10 	vmov	d0, r2, r3
 80014ac:	f00a f9e0 	bl	800b870 <round>
 80014b0:	ec53 2b10 	vmov	r2, r3, d0
 80014b4:	4610      	mov	r0, r2
 80014b6:	4619      	mov	r1, r3
 80014b8:	f7ff fb96 	bl	8000be8 <__aeabi_d2uiz>
 80014bc:	4603      	mov	r3, r0
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	701a      	strb	r2, [r3, #0]

	if(cal->theta_start < theta_end){
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	edd3 7a06 	vldr	s15, [r3, #24]
 80014ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80014ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d6:	dd07      	ble.n	80014e8 <order_phases+0x174>
		cal->phase_order = 0;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Phase order correct\r\n");
 80014e0:	4824      	ldr	r0, [pc, #144]	; (8001574 <order_phases+0x200>)
 80014e2:	f00b fa63 	bl	800c9ac <puts>
 80014e6:	e006      	b.n	80014f6 <order_phases+0x182>
	}
	else{
		cal->phase_order = 1;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2201      	movs	r2, #1
 80014ec:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Swapping phase sign\r\n");
 80014f0:	4821      	ldr	r0, [pc, #132]	; (8001578 <order_phases+0x204>)
 80014f2:	f00b fa5b 	bl	800c9ac <puts>
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	4619      	mov	r1, r3
 80014fc:	481f      	ldr	r0, [pc, #124]	; (800157c <order_phases+0x208>)
 80014fe:	f00b f9cf 	bl	800c8a0 <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff f83e 	bl	8000588 <__aeabi_f2d>
 800150c:	4604      	mov	r4, r0
 800150e:	460d      	mov	r5, r1
 8001510:	6978      	ldr	r0, [r7, #20]
 8001512:	f7ff f839 	bl	8000588 <__aeabi_f2d>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	e9cd 2300 	strd	r2, r3, [sp]
 800151e:	4622      	mov	r2, r4
 8001520:	462b      	mov	r3, r5
 8001522:	4817      	ldr	r0, [pc, #92]	; (8001580 <order_phases+0x20c>)
 8001524:	f00b f9bc 	bl	800c8a0 <iprintf>
    PHASE_ORDER = cal->phase_order;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800152e:	461a      	mov	r2, r3
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <order_phases+0x1e8>)
 8001532:	601a      	str	r2, [r3, #0]
    PPAIRS = (float)cal->ppairs;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	ee07 3a90 	vmov	s15, r3
 800153c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <order_phases+0x1f4>)
 8001542:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    cal->started = 0;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	741a      	strb	r2, [r3, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bdb0      	pop	{r4, r5, r7, pc}
 800155a:	bf00      	nop
 800155c:	20008fac 	.word	0x20008fac
 8001560:	08010198 	.word	0x08010198
 8001564:	37d1b717 	.word	0x37d1b717
 8001568:	20000694 	.word	0x20000694
 800156c:	3fd06cbe 	.word	0x3fd06cbe
 8001570:	40c90fdb 	.word	0x40c90fdb
 8001574:	080101bc 	.word	0x080101bc
 8001578:	080101d4 	.word	0x080101d4
 800157c:	080101ec 	.word	0x080101ec
 8001580:	08010200 	.word	0x08010200

08001584 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001584:	b5b0      	push	{r4, r5, r7, lr}
 8001586:	b094      	sub	sp, #80	; 0x50
 8001588:	af02      	add	r7, sp, #8
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
 8001590:	603b      	str	r3, [r7, #0]
	/* Calibrates e-zero and encoder nonliearity */

	if(!cal->started){
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	7c1b      	ldrb	r3, [r3, #16]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10f      	bne.n	80015ba <calibrate_encoder+0x36>
			printf("Starting offset cal and linearization\r\n");
 800159a:	489e      	ldr	r0, [pc, #632]	; (8001814 <calibrate_encoder+0x290>)
 800159c:	f00b fa06 	bl	800c9ac <puts>
			cal->started = 1;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	741a      	strb	r2, [r3, #16]
			cal->start_count = loop_count;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	60da      	str	r2, [r3, #12]
			cal->next_sample_time = T1;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
			cal->sample_count = 0;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	849a      	strh	r2, [r3, #36]	; 0x24
		}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	ee07 3a90 	vmov	s15, r3
 80015c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ca:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001818 <calibrate_encoder+0x294>
 80015ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	edd3 7a05 	vldr	s15, [r3, #20]
 80015de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ea:	d525      	bpl.n	8001638 <calibrate_encoder+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80015fe:	3388      	adds	r3, #136	; 0x88
 8001600:	601a      	str	r2, [r3, #0]
        controller->i_d_des = I_CAL;
 8001602:	4b86      	ldr	r3, [pc, #536]	; (800181c <calibrate_encoder+0x298>)
 8001604:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        controller->i_q_des = 0.0f;
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        commutate(controller, &cal->cal_position);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800161c:	332c      	adds	r3, #44	; 0x2c
 800161e:	4619      	mov	r1, r3
 8001620:	68b8      	ldr	r0, [r7, #8]
 8001622:	f001 fcc1 	bl	8002fa8 <commutate>

    	cal->theta_start = encoder->angle_multiturn[0];
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	68da      	ldr	r2, [r3, #12]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	619a      	str	r2, [r3, #24]
    	cal->next_sample_time = cal->time;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	695a      	ldr	r2, [r3, #20]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 8001636:	e259      	b.n	8001aec <calibrate_encoder+0x568>
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	ed93 7a05 	vldr	s14, [r3, #20]
 800163e:	4b77      	ldr	r3, [pc, #476]	; (800181c <calibrate_encoder+0x298>)
 8001640:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001644:	eddf 6a76 	vldr	s13, [pc, #472]	; 8001820 <calibrate_encoder+0x29c>
 8001648:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800164c:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8001650:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001654:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001658:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800165c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001664:	f140 808f 	bpl.w	8001786 <calibrate_encoder+0x202>
    	// rotate voltage vector through one mechanical rotation in the positive direction
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	edd3 7a02 	vldr	s15, [r3, #8]
 800166e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001824 <calibrate_encoder+0x2a0>
 8001672:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	edc3 7a02 	vstr	s15, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001686:	3388      	adds	r3, #136	; 0x88
 8001688:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001690:	332c      	adds	r3, #44	; 0x2c
 8001692:	4619      	mov	r1, r3
 8001694:	68b8      	ldr	r0, [r7, #8]
 8001696:	f001 fc87 	bl	8002fa8 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if(cal->time > cal->next_sample_time){
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	ed93 7a05 	vldr	s14, [r3, #20]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ae:	dc00      	bgt.n	80016b2 <calibrate_encoder+0x12e>
				return;
			}
			cal->sample_count++;

		}
		return;
 80016b0:	e21c      	b.n	8001aec <calibrate_encoder+0x568>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80016b8:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001838 <calibrate_encoder+0x2b4>
 80016bc:	ee67 6a87 	vmul.f32	s13, s15, s14
 80016c0:	4b56      	ldr	r3, [pc, #344]	; (800181c <calibrate_encoder+0x298>)
 80016c2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016c6:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001820 <calibrate_encoder+0x29c>
 80016ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d6:	ee17 3a90 	vmov	r3, s15
 80016da:	61bb      	str	r3, [r7, #24]
			int error = encoder->raw - count_ref;//- encoder->raw;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	617b      	str	r3, [r7, #20]
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	13db      	asrs	r3, r3, #15
 80016ea:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80016f2:	4618      	mov	r0, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	441a      	add	r2, r3
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	f100 030a 	add.w	r3, r0, #10
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	605a      	str	r2, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001708:	461d      	mov	r5, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	330a      	adds	r3, #10
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	685c      	ldr	r4, [r3, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe ff33 	bl	8000588 <__aeabi_f2d>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	e9cd 2300 	strd	r2, r3, [sp]
 800172a:	4623      	mov	r3, r4
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4629      	mov	r1, r5
 8001730:	483d      	ldr	r0, [pc, #244]	; (8001828 <calibrate_encoder+0x2a4>)
 8001732:	f00b f8b5 	bl	800c8a0 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800173c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800182c <calibrate_encoder+0x2a8>
 8001740:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800174e:	ee07 3a90 	vmov	s15, r3
 8001752:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001756:	4b31      	ldr	r3, [pc, #196]	; (800181c <calibrate_encoder+0x298>)
 8001758:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800175c:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001830 <calibrate_encoder+0x2ac>
 8001760:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001764:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001768:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800176c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001774:	f000 81b7 	beq.w	8001ae6 <calibrate_encoder+0x562>
			cal->sample_count++;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800177c:	3301      	adds	r3, #1
 800177e:	b29a      	uxth	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	849a      	strh	r2, [r3, #36]	; 0x24
		return;
 8001784:	e1b2      	b.n	8001aec <calibrate_encoder+0x568>
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	ed93 7a05 	vldr	s14, [r3, #20]
 800178c:	4b23      	ldr	r3, [pc, #140]	; (800181c <calibrate_encoder+0x298>)
 800178e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001792:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001834 <calibrate_encoder+0x2b0>
 8001796:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800179a:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800179e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80017a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80017aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b2:	f140 80a9 	bpl.w	8001908 <calibrate_encoder+0x384>
		// rotate voltage vector through one mechanical rotation in the negative direction
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80017bc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001824 <calibrate_encoder+0x2a0>
 80017c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	edc3 7a02 	vstr	s15, [r3, #8]
		controller->i_d_des = I_CAL;
 80017ca:	4b14      	ldr	r3, [pc, #80]	; (800181c <calibrate_encoder+0x298>)
 80017cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		controller->i_q_des = 0.0f;
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		cal->cal_position.elec_angle = cal->theta_ref;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80017e8:	3388      	adds	r3, #136	; 0x88
 80017ea:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80017f2:	332c      	adds	r3, #44	; 0x2c
 80017f4:	4619      	mov	r1, r3
 80017f6:	68b8      	ldr	r0, [r7, #8]
 80017f8:	f001 fbd6 	bl	8002fa8 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	ed93 7a05 	vldr	s14, [r3, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001808:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800180c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001810:	dc14      	bgt.n	800183c <calibrate_encoder+0x2b8>
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
			cal->sample_count--;
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
 8001812:	e16a      	b.n	8001aea <calibrate_encoder+0x566>
 8001814:	0801021c 	.word	0x0801021c
 8001818:	37d1b717 	.word	0x37d1b717
 800181c:	20000694 	.word	0x20000694
 8001820:	40c90fdb 	.word	0x40c90fdb
 8001824:	3983126e 	.word	0x3983126e
 8001828:	08010244 	.word	0x08010244
 800182c:	3ba0d97c 	.word	0x3ba0d97c
 8001830:	43000000 	.word	0x43000000
 8001834:	41490fdb 	.word	0x41490fdb
 8001838:	47800000 	.word	0x47800000
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 8152 	beq.w	8001aea <calibrate_encoder+0x566>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	edd3 7a02 	vldr	s15, [r3, #8]
 800184c:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8001838 <calibrate_encoder+0x2b4>
 8001850:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001854:	4ba7      	ldr	r3, [pc, #668]	; (8001af4 <calibrate_encoder+0x570>)
 8001856:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800185a:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8001af8 <calibrate_encoder+0x574>
 800185e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001866:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800186a:	ee17 3a90 	vmov	r3, s15
 800186e:	623b      	str	r3, [r7, #32]
			int error = encoder->raw - count_ref;// - encoder->raw;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001874:	6a3b      	ldr	r3, [r7, #32]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	61fb      	str	r3, [r7, #28]
			error = error + ENC_CPR*(error<0);
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	13db      	asrs	r3, r3, #15
 800187e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	4413      	add	r3, r2
 8001886:	61fb      	str	r3, [r7, #28]
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	330a      	adds	r3, #10
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	4413      	add	r3, r2
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800189e:	4610      	mov	r0, r2
 80018a0:	0fda      	lsrs	r2, r3, #31
 80018a2:	4413      	add	r3, r2
 80018a4:	105b      	asrs	r3, r3, #1
 80018a6:	4619      	mov	r1, r3
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	f100 030a 	add.w	r3, r0, #10
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	6059      	str	r1, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018b8:	461d      	mov	r5, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	330a      	adds	r3, #10
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	685c      	ldr	r4, [r3, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fe5b 	bl	8000588 <__aeabi_f2d>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	e9cd 2300 	strd	r2, r3, [sp]
 80018da:	4623      	mov	r3, r4
 80018dc:	6a3a      	ldr	r2, [r7, #32]
 80018de:	4629      	mov	r1, r5
 80018e0:	4886      	ldr	r0, [pc, #536]	; (8001afc <calibrate_encoder+0x578>)
 80018e2:	f00a ffdd 	bl	800c8a0 <iprintf>
			cal->sample_count--;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018ea:	3b01      	subs	r3, #1
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	849a      	strh	r2, [r3, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80018f8:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001b00 <calibrate_encoder+0x57c>
 80018fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		return;
 8001906:	e0f0      	b.n	8001aea <calibrate_encoder+0x566>
    }

    reset_foc(controller);
 8001908:	68b8      	ldr	r0, [r7, #8]
 800190a:	f001 fa33 	bl	8002d74 <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8001912:	2300      	movs	r3, #0
 8001914:	643b      	str	r3, [r7, #64]	; 0x40
 8001916:	e00b      	b.n	8001930 <calibrate_encoder+0x3ac>
		ezero_mean += cal->error_arr[i];
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800191c:	330a      	adds	r3, #10
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001926:	4413      	add	r3, r2
 8001928:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 800192a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800192c:	3301      	adds	r3, #1
 800192e:	643b      	str	r3, [r7, #64]	; 0x40
 8001930:	4b70      	ldr	r3, [pc, #448]	; (8001af4 <calibrate_encoder+0x570>)
 8001932:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001936:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800193a:	ee17 3a90 	vmov	r3, s15
 800193e:	01db      	lsls	r3, r3, #7
 8001940:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001942:	429a      	cmp	r2, r3
 8001944:	dbe8      	blt.n	8001918 <calibrate_encoder+0x394>
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 8001946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001948:	ee07 3a90 	vmov	s15, r3
 800194c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001950:	4b68      	ldr	r3, [pc, #416]	; (8001af4 <calibrate_encoder+0x570>)
 8001952:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001956:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001b04 <calibrate_encoder+0x580>
 800195a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800195e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001962:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001966:	ee17 2a90 	vmov	r2, s15
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	61da      	str	r2, [r3, #28]

	// Moving average to filter out cogging ripple

	int window = SAMPLES_PER_PPAIR;
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
	int lut_offset = (ENC_CPR-cal->error_arr[0])*N_LUT/ENC_CPR;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001976:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 800197a:	2b00      	cmp	r3, #0
 800197c:	da01      	bge.n	8001982 <calibrate_encoder+0x3fe>
 800197e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001982:	125b      	asrs	r3, r3, #9
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i<N_LUT; i++){
 8001986:	2300      	movs	r3, #0
 8001988:	63fb      	str	r3, [r7, #60]	; 0x3c
 800198a:	e0a0      	b.n	8001ace <calibrate_encoder+0x54a>
			int moving_avg = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001992:	0fda      	lsrs	r2, r3, #31
 8001994:	4413      	add	r3, r2
 8001996:	105b      	asrs	r3, r3, #1
 8001998:	425b      	negs	r3, r3
 800199a:	637b      	str	r3, [r7, #52]	; 0x34
 800199c:	e068      	b.n	8001a70 <calibrate_encoder+0x4ec>
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 800199e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019a0:	ee07 3a90 	vmov	s15, r3
 80019a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a8:	4b52      	ldr	r3, [pc, #328]	; (8001af4 <calibrate_encoder+0x570>)
 80019aa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b2:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001b04 <calibrate_encoder+0x580>
 80019b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ba:	eddf 6a52 	vldr	s13, [pc, #328]	; 8001b04 <calibrate_encoder+0x580>
 80019be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c4:	ee07 3a90 	vmov	s15, r3
 80019c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019d4:	ee17 3a90 	vmov	r3, s15
 80019d8:	633b      	str	r3, [r7, #48]	; 0x30
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 80019da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019dc:	2b00      	cmp	r3, #0
 80019de:	da13      	bge.n	8001a08 <calibrate_encoder+0x484>
 80019e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e2:	ee07 3a90 	vmov	s15, r3
 80019e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ea:	4b42      	ldr	r3, [pc, #264]	; (8001af4 <calibrate_encoder+0x570>)
 80019ec:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019f0:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001b04 <calibrate_encoder+0x580>
 80019f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a00:	ee17 3a90 	vmov	r3, s15
 8001a04:	633b      	str	r3, [r7, #48]	; 0x30
 8001a06:	e027      	b.n	8001a58 <calibrate_encoder+0x4d4>
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a0a:	ee07 3a90 	vmov	s15, r3
 8001a0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a12:	4b38      	ldr	r3, [pc, #224]	; (8001af4 <calibrate_encoder+0x570>)
 8001a14:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a18:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001b04 <calibrate_encoder+0x580>
 8001a1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a24:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001a28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a30:	dd12      	ble.n	8001a58 <calibrate_encoder+0x4d4>
 8001a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a34:	ee07 3a90 	vmov	s15, r3
 8001a38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a3c:	4b2d      	ldr	r3, [pc, #180]	; (8001af4 <calibrate_encoder+0x570>)
 8001a3e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a42:	eddf 6a30 	vldr	s13, [pc, #192]	; 8001b04 <calibrate_encoder+0x580>
 8001a46:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a52:	ee17 3a90 	vmov	r3, s15
 8001a56:	633b      	str	r3, [r7, #48]	; 0x30
				moving_avg += cal->error_arr[index];
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5c:	330a      	adds	r3, #10
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a66:	4413      	add	r3, r2
 8001a68:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8001a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a72:	0fda      	lsrs	r2, r3, #31
 8001a74:	4413      	add	r3, r2
 8001a76:	105b      	asrs	r3, r3, #1
 8001a78:	461a      	mov	r2, r3
 8001a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	db8e      	blt.n	800199e <calibrate_encoder+0x41a>
			}
			moving_avg = moving_avg/window;
 8001a80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a84:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a88:	63bb      	str	r3, [r7, #56]	; 0x38
			int lut_index = lut_offset + i;
 8001a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a8e:	4413      	add	r3, r2
 8001a90:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8001a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a94:	2b7f      	cmp	r3, #127	; 0x7f
 8001a96:	dd02      	ble.n	8001a9e <calibrate_encoder+0x51a>
 8001a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a9a:	3b80      	subs	r3, #128	; 0x80
 8001a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001aa4:	1ad2      	subs	r2, r2, r3
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aaa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001aae:	330a      	adds	r3, #10
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ac2:	4811      	ldr	r0, [pc, #68]	; (8001b08 <calibrate_encoder+0x584>)
 8001ac4:	f00a feec 	bl	800c8a0 <iprintf>
	for(int i = 0; i<N_LUT; i++){
 8001ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aca:	3301      	adds	r3, #1
 8001acc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ad0:	2b7f      	cmp	r3, #127	; 0x7f
 8001ad2:	f77f af5b 	ble.w	800198c <calibrate_encoder+0x408>

		}

	cal->started = 0;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	741a      	strb	r2, [r3, #16]
	cal->done_cal = 1;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001ae4:	e002      	b.n	8001aec <calibrate_encoder+0x568>
				return;
 8001ae6:	bf00      	nop
 8001ae8:	e000      	b.n	8001aec <calibrate_encoder+0x568>
		return;
 8001aea:	bf00      	nop
}
 8001aec:	3748      	adds	r7, #72	; 0x48
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bdb0      	pop	{r4, r5, r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000694 	.word	0x20000694
 8001af8:	40c90fdb 	.word	0x40c90fdb
 8001afc:	08010244 	.word	0x08010244
 8001b00:	3ba0d97c 	.word	0x3ba0d97c
 8001b04:	43000000 	.word	0x43000000
 8001b08:	08010254 	.word	0x08010254

08001b0c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <MX_CAN1_Init+0x64>)
 8001b12:	4a18      	ldr	r2, [pc, #96]	; (8001b74 <MX_CAN1_Init+0x68>)
 8001b14:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <MX_CAN1_Init+0x64>)
 8001b18:	2203      	movs	r2, #3
 8001b1a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <MX_CAN1_Init+0x64>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <MX_CAN1_Init+0x64>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <MX_CAN1_Init+0x64>)
 8001b2a:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8001b2e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <MX_CAN1_Init+0x64>)
 8001b32:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b36:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001b38:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <MX_CAN1_Init+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <MX_CAN1_Init+0x64>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <MX_CAN1_Init+0x64>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <MX_CAN1_Init+0x64>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <MX_CAN1_Init+0x64>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <MX_CAN1_Init+0x64>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001b5c:	4804      	ldr	r0, [pc, #16]	; (8001b70 <MX_CAN1_Init+0x64>)
 8001b5e:	f005 fd2f 	bl	80075c0 <HAL_CAN_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001b68:	f003 fc68 	bl	800543c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000334 	.word	0x20000334
 8001b74:	40006400 	.word	0x40006400

08001b78 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	; 0x28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a1d      	ldr	r2, [pc, #116]	; (8001c0c <HAL_CAN_MspInit+0x94>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d134      	bne.n	8001c04 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <HAL_CAN_MspInit+0x98>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	4a1b      	ldr	r2, [pc, #108]	; (8001c10 <HAL_CAN_MspInit+0x98>)
 8001ba4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8001baa:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <HAL_CAN_MspInit+0x98>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <HAL_CAN_MspInit+0x98>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a14      	ldr	r2, [pc, #80]	; (8001c10 <HAL_CAN_MspInit+0x98>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_CAN_MspInit+0x98>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be0:	2303      	movs	r3, #3
 8001be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001be4:	2309      	movs	r3, #9
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	4809      	ldr	r0, [pc, #36]	; (8001c14 <HAL_CAN_MspInit+0x9c>)
 8001bf0:	f006 fcd0 	bl	8008594 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	2014      	movs	r0, #20
 8001bfa:	f006 fc02 	bl	8008402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001bfe:	2014      	movs	r0, #20
 8001c00:	f006 fc1b 	bl	800843a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001c04:	bf00      	nop
 8001c06:	3728      	adds	r7, #40	; 0x28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40006400 	.word	0x40006400
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020400 	.word	0x40020400

08001c18 <can_rx_init>:
  }
}

/* USER CODE BEGIN 1 */

void can_rx_init(CANRxMessage *msg){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	msg->filter.FilterFIFOAssignment=CAN_FILTER_FIFO0; 	// set fifo assignment
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	63da      	str	r2, [r3, #60]	; 0x3c
	msg->filter.FilterIdHigh=CAN_ID<<5;         // CAN ID
 8001c26:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <can_rx_init+0x58>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	015b      	lsls	r3, r3, #5
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	62da      	str	r2, [r3, #44]	; 0x2c
	msg->filter.FilterIdLow=0x0;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	631a      	str	r2, [r3, #48]	; 0x30
	msg->filter.FilterMaskIdHigh=0xFFF;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001c3e:	635a      	str	r2, [r3, #52]	; 0x34
	msg->filter.FilterMaskIdLow=0xFFFF;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c46:	639a      	str	r2, [r3, #56]	; 0x38
	msg->filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	645a      	str	r2, [r3, #68]	; 0x44
	msg->filter.FilterScale=CAN_FILTERSCALE_16BIT;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	649a      	str	r2, [r3, #72]	; 0x48
	msg->filter.FilterActivation=ENABLE;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	64da      	str	r2, [r3, #76]	; 0x4c
	HAL_CAN_ConfigFilter(&CAN_H, &msg->filter);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	332c      	adds	r3, #44	; 0x2c
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4804      	ldr	r0, [pc, #16]	; (8001c74 <can_rx_init+0x5c>)
 8001c62:	f005 fda9 	bl	80077b8 <HAL_CAN_ConfigFilter>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20008fac 	.word	0x20008fac
 8001c74:	20000334 	.word	0x20000334

08001c78 <can_tx_init>:

void can_tx_init(CANTxMessage *msg){
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	msg->tx_header.DLC = 8; 			// message size of 8 byte
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2208      	movs	r2, #8
 8001c84:	61da      	str	r2, [r3, #28]
	msg->tx_header.IDE=CAN_ID_STD; 		// set identifier to standard
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	615a      	str	r2, [r3, #20]
	msg->tx_header.RTR=CAN_RTR_DATA; 	// set data type to remote transmission request?
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	619a      	str	r2, [r3, #24]
	msg->tx_header.StdId = CAN_MASTER;  // recipient CAN ID
 8001c92:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <can_tx_init+0x30>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	461a      	mov	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	60da      	str	r2, [r3, #12]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	20008fac 	.word	0x20008fac

08001cac <pack_reply>:
/// 0: [position[15-8]]
/// 1: [position[7-0]]
/// 2: [velocity[11-4]]
/// 3: [velocity[3-0], current[11-8]]
/// 4: [current[7-0]]
void pack_reply(CANTxMessage *msg, float p, float v, float t, int version, int calibrate_finish, int state, float iq_ref){
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08c      	sub	sp, #48	; 0x30
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	61f8      	str	r0, [r7, #28]
 8001cb4:	ed87 0a06 	vstr	s0, [r7, #24]
 8001cb8:	edc7 0a05 	vstr	s1, [r7, #20]
 8001cbc:	ed87 1a04 	vstr	s2, [r7, #16]
 8001cc0:	60f9      	str	r1, [r7, #12]
 8001cc2:	60ba      	str	r2, [r7, #8]
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	edc7 1a00 	vstr	s3, [r7]
    int p_int = float_to_uint(p, P_REPLY_MIN, P_REPLY_MAX, 16);
 8001cca:	2010      	movs	r0, #16
 8001ccc:	ed9f 1a3e 	vldr	s2, [pc, #248]	; 8001dc8 <pack_reply+0x11c>
 8001cd0:	eddf 0a3e 	vldr	s1, [pc, #248]	; 8001dcc <pack_reply+0x120>
 8001cd4:	ed97 0a06 	vldr	s0, [r7, #24]
 8001cd8:	f003 fca0 	bl	800561c <float_to_uint>
 8001cdc:	62f8      	str	r0, [r7, #44]	; 0x2c
    int v_int = float_to_uint(v, V_MIN, V_MAX, 12);
 8001cde:	4b3c      	ldr	r3, [pc, #240]	; (8001dd0 <pack_reply+0x124>)
 8001ce0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001ce4:	4b3a      	ldr	r3, [pc, #232]	; (8001dd0 <pack_reply+0x124>)
 8001ce6:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001cea:	200c      	movs	r0, #12
 8001cec:	eeb0 1a47 	vmov.f32	s2, s14
 8001cf0:	eef0 0a67 	vmov.f32	s1, s15
 8001cf4:	ed97 0a05 	vldr	s0, [r7, #20]
 8001cf8:	f003 fc90 	bl	800561c <float_to_uint>
 8001cfc:	62b8      	str	r0, [r7, #40]	; 0x28
    int t_int = float_to_uint(t, -(I_MAX+SENSE_BUFFER)*KT*GR, (I_MAX+SENSE_BUFFER)*KT*GR, 12);
 8001cfe:	4b34      	ldr	r3, [pc, #208]	; (8001dd0 <pack_reply+0x124>)
 8001d00:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d04:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001dd4 <pack_reply+0x128>
 8001d08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d0c:	eeb1 7a67 	vneg.f32	s14, s15
 8001d10:	4b2f      	ldr	r3, [pc, #188]	; (8001dd0 <pack_reply+0x124>)
 8001d12:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001d16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d1a:	4b2d      	ldr	r3, [pc, #180]	; (8001dd0 <pack_reply+0x124>)
 8001d1c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001d20:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001d24:	4b2a      	ldr	r3, [pc, #168]	; (8001dd0 <pack_reply+0x124>)
 8001d26:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d2a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001dd4 <pack_reply+0x128>
 8001d2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001d32:	4b27      	ldr	r3, [pc, #156]	; (8001dd0 <pack_reply+0x124>)
 8001d34:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001d38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d3c:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <pack_reply+0x124>)
 8001d3e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d46:	200c      	movs	r0, #12
 8001d48:	eeb0 1a67 	vmov.f32	s2, s15
 8001d4c:	eef0 0a66 	vmov.f32	s1, s13
 8001d50:	ed97 0a04 	vldr	s0, [r7, #16]
 8001d54:	f003 fc62 	bl	800561c <float_to_uint>
 8001d58:	6278      	str	r0, [r7, #36]	; 0x24

    msg->data[0] = CAN_ID;
 8001d5a:	4b1f      	ldr	r3, [pc, #124]	; (8001dd8 <pack_reply+0x12c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	705a      	strb	r2, [r3, #1]
    msg->data[1] = p_int>>8;
 8001d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d66:	121b      	asrs	r3, r3, #8
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	709a      	strb	r2, [r3, #2]
    msg->data[2] = p_int&0xFF;
 8001d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	70da      	strb	r2, [r3, #3]
    msg->data[3] = v_int>>4;
 8001d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d78:	111b      	asrs	r3, r3, #4
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	711a      	strb	r2, [r3, #4]
    msg->data[4] = ((v_int&0xF)<<4) + (t_int>>8);
 8001d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d82:	011b      	lsls	r3, r3, #4
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	121b      	asrs	r3, r3, #8
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	715a      	strb	r2, [r3, #5]
    msg->data[5] = t_int&0xFF;
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	719a      	strb	r2, [r3, #6]
    msg->data[6] = (version<<4) + (calibrate_finish&0xF);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	011b      	lsls	r3, r3, #4
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	f003 030f 	and.w	r3, r3, #15
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	4413      	add	r3, r2
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	71da      	strb	r2, [r3, #7]
    msg->data[7] = state;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	721a      	strb	r2, [r3, #8]
    }
 8001dbe:	bf00      	nop
 8001dc0:	3730      	adds	r7, #48	; 0x30
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	42bc7edd 	.word	0x42bc7edd
 8001dcc:	c2bc7edd 	.word	0xc2bc7edd
 8001dd0:	20000694 	.word	0x20000694
 8001dd4:	00000000 	.word	0x00000000
 8001dd8:	20008fac 	.word	0x20008fac

08001ddc <unpack_cmd>:
/// 3: [velocity[3-0], kp[11-8]]
/// 4: [kp[7-0]]
/// 5: [kd[11-4]]
/// 6: [kd[3-0], torque[11-8]]
/// 7: [torque[7-0]]
void unpack_cmd(CANRxMessage msg, float *commands){// ControllerStruct * controller){
 8001ddc:	b084      	sub	sp, #16
 8001dde:	b590      	push	{r4, r7, lr}
 8001de0:	b087      	sub	sp, #28
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001de8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        int p_int = (msg.data[0]<<8)|msg.data[1];
 8001dec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001df0:	021b      	lsls	r3, r3, #8
 8001df2:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8001df6:	4313      	orrs	r3, r2
 8001df8:	617b      	str	r3, [r7, #20]
        int kp_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 8001dfa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001dfe:	011b      	lsls	r3, r3, #4
 8001e00:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8001e04:	0912      	lsrs	r2, r2, #4
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        int ki_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8001e0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e10:	021b      	lsls	r3, r3, #8
 8001e12:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001e16:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 8001e1e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001e28:	0912      	lsrs	r2, r2, #4
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60bb      	str	r3, [r7, #8]
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8001e30:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001e34:	021b      	lsls	r3, r3, #8
 8001e36:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001e3a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	607b      	str	r3, [r7, #4]

        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001e42:	4b3f      	ldr	r3, [pc, #252]	; (8001f40 <unpack_cmd+0x164>)
 8001e44:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001e48:	4b3d      	ldr	r3, [pc, #244]	; (8001f40 <unpack_cmd+0x164>)
 8001e4a:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8001e4e:	2110      	movs	r1, #16
 8001e50:	eef0 0a47 	vmov.f32	s1, s14
 8001e54:	eeb0 0a67 	vmov.f32	s0, s15
 8001e58:	6978      	ldr	r0, [r7, #20]
 8001e5a:	f003 fc12 	bl	8005682 <uint_to_float>
 8001e5e:	eef0 7a40 	vmov.f32	s15, s0
 8001e62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e66:	edc3 7a00 	vstr	s15, [r3]
        commands[1] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 8001e6a:	4b35      	ldr	r3, [pc, #212]	; (8001f40 <unpack_cmd+0x164>)
 8001e6c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001e70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e74:	1d1c      	adds	r4, r3, #4
 8001e76:	210c      	movs	r1, #12
 8001e78:	eef0 0a67 	vmov.f32	s1, s15
 8001e7c:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8001f44 <unpack_cmd+0x168>
 8001e80:	6938      	ldr	r0, [r7, #16]
 8001e82:	f003 fbfe 	bl	8005682 <uint_to_float>
 8001e86:	eef0 7a40 	vmov.f32	s15, s0
 8001e8a:	edc4 7a00 	vstr	s15, [r4]
        commands[2] = uint_to_float(ki_int, KI_MIN, KI_MAX, 12);
 8001e8e:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <unpack_cmd+0x164>)
 8001e90:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001e94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e98:	f103 0408 	add.w	r4, r3, #8
 8001e9c:	210c      	movs	r1, #12
 8001e9e:	eef0 0a67 	vmov.f32	s1, s15
 8001ea2:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8001f44 <unpack_cmd+0x168>
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f003 fbeb 	bl	8005682 <uint_to_float>
 8001eac:	eef0 7a40 	vmov.f32	s15, s0
 8001eb0:	edc4 7a00 	vstr	s15, [r4]
        commands[3] = uint_to_float(kd_int, KD_MIN, KD_MAX, 12);
 8001eb4:	4b22      	ldr	r3, [pc, #136]	; (8001f40 <unpack_cmd+0x164>)
 8001eb6:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001eba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ebe:	f103 040c 	add.w	r4, r3, #12
 8001ec2:	210c      	movs	r1, #12
 8001ec4:	eef0 0a67 	vmov.f32	s1, s15
 8001ec8:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8001f44 <unpack_cmd+0x168>
 8001ecc:	68b8      	ldr	r0, [r7, #8]
 8001ece:	f003 fbd8 	bl	8005682 <uint_to_float>
 8001ed2:	eef0 7a40 	vmov.f32	s15, s0
 8001ed6:	edc4 7a00 	vstr	s15, [r4]
        commands[4] = uint_to_float(t_int, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 8001eda:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <unpack_cmd+0x164>)
 8001edc:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ee0:	eeb1 7a67 	vneg.f32	s14, s15
 8001ee4:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <unpack_cmd+0x164>)
 8001ee6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001eea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eee:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <unpack_cmd+0x164>)
 8001ef0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001ef4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001ef8:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <unpack_cmd+0x164>)
 8001efa:	ed93 7a03 	vldr	s14, [r3, #12]
 8001efe:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <unpack_cmd+0x164>)
 8001f00:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001f04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <unpack_cmd+0x164>)
 8001f0a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f16:	f103 0410 	add.w	r4, r3, #16
 8001f1a:	210c      	movs	r1, #12
 8001f1c:	eef0 0a67 	vmov.f32	s1, s15
 8001f20:	eeb0 0a66 	vmov.f32	s0, s13
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f003 fbac 	bl	8005682 <uint_to_float>
 8001f2a:	eef0 7a40 	vmov.f32	s15, s0
 8001f2e:	edc4 7a00 	vstr	s15, [r4]
    //printf("Received   ");
    //printf("%.3f  %.3f  %.3f  %.3f  %.3f   %.3f", controller->p_des, controller->v_des, controller->kp, controller->kd, controller->t_ff, controller->i_q_ref);
    //printf("\n\r");
    }
 8001f32:	bf00      	nop
 8001f34:	371c      	adds	r7, #28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001f3c:	b004      	add	sp, #16
 8001f3e:	4770      	bx	lr
 8001f40:	20000694 	.word	0x20000694
 8001f44:	00000000 	.word	0x00000000

08001f48 <drv_spi_write>:
#include "drv8323.h"
#include <stdio.h>
#include "usart.h"
#include "hw_config.h"

uint16_t drv_spi_write(DRVStruct * drv, uint16_t val){
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af02      	add	r7, sp, #8
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	807b      	strh	r3, [r7, #2]
	drv->spi_tx_word = val;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	887a      	ldrh	r2, [r7, #2]
 8001f58:	801a      	strh	r2, [r3, #0]
	DRV_CS_LOW; 	// CS low
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2110      	movs	r1, #16
 8001f5e:	480f      	ldr	r0, [pc, #60]	; (8001f9c <drv_spi_write+0x54>)
 8001f60:	f006 fcc4 	bl	80088ec <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	1c9a      	adds	r2, r3, #2
 8001f6a:	2364      	movs	r3, #100	; 0x64
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	2301      	movs	r3, #1
 8001f70:	480b      	ldr	r0, [pc, #44]	; (8001fa0 <drv_spi_write+0x58>)
 8001f72:	f007 fb18 	bl	80095a6 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001f76:	bf00      	nop
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <drv_spi_write+0x58>)
 8001f7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d0f9      	beq.n	8001f78 <drv_spi_write+0x30>
	DRV_CS_HIGH; 	// CS high
 8001f84:	2201      	movs	r2, #1
 8001f86:	2110      	movs	r1, #16
 8001f88:	4804      	ldr	r0, [pc, #16]	; (8001f9c <drv_spi_write+0x54>)
 8001f8a:	f006 fcaf 	bl	80088ec <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	885b      	ldrh	r3, [r3, #2]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40020000 	.word	0x40020000
 8001fa0:	200094b0 	.word	0x200094b0

08001fa4 <drv_read_FSR1>:
uint16_t drv_read_FSR1(DRVStruct drv){
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	463b      	mov	r3, r7
 8001fac:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR1);
 8001fb0:	463b      	mov	r3, r7
 8001fb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff ffc6 	bl	8001f48 <drv_spi_write>
 8001fbc:	4603      	mov	r3, r0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <drv_read_FSR2>:

uint16_t drv_read_FSR2(DRVStruct drv){
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	463b      	mov	r3, r7
 8001fce:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR2);
 8001fd2:	463b      	mov	r3, r7
 8001fd4:	f248 0101 	movw	r1, #32769	; 0x8001
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ffb5 	bl	8001f48 <drv_spi_write>
 8001fde:	4603      	mov	r3, r0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <drv_read_register>:

uint16_t drv_read_register(DRVStruct drv, int reg){
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	f107 0308 	add.w	r3, r7, #8
 8001ff2:	e883 0003 	stmia.w	r3, {r0, r1}
 8001ff6:	607a      	str	r2, [r7, #4]
	return drv_spi_write(&drv, (1<<15)|(reg<<11));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	02db      	lsls	r3, r3, #11
 8001ffc:	b21b      	sxth	r3, r3
 8001ffe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002006:	b21b      	sxth	r3, r3
 8002008:	b29a      	uxth	r2, r3
 800200a:	f107 0308 	add.w	r3, r7, #8
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff99 	bl	8001f48 <drv_spi_write>
 8002016:	4603      	mov	r3, r0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <drv_write_register>:
void drv_write_register(DRVStruct drv, int reg, int val){
 8002020:	b590      	push	{r4, r7, lr}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	f107 0408 	add.w	r4, r7, #8
 800202a:	e884 0003 	stmia.w	r4, {r0, r1}
 800202e:	607a      	str	r2, [r7, #4]
 8002030:	603b      	str	r3, [r7, #0]
	drv_spi_write(&drv, (reg<<11)|val);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	02db      	lsls	r3, r3, #11
 8002036:	b21a      	sxth	r2, r3
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	b21b      	sxth	r3, r3
 800203c:	4313      	orrs	r3, r2
 800203e:	b21b      	sxth	r3, r3
 8002040:	b29a      	uxth	r2, r3
 8002042:	f107 0308 	add.w	r3, r7, #8
 8002046:	4611      	mov	r1, r2
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff ff7d 	bl	8001f48 <drv_spi_write>
}
 800204e:	bf00      	nop
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	bd90      	pop	{r4, r7, pc}

08002056 <drv_write_DCR>:
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 8002056:	b590      	push	{r4, r7, lr}
 8002058:	b087      	sub	sp, #28
 800205a:	af00      	add	r7, sp, #0
 800205c:	f107 0408 	add.w	r4, r7, #8
 8002060:	e884 0003 	stmia.w	r4, {r0, r1}
 8002064:	607a      	str	r2, [r7, #4]
 8002066:	603b      	str	r3, [r7, #0]
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	025b      	lsls	r3, r3, #9
 800206c:	b21b      	sxth	r3, r3
 800206e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002072:	b21a      	sxth	r2, r3
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	021b      	lsls	r3, r3, #8
 8002078:	b21b      	sxth	r3, r3
 800207a:	4313      	orrs	r3, r2
 800207c:	b21a      	sxth	r2, r3
 800207e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002080:	01db      	lsls	r3, r3, #7
 8002082:	b21b      	sxth	r3, r3
 8002084:	4313      	orrs	r3, r2
 8002086:	b21a      	sxth	r2, r3
 8002088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800208a:	015b      	lsls	r3, r3, #5
 800208c:	b21b      	sxth	r3, r3
 800208e:	4313      	orrs	r3, r2
 8002090:	b21a      	sxth	r2, r3
 8002092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	b21b      	sxth	r3, r3
 8002098:	4313      	orrs	r3, r2
 800209a:	b21a      	sxth	r2, r3
 800209c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	b21b      	sxth	r3, r3
 80020a2:	4313      	orrs	r3, r2
 80020a4:	b21a      	sxth	r2, r3
 80020a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	b21b      	sxth	r3, r3
 80020ac:	4313      	orrs	r3, r2
 80020ae:	b21a      	sxth	r2, r3
 80020b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	b21b      	sxth	r3, r3
 80020b6:	4313      	orrs	r3, r2
 80020b8:	b21a      	sxth	r2, r3
 80020ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020bc:	b21b      	sxth	r3, r3
 80020be:	4313      	orrs	r3, r2
 80020c0:	b21b      	sxth	r3, r3
 80020c2:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 80020c4:	8afa      	ldrh	r2, [r7, #22]
 80020c6:	f107 0308 	add.w	r3, r7, #8
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff3b 	bl	8001f48 <drv_spi_write>
}
 80020d2:	bf00      	nop
 80020d4:	371c      	adds	r7, #28
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd90      	pop	{r4, r7, pc}

080020da <drv_write_OCPCR>:
}
void drv_write_LSR(DRVStruct drv, int CBC, int TDRIVE, int IDRIVEP_LS, int IDRIVEN_LS){
	uint16_t val = (LSR<<11) | (CBC<<10) | (TDRIVE<<8) | (IDRIVEP_LS<<4) | IDRIVEN_LS;
	drv_spi_write(&drv, val);
}
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 80020da:	b590      	push	{r4, r7, lr}
 80020dc:	b087      	sub	sp, #28
 80020de:	af00      	add	r7, sp, #0
 80020e0:	f107 0408 	add.w	r4, r7, #8
 80020e4:	e884 0003 	stmia.w	r4, {r0, r1}
 80020e8:	607a      	str	r2, [r7, #4]
 80020ea:	603b      	str	r3, [r7, #0]
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	029b      	lsls	r3, r3, #10
 80020f0:	b21b      	sxth	r3, r3
 80020f2:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80020f6:	b21a      	sxth	r2, r3
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	021b      	lsls	r3, r3, #8
 80020fc:	b21b      	sxth	r3, r3
 80020fe:	4313      	orrs	r3, r2
 8002100:	b21a      	sxth	r2, r3
 8002102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002104:	019b      	lsls	r3, r3, #6
 8002106:	b21b      	sxth	r3, r3
 8002108:	4313      	orrs	r3, r2
 800210a:	b21a      	sxth	r2, r3
 800210c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	b21b      	sxth	r3, r3
 8002112:	4313      	orrs	r3, r2
 8002114:	b21a      	sxth	r2, r3
 8002116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002118:	b21b      	sxth	r3, r3
 800211a:	4313      	orrs	r3, r2
 800211c:	b21b      	sxth	r3, r3
 800211e:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8002120:	8afa      	ldrh	r2, [r7, #22]
 8002122:	f107 0308 	add.w	r3, r7, #8
 8002126:	4611      	mov	r1, r2
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff0d 	bl	8001f48 <drv_spi_write>
}
 800212e:	bf00      	nop
 8002130:	371c      	adds	r7, #28
 8002132:	46bd      	mov	sp, r7
 8002134:	bd90      	pop	{r4, r7, pc}

08002136 <drv_write_CSACR>:
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 8002136:	b590      	push	{r4, r7, lr}
 8002138:	b087      	sub	sp, #28
 800213a:	af00      	add	r7, sp, #0
 800213c:	f107 0408 	add.w	r4, r7, #8
 8002140:	e884 0003 	stmia.w	r4, {r0, r1}
 8002144:	607a      	str	r2, [r7, #4]
 8002146:	603b      	str	r3, [r7, #0]
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	029b      	lsls	r3, r3, #10
 800214c:	b21b      	sxth	r3, r3
 800214e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002152:	b21a      	sxth	r2, r3
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	025b      	lsls	r3, r3, #9
 8002158:	b21b      	sxth	r3, r3
 800215a:	4313      	orrs	r3, r2
 800215c:	b21a      	sxth	r2, r3
 800215e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	b21b      	sxth	r3, r3
 8002164:	4313      	orrs	r3, r2
 8002166:	b21a      	sxth	r2, r3
 8002168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800216a:	019b      	lsls	r3, r3, #6
 800216c:	b21b      	sxth	r3, r3
 800216e:	4313      	orrs	r3, r2
 8002170:	b21a      	sxth	r2, r3
 8002172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002174:	015b      	lsls	r3, r3, #5
 8002176:	b21b      	sxth	r3, r3
 8002178:	4313      	orrs	r3, r2
 800217a:	b21a      	sxth	r2, r3
 800217c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	b21b      	sxth	r3, r3
 8002182:	4313      	orrs	r3, r2
 8002184:	b21a      	sxth	r2, r3
 8002186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	b21b      	sxth	r3, r3
 800218c:	4313      	orrs	r3, r2
 800218e:	b21a      	sxth	r2, r3
 8002190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	b21b      	sxth	r3, r3
 8002196:	4313      	orrs	r3, r2
 8002198:	b21a      	sxth	r2, r3
 800219a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800219c:	b21b      	sxth	r3, r3
 800219e:	4313      	orrs	r3, r2
 80021a0:	b21b      	sxth	r3, r3
 80021a2:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 80021a4:	8afa      	ldrh	r2, [r7, #22]
 80021a6:	f107 0308 	add.w	r3, r7, #8
 80021aa:	4611      	mov	r1, r2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fecb 	bl	8001f48 <drv_spi_write>
}
 80021b2:	bf00      	nop
 80021b4:	371c      	adds	r7, #28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd90      	pop	{r4, r7, pc}

080021ba <drv_enable_gd>:
void drv_enable_gd(DRVStruct drv){
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	463b      	mov	r3, r7
 80021c2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
 80021c6:	2202      	movs	r2, #2
 80021c8:	463b      	mov	r3, r7
 80021ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021ce:	f7ff ff0b 	bl	8001fe8 <drv_read_register>
 80021d2:	4603      	mov	r3, r0
 80021d4:	f023 0304 	bic.w	r3, r3, #4
 80021d8:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 80021da:	89fb      	ldrh	r3, [r7, #14]
 80021dc:	2202      	movs	r2, #2
 80021de:	4639      	mov	r1, r7
 80021e0:	c903      	ldmia	r1, {r0, r1}
 80021e2:	f7ff ff1d 	bl	8002020 <drv_write_register>
}
 80021e6:	bf00      	nop
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <drv_disable_gd>:
void drv_disable_gd(DRVStruct drv){
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b084      	sub	sp, #16
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	463b      	mov	r3, r7
 80021f6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) | (0x1<<2);
 80021fa:	2202      	movs	r2, #2
 80021fc:	463b      	mov	r3, r7
 80021fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002202:	f7ff fef1 	bl	8001fe8 <drv_read_register>
 8002206:	4603      	mov	r3, r0
 8002208:	f043 0304 	orr.w	r3, r3, #4
 800220c:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 800220e:	89fb      	ldrh	r3, [r7, #14]
 8002210:	2202      	movs	r2, #2
 8002212:	4639      	mov	r1, r7
 8002214:	c903      	ldmia	r1, {r0, r1}
 8002216:	f7ff ff03 	bl	8002020 <drv_write_register>
}
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <drv_calibrate>:
void drv_calibrate(DRVStruct drv){
 8002222:	b580      	push	{r7, lr}
 8002224:	b084      	sub	sp, #16
 8002226:	af00      	add	r7, sp, #0
 8002228:	463b      	mov	r3, r7
 800222a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (0x1<<4) + (0x1<<3) + (0x1<<2);
 800222e:	231c      	movs	r3, #28
 8002230:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, CSACR, val);
 8002232:	89fb      	ldrh	r3, [r7, #14]
 8002234:	2206      	movs	r2, #6
 8002236:	4639      	mov	r1, r7
 8002238:	c903      	ldmia	r1, {r0, r1}
 800223a:	f7ff fef1 	bl	8002020 <drv_write_register>
}
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <drv_print_faults>:
void drv_print_faults(DRVStruct drv){
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	463b      	mov	r3, r7
 8002250:	e883 0003 	stmia.w	r3, {r0, r1}
    uint16_t val1 = drv_read_FSR1(drv);
 8002254:	463b      	mov	r3, r7
 8002256:	e893 0003 	ldmia.w	r3, {r0, r1}
 800225a:	f7ff fea3 	bl	8001fa4 <drv_read_FSR1>
 800225e:	4603      	mov	r3, r0
 8002260:	81fb      	strh	r3, [r7, #14]
    uint16_t val2 = drv_read_FSR2(drv);
 8002262:	463b      	mov	r3, r7
 8002264:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002268:	f7ff fead 	bl	8001fc6 <drv_read_FSR2>
 800226c:	4603      	mov	r3, r0
 800226e:	81bb      	strh	r3, [r7, #12]

    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");}
 8002270:	89fb      	ldrh	r3, [r7, #14]
 8002272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <drv_print_faults+0x38>
 800227a:	4857      	ldr	r0, [pc, #348]	; (80023d8 <drv_print_faults+0x190>)
 800227c:	f00a fb10 	bl	800c8a0 <iprintf>

    if(val1 & (1<<9)){printf("VDS_OCP\n\r");}
 8002280:	89fb      	ldrh	r3, [r7, #14]
 8002282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <drv_print_faults+0x48>
 800228a:	4854      	ldr	r0, [pc, #336]	; (80023dc <drv_print_faults+0x194>)
 800228c:	f00a fb08 	bl	800c8a0 <iprintf>
    if(val1 & (1<<8)){printf("GDF\n\r");}
 8002290:	89fb      	ldrh	r3, [r7, #14]
 8002292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <drv_print_faults+0x58>
 800229a:	4851      	ldr	r0, [pc, #324]	; (80023e0 <drv_print_faults+0x198>)
 800229c:	f00a fb00 	bl	800c8a0 <iprintf>
    if(val1 & (1<<7)){printf("UVLO\n\r");}
 80022a0:	89fb      	ldrh	r3, [r7, #14]
 80022a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <drv_print_faults+0x68>
 80022aa:	484e      	ldr	r0, [pc, #312]	; (80023e4 <drv_print_faults+0x19c>)
 80022ac:	f00a faf8 	bl	800c8a0 <iprintf>
    if(val1 & (1<<6)){printf("OTSD\n\r");}
 80022b0:	89fb      	ldrh	r3, [r7, #14]
 80022b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <drv_print_faults+0x78>
 80022ba:	484b      	ldr	r0, [pc, #300]	; (80023e8 <drv_print_faults+0x1a0>)
 80022bc:	f00a faf0 	bl	800c8a0 <iprintf>
    if(val1 & (1<<5)){printf("VDS_HA\n\r");}
 80022c0:	89fb      	ldrh	r3, [r7, #14]
 80022c2:	f003 0320 	and.w	r3, r3, #32
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d002      	beq.n	80022d0 <drv_print_faults+0x88>
 80022ca:	4848      	ldr	r0, [pc, #288]	; (80023ec <drv_print_faults+0x1a4>)
 80022cc:	f00a fae8 	bl	800c8a0 <iprintf>
    if(val1 & (1<<4)){printf("VDS_LA\n\r");}
 80022d0:	89fb      	ldrh	r3, [r7, #14]
 80022d2:	f003 0310 	and.w	r3, r3, #16
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <drv_print_faults+0x98>
 80022da:	4845      	ldr	r0, [pc, #276]	; (80023f0 <drv_print_faults+0x1a8>)
 80022dc:	f00a fae0 	bl	800c8a0 <iprintf>
    if(val1 & (1<<3)){printf("VDS_HB\n\r");}
 80022e0:	89fb      	ldrh	r3, [r7, #14]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d002      	beq.n	80022f0 <drv_print_faults+0xa8>
 80022ea:	4842      	ldr	r0, [pc, #264]	; (80023f4 <drv_print_faults+0x1ac>)
 80022ec:	f00a fad8 	bl	800c8a0 <iprintf>
    if(val1 & (1<<2)){printf("VDS_LB\n\r");}
 80022f0:	89fb      	ldrh	r3, [r7, #14]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d002      	beq.n	8002300 <drv_print_faults+0xb8>
 80022fa:	483f      	ldr	r0, [pc, #252]	; (80023f8 <drv_print_faults+0x1b0>)
 80022fc:	f00a fad0 	bl	800c8a0 <iprintf>
    if(val1 & (1<<1)){printf("VDS_HC\n\r");}
 8002300:	89fb      	ldrh	r3, [r7, #14]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d002      	beq.n	8002310 <drv_print_faults+0xc8>
 800230a:	483c      	ldr	r0, [pc, #240]	; (80023fc <drv_print_faults+0x1b4>)
 800230c:	f00a fac8 	bl	800c8a0 <iprintf>
    if(val1 & (1)){printf("VDS_LC\n\r");}
 8002310:	89fb      	ldrh	r3, [r7, #14]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <drv_print_faults+0xd8>
 800231a:	4839      	ldr	r0, [pc, #228]	; (8002400 <drv_print_faults+0x1b8>)
 800231c:	f00a fac0 	bl	800c8a0 <iprintf>

    if(val2 & (1<<10)){printf("SA_OC\n\r");}
 8002320:	89bb      	ldrh	r3, [r7, #12]
 8002322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <drv_print_faults+0xe8>
 800232a:	4836      	ldr	r0, [pc, #216]	; (8002404 <drv_print_faults+0x1bc>)
 800232c:	f00a fab8 	bl	800c8a0 <iprintf>
    if(val2 & (1<<9)){printf("SB_OC\n\r");}
 8002330:	89bb      	ldrh	r3, [r7, #12]
 8002332:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <drv_print_faults+0xf8>
 800233a:	4833      	ldr	r0, [pc, #204]	; (8002408 <drv_print_faults+0x1c0>)
 800233c:	f00a fab0 	bl	800c8a0 <iprintf>
    if(val2 & (1<<8)){printf("SC_OC\n\r");}
 8002340:	89bb      	ldrh	r3, [r7, #12]
 8002342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <drv_print_faults+0x108>
 800234a:	4830      	ldr	r0, [pc, #192]	; (800240c <drv_print_faults+0x1c4>)
 800234c:	f00a faa8 	bl	800c8a0 <iprintf>
    if(val2 & (1<<7)){printf("OTW\n\r");}
 8002350:	89bb      	ldrh	r3, [r7, #12]
 8002352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <drv_print_faults+0x118>
 800235a:	482d      	ldr	r0, [pc, #180]	; (8002410 <drv_print_faults+0x1c8>)
 800235c:	f00a faa0 	bl	800c8a0 <iprintf>
    if(val2 & (1<<6)){printf("CPUV\n\r");}
 8002360:	89bb      	ldrh	r3, [r7, #12]
 8002362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <drv_print_faults+0x128>
 800236a:	482a      	ldr	r0, [pc, #168]	; (8002414 <drv_print_faults+0x1cc>)
 800236c:	f00a fa98 	bl	800c8a0 <iprintf>
    if(val2 & (1<<5)){printf("VGS_HA\n\r");}
 8002370:	89bb      	ldrh	r3, [r7, #12]
 8002372:	f003 0320 	and.w	r3, r3, #32
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <drv_print_faults+0x138>
 800237a:	4827      	ldr	r0, [pc, #156]	; (8002418 <drv_print_faults+0x1d0>)
 800237c:	f00a fa90 	bl	800c8a0 <iprintf>
    if(val2 & (1<<4)){printf("VGS_LA\n\r");}
 8002380:	89bb      	ldrh	r3, [r7, #12]
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <drv_print_faults+0x148>
 800238a:	4824      	ldr	r0, [pc, #144]	; (800241c <drv_print_faults+0x1d4>)
 800238c:	f00a fa88 	bl	800c8a0 <iprintf>
    if(val2 & (1<<3)){printf("VGS_HB\n\r");}
 8002390:	89bb      	ldrh	r3, [r7, #12]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <drv_print_faults+0x158>
 800239a:	4821      	ldr	r0, [pc, #132]	; (8002420 <drv_print_faults+0x1d8>)
 800239c:	f00a fa80 	bl	800c8a0 <iprintf>
    if(val2 & (1<<2)){printf("VGS_LB\n\r");}
 80023a0:	89bb      	ldrh	r3, [r7, #12]
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <drv_print_faults+0x168>
 80023aa:	481e      	ldr	r0, [pc, #120]	; (8002424 <drv_print_faults+0x1dc>)
 80023ac:	f00a fa78 	bl	800c8a0 <iprintf>
    if(val2 & (1<<1)){printf("VGS_HC\n\r");}
 80023b0:	89bb      	ldrh	r3, [r7, #12]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d002      	beq.n	80023c0 <drv_print_faults+0x178>
 80023ba:	481b      	ldr	r0, [pc, #108]	; (8002428 <drv_print_faults+0x1e0>)
 80023bc:	f00a fa70 	bl	800c8a0 <iprintf>
    if(val2 & (1)){printf("VGS_LC\n\r");}
 80023c0:	89bb      	ldrh	r3, [r7, #12]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <drv_print_faults+0x188>
 80023ca:	4818      	ldr	r0, [pc, #96]	; (800242c <drv_print_faults+0x1e4>)
 80023cc:	f00a fa68 	bl	800c8a0 <iprintf>

}
 80023d0:	bf00      	nop
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	08010260 	.word	0x08010260
 80023dc:	0801026c 	.word	0x0801026c
 80023e0:	08010278 	.word	0x08010278
 80023e4:	08010280 	.word	0x08010280
 80023e8:	08010288 	.word	0x08010288
 80023ec:	08010290 	.word	0x08010290
 80023f0:	0801029c 	.word	0x0801029c
 80023f4:	080102a8 	.word	0x080102a8
 80023f8:	080102b4 	.word	0x080102b4
 80023fc:	080102c0 	.word	0x080102c0
 8002400:	080102cc 	.word	0x080102cc
 8002404:	080102d8 	.word	0x080102d8
 8002408:	080102e0 	.word	0x080102e0
 800240c:	080102e8 	.word	0x080102e8
 8002410:	080102f0 	.word	0x080102f0
 8002414:	080102f8 	.word	0x080102f8
 8002418:	08010300 	.word	0x08010300
 800241c:	0801030c 	.word	0x0801030c
 8002420:	08010318 	.word	0x08010318
 8002424:	08010324 	.word	0x08010324
 8002428:	08010330 	.word	0x08010330
 800242c:	0801033c 	.word	0x0801033c

08002430 <flash_writer_init>:
#include "flash_writer.h"




void flash_writer_init(FlashWriter *fw, uint32_t sector) {
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
	if(sector>7) sector = 7;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2b07      	cmp	r3, #7
 800243e:	d901      	bls.n	8002444 <flash_writer_init+0x14>
 8002440:	2307      	movs	r3, #7
 8002442:	603b      	str	r3, [r7, #0]
	fw->sector = sector;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	609a      	str	r2, [r3, #8]
	fw->base = __SECTOR_ADDRS[sector];
 800244a:	4a07      	ldr	r2, [pc, #28]	; (8002468 <flash_writer_init+0x38>)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	605a      	str	r2, [r3, #4]
	fw->ready = false;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	20000000 	.word	0x20000000

0800246c <flash_writer_open>:
bool flash_writer_ready(FlashWriter fw) {
    return fw.ready;
}

void flash_writer_open(FlashWriter * fw) {
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
    FLASH_Unlock();
 8002474:	f003 fd46 	bl	8005f04 <FLASH_Unlock>
    FLASH_ClearFlag( FLASH_FLAG_EOP |  FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 8002478:	20f1      	movs	r0, #241	; 0xf1
 800247a:	f003 fdff 	bl	800607c <FLASH_ClearFlag>
    FLASH_EraseSector(__SECTORS[fw->sector], VoltageRange_3);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	4a07      	ldr	r2, [pc, #28]	; (80024a0 <flash_writer_open+0x34>)
 8002484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002488:	2102      	movs	r1, #2
 800248a:	4618      	mov	r0, r3
 800248c:	f003 fd62 	bl	8005f54 <FLASH_EraseSector>
    fw->ready = true;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	701a      	strb	r2, [r3, #0]
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000020 	.word	0x20000020

080024a4 <flash_writer_write_int>:

void flash_writer_write_int(FlashWriter fw, uint32_t index, int x) {
 80024a4:	b590      	push	{r4, r7, lr}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	1d3c      	adds	r4, r7, #4
 80024ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80024b0:	603b      	str	r3, [r7, #0]
    union UN {int a; uint32_t b;};
    union UN un;
    un.a = x;
 80024b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b4:	617b      	str	r3, [r7, #20]
    FLASH_ProgramWord(fw.base + 4 * index, un.b);
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4611      	mov	r1, r2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f003 fda6 	bl	8006014 <FLASH_ProgramWord>
}
 80024c8:	bf00      	nop
 80024ca:	371c      	adds	r7, #28
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd90      	pop	{r4, r7, pc}

080024d0 <flash_writer_write_float>:

void flash_writer_write_uint(FlashWriter fw, uint32_t index, unsigned int x) {
    FLASH_ProgramWord(fw.base + 4 * index, x);
}

void flash_writer_write_float(FlashWriter fw, uint32_t index, float x) {
 80024d0:	b590      	push	{r4, r7, lr}
 80024d2:	b089      	sub	sp, #36	; 0x24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	f107 040c 	add.w	r4, r7, #12
 80024da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80024de:	60bb      	str	r3, [r7, #8]
 80024e0:	ed87 0a01 	vstr	s0, [r7, #4]
    union UN {float a; uint32_t b;};
    union UN un;
    un.a = x;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	61fb      	str	r3, [r7, #28]
    FLASH_ProgramWord(fw.base + 4 * index, un.b);
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	69fa      	ldr	r2, [r7, #28]
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f003 fd8d 	bl	8006014 <FLASH_ProgramWord>
}
 80024fa:	bf00      	nop
 80024fc:	3724      	adds	r7, #36	; 0x24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd90      	pop	{r4, r7, pc}

08002502 <flash_writer_close>:

void flash_writer_close(FlashWriter * fw) {
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
    FLASH_Lock();
 800250a:	f003 fd13 	bl	8005f34 <FLASH_Lock>
    fw->ready = false;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <flash_read_int>:

int flash_read_int(FlashWriter fw, uint32_t index) {
 800251c:	b490      	push	{r4, r7}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	1d3c      	adds	r4, r7, #4
 8002524:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002528:	603b      	str	r3, [r7, #0]
    return *(int*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4a05      	ldr	r2, [pc, #20]	; (8002544 <flash_read_int+0x28>)
 800252e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	681b      	ldr	r3, [r3, #0]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bc90      	pop	{r4, r7}
 8002542:	4770      	bx	lr
 8002544:	20000000 	.word	0x20000000

08002548 <flash_read_float>:

uint32_t flash_read_uint(FlashWriter fw, uint32_t index) {
    return *(uint32_t*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
}

float flash_read_float(FlashWriter fw, uint32_t index) {
 8002548:	b490      	push	{r4, r7}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	1d3c      	adds	r4, r7, #4
 8002550:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002554:	603b      	str	r3, [r7, #0]
    return *(float*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4a07      	ldr	r2, [pc, #28]	; (8002578 <flash_read_float+0x30>)
 800255a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	ee07 3a90 	vmov	s15, r3
}
 800256a:	eeb0 0a67 	vmov.f32	s0, s15
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bc90      	pop	{r4, r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	20000000 	.word	0x20000000

0800257c <set_dtc>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void set_dtc(ControllerStruct *controller){
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002588:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800258e:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002594:	60fb      	str	r3, [r7, #12]

	if(INVERT_DTC){
		dtc_u = 1.0f - controller->dtc_u;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800259c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025a4:	edc7 7a05 	vstr	s15, [r7, #20]
		dtc_v = 1.0f - controller->dtc_v;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80025ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b6:	edc7 7a04 	vstr	s15, [r7, #16]
		dtc_w = 1.0f - controller->dtc_w;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80025c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025c8:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 80025cc:	4b3b      	ldr	r3, [pc, #236]	; (80026bc <set_dtc+0x140>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d136      	bne.n	8002642 <set_dtc+0xc6>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 80025d4:	4b3a      	ldr	r3, [pc, #232]	; (80026c0 <set_dtc+0x144>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025da:	ee07 3a90 	vmov	s15, r3
 80025de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80025e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ea:	4b35      	ldr	r3, [pc, #212]	; (80026c0 <set_dtc+0x144>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025f2:	ee17 2a90 	vmov	r2, s15
 80025f6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 80025f8:	4b31      	ldr	r3, [pc, #196]	; (80026c0 <set_dtc+0x144>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	ee07 3a90 	vmov	s15, r3
 8002602:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002606:	edd7 7a04 	vldr	s15, [r7, #16]
 800260a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800260e:	4b2c      	ldr	r3, [pc, #176]	; (80026c0 <set_dtc+0x144>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002616:	ee17 2a90 	vmov	r2, s15
 800261a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 800261c:	4b28      	ldr	r3, [pc, #160]	; (80026c0 <set_dtc+0x144>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002622:	ee07 3a90 	vmov	s15, r3
 8002626:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800262a:	edd7 7a03 	vldr	s15, [r7, #12]
 800262e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002632:	4b23      	ldr	r3, [pc, #140]	; (80026c0 <set_dtc+0x144>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800263a:	ee17 2a90 	vmov	r2, s15
 800263e:	63da      	str	r2, [r3, #60]	; 0x3c
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
	}
}
 8002640:	e035      	b.n	80026ae <set_dtc+0x132>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
 8002642:	4b1f      	ldr	r3, [pc, #124]	; (80026c0 <set_dtc+0x144>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	ee07 3a90 	vmov	s15, r3
 800264c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002650:	edd7 7a05 	vldr	s15, [r7, #20]
 8002654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002658:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <set_dtc+0x144>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002660:	ee17 2a90 	vmov	r2, s15
 8002664:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
 8002666:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <set_dtc+0x144>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	ee07 3a90 	vmov	s15, r3
 8002670:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002674:	edd7 7a04 	vldr	s15, [r7, #16]
 8002678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267c:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <set_dtc+0x144>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002684:	ee17 2a90 	vmov	r2, s15
 8002688:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 800268a:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <set_dtc+0x144>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002690:	ee07 3a90 	vmov	s15, r3
 8002694:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002698:	edd7 7a03 	vldr	s15, [r7, #12]
 800269c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026a0:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <set_dtc+0x144>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026a8:	ee17 2a90 	vmov	r2, s15
 80026ac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80026ae:	bf00      	nop
 80026b0:	371c      	adds	r7, #28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	20008fac 	.word	0x20008fac
 80026c0:	20009508 	.word	0x20009508

080026c4 <analog_sample>:

void analog_sample (ControllerStruct *controller){
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
	/* Sampe ADCs */
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 80026cc:	4b38      	ldr	r3, [pc, #224]	; (80027b0 <analog_sample+0xec>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10e      	bne.n	80026f2 <analog_sample+0x2e>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 80026d4:	4837      	ldr	r0, [pc, #220]	; (80027b4 <analog_sample+0xf0>)
 80026d6:	f004 fcf2 	bl	80070be <HAL_ADC_GetValue>
 80026da:	4603      	mov	r3, r0
 80026dc:	461a      	mov	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 80026e2:	4835      	ldr	r0, [pc, #212]	; (80027b8 <analog_sample+0xf4>)
 80026e4:	f004 fceb 	bl	80070be <HAL_ADC_GetValue>
 80026e8:	4603      	mov	r3, r0
 80026ea:	461a      	mov	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	e00d      	b.n	800270e <analog_sample+0x4a>
		//adc_ch_ic = ADC_CH_IC;
	}
	else{
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 80026f2:	4831      	ldr	r0, [pc, #196]	; (80027b8 <analog_sample+0xf4>)
 80026f4:	f004 fce3 	bl	80070be <HAL_ADC_GetValue>
 80026f8:	4603      	mov	r3, r0
 80026fa:	461a      	mov	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 8002700:	482c      	ldr	r0, [pc, #176]	; (80027b4 <analog_sample+0xf0>)
 8002702:	f004 fcdc 	bl	80070be <HAL_ADC_GetValue>
 8002706:	4603      	mov	r3, r0
 8002708:	461a      	mov	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	609a      	str	r2, [r3, #8]
		//adc_ch_ic = ADC_CH_IB;
	}


	HAL_ADC_Start(&ADC_CH_MAIN);
 800270e:	4829      	ldr	r0, [pc, #164]	; (80027b4 <analog_sample+0xf0>)
 8002710:	f004 fb78 	bl	8006e04 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&ADC_CH_MAIN, HAL_MAX_DELAY);
 8002714:	f04f 31ff 	mov.w	r1, #4294967295
 8002718:	4826      	ldr	r0, [pc, #152]	; (80027b4 <analog_sample+0xf0>)
 800271a:	f004 fc45 	bl	8006fa8 <HAL_ADC_PollForConversion>

	controller->adc_vbus_raw = HAL_ADC_GetValue(&ADC_CH_VBUS);
 800271e:	4827      	ldr	r0, [pc, #156]	; (80027bc <analog_sample+0xf8>)
 8002720:	f004 fccd 	bl	80070be <HAL_ADC_GetValue>
 8002724:	4603      	mov	r3, r0
 8002726:	461a      	mov	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	611a      	str	r2, [r3, #16]
	controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	ee07 3a90 	vmov	s15, r3
 8002734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002738:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80027c0 <analog_sample+0xfc>
 800273c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	edc3 7a08 	vstr	s15, [r3, #32]

    controller->i_a = controller->i_scale*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	ee07 3a90 	vmov	s15, r3
 800275c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	edc3 7a05 	vstr	s15, [r3, #20]
    controller->i_b = controller->i_scale*(float)(controller->adc_b_raw - controller->adc_b_offset);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	ee07 3a90 	vmov	s15, r3
 8002780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002784:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	edc3 7a06 	vstr	s15, [r3, #24]
    controller->i_c = -controller->i_a - controller->i_b;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	edd3 7a05 	vldr	s15, [r3, #20]
 8002794:	eeb1 7a67 	vneg.f32	s14, s15
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	edd3 7a06 	vldr	s15, [r3, #24]
 800279e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	edc3 7a07 	vstr	s15, [r3, #28]

}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20008fac 	.word	0x20008fac
 80027b4:	200002a4 	.word	0x200002a4
 80027b8:	2000025c 	.word	0x2000025c
 80027bc:	200002ec 	.word	0x200002ec
 80027c0:	3c533318 	.word	0x3c533318

080027c4 <abc>:

void abc( float theta, float d, float q, float *a, float *b, float *c){
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	ed87 0a05 	vstr	s0, [r7, #20]
 80027ce:	edc7 0a04 	vstr	s1, [r7, #16]
 80027d2:	ed87 1a03 	vstr	s2, [r7, #12]
 80027d6:	60b8      	str	r0, [r7, #8]
 80027d8:	6079      	str	r1, [r7, #4]
 80027da:	603a      	str	r2, [r7, #0]
    /* Inverse DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1 */

    float cf = cos_lut(theta);
 80027dc:	ed97 0a05 	vldr	s0, [r7, #20]
 80027e0:	f002 ffbc 	bl	800575c <cos_lut>
 80027e4:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 80027e8:	ed97 0a05 	vldr	s0, [r7, #20]
 80027ec:	f002 ff7c 	bl	80056e8 <sin_lut>
 80027f0:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 80027f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80027f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80027fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002800:	edd7 6a06 	vldr	s13, [r7, #24]
 8002804:	edd7 7a03 	vldr	s15, [r7, #12]
 8002808:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800280c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 8002816:	edd7 7a06 	vldr	s15, [r7, #24]
 800281a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80028c4 <abc+0x100>
 800281e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002822:	edd7 7a07 	vldr	s15, [r7, #28]
 8002826:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800282a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800282e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002832:	edd7 7a04 	vldr	s15, [r7, #16]
 8002836:	ee27 7a27 	vmul.f32	s14, s14, s15
 800283a:	edd7 7a07 	vldr	s15, [r7, #28]
 800283e:	eddf 6a22 	vldr	s13, [pc, #136]	; 80028c8 <abc+0x104>
 8002842:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002846:	edd7 7a06 	vldr	s15, [r7, #24]
 800284a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800284e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002852:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002856:	edd7 7a03 	vldr	s15, [r7, #12]
 800285a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800285e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	edc3 7a00 	vstr	s15, [r3]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 8002868:	edd7 7a06 	vldr	s15, [r7, #24]
 800286c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80028c8 <abc+0x104>
 8002870:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002874:	edd7 7a07 	vldr	s15, [r7, #28]
 8002878:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800287c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002880:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002884:	edd7 7a04 	vldr	s15, [r7, #16]
 8002888:	ee27 7a27 	vmul.f32	s14, s14, s15
 800288c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002890:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80028c4 <abc+0x100>
 8002894:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002898:	edd7 7a06 	vldr	s15, [r7, #24]
 800289c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80028a0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80028a4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80028a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80028ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	edc3 7a00 	vstr	s15, [r3]
    }
 80028ba:	bf00      	nop
 80028bc:	3720      	adds	r7, #32
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	3f5db3d7 	.word	0x3f5db3d7
 80028c8:	bf5db3d7 	.word	0xbf5db3d7

080028cc <dq0>:


void dq0(float theta, float a, float b, float c, float *d, float *q){
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	ed87 0a05 	vstr	s0, [r7, #20]
 80028d6:	edc7 0a04 	vstr	s1, [r7, #16]
 80028da:	ed87 1a03 	vstr	s2, [r7, #12]
 80028de:	edc7 1a02 	vstr	s3, [r7, #8]
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
    /* DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1*/

    float cf = cos_lut(theta);
 80028e6:	ed97 0a05 	vldr	s0, [r7, #20]
 80028ea:	f002 ff37 	bl	800575c <cos_lut>
 80028ee:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 80028f2:	ed97 0a05 	vldr	s0, [r7, #20]
 80028f6:	f002 fef7 	bl	80056e8 <sin_lut>
 80028fa:	ed87 0a06 	vstr	s0, [r7, #24]

    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 80028fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8002902:	edd7 7a04 	vldr	s15, [r7, #16]
 8002906:	ee27 7a27 	vmul.f32	s14, s14, s15
 800290a:	edd7 7a06 	vldr	s15, [r7, #24]
 800290e:	eddf 6a34 	vldr	s13, [pc, #208]	; 80029e0 <dq0+0x114>
 8002912:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002916:	edd7 7a07 	vldr	s15, [r7, #28]
 800291a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800291e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002922:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002926:	edd7 7a03 	vldr	s15, [r7, #12]
 800292a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800292e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002932:	edd7 7a06 	vldr	s15, [r7, #24]
 8002936:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80029e4 <dq0+0x118>
 800293a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800293e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002942:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002946:	ee67 7a86 	vmul.f32	s15, s15, s12
 800294a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800294e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002952:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002956:	ee77 7a27 	vadd.f32	s15, s14, s15
 800295a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80029e8 <dq0+0x11c>
 800295e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002968:	edd7 7a06 	vldr	s15, [r7, #24]
 800296c:	eeb1 7a67 	vneg.f32	s14, s15
 8002970:	edd7 7a04 	vldr	s15, [r7, #16]
 8002974:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002978:	edd7 7a07 	vldr	s15, [r7, #28]
 800297c:	eddf 6a19 	vldr	s13, [pc, #100]	; 80029e4 <dq0+0x118>
 8002980:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002984:	edd7 7a06 	vldr	s15, [r7, #24]
 8002988:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800298c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002990:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002994:	edd7 7a03 	vldr	s15, [r7, #12]
 8002998:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800299c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80029a4:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80029e0 <dq0+0x114>
 80029a8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80029ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80029b0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80029b4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80029b8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80029bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80029c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029c8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80029e8 <dq0+0x11c>
 80029cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	edc3 7a00 	vstr	s15, [r3]

    }
 80029d6:	bf00      	nop
 80029d8:	3720      	adds	r7, #32
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	3f5db3d7 	.word	0x3f5db3d7
 80029e4:	bf5db3d7 	.word	0xbf5db3d7
 80029e8:	3f2aaaab 	.word	0x3f2aaaab

080029ec <svm>:

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 80029ec:	b580      	push	{r7, lr}
 80029ee:	ed2d 8b02 	vpush	{d8}
 80029f2:	b08a      	sub	sp, #40	; 0x28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	ed87 0a07 	vstr	s0, [r7, #28]
 80029fa:	edc7 0a06 	vstr	s1, [r7, #24]
 80029fe:	ed87 1a05 	vstr	s2, [r7, #20]
 8002a02:	edc7 1a04 	vstr	s3, [r7, #16]
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 8002a0c:	ed97 1a04 	vldr	s2, [r7, #16]
 8002a10:	edd7 0a05 	vldr	s1, [r7, #20]
 8002a14:	ed97 0a06 	vldr	s0, [r7, #24]
 8002a18:	f002 fd83 	bl	8005522 <fminf3>
 8002a1c:	eeb0 8a40 	vmov.f32	s16, s0
 8002a20:	ed97 1a04 	vldr	s2, [r7, #16]
 8002a24:	edd7 0a05 	vldr	s1, [r7, #20]
 8002a28:	ed97 0a06 	vldr	s0, [r7, #24]
 8002a2c:	f002 fd45 	bl	80054ba <fmaxf3>
 8002a30:	eef0 7a40 	vmov.f32	s15, s0
 8002a34:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002a38:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a40:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);
 8002a44:	4b41      	ldr	r3, [pc, #260]	; (8002b4c <svm+0x160>)
 8002a46:	623b      	str	r3, [r7, #32]

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002a48:	ed97 7a06 	vldr	s14, [r7, #24]
 8002a4c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a54:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a5c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002b50 <svm+0x164>
 8002a60:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002a64:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a6c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a74:	eddf 0a37 	vldr	s1, [pc, #220]	; 8002b54 <svm+0x168>
 8002a78:	eeb0 0a67 	vmov.f32	s0, s15
 8002a7c:	f002 fce5 	bl	800544a <fast_fmaxf>
 8002a80:	eef0 7a40 	vmov.f32	s15, s0
 8002a84:	eddf 0a34 	vldr	s1, [pc, #208]	; 8002b58 <svm+0x16c>
 8002a88:	eeb0 0a67 	vmov.f32	s0, s15
 8002a8c:	f002 fcf9 	bl	8005482 <fast_fminf>
 8002a90:	eef0 7a40 	vmov.f32	s15, s0
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002a9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a9e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002aa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aae:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002b50 <svm+0x164>
 8002ab2:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002ab6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002abe:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ac6:	eddf 0a23 	vldr	s1, [pc, #140]	; 8002b54 <svm+0x168>
 8002aca:	eeb0 0a67 	vmov.f32	s0, s15
 8002ace:	f002 fcbc 	bl	800544a <fast_fmaxf>
 8002ad2:	eef0 7a40 	vmov.f32	s15, s0
 8002ad6:	eddf 0a20 	vldr	s1, [pc, #128]	; 8002b58 <svm+0x16c>
 8002ada:	eeb0 0a67 	vmov.f32	s0, s15
 8002ade:	f002 fcd0 	bl	8005482 <fast_fminf>
 8002ae2:	eef0 7a40 	vmov.f32	s15, s0
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002aec:	ed97 7a04 	vldr	s14, [r7, #16]
 8002af0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002af8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002afc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b00:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002b50 <svm+0x164>
 8002b04:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002b08:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b10:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b18:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8002b54 <svm+0x168>
 8002b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b20:	f002 fc93 	bl	800544a <fast_fmaxf>
 8002b24:	eef0 7a40 	vmov.f32	s15, s0
 8002b28:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002b58 <svm+0x16c>
 8002b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b30:	f002 fca7 	bl	8005482 <fast_fminf>
 8002b34:	eef0 7a40 	vmov.f32	s15, s0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	edc3 7a00 	vstr	s15, [r3]

    }
 8002b3e:	bf00      	nop
 8002b40:	3728      	adds	r7, #40	; 0x28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	ecbd 8b02 	vpop	{d8}
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	3ef0a3d7 	.word	0x3ef0a3d7
 8002b50:	3f933333 	.word	0x3f933333
 8002b54:	00000000 	.word	0x00000000
 8002b58:	3f70a3d7 	.word	0x3f70a3d7

08002b5c <zero_current>:

void zero_current(ControllerStruct *controller){
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]
    int adc_b_offset = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	613b      	str	r3, [r7, #16]
    int n = 1000;
 8002b6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b70:	60bb      	str	r3, [r7, #8]
    controller->dtc_u = 0.f;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	65da      	str	r2, [r3, #92]	; 0x5c
    controller->dtc_v = 0.f;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	661a      	str	r2, [r3, #96]	; 0x60
    controller->dtc_w = 0.f;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	665a      	str	r2, [r3, #100]	; 0x64
    set_dtc(controller);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff fcf6 	bl	800257c <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	e00f      	b.n	8002bb6 <zero_current+0x5a>
    	analog_sample(controller);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff fd94 	bl	80026c4 <analog_sample>
    	adc_a_offset +=  controller->adc_a_raw;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]
    	adc_b_offset += controller->adc_b_raw;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4413      	add	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
    for (int i = 0; i<n; i++){               // Average n samples
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	dbeb      	blt.n	8002b96 <zero_current+0x3a>
     }
    controller->adc_a_offset = adc_a_offset/n;
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	fb92 f2f3 	sdiv	r2, r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    controller->adc_b_offset = adc_b_offset/n;
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	fb92 f2f3 	sdiv	r2, r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

    }
 8002bda:	bf00      	nop
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
	...

08002be4 <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a53      	ldr	r2, [pc, #332]	; (8002d3c <init_controller_params+0x158>)
 8002bf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    controller->ki_q = KI_Q;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a51      	ldr	r2, [pc, #324]	; (8002d3c <init_controller_params+0x158>)
 8002bf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    controller->k_d = K_SCALE*I_BW;
 8002bfc:	4b50      	ldr	r3, [pc, #320]	; (8002d40 <init_controller_params+0x15c>)
 8002bfe:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c02:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8002d44 <init_controller_params+0x160>
 8002c06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
    controller->k_q = K_SCALE*I_BW;
 8002c10:	4b4b      	ldr	r3, [pc, #300]	; (8002d40 <init_controller_params+0x15c>)
 8002c12:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c16:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002d44 <init_controller_params+0x160>
 8002c1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8002c24:	4b46      	ldr	r3, [pc, #280]	; (8002d40 <init_controller_params+0x15c>)
 8002c26:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c2a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002d48 <init_controller_params+0x164>
 8002c2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c32:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002d4c <init_controller_params+0x168>
 8002c36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
    controller->ki_fw = .1f*controller->ki_d;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002c5e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002d50 <init_controller_params+0x16c>
 8002c62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
    controller->phase_order = PHASE_ORDER;
 8002c6c:	4b39      	ldr	r3, [pc, #228]	; (8002d54 <init_controller_params+0x170>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    controller->flux_linkage = KT/(1.5f*PPAIRS);
 8002c76:	4b32      	ldr	r3, [pc, #200]	; (8002d40 <init_controller_params+0x15c>)
 8002c78:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002c7c:	4b30      	ldr	r3, [pc, #192]	; (8002d40 <init_controller_params+0x15c>)
 8002c7e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002c82:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002c86:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
    if(I_MAX <= 40.0f){controller->i_scale = I_SCALE;}
 8002c94:	4b2a      	ldr	r3, [pc, #168]	; (8002d40 <init_controller_params+0x15c>)
 8002c96:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c9a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002d58 <init_controller_params+0x174>
 8002c9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca6:	d803      	bhi.n	8002cb0 <init_controller_params+0xcc>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a2c      	ldr	r2, [pc, #176]	; (8002d5c <init_controller_params+0x178>)
 8002cac:	675a      	str	r2, [r3, #116]	; 0x74
 8002cae:	e002      	b.n	8002cb6 <init_controller_params+0xd2>
    else{controller->i_scale = 2.0f*I_SCALE;}
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a2b      	ldr	r2, [pc, #172]	; (8002d60 <init_controller_params+0x17c>)
 8002cb4:	675a      	str	r2, [r3, #116]	; 0x74
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	e036      	b.n	8002d2a <init_controller_params+0x146>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	ee07 3a90 	vmov	s15, r3
 8002cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cc6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002d64 <init_controller_params+0x180>
 8002cca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cce:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002d68 <init_controller_params+0x184>
 8002cd2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002cd6:	ee16 0a90 	vmov	r0, s13
 8002cda:	f7fd fc55 	bl	8000588 <__aeabi_f2d>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	ec43 2b10 	vmov	d0, r2, r3
 8002ce6:	f008 fe7f 	bl	800b9e8 <exp>
 8002cea:	ec51 0b10 	vmov	r0, r1, d0
 8002cee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cf2:	4b1e      	ldr	r3, [pc, #120]	; (8002d6c <init_controller_params+0x188>)
 8002cf4:	f7fd fca0 	bl	8000638 <__aeabi_dmul>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	4619      	mov	r1, r3
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	4b1a      	ldr	r3, [pc, #104]	; (8002d70 <init_controller_params+0x18c>)
 8002d06:	f7fd fae1 	bl	80002cc <__adddf3>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4610      	mov	r0, r2
 8002d10:	4619      	mov	r1, r3
 8002d12:	f7fd ff89 	bl	8000c28 <__aeabi_d2f>
 8002d16:	4601      	mov	r1, r0
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	3342      	adds	r3, #66	; 0x42
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	3301      	adds	r3, #1
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2b7f      	cmp	r3, #127	; 0x7f
 8002d2e:	ddc5      	ble.n	8002cbc <init_controller_params+0xd8>
    }

    }
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	3cd0e560 	.word	0x3cd0e560
 8002d40:	20000694 	.word	0x20000694
 8002d44:	38fba882 	.word	0x38fba882
 8002d48:	37d1b717 	.word	0x37d1b717
 8002d4c:	40c90fdb 	.word	0x40c90fdb
 8002d50:	3dcccccd 	.word	0x3dcccccd
 8002d54:	20008fac 	.word	0x20008fac
 8002d58:	42200000 	.word	0x42200000
 8002d5c:	3ca4ffff 	.word	0x3ca4ffff
 8002d60:	3d24ffff 	.word	0x3d24ffff
 8002d64:	bc000000 	.word	0xbc000000
 8002d68:	3d03126f 	.word	0x3d03126f
 8002d6c:	3ff33333 	.word	0x3ff33333
 8002d70:	3ff00000 	.word	0x3ff00000

08002d74 <reset_foc>:

void reset_foc(ControllerStruct *controller){
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]

	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002d7c:	4b36      	ldr	r3, [pc, #216]	; (8002e58 <reset_foc+0xe4>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	ee07 3a90 	vmov	s15, r3
 8002d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d8a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d92:	4b31      	ldr	r3, [pc, #196]	; (8002e58 <reset_foc+0xe4>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d9a:	ee17 2a90 	vmov	r2, s15
 8002d9e:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002da0:	4b2d      	ldr	r3, [pc, #180]	; (8002e58 <reset_foc+0xe4>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da6:	ee07 3a90 	vmov	s15, r3
 8002daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002db2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002db6:	4b28      	ldr	r3, [pc, #160]	; (8002e58 <reset_foc+0xe4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dbe:	ee17 2a90 	vmov	r2, s15
 8002dc2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002dc4:	4b24      	ldr	r3, [pc, #144]	; (8002e58 <reset_foc+0xe4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dca:	ee07 3a90 	vmov	s15, r3
 8002dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dd2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002dd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dda:	4b1f      	ldr	r3, [pc, #124]	; (8002e58 <reset_foc+0xe4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002de2:	ee17 2a90 	vmov	r2, s15
 8002de6:	639a      	str	r2, [r3, #56]	; 0x38
    controller->i_d_des = 0;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    controller->i_q_des = 0;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    controller->i_d = 0;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	63da      	str	r2, [r3, #60]	; 0x3c
    controller->i_q = 0;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	641a      	str	r2, [r3, #64]	; 0x40
    controller->i_q_filt = 0;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	645a      	str	r2, [r3, #68]	; 0x44
    controller->q_int = 0;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    controller->d_int = 0;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    controller->v_q = 0;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	659a      	str	r2, [r3, #88]	; 0x58
    controller->v_d = 0;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	655a      	str	r2, [r3, #84]	; 0x54
    controller->fw_int = 0;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    controller->otw_flag = 0;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

    }
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	20009508 	.word	0x20009508

08002e5c <field_weaken>:
    float val2 = controller->inverter_tab[index+1];
    return val1 + (val2 - val1)*(duty*128.0f - (float)index);
}

void field_weaken(ControllerStruct *controller)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
       /// Field Weakening ///

       controller->fw_int += controller->ki_fw*(controller->v_max - 1.0f - controller->v_ref);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8002e76:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002e7a:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8002e84:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002e88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8
       controller->fw_int = fast_fmaxf(fast_fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 8002e9c:	eddf 0a40 	vldr	s1, [pc, #256]	; 8002fa0 <field_weaken+0x144>
 8002ea0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ea4:	f002 faed 	bl	8005482 <fast_fminf>
 8002ea8:	eeb0 7a40 	vmov.f32	s14, s0
 8002eac:	4b3d      	ldr	r3, [pc, #244]	; (8002fa4 <field_weaken+0x148>)
 8002eae:	edd3 7a06 	vldr	s15, [r3, #24]
 8002eb2:	eef1 7a67 	vneg.f32	s15, s15
 8002eb6:	eef0 0a67 	vmov.f32	s1, s15
 8002eba:	eeb0 0a47 	vmov.f32	s0, s14
 8002ebe:	f002 fac4 	bl	800544a <fast_fmaxf>
 8002ec2:	eef0 7a40 	vmov.f32	s15, s0
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8
       controller->i_q_des = controller->i_q_des + (controller->i_q_des > 0)*controller->fw_int + (controller->i_q_des < 0)*controller->fw_int;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002ed8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee0:	dd02      	ble.n	8002ee8 <field_weaken+0x8c>
 8002ee2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ee6:	e001      	b.n	8002eec <field_weaken+0x90>
 8002ee8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8002fa0 <field_weaken+0x144>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 8002ef2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ef6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002f00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f08:	d502      	bpl.n	8002f10 <field_weaken+0xb4>
 8002f0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f0e:	e001      	b.n	8002f14 <field_weaken+0xb8>
 8002f10:	eddf 6a23 	vldr	s13, [pc, #140]	; 8002fa0 <field_weaken+0x144>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 8002f1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
       controller->i_d_des = controller->fw_int;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	ed93 7a41 	vldr	s14, [r3, #260]	; 0x104
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8002f40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	edd3 6a2b 	vldr	s13, [r3, #172]	; 0xac
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8002f50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f58:	eeb0 0a67 	vmov.f32	s0, s15
 8002f5c:	f008 fdbe 	bl	800badc <sqrtf>
 8002f60:	ed87 0a03 	vstr	s0, [r7, #12]
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002f6a:	edd7 0a03 	vldr	s1, [r7, #12]
 8002f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f72:	f002 fa86 	bl	8005482 <fast_fminf>
 8002f76:	eeb0 7a40 	vmov.f32	s14, s0
 8002f7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f7e:	eef1 7a67 	vneg.f32	s15, s15
 8002f82:	eef0 0a67 	vmov.f32	s1, s15
 8002f86:	eeb0 0a47 	vmov.f32	s0, s14
 8002f8a:	f002 fa5e 	bl	800544a <fast_fmaxf>
 8002f8e:	eef0 7a40 	vmov.f32	s15, s0
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0


}
 8002f98:	bf00      	nop
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	00000000 	.word	0x00000000
 8002fa4:	20000694 	.word	0x20000694

08002fa8 <commutate>:
void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	62da      	str	r2, [r3, #44]	; 0x2c
		controller->dtheta_elec = encoder->elec_velocity;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	635a      	str	r2, [r3, #52]	; 0x34
		controller->dtheta_mech = encoder->velocity/GR;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8002fc8:	4b5e      	ldr	r3, [pc, #376]	; (8003144 <commutate+0x19c>)
 8002fca:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	edd3 6a03 	vldr	s13, [r3, #12]
 8002fde:	4b59      	ldr	r3, [pc, #356]	; (8003144 <commutate+0x19c>)
 8002fe0:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	ed93 7a05 	vldr	s14, [r3, #20]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	edd3 6a06 	vldr	s13, [r3, #24]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	ed93 6a07 	vldr	s12, [r3, #28]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3340      	adds	r3, #64	; 0x40
 8003010:	4619      	mov	r1, r3
 8003012:	4610      	mov	r0, r2
 8003014:	eef0 1a46 	vmov.f32	s3, s12
 8003018:	eeb0 1a66 	vmov.f32	s2, s13
 800301c:	eef0 0a47 	vmov.f32	s1, s14
 8003020:	eeb0 0a67 	vmov.f32	s0, s15
 8003024:	f7ff fc52 	bl	80028cc <dq0>

       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800302e:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8003148 <commutate+0x1a0>
 8003032:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800303c:	eddf 6a43 	vldr	s13, [pc, #268]	; 800314c <commutate+0x1a4>
 8003040:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003044:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003054:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003148 <commutate+0x1a0>
 8003058:	ee27 7a87 	vmul.f32	s14, s15, s14
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003062:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800314c <commutate+0x1a4>
 8003066:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800306a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800307a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003148 <commutate+0x1a0>
 800307e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	edd3 7a08 	vldr	s15, [r3, #32]
 8003088:	eddf 6a30 	vldr	s13, [pc, #192]	; 800314c <commutate+0x1a4>
 800308c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80030a0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003150 <commutate+0x1a8>
 80030a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030a8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003154 <commutate+0x1ac>
 80030ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030b0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003158 <commutate+0x1b0>
 80030b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
       controller->v_margin = controller->v_max - controller->v_ref;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 80030ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	edc3 7a3f 	vstr	s15, [r3, #252]	; 0xfc
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 80030d4:	4b1b      	ldr	r3, [pc, #108]	; (8003144 <commutate+0x19c>)
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 80030f0:	eeb0 0a67 	vmov.f32	s0, s15
 80030f4:	4610      	mov	r0, r2
 80030f6:	f002 fa48 	bl	800558a <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800310a:	edc7 7a07 	vstr	s15, [r7, #28]
       float i_q_error = controller->i_q_des - controller->i_q;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800311a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800311e:	edc7 7a06 	vstr	s15, [r7, #24]

       if(controller->i_q > controller->i_mag_max){
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800312e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003136:	dd13      	ble.n	8003160 <commutate+0x1b8>
    	   controller->i_mag_max = controller->i_q;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	651a      	str	r2, [r3, #80]	; 0x50
 8003140:	e00e      	b.n	8003160 <commutate+0x1b8>
 8003142:	bf00      	nop
 8003144:	20000694 	.word	0x20000694
 8003148:	3f666666 	.word	0x3f666666
 800314c:	3dcccccd 	.word	0x3dcccccd
 8003150:	3f933333 	.word	0x3f933333
 8003154:	3f70a3d7 	.word	0x3f70a3d7
 8003158:	3f13cd3a 	.word	0x3f13cd3a
 800315c:	381d4951 	.word	0x381d4951
       }


       // Calculate decoupling feed-forward voltages //

       float v_d_ff = 0.0f;//-SQRT3*controller->dtheta_elec*L_Q*controller->i_q;
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
       float v_q_ff = 0.0f;//SQRT3*controller->dtheta_elec*(0.0f*L_D*controller->i_d + controller->flux_linkage);
 8003166:	f04f 0300 	mov.w	r3, #0
 800316a:	613b      	str	r3, [r7, #16]

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003172:	edd7 7a07 	vldr	s15, [r7, #28]
 8003176:	ee27 7a27 	vmul.f32	s14, s14, s15
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8003180:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003184:	edd7 7a05 	vldr	s15, [r7, #20]
 8003188:	ee77 7a27 	vadd.f32	s15, s14, s15
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 800319e:	eef0 0a47 	vmov.f32	s1, s14
 80031a2:	eeb0 0a67 	vmov.f32	s0, s15
 80031a6:	f002 f96c 	bl	8005482 <fast_fminf>
 80031aa:	eeb0 7a40 	vmov.f32	s14, s0
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 80031b4:	eef1 7a67 	vneg.f32	s15, s15
 80031b8:	eef0 0a67 	vmov.f32	s1, s15
 80031bc:	eeb0 0a47 	vmov.f32	s0, s14
 80031c0:	f002 f943 	bl	800544a <fast_fmaxf>
 80031c4:	eef0 7a40 	vmov.f32	s15, s0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80031e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80031e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 8003202:	eef0 0a47 	vmov.f32	s1, s14
 8003206:	eeb0 0a67 	vmov.f32	s0, s15
 800320a:	f002 f93a 	bl	8005482 <fast_fminf>
 800320e:	eeb0 7a40 	vmov.f32	s14, s0
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8003218:	eef1 7a67 	vneg.f32	s15, s15
 800321c:	eef0 0a67 	vmov.f32	s1, s15
 8003220:	eeb0 0a47 	vmov.f32	s0, s14
 8003224:	f002 f911 	bl	800544a <fast_fmaxf>
 8003228:	eef0 7a40 	vmov.f32	s15, s0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
       float vq_max = controller->v_max;//sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003238:	60fb      	str	r3, [r7, #12]

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8003240:	edd7 7a06 	vldr	s15, [r7, #24]
 8003244:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800324e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003252:	edd7 7a04 	vldr	s15, [r7, #16]
 8003256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003272:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003276:	edd7 7a06 	vldr	s15, [r7, #24]
 800327a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800327e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 8003294:	eef0 0a47 	vmov.f32	s1, s14
 8003298:	eeb0 0a67 	vmov.f32	s0, s15
 800329c:	f002 f8f1 	bl	8005482 <fast_fminf>
 80032a0:	eeb0 7a40 	vmov.f32	s14, s0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 80032aa:	eef1 7a67 	vneg.f32	s15, s15
 80032ae:	eef0 0a67 	vmov.f32	s1, s15
 80032b2:	eeb0 0a47 	vmov.f32	s0, s14
 80032b6:	f002 f8c8 	bl	800544a <fast_fmaxf>
 80032ba:	eef0 7a40 	vmov.f32	s15, s0
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80032d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80032e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032e8:	eeb0 0a67 	vmov.f32	s0, s15
 80032ec:	f008 fbf6 	bl	800badc <sqrtf>
 80032f0:	eef0 7a40 	vmov.f32	s15, s0
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003300:	edd7 0a03 	vldr	s1, [r7, #12]
 8003304:	eeb0 0a67 	vmov.f32	s0, s15
 8003308:	f002 f8bb 	bl	8005482 <fast_fminf>
 800330c:	eeb0 7a40 	vmov.f32	s14, s0
 8003310:	edd7 7a03 	vldr	s15, [r7, #12]
 8003314:	eef1 7a67 	vneg.f32	s15, s15
 8003318:	eef0 0a67 	vmov.f32	s1, s15
 800331c:	eeb0 0a47 	vmov.f32	s0, s14
 8003320:	f002 f893 	bl	800544a <fast_fmaxf>
 8003324:	eef0 7a40 	vmov.f32	s15, s0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8003340:	eeb0 0a67 	vmov.f32	s0, s15
 8003344:	4610      	mov	r0, r2
 8003346:	f002 f920 	bl	800558a <limit_norm>

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003356:	ed5f 6a7f 	vldr	s13, [pc, #-508]	; 800315c <commutate+0x1b4>
 800335a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800335e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3370      	adds	r3, #112	; 0x70
 800337e:	461a      	mov	r2, r3
 8003380:	eeb0 1a66 	vmov.f32	s2, s13
 8003384:	eef0 0a47 	vmov.f32	s1, s14
 8003388:	eeb0 0a67 	vmov.f32	s0, s15
 800338c:	f7ff fa1a 	bl	80027c4 <abc>
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	ed93 6a1c 	vldr	s12, [r3, #112]	; 0x70
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f103 0160 	add.w	r1, r3, #96	; 0x60
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3364      	adds	r3, #100	; 0x64
 80033b8:	461a      	mov	r2, r3
 80033ba:	eef0 1a46 	vmov.f32	s3, s12
 80033be:	eeb0 1a66 	vmov.f32	s2, s13
 80033c2:	eef0 0a47 	vmov.f32	s1, s14
 80033c6:	eeb0 0a67 	vmov.f32	s0, s15
 80033ca:	f7ff fb0f 	bl	80029ec <svm>

       set_dtc(controller);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff f8d4 	bl	800257c <set_dtc>

    }
 80033d4:	bf00      	nop
 80033d6:	3720      	adds	r7, #32
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <torque_control>:


void torque_control(ControllerStruct *controller){
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
	/*----- convert theta_mech to 0~359.9999deg -----*/
	static float pos, round;
	pos = controller->theta_mech;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	4a76      	ldr	r2, [pc, #472]	; (80035c4 <torque_control+0x1e8>)
 80033ea:	6013      	str	r3, [r2, #0]
	modff(pos/(2*PI_F),&round);
 80033ec:	4b75      	ldr	r3, [pc, #468]	; (80035c4 <torque_control+0x1e8>)
 80033ee:	edd3 7a00 	vldr	s15, [r3]
 80033f2:	eddf 6a75 	vldr	s13, [pc, #468]	; 80035c8 <torque_control+0x1ec>
 80033f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80033fa:	4874      	ldr	r0, [pc, #464]	; (80035cc <torque_control+0x1f0>)
 80033fc:	eeb0 0a47 	vmov.f32	s0, s14
 8003400:	f008 face 	bl	800b9a0 <modff>
	pos = pos - round*2*PI_F;
 8003404:	4b6f      	ldr	r3, [pc, #444]	; (80035c4 <torque_control+0x1e8>)
 8003406:	ed93 7a00 	vldr	s14, [r3]
 800340a:	4b70      	ldr	r3, [pc, #448]	; (80035cc <torque_control+0x1f0>)
 800340c:	edd3 7a00 	vldr	s15, [r3]
 8003410:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003414:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80035d0 <torque_control+0x1f4>
 8003418:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800341c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003420:	4b68      	ldr	r3, [pc, #416]	; (80035c4 <torque_control+0x1e8>)
 8003422:	edc3 7a00 	vstr	s15, [r3]
	if(pos < 0){
 8003426:	4b67      	ldr	r3, [pc, #412]	; (80035c4 <torque_control+0x1e8>)
 8003428:	edd3 7a00 	vldr	s15, [r3]
 800342c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003434:	d509      	bpl.n	800344a <torque_control+0x6e>
		pos = pos + 2*PI_F;
 8003436:	4b63      	ldr	r3, [pc, #396]	; (80035c4 <torque_control+0x1e8>)
 8003438:	edd3 7a00 	vldr	s15, [r3]
 800343c:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80035c8 <torque_control+0x1ec>
 8003440:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003444:	4b5f      	ldr	r3, [pc, #380]	; (80035c4 <torque_control+0x1e8>)
 8003446:	edc3 7a00 	vstr	s15, [r3]
	}

	/*----- position PID control -----*/
	static float in_err = 0, err = 0; //integral of position error
	if(controller->p_des < pos){
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 8003450:	4b5c      	ldr	r3, [pc, #368]	; (80035c4 <torque_control+0x1e8>)
 8003452:	edd3 7a00 	vldr	s15, [r3]
 8003456:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800345a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345e:	d534      	bpl.n	80034ca <torque_control+0xee>
		if((controller->p_des + 2*PI_F - pos) < (pos - controller->p_des)){
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003466:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80035c8 <torque_control+0x1ec>
 800346a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800346e:	4b55      	ldr	r3, [pc, #340]	; (80035c4 <torque_control+0x1e8>)
 8003470:	edd3 7a00 	vldr	s15, [r3]
 8003474:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003478:	4b52      	ldr	r3, [pc, #328]	; (80035c4 <torque_control+0x1e8>)
 800347a:	edd3 6a00 	vldr	s13, [r3]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003484:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003488:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800348c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003490:	d50f      	bpl.n	80034b2 <torque_control+0xd6>
			err = 2*PI_F - pos + controller->p_des;
 8003492:	4b4c      	ldr	r3, [pc, #304]	; (80035c4 <torque_control+0x1e8>)
 8003494:	edd3 7a00 	vldr	s15, [r3]
 8003498:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80035c8 <torque_control+0x1ec>
 800349c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 80034a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034aa:	4b4a      	ldr	r3, [pc, #296]	; (80035d4 <torque_control+0x1f8>)
 80034ac:	edc3 7a00 	vstr	s15, [r3]
 80034b0:	e03f      	b.n	8003532 <torque_control+0x156>
		}
		else{
			err = controller->p_des - pos;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 80034b8:	4b42      	ldr	r3, [pc, #264]	; (80035c4 <torque_control+0x1e8>)
 80034ba:	edd3 7a00 	vldr	s15, [r3]
 80034be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034c2:	4b44      	ldr	r3, [pc, #272]	; (80035d4 <torque_control+0x1f8>)
 80034c4:	edc3 7a00 	vstr	s15, [r3]
 80034c8:	e033      	b.n	8003532 <torque_control+0x156>
		}
	}
	else{
		if((pos + 2*PI_F - controller->p_des) < (controller->p_des - pos)){
 80034ca:	4b3e      	ldr	r3, [pc, #248]	; (80035c4 <torque_control+0x1e8>)
 80034cc:	edd3 7a00 	vldr	s15, [r3]
 80034d0:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80035c8 <torque_control+0x1ec>
 80034d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 80034de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 80034e8:	4b36      	ldr	r3, [pc, #216]	; (80035c4 <torque_control+0x1e8>)
 80034ea:	edd3 7a00 	vldr	s15, [r3]
 80034ee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80034f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034fa:	d50f      	bpl.n	800351c <torque_control+0x140>
			err = controller->p_des - 2*PI_F - pos;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003502:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80035c8 <torque_control+0x1ec>
 8003506:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800350a:	4b2e      	ldr	r3, [pc, #184]	; (80035c4 <torque_control+0x1e8>)
 800350c:	edd3 7a00 	vldr	s15, [r3]
 8003510:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003514:	4b2f      	ldr	r3, [pc, #188]	; (80035d4 <torque_control+0x1f8>)
 8003516:	edc3 7a00 	vstr	s15, [r3]
 800351a:	e00a      	b.n	8003532 <torque_control+0x156>
		}
		else{
			err = controller->p_des - pos;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 8003522:	4b28      	ldr	r3, [pc, #160]	; (80035c4 <torque_control+0x1e8>)
 8003524:	edd3 7a00 	vldr	s15, [r3]
 8003528:	ee77 7a67 	vsub.f32	s15, s14, s15
 800352c:	4b29      	ldr	r3, [pc, #164]	; (80035d4 <torque_control+0x1f8>)
 800352e:	edc3 7a00 	vstr	s15, [r3]
		}
	}
	in_err = in_err + err;
 8003532:	4b29      	ldr	r3, [pc, #164]	; (80035d8 <torque_control+0x1fc>)
 8003534:	ed93 7a00 	vldr	s14, [r3]
 8003538:	4b26      	ldr	r3, [pc, #152]	; (80035d4 <torque_control+0x1f8>)
 800353a:	edd3 7a00 	vldr	s15, [r3]
 800353e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003542:	4b25      	ldr	r3, [pc, #148]	; (80035d8 <torque_control+0x1fc>)
 8003544:	edc3 7a00 	vstr	s15, [r3]

    float torque_ref = controller->kp*(err) + controller->t_ff + controller->ki*(in_err) + controller->kd*(-controller->dtheta_mech);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 800354e:	4b21      	ldr	r3, [pc, #132]	; (80035d4 <torque_control+0x1f8>)
 8003550:	edd3 7a00 	vldr	s15, [r3]
 8003554:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 800355e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	edd3 6a38 	vldr	s13, [r3, #224]	; 0xe0
 8003568:	4b1b      	ldr	r3, [pc, #108]	; (80035d8 <torque_control+0x1fc>)
 800356a:	edd3 7a00 	vldr	s15, [r3]
 800356e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003572:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	edd3 6a39 	vldr	s13, [r3, #228]	; 0xe4
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003582:	eef1 7a67 	vneg.f32	s15, s15
 8003586:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800358a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800358e:	edc7 7a03 	vstr	s15, [r7, #12]
    controller->i_q_des = torque_ref/(KT*GR);
 8003592:	4b12      	ldr	r3, [pc, #72]	; (80035dc <torque_control+0x200>)
 8003594:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8003598:	4b10      	ldr	r3, [pc, #64]	; (80035dc <torque_control+0x200>)
 800359a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800359e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035a2:	edd7 6a03 	vldr	s13, [r7, #12]
 80035a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
	controller->i_d_des = 0.0f;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    
    }
 80035ba:	bf00      	nop
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	2000023c 	.word	0x2000023c
 80035c8:	40c90fdb 	.word	0x40c90fdb
 80035cc:	20000240 	.word	0x20000240
 80035d0:	40490fdb 	.word	0x40490fdb
 80035d4:	20000244 	.word	0x20000244
 80035d8:	20000248 	.word	0x20000248
 80035dc:	20000694 	.word	0x20000694

080035e0 <zero_commands>:



void zero_commands(ControllerStruct * controller){
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
	controller->t_ff = 0;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	controller->kp = 0;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	controller->ki = 0;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	controller->kd = 0;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	controller->p_des = 0;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	controller->v_des = 0;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	controller->i_q_des = 0;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
	...

0800363c <run_fsm>:
#include "foc.h"
#include "math_ops.h"
#include "position_sensor.h"
#include "drv8323.h"

 void run_fsm(FSMStruct * fsmstate){
 800363c:	b590      	push	{r4, r7, lr}
 800363e:	b085      	sub	sp, #20
 8003640:	af02      	add	r7, sp, #8
 8003642:	6078      	str	r0, [r7, #4]
	 /* run_fsm is run every commutation interrupt cycle */

	 /* state transition management */
	 if(fsmstate->next_state != fsmstate->state){
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	785a      	ldrb	r2, [r3, #1]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d00d      	beq.n	800366c <run_fsm+0x30>
		 fsm_exit_state(fsmstate);		// safely exit the old state
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f9a3 	bl	800399c <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	78db      	ldrb	r3, [r3, #3]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d006      	beq.n	800366c <run_fsm+0x30>
			 fsmstate->state = fsmstate->next_state;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	785a      	ldrb	r2, [r3, #1]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	701a      	strb	r2, [r3, #0]
			 fsm_enter_state(fsmstate);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f8f2 	bl	8003850 <fsm_enter_state>
		 }
	 }

	 switch(fsmstate->state){
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b06      	cmp	r3, #6
 8003672:	f200 80d9 	bhi.w	8003828 <run_fsm+0x1ec>
 8003676:	a201      	add	r2, pc, #4	; (adr r2, 800367c <run_fsm+0x40>)
 8003678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367c:	08003827 	.word	0x08003827
 8003680:	080037e7 	.word	0x080037e7
 8003684:	0800379d 	.word	0x0800379d
 8003688:	08003829 	.word	0x08003829
 800368c:	08003827 	.word	0x08003827
 8003690:	08003699 	.word	0x08003699
 8003694:	080037dd 	.word	0x080037dd
		 case MENU_MODE:
			 break;

		 case ENCODER_CALIBRATE:
			 if(!comm_encoder_cal.done_ordering){
 8003698:	4b65      	ldr	r3, [pc, #404]	; (8003830 <run_fsm+0x1f4>)
 800369a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d108      	bne.n	80036b4 <run_fsm+0x78>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 80036a2:	4b64      	ldr	r3, [pc, #400]	; (8003834 <run_fsm+0x1f8>)
 80036a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80036a8:	4a61      	ldr	r2, [pc, #388]	; (8003830 <run_fsm+0x1f4>)
 80036aa:	4962      	ldr	r1, [pc, #392]	; (8003834 <run_fsm+0x1f8>)
 80036ac:	4862      	ldr	r0, [pc, #392]	; (8003838 <run_fsm+0x1fc>)
 80036ae:	f7fd fe61 	bl	8001374 <order_phases>
				 preference_writer_close(&prefs);
				 preference_writer_load(prefs);
				 update_fsm(fsmstate, 27);
			 }

			 break;
 80036b2:	e0b9      	b.n	8003828 <run_fsm+0x1ec>
			 else if(!comm_encoder_cal.done_cal){
 80036b4:	4b5e      	ldr	r3, [pc, #376]	; (8003830 <run_fsm+0x1f4>)
 80036b6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d108      	bne.n	80036d0 <run_fsm+0x94>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 80036be:	4b5d      	ldr	r3, [pc, #372]	; (8003834 <run_fsm+0x1f8>)
 80036c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80036c4:	4a5a      	ldr	r2, [pc, #360]	; (8003830 <run_fsm+0x1f4>)
 80036c6:	495b      	ldr	r1, [pc, #364]	; (8003834 <run_fsm+0x1f8>)
 80036c8:	485b      	ldr	r0, [pc, #364]	; (8003838 <run_fsm+0x1fc>)
 80036ca:	f7fd ff5b 	bl	8001584 <calibrate_encoder>
			 break;
 80036ce:	e0ab      	b.n	8003828 <run_fsm+0x1ec>
				 E_ZERO = comm_encoder_cal.ezero;
 80036d0:	4b57      	ldr	r3, [pc, #348]	; (8003830 <run_fsm+0x1f4>)
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	4a59      	ldr	r2, [pc, #356]	; (800383c <run_fsm+0x200>)
 80036d6:	6153      	str	r3, [r2, #20]
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 80036d8:	4b58      	ldr	r3, [pc, #352]	; (800383c <run_fsm+0x200>)
 80036da:	695c      	ldr	r4, [r3, #20]
 80036dc:	4b56      	ldr	r3, [pc, #344]	; (8003838 <run_fsm+0x1fc>)
 80036de:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80036e2:	4b56      	ldr	r3, [pc, #344]	; (800383c <run_fsm+0x200>)
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	425b      	negs	r3, r3
 80036e8:	ee07 3a90 	vmov	s15, r3
 80036ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036f4:	eddf 6a52 	vldr	s13, [pc, #328]	; 8003840 <run_fsm+0x204>
 80036f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80036fc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003700:	eeb0 0a47 	vmov.f32	s0, s14
 8003704:	f008 f9be 	bl	800ba84 <fmodf>
 8003708:	eef0 7a40 	vmov.f32	s15, s0
 800370c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003844 <run_fsm+0x208>
 8003710:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003714:	ee17 0a90 	vmov	r0, s15
 8003718:	f7fc ff36 	bl	8000588 <__aeabi_f2d>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4621      	mov	r1, r4
 8003722:	4849      	ldr	r0, [pc, #292]	; (8003848 <run_fsm+0x20c>)
 8003724:	f009 f8bc 	bl	800c8a0 <iprintf>
				 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 8003728:	4a43      	ldr	r2, [pc, #268]	; (8003838 <run_fsm+0x1fc>)
 800372a:	4b41      	ldr	r3, [pc, #260]	; (8003830 <run_fsm+0x1f4>)
 800372c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003730:	332c      	adds	r3, #44	; 0x2c
 8003732:	f102 00dc 	add.w	r0, r2, #220	; 0xdc
 8003736:	4619      	mov	r1, r3
 8003738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800373c:	461a      	mov	r2, r3
 800373e:	f008 fc2f 	bl	800bfa0 <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 8003742:	4a3e      	ldr	r2, [pc, #248]	; (800383c <run_fsm+0x200>)
 8003744:	4b3a      	ldr	r3, [pc, #232]	; (8003830 <run_fsm+0x1f4>)
 8003746:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800374a:	332c      	adds	r3, #44	; 0x2c
 800374c:	f102 001c 	add.w	r0, r2, #28
 8003750:	4619      	mov	r1, r3
 8003752:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003756:	461a      	mov	r2, r3
 8003758:	f008 fc22 	bl	800bfa0 <memcpy>
				 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 800375c:	4b3b      	ldr	r3, [pc, #236]	; (800384c <run_fsm+0x210>)
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	9200      	str	r2, [sp, #0]
 8003762:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003764:	f002 fa44 	bl	8005bf0 <preference_writer_ready>
 8003768:	4603      	mov	r3, r0
 800376a:	f083 0301 	eor.w	r3, r3, #1
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <run_fsm+0x13e>
 8003774:	4835      	ldr	r0, [pc, #212]	; (800384c <run_fsm+0x210>)
 8003776:	f002 fa2c 	bl	8005bd2 <preference_writer_open>
				 preference_writer_flush(&prefs);
 800377a:	4834      	ldr	r0, [pc, #208]	; (800384c <run_fsm+0x210>)
 800377c:	f002 fa46 	bl	8005c0c <preference_writer_flush>
				 preference_writer_close(&prefs);
 8003780:	4832      	ldr	r0, [pc, #200]	; (800384c <run_fsm+0x210>)
 8003782:	f002 fac1 	bl	8005d08 <preference_writer_close>
				 preference_writer_load(prefs);
 8003786:	4b31      	ldr	r3, [pc, #196]	; (800384c <run_fsm+0x210>)
 8003788:	691a      	ldr	r2, [r3, #16]
 800378a:	9200      	str	r2, [sp, #0]
 800378c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800378e:	f002 fa79 	bl	8005c84 <preference_writer_load>
				 update_fsm(fsmstate, 27);
 8003792:	211b      	movs	r1, #27
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f9bb 	bl	8003b10 <update_fsm>
			 break;
 800379a:	e045      	b.n	8003828 <run_fsm+0x1ec>

		 case MOTOR_MODE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 800379c:	4b27      	ldr	r3, [pc, #156]	; (800383c <run_fsm+0x200>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	dd09      	ble.n	80037b8 <run_fsm+0x17c>
 80037a4:	4b23      	ldr	r3, [pc, #140]	; (8003834 <run_fsm+0x1f8>)
 80037a6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80037aa:	4b24      	ldr	r3, [pc, #144]	; (800383c <run_fsm+0x200>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	dd02      	ble.n	80037b8 <run_fsm+0x17c>
				 zero_commands(&controller);
 80037b2:	4820      	ldr	r0, [pc, #128]	; (8003834 <run_fsm+0x1f8>)
 80037b4:	f7ff ff14 	bl	80035e0 <zero_commands>
			 }
			 /* Otherwise, commutate */

			 torque_control(&controller);
 80037b8:	481e      	ldr	r0, [pc, #120]	; (8003834 <run_fsm+0x1f8>)
 80037ba:	f7ff fe0f 	bl	80033dc <torque_control>
			 field_weaken(&controller);
 80037be:	481d      	ldr	r0, [pc, #116]	; (8003834 <run_fsm+0x1f8>)
 80037c0:	f7ff fb4c 	bl	8002e5c <field_weaken>
			 commutate(&controller, &comm_encoder);
 80037c4:	491c      	ldr	r1, [pc, #112]	; (8003838 <run_fsm+0x1fc>)
 80037c6:	481b      	ldr	r0, [pc, #108]	; (8003834 <run_fsm+0x1f8>)
 80037c8:	f7ff fbee 	bl	8002fa8 <commutate>

			 controller.timeout ++;
 80037cc:	4b19      	ldr	r3, [pc, #100]	; (8003834 <run_fsm+0x1f8>)
 80037ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80037d2:	3301      	adds	r3, #1
 80037d4:	4a17      	ldr	r2, [pc, #92]	; (8003834 <run_fsm+0x1f8>)
 80037d6:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
			 break;
 80037da:	e025      	b.n	8003828 <run_fsm+0x1ec>

		 case SETUP_MODE:
			 break;

		 case ENCODER_MODE:
			 ps_print(&comm_encoder, 100);
 80037dc:	2164      	movs	r1, #100	; 0x64
 80037de:	4816      	ldr	r0, [pc, #88]	; (8003838 <run_fsm+0x1fc>)
 80037e0:	f002 f9a0 	bl	8005b24 <ps_print>
			 break;
 80037e4:	e020      	b.n	8003828 <run_fsm+0x1ec>

		 case HALL_CALIBRATE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 80037e6:	4b15      	ldr	r3, [pc, #84]	; (800383c <run_fsm+0x200>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	dd09      	ble.n	8003802 <run_fsm+0x1c6>
 80037ee:	4b11      	ldr	r3, [pc, #68]	; (8003834 <run_fsm+0x1f8>)
 80037f0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80037f4:	4b11      	ldr	r3, [pc, #68]	; (800383c <run_fsm+0x200>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	dd02      	ble.n	8003802 <run_fsm+0x1c6>
				 zero_commands(&controller);
 80037fc:	480d      	ldr	r0, [pc, #52]	; (8003834 <run_fsm+0x1f8>)
 80037fe:	f7ff feef 	bl	80035e0 <zero_commands>
			 }
			 /* Otherwise, commutate */

			 /* Calibrate Hall Sensor */
			 hall_calibrate(fsmstate);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 ffec 	bl	80047e0 <hall_calibrate>

			 torque_control(&controller);
 8003808:	480a      	ldr	r0, [pc, #40]	; (8003834 <run_fsm+0x1f8>)
 800380a:	f7ff fde7 	bl	80033dc <torque_control>
			 commutate(&controller, &comm_encoder);
 800380e:	490a      	ldr	r1, [pc, #40]	; (8003838 <run_fsm+0x1fc>)
 8003810:	4808      	ldr	r0, [pc, #32]	; (8003834 <run_fsm+0x1f8>)
 8003812:	f7ff fbc9 	bl	8002fa8 <commutate>

			 controller.timeout ++;
 8003816:	4b07      	ldr	r3, [pc, #28]	; (8003834 <run_fsm+0x1f8>)
 8003818:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800381c:	3301      	adds	r3, #1
 800381e:	4a05      	ldr	r2, [pc, #20]	; (8003834 <run_fsm+0x1f8>)
 8003820:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
			 break;
 8003824:	e000      	b.n	8003828 <run_fsm+0x1ec>
			 break;
 8003826:	bf00      	nop
	 }

 }
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	bd90      	pop	{r4, r7, pc}
 8003830:	20000aa0 	.word	0x20000aa0
 8003834:	20000794 	.word	0x20000794
 8003838:	20000360 	.word	0x20000360
 800383c:	20008fac 	.word	0x20008fac
 8003840:	47800000 	.word	0x47800000
 8003844:	40c90fdb 	.word	0x40c90fdb
 8003848:	08010348 	.word	0x08010348
 800384c:	20000680 	.word	0x20000680

08003850 <fsm_enter_state>:

 void fsm_enter_state(FSMStruct * fsmstate){
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
	 /* Called when entering a new state
	  * Do necessary setup   */

		switch(fsmstate->state){
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b06      	cmp	r3, #6
 800385e:	d87f      	bhi.n	8003960 <fsm_enter_state+0x110>
 8003860:	a201      	add	r2, pc, #4	; (adr r2, 8003868 <fsm_enter_state+0x18>)
 8003862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003866:	bf00      	nop
 8003868:	08003885 	.word	0x08003885
 800386c:	0800392b 	.word	0x0800392b
 8003870:	080038b9 	.word	0x080038b9
 8003874:	08003961 	.word	0x08003961
 8003878:	08003895 	.word	0x08003895
 800387c:	080038cd 	.word	0x080038cd
 8003880:	080038a9 	.word	0x080038a9
			case MENU_MODE:
				if (fsmstate->print_uart_msg){
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	791b      	ldrb	r3, [r3, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d066      	beq.n	800395a <fsm_enter_state+0x10a>
					printf("\r\nEntering Main Menu\r\n");
 800388c:	4836      	ldr	r0, [pc, #216]	; (8003968 <fsm_enter_state+0x118>)
 800388e:	f009 f88d 	bl	800c9ac <puts>
				}
				break;
 8003892:	e062      	b.n	800395a <fsm_enter_state+0x10a>
			case SETUP_MODE:
				if (fsmstate->print_uart_msg){
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	791b      	ldrb	r3, [r3, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <fsm_enter_state+0x52>
					printf("\r\nEntering Setup\r\n");
 800389c:	4833      	ldr	r0, [pc, #204]	; (800396c <fsm_enter_state+0x11c>)
 800389e:	f009 f885 	bl	800c9ac <puts>
				}
				enter_setup_state();
 80038a2:	f000 fa49 	bl	8003d38 <enter_setup_state>
				break;
 80038a6:	e05b      	b.n	8003960 <fsm_enter_state+0x110>
			case ENCODER_MODE:
				if (fsmstate->print_uart_msg){
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	791b      	ldrb	r3, [r3, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d056      	beq.n	800395e <fsm_enter_state+0x10e>
					printf("\r\nEntering Encoder Mode\r\n");
 80038b0:	482f      	ldr	r0, [pc, #188]	; (8003970 <fsm_enter_state+0x120>)
 80038b2:	f009 f87b 	bl	800c9ac <puts>
				}
				break;
 80038b6:	e052      	b.n	800395e <fsm_enter_state+0x10e>
			case MOTOR_MODE:
				if (fsmstate->print_uart_msg){
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	791b      	ldrb	r3, [r3, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <fsm_enter_state+0x76>
					printf("\r\nEntering Motor Mode\r\n");
 80038c0:	482c      	ldr	r0, [pc, #176]	; (8003974 <fsm_enter_state+0x124>)
 80038c2:	f009 f873 	bl	800c9ac <puts>
				}
				enter_motor_mode();
 80038c6:	f000 ff2d 	bl	8004724 <enter_motor_mode>
				break;
 80038ca:	e049      	b.n	8003960 <fsm_enter_state+0x110>
			case ENCODER_CALIBRATE:
				if (fsmstate->print_uart_msg){
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	791b      	ldrb	r3, [r3, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <fsm_enter_state+0x8a>
					printf("\r\nEntering Encoder Calibration Mode\r\n");
 80038d4:	4828      	ldr	r0, [pc, #160]	; (8003978 <fsm_enter_state+0x128>)
 80038d6:	f009 f869 	bl	800c9ac <puts>
				}
				/* zero out all calibrations before starting */

				comm_encoder_cal.done_cal = 0;
 80038da:	4b28      	ldr	r3, [pc, #160]	; (800397c <fsm_enter_state+0x12c>)
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 80038e2:	4b26      	ldr	r3, [pc, #152]	; (800397c <fsm_enter_state+0x12c>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				comm_encoder_cal.started = 0;
 80038ea:	4b24      	ldr	r3, [pc, #144]	; (800397c <fsm_enter_state+0x12c>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	741a      	strb	r2, [r3, #16]
				comm_encoder.e_zero = 0;
 80038f0:	4b23      	ldr	r3, [pc, #140]	; (8003980 <fsm_enter_state+0x130>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 80038f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038fc:	2100      	movs	r1, #0
 80038fe:	4821      	ldr	r0, [pc, #132]	; (8003984 <fsm_enter_state+0x134>)
 8003900:	f008 fb5c 	bl	800bfbc <memset>
				drv_enable_gd(drv);
 8003904:	4b20      	ldr	r3, [pc, #128]	; (8003988 <fsm_enter_state+0x138>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	2100      	movs	r1, #0
 800390a:	4611      	mov	r1, r2
 800390c:	889a      	ldrh	r2, [r3, #4]
 800390e:	2300      	movs	r3, #0
 8003910:	f362 030f 	bfi	r3, r2, #0, #16
 8003914:	4608      	mov	r0, r1
 8003916:	4619      	mov	r1, r3
 8003918:	f7fe fc4f 	bl	80021ba <drv_enable_gd>
				GPIO_ENABLE;
 800391c:	2201      	movs	r2, #1
 800391e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003922:	481a      	ldr	r0, [pc, #104]	; (800398c <fsm_enter_state+0x13c>)
 8003924:	f004 ffe2 	bl	80088ec <HAL_GPIO_WritePin>
				break;
 8003928:	e01a      	b.n	8003960 <fsm_enter_state+0x110>
			case HALL_CALIBRATE:
				if (fsmstate->print_uart_msg){
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	791b      	ldrb	r3, [r3, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <fsm_enter_state+0xe8>
					printf("\r\nEntering Hall Calibration Mode\r\n");
 8003932:	4817      	ldr	r0, [pc, #92]	; (8003990 <fsm_enter_state+0x140>)
 8003934:	f009 f83a 	bl	800c9ac <puts>
				}
				controller.kp = 5.0f ;
 8003938:	4b16      	ldr	r3, [pc, #88]	; (8003994 <fsm_enter_state+0x144>)
 800393a:	4a17      	ldr	r2, [pc, #92]	; (8003998 <fsm_enter_state+0x148>)
 800393c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
				controller.ki = 0.0f ;
 8003940:	4b14      	ldr	r3, [pc, #80]	; (8003994 <fsm_enter_state+0x144>)
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
				controller.kd = 1.0f ;
 800394a:	4b12      	ldr	r3, [pc, #72]	; (8003994 <fsm_enter_state+0x144>)
 800394c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003950:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				enter_motor_mode();
 8003954:	f000 fee6 	bl	8004724 <enter_motor_mode>
				break;
 8003958:	e002      	b.n	8003960 <fsm_enter_state+0x110>
				break;
 800395a:	bf00      	nop
 800395c:	e000      	b.n	8003960 <fsm_enter_state+0x110>
				break;
 800395e:	bf00      	nop

		}
 }
 8003960:	bf00      	nop
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	0801035c 	.word	0x0801035c
 800396c:	08010374 	.word	0x08010374
 8003970:	08010388 	.word	0x08010388
 8003974:	080103a4 	.word	0x080103a4
 8003978:	080103bc 	.word	0x080103bc
 800397c:	20000aa0 	.word	0x20000aa0
 8003980:	20000360 	.word	0x20000360
 8003984:	2000043c 	.word	0x2000043c
 8003988:	200093d0 	.word	0x200093d0
 800398c:	40020000 	.word	0x40020000
 8003990:	080103e4 	.word	0x080103e4
 8003994:	20000794 	.word	0x20000794
 8003998:	40a00000 	.word	0x40a00000

0800399c <fsm_exit_state>:

 void fsm_exit_state(FSMStruct * fsmstate){
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
	 /* Called when exiting the current state
	  * Do necessary cleanup  */

		switch(fsmstate->state){
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	2b06      	cmp	r3, #6
 80039aa:	f200 8099 	bhi.w	8003ae0 <fsm_exit_state+0x144>
 80039ae:	a201      	add	r2, pc, #4	; (adr r2, 80039b4 <fsm_exit_state+0x18>)
 80039b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b4:	080039d1 	.word	0x080039d1
 80039b8:	08003a9d 	.word	0x08003a9d
 80039bc:	08003a13 	.word	0x08003a13
 80039c0:	08003ae1 	.word	0x08003ae1
 80039c4:	080039e7 	.word	0x080039e7
 80039c8:	08003a63 	.word	0x08003a63
 80039cc:	080039fd 	.word	0x080039fd
			case MENU_MODE:
				if (fsmstate->print_uart_msg){
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	791b      	ldrb	r3, [r3, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <fsm_exit_state+0x42>
					printf("\r\nLeaving Main Menu\r\n");
 80039d8:	4843      	ldr	r0, [pc, #268]	; (8003ae8 <fsm_exit_state+0x14c>)
 80039da:	f008 ffe7 	bl	800c9ac <puts>
				}
				fsmstate->ready = 1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	70da      	strb	r2, [r3, #3]
				break;
 80039e4:	e07c      	b.n	8003ae0 <fsm_exit_state+0x144>
			case SETUP_MODE:
				if (fsmstate->print_uart_msg){
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	791b      	ldrb	r3, [r3, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <fsm_exit_state+0x58>
					printf("\r\nLeaving Setup Menu\r\n");
 80039ee:	483f      	ldr	r0, [pc, #252]	; (8003aec <fsm_exit_state+0x150>)
 80039f0:	f008 ffdc 	bl	800c9ac <puts>
				}
				fsmstate->ready = 1;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	70da      	strb	r2, [r3, #3]
				break;
 80039fa:	e071      	b.n	8003ae0 <fsm_exit_state+0x144>
			case ENCODER_MODE:
				if (fsmstate->print_uart_msg){
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	791b      	ldrb	r3, [r3, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <fsm_exit_state+0x6e>
					printf("\r\nLeaving Encoder Mode\r\n");
 8003a04:	483a      	ldr	r0, [pc, #232]	; (8003af0 <fsm_exit_state+0x154>)
 8003a06:	f008 ffd1 	bl	800c9ac <puts>
				}
				fsmstate->ready = 1;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	70da      	strb	r2, [r3, #3]
				break;
 8003a10:	e066      	b.n	8003ae0 <fsm_exit_state+0x144>
			case MOTOR_MODE:
				/* Don't stop commutating if there are high currents or FW happening */
				//if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
				if (fsmstate->print_uart_msg){
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	791b      	ldrb	r3, [r3, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d002      	beq.n	8003a20 <fsm_exit_state+0x84>
					printf("\r\nLeaving Motor Mode\r\n");
 8003a1a:	4836      	ldr	r0, [pc, #216]	; (8003af4 <fsm_exit_state+0x158>)
 8003a1c:	f008 ffc6 	bl	800c9ac <puts>
				}
				fsmstate->ready = 1;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	70da      	strb	r2, [r3, #3]
				drv_disable_gd(drv);
 8003a26:	4b34      	ldr	r3, [pc, #208]	; (8003af8 <fsm_exit_state+0x15c>)
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	4611      	mov	r1, r2
 8003a2e:	889a      	ldrh	r2, [r3, #4]
 8003a30:	2300      	movs	r3, #0
 8003a32:	f362 030f 	bfi	r3, r2, #0, #16
 8003a36:	4608      	mov	r0, r1
 8003a38:	4619      	mov	r1, r3
 8003a3a:	f7fe fbd8 	bl	80021ee <drv_disable_gd>
				reset_foc(&controller);
 8003a3e:	482f      	ldr	r0, [pc, #188]	; (8003afc <fsm_exit_state+0x160>)
 8003a40:	f7ff f998 	bl	8002d74 <reset_foc>
				GPIO_DISABLE;
 8003a44:	2200      	movs	r2, #0
 8003a46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a4a:	482d      	ldr	r0, [pc, #180]	; (8003b00 <fsm_exit_state+0x164>)
 8003a4c:	f004 ff4e 	bl	80088ec <HAL_GPIO_WritePin>
				LED_LOW;
 8003a50:	2200      	movs	r2, #0
 8003a52:	2120      	movs	r1, #32
 8003a54:	482b      	ldr	r0, [pc, #172]	; (8003b04 <fsm_exit_state+0x168>)
 8003a56:	f004 ff49 	bl	80088ec <HAL_GPIO_WritePin>
				//}
				zero_commands(&controller);		// Set commands to zero
 8003a5a:	4828      	ldr	r0, [pc, #160]	; (8003afc <fsm_exit_state+0x160>)
 8003a5c:	f7ff fdc0 	bl	80035e0 <zero_commands>
				break;
 8003a60:	e03e      	b.n	8003ae0 <fsm_exit_state+0x144>
			case ENCODER_CALIBRATE:
				if (fsmstate->print_uart_msg){
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	791b      	ldrb	r3, [r3, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <fsm_exit_state+0xd4>
					printf("\r\nExiting Encoder Calibration Mode\r\n");
 8003a6a:	4827      	ldr	r0, [pc, #156]	; (8003b08 <fsm_exit_state+0x16c>)
 8003a6c:	f008 ff9e 	bl	800c9ac <puts>
				}
				GPIO_DISABLE;
 8003a70:	2200      	movs	r2, #0
 8003a72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a76:	4822      	ldr	r0, [pc, #136]	; (8003b00 <fsm_exit_state+0x164>)
 8003a78:	f004 ff38 	bl	80088ec <HAL_GPIO_WritePin>
				drv_disable_gd(drv);
 8003a7c:	4b1e      	ldr	r3, [pc, #120]	; (8003af8 <fsm_exit_state+0x15c>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	2100      	movs	r1, #0
 8003a82:	4611      	mov	r1, r2
 8003a84:	889a      	ldrh	r2, [r3, #4]
 8003a86:	2300      	movs	r3, #0
 8003a88:	f362 030f 	bfi	r3, r2, #0, #16
 8003a8c:	4608      	mov	r0, r1
 8003a8e:	4619      	mov	r1, r3
 8003a90:	f7fe fbad 	bl	80021ee <drv_disable_gd>
				//free(error_array);
				//free(lut_array);

				fsmstate->ready = 1;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	70da      	strb	r2, [r3, #3]
				break;
 8003a9a:	e021      	b.n	8003ae0 <fsm_exit_state+0x144>
			case HALL_CALIBRATE:
				if (fsmstate->print_uart_msg){
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	791b      	ldrb	r3, [r3, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <fsm_exit_state+0x10e>
					printf("\r\nExiting Hall Calibration Mode\r\n");
 8003aa4:	4819      	ldr	r0, [pc, #100]	; (8003b0c <fsm_exit_state+0x170>)
 8003aa6:	f008 ff81 	bl	800c9ac <puts>
				}
				GPIO_DISABLE;
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ab0:	4813      	ldr	r0, [pc, #76]	; (8003b00 <fsm_exit_state+0x164>)
 8003ab2:	f004 ff1b 	bl	80088ec <HAL_GPIO_WritePin>
				LED_LOW;
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2120      	movs	r1, #32
 8003aba:	4812      	ldr	r0, [pc, #72]	; (8003b04 <fsm_exit_state+0x168>)
 8003abc:	f004 ff16 	bl	80088ec <HAL_GPIO_WritePin>
				drv_disable_gd(drv);
 8003ac0:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <fsm_exit_state+0x15c>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	889a      	ldrh	r2, [r3, #4]
 8003aca:	2300      	movs	r3, #0
 8003acc:	f362 030f 	bfi	r3, r2, #0, #16
 8003ad0:	4608      	mov	r0, r1
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	f7fe fb8b 	bl	80021ee <drv_disable_gd>
				fsmstate->ready = 1;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	70da      	strb	r2, [r3, #3]
				break;
 8003ade:	bf00      	nop
		}

 }
 8003ae0:	bf00      	nop
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	08010408 	.word	0x08010408
 8003aec:	08010420 	.word	0x08010420
 8003af0:	08010438 	.word	0x08010438
 8003af4:	08010450 	.word	0x08010450
 8003af8:	200093d0 	.word	0x200093d0
 8003afc:	20000794 	.word	0x20000794
 8003b00:	40020000 	.word	0x40020000
 8003b04:	40020800 	.word	0x40020800
 8003b08:	08010468 	.word	0x08010468
 8003b0c:	0801048c 	.word	0x0801048c

08003b10 <update_fsm>:

 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af02      	add	r7, sp, #8
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
	if(fsm_input == MENU_CMD){	// escape to exit to rest mode
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	2b1b      	cmp	r3, #27
 8003b20:	d10d      	bne.n	8003b3e <update_fsm+0x2e>
		fsmstate->next_state = MENU_MODE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	705a      	strb	r2, [r3, #1]
		fsmstate->ready = 0;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	70da      	strb	r2, [r3, #3]
		if (fsmstate->print_uart_msg){
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	791b      	ldrb	r3, [r3, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 80c4 	beq.w	8003cc0 <update_fsm+0x1b0>
			enter_menu_state();
 8003b38:	f000 f8d2 	bl	8003ce0 <enter_menu_state>
		}
		return;
 8003b3c:	e0c0      	b.n	8003cc0 <update_fsm+0x1b0>
	}
	switch(fsmstate->state){
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	2b06      	cmp	r3, #6
 8003b44:	f200 80bf 	bhi.w	8003cc6 <update_fsm+0x1b6>
 8003b48:	a201      	add	r2, pc, #4	; (adr r2, 8003b50 <update_fsm+0x40>)
 8003b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4e:	bf00      	nop
 8003b50:	08003b6d 	.word	0x08003b6d
 8003b54:	08003cc7 	.word	0x08003cc7
 8003b58:	08003cc7 	.word	0x08003cc7
 8003b5c:	08003cc7 	.word	0x08003cc7
 8003b60:	08003c87 	.word	0x08003c87
 8003b64:	08003cc7 	.word	0x08003cc7
 8003b68:	08003cc7 	.word	0x08003cc7
		case MENU_MODE:
			switch (fsm_input){
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	3b63      	subs	r3, #99	; 0x63
 8003b70:	2b17      	cmp	r3, #23
 8003b72:	f200 80a7 	bhi.w	8003cc4 <update_fsm+0x1b4>
 8003b76:	a201      	add	r2, pc, #4	; (adr r2, 8003b7c <update_fsm+0x6c>)
 8003b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7c:	08003bdd 	.word	0x08003bdd
 8003b80:	08003cc5 	.word	0x08003cc5
 8003b84:	08003bf9 	.word	0x08003bf9
 8003b88:	08003cc5 	.word	0x08003cc5
 8003b8c:	08003cc5 	.word	0x08003cc5
 8003b90:	08003c77 	.word	0x08003c77
 8003b94:	08003cc5 	.word	0x08003cc5
 8003b98:	08003cc5 	.word	0x08003cc5
 8003b9c:	08003cc5 	.word	0x08003cc5
 8003ba0:	08003cc5 	.word	0x08003cc5
 8003ba4:	08003beb 	.word	0x08003beb
 8003ba8:	08003cc5 	.word	0x08003cc5
 8003bac:	08003cc5 	.word	0x08003cc5
 8003bb0:	08003cc5 	.word	0x08003cc5
 8003bb4:	08003cc5 	.word	0x08003cc5
 8003bb8:	08003cc5 	.word	0x08003cc5
 8003bbc:	08003c07 	.word	0x08003c07
 8003bc0:	08003cc5 	.word	0x08003cc5
 8003bc4:	08003cc5 	.word	0x08003cc5
 8003bc8:	08003cc5 	.word	0x08003cc5
 8003bcc:	08003cc5 	.word	0x08003cc5
 8003bd0:	08003cc5 	.word	0x08003cc5
 8003bd4:	08003cc5 	.word	0x08003cc5
 8003bd8:	08003c15 	.word	0x08003c15
				case ENCODER_CAL_CMD:
					fsmstate->next_state = ENCODER_CALIBRATE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2205      	movs	r2, #5
 8003be0:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	70da      	strb	r2, [r3, #3]
					break;
 8003be8:	e04c      	b.n	8003c84 <update_fsm+0x174>
				case MOTOR_CMD:
					fsmstate->next_state = MOTOR_MODE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2202      	movs	r2, #2
 8003bee:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	70da      	strb	r2, [r3, #3]
					break;
 8003bf6:	e045      	b.n	8003c84 <update_fsm+0x174>
				case ENCODER_CMD:
					fsmstate->next_state = ENCODER_MODE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2206      	movs	r2, #6
 8003bfc:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	70da      	strb	r2, [r3, #3]
					break;
 8003c04:	e03e      	b.n	8003c84 <update_fsm+0x174>
				case SETUP_CMD:
					fsmstate->next_state = SETUP_MODE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2204      	movs	r2, #4
 8003c0a:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	70da      	strb	r2, [r3, #3]
					break;
 8003c12:	e037      	b.n	8003c84 <update_fsm+0x174>
				case ZERO_CMD:
					comm_encoder.m_zero = 0;
 8003c14:	4b2d      	ldr	r3, [pc, #180]	; (8003ccc <update_fsm+0x1bc>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
					ps_sample(&comm_encoder, DT);
 8003c1c:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8003cd0 <update_fsm+0x1c0>
 8003c20:	482a      	ldr	r0, [pc, #168]	; (8003ccc <update_fsm+0x1bc>)
 8003c22:	f001 fdeb 	bl	80057fc <ps_sample>
					int zero_count = comm_encoder.count;
 8003c26:	4b29      	ldr	r3, [pc, #164]	; (8003ccc <update_fsm+0x1bc>)
 8003c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c2a:	60fb      	str	r3, [r7, #12]
					M_ZERO = zero_count;
 8003c2c:	4a29      	ldr	r2, [pc, #164]	; (8003cd4 <update_fsm+0x1c4>)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6113      	str	r3, [r2, #16]
					if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 8003c32:	4b29      	ldr	r3, [pc, #164]	; (8003cd8 <update_fsm+0x1c8>)
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	9200      	str	r2, [sp, #0]
 8003c38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c3a:	f001 ffd9 	bl	8005bf0 <preference_writer_ready>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	f083 0301 	eor.w	r3, r3, #1
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <update_fsm+0x140>
 8003c4a:	4823      	ldr	r0, [pc, #140]	; (8003cd8 <update_fsm+0x1c8>)
 8003c4c:	f001 ffc1 	bl	8005bd2 <preference_writer_open>
					preference_writer_flush(&prefs);
 8003c50:	4821      	ldr	r0, [pc, #132]	; (8003cd8 <update_fsm+0x1c8>)
 8003c52:	f001 ffdb 	bl	8005c0c <preference_writer_flush>
					preference_writer_close(&prefs);
 8003c56:	4820      	ldr	r0, [pc, #128]	; (8003cd8 <update_fsm+0x1c8>)
 8003c58:	f002 f856 	bl	8005d08 <preference_writer_close>
					preference_writer_load(prefs);
 8003c5c:	4b1e      	ldr	r3, [pc, #120]	; (8003cd8 <update_fsm+0x1c8>)
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	9200      	str	r2, [sp, #0]
 8003c62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c64:	f002 f80e 	bl	8005c84 <preference_writer_load>
					printf("\n\r  Saved new zero position:  %d\n\r\n\r", M_ZERO);
 8003c68:	4b1a      	ldr	r3, [pc, #104]	; (8003cd4 <update_fsm+0x1c4>)
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	481b      	ldr	r0, [pc, #108]	; (8003cdc <update_fsm+0x1cc>)
 8003c70:	f008 fe16 	bl	800c8a0 <iprintf>
					break;
 8003c74:	e006      	b.n	8003c84 <update_fsm+0x174>
				case HALL_CAL_CMD:
					fsmstate->next_state = HALL_CALIBRATE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	70da      	strb	r2, [r3, #3]
					break;
 8003c82:	bf00      	nop
				}
			break;
 8003c84:	e01e      	b.n	8003cc4 <update_fsm+0x1b4>
		case SETUP_MODE:
			if(fsm_input == ENTER_CMD){
 8003c86:	78fb      	ldrb	r3, [r7, #3]
 8003c88:	2b0d      	cmp	r3, #13
 8003c8a:	d103      	bne.n	8003c94 <update_fsm+0x184>
				process_user_input(fsmstate);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 fa21 	bl	80040d4 <process_user_input>
				break;
 8003c92:	e018      	b.n	8003cc6 <update_fsm+0x1b6>
			}
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	7b5b      	ldrb	r3, [r3, #13]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d103      	bne.n	8003ca4 <update_fsm+0x194>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	78fa      	ldrb	r2, [r7, #3]
 8003ca0:	739a      	strb	r2, [r3, #14]
 8003ca2:	e006      	b.n	8003cb2 <update_fsm+0x1a2>
			else{
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	7b5b      	ldrb	r3, [r3, #13]
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	4413      	add	r3, r2
 8003cae:	78fa      	ldrb	r2, [r7, #3]
 8003cb0:	715a      	strb	r2, [r3, #5]
				//fsmstate->bytecount = fsmstate->bytecount%(sizeof(fsmstate->cmd_buff)/sizeof(fsmstate->cmd_buff[0])); // reset when buffer is full
			}
			fsmstate->bytecount++;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	7b5b      	ldrb	r3, [r3, #13]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	735a      	strb	r2, [r3, #13]
			/* If enter is typed, process user input */

			break;
 8003cbe:	e002      	b.n	8003cc6 <update_fsm+0x1b6>
		return;
 8003cc0:	bf00      	nop
 8003cc2:	e000      	b.n	8003cc6 <update_fsm+0x1b6>
			break;
 8003cc4:	bf00      	nop
			break;
		case MOTOR_MODE:
			break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	20000360 	.word	0x20000360
 8003cd0:	37d1b717 	.word	0x37d1b717
 8003cd4:	20008fac 	.word	0x20008fac
 8003cd8:	20000680 	.word	0x20000680
 8003cdc:	080104b0 	.word	0x080104b0

08003ce0 <enter_menu_state>:


 void enter_menu_state(void){
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r");
 8003ce4:	480c      	ldr	r0, [pc, #48]	; (8003d18 <enter_menu_state+0x38>)
 8003ce6:	f008 fddb 	bl	800c8a0 <iprintf>
	    printf(" Commands:\n\r");
 8003cea:	480c      	ldr	r0, [pc, #48]	; (8003d1c <enter_menu_state+0x3c>)
 8003cec:	f008 fdd8 	bl	800c8a0 <iprintf>
	    printf(" m - Motor Mode\n\r");
 8003cf0:	480b      	ldr	r0, [pc, #44]	; (8003d20 <enter_menu_state+0x40>)
 8003cf2:	f008 fdd5 	bl	800c8a0 <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 8003cf6:	480b      	ldr	r0, [pc, #44]	; (8003d24 <enter_menu_state+0x44>)
 8003cf8:	f008 fdd2 	bl	800c8a0 <iprintf>
	    printf(" s - Setup\n\r");
 8003cfc:	480a      	ldr	r0, [pc, #40]	; (8003d28 <enter_menu_state+0x48>)
 8003cfe:	f008 fdcf 	bl	800c8a0 <iprintf>
	    printf(" e - Display Encoder\n\r");
 8003d02:	480a      	ldr	r0, [pc, #40]	; (8003d2c <enter_menu_state+0x4c>)
 8003d04:	f008 fdcc 	bl	800c8a0 <iprintf>
	    printf(" z - Set Zero Position\n\r");
 8003d08:	4809      	ldr	r0, [pc, #36]	; (8003d30 <enter_menu_state+0x50>)
 8003d0a:	f008 fdc9 	bl	800c8a0 <iprintf>
	    printf(" esc - Exit to Menu\n\r");
 8003d0e:	4809      	ldr	r0, [pc, #36]	; (8003d34 <enter_menu_state+0x54>)
 8003d10:	f008 fdc6 	bl	800c8a0 <iprintf>

	    //gpio.led->write(0);
 }
 8003d14:	bf00      	nop
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	080104d8 	.word	0x080104d8
 8003d1c:	080104dc 	.word	0x080104dc
 8003d20:	080104ec 	.word	0x080104ec
 8003d24:	08010500 	.word	0x08010500
 8003d28:	0801051c 	.word	0x0801051c
 8003d2c:	0801052c 	.word	0x0801052c
 8003d30:	08010544 	.word	0x08010544
 8003d34:	08010560 	.word	0x08010560

08003d38 <enter_setup_state>:

 void enter_setup_state(void){
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af04      	add	r7, sp, #16
	    printf("\r\n Configuration Options \n\r");
 8003d3e:	4898      	ldr	r0, [pc, #608]	; (8003fa0 <enter_setup_state+0x268>)
 8003d40:	f008 fdae 	bl	800c8a0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 8003d44:	4b97      	ldr	r3, [pc, #604]	; (8003fa4 <enter_setup_state+0x26c>)
 8003d46:	9301      	str	r3, [sp, #4]
 8003d48:	4b97      	ldr	r3, [pc, #604]	; (8003fa8 <enter_setup_state+0x270>)
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	4b97      	ldr	r3, [pc, #604]	; (8003fac <enter_setup_state+0x274>)
 8003d4e:	4a98      	ldr	r2, [pc, #608]	; (8003fb0 <enter_setup_state+0x278>)
 8003d50:	4998      	ldr	r1, [pc, #608]	; (8003fb4 <enter_setup_state+0x27c>)
 8003d52:	4899      	ldr	r0, [pc, #612]	; (8003fb8 <enter_setup_state+0x280>)
 8003d54:	f008 fda4 	bl	800c8a0 <iprintf>
	    printf("\r\n Motor:\r\n");
 8003d58:	4898      	ldr	r0, [pc, #608]	; (8003fbc <enter_setup_state+0x284>)
 8003d5a:	f008 fe27 	bl	800c9ac <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio",                                "0",   "-",      GR);
 8003d5e:	4b98      	ldr	r3, [pc, #608]	; (8003fc0 <enter_setup_state+0x288>)
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fc fc10 	bl	8000588 <__aeabi_f2d>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d70:	4b94      	ldr	r3, [pc, #592]	; (8003fc4 <enter_setup_state+0x28c>)
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	4b94      	ldr	r3, [pc, #592]	; (8003fc8 <enter_setup_state+0x290>)
 8003d76:	4a95      	ldr	r2, [pc, #596]	; (8003fcc <enter_setup_state+0x294>)
 8003d78:	4995      	ldr	r1, [pc, #596]	; (8003fd0 <enter_setup_state+0x298>)
 8003d7a:	4896      	ldr	r0, [pc, #600]	; (8003fd4 <enter_setup_state+0x29c>)
 8003d7c:	f008 fd90 	bl	800c8a0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "t", "Torque Constant (N-m/A)",                   "0",   "-",      KT);
 8003d80:	4b8f      	ldr	r3, [pc, #572]	; (8003fc0 <enter_setup_state+0x288>)
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fc fbff 	bl	8000588 <__aeabi_f2d>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d92:	4b8c      	ldr	r3, [pc, #560]	; (8003fc4 <enter_setup_state+0x28c>)
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	4b8c      	ldr	r3, [pc, #560]	; (8003fc8 <enter_setup_state+0x290>)
 8003d98:	4a8f      	ldr	r2, [pc, #572]	; (8003fd8 <enter_setup_state+0x2a0>)
 8003d9a:	4990      	ldr	r1, [pc, #576]	; (8003fdc <enter_setup_state+0x2a4>)
 8003d9c:	4890      	ldr	r0, [pc, #576]	; (8003fe0 <enter_setup_state+0x2a8>)
 8003d9e:	f008 fd7f 	bl	800c8a0 <iprintf>
	    printf("\r\n Control:\r\n");
 8003da2:	4890      	ldr	r0, [pc, #576]	; (8003fe4 <enter_setup_state+0x2ac>)
 8003da4:	f008 fe02 	bl	800c9ac <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "b", "Current Bandwidth (Hz)",                    "100", "2000",   I_BW);
 8003da8:	4b85      	ldr	r3, [pc, #532]	; (8003fc0 <enter_setup_state+0x288>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fc fbeb 	bl	8000588 <__aeabi_f2d>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003dba:	4b8b      	ldr	r3, [pc, #556]	; (8003fe8 <enter_setup_state+0x2b0>)
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	4b8b      	ldr	r3, [pc, #556]	; (8003fec <enter_setup_state+0x2b4>)
 8003dc0:	4a8b      	ldr	r2, [pc, #556]	; (8003ff0 <enter_setup_state+0x2b8>)
 8003dc2:	498c      	ldr	r1, [pc, #560]	; (8003ff4 <enter_setup_state+0x2bc>)
 8003dc4:	4883      	ldr	r0, [pc, #524]	; (8003fd4 <enter_setup_state+0x29c>)
 8003dc6:	f008 fd6b 	bl	800c8a0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "l", "Current Limit (A)",                         "0.0", "75.0",   I_MAX);
 8003dca:	4b7d      	ldr	r3, [pc, #500]	; (8003fc0 <enter_setup_state+0x288>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fc fbda 	bl	8000588 <__aeabi_f2d>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ddc:	4b86      	ldr	r3, [pc, #536]	; (8003ff8 <enter_setup_state+0x2c0>)
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	4b86      	ldr	r3, [pc, #536]	; (8003ffc <enter_setup_state+0x2c4>)
 8003de2:	4a87      	ldr	r2, [pc, #540]	; (8004000 <enter_setup_state+0x2c8>)
 8003de4:	4987      	ldr	r1, [pc, #540]	; (8004004 <enter_setup_state+0x2cc>)
 8003de6:	487b      	ldr	r0, [pc, #492]	; (8003fd4 <enter_setup_state+0x29c>)
 8003de8:	f008 fd5a 	bl	800c8a0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "p", "Max Position Setpoint (rad)",               "-",   "-",      P_MAX);
 8003dec:	4b74      	ldr	r3, [pc, #464]	; (8003fc0 <enter_setup_state+0x288>)
 8003dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fc fbc9 	bl	8000588 <__aeabi_f2d>
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003dfe:	4b71      	ldr	r3, [pc, #452]	; (8003fc4 <enter_setup_state+0x28c>)
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	4b70      	ldr	r3, [pc, #448]	; (8003fc4 <enter_setup_state+0x28c>)
 8003e04:	4a80      	ldr	r2, [pc, #512]	; (8004008 <enter_setup_state+0x2d0>)
 8003e06:	4981      	ldr	r1, [pc, #516]	; (800400c <enter_setup_state+0x2d4>)
 8003e08:	4872      	ldr	r0, [pc, #456]	; (8003fd4 <enter_setup_state+0x29c>)
 8003e0a:	f008 fd49 	bl	800c8a0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "v", "Max Velocity Setpoint (rad)/s",             "-",   "-",      V_MAX);
 8003e0e:	4b6c      	ldr	r3, [pc, #432]	; (8003fc0 <enter_setup_state+0x288>)
 8003e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fc fbb8 	bl	8000588 <__aeabi_f2d>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e20:	4b68      	ldr	r3, [pc, #416]	; (8003fc4 <enter_setup_state+0x28c>)
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	4b67      	ldr	r3, [pc, #412]	; (8003fc4 <enter_setup_state+0x28c>)
 8003e26:	4a7a      	ldr	r2, [pc, #488]	; (8004010 <enter_setup_state+0x2d8>)
 8003e28:	497a      	ldr	r1, [pc, #488]	; (8004014 <enter_setup_state+0x2dc>)
 8003e2a:	486a      	ldr	r0, [pc, #424]	; (8003fd4 <enter_setup_state+0x29c>)
 8003e2c:	f008 fd38 	bl	800c8a0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "k", "Max Gain for Position (N-m/rad)",           "0.0", "1000.0", KP_MAX);
 8003e30:	4b63      	ldr	r3, [pc, #396]	; (8003fc0 <enter_setup_state+0x288>)
 8003e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7fc fba7 	bl	8000588 <__aeabi_f2d>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e42:	4b75      	ldr	r3, [pc, #468]	; (8004018 <enter_setup_state+0x2e0>)
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	4b6d      	ldr	r3, [pc, #436]	; (8003ffc <enter_setup_state+0x2c4>)
 8003e48:	4a74      	ldr	r2, [pc, #464]	; (800401c <enter_setup_state+0x2e4>)
 8003e4a:	4975      	ldr	r1, [pc, #468]	; (8004020 <enter_setup_state+0x2e8>)
 8003e4c:	4861      	ldr	r0, [pc, #388]	; (8003fd4 <enter_setup_state+0x29c>)
 8003e4e:	f008 fd27 	bl	800c8a0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "i", "Max Integral Gain for Position (N-m*s/rad)","0.0", "10.0",   KI_MAX);
 8003e52:	4b5b      	ldr	r3, [pc, #364]	; (8003fc0 <enter_setup_state+0x288>)
 8003e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fc fb96 	bl	8000588 <__aeabi_f2d>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e64:	4b6f      	ldr	r3, [pc, #444]	; (8004024 <enter_setup_state+0x2ec>)
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	4b64      	ldr	r3, [pc, #400]	; (8003ffc <enter_setup_state+0x2c4>)
 8003e6a:	4a6f      	ldr	r2, [pc, #444]	; (8004028 <enter_setup_state+0x2f0>)
 8003e6c:	496f      	ldr	r1, [pc, #444]	; (800402c <enter_setup_state+0x2f4>)
 8003e6e:	4859      	ldr	r0, [pc, #356]	; (8003fd4 <enter_setup_state+0x29c>)
 8003e70:	f008 fd16 	bl	800c8a0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "d", "Max Gain for Velocity (N-m/rad/s)",         "0.0", "5.0",    KD_MAX);
 8003e74:	4b52      	ldr	r3, [pc, #328]	; (8003fc0 <enter_setup_state+0x288>)
 8003e76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fc fb85 	bl	8000588 <__aeabi_f2d>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e86:	4b6a      	ldr	r3, [pc, #424]	; (8004030 <enter_setup_state+0x2f8>)
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	4b5c      	ldr	r3, [pc, #368]	; (8003ffc <enter_setup_state+0x2c4>)
 8003e8c:	4a69      	ldr	r2, [pc, #420]	; (8004034 <enter_setup_state+0x2fc>)
 8003e8e:	496a      	ldr	r1, [pc, #424]	; (8004038 <enter_setup_state+0x300>)
 8003e90:	4850      	ldr	r0, [pc, #320]	; (8003fd4 <enter_setup_state+0x29c>)
 8003e92:	f008 fd05 	bl	800c8a0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "f", "FW Current Limit (A)",                      "0.0", "33.0",   I_FW_MAX);
 8003e96:	4b4a      	ldr	r3, [pc, #296]	; (8003fc0 <enter_setup_state+0x288>)
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fc fb74 	bl	8000588 <__aeabi_f2d>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ea8:	4b64      	ldr	r3, [pc, #400]	; (800403c <enter_setup_state+0x304>)
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	4b53      	ldr	r3, [pc, #332]	; (8003ffc <enter_setup_state+0x2c4>)
 8003eae:	4a64      	ldr	r2, [pc, #400]	; (8004040 <enter_setup_state+0x308>)
 8003eb0:	4964      	ldr	r1, [pc, #400]	; (8004044 <enter_setup_state+0x30c>)
 8003eb2:	4848      	ldr	r0, [pc, #288]	; (8003fd4 <enter_setup_state+0x29c>)
 8003eb4:	f008 fcf4 	bl	800c8a0 <iprintf>
//	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)",                "0",   "150",    TEMP_MAX);
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "c", "Continuous Current (A)",                    "0.0", "40.0",   I_MAX_CONT);
 8003eb8:	4b41      	ldr	r3, [pc, #260]	; (8003fc0 <enter_setup_state+0x288>)
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fc fb63 	bl	8000588 <__aeabi_f2d>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003eca:	4b5f      	ldr	r3, [pc, #380]	; (8004048 <enter_setup_state+0x310>)
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	4b4b      	ldr	r3, [pc, #300]	; (8003ffc <enter_setup_state+0x2c4>)
 8003ed0:	4a5e      	ldr	r2, [pc, #376]	; (800404c <enter_setup_state+0x314>)
 8003ed2:	495f      	ldr	r1, [pc, #380]	; (8004050 <enter_setup_state+0x318>)
 8003ed4:	483f      	ldr	r0, [pc, #252]	; (8003fd4 <enter_setup_state+0x29c>)
 8003ed6:	f008 fce3 	bl	800c8a0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "a", "Calibration Current (A)",                   "0.0", "20.0",   I_CAL);
 8003eda:	4b39      	ldr	r3, [pc, #228]	; (8003fc0 <enter_setup_state+0x288>)
 8003edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fc fb52 	bl	8000588 <__aeabi_f2d>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003eec:	4b59      	ldr	r3, [pc, #356]	; (8004054 <enter_setup_state+0x31c>)
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	4b42      	ldr	r3, [pc, #264]	; (8003ffc <enter_setup_state+0x2c4>)
 8003ef2:	4a59      	ldr	r2, [pc, #356]	; (8004058 <enter_setup_state+0x320>)
 8003ef4:	4959      	ldr	r1, [pc, #356]	; (800405c <enter_setup_state+0x324>)
 8003ef6:	4837      	ldr	r0, [pc, #220]	; (8003fd4 <enter_setup_state+0x29c>)
 8003ef8:	f008 fcd2 	bl	800c8a0 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %d\n\r",   "r", "Hall Calibration Direction",                "-1",  "1",      HALL_CAL_DIR);
 8003efc:	4b58      	ldr	r3, [pc, #352]	; (8004060 <enter_setup_state+0x328>)
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	9301      	str	r3, [sp, #4]
 8003f02:	4b58      	ldr	r3, [pc, #352]	; (8004064 <enter_setup_state+0x32c>)
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	4b58      	ldr	r3, [pc, #352]	; (8004068 <enter_setup_state+0x330>)
 8003f08:	4a58      	ldr	r2, [pc, #352]	; (800406c <enter_setup_state+0x334>)
 8003f0a:	4959      	ldr	r1, [pc, #356]	; (8004070 <enter_setup_state+0x338>)
 8003f0c:	4859      	ldr	r0, [pc, #356]	; (8004074 <enter_setup_state+0x33c>)
 8003f0e:	f008 fcc7 	bl	800c8a0 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "e", "Hall Calibration offset",                   "0.0", "143.0",  HALL_CAL_OFFSET);
 8003f12:	4b2b      	ldr	r3, [pc, #172]	; (8003fc0 <enter_setup_state+0x288>)
 8003f14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fc fb36 	bl	8000588 <__aeabi_f2d>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f24:	4b54      	ldr	r3, [pc, #336]	; (8004078 <enter_setup_state+0x340>)
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	4b34      	ldr	r3, [pc, #208]	; (8003ffc <enter_setup_state+0x2c4>)
 8003f2a:	4a54      	ldr	r2, [pc, #336]	; (800407c <enter_setup_state+0x344>)
 8003f2c:	4954      	ldr	r1, [pc, #336]	; (8004080 <enter_setup_state+0x348>)
 8003f2e:	4855      	ldr	r0, [pc, #340]	; (8004084 <enter_setup_state+0x34c>)
 8003f30:	f008 fcb6 	bl	800c8a0 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "s", "Hall Calibration Speed",                    "0.0", "10.0",   HALL_CAL_SPEED);
 8003f34:	4b22      	ldr	r3, [pc, #136]	; (8003fc0 <enter_setup_state+0x288>)
 8003f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7fc fb25 	bl	8000588 <__aeabi_f2d>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f46:	4b37      	ldr	r3, [pc, #220]	; (8004024 <enter_setup_state+0x2ec>)
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	4b2c      	ldr	r3, [pc, #176]	; (8003ffc <enter_setup_state+0x2c4>)
 8003f4c:	4a4e      	ldr	r2, [pc, #312]	; (8004088 <enter_setup_state+0x350>)
 8003f4e:	494f      	ldr	r1, [pc, #316]	; (800408c <enter_setup_state+0x354>)
 8003f50:	484c      	ldr	r0, [pc, #304]	; (8004084 <enter_setup_state+0x34c>)
 8003f52:	f008 fca5 	bl	800c8a0 <iprintf>
	    printf("\r\n CAN:\r\n");
 8003f56:	484e      	ldr	r0, [pc, #312]	; (8004090 <enter_setup_state+0x358>)
 8003f58:	f008 fd28 	bl	800c9ac <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "n", "CAN ID",                                    "0",   "127",    CAN_ID);
 8003f5c:	4b40      	ldr	r3, [pc, #256]	; (8004060 <enter_setup_state+0x328>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	9301      	str	r3, [sp, #4]
 8003f62:	4b4c      	ldr	r3, [pc, #304]	; (8004094 <enter_setup_state+0x35c>)
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	4b18      	ldr	r3, [pc, #96]	; (8003fc8 <enter_setup_state+0x290>)
 8003f68:	4a4b      	ldr	r2, [pc, #300]	; (8004098 <enter_setup_state+0x360>)
 8003f6a:	494c      	ldr	r1, [pc, #304]	; (800409c <enter_setup_state+0x364>)
 8003f6c:	484c      	ldr	r0, [pc, #304]	; (80040a0 <enter_setup_state+0x368>)
 8003f6e:	f008 fc97 	bl	800c8a0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN TX ID",                                 "0",   "127",    CAN_MASTER);
 8003f72:	4b3b      	ldr	r3, [pc, #236]	; (8004060 <enter_setup_state+0x328>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	9301      	str	r3, [sp, #4]
 8003f78:	4b46      	ldr	r3, [pc, #280]	; (8004094 <enter_setup_state+0x35c>)
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	4b12      	ldr	r3, [pc, #72]	; (8003fc8 <enter_setup_state+0x290>)
 8003f7e:	4a49      	ldr	r2, [pc, #292]	; (80040a4 <enter_setup_state+0x36c>)
 8003f80:	4949      	ldr	r1, [pc, #292]	; (80040a8 <enter_setup_state+0x370>)
 8003f82:	4847      	ldr	r0, [pc, #284]	; (80040a0 <enter_setup_state+0x368>)
 8003f84:	f008 fc8c 	bl	800c8a0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r",   "o", "CAN Timeout (cycles)(0 = none)",            "0",   "100000", CAN_TIMEOUT);
 8003f88:	4b35      	ldr	r3, [pc, #212]	; (8004060 <enter_setup_state+0x328>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	9301      	str	r3, [sp, #4]
 8003f8e:	4b47      	ldr	r3, [pc, #284]	; (80040ac <enter_setup_state+0x374>)
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	4b0d      	ldr	r3, [pc, #52]	; (8003fc8 <enter_setup_state+0x290>)
 8003f94:	4a46      	ldr	r2, [pc, #280]	; (80040b0 <enter_setup_state+0x378>)
 8003f96:	4947      	ldr	r1, [pc, #284]	; (80040b4 <enter_setup_state+0x37c>)
 8003f98:	4836      	ldr	r0, [pc, #216]	; (8004074 <enter_setup_state+0x33c>)
 8003f9a:	f008 fc81 	bl	800c8a0 <iprintf>
 8003f9e:	e08b      	b.n	80040b8 <enter_setup_state+0x380>
 8003fa0:	08010578 	.word	0x08010578
 8003fa4:	080105cc 	.word	0x080105cc
 8003fa8:	080105dc 	.word	0x080105dc
 8003fac:	08010594 	.word	0x08010594
 8003fb0:	08010598 	.word	0x08010598
 8003fb4:	080105a4 	.word	0x080105a4
 8003fb8:	080105ac 	.word	0x080105ac
 8003fbc:	080105e0 	.word	0x080105e0
 8003fc0:	20000694 	.word	0x20000694
 8003fc4:	08010620 	.word	0x08010620
 8003fc8:	080105ec 	.word	0x080105ec
 8003fcc:	080105f0 	.word	0x080105f0
 8003fd0:	080105fc 	.word	0x080105fc
 8003fd4:	08010600 	.word	0x08010600
 8003fd8:	08010624 	.word	0x08010624
 8003fdc:	0801063c 	.word	0x0801063c
 8003fe0:	08010640 	.word	0x08010640
 8003fe4:	08010660 	.word	0x08010660
 8003fe8:	08010690 	.word	0x08010690
 8003fec:	08010670 	.word	0x08010670
 8003ff0:	08010674 	.word	0x08010674
 8003ff4:	0801068c 	.word	0x0801068c
 8003ff8:	080106b4 	.word	0x080106b4
 8003ffc:	08010698 	.word	0x08010698
 8004000:	0801069c 	.word	0x0801069c
 8004004:	080106b0 	.word	0x080106b0
 8004008:	080106bc 	.word	0x080106bc
 800400c:	080106d8 	.word	0x080106d8
 8004010:	080106dc 	.word	0x080106dc
 8004014:	080106fc 	.word	0x080106fc
 8004018:	08010724 	.word	0x08010724
 800401c:	08010700 	.word	0x08010700
 8004020:	08010720 	.word	0x08010720
 8004024:	0801075c 	.word	0x0801075c
 8004028:	0801072c 	.word	0x0801072c
 800402c:	08010758 	.word	0x08010758
 8004030:	0801078c 	.word	0x0801078c
 8004034:	08010764 	.word	0x08010764
 8004038:	08010788 	.word	0x08010788
 800403c:	080107ac 	.word	0x080107ac
 8004040:	08010790 	.word	0x08010790
 8004044:	080107a8 	.word	0x080107a8
 8004048:	080107d0 	.word	0x080107d0
 800404c:	080107b4 	.word	0x080107b4
 8004050:	080107cc 	.word	0x080107cc
 8004054:	080107f4 	.word	0x080107f4
 8004058:	080107d8 	.word	0x080107d8
 800405c:	080107f0 	.word	0x080107f0
 8004060:	20008fac 	.word	0x20008fac
 8004064:	0801083c 	.word	0x0801083c
 8004068:	080107fc 	.word	0x080107fc
 800406c:	08010800 	.word	0x08010800
 8004070:	0801081c 	.word	0x0801081c
 8004074:	08010820 	.word	0x08010820
 8004078:	0801087c 	.word	0x0801087c
 800407c:	08010840 	.word	0x08010840
 8004080:	08010858 	.word	0x08010858
 8004084:	0801085c 	.word	0x0801085c
 8004088:	08010884 	.word	0x08010884
 800408c:	0801089c 	.word	0x0801089c
 8004090:	080108a0 	.word	0x080108a0
 8004094:	080108d8 	.word	0x080108d8
 8004098:	080108ac 	.word	0x080108ac
 800409c:	080108b4 	.word	0x080108b4
 80040a0:	080108b8 	.word	0x080108b8
 80040a4:	080108dc 	.word	0x080108dc
 80040a8:	080108e8 	.word	0x080108e8
 80040ac:	08010910 	.word	0x08010910
 80040b0:	080108ec 	.word	0x080108ec
 80040b4:	0801090c 	.word	0x0801090c
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 80040b8:	4804      	ldr	r0, [pc, #16]	; (80040cc <enter_setup_state+0x394>)
 80040ba:	f008 fbf1 	bl	800c8a0 <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 80040be:	4804      	ldr	r0, [pc, #16]	; (80040d0 <enter_setup_state+0x398>)
 80040c0:	f008 fbee 	bl	800c8a0 <iprintf>
 }
 80040c4:	bf00      	nop
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	08010918 	.word	0x08010918
 80040d0:	08010964 	.word	0x08010964

080040d4 <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af02      	add	r7, sp, #8
 80040da:	6078      	str	r0, [r7, #4]
	 /* Collects user input from serial (maybe eventually CAN) and updates settings */

	 switch (fsmstate->cmd_id){
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	7b9b      	ldrb	r3, [r3, #14]
 80040e0:	3b61      	subs	r3, #97	; 0x61
 80040e2:	2b15      	cmp	r3, #21
 80040e4:	f200 82ce 	bhi.w	8004684 <process_user_input+0x5b0>
 80040e8:	a201      	add	r2, pc, #4	; (adr r2, 80040f0 <process_user_input+0x1c>)
 80040ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ee:	bf00      	nop
 80040f0:	080044dd 	.word	0x080044dd
 80040f4:	080041d1 	.word	0x080041d1
 80040f8:	08004439 	.word	0x08004439
 80040fc:	080043a1 	.word	0x080043a1
 8004100:	08004583 	.word	0x08004583
 8004104:	080043e5 	.word	0x080043e5
 8004108:	08004149 	.word	0x08004149
 800410c:	08004685 	.word	0x08004685
 8004110:	0800435d 	.word	0x0800435d
 8004114:	08004685 	.word	0x08004685
 8004118:	08004319 	.word	0x08004319
 800411c:	08004225 	.word	0x08004225
 8004120:	08004649 	.word	0x08004649
 8004124:	0800462b 	.word	0x0800462b
 8004128:	08004667 	.word	0x08004667
 800412c:	08004279 	.word	0x08004279
 8004130:	08004685 	.word	0x08004685
 8004134:	08004531 	.word	0x08004531
 8004138:	080045d7 	.word	0x080045d7
 800413c:	0800418d 	.word	0x0800418d
 8004140:	08004685 	.word	0x08004685
 8004144:	080042c5 	.word	0x080042c5
		 case 'g':
			 GR = fmaxf(atof(fsmstate->cmd_buff), .001f);	// Limit prevents divide by zero if user tries to enter zero
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3305      	adds	r3, #5
 800414c:	4618      	mov	r0, r3
 800414e:	f007 fef5 	bl	800bf3c <atof>
 8004152:	ec53 2b10 	vmov	r2, r3, d0
 8004156:	4610      	mov	r0, r2
 8004158:	4619      	mov	r1, r3
 800415a:	f7fc fd65 	bl	8000c28 <__aeabi_d2f>
 800415e:	4603      	mov	r3, r0
 8004160:	eddf 0aca 	vldr	s1, [pc, #808]	; 800448c <process_user_input+0x3b8>
 8004164:	ee00 3a10 	vmov	s0, r3
 8004168:	f007 fbc8 	bl	800b8fc <fmaxf>
 800416c:	eef0 7a40 	vmov.f32	s15, s0
 8004170:	4bc7      	ldr	r3, [pc, #796]	; (8004490 <process_user_input+0x3bc>)
 8004172:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			 printf("GR set to %f\r\n", GR);
 8004176:	4bc6      	ldr	r3, [pc, #792]	; (8004490 <process_user_input+0x3bc>)
 8004178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417a:	4618      	mov	r0, r3
 800417c:	f7fc fa04 	bl	8000588 <__aeabi_f2d>
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	48c3      	ldr	r0, [pc, #780]	; (8004494 <process_user_input+0x3c0>)
 8004186:	f008 fb8b 	bl	800c8a0 <iprintf>
			 break;
 800418a:	e282      	b.n	8004692 <process_user_input+0x5be>
		 case 't':
			 KT = fmaxf(atof(fsmstate->cmd_buff), 0.0001f);	// Limit prevents divide by zero.  Seems like a reasonable LB?
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3305      	adds	r3, #5
 8004190:	4618      	mov	r0, r3
 8004192:	f007 fed3 	bl	800bf3c <atof>
 8004196:	ec53 2b10 	vmov	r2, r3, d0
 800419a:	4610      	mov	r0, r2
 800419c:	4619      	mov	r1, r3
 800419e:	f7fc fd43 	bl	8000c28 <__aeabi_d2f>
 80041a2:	4603      	mov	r3, r0
 80041a4:	eddf 0abc 	vldr	s1, [pc, #752]	; 8004498 <process_user_input+0x3c4>
 80041a8:	ee00 3a10 	vmov	s0, r3
 80041ac:	f007 fba6 	bl	800b8fc <fmaxf>
 80041b0:	eef0 7a40 	vmov.f32	s15, s0
 80041b4:	4bb6      	ldr	r3, [pc, #728]	; (8004490 <process_user_input+0x3bc>)
 80041b6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			 printf("KT set to %f\r\n", KT);
 80041ba:	4bb5      	ldr	r3, [pc, #724]	; (8004490 <process_user_input+0x3bc>)
 80041bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fc f9e2 	bl	8000588 <__aeabi_f2d>
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	48b4      	ldr	r0, [pc, #720]	; (800449c <process_user_input+0x3c8>)
 80041ca:	f008 fb69 	bl	800c8a0 <iprintf>
			 break;
 80041ce:	e260      	b.n	8004692 <process_user_input+0x5be>
		 case 'b':
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3305      	adds	r3, #5
 80041d4:	4618      	mov	r0, r3
 80041d6:	f007 feb1 	bl	800bf3c <atof>
 80041da:	ec53 2b10 	vmov	r2, r3, d0
 80041de:	4610      	mov	r0, r2
 80041e0:	4619      	mov	r1, r3
 80041e2:	f7fc fd21 	bl	8000c28 <__aeabi_d2f>
 80041e6:	4603      	mov	r3, r0
 80041e8:	eddf 0aad 	vldr	s1, [pc, #692]	; 80044a0 <process_user_input+0x3cc>
 80041ec:	ee00 3a10 	vmov	s0, r3
 80041f0:	f007 fb9f 	bl	800b932 <fminf>
 80041f4:	eef0 7a40 	vmov.f32	s15, s0
 80041f8:	eddf 0aaa 	vldr	s1, [pc, #680]	; 80044a4 <process_user_input+0x3d0>
 80041fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004200:	f007 fb7c 	bl	800b8fc <fmaxf>
 8004204:	eef0 7a40 	vmov.f32	s15, s0
 8004208:	4ba1      	ldr	r3, [pc, #644]	; (8004490 <process_user_input+0x3bc>)
 800420a:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 800420e:	4ba0      	ldr	r3, [pc, #640]	; (8004490 <process_user_input+0x3bc>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	4618      	mov	r0, r3
 8004214:	f7fc f9b8 	bl	8000588 <__aeabi_f2d>
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	48a2      	ldr	r0, [pc, #648]	; (80044a8 <process_user_input+0x3d4>)
 800421e:	f008 fb3f 	bl	800c8a0 <iprintf>
			 break;
 8004222:	e236      	b.n	8004692 <process_user_input+0x5be>
		 case 'l':
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 75.0f), 0.0f);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3305      	adds	r3, #5
 8004228:	4618      	mov	r0, r3
 800422a:	f007 fe87 	bl	800bf3c <atof>
 800422e:	ec53 2b10 	vmov	r2, r3, d0
 8004232:	4610      	mov	r0, r2
 8004234:	4619      	mov	r1, r3
 8004236:	f7fc fcf7 	bl	8000c28 <__aeabi_d2f>
 800423a:	4603      	mov	r3, r0
 800423c:	eddf 0a9b 	vldr	s1, [pc, #620]	; 80044ac <process_user_input+0x3d8>
 8004240:	ee00 3a10 	vmov	s0, r3
 8004244:	f007 fb75 	bl	800b932 <fminf>
 8004248:	eef0 7a40 	vmov.f32	s15, s0
 800424c:	eddf 0aa2 	vldr	s1, [pc, #648]	; 80044d8 <process_user_input+0x404>
 8004250:	eeb0 0a67 	vmov.f32	s0, s15
 8004254:	f007 fb52 	bl	800b8fc <fmaxf>
 8004258:	eef0 7a40 	vmov.f32	s15, s0
 800425c:	4b8c      	ldr	r3, [pc, #560]	; (8004490 <process_user_input+0x3bc>)
 800425e:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 8004262:	4b8b      	ldr	r3, [pc, #556]	; (8004490 <process_user_input+0x3bc>)
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	4618      	mov	r0, r3
 8004268:	f7fc f98e 	bl	8000588 <__aeabi_f2d>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	488f      	ldr	r0, [pc, #572]	; (80044b0 <process_user_input+0x3dc>)
 8004272:	f008 fb15 	bl	800c8a0 <iprintf>
			 break;
 8004276:	e20c      	b.n	8004692 <process_user_input+0x5be>
		 case 'p':
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3305      	adds	r3, #5
 800427c:	4618      	mov	r0, r3
 800427e:	f007 fe5d 	bl	800bf3c <atof>
 8004282:	ec53 2b10 	vmov	r2, r3, d0
 8004286:	4610      	mov	r0, r2
 8004288:	4619      	mov	r1, r3
 800428a:	f7fc fccd 	bl	8000c28 <__aeabi_d2f>
 800428e:	4603      	mov	r3, r0
 8004290:	eddf 0a91 	vldr	s1, [pc, #580]	; 80044d8 <process_user_input+0x404>
 8004294:	ee00 3a10 	vmov	s0, r3
 8004298:	f007 fb30 	bl	800b8fc <fmaxf>
 800429c:	eef0 7a40 	vmov.f32	s15, s0
 80042a0:	4b7b      	ldr	r3, [pc, #492]	; (8004490 <process_user_input+0x3bc>)
 80042a2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			 P_MIN = 0;
 80042a6:	4b7a      	ldr	r3, [pc, #488]	; (8004490 <process_user_input+0x3bc>)
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	64da      	str	r2, [r3, #76]	; 0x4c
			 printf("P_MAX set to %f\r\n", P_MAX);
 80042ae:	4b78      	ldr	r3, [pc, #480]	; (8004490 <process_user_input+0x3bc>)
 80042b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fc f968 	bl	8000588 <__aeabi_f2d>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	487d      	ldr	r0, [pc, #500]	; (80044b4 <process_user_input+0x3e0>)
 80042be:	f008 faef 	bl	800c8a0 <iprintf>
			 break;
 80042c2:	e1e6      	b.n	8004692 <process_user_input+0x5be>
		 case 'v':
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3305      	adds	r3, #5
 80042c8:	4618      	mov	r0, r3
 80042ca:	f007 fe37 	bl	800bf3c <atof>
 80042ce:	ec53 2b10 	vmov	r2, r3, d0
 80042d2:	4610      	mov	r0, r2
 80042d4:	4619      	mov	r1, r3
 80042d6:	f7fc fca7 	bl	8000c28 <__aeabi_d2f>
 80042da:	4603      	mov	r3, r0
 80042dc:	eddf 0a7e 	vldr	s1, [pc, #504]	; 80044d8 <process_user_input+0x404>
 80042e0:	ee00 3a10 	vmov	s0, r3
 80042e4:	f007 fb0a 	bl	800b8fc <fmaxf>
 80042e8:	eef0 7a40 	vmov.f32	s15, s0
 80042ec:	4b68      	ldr	r3, [pc, #416]	; (8004490 <process_user_input+0x3bc>)
 80042ee:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			 V_MIN = -V_MAX;
 80042f2:	4b67      	ldr	r3, [pc, #412]	; (8004490 <process_user_input+0x3bc>)
 80042f4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80042f8:	eef1 7a67 	vneg.f32	s15, s15
 80042fc:	4b64      	ldr	r3, [pc, #400]	; (8004490 <process_user_input+0x3bc>)
 80042fe:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			 printf("V_MAX set to %f\r\n", V_MAX);
 8004302:	4b63      	ldr	r3, [pc, #396]	; (8004490 <process_user_input+0x3bc>)
 8004304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004306:	4618      	mov	r0, r3
 8004308:	f7fc f93e 	bl	8000588 <__aeabi_f2d>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4869      	ldr	r0, [pc, #420]	; (80044b8 <process_user_input+0x3e4>)
 8004312:	f008 fac5 	bl	800c8a0 <iprintf>
			 break;
 8004316:	e1bc      	b.n	8004692 <process_user_input+0x5be>
		 case 'k':
			 KP_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3305      	adds	r3, #5
 800431c:	4618      	mov	r0, r3
 800431e:	f007 fe0d 	bl	800bf3c <atof>
 8004322:	ec53 2b10 	vmov	r2, r3, d0
 8004326:	4610      	mov	r0, r2
 8004328:	4619      	mov	r1, r3
 800432a:	f7fc fc7d 	bl	8000c28 <__aeabi_d2f>
 800432e:	4603      	mov	r3, r0
 8004330:	eddf 0a69 	vldr	s1, [pc, #420]	; 80044d8 <process_user_input+0x404>
 8004334:	ee00 3a10 	vmov	s0, r3
 8004338:	f007 fae0 	bl	800b8fc <fmaxf>
 800433c:	eef0 7a40 	vmov.f32	s15, s0
 8004340:	4b53      	ldr	r3, [pc, #332]	; (8004490 <process_user_input+0x3bc>)
 8004342:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 printf("KP_MAX set to %f\r\n", KP_MAX);
 8004346:	4b52      	ldr	r3, [pc, #328]	; (8004490 <process_user_input+0x3bc>)
 8004348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434a:	4618      	mov	r0, r3
 800434c:	f7fc f91c 	bl	8000588 <__aeabi_f2d>
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	4859      	ldr	r0, [pc, #356]	; (80044bc <process_user_input+0x3e8>)
 8004356:	f008 faa3 	bl	800c8a0 <iprintf>
			 break;
 800435a:	e19a      	b.n	8004692 <process_user_input+0x5be>
		 case 'i':
			 KI_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3305      	adds	r3, #5
 8004360:	4618      	mov	r0, r3
 8004362:	f007 fdeb 	bl	800bf3c <atof>
 8004366:	ec53 2b10 	vmov	r2, r3, d0
 800436a:	4610      	mov	r0, r2
 800436c:	4619      	mov	r1, r3
 800436e:	f7fc fc5b 	bl	8000c28 <__aeabi_d2f>
 8004372:	4603      	mov	r3, r0
 8004374:	eddf 0a58 	vldr	s1, [pc, #352]	; 80044d8 <process_user_input+0x404>
 8004378:	ee00 3a10 	vmov	s0, r3
 800437c:	f007 fabe 	bl	800b8fc <fmaxf>
 8004380:	eef0 7a40 	vmov.f32	s15, s0
 8004384:	4b42      	ldr	r3, [pc, #264]	; (8004490 <process_user_input+0x3bc>)
 8004386:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			 printf("KI_MAX set to %f\r\n", KI_MAX);
 800438a:	4b41      	ldr	r3, [pc, #260]	; (8004490 <process_user_input+0x3bc>)
 800438c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800438e:	4618      	mov	r0, r3
 8004390:	f7fc f8fa 	bl	8000588 <__aeabi_f2d>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4849      	ldr	r0, [pc, #292]	; (80044c0 <process_user_input+0x3ec>)
 800439a:	f008 fa81 	bl	800c8a0 <iprintf>
			 break;
 800439e:	e178      	b.n	8004692 <process_user_input+0x5be>
		 case 'd':
			 KD_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3305      	adds	r3, #5
 80043a4:	4618      	mov	r0, r3
 80043a6:	f007 fdc9 	bl	800bf3c <atof>
 80043aa:	ec53 2b10 	vmov	r2, r3, d0
 80043ae:	4610      	mov	r0, r2
 80043b0:	4619      	mov	r1, r3
 80043b2:	f7fc fc39 	bl	8000c28 <__aeabi_d2f>
 80043b6:	4603      	mov	r3, r0
 80043b8:	eddf 0a47 	vldr	s1, [pc, #284]	; 80044d8 <process_user_input+0x404>
 80043bc:	ee00 3a10 	vmov	s0, r3
 80043c0:	f007 fa9c 	bl	800b8fc <fmaxf>
 80043c4:	eef0 7a40 	vmov.f32	s15, s0
 80043c8:	4b31      	ldr	r3, [pc, #196]	; (8004490 <process_user_input+0x3bc>)
 80043ca:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			 printf("KD_MAX set to %f\r\n", KD_MAX);
 80043ce:	4b30      	ldr	r3, [pc, #192]	; (8004490 <process_user_input+0x3bc>)
 80043d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fc f8d8 	bl	8000588 <__aeabi_f2d>
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	4839      	ldr	r0, [pc, #228]	; (80044c4 <process_user_input+0x3f0>)
 80043de:	f008 fa5f 	bl	800c8a0 <iprintf>
			 break;
 80043e2:	e156      	b.n	8004692 <process_user_input+0x5be>
		 case 'f':
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3305      	adds	r3, #5
 80043e8:	4618      	mov	r0, r3
 80043ea:	f007 fda7 	bl	800bf3c <atof>
 80043ee:	ec53 2b10 	vmov	r2, r3, d0
 80043f2:	4610      	mov	r0, r2
 80043f4:	4619      	mov	r1, r3
 80043f6:	f7fc fc17 	bl	8000c28 <__aeabi_d2f>
 80043fa:	4603      	mov	r3, r0
 80043fc:	eddf 0a32 	vldr	s1, [pc, #200]	; 80044c8 <process_user_input+0x3f4>
 8004400:	ee00 3a10 	vmov	s0, r3
 8004404:	f007 fa95 	bl	800b932 <fminf>
 8004408:	eef0 7a40 	vmov.f32	s15, s0
 800440c:	eddf 0a32 	vldr	s1, [pc, #200]	; 80044d8 <process_user_input+0x404>
 8004410:	eeb0 0a67 	vmov.f32	s0, s15
 8004414:	f007 fa72 	bl	800b8fc <fmaxf>
 8004418:	eef0 7a40 	vmov.f32	s15, s0
 800441c:	4b1c      	ldr	r3, [pc, #112]	; (8004490 <process_user_input+0x3bc>)
 800441e:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 8004422:	4b1b      	ldr	r3, [pc, #108]	; (8004490 <process_user_input+0x3bc>)
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	4618      	mov	r0, r3
 8004428:	f7fc f8ae 	bl	8000588 <__aeabi_f2d>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4826      	ldr	r0, [pc, #152]	; (80044cc <process_user_input+0x3f8>)
 8004432:	f008 fa35 	bl	800c8a0 <iprintf>
			 break;
 8004436:	e12c      	b.n	8004692 <process_user_input+0x5be>
		 case 'c':
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3305      	adds	r3, #5
 800443c:	4618      	mov	r0, r3
 800443e:	f007 fd7d 	bl	800bf3c <atof>
 8004442:	ec53 2b10 	vmov	r2, r3, d0
 8004446:	4610      	mov	r0, r2
 8004448:	4619      	mov	r1, r3
 800444a:	f7fc fbed 	bl	8000c28 <__aeabi_d2f>
 800444e:	4603      	mov	r3, r0
 8004450:	eddf 0a1f 	vldr	s1, [pc, #124]	; 80044d0 <process_user_input+0x3fc>
 8004454:	ee00 3a10 	vmov	s0, r3
 8004458:	f007 fa6b 	bl	800b932 <fminf>
 800445c:	eef0 7a40 	vmov.f32	s15, s0
 8004460:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80044d8 <process_user_input+0x404>
 8004464:	eeb0 0a67 	vmov.f32	s0, s15
 8004468:	f007 fa48 	bl	800b8fc <fmaxf>
 800446c:	eef0 7a40 	vmov.f32	s15, s0
 8004470:	4b07      	ldr	r3, [pc, #28]	; (8004490 <process_user_input+0x3bc>)
 8004472:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 8004476:	4b06      	ldr	r3, [pc, #24]	; (8004490 <process_user_input+0x3bc>)
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	4618      	mov	r0, r3
 800447c:	f7fc f884 	bl	8000588 <__aeabi_f2d>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4813      	ldr	r0, [pc, #76]	; (80044d4 <process_user_input+0x400>)
 8004486:	f008 fa0b 	bl	800c8a0 <iprintf>
			 break;
 800448a:	e102      	b.n	8004692 <process_user_input+0x5be>
 800448c:	3a83126f 	.word	0x3a83126f
 8004490:	20000694 	.word	0x20000694
 8004494:	08010990 	.word	0x08010990
 8004498:	38d1b717 	.word	0x38d1b717
 800449c:	080109a0 	.word	0x080109a0
 80044a0:	44fa0000 	.word	0x44fa0000
 80044a4:	42c80000 	.word	0x42c80000
 80044a8:	080109b0 	.word	0x080109b0
 80044ac:	42960000 	.word	0x42960000
 80044b0:	080109c4 	.word	0x080109c4
 80044b4:	080109d8 	.word	0x080109d8
 80044b8:	080109ec 	.word	0x080109ec
 80044bc:	08010a00 	.word	0x08010a00
 80044c0:	08010a14 	.word	0x08010a14
 80044c4:	08010a28 	.word	0x08010a28
 80044c8:	42040000 	.word	0x42040000
 80044cc:	08010a3c 	.word	0x08010a3c
 80044d0:	42200000 	.word	0x42200000
 80044d4:	08010a54 	.word	0x08010a54
 80044d8:	00000000 	.word	0x00000000
		 case 'a':
			 I_CAL = fmaxf(fminf(atof(fsmstate->cmd_buff), 20.0f), 0.0f);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3305      	adds	r3, #5
 80044e0:	4618      	mov	r0, r3
 80044e2:	f007 fd2b 	bl	800bf3c <atof>
 80044e6:	ec53 2b10 	vmov	r2, r3, d0
 80044ea:	4610      	mov	r0, r2
 80044ec:	4619      	mov	r1, r3
 80044ee:	f7fc fb9b 	bl	8000c28 <__aeabi_d2f>
 80044f2:	4603      	mov	r3, r0
 80044f4:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 80044f8:	ee00 3a10 	vmov	s0, r3
 80044fc:	f007 fa19 	bl	800b932 <fminf>
 8004500:	eef0 7a40 	vmov.f32	s15, s0
 8004504:	ed5f 0a0c 	vldr	s1, [pc, #-48]	; 80044d8 <process_user_input+0x404>
 8004508:	eeb0 0a67 	vmov.f32	s0, s15
 800450c:	f007 f9f6 	bl	800b8fc <fmaxf>
 8004510:	eef0 7a40 	vmov.f32	s15, s0
 8004514:	4b76      	ldr	r3, [pc, #472]	; (80046f0 <process_user_input+0x61c>)
 8004516:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			 printf("I_CAL set to %f\r\n", I_CAL);
 800451a:	4b75      	ldr	r3, [pc, #468]	; (80046f0 <process_user_input+0x61c>)
 800451c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800451e:	4618      	mov	r0, r3
 8004520:	f7fc f832 	bl	8000588 <__aeabi_f2d>
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	4872      	ldr	r0, [pc, #456]	; (80046f4 <process_user_input+0x620>)
 800452a:	f008 f9b9 	bl	800c8a0 <iprintf>
			 break;
 800452e:	e0b0      	b.n	8004692 <process_user_input+0x5be>
		 case 'r':
			 HALL_CAL_DIR = fmaxf(fminf(atof(fsmstate->cmd_buff), 1.0f), -1.0f);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3305      	adds	r3, #5
 8004534:	4618      	mov	r0, r3
 8004536:	f007 fd01 	bl	800bf3c <atof>
 800453a:	ec53 2b10 	vmov	r2, r3, d0
 800453e:	4610      	mov	r0, r2
 8004540:	4619      	mov	r1, r3
 8004542:	f7fc fb71 	bl	8000c28 <__aeabi_d2f>
 8004546:	4603      	mov	r3, r0
 8004548:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800454c:	ee00 3a10 	vmov	s0, r3
 8004550:	f007 f9ef 	bl	800b932 <fminf>
 8004554:	eef0 7a40 	vmov.f32	s15, s0
 8004558:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 800455c:	eeb0 0a67 	vmov.f32	s0, s15
 8004560:	f007 f9cc 	bl	800b8fc <fmaxf>
 8004564:	eef0 7a40 	vmov.f32	s15, s0
 8004568:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800456c:	ee17 2a90 	vmov	r2, s15
 8004570:	4b61      	ldr	r3, [pc, #388]	; (80046f8 <process_user_input+0x624>)
 8004572:	619a      	str	r2, [r3, #24]
			 printf("HALL_CAL_DIR set to %d\r\n", HALL_CAL_DIR);
 8004574:	4b60      	ldr	r3, [pc, #384]	; (80046f8 <process_user_input+0x624>)
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	4619      	mov	r1, r3
 800457a:	4860      	ldr	r0, [pc, #384]	; (80046fc <process_user_input+0x628>)
 800457c:	f008 f990 	bl	800c8a0 <iprintf>
			 break;
 8004580:	e087      	b.n	8004692 <process_user_input+0x5be>
		 case 'e':
			 HALL_CAL_OFFSET = fmaxf(fminf(atof(fsmstate->cmd_buff), 143.0f), 0.0f);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3305      	adds	r3, #5
 8004586:	4618      	mov	r0, r3
 8004588:	f007 fcd8 	bl	800bf3c <atof>
 800458c:	ec53 2b10 	vmov	r2, r3, d0
 8004590:	4610      	mov	r0, r2
 8004592:	4619      	mov	r1, r3
 8004594:	f7fc fb48 	bl	8000c28 <__aeabi_d2f>
 8004598:	4603      	mov	r3, r0
 800459a:	eddf 0a59 	vldr	s1, [pc, #356]	; 8004700 <process_user_input+0x62c>
 800459e:	ee00 3a10 	vmov	s0, r3
 80045a2:	f007 f9c6 	bl	800b932 <fminf>
 80045a6:	eef0 7a40 	vmov.f32	s15, s0
 80045aa:	eddf 0a56 	vldr	s1, [pc, #344]	; 8004704 <process_user_input+0x630>
 80045ae:	eeb0 0a67 	vmov.f32	s0, s15
 80045b2:	f007 f9a3 	bl	800b8fc <fmaxf>
 80045b6:	eef0 7a40 	vmov.f32	s15, s0
 80045ba:	4b4d      	ldr	r3, [pc, #308]	; (80046f0 <process_user_input+0x61c>)
 80045bc:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			 printf("HALL_CAL_OFFSET set to %f\r\n", HALL_CAL_OFFSET);
 80045c0:	4b4b      	ldr	r3, [pc, #300]	; (80046f0 <process_user_input+0x61c>)
 80045c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fb ffdf 	bl	8000588 <__aeabi_f2d>
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	484e      	ldr	r0, [pc, #312]	; (8004708 <process_user_input+0x634>)
 80045d0:	f008 f966 	bl	800c8a0 <iprintf>
			 break;
 80045d4:	e05d      	b.n	8004692 <process_user_input+0x5be>
		 case 's':
			 HALL_CAL_SPEED = fmaxf(fminf(atof(fsmstate->cmd_buff), 10.0f), 0.0f);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3305      	adds	r3, #5
 80045da:	4618      	mov	r0, r3
 80045dc:	f007 fcae 	bl	800bf3c <atof>
 80045e0:	ec53 2b10 	vmov	r2, r3, d0
 80045e4:	4610      	mov	r0, r2
 80045e6:	4619      	mov	r1, r3
 80045e8:	f7fc fb1e 	bl	8000c28 <__aeabi_d2f>
 80045ec:	4603      	mov	r3, r0
 80045ee:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80045f2:	ee00 3a10 	vmov	s0, r3
 80045f6:	f007 f99c 	bl	800b932 <fminf>
 80045fa:	eef0 7a40 	vmov.f32	s15, s0
 80045fe:	eddf 0a41 	vldr	s1, [pc, #260]	; 8004704 <process_user_input+0x630>
 8004602:	eeb0 0a67 	vmov.f32	s0, s15
 8004606:	f007 f979 	bl	800b8fc <fmaxf>
 800460a:	eef0 7a40 	vmov.f32	s15, s0
 800460e:	4b38      	ldr	r3, [pc, #224]	; (80046f0 <process_user_input+0x61c>)
 8004610:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			 printf("HALL_CAL_SPEED set to %f\r\n", HALL_CAL_SPEED);
 8004614:	4b36      	ldr	r3, [pc, #216]	; (80046f0 <process_user_input+0x61c>)
 8004616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004618:	4618      	mov	r0, r3
 800461a:	f7fb ffb5 	bl	8000588 <__aeabi_f2d>
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	483a      	ldr	r0, [pc, #232]	; (800470c <process_user_input+0x638>)
 8004624:	f008 f93c 	bl	800c8a0 <iprintf>
			 break;
 8004628:	e033      	b.n	8004692 <process_user_input+0x5be>
		 case 'n':
			 CAN_ID = atoi(fsmstate->cmd_buff);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3305      	adds	r3, #5
 800462e:	4618      	mov	r0, r3
 8004630:	f007 fc87 	bl	800bf42 <atoi>
 8004634:	4603      	mov	r3, r0
 8004636:	4a30      	ldr	r2, [pc, #192]	; (80046f8 <process_user_input+0x624>)
 8004638:	6053      	str	r3, [r2, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 800463a:	4b2f      	ldr	r3, [pc, #188]	; (80046f8 <process_user_input+0x624>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	4619      	mov	r1, r3
 8004640:	4833      	ldr	r0, [pc, #204]	; (8004710 <process_user_input+0x63c>)
 8004642:	f008 f92d 	bl	800c8a0 <iprintf>
			 break;
 8004646:	e024      	b.n	8004692 <process_user_input+0x5be>
		 case 'm':
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3305      	adds	r3, #5
 800464c:	4618      	mov	r0, r3
 800464e:	f007 fc78 	bl	800bf42 <atoi>
 8004652:	4603      	mov	r3, r0
 8004654:	4a28      	ldr	r2, [pc, #160]	; (80046f8 <process_user_input+0x624>)
 8004656:	6093      	str	r3, [r2, #8]
			 printf("CAN_TX_ID set to %d\r\n", CAN_MASTER);
 8004658:	4b27      	ldr	r3, [pc, #156]	; (80046f8 <process_user_input+0x624>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	4619      	mov	r1, r3
 800465e:	482d      	ldr	r0, [pc, #180]	; (8004714 <process_user_input+0x640>)
 8004660:	f008 f91e 	bl	800c8a0 <iprintf>
			 break;
 8004664:	e015      	b.n	8004692 <process_user_input+0x5be>
		 case 'o':
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	3305      	adds	r3, #5
 800466a:	4618      	mov	r0, r3
 800466c:	f007 fc69 	bl	800bf42 <atoi>
 8004670:	4603      	mov	r3, r0
 8004672:	4a21      	ldr	r2, [pc, #132]	; (80046f8 <process_user_input+0x624>)
 8004674:	60d3      	str	r3, [r2, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 8004676:	4b20      	ldr	r3, [pc, #128]	; (80046f8 <process_user_input+0x624>)
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	4619      	mov	r1, r3
 800467c:	4826      	ldr	r0, [pc, #152]	; (8004718 <process_user_input+0x644>)
 800467e:	f008 f90f 	bl	800c8a0 <iprintf>
			 break;
 8004682:	e006      	b.n	8004692 <process_user_input+0x5be>
//		 case 'h':
//			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
//			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
//			 break;
		 default:
			 printf("\n\r '%s' Not a valid command prefix\n\r\n\r", fsmstate->cmd_buff);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3305      	adds	r3, #5
 8004688:	4619      	mov	r1, r3
 800468a:	4824      	ldr	r0, [pc, #144]	; (800471c <process_user_input+0x648>)
 800468c:	f008 f908 	bl	800c8a0 <iprintf>
			 break;
 8004690:	bf00      	nop

		 }

	 /* Write new settings to flash */

	 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 8004692:	4b23      	ldr	r3, [pc, #140]	; (8004720 <process_user_input+0x64c>)
 8004694:	691a      	ldr	r2, [r3, #16]
 8004696:	9200      	str	r2, [sp, #0]
 8004698:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800469a:	f001 faa9 	bl	8005bf0 <preference_writer_ready>
 800469e:	4603      	mov	r3, r0
 80046a0:	f083 0301 	eor.w	r3, r3, #1
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <process_user_input+0x5dc>
 80046aa:	481d      	ldr	r0, [pc, #116]	; (8004720 <process_user_input+0x64c>)
 80046ac:	f001 fa91 	bl	8005bd2 <preference_writer_open>
	 preference_writer_flush(&prefs);
 80046b0:	481b      	ldr	r0, [pc, #108]	; (8004720 <process_user_input+0x64c>)
 80046b2:	f001 faab 	bl	8005c0c <preference_writer_flush>
	 preference_writer_close(&prefs);
 80046b6:	481a      	ldr	r0, [pc, #104]	; (8004720 <process_user_input+0x64c>)
 80046b8:	f001 fb26 	bl	8005d08 <preference_writer_close>
	 preference_writer_load(prefs);
 80046bc:	4b18      	ldr	r3, [pc, #96]	; (8004720 <process_user_input+0x64c>)
 80046be:	691a      	ldr	r2, [r3, #16]
 80046c0:	9200      	str	r2, [sp, #0]
 80046c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046c4:	f001 fade 	bl	8005c84 <preference_writer_load>

	 enter_setup_state();
 80046c8:	f7ff fb36 	bl	8003d38 <enter_setup_state>

	 fsmstate->bytecount = 0;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	735a      	strb	r2, [r3, #13]
	 fsmstate->cmd_id = 0;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	739a      	strb	r2, [r3, #14]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3305      	adds	r3, #5
 80046dc:	2208      	movs	r2, #8
 80046de:	2100      	movs	r1, #0
 80046e0:	4618      	mov	r0, r3
 80046e2:	f007 fc6b 	bl	800bfbc <memset>
 }
 80046e6:	bf00      	nop
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20000694 	.word	0x20000694
 80046f4:	08010a6c 	.word	0x08010a6c
 80046f8:	20008fac 	.word	0x20008fac
 80046fc:	08010a80 	.word	0x08010a80
 8004700:	430f0000 	.word	0x430f0000
 8004704:	00000000 	.word	0x00000000
 8004708:	08010a9c 	.word	0x08010a9c
 800470c:	08010ab8 	.word	0x08010ab8
 8004710:	08010ad4 	.word	0x08010ad4
 8004714:	08010ae8 	.word	0x08010ae8
 8004718:	08010b00 	.word	0x08010b00
 800471c:	08010b18 	.word	0x08010b18
 8004720:	20000680 	.word	0x20000680

08004724 <enter_motor_mode>:

 void enter_motor_mode(void){
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
	float _f_round, _f_p_des;
	_f_p_des = controller.theta_mech;
 800472a:	4b27      	ldr	r3, [pc, #156]	; (80047c8 <enter_motor_mode+0xa4>)
 800472c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472e:	607b      	str	r3, [r7, #4]
	modff(_f_p_des/(2*PI_F),&_f_round);
 8004730:	edd7 7a01 	vldr	s15, [r7, #4]
 8004734:	eddf 6a25 	vldr	s13, [pc, #148]	; 80047cc <enter_motor_mode+0xa8>
 8004738:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800473c:	463b      	mov	r3, r7
 800473e:	4618      	mov	r0, r3
 8004740:	eeb0 0a47 	vmov.f32	s0, s14
 8004744:	f007 f92c 	bl	800b9a0 <modff>
	_f_p_des = _f_p_des - _f_round*2*PI_F;
 8004748:	edd7 7a00 	vldr	s15, [r7]
 800474c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004750:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80047d0 <enter_motor_mode+0xac>
 8004754:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004758:	ed97 7a01 	vldr	s14, [r7, #4]
 800475c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004760:	edc7 7a01 	vstr	s15, [r7, #4]
	if(_f_p_des < 0) _f_p_des = _f_p_des + 2*PI_F;
 8004764:	edd7 7a01 	vldr	s15, [r7, #4]
 8004768:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800476c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004770:	d507      	bpl.n	8004782 <enter_motor_mode+0x5e>
 8004772:	edd7 7a01 	vldr	s15, [r7, #4]
 8004776:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80047cc <enter_motor_mode+0xa8>
 800477a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800477e:	edc7 7a01 	vstr	s15, [r7, #4]
	controller.p_des = _f_p_des;
 8004782:	4a11      	ldr	r2, [pc, #68]	; (80047c8 <enter_motor_mode+0xa4>)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8

	GPIO_ENABLE;
 800478a:	2201      	movs	r2, #1
 800478c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004790:	4810      	ldr	r0, [pc, #64]	; (80047d4 <enter_motor_mode+0xb0>)
 8004792:	f004 f8ab 	bl	80088ec <HAL_GPIO_WritePin>
	LED_HIGH;
 8004796:	2201      	movs	r2, #1
 8004798:	2120      	movs	r1, #32
 800479a:	480f      	ldr	r0, [pc, #60]	; (80047d8 <enter_motor_mode+0xb4>)
 800479c:	f004 f8a6 	bl	80088ec <HAL_GPIO_WritePin>
	reset_foc(&controller);
 80047a0:	4809      	ldr	r0, [pc, #36]	; (80047c8 <enter_motor_mode+0xa4>)
 80047a2:	f7fe fae7 	bl	8002d74 <reset_foc>
	drv_enable_gd(drv);
 80047a6:	4b0d      	ldr	r3, [pc, #52]	; (80047dc <enter_motor_mode+0xb8>)
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	2100      	movs	r1, #0
 80047ac:	4611      	mov	r1, r2
 80047ae:	889a      	ldrh	r2, [r3, #4]
 80047b0:	2300      	movs	r3, #0
 80047b2:	f362 030f 	bfi	r3, r2, #0, #16
 80047b6:	4608      	mov	r0, r1
 80047b8:	4619      	mov	r1, r3
 80047ba:	f7fd fcfe 	bl	80021ba <drv_enable_gd>
 }
 80047be:	bf00      	nop
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	20000794 	.word	0x20000794
 80047cc:	40c90fdb 	.word	0x40c90fdb
 80047d0:	40490fdb 	.word	0x40490fdb
 80047d4:	40020000 	.word	0x40020000
 80047d8:	40020800 	.word	0x40020800
 80047dc:	200093d0 	.word	0x200093d0

080047e0 <hall_calibrate>:


 void hall_calibrate(FSMStruct * fsmstate){
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
     if(hall_cal.hall_cal_state == 0 || hall_cal.hall_cal_state >= 2 );
 80047e8:	4bb6      	ldr	r3, [pc, #728]	; (8004ac4 <hall_calibrate+0x2e4>)
 80047ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 81c7 	beq.w	8004b80 <hall_calibrate+0x3a0>
 80047f2:	4bb4      	ldr	r3, [pc, #720]	; (8004ac4 <hall_calibrate+0x2e4>)
 80047f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	f300 81c2 	bgt.w	8004b80 <hall_calibrate+0x3a0>
     else{
    	 // read hall sensor
    	 hall_cal.hall_input = HAL_GPIO_ReadPin(HALL_IO);
 80047fc:	2140      	movs	r1, #64	; 0x40
 80047fe:	48b2      	ldr	r0, [pc, #712]	; (8004ac8 <hall_calibrate+0x2e8>)
 8004800:	f004 f85c 	bl	80088bc <HAL_GPIO_ReadPin>
 8004804:	4603      	mov	r3, r0
 8004806:	461a      	mov	r2, r3
 8004808:	4bae      	ldr	r3, [pc, #696]	; (8004ac4 <hall_calibrate+0x2e4>)
 800480a:	601a      	str	r2, [r3, #0]
    	 // calculate new position
    	 if((HALL_CAL_DIR == 1 && controller.theta_mech >= hall_cal.hall_present_pos + 2*PI_F) || (HALL_CAL_DIR == -1 && controller.theta_mech <= hall_cal.hall_present_pos - 2*PI_F)){
 800480c:	4baf      	ldr	r3, [pc, #700]	; (8004acc <hall_calibrate+0x2ec>)
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d10e      	bne.n	8004832 <hall_calibrate+0x52>
 8004814:	4bae      	ldr	r3, [pc, #696]	; (8004ad0 <hall_calibrate+0x2f0>)
 8004816:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800481a:	4baa      	ldr	r3, [pc, #680]	; (8004ac4 <hall_calibrate+0x2e4>)
 800481c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004820:	eddf 6aac 	vldr	s13, [pc, #688]	; 8004ad4 <hall_calibrate+0x2f4>
 8004824:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800482c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004830:	da13      	bge.n	800485a <hall_calibrate+0x7a>
 8004832:	4ba6      	ldr	r3, [pc, #664]	; (8004acc <hall_calibrate+0x2ec>)
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483a:	d115      	bne.n	8004868 <hall_calibrate+0x88>
 800483c:	4ba4      	ldr	r3, [pc, #656]	; (8004ad0 <hall_calibrate+0x2f0>)
 800483e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004842:	4ba0      	ldr	r3, [pc, #640]	; (8004ac4 <hall_calibrate+0x2e4>)
 8004844:	edd3 7a04 	vldr	s15, [r3, #16]
 8004848:	eddf 6aa2 	vldr	s13, [pc, #648]	; 8004ad4 <hall_calibrate+0x2f4>
 800484c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004850:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004858:	d806      	bhi.n	8004868 <hall_calibrate+0x88>
    		 hall_cal.hall_cal_state = 3 ;
 800485a:	4b9a      	ldr	r3, [pc, #616]	; (8004ac4 <hall_calibrate+0x2e4>)
 800485c:	2203      	movs	r2, #3
 800485e:	629a      	str	r2, [r3, #40]	; 0x28
    		 fsmstate->next_state = MENU_MODE ;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	705a      	strb	r2, [r3, #1]
 8004866:	e187      	b.n	8004b78 <hall_calibrate+0x398>
         else{
        	 // rotate the motor forward and backward to read the hall sensor (1: no magnet detected, 0: magnet detected)
        	 // record the position at the moment from 1 to 0 (in_pos), and keep rotating
        	 // record the position at the moment from 0 to 1 (out_pos), and stop rotating.
        	 // calculate the average value of in_pos and out_pos, and rotate the motor to that position slowly
        	 if(hall_cal.hall_input != hall_cal.hall_preinput ) {
 8004868:	4b96      	ldr	r3, [pc, #600]	; (8004ac4 <hall_calibrate+0x2e4>)
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	4b95      	ldr	r3, [pc, #596]	; (8004ac4 <hall_calibrate+0x2e4>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	429a      	cmp	r2, r3
 8004872:	d020      	beq.n	80048b6 <hall_calibrate+0xd6>
        		 hall_cal.hall_cal_count += 1 ;
 8004874:	4b93      	ldr	r3, [pc, #588]	; (8004ac4 <hall_calibrate+0x2e4>)
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	3301      	adds	r3, #1
 800487a:	4a92      	ldr	r2, [pc, #584]	; (8004ac4 <hall_calibrate+0x2e4>)
 800487c:	6253      	str	r3, [r2, #36]	; 0x24
        		 if(hall_cal.hall_input == 0) hall_cal.hall_in_pos = controller.theta_mech ;
 800487e:	4b91      	ldr	r3, [pc, #580]	; (8004ac4 <hall_calibrate+0x2e4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d104      	bne.n	8004890 <hall_calibrate+0xb0>
 8004886:	4b92      	ldr	r3, [pc, #584]	; (8004ad0 <hall_calibrate+0x2f0>)
 8004888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488a:	4a8e      	ldr	r2, [pc, #568]	; (8004ac4 <hall_calibrate+0x2e4>)
 800488c:	6153      	str	r3, [r2, #20]
 800488e:	e012      	b.n	80048b6 <hall_calibrate+0xd6>
        		 else{
        			 hall_cal.hall_out_pos = controller.theta_mech ;
 8004890:	4b8f      	ldr	r3, [pc, #572]	; (8004ad0 <hall_calibrate+0x2f0>)
 8004892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004894:	4a8b      	ldr	r2, [pc, #556]	; (8004ac4 <hall_calibrate+0x2e4>)
 8004896:	6193      	str	r3, [r2, #24]
        			 hall_cal.hall_mid_pos = (hall_cal.hall_in_pos + hall_cal.hall_out_pos)/2.0f ;
 8004898:	4b8a      	ldr	r3, [pc, #552]	; (8004ac4 <hall_calibrate+0x2e4>)
 800489a:	ed93 7a05 	vldr	s14, [r3, #20]
 800489e:	4b89      	ldr	r3, [pc, #548]	; (8004ac4 <hall_calibrate+0x2e4>)
 80048a0:	edd3 7a06 	vldr	s15, [r3, #24]
 80048a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048a8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80048ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048b0:	4b84      	ldr	r3, [pc, #528]	; (8004ac4 <hall_calibrate+0x2e4>)
 80048b2:	edc3 7a07 	vstr	s15, [r3, #28]
                 }
             }
             if(hall_cal.hall_cal_count <= 1) hall_cal.hall_cal_pcmd = hall_cal.hall_cal_pcmd + HALL_CAL_DIR*(1.0f/(40000.0f)*HALL_CAL_SPEED ) ;
 80048b6:	4b83      	ldr	r3, [pc, #524]	; (8004ac4 <hall_calibrate+0x2e4>)
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	dc17      	bgt.n	80048ee <hall_calibrate+0x10e>
 80048be:	4b81      	ldr	r3, [pc, #516]	; (8004ac4 <hall_calibrate+0x2e4>)
 80048c0:	ed93 7a02 	vldr	s14, [r3, #8]
 80048c4:	4b81      	ldr	r3, [pc, #516]	; (8004acc <hall_calibrate+0x2ec>)
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	ee07 3a90 	vmov	s15, r3
 80048cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80048d0:	4b81      	ldr	r3, [pc, #516]	; (8004ad8 <hall_calibrate+0x2f8>)
 80048d2:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80048d6:	ed9f 6a81 	vldr	s12, [pc, #516]	; 8004adc <hall_calibrate+0x2fc>
 80048da:	ee67 7a86 	vmul.f32	s15, s15, s12
 80048de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048e6:	4b77      	ldr	r3, [pc, #476]	; (8004ac4 <hall_calibrate+0x2e4>)
 80048e8:	edc3 7a02 	vstr	s15, [r3, #8]
 80048ec:	e10b      	b.n	8004b06 <hall_calibrate+0x326>
             else{
                 if(HALL_CAL_DIR == 1 ){
 80048ee:	4b77      	ldr	r3, [pc, #476]	; (8004acc <hall_calibrate+0x2ec>)
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d176      	bne.n	80049e4 <hall_calibrate+0x204>
                     if(HALL_CAL_OFFSET == 0){
 80048f6:	4b78      	ldr	r3, [pc, #480]	; (8004ad8 <hall_calibrate+0x2f8>)
 80048f8:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80048fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004904:	d130      	bne.n	8004968 <hall_calibrate+0x188>
                    	 // keep turning
                    	 if(controller.theta_mech >= hall_cal.hall_mid_pos) hall_cal.hall_cal_pcmd = hall_cal.hall_cal_pcmd - HALL_CAL_DIR*1.0f/40000.0f*HALL_CAL_SPEED ;
 8004906:	4b72      	ldr	r3, [pc, #456]	; (8004ad0 <hall_calibrate+0x2f0>)
 8004908:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800490c:	4b6d      	ldr	r3, [pc, #436]	; (8004ac4 <hall_calibrate+0x2e4>)
 800490e:	edd3 7a07 	vldr	s15, [r3, #28]
 8004912:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800491a:	db17      	blt.n	800494c <hall_calibrate+0x16c>
 800491c:	4b69      	ldr	r3, [pc, #420]	; (8004ac4 <hall_calibrate+0x2e4>)
 800491e:	ed93 7a02 	vldr	s14, [r3, #8]
 8004922:	4b6a      	ldr	r3, [pc, #424]	; (8004acc <hall_calibrate+0x2ec>)
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800492e:	ed9f 6a6c 	vldr	s12, [pc, #432]	; 8004ae0 <hall_calibrate+0x300>
 8004932:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8004936:	4b68      	ldr	r3, [pc, #416]	; (8004ad8 <hall_calibrate+0x2f8>)
 8004938:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800493c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004940:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004944:	4b5f      	ldr	r3, [pc, #380]	; (8004ac4 <hall_calibrate+0x2e4>)
 8004946:	edc3 7a02 	vstr	s15, [r3, #8]
 800494a:	e0dc      	b.n	8004b06 <hall_calibrate+0x326>
                    	 else{
                    		 // stop
                    		 hall_cal.hall_cal_pcmd = 0.0f;
 800494c:	4b5d      	ldr	r3, [pc, #372]	; (8004ac4 <hall_calibrate+0x2e4>)
 800494e:	f04f 0200 	mov.w	r2, #0
 8004952:	609a      	str	r2, [r3, #8]
                    		 hall_cal.hall_cal_state = 2; // success
 8004954:	4b5b      	ldr	r3, [pc, #364]	; (8004ac4 <hall_calibrate+0x2e4>)
 8004956:	2202      	movs	r2, #2
 8004958:	629a      	str	r2, [r3, #40]	; 0x28
                             // zero
                    		 hall_cal.hall_cal_count = 0 ;
 800495a:	4b5a      	ldr	r3, [pc, #360]	; (8004ac4 <hall_calibrate+0x2e4>)
 800495c:	2200      	movs	r2, #0
 800495e:	625a      	str	r2, [r3, #36]	; 0x24
                    		 fsmstate->next_state = MOTOR_MODE ;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	705a      	strb	r2, [r3, #1]
 8004966:	e0ce      	b.n	8004b06 <hall_calibrate+0x326>
                         }
                     }
                     else{
                         if(controller.theta_mech <= hall_cal.hall_mid_pos + HALL_CAL_OFFSET*PI_F/180)  hall_cal.hall_cal_pcmd = hall_cal.hall_cal_pcmd + HALL_CAL_DIR*1.0f/40000.0f*HALL_CAL_SPEED ;
 8004968:	4b59      	ldr	r3, [pc, #356]	; (8004ad0 <hall_calibrate+0x2f0>)
 800496a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800496e:	4b55      	ldr	r3, [pc, #340]	; (8004ac4 <hall_calibrate+0x2e4>)
 8004970:	edd3 6a07 	vldr	s13, [r3, #28]
 8004974:	4b58      	ldr	r3, [pc, #352]	; (8004ad8 <hall_calibrate+0x2f8>)
 8004976:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800497a:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 8004ae4 <hall_calibrate+0x304>
 800497e:	ee27 6a86 	vmul.f32	s12, s15, s12
 8004982:	eddf 5a59 	vldr	s11, [pc, #356]	; 8004ae8 <hall_calibrate+0x308>
 8004986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800498a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800498e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004996:	d817      	bhi.n	80049c8 <hall_calibrate+0x1e8>
 8004998:	4b4a      	ldr	r3, [pc, #296]	; (8004ac4 <hall_calibrate+0x2e4>)
 800499a:	ed93 7a02 	vldr	s14, [r3, #8]
 800499e:	4b4b      	ldr	r3, [pc, #300]	; (8004acc <hall_calibrate+0x2ec>)
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	ee07 3a90 	vmov	s15, r3
 80049a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049aa:	ed9f 6a4d 	vldr	s12, [pc, #308]	; 8004ae0 <hall_calibrate+0x300>
 80049ae:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80049b2:	4b49      	ldr	r3, [pc, #292]	; (8004ad8 <hall_calibrate+0x2f8>)
 80049b4:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80049b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049c0:	4b40      	ldr	r3, [pc, #256]	; (8004ac4 <hall_calibrate+0x2e4>)
 80049c2:	edc3 7a02 	vstr	s15, [r3, #8]
 80049c6:	e09e      	b.n	8004b06 <hall_calibrate+0x326>
                         else{
                        	 // stop
                        	 hall_cal.hall_cal_pcmd = 0.0f;
 80049c8:	4b3e      	ldr	r3, [pc, #248]	; (8004ac4 <hall_calibrate+0x2e4>)
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	609a      	str	r2, [r3, #8]
                        	 hall_cal.hall_cal_state = 2; // success
 80049d0:	4b3c      	ldr	r3, [pc, #240]	; (8004ac4 <hall_calibrate+0x2e4>)
 80049d2:	2202      	movs	r2, #2
 80049d4:	629a      	str	r2, [r3, #40]	; 0x28
                             // zero
                             hall_cal.hall_cal_count = 0 ;
 80049d6:	4b3b      	ldr	r3, [pc, #236]	; (8004ac4 <hall_calibrate+0x2e4>)
 80049d8:	2200      	movs	r2, #0
 80049da:	625a      	str	r2, [r3, #36]	; 0x24
                    		 fsmstate->next_state = MOTOR_MODE ;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	705a      	strb	r2, [r3, #1]
 80049e2:	e090      	b.n	8004b06 <hall_calibrate+0x326>
                         }
                     }
                 }
                 else if(HALL_CAL_DIR == -1){
 80049e4:	4b39      	ldr	r3, [pc, #228]	; (8004acc <hall_calibrate+0x2ec>)
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ec:	f040 808b 	bne.w	8004b06 <hall_calibrate+0x326>
                     if(HALL_CAL_OFFSET == 0){
 80049f0:	4b39      	ldr	r3, [pc, #228]	; (8004ad8 <hall_calibrate+0x2f8>)
 80049f2:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80049f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80049fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049fe:	d130      	bne.n	8004a62 <hall_calibrate+0x282>
                    	 // keep turning
                         if(controller.theta_mech <= hall_cal.hall_mid_pos) hall_cal.hall_cal_pcmd = hall_cal.hall_cal_pcmd - HALL_CAL_DIR*1.0f/40000.0f*HALL_CAL_SPEED ;
 8004a00:	4b33      	ldr	r3, [pc, #204]	; (8004ad0 <hall_calibrate+0x2f0>)
 8004a02:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004a06:	4b2f      	ldr	r3, [pc, #188]	; (8004ac4 <hall_calibrate+0x2e4>)
 8004a08:	edd3 7a07 	vldr	s15, [r3, #28]
 8004a0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a14:	d817      	bhi.n	8004a46 <hall_calibrate+0x266>
 8004a16:	4b2b      	ldr	r3, [pc, #172]	; (8004ac4 <hall_calibrate+0x2e4>)
 8004a18:	ed93 7a02 	vldr	s14, [r3, #8]
 8004a1c:	4b2b      	ldr	r3, [pc, #172]	; (8004acc <hall_calibrate+0x2ec>)
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	ee07 3a90 	vmov	s15, r3
 8004a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a28:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8004ae0 <hall_calibrate+0x300>
 8004a2c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8004a30:	4b29      	ldr	r3, [pc, #164]	; (8004ad8 <hall_calibrate+0x2f8>)
 8004a32:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8004a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a3e:	4b21      	ldr	r3, [pc, #132]	; (8004ac4 <hall_calibrate+0x2e4>)
 8004a40:	edc3 7a02 	vstr	s15, [r3, #8]
 8004a44:	e05f      	b.n	8004b06 <hall_calibrate+0x326>
                         else{
                        	 // stop
                        	 hall_cal.hall_cal_pcmd = 0.0f;
 8004a46:	4b1f      	ldr	r3, [pc, #124]	; (8004ac4 <hall_calibrate+0x2e4>)
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	609a      	str	r2, [r3, #8]
                        	 hall_cal.hall_cal_state = 2; // success
 8004a4e:	4b1d      	ldr	r3, [pc, #116]	; (8004ac4 <hall_calibrate+0x2e4>)
 8004a50:	2202      	movs	r2, #2
 8004a52:	629a      	str	r2, [r3, #40]	; 0x28
                             // zero
                             hall_cal.hall_cal_count = 0 ;
 8004a54:	4b1b      	ldr	r3, [pc, #108]	; (8004ac4 <hall_calibrate+0x2e4>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	625a      	str	r2, [r3, #36]	; 0x24
                    		 fsmstate->next_state = MOTOR_MODE ;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	705a      	strb	r2, [r3, #1]
 8004a60:	e051      	b.n	8004b06 <hall_calibrate+0x326>
                         }
                     }
                     else{
                    	 // calibrate_offset != 0
                         if(controller.theta_mech >= hall_cal.hall_mid_pos - HALL_CAL_OFFSET*PI_F/180)  hall_cal.hall_cal_pcmd = hall_cal.hall_cal_pcmd + HALL_CAL_DIR*1.0f/40000.0f*HALL_CAL_SPEED ;
 8004a62:	4b1b      	ldr	r3, [pc, #108]	; (8004ad0 <hall_calibrate+0x2f0>)
 8004a64:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004a68:	4b16      	ldr	r3, [pc, #88]	; (8004ac4 <hall_calibrate+0x2e4>)
 8004a6a:	edd3 6a07 	vldr	s13, [r3, #28]
 8004a6e:	4b1a      	ldr	r3, [pc, #104]	; (8004ad8 <hall_calibrate+0x2f8>)
 8004a70:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8004a74:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8004ae4 <hall_calibrate+0x304>
 8004a78:	ee27 6a86 	vmul.f32	s12, s15, s12
 8004a7c:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8004ae8 <hall_calibrate+0x308>
 8004a80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a84:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004a88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a90:	db2c      	blt.n	8004aec <hall_calibrate+0x30c>
 8004a92:	4b0c      	ldr	r3, [pc, #48]	; (8004ac4 <hall_calibrate+0x2e4>)
 8004a94:	ed93 7a02 	vldr	s14, [r3, #8]
 8004a98:	4b0c      	ldr	r3, [pc, #48]	; (8004acc <hall_calibrate+0x2ec>)
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	ee07 3a90 	vmov	s15, r3
 8004aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aa4:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8004ae0 <hall_calibrate+0x300>
 8004aa8:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8004aac:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <hall_calibrate+0x2f8>)
 8004aae:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8004ab2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004aba:	4b02      	ldr	r3, [pc, #8]	; (8004ac4 <hall_calibrate+0x2e4>)
 8004abc:	edc3 7a02 	vstr	s15, [r3, #8]
 8004ac0:	e021      	b.n	8004b06 <hall_calibrate+0x326>
 8004ac2:	bf00      	nop
 8004ac4:	20000640 	.word	0x20000640
 8004ac8:	40020800 	.word	0x40020800
 8004acc:	20008fac 	.word	0x20008fac
 8004ad0:	20000794 	.word	0x20000794
 8004ad4:	40c90fdb 	.word	0x40c90fdb
 8004ad8:	20000694 	.word	0x20000694
 8004adc:	37d1b717 	.word	0x37d1b717
 8004ae0:	471c4000 	.word	0x471c4000
 8004ae4:	40490fdb 	.word	0x40490fdb
 8004ae8:	43340000 	.word	0x43340000
                         else{
                        	 // stop
                        	 hall_cal.hall_cal_pcmd = 0.0f;
 8004aec:	4b26      	ldr	r3, [pc, #152]	; (8004b88 <hall_calibrate+0x3a8>)
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	609a      	str	r2, [r3, #8]
                        	 hall_cal.hall_cal_state = 2; // success
 8004af4:	4b24      	ldr	r3, [pc, #144]	; (8004b88 <hall_calibrate+0x3a8>)
 8004af6:	2202      	movs	r2, #2
 8004af8:	629a      	str	r2, [r3, #40]	; 0x28
                             // zero
                             hall_cal.hall_cal_count = 0 ;
 8004afa:	4b23      	ldr	r3, [pc, #140]	; (8004b88 <hall_calibrate+0x3a8>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	625a      	str	r2, [r3, #36]	; 0x24
                    		 fsmstate->next_state = MOTOR_MODE ;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	705a      	strb	r2, [r3, #1]
                         }
                     }
                 }
             }
             hall_cal.hall_cal_pcmd = (hall_cal.hall_cal_pcmd>2*PI_F) ? hall_cal.hall_cal_pcmd-=2*PI_F : hall_cal.hall_cal_pcmd ;
 8004b06:	4b20      	ldr	r3, [pc, #128]	; (8004b88 <hall_calibrate+0x3a8>)
 8004b08:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b0c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004b8c <hall_calibrate+0x3ac>
 8004b10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b18:	dd0c      	ble.n	8004b34 <hall_calibrate+0x354>
 8004b1a:	4b1b      	ldr	r3, [pc, #108]	; (8004b88 <hall_calibrate+0x3a8>)
 8004b1c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b20:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004b8c <hall_calibrate+0x3ac>
 8004b24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b28:	4b17      	ldr	r3, [pc, #92]	; (8004b88 <hall_calibrate+0x3a8>)
 8004b2a:	edc3 7a02 	vstr	s15, [r3, #8]
 8004b2e:	4b16      	ldr	r3, [pc, #88]	; (8004b88 <hall_calibrate+0x3a8>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	e001      	b.n	8004b38 <hall_calibrate+0x358>
 8004b34:	4b14      	ldr	r3, [pc, #80]	; (8004b88 <hall_calibrate+0x3a8>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	4a13      	ldr	r2, [pc, #76]	; (8004b88 <hall_calibrate+0x3a8>)
 8004b3a:	6093      	str	r3, [r2, #8]
             hall_cal.hall_cal_pcmd = (hall_cal.hall_cal_pcmd < 0)  ? hall_cal.hall_cal_pcmd+=2*PI_F : hall_cal.hall_cal_pcmd ;
 8004b3c:	4b12      	ldr	r3, [pc, #72]	; (8004b88 <hall_calibrate+0x3a8>)
 8004b3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b4a:	d50c      	bpl.n	8004b66 <hall_calibrate+0x386>
 8004b4c:	4b0e      	ldr	r3, [pc, #56]	; (8004b88 <hall_calibrate+0x3a8>)
 8004b4e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b52:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004b8c <hall_calibrate+0x3ac>
 8004b56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b5a:	4b0b      	ldr	r3, [pc, #44]	; (8004b88 <hall_calibrate+0x3a8>)
 8004b5c:	edc3 7a02 	vstr	s15, [r3, #8]
 8004b60:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <hall_calibrate+0x3a8>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	e001      	b.n	8004b6a <hall_calibrate+0x38a>
 8004b66:	4b08      	ldr	r3, [pc, #32]	; (8004b88 <hall_calibrate+0x3a8>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	4a07      	ldr	r2, [pc, #28]	; (8004b88 <hall_calibrate+0x3a8>)
 8004b6c:	6093      	str	r3, [r2, #8]
             controller.p_des = hall_cal.hall_cal_pcmd ;
 8004b6e:	4b06      	ldr	r3, [pc, #24]	; (8004b88 <hall_calibrate+0x3a8>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	4a07      	ldr	r2, [pc, #28]	; (8004b90 <hall_calibrate+0x3b0>)
 8004b74:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
         }
         hall_cal.hall_preinput = hall_cal.hall_input ;
 8004b78:	4b03      	ldr	r3, [pc, #12]	; (8004b88 <hall_calibrate+0x3a8>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a02      	ldr	r2, [pc, #8]	; (8004b88 <hall_calibrate+0x3a8>)
 8004b7e:	6053      	str	r3, [r2, #4]
     }
 }
 8004b80:	bf00      	nop
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	20000640 	.word	0x20000640
 8004b8c:	40c90fdb 	.word	0x40c90fdb
 8004b90:	20000794 	.word	0x20000794

08004b94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08a      	sub	sp, #40	; 0x28
 8004b98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b9a:	f107 0314 	add.w	r3, r7, #20
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	605a      	str	r2, [r3, #4]
 8004ba4:	609a      	str	r2, [r3, #8]
 8004ba6:	60da      	str	r2, [r3, #12]
 8004ba8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004baa:	2300      	movs	r3, #0
 8004bac:	613b      	str	r3, [r7, #16]
 8004bae:	4b3d      	ldr	r3, [pc, #244]	; (8004ca4 <MX_GPIO_Init+0x110>)
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb2:	4a3c      	ldr	r2, [pc, #240]	; (8004ca4 <MX_GPIO_Init+0x110>)
 8004bb4:	f043 0304 	orr.w	r3, r3, #4
 8004bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8004bba:	4b3a      	ldr	r3, [pc, #232]	; (8004ca4 <MX_GPIO_Init+0x110>)
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	4b36      	ldr	r3, [pc, #216]	; (8004ca4 <MX_GPIO_Init+0x110>)
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	4a35      	ldr	r2, [pc, #212]	; (8004ca4 <MX_GPIO_Init+0x110>)
 8004bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8004bd6:	4b33      	ldr	r3, [pc, #204]	; (8004ca4 <MX_GPIO_Init+0x110>)
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004be2:	2300      	movs	r3, #0
 8004be4:	60bb      	str	r3, [r7, #8]
 8004be6:	4b2f      	ldr	r3, [pc, #188]	; (8004ca4 <MX_GPIO_Init+0x110>)
 8004be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bea:	4a2e      	ldr	r2, [pc, #184]	; (8004ca4 <MX_GPIO_Init+0x110>)
 8004bec:	f043 0301 	orr.w	r3, r3, #1
 8004bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8004bf2:	4b2c      	ldr	r3, [pc, #176]	; (8004ca4 <MX_GPIO_Init+0x110>)
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	60bb      	str	r3, [r7, #8]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bfe:	2300      	movs	r3, #0
 8004c00:	607b      	str	r3, [r7, #4]
 8004c02:	4b28      	ldr	r3, [pc, #160]	; (8004ca4 <MX_GPIO_Init+0x110>)
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	4a27      	ldr	r2, [pc, #156]	; (8004ca4 <MX_GPIO_Init+0x110>)
 8004c08:	f043 0302 	orr.w	r3, r3, #2
 8004c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c0e:	4b25      	ldr	r3, [pc, #148]	; (8004ca4 <MX_GPIO_Init+0x110>)
 8004c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	607b      	str	r3, [r7, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f648 0110 	movw	r1, #34832	; 0x8810
 8004c20:	4821      	ldr	r0, [pc, #132]	; (8004ca8 <MX_GPIO_Init+0x114>)
 8004c22:	f003 fe63 	bl	80088ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8004c26:	2200      	movs	r2, #0
 8004c28:	2120      	movs	r1, #32
 8004c2a:	4820      	ldr	r0, [pc, #128]	; (8004cac <MX_GPIO_Init+0x118>)
 8004c2c:	f003 fe5e 	bl	80088ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004c30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004c36:	4b1e      	ldr	r3, [pc, #120]	; (8004cb0 <MX_GPIO_Init+0x11c>)
 8004c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004c3e:	f107 0314 	add.w	r3, r7, #20
 8004c42:	4619      	mov	r1, r3
 8004c44:	4819      	ldr	r0, [pc, #100]	; (8004cac <MX_GPIO_Init+0x118>)
 8004c46:	f003 fca5 	bl	8008594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15;
 8004c4a:	f648 0310 	movw	r3, #34832	; 0x8810
 8004c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c50:	2301      	movs	r3, #1
 8004c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c54:	2300      	movs	r3, #0
 8004c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c5c:	f107 0314 	add.w	r3, r7, #20
 8004c60:	4619      	mov	r1, r3
 8004c62:	4811      	ldr	r0, [pc, #68]	; (8004ca8 <MX_GPIO_Init+0x114>)
 8004c64:	f003 fc96 	bl	8008594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004c68:	2320      	movs	r3, #32
 8004c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c70:	2300      	movs	r3, #0
 8004c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c74:	2303      	movs	r3, #3
 8004c76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c78:	f107 0314 	add.w	r3, r7, #20
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	480b      	ldr	r0, [pc, #44]	; (8004cac <MX_GPIO_Init+0x118>)
 8004c80:	f003 fc88 	bl	8008594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004c84:	2340      	movs	r3, #64	; 0x40
 8004c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c90:	f107 0314 	add.w	r3, r7, #20
 8004c94:	4619      	mov	r1, r3
 8004c96:	4805      	ldr	r0, [pc, #20]	; (8004cac <MX_GPIO_Init+0x118>)
 8004c98:	f003 fc7c 	bl	8008594 <HAL_GPIO_Init>

}
 8004c9c:	bf00      	nop
 8004c9e:	3728      	adds	r7, #40	; 0x28
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	40020000 	.word	0x40020000
 8004cac:	40020800 	.word	0x40020800
 8004cb0:	10210000 	.word	0x10210000

08004cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004cba:	f001 ffc9 	bl	8006c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004cbe:	f000 fb4b 	bl	8005358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004cc2:	f7ff ff67 	bl	8004b94 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004cc6:	f001 fefb 	bl	8006ac0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8004cca:	f001 fddf 	bl	800688c <MX_TIM1_Init>
  MX_CAN1_Init();
 8004cce:	f7fc ff1d 	bl	8001b0c <MX_CAN1_Init>
  MX_SPI1_Init();
 8004cd2:	f001 f829 	bl	8005d28 <MX_SPI1_Init>
  MX_SPI3_Init();
 8004cd6:	f001 f85f 	bl	8005d98 <MX_SPI3_Init>
  MX_ADC1_Init();
 8004cda:	f7fc f9a7 	bl	800102c <MX_ADC1_Init>
  MX_ADC2_Init();
 8004cde:	f7fc fa0f 	bl	8001100 <MX_ADC2_Init>
  MX_ADC3_Init();
 8004ce2:	f7fc fa57 	bl	8001194 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  /* Load settings from flash */
  preference_writer_init(&prefs, 6);
 8004ce6:	2106      	movs	r1, #6
 8004ce8:	48b8      	ldr	r0, [pc, #736]	; (8004fcc <main+0x318>)
 8004cea:	f000 ff61 	bl	8005bb0 <preference_writer_init>
  preference_writer_load(prefs);
 8004cee:	4bb7      	ldr	r3, [pc, #732]	; (8004fcc <main+0x318>)
 8004cf0:	691a      	ldr	r2, [r3, #16]
 8004cf2:	9200      	str	r2, [sp, #0]
 8004cf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004cf6:	f000 ffc5 	bl	8005c84 <preference_writer_load>

  /* Sanitize configs in case flash is empty*/
  if(E_ZERO==-1)                                   {E_ZERO = 0;}
 8004cfa:	4bb5      	ldr	r3, [pc, #724]	; (8004fd0 <main+0x31c>)
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d02:	d102      	bne.n	8004d0a <main+0x56>
 8004d04:	4bb2      	ldr	r3, [pc, #712]	; (8004fd0 <main+0x31c>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	615a      	str	r2, [r3, #20]
  if(M_ZERO==-1)                                   {M_ZERO = 0;}
 8004d0a:	4bb1      	ldr	r3, [pc, #708]	; (8004fd0 <main+0x31c>)
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d12:	d102      	bne.n	8004d1a <main+0x66>
 8004d14:	4bae      	ldr	r3, [pc, #696]	; (8004fd0 <main+0x31c>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	611a      	str	r2, [r3, #16]
  if(isnan(GR) || GR==-1)                          {GR = 6.0f;}
 8004d1a:	4bae      	ldr	r3, [pc, #696]	; (8004fd4 <main+0x320>)
 8004d1c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004d20:	eef4 7a67 	vcmp.f32	s15, s15
 8004d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d28:	d609      	bvs.n	8004d3e <main+0x8a>
 8004d2a:	4baa      	ldr	r3, [pc, #680]	; (8004fd4 <main+0x320>)
 8004d2c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004d30:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004d34:	eef4 7a47 	vcmp.f32	s15, s14
 8004d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d3c:	d102      	bne.n	8004d44 <main+0x90>
 8004d3e:	4ba5      	ldr	r3, [pc, #660]	; (8004fd4 <main+0x320>)
 8004d40:	4aa5      	ldr	r2, [pc, #660]	; (8004fd8 <main+0x324>)
 8004d42:	645a      	str	r2, [r3, #68]	; 0x44
  if(isnan(KT) || KT==-1)                          {KT = 0.08f;}
 8004d44:	4ba3      	ldr	r3, [pc, #652]	; (8004fd4 <main+0x320>)
 8004d46:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004d4a:	eef4 7a67 	vcmp.f32	s15, s15
 8004d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d52:	d609      	bvs.n	8004d68 <main+0xb4>
 8004d54:	4b9f      	ldr	r3, [pc, #636]	; (8004fd4 <main+0x320>)
 8004d56:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004d5a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004d5e:	eef4 7a47 	vcmp.f32	s15, s14
 8004d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d66:	d102      	bne.n	8004d6e <main+0xba>
 8004d68:	4b9a      	ldr	r3, [pc, #616]	; (8004fd4 <main+0x320>)
 8004d6a:	4a9c      	ldr	r2, [pc, #624]	; (8004fdc <main+0x328>)
 8004d6c:	639a      	str	r2, [r3, #56]	; 0x38
  if(isnan(I_BW) || I_BW==-1)                      {I_BW = 1000;}
 8004d6e:	4b99      	ldr	r3, [pc, #612]	; (8004fd4 <main+0x320>)
 8004d70:	edd3 7a02 	vldr	s15, [r3, #8]
 8004d74:	eef4 7a67 	vcmp.f32	s15, s15
 8004d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d7c:	d609      	bvs.n	8004d92 <main+0xde>
 8004d7e:	4b95      	ldr	r3, [pc, #596]	; (8004fd4 <main+0x320>)
 8004d80:	edd3 7a02 	vldr	s15, [r3, #8]
 8004d84:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004d88:	eef4 7a47 	vcmp.f32	s15, s14
 8004d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d90:	d102      	bne.n	8004d98 <main+0xe4>
 8004d92:	4b90      	ldr	r3, [pc, #576]	; (8004fd4 <main+0x320>)
 8004d94:	4a92      	ldr	r2, [pc, #584]	; (8004fe0 <main+0x32c>)
 8004d96:	609a      	str	r2, [r3, #8]
  if(isnan(I_MAX) || I_MAX ==-1)                   {I_MAX = 40;}
 8004d98:	4b8e      	ldr	r3, [pc, #568]	; (8004fd4 <main+0x320>)
 8004d9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d9e:	eef4 7a67 	vcmp.f32	s15, s15
 8004da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da6:	d609      	bvs.n	8004dbc <main+0x108>
 8004da8:	4b8a      	ldr	r3, [pc, #552]	; (8004fd4 <main+0x320>)
 8004daa:	edd3 7a03 	vldr	s15, [r3, #12]
 8004dae:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004db2:	eef4 7a47 	vcmp.f32	s15, s14
 8004db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dba:	d102      	bne.n	8004dc2 <main+0x10e>
 8004dbc:	4b85      	ldr	r3, [pc, #532]	; (8004fd4 <main+0x320>)
 8004dbe:	4a89      	ldr	r2, [pc, #548]	; (8004fe4 <main+0x330>)
 8004dc0:	60da      	str	r2, [r3, #12]
  if(isnan(P_MAX))                                 {P_MAX = 6.283f;}
 8004dc2:	4b84      	ldr	r3, [pc, #528]	; (8004fd4 <main+0x320>)
 8004dc4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004dc8:	eef4 7a67 	vcmp.f32	s15, s15
 8004dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd0:	d702      	bvc.n	8004dd8 <main+0x124>
 8004dd2:	4b80      	ldr	r3, [pc, #512]	; (8004fd4 <main+0x320>)
 8004dd4:	4a84      	ldr	r2, [pc, #528]	; (8004fe8 <main+0x334>)
 8004dd6:	651a      	str	r2, [r3, #80]	; 0x50
  if(isnan(P_MIN))                                 {P_MIN = 0.0f;}
 8004dd8:	4b7e      	ldr	r3, [pc, #504]	; (8004fd4 <main+0x320>)
 8004dda:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004dde:	eef4 7a67 	vcmp.f32	s15, s15
 8004de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de6:	d703      	bvc.n	8004df0 <main+0x13c>
 8004de8:	4b7a      	ldr	r3, [pc, #488]	; (8004fd4 <main+0x320>)
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	64da      	str	r2, [r3, #76]	; 0x4c
  if(isnan(V_MAX))                                 {V_MAX = 45.0f;}
 8004df0:	4b78      	ldr	r3, [pc, #480]	; (8004fd4 <main+0x320>)
 8004df2:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004df6:	eef4 7a67 	vcmp.f32	s15, s15
 8004dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dfe:	d702      	bvc.n	8004e06 <main+0x152>
 8004e00:	4b74      	ldr	r3, [pc, #464]	; (8004fd4 <main+0x320>)
 8004e02:	4a7a      	ldr	r2, [pc, #488]	; (8004fec <main+0x338>)
 8004e04:	659a      	str	r2, [r3, #88]	; 0x58
  if(isnan(V_MIN))                                 {V_MIN = -45.0f;}
 8004e06:	4b73      	ldr	r3, [pc, #460]	; (8004fd4 <main+0x320>)
 8004e08:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004e0c:	eef4 7a67 	vcmp.f32	s15, s15
 8004e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e14:	d702      	bvc.n	8004e1c <main+0x168>
 8004e16:	4b6f      	ldr	r3, [pc, #444]	; (8004fd4 <main+0x320>)
 8004e18:	4a75      	ldr	r2, [pc, #468]	; (8004ff0 <main+0x33c>)
 8004e1a:	655a      	str	r2, [r3, #84]	; 0x54
  if(isnan(KP_MAX) || KP_MAX==-1)                  {KP_MAX = 500.0f;}
 8004e1c:	4b6d      	ldr	r3, [pc, #436]	; (8004fd4 <main+0x320>)
 8004e1e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004e22:	eef4 7a67 	vcmp.f32	s15, s15
 8004e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e2a:	d609      	bvs.n	8004e40 <main+0x18c>
 8004e2c:	4b69      	ldr	r3, [pc, #420]	; (8004fd4 <main+0x320>)
 8004e2e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004e32:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004e36:	eef4 7a47 	vcmp.f32	s15, s14
 8004e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e3e:	d102      	bne.n	8004e46 <main+0x192>
 8004e40:	4b64      	ldr	r3, [pc, #400]	; (8004fd4 <main+0x320>)
 8004e42:	4a6c      	ldr	r2, [pc, #432]	; (8004ff4 <main+0x340>)
 8004e44:	65da      	str	r2, [r3, #92]	; 0x5c
  if(isnan(KI_MAX) || KI_MAX==-1)                  {KI_MAX = 0.0f;}
 8004e46:	4b63      	ldr	r3, [pc, #396]	; (8004fd4 <main+0x320>)
 8004e48:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004e4c:	eef4 7a67 	vcmp.f32	s15, s15
 8004e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e54:	d609      	bvs.n	8004e6a <main+0x1b6>
 8004e56:	4b5f      	ldr	r3, [pc, #380]	; (8004fd4 <main+0x320>)
 8004e58:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004e5c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004e60:	eef4 7a47 	vcmp.f32	s15, s14
 8004e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e68:	d103      	bne.n	8004e72 <main+0x1be>
 8004e6a:	4b5a      	ldr	r3, [pc, #360]	; (8004fd4 <main+0x320>)
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	661a      	str	r2, [r3, #96]	; 0x60
  if(isnan(KD_MAX) || KD_MAX==-1)                  {KD_MAX = 5.0f;}
 8004e72:	4b58      	ldr	r3, [pc, #352]	; (8004fd4 <main+0x320>)
 8004e74:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004e78:	eef4 7a67 	vcmp.f32	s15, s15
 8004e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e80:	d609      	bvs.n	8004e96 <main+0x1e2>
 8004e82:	4b54      	ldr	r3, [pc, #336]	; (8004fd4 <main+0x320>)
 8004e84:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004e88:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004e8c:	eef4 7a47 	vcmp.f32	s15, s14
 8004e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e94:	d102      	bne.n	8004e9c <main+0x1e8>
 8004e96:	4b4f      	ldr	r3, [pc, #316]	; (8004fd4 <main+0x320>)
 8004e98:	4a57      	ldr	r2, [pc, #348]	; (8004ff8 <main+0x344>)
 8004e9a:	665a      	str	r2, [r3, #100]	; 0x64
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1)             {I_FW_MAX = 0.0f;}
 8004e9c:	4b4d      	ldr	r3, [pc, #308]	; (8004fd4 <main+0x320>)
 8004e9e:	edd3 7a06 	vldr	s15, [r3, #24]
 8004ea2:	eef4 7a67 	vcmp.f32	s15, s15
 8004ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eaa:	d609      	bvs.n	8004ec0 <main+0x20c>
 8004eac:	4b49      	ldr	r3, [pc, #292]	; (8004fd4 <main+0x320>)
 8004eae:	edd3 7a06 	vldr	s15, [r3, #24]
 8004eb2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004eb6:	eef4 7a47 	vcmp.f32	s15, s14
 8004eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ebe:	d103      	bne.n	8004ec8 <main+0x214>
 8004ec0:	4b44      	ldr	r3, [pc, #272]	; (8004fd4 <main+0x320>)
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	619a      	str	r2, [r3, #24]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1)          {I_MAX_CONT = 14.0f;}
 8004ec8:	4b42      	ldr	r3, [pc, #264]	; (8004fd4 <main+0x320>)
 8004eca:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004ece:	eef4 7a67 	vcmp.f32	s15, s15
 8004ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ed6:	d609      	bvs.n	8004eec <main+0x238>
 8004ed8:	4b3e      	ldr	r3, [pc, #248]	; (8004fd4 <main+0x320>)
 8004eda:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004ede:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004ee2:	eef4 7a47 	vcmp.f32	s15, s14
 8004ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eea:	d102      	bne.n	8004ef2 <main+0x23e>
 8004eec:	4b39      	ldr	r3, [pc, #228]	; (8004fd4 <main+0x320>)
 8004eee:	4a43      	ldr	r2, [pc, #268]	; (8004ffc <main+0x348>)
 8004ef0:	625a      	str	r2, [r3, #36]	; 0x24
  if(isnan(I_CAL) || I_CAL==-1)                    {I_CAL = 5.0f;}
 8004ef2:	4b38      	ldr	r3, [pc, #224]	; (8004fd4 <main+0x320>)
 8004ef4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004ef8:	eef4 7a67 	vcmp.f32	s15, s15
 8004efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f00:	d609      	bvs.n	8004f16 <main+0x262>
 8004f02:	4b34      	ldr	r3, [pc, #208]	; (8004fd4 <main+0x320>)
 8004f04:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004f08:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004f0c:	eef4 7a47 	vcmp.f32	s15, s14
 8004f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f14:	d102      	bne.n	8004f1c <main+0x268>
 8004f16:	4b2f      	ldr	r3, [pc, #188]	; (8004fd4 <main+0x320>)
 8004f18:	4a37      	ldr	r2, [pc, #220]	; (8004ff8 <main+0x344>)
 8004f1a:	649a      	str	r2, [r3, #72]	; 0x48
  if(HALL_CAL_DIR != 1 && HALL_CAL_DIR != -1)      {HALL_CAL_DIR = 1;}
 8004f1c:	4b2c      	ldr	r3, [pc, #176]	; (8004fd0 <main+0x31c>)
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d007      	beq.n	8004f34 <main+0x280>
 8004f24:	4b2a      	ldr	r3, [pc, #168]	; (8004fd0 <main+0x31c>)
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2c:	d002      	beq.n	8004f34 <main+0x280>
 8004f2e:	4b28      	ldr	r3, [pc, #160]	; (8004fd0 <main+0x31c>)
 8004f30:	2201      	movs	r2, #1
 8004f32:	619a      	str	r2, [r3, #24]
  if(isnan(HALL_CAL_OFFSET) || HALL_CAL_OFFSET==-1){HALL_CAL_OFFSET = 0.0f;}
 8004f34:	4b27      	ldr	r3, [pc, #156]	; (8004fd4 <main+0x320>)
 8004f36:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8004f3a:	eef4 7a67 	vcmp.f32	s15, s15
 8004f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f42:	d609      	bvs.n	8004f58 <main+0x2a4>
 8004f44:	4b23      	ldr	r3, [pc, #140]	; (8004fd4 <main+0x320>)
 8004f46:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8004f4a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004f4e:	eef4 7a47 	vcmp.f32	s15, s14
 8004f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f56:	d103      	bne.n	8004f60 <main+0x2ac>
 8004f58:	4b1e      	ldr	r3, [pc, #120]	; (8004fd4 <main+0x320>)
 8004f5a:	f04f 0200 	mov.w	r2, #0
 8004f5e:	669a      	str	r2, [r3, #104]	; 0x68
  if(isnan(HALL_CAL_SPEED) || HALL_CAL_SPEED==-1)  {HALL_CAL_SPEED = 0.25f;}
 8004f60:	4b1c      	ldr	r3, [pc, #112]	; (8004fd4 <main+0x320>)
 8004f62:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8004f66:	eef4 7a67 	vcmp.f32	s15, s15
 8004f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f6e:	d609      	bvs.n	8004f84 <main+0x2d0>
 8004f70:	4b18      	ldr	r3, [pc, #96]	; (8004fd4 <main+0x320>)
 8004f72:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8004f76:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004f7a:	eef4 7a47 	vcmp.f32	s15, s14
 8004f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f82:	d103      	bne.n	8004f8c <main+0x2d8>
 8004f84:	4b13      	ldr	r3, [pc, #76]	; (8004fd4 <main+0x320>)
 8004f86:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8004f8a:	66da      	str	r2, [r3, #108]	; 0x6c
  if(CAN_ID==-1)                                   {CAN_ID = 1;}
 8004f8c:	4b10      	ldr	r3, [pc, #64]	; (8004fd0 <main+0x31c>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f94:	d102      	bne.n	8004f9c <main+0x2e8>
 8004f96:	4b0e      	ldr	r3, [pc, #56]	; (8004fd0 <main+0x31c>)
 8004f98:	2201      	movs	r2, #1
 8004f9a:	605a      	str	r2, [r3, #4]
  if(CAN_MASTER==-1)                               {CAN_MASTER = 0;}
 8004f9c:	4b0c      	ldr	r3, [pc, #48]	; (8004fd0 <main+0x31c>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa4:	d102      	bne.n	8004fac <main+0x2f8>
 8004fa6:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <main+0x31c>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	609a      	str	r2, [r3, #8]
  if(CAN_TIMEOUT==-1)                              {CAN_TIMEOUT = 0;}
 8004fac:	4b08      	ldr	r3, [pc, #32]	; (8004fd0 <main+0x31c>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb4:	d102      	bne.n	8004fbc <main+0x308>
 8004fb6:	4b06      	ldr	r3, [pc, #24]	; (8004fd0 <main+0x31c>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	60da      	str	r2, [r3, #12]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1)            {R_NOMINAL = 0.0f;}
 8004fbc:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <main+0x320>)
 8004fbe:	edd3 7a07 	vldr	s15, [r3, #28]
 8004fc2:	eef4 7a67 	vcmp.f32	s15, s15
 8004fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fca:	e019      	b.n	8005000 <main+0x34c>
 8004fcc:	20000680 	.word	0x20000680
 8004fd0:	20008fac 	.word	0x20008fac
 8004fd4:	20000694 	.word	0x20000694
 8004fd8:	40c00000 	.word	0x40c00000
 8004fdc:	3da3d70a 	.word	0x3da3d70a
 8004fe0:	447a0000 	.word	0x447a0000
 8004fe4:	42200000 	.word	0x42200000
 8004fe8:	40c90e56 	.word	0x40c90e56
 8004fec:	42340000 	.word	0x42340000
 8004ff0:	c2340000 	.word	0xc2340000
 8004ff4:	43fa0000 	.word	0x43fa0000
 8004ff8:	40a00000 	.word	0x40a00000
 8004ffc:	41600000 	.word	0x41600000
 8005000:	d609      	bvs.n	8005016 <main+0x362>
 8005002:	4bb5      	ldr	r3, [pc, #724]	; (80052d8 <main+0x624>)
 8005004:	edd3 7a07 	vldr	s15, [r3, #28]
 8005008:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800500c:	eef4 7a47 	vcmp.f32	s15, s14
 8005010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005014:	d103      	bne.n	800501e <main+0x36a>
 8005016:	4bb0      	ldr	r3, [pc, #704]	; (80052d8 <main+0x624>)
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	61da      	str	r2, [r3, #28]
  if(isnan(TEMP_MAX) || TEMP_MAX==-1)              {TEMP_MAX = 125.0f;}
 800501e:	4bae      	ldr	r3, [pc, #696]	; (80052d8 <main+0x624>)
 8005020:	edd3 7a08 	vldr	s15, [r3, #32]
 8005024:	eef4 7a67 	vcmp.f32	s15, s15
 8005028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800502c:	d609      	bvs.n	8005042 <main+0x38e>
 800502e:	4baa      	ldr	r3, [pc, #680]	; (80052d8 <main+0x624>)
 8005030:	edd3 7a08 	vldr	s15, [r3, #32]
 8005034:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005038:	eef4 7a47 	vcmp.f32	s15, s14
 800503c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005040:	d102      	bne.n	8005048 <main+0x394>
 8005042:	4ba5      	ldr	r3, [pc, #660]	; (80052d8 <main+0x624>)
 8005044:	4aa5      	ldr	r2, [pc, #660]	; (80052dc <main+0x628>)
 8005046:	621a      	str	r2, [r3, #32]
  if(isnan(PPAIRS) || PPAIRS==-1)                  {PPAIRS = 21.0f;}
 8005048:	4ba3      	ldr	r3, [pc, #652]	; (80052d8 <main+0x624>)
 800504a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800504e:	eef4 7a67 	vcmp.f32	s15, s15
 8005052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005056:	d609      	bvs.n	800506c <main+0x3b8>
 8005058:	4b9f      	ldr	r3, [pc, #636]	; (80052d8 <main+0x624>)
 800505a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800505e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005062:	eef4 7a47 	vcmp.f32	s15, s14
 8005066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800506a:	d102      	bne.n	8005072 <main+0x3be>
 800506c:	4b9a      	ldr	r3, [pc, #616]	; (80052d8 <main+0x624>)
 800506e:	4a9c      	ldr	r2, [pc, #624]	; (80052e0 <main+0x62c>)
 8005070:	629a      	str	r2, [r3, #40]	; 0x28

//  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
  printf("\r\n= = = = = Version Information = = = = =\r\n");
 8005072:	489c      	ldr	r0, [pc, #624]	; (80052e4 <main+0x630>)
 8005074:	f007 fc9a 	bl	800c9ac <puts>
  printf("\r\nFirmware Version:  %s\r\n", FIRMWARE_VERSION);
 8005078:	499b      	ldr	r1, [pc, #620]	; (80052e8 <main+0x634>)
 800507a:	489c      	ldr	r0, [pc, #624]	; (80052ec <main+0x638>)
 800507c:	f007 fc10 	bl	800c8a0 <iprintf>
  printf("\r\nBuild Date:  %s\r\n", FIRMWARE_DATE);
 8005080:	499b      	ldr	r1, [pc, #620]	; (80052f0 <main+0x63c>)
 8005082:	489c      	ldr	r0, [pc, #624]	; (80052f4 <main+0x640>)
 8005084:	f007 fc0c 	bl	800c8a0 <iprintf>
  printf("Build Time:  %s\r\n", FIRMWARE_TIME);
 8005088:	499b      	ldr	r1, [pc, #620]	; (80052f8 <main+0x644>)
 800508a:	489c      	ldr	r0, [pc, #624]	; (80052fc <main+0x648>)
 800508c:	f007 fc08 	bl	800c8a0 <iprintf>
  printf("\r\nAuthor:  %s\r\n", AUTHOR_NAME);
 8005090:	499b      	ldr	r1, [pc, #620]	; (8005300 <main+0x64c>)
 8005092:	489c      	ldr	r0, [pc, #624]	; (8005304 <main+0x650>)
 8005094:	f007 fc04 	bl	800c8a0 <iprintf>
  printf("\r\nModification Info:  %s\r\n", MODIFICATION_INFO);
 8005098:	499b      	ldr	r1, [pc, #620]	; (8005308 <main+0x654>)
 800509a:	489c      	ldr	r0, [pc, #624]	; (800530c <main+0x658>)
 800509c:	f007 fc00 	bl	800c8a0 <iprintf>
  printf("\r\n= = = = = Program Started = = = = =\r\n");
 80050a0:	489b      	ldr	r0, [pc, #620]	; (8005310 <main+0x65c>)
 80050a2:	f007 fc83 	bl	800c9ac <puts>
  }
  else{

  }

  init_controller_params(&controller);
 80050a6:	489b      	ldr	r0, [pc, #620]	; (8005314 <main+0x660>)
 80050a8:	f7fd fd9c 	bl	8002be4 <init_controller_params>

  /* calibration "encoder" zeroing */
  memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 80050ac:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80050b0:	2100      	movs	r1, #0
 80050b2:	4899      	ldr	r0, [pc, #612]	; (8005318 <main+0x664>)
 80050b4:	f006 ff82 	bl	800bfbc <memset>

  /* initialize the parameters of hall sensor */
  hall_cal.hall_input = 1;
 80050b8:	4b98      	ldr	r3, [pc, #608]	; (800531c <main+0x668>)
 80050ba:	2201      	movs	r2, #1
 80050bc:	601a      	str	r2, [r3, #0]
  hall_cal.hall_preinput = 1;
 80050be:	4b97      	ldr	r3, [pc, #604]	; (800531c <main+0x668>)
 80050c0:	2201      	movs	r2, #1
 80050c2:	605a      	str	r2, [r3, #4]
  hall_cal.hall_cal_pcmd = 0;
 80050c4:	4b95      	ldr	r3, [pc, #596]	; (800531c <main+0x668>)
 80050c6:	f04f 0200 	mov.w	r2, #0
 80050ca:	609a      	str	r2, [r3, #8]
  hall_cal.hall_cal_speed = 0.25; // rad/s
 80050cc:	4b93      	ldr	r3, [pc, #588]	; (800531c <main+0x668>)
 80050ce:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80050d2:	60da      	str	r2, [r3, #12]
  hall_cal.hall_present_pos = 0; // calibrate the previous position of encoder
 80050d4:	4b91      	ldr	r3, [pc, #580]	; (800531c <main+0x668>)
 80050d6:	f04f 0200 	mov.w	r2, #0
 80050da:	611a      	str	r2, [r3, #16]
  hall_cal.hall_in_pos = 0;  // read the position from 1 to 0 (magnet enters the area of hall sensor)
 80050dc:	4b8f      	ldr	r3, [pc, #572]	; (800531c <main+0x668>)
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	615a      	str	r2, [r3, #20]
  hall_cal.hall_out_pos = 0; // read the position from 0 to 1 (magnet exits the area of hall sensor)
 80050e4:	4b8d      	ldr	r3, [pc, #564]	; (800531c <main+0x668>)
 80050e6:	f04f 0200 	mov.w	r2, #0
 80050ea:	619a      	str	r2, [r3, #24]
  hall_cal.hall_mid_pos = 0;
 80050ec:	4b8b      	ldr	r3, [pc, #556]	; (800531c <main+0x668>)
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	61da      	str	r2, [r3, #28]
  hall_cal. hall_cal_offset = 0; // rad
 80050f4:	4b89      	ldr	r3, [pc, #548]	; (800531c <main+0x668>)
 80050f6:	f04f 0200 	mov.w	r2, #0
 80050fa:	621a      	str	r2, [r3, #32]
  hall_cal.hall_cal_count = 0;
 80050fc:	4b87      	ldr	r3, [pc, #540]	; (800531c <main+0x668>)
 80050fe:	2200      	movs	r2, #0
 8005100:	625a      	str	r2, [r3, #36]	; 0x24
  hall_cal.hall_cal_state = 0;
 8005102:	4b86      	ldr	r3, [pc, #536]	; (800531c <main+0x668>)
 8005104:	2200      	movs	r2, #0
 8005106:	629a      	str	r2, [r3, #40]	; 0x28

  /* commutation encoder setup */
  comm_encoder.m_zero = M_ZERO;
 8005108:	4b85      	ldr	r3, [pc, #532]	; (8005320 <main+0x66c>)
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	4a85      	ldr	r2, [pc, #532]	; (8005324 <main+0x670>)
 800510e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  comm_encoder.e_zero = E_ZERO;
 8005112:	4b83      	ldr	r3, [pc, #524]	; (8005320 <main+0x66c>)
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	4a83      	ldr	r2, [pc, #524]	; (8005324 <main+0x670>)
 8005118:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  comm_encoder.ppairs = PPAIRS;
 800511c:	4b6e      	ldr	r3, [pc, #440]	; (80052d8 <main+0x624>)
 800511e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005120:	4a80      	ldr	r2, [pc, #512]	; (8005324 <main+0x670>)
 8005122:	6693      	str	r3, [r2, #104]	; 0x68

  if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
 8005124:	4b7f      	ldr	r3, [pc, #508]	; (8005324 <main+0x670>)
 8005126:	4a7e      	ldr	r2, [pc, #504]	; (8005320 <main+0x66c>)
 8005128:	33dc      	adds	r3, #220	; 0xdc
 800512a:	f102 011c 	add.w	r1, r2, #28
 800512e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005132:	4618      	mov	r0, r3
 8005134:	f006 ff34 	bl	800bfa0 <memcpy>
  else{memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));}
  ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 8005138:	2164      	movs	r1, #100	; 0x64
 800513a:	487a      	ldr	r0, [pc, #488]	; (8005324 <main+0x670>)
 800513c:	f000 fb26 	bl	800578c <ps_warmup>

  //for(int i = 0; i<128; i++){printf("%d\r\n", comm_encoder.offset_lut[i]);}

  /* Turn on ADCs */
  HAL_ADC_Start(&hadc1);
 8005140:	4879      	ldr	r0, [pc, #484]	; (8005328 <main+0x674>)
 8005142:	f001 fe5f 	bl	8006e04 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8005146:	4879      	ldr	r0, [pc, #484]	; (800532c <main+0x678>)
 8005148:	f001 fe5c 	bl	8006e04 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 800514c:	4878      	ldr	r0, [pc, #480]	; (8005330 <main+0x67c>)
 800514e:	f001 fe59 	bl	8006e04 <HAL_ADC_Start>

  /* DRV8323 setup */
  DRV_CS_HIGH; 	// CS high
 8005152:	2201      	movs	r2, #1
 8005154:	2110      	movs	r1, #16
 8005156:	4877      	ldr	r0, [pc, #476]	; (8005334 <main+0x680>)
 8005158:	f003 fbc8 	bl	80088ec <HAL_GPIO_WritePin>
  GPIO_ENABLE;   // GPIO ENABLE_PIN HIGH
 800515c:	2201      	movs	r2, #1
 800515e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005162:	4874      	ldr	r0, [pc, #464]	; (8005334 <main+0x680>)
 8005164:	f003 fbc2 	bl	80088ec <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8005168:	2001      	movs	r0, #1
 800516a:	f001 fde3 	bl	8006d34 <HAL_Delay>
  drv_calibrate(drv);
 800516e:	4b72      	ldr	r3, [pc, #456]	; (8005338 <main+0x684>)
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	2100      	movs	r1, #0
 8005174:	4611      	mov	r1, r2
 8005176:	889a      	ldrh	r2, [r3, #4]
 8005178:	2300      	movs	r3, #0
 800517a:	f362 030f 	bfi	r3, r2, #0, #16
 800517e:	4608      	mov	r0, r1
 8005180:	4619      	mov	r1, r3
 8005182:	f7fd f84e 	bl	8002222 <drv_calibrate>
  HAL_Delay(1);
 8005186:	2001      	movs	r0, #1
 8005188:	f001 fdd4 	bl	8006d34 <HAL_Delay>
  drv_write_DCR(drv, 0x0, 0x0, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 800518c:	4b6a      	ldr	r3, [pc, #424]	; (8005338 <main+0x684>)
 800518e:	2201      	movs	r2, #1
 8005190:	9206      	str	r2, [sp, #24]
 8005192:	2200      	movs	r2, #0
 8005194:	9205      	str	r2, [sp, #20]
 8005196:	2200      	movs	r2, #0
 8005198:	9204      	str	r2, [sp, #16]
 800519a:	2200      	movs	r2, #0
 800519c:	9203      	str	r2, [sp, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	9202      	str	r2, [sp, #8]
 80051a2:	2201      	movs	r2, #1
 80051a4:	9201      	str	r2, [sp, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	9200      	str	r2, [sp, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	2000      	movs	r0, #0
 80051ae:	4610      	mov	r0, r2
 80051b0:	889b      	ldrh	r3, [r3, #4]
 80051b2:	2100      	movs	r1, #0
 80051b4:	f363 010f 	bfi	r1, r3, #0, #16
 80051b8:	2300      	movs	r3, #0
 80051ba:	2200      	movs	r2, #0
 80051bc:	f7fc ff4b 	bl	8002056 <drv_write_DCR>
  HAL_Delay(1);
 80051c0:	2001      	movs	r0, #1
 80051c2:	f001 fdb7 	bl	8006d34 <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x0, 0x0, 0x0, SEN_LVL_1_0);
 80051c6:	4b5c      	ldr	r3, [pc, #368]	; (8005338 <main+0x684>)
 80051c8:	2203      	movs	r2, #3
 80051ca:	9206      	str	r2, [sp, #24]
 80051cc:	2200      	movs	r2, #0
 80051ce:	9205      	str	r2, [sp, #20]
 80051d0:	2200      	movs	r2, #0
 80051d2:	9204      	str	r2, [sp, #16]
 80051d4:	2200      	movs	r2, #0
 80051d6:	9203      	str	r2, [sp, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	9202      	str	r2, [sp, #8]
 80051dc:	2203      	movs	r2, #3
 80051de:	9201      	str	r2, [sp, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	9200      	str	r2, [sp, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	2000      	movs	r0, #0
 80051e8:	4610      	mov	r0, r2
 80051ea:	889b      	ldrh	r3, [r3, #4]
 80051ec:	2100      	movs	r1, #0
 80051ee:	f363 010f 	bfi	r1, r3, #0, #16
 80051f2:	2301      	movs	r3, #1
 80051f4:	2200      	movs	r2, #0
 80051f6:	f7fc ff9e 	bl	8002136 <drv_write_CSACR>
  HAL_Delay(1);
 80051fa:	2001      	movs	r0, #1
 80051fc:	f001 fd9a 	bl	8006d34 <HAL_Delay>
  drv_write_OCPCR(drv, TRETRY_4MS, DEADTIME_200NS, OCP_RETRY, OCP_DEG_8US, VDS_LVL_1_88);
 8005200:	4b4d      	ldr	r3, [pc, #308]	; (8005338 <main+0x684>)
 8005202:	220f      	movs	r2, #15
 8005204:	9202      	str	r2, [sp, #8]
 8005206:	2203      	movs	r2, #3
 8005208:	9201      	str	r2, [sp, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	9200      	str	r2, [sp, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	2000      	movs	r0, #0
 8005212:	4610      	mov	r0, r2
 8005214:	889b      	ldrh	r3, [r3, #4]
 8005216:	2100      	movs	r1, #0
 8005218:	f363 010f 	bfi	r1, r3, #0, #16
 800521c:	2302      	movs	r3, #2
 800521e:	2200      	movs	r2, #0
 8005220:	f7fc ff5b 	bl	80020da <drv_write_OCPCR>
  zero_current(&controller);
 8005224:	483b      	ldr	r0, [pc, #236]	; (8005314 <main+0x660>)
 8005226:	f7fd fc99 	bl	8002b5c <zero_current>
  drv_enable_gd(drv);
 800522a:	4b43      	ldr	r3, [pc, #268]	; (8005338 <main+0x684>)
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	2100      	movs	r1, #0
 8005230:	4611      	mov	r1, r2
 8005232:	889a      	ldrh	r2, [r3, #4]
 8005234:	2300      	movs	r3, #0
 8005236:	f362 030f 	bfi	r3, r2, #0, #16
 800523a:	4608      	mov	r0, r1
 800523c:	4619      	mov	r1, r3
 800523e:	f7fc ffbc 	bl	80021ba <drv_enable_gd>
  GPIO_DISABLE;
 8005242:	2200      	movs	r2, #0
 8005244:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005248:	483a      	ldr	r0, [pc, #232]	; (8005334 <main+0x680>)
 800524a:	f003 fb4f 	bl	80088ec <HAL_GPIO_WritePin>
//  printf("ADC A OFFSET: %d     ADC B OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset);

  /* Turn on PWM */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800524e:	2100      	movs	r1, #0
 8005250:	483a      	ldr	r0, [pc, #232]	; (800533c <main+0x688>)
 8005252:	f004 fd2f 	bl	8009cb4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8005256:	2104      	movs	r1, #4
 8005258:	4838      	ldr	r0, [pc, #224]	; (800533c <main+0x688>)
 800525a:	f004 fd2b 	bl	8009cb4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800525e:	2108      	movs	r1, #8
 8005260:	4836      	ldr	r0, [pc, #216]	; (800533c <main+0x688>)
 8005262:	f004 fd27 	bl	8009cb4 <HAL_TIM_PWM_Start>

  /* CAN setup */
  can_rx_init(&can_rx);
 8005266:	4836      	ldr	r0, [pc, #216]	; (8005340 <main+0x68c>)
 8005268:	f7fc fcd6 	bl	8001c18 <can_rx_init>
  can_tx_init(&can_tx);
 800526c:	4835      	ldr	r0, [pc, #212]	; (8005344 <main+0x690>)
 800526e:	f7fc fd03 	bl	8001c78 <can_tx_init>
  HAL_CAN_Start(&CAN_H); //start CAN
 8005272:	4835      	ldr	r0, [pc, #212]	; (8005348 <main+0x694>)
 8005274:	f002 fb80 	bl	8007978 <HAL_CAN_Start>
  //__HAL_CAN_ENABLE_IT(&CAN_H, CAN_IT_RX_FIFO0_MSG_PENDING); // Start can interrupt

  /* Set Interrupt Priorities */
  HAL_NVIC_SetPriority(PWM_ISR, 0x0,0x0); // commutation > communication
 8005278:	2200      	movs	r2, #0
 800527a:	2100      	movs	r1, #0
 800527c:	2019      	movs	r0, #25
 800527e:	f003 f8c0 	bl	8008402 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(CAN_ISR, 0x01, 0x01);
 8005282:	2201      	movs	r2, #1
 8005284:	2101      	movs	r1, #1
 8005286:	2014      	movs	r0, #20
 8005288:	f003 f8bb 	bl	8008402 <HAL_NVIC_SetPriority>

  /* Start the FSM */
  state.state = MENU_MODE;
 800528c:	4b2f      	ldr	r3, [pc, #188]	; (800534c <main+0x698>)
 800528e:	2200      	movs	r2, #0
 8005290:	701a      	strb	r2, [r3, #0]
  state.next_state = MENU_MODE;
 8005292:	4b2e      	ldr	r3, [pc, #184]	; (800534c <main+0x698>)
 8005294:	2200      	movs	r2, #0
 8005296:	705a      	strb	r2, [r3, #1]
  state.ready = 1;
 8005298:	4b2c      	ldr	r3, [pc, #176]	; (800534c <main+0x698>)
 800529a:	2201      	movs	r2, #1
 800529c:	70da      	strb	r2, [r3, #3]
  state.print_uart_msg = 1;
 800529e:	4b2b      	ldr	r3, [pc, #172]	; (800534c <main+0x698>)
 80052a0:	2201      	movs	r2, #1
 80052a2:	711a      	strb	r2, [r3, #4]
  enter_menu_state();
 80052a4:	f7fe fd1c 	bl	8003ce0 <enter_menu_state>


  /* Turn on interrupts */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 80052a8:	2201      	movs	r2, #1
 80052aa:	4929      	ldr	r1, [pc, #164]	; (8005350 <main+0x69c>)
 80052ac:	4829      	ldr	r0, [pc, #164]	; (8005354 <main+0x6a0>)
 80052ae:	f005 fd56 	bl	800ad5e <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 80052b2:	4822      	ldr	r0, [pc, #136]	; (800533c <main+0x688>)
 80052b4:	f004 fc34 	bl	8009b20 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(100);
 80052b8:	2064      	movs	r0, #100	; 0x64
 80052ba:	f001 fd3b 	bl	8006d34 <HAL_Delay>
	  drv_print_faults(drv);
 80052be:	4b1e      	ldr	r3, [pc, #120]	; (8005338 <main+0x684>)
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	2100      	movs	r1, #0
 80052c4:	4611      	mov	r1, r2
 80052c6:	889a      	ldrh	r2, [r3, #4]
 80052c8:	2300      	movs	r3, #0
 80052ca:	f362 030f 	bfi	r3, r2, #0, #16
 80052ce:	4608      	mov	r0, r1
 80052d0:	4619      	mov	r1, r3
 80052d2:	f7fc ffb9 	bl	8002248 <drv_print_faults>
	  HAL_Delay(100);
 80052d6:	e7ef      	b.n	80052b8 <main+0x604>
 80052d8:	20000694 	.word	0x20000694
 80052dc:	42fa0000 	.word	0x42fa0000
 80052e0:	41a80000 	.word	0x41a80000
 80052e4:	08010b40 	.word	0x08010b40
 80052e8:	08010b6c 	.word	0x08010b6c
 80052ec:	08010b74 	.word	0x08010b74
 80052f0:	08010b90 	.word	0x08010b90
 80052f4:	08010b9c 	.word	0x08010b9c
 80052f8:	08010bb0 	.word	0x08010bb0
 80052fc:	08010bbc 	.word	0x08010bbc
 8005300:	08010bd0 	.word	0x08010bd0
 8005304:	08010bec 	.word	0x08010bec
 8005308:	08010bfc 	.word	0x08010bfc
 800530c:	08010c28 	.word	0x08010c28
 8005310:	08010c44 	.word	0x08010c44
 8005314:	20000794 	.word	0x20000794
 8005318:	20008ccc 	.word	0x20008ccc
 800531c:	20000640 	.word	0x20000640
 8005320:	20008fac 	.word	0x20008fac
 8005324:	20000360 	.word	0x20000360
 8005328:	200002a4 	.word	0x200002a4
 800532c:	2000025c 	.word	0x2000025c
 8005330:	200002ec 	.word	0x200002ec
 8005334:	40020000 	.word	0x40020000
 8005338:	200093d0 	.word	0x200093d0
 800533c:	20009508 	.word	0x20009508
 8005340:	200093d8 	.word	0x200093d8
 8005344:	200093ac 	.word	0x200093ac
 8005348:	20000334 	.word	0x20000334
 800534c:	20000670 	.word	0x20000670
 8005350:	2000066c 	.word	0x2000066c
 8005354:	20009550 	.word	0x20009550

08005358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b094      	sub	sp, #80	; 0x50
 800535c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800535e:	f107 031c 	add.w	r3, r7, #28
 8005362:	2234      	movs	r2, #52	; 0x34
 8005364:	2100      	movs	r1, #0
 8005366:	4618      	mov	r0, r3
 8005368:	f006 fe28 	bl	800bfbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800536c:	f107 0308 	add.w	r3, r7, #8
 8005370:	2200      	movs	r2, #0
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	605a      	str	r2, [r3, #4]
 8005376:	609a      	str	r2, [r3, #8]
 8005378:	60da      	str	r2, [r3, #12]
 800537a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800537c:	2300      	movs	r3, #0
 800537e:	607b      	str	r3, [r7, #4]
 8005380:	4b2c      	ldr	r3, [pc, #176]	; (8005434 <SystemClock_Config+0xdc>)
 8005382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005384:	4a2b      	ldr	r2, [pc, #172]	; (8005434 <SystemClock_Config+0xdc>)
 8005386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800538a:	6413      	str	r3, [r2, #64]	; 0x40
 800538c:	4b29      	ldr	r3, [pc, #164]	; (8005434 <SystemClock_Config+0xdc>)
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005394:	607b      	str	r3, [r7, #4]
 8005396:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005398:	2300      	movs	r3, #0
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	4b26      	ldr	r3, [pc, #152]	; (8005438 <SystemClock_Config+0xe0>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a25      	ldr	r2, [pc, #148]	; (8005438 <SystemClock_Config+0xe0>)
 80053a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053a6:	6013      	str	r3, [r2, #0]
 80053a8:	4b23      	ldr	r3, [pc, #140]	; (8005438 <SystemClock_Config+0xe0>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80053b0:	603b      	str	r3, [r7, #0]
 80053b2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80053b4:	2301      	movs	r3, #1
 80053b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80053b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80053be:	2302      	movs	r3, #2
 80053c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80053c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80053c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80053c8:	2304      	movs	r3, #4
 80053ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80053cc:	23b4      	movs	r3, #180	; 0xb4
 80053ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80053d0:	2302      	movs	r3, #2
 80053d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80053d4:	2302      	movs	r3, #2
 80053d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80053d8:	2302      	movs	r3, #2
 80053da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80053dc:	f107 031c 	add.w	r3, r7, #28
 80053e0:	4618      	mov	r0, r3
 80053e2:	f003 fdb9 	bl	8008f58 <HAL_RCC_OscConfig>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80053ec:	f000 f826 	bl	800543c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80053f0:	f003 fa96 	bl	8008920 <HAL_PWREx_EnableOverDrive>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80053fa:	f000 f81f 	bl	800543c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80053fe:	230f      	movs	r3, #15
 8005400:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005402:	2302      	movs	r3, #2
 8005404:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005406:	2300      	movs	r3, #0
 8005408:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800540a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800540e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005414:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005416:	f107 0308 	add.w	r3, r7, #8
 800541a:	2105      	movs	r1, #5
 800541c:	4618      	mov	r0, r3
 800541e:	f003 facf 	bl	80089c0 <HAL_RCC_ClockConfig>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8005428:	f000 f808 	bl	800543c <Error_Handler>
  }
}
 800542c:	bf00      	nop
 800542e:	3750      	adds	r7, #80	; 0x50
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	40023800 	.word	0x40023800
 8005438:	40007000 	.word	0x40007000

0800543c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005440:	bf00      	nop
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <fast_fmaxf>:

#include "math_ops.h"
#include "lookup.h"


float fast_fmaxf(float x, float y){
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	ed87 0a01 	vstr	s0, [r7, #4]
 8005454:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8005458:	ed97 7a01 	vldr	s14, [r7, #4]
 800545c:	edd7 7a00 	vldr	s15, [r7]
 8005460:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005468:	dd01      	ble.n	800546e <fast_fmaxf+0x24>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	e000      	b.n	8005470 <fast_fmaxf+0x26>
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	ee07 3a90 	vmov	s15, r3
    }
 8005474:	eeb0 0a67 	vmov.f32	s0, s15
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <fast_fminf>:

float fast_fminf(float x, float y){
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	ed87 0a01 	vstr	s0, [r7, #4]
 800548c:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 8005490:	ed97 7a01 	vldr	s14, [r7, #4]
 8005494:	edd7 7a00 	vldr	s15, [r7]
 8005498:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800549c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a0:	d501      	bpl.n	80054a6 <fast_fminf+0x24>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	e000      	b.n	80054a8 <fast_fminf+0x26>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	ee07 3a90 	vmov	s15, r3
    }
 80054ac:	eeb0 0a67 	vmov.f32	s0, s15
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <fmaxf3>:

float fmaxf3(float x, float y, float z){
 80054ba:	b480      	push	{r7}
 80054bc:	b085      	sub	sp, #20
 80054be:	af00      	add	r7, sp, #0
 80054c0:	ed87 0a03 	vstr	s0, [r7, #12]
 80054c4:	edc7 0a02 	vstr	s1, [r7, #8]
 80054c8:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 80054cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80054d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80054d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054dc:	dd0c      	ble.n	80054f8 <fmaxf3+0x3e>
 80054de:	ed97 7a03 	vldr	s14, [r7, #12]
 80054e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80054e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ee:	dd01      	ble.n	80054f4 <fmaxf3+0x3a>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	e00d      	b.n	8005510 <fmaxf3+0x56>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	e00b      	b.n	8005510 <fmaxf3+0x56>
 80054f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80054fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8005500:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005508:	dd01      	ble.n	800550e <fmaxf3+0x54>
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	e000      	b.n	8005510 <fmaxf3+0x56>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	ee07 3a90 	vmov	s15, r3
    }
 8005514:	eeb0 0a67 	vmov.f32	s0, s15
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <fminf3>:

float fminf3(float x, float y, float z){
 8005522:	b480      	push	{r7}
 8005524:	b085      	sub	sp, #20
 8005526:	af00      	add	r7, sp, #0
 8005528:	ed87 0a03 	vstr	s0, [r7, #12]
 800552c:	edc7 0a02 	vstr	s1, [r7, #8]
 8005530:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 8005534:	ed97 7a03 	vldr	s14, [r7, #12]
 8005538:	edd7 7a02 	vldr	s15, [r7, #8]
 800553c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005544:	d50c      	bpl.n	8005560 <fminf3+0x3e>
 8005546:	ed97 7a03 	vldr	s14, [r7, #12]
 800554a:	edd7 7a01 	vldr	s15, [r7, #4]
 800554e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005556:	d501      	bpl.n	800555c <fminf3+0x3a>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	e00d      	b.n	8005578 <fminf3+0x56>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	e00b      	b.n	8005578 <fminf3+0x56>
 8005560:	ed97 7a02 	vldr	s14, [r7, #8]
 8005564:	edd7 7a01 	vldr	s15, [r7, #4]
 8005568:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800556c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005570:	d501      	bpl.n	8005576 <fminf3+0x54>
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	e000      	b.n	8005578 <fminf3+0x56>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	ee07 3a90 	vmov	s15, r3
    }
 800557c:	eeb0 0a67 	vmov.f32	s0, s15
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <limit_norm>:
float roundf(float x){
    /// Returns nearest integer ///
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
 800558a:	b580      	push	{r7, lr}
 800558c:	b086      	sub	sp, #24
 800558e:	af00      	add	r7, sp, #0
 8005590:	60f8      	str	r0, [r7, #12]
 8005592:	60b9      	str	r1, [r7, #8]
 8005594:	ed87 0a01 	vstr	s0, [r7, #4]
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	ed93 7a00 	vldr	s14, [r3]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	edd3 7a00 	vldr	s15, [r3]
 80055a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	edd3 6a00 	vldr	s13, [r3]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	edd3 7a00 	vldr	s15, [r3]
 80055b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055bc:	eeb0 0a67 	vmov.f32	s0, s15
 80055c0:	f006 fa8c 	bl	800badc <sqrtf>
 80055c4:	ed87 0a05 	vstr	s0, [r7, #20]
    if(norm > limit){
 80055c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80055cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80055d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055d8:	dc00      	bgt.n	80055dc <limit_norm+0x52>
        *x = *x * limit/norm;
        *y = *y * limit/norm;
        }
    }
 80055da:	e01b      	b.n	8005614 <limit_norm+0x8a>
        *x = *x * limit/norm;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	ed93 7a00 	vldr	s14, [r3]
 80055e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80055e6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80055ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80055ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	edc3 7a00 	vstr	s15, [r3]
        *y = *y * limit/norm;
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	ed93 7a00 	vldr	s14, [r3]
 80055fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8005602:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005606:	ed97 7a05 	vldr	s14, [r7, #20]
 800560a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	edc3 7a00 	vstr	s15, [r3]
    }
 8005614:	bf00      	nop
 8005616:	3718      	adds	r7, #24
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <float_to_uint>:
    
void limit(float *x, float min, float max){
    *x = fast_fmaxf(fast_fminf(*x, max), min);
    }

int float_to_uint(float x, float x_min, float x_max, int bits){
 800561c:	b480      	push	{r7}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
 8005622:	ed87 0a03 	vstr	s0, [r7, #12]
 8005626:	edc7 0a02 	vstr	s1, [r7, #8]
 800562a:	ed87 1a01 	vstr	s2, [r7, #4]
 800562e:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 8005630:	ed97 7a01 	vldr	s14, [r7, #4]
 8005634:	edd7 7a02 	vldr	s15, [r7, #8]
 8005638:	ee77 7a67 	vsub.f32	s15, s14, s15
 800563c:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 8005644:	ed97 7a03 	vldr	s14, [r7, #12]
 8005648:	edd7 7a04 	vldr	s15, [r7, #16]
 800564c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005650:	2201      	movs	r2, #1
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	3b01      	subs	r3, #1
 800565a:	ee07 3a90 	vmov	s15, r3
 800565e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005662:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005666:	ed97 7a05 	vldr	s14, [r7, #20]
 800566a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800566e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005672:	ee17 3a90 	vmov	r3, s15
    }
 8005676:	4618      	mov	r0, r3
 8005678:	371c      	adds	r7, #28
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <uint_to_float>:
    
    
float uint_to_float(int x_int, float x_min, float x_max, int bits){
 8005682:	b480      	push	{r7}
 8005684:	b087      	sub	sp, #28
 8005686:	af00      	add	r7, sp, #0
 8005688:	60f8      	str	r0, [r7, #12]
 800568a:	ed87 0a02 	vstr	s0, [r7, #8]
 800568e:	edc7 0a01 	vstr	s1, [r7, #4]
 8005692:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 8005694:	ed97 7a01 	vldr	s14, [r7, #4]
 8005698:	edd7 7a02 	vldr	s15, [r7, #8]
 800569c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056a0:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	ee07 3a90 	vmov	s15, r3
 80056ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80056b6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80056ba:	2201      	movs	r2, #1
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	fa02 f303 	lsl.w	r3, r2, r3
 80056c2:	3b01      	subs	r3, #1
 80056c4:	ee07 3a90 	vmov	s15, r3
 80056c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80056d4:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 80056d8:	eeb0 0a67 	vmov.f32	s0, s15
 80056dc:	371c      	adds	r7, #28
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
	...

080056e8 <sin_lut>:

float sin_lut(float theta){
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWO_PI_F);
 80056f2:	eddf 0a17 	vldr	s1, [pc, #92]	; 8005750 <sin_lut+0x68>
 80056f6:	ed97 0a01 	vldr	s0, [r7, #4]
 80056fa:	f006 f9c3 	bl	800ba84 <fmodf>
 80056fe:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = theta<0 ? theta + TWO_PI_F : theta;
 8005702:	edd7 7a01 	vldr	s15, [r7, #4]
 8005706:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800570a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800570e:	d506      	bpl.n	800571e <sin_lut+0x36>
 8005710:	edd7 7a01 	vldr	s15, [r7, #4]
 8005714:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005750 <sin_lut+0x68>
 8005718:	ee77 7a87 	vadd.f32	s15, s15, s14
 800571c:	e001      	b.n	8005722 <sin_lut+0x3a>
 800571e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005722:	edc7 7a01 	vstr	s15, [r7, #4]

	return sin_tab[(int) (LUT_MULT*theta)];
 8005726:	edd7 7a01 	vldr	s15, [r7, #4]
 800572a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8005754 <sin_lut+0x6c>
 800572e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005732:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005736:	ee17 3a90 	vmov	r3, s15
 800573a:	4a07      	ldr	r2, [pc, #28]	; (8005758 <sin_lut+0x70>)
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	ee07 3a90 	vmov	s15, r3
}
 8005746:	eeb0 0a67 	vmov.f32	s0, s15
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	40c90fdb 	.word	0x40c90fdb
 8005754:	42a2f983 	.word	0x42a2f983
 8005758:	08010cd8 	.word	0x08010cd8

0800575c <cos_lut>:

float cos_lut(float theta){
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lut(PI_OVER_2_F - theta);
 8005766:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005788 <cos_lut+0x2c>
 800576a:	edd7 7a01 	vldr	s15, [r7, #4]
 800576e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005772:	eeb0 0a67 	vmov.f32	s0, s15
 8005776:	f7ff ffb7 	bl	80056e8 <sin_lut>
 800577a:	eef0 7a40 	vmov.f32	s15, s0
}
 800577e:	eeb0 0a67 	vmov.f32	s0, s15
 8005782:	3708      	adds	r7, #8
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	3fc90fdb 	.word	0x3fc90fdb

0800578c <ps_warmup>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void ps_warmup(EncoderStruct * encoder, int n){
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af02      	add	r7, sp, #8
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
	for(int i = 0; i<n; i++){
 8005796:	2300      	movs	r3, #0
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	e021      	b.n	80057e0 <ps_warmup+0x54>
		encoder->spi_tx_word = 0x0000;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	801a      	strh	r2, [r3, #0]
		ENC_CS_LOW; 	// CS low
 80057a2:	2200      	movs	r2, #0
 80057a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057a8:	4812      	ldr	r0, [pc, #72]	; (80057f4 <ps_warmup+0x68>)
 80057aa:	f003 f89f 	bl	80088ec <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 80057ae:	6879      	ldr	r1, [r7, #4]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	1c9a      	adds	r2, r3, #2
 80057b4:	2364      	movs	r3, #100	; 0x64
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	2301      	movs	r3, #1
 80057ba:	480f      	ldr	r0, [pc, #60]	; (80057f8 <ps_warmup+0x6c>)
 80057bc:	f003 fef3 	bl	80095a6 <HAL_SPI_TransmitReceive>
		while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 80057c0:	bf00      	nop
 80057c2:	4b0d      	ldr	r3, [pc, #52]	; (80057f8 <ps_warmup+0x6c>)
 80057c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d0f9      	beq.n	80057c2 <ps_warmup+0x36>
		ENC_CS_HIGH; 	// CS high
 80057ce:	2201      	movs	r2, #1
 80057d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057d4:	4807      	ldr	r0, [pc, #28]	; (80057f4 <ps_warmup+0x68>)
 80057d6:	f003 f889 	bl	80088ec <HAL_GPIO_WritePin>
	for(int i = 0; i<n; i++){
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	3301      	adds	r3, #1
 80057de:	60fb      	str	r3, [r7, #12]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	dbd9      	blt.n	800579c <ps_warmup+0x10>
	}
}
 80057e8:	bf00      	nop
 80057ea:	bf00      	nop
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	40020000 	.word	0x40020000
 80057f8:	20009458 	.word	0x20009458

080057fc <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08c      	sub	sp, #48	; 0x30
 8005800:	af02      	add	r7, sp, #8
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	ed87 0a00 	vstr	s0, [r7]
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	609a      	str	r2, [r3, #8]
	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
 8005810:	2313      	movs	r3, #19
 8005812:	627b      	str	r3, [r7, #36]	; 0x24
 8005814:	e011      	b.n	800583a <ps_sample+0x3e>
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	3b01      	subs	r3, #1
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	3302      	adds	r3, #2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	3304      	adds	r3, #4
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	6879      	ldr	r1, [r7, #4]
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	3302      	adds	r3, #2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	440b      	add	r3, r1
 8005830:	3304      	adds	r3, #4
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	3b01      	subs	r3, #1
 8005838:	627b      	str	r3, [r7, #36]	; 0x24
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	2b00      	cmp	r3, #0
 800583e:	dcea      	bgt.n	8005816 <ps_sample+0x1a>
	//for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->count_buff[i] = encoder->count_buff[i-1];}
	//memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float)); // this is much slower for some reason

	/* SPI read/write */
	encoder->spi_tx_word = ENC_READ_WORD;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	801a      	strh	r2, [r3, #0]
	ENC_CS_LOW; 	// CS low
 8005846:	2200      	movs	r2, #0
 8005848:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800584c:	48ac      	ldr	r0, [pc, #688]	; (8005b00 <ps_sample+0x304>)
 800584e:	f003 f84d 	bl	80088ec <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 8005852:	6879      	ldr	r1, [r7, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	1c9a      	adds	r2, r3, #2
 8005858:	2364      	movs	r3, #100	; 0x64
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	2301      	movs	r3, #1
 800585e:	48a9      	ldr	r0, [pc, #676]	; (8005b04 <ps_sample+0x308>)
 8005860:	f003 fea1 	bl	80095a6 <HAL_SPI_TransmitReceive>
	while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8005864:	bf00      	nop
 8005866:	4ba7      	ldr	r3, [pc, #668]	; (8005b04 <ps_sample+0x308>)
 8005868:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d0f9      	beq.n	8005866 <ps_sample+0x6a>
	ENC_CS_HIGH; 	// CS high
 8005872:	2201      	movs	r2, #1
 8005874:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005878:	48a1      	ldr	r0, [pc, #644]	; (8005b00 <ps_sample+0x304>)
 800587a:	f003 f837 	bl	80088ec <HAL_GPIO_WritePin>
	encoder->raw = encoder ->spi_rx_word;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	885b      	ldrh	r3, [r3, #2]
 8005882:	461a      	mov	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	675a      	str	r2, [r3, #116]	; 0x74

	/* Linearization */
	int off_1 = encoder->offset_lut[(encoder->raw)>>9];				// lookup table lower entry
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800588c:	125b      	asrs	r3, r3, #9
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	3336      	adds	r3, #54	; 0x36
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4413      	add	r3, r2
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	61fb      	str	r3, [r7, #28]
	int off_2 = encoder->offset_lut[((encoder->raw>>9)+1)%128];		// lookup table higher entry
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800589e:	125b      	asrs	r3, r3, #9
 80058a0:	3301      	adds	r3, #1
 80058a2:	425a      	negs	r2, r3
 80058a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80058ac:	bf58      	it	pl
 80058ae:	4253      	negpl	r3, r2
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	3336      	adds	r3, #54	; 0x36
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	61bb      	str	r3, [r7, #24]
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>9)<<9))>>9);     // Interpolate between lookup table entries
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80058c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058ca:	fb02 f303 	mul.w	r3, r2, r3
 80058ce:	125b      	asrs	r3, r3, #9
 80058d0:	69fa      	ldr	r2, [r7, #28]
 80058d2:	4413      	add	r3, r2
 80058d4:	617b      	str	r3, [r7, #20]
	encoder->count = encoder->raw + off_interp;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	441a      	add	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	679a      	str	r2, [r3, #120]	; 0x78


	/* Real angles in radians */
	encoder->angle_singleturn = ((float)(encoder->count-M_ZERO))/((float)ENC_CPR);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80058e6:	4b88      	ldr	r3, [pc, #544]	; (8005b08 <ps_sample+0x30c>)
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	ee07 3a90 	vmov	s15, r3
 80058f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80058f4:	eddf 6a85 	vldr	s13, [pc, #532]	; 8005b0c <ps_sample+0x310>
 80058f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	edc3 7a01 	vstr	s15, [r3, #4]
	int int_angle = encoder->angle_singleturn;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	edd3 7a01 	vldr	s15, [r3, #4]
 8005908:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800590c:	ee17 3a90 	vmov	r3, s15
 8005910:	613b      	str	r3, [r7, #16]
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	ed93 7a01 	vldr	s14, [r3, #4]
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005922:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005926:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8005b10 <ps_sample+0x314>
 800592a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	edc3 7a01 	vstr	s15, [r3, #4]
	//encoder->angle_singleturn = TWO_PI_F*fmodf(((float)(encoder->count-M_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	edd3 7a01 	vldr	s15, [r3, #4]
 800593a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800593e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005942:	d507      	bpl.n	8005954 <ps_sample+0x158>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	edd3 7a01 	vldr	s15, [r3, #4]
 800594a:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8005b10 <ps_sample+0x314>
 800594e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005952:	e002      	b.n	800595a <ps_sample+0x15e>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	edd3 7a01 	vldr	s15, [r3, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	edc3 7a01 	vstr	s15, [r3, #4]

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800596a:	4b67      	ldr	r3, [pc, #412]	; (8005b08 <ps_sample+0x30c>)
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	ee07 3a90 	vmov	s15, r3
 8005974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005978:	ee27 7a27 	vmul.f32	s14, s14, s15
 800597c:	eddf 6a63 	vldr	s13, [pc, #396]	; 8005b0c <ps_sample+0x310>
 8005980:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	int_angle = (int)encoder->elec_angle;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8005990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005994:	ee17 3a90 	vmov	r3, s15
 8005998:	613b      	str	r3, [r7, #16]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	ee07 3a90 	vmov	s15, r3
 80059a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059ae:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8005b10 <ps_sample+0x314>
 80059b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	//encoder->elec_angle = TWO_PI_F*fmodf((encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80059c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80059c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059ca:	d507      	bpl.n	80059dc <ps_sample+0x1e0>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80059d2:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8005b10 <ps_sample+0x314>
 80059d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80059da:	e002      	b.n	80059e2 <ps_sample+0x1e6>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	/* Rollover */
	int rollover = 0;
 80059e8:	2300      	movs	r3, #0
 80059ea:	623b      	str	r3, [r7, #32]
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80059f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059fc:	edc7 7a03 	vstr	s15, [r7, #12]
	if(angle_diff > PI_F){rollover = -1;}
 8005a00:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a04:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8005b14 <ps_sample+0x318>
 8005a08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a10:	dd03      	ble.n	8005a1a <ps_sample+0x21e>
 8005a12:	f04f 33ff 	mov.w	r3, #4294967295
 8005a16:	623b      	str	r3, [r7, #32]
 8005a18:	e00a      	b.n	8005a30 <ps_sample+0x234>
	else if(angle_diff < -PI_F){rollover = 1;}
 8005a1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a1e:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8005b18 <ps_sample+0x31c>
 8005a22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a2a:	d501      	bpl.n	8005a30 <ps_sample+0x234>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	623b      	str	r3, [r7, #32]
	encoder->turns += rollover;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	441a      	add	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if(!encoder->first_sample){
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f893 32dc 	ldrb.w	r3, [r3, #732]	; 0x2dc
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d125      	bne.n	8005a96 <ps_sample+0x29a>
		encoder->turns = 0;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		if(encoder->angle_singleturn > PI_OVER_2_F){encoder->turns = -1;}
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a58:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005b1c <ps_sample+0x320>
 8005a5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a64:	dd05      	ble.n	8005a72 <ps_sample+0x276>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f04f 32ff 	mov.w	r2, #4294967295
 8005a6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005a70:	e00d      	b.n	8005a8e <ps_sample+0x292>
		else if(encoder->angle_singleturn < -PI_OVER_2_F){encoder->turns = 1;}
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a78:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8005b20 <ps_sample+0x324>
 8005a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a84:	d503      	bpl.n	8005a8e <ps_sample+0x292>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		encoder->first_sample = 1;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 22dc 	strb.w	r2, [r3, #732]	; 0x2dc
	}



	/* Multi-turn position */
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	ed93 7a01 	vldr	s14, [r3, #4]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aa2:	ee07 3a90 	vmov	s15, r3
 8005aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005aaa:	eddf 6a19 	vldr	s13, [pc, #100]	; 8005b10 <ps_sample+0x314>
 8005aae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005ab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	edc3 7a03 	vstr	s15, [r3, #12]
			c1 += encoder->angle_multiturn[i]*q*(i - ibar);
		}
		encoder->vel2 = -c1/dt;
*/
	//encoder->velocity = vel2
	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	ed93 7a03 	vldr	s14, [r3, #12]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8005ac8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005acc:	edd7 7a00 	vldr	s15, [r7]
 8005ad0:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8005ad4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005ad8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8005aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

}
 8005af8:	bf00      	nop
 8005afa:	3728      	adds	r7, #40	; 0x28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	40020000 	.word	0x40020000
 8005b04:	20009458 	.word	0x20009458
 8005b08:	20008fac 	.word	0x20008fac
 8005b0c:	47800000 	.word	0x47800000
 8005b10:	40c90fdb 	.word	0x40c90fdb
 8005b14:	40490fdb 	.word	0x40490fdb
 8005b18:	c0490fdb 	.word	0xc0490fdb
 8005b1c:	3fc90fdb 	.word	0x3fc90fdb
 8005b20:	bfc90fdb 	.word	0xbfc90fdb

08005b24 <ps_print>:

void ps_print(EncoderStruct * encoder, int dt_ms){
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
	printf("Raw: %d", encoder->raw);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b32:	4619      	mov	r1, r3
 8005b34:	4818      	ldr	r0, [pc, #96]	; (8005b98 <ps_print+0x74>)
 8005b36:	f006 feb3 	bl	800c8a0 <iprintf>
	printf("   Linearized Count: %d", encoder->count);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4816      	ldr	r0, [pc, #88]	; (8005b9c <ps_print+0x78>)
 8005b42:	f006 fead 	bl	800c8a0 <iprintf>
	printf("   Single Turn: %f", encoder->angle_singleturn);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7fa fd1c 	bl	8000588 <__aeabi_f2d>
 8005b50:	4602      	mov	r2, r0
 8005b52:	460b      	mov	r3, r1
 8005b54:	4812      	ldr	r0, [pc, #72]	; (8005ba0 <ps_print+0x7c>)
 8005b56:	f006 fea3 	bl	800c8a0 <iprintf>
	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fa fd12 	bl	8000588 <__aeabi_f2d>
 8005b64:	4602      	mov	r2, r0
 8005b66:	460b      	mov	r3, r1
 8005b68:	480e      	ldr	r0, [pc, #56]	; (8005ba4 <ps_print+0x80>)
 8005b6a:	f006 fe99 	bl	800c8a0 <iprintf>
	printf("   Electrical: %f", encoder->elec_angle);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fa fd08 	bl	8000588 <__aeabi_f2d>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	480a      	ldr	r0, [pc, #40]	; (8005ba8 <ps_print+0x84>)
 8005b7e:	f006 fe8f 	bl	800c8a0 <iprintf>
	printf("   Turns:  %d\r\n", encoder->turns);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4808      	ldr	r0, [pc, #32]	; (8005bac <ps_print+0x88>)
 8005b8c:	f006 fe88 	bl	800c8a0 <iprintf>
	//HAL_Delay(dt_ms);
}
 8005b90:	bf00      	nop
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	08010c6c 	.word	0x08010c6c
 8005b9c:	08010c74 	.word	0x08010c74
 8005ba0:	08010c8c 	.word	0x08010c8c
 8005ba4:	08010ca0 	.word	0x08010ca0
 8005ba8:	08010cb4 	.word	0x08010cb4
 8005bac:	08010cc8 	.word	0x08010cc8

08005bb0 <preference_writer_init>:
    __sector = sector;
    __ready = false;
}
*/

void preference_writer_init(PreferenceWriter * pr, uint32_t sector){
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
	flash_writer_init(&pr->fw, sector);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6839      	ldr	r1, [r7, #0]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fc fc36 	bl	8002430 <flash_writer_init>
	pr->sector = sector;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	60da      	str	r2, [r3, #12]
}
 8005bca:	bf00      	nop
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <preference_writer_open>:


void preference_writer_open(PreferenceWriter * pr) {
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b082      	sub	sp, #8
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
    flash_writer_open(&pr->fw);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fc fc45 	bl	800246c <flash_writer_open>
    pr->ready = true;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	741a      	strb	r2, [r3, #16]
}
 8005be8:	bf00      	nop
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <preference_writer_ready>:

bool  preference_writer_ready(PreferenceWriter pr) {
 8005bf0:	b084      	sub	sp, #16
 8005bf2:	b490      	push	{r4, r7}
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	f107 0408 	add.w	r4, r7, #8
 8005bfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return pr.ready;
 8005bfe:	7e3b      	ldrb	r3, [r7, #24]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bc90      	pop	{r4, r7}
 8005c06:	b004      	add	sp, #16
 8005c08:	4770      	bx	lr
	...

08005c0c <preference_writer_flush>:

void preference_writer_write_float(float x, int index) {
    __float_reg[index] = x;
}

void preference_writer_flush(PreferenceWriter * pr) {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af02      	add	r7, sp, #8
 8005c12:	6078      	str	r0, [r7, #4]
    int offs;
    for (offs = 0; offs < 256; offs++) {
 8005c14:	2300      	movs	r3, #0
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	e00d      	b.n	8005c36 <preference_writer_flush+0x2a>
        flash_writer_write_int(pr->fw, offs, __int_reg[offs]);
 8005c1a:	68f9      	ldr	r1, [r7, #12]
 8005c1c:	4a17      	ldr	r2, [pc, #92]	; (8005c7c <preference_writer_flush+0x70>)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8005c2c:	f7fc fc3a 	bl	80024a4 <flash_writer_write_int>
    for (offs = 0; offs < 256; offs++) {
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	3301      	adds	r3, #1
 8005c34:	60fb      	str	r3, [r7, #12]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2bff      	cmp	r3, #255	; 0xff
 8005c3a:	ddee      	ble.n	8005c1a <preference_writer_flush+0xe>
    }
    for (; offs < 320; offs++) {
 8005c3c:	e012      	b.n	8005c64 <preference_writer_flush+0x58>
        flash_writer_write_float(pr->fw, offs, __float_reg[offs - 256]);
 8005c3e:	68f9      	ldr	r1, [r7, #12]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005c46:	4a0e      	ldr	r2, [pc, #56]	; (8005c80 <preference_writer_flush+0x74>)
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	edd3 7a00 	vldr	s15, [r3]
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	eeb0 0a67 	vmov.f32	s0, s15
 8005c56:	460b      	mov	r3, r1
 8005c58:	ca07      	ldmia	r2, {r0, r1, r2}
 8005c5a:	f7fc fc39 	bl	80024d0 <flash_writer_write_float>
    for (; offs < 320; offs++) {
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	3301      	adds	r3, #1
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005c6a:	dbe8      	blt.n	8005c3e <preference_writer_flush+0x32>
    }
    pr->ready = false;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	741a      	strb	r2, [r3, #16]
}
 8005c72:	bf00      	nop
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	20008fac 	.word	0x20008fac
 8005c80:	20000694 	.word	0x20000694

08005c84 <preference_writer_load>:

void preference_writer_load(PreferenceWriter pr) {
 8005c84:	b084      	sub	sp, #16
 8005c86:	b590      	push	{r4, r7, lr}
 8005c88:	b083      	sub	sp, #12
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	f107 0418 	add.w	r4, r7, #24
 8005c90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int offs;
    for (offs = 0; offs < 256; offs++) {
 8005c94:	2300      	movs	r3, #0
 8005c96:	607b      	str	r3, [r7, #4]
 8005c98:	e00d      	b.n	8005cb6 <preference_writer_load+0x32>
        __int_reg[offs] = flash_read_int(pr.fw, offs);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f107 0218 	add.w	r2, r7, #24
 8005ca0:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ca2:	f7fc fc3b 	bl	800251c <flash_read_int>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	4915      	ldr	r1, [pc, #84]	; (8005d00 <preference_writer_load+0x7c>)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (offs = 0; offs < 256; offs++) {
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	607b      	str	r3, [r7, #4]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2bff      	cmp	r3, #255	; 0xff
 8005cba:	ddee      	ble.n	8005c9a <preference_writer_load+0x16>
    }
    for(; offs < 320; offs++) {
 8005cbc:	e013      	b.n	8005ce6 <preference_writer_load+0x62>
        __float_reg[offs - 256] = flash_read_float(pr.fw, offs);
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f5a3 7480 	sub.w	r4, r3, #256	; 0x100
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	f107 0218 	add.w	r2, r7, #24
 8005ccc:	ca07      	ldmia	r2, {r0, r1, r2}
 8005cce:	f7fc fc3b 	bl	8002548 <flash_read_float>
 8005cd2:	eef0 7a40 	vmov.f32	s15, s0
 8005cd6:	4a0b      	ldr	r2, [pc, #44]	; (8005d04 <preference_writer_load+0x80>)
 8005cd8:	00a3      	lsls	r3, r4, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	edc3 7a00 	vstr	s15, [r3]
    for(; offs < 320; offs++) {
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	607b      	str	r3, [r7, #4]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005cec:	dbe7      	blt.n	8005cbe <preference_writer_load+0x3a>
    }
}
 8005cee:	bf00      	nop
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005cfa:	b004      	add	sp, #16
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	20008fac 	.word	0x20008fac
 8005d04:	20000694 	.word	0x20000694

08005d08 <preference_writer_close>:

void preference_writer_close(PreferenceWriter *pr) {
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
    pr->ready = false;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	741a      	strb	r2, [r3, #16]
    flash_writer_close(&pr->fw);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7fc fbf2 	bl	8002502 <flash_writer_close>
}
 8005d1e:	bf00      	nop
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
	...

08005d28 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005d2c:	4b18      	ldr	r3, [pc, #96]	; (8005d90 <MX_SPI1_Init+0x68>)
 8005d2e:	4a19      	ldr	r2, [pc, #100]	; (8005d94 <MX_SPI1_Init+0x6c>)
 8005d30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005d32:	4b17      	ldr	r3, [pc, #92]	; (8005d90 <MX_SPI1_Init+0x68>)
 8005d34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005d38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005d3a:	4b15      	ldr	r3, [pc, #84]	; (8005d90 <MX_SPI1_Init+0x68>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8005d40:	4b13      	ldr	r3, [pc, #76]	; (8005d90 <MX_SPI1_Init+0x68>)
 8005d42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d46:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d48:	4b11      	ldr	r3, [pc, #68]	; (8005d90 <MX_SPI1_Init+0x68>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005d4e:	4b10      	ldr	r3, [pc, #64]	; (8005d90 <MX_SPI1_Init+0x68>)
 8005d50:	2201      	movs	r2, #1
 8005d52:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005d54:	4b0e      	ldr	r3, [pc, #56]	; (8005d90 <MX_SPI1_Init+0x68>)
 8005d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d5a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005d5c:	4b0c      	ldr	r3, [pc, #48]	; (8005d90 <MX_SPI1_Init+0x68>)
 8005d5e:	2228      	movs	r2, #40	; 0x28
 8005d60:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005d62:	4b0b      	ldr	r3, [pc, #44]	; (8005d90 <MX_SPI1_Init+0x68>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005d68:	4b09      	ldr	r3, [pc, #36]	; (8005d90 <MX_SPI1_Init+0x68>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d6e:	4b08      	ldr	r3, [pc, #32]	; (8005d90 <MX_SPI1_Init+0x68>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005d74:	4b06      	ldr	r3, [pc, #24]	; (8005d90 <MX_SPI1_Init+0x68>)
 8005d76:	220a      	movs	r2, #10
 8005d78:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005d7a:	4805      	ldr	r0, [pc, #20]	; (8005d90 <MX_SPI1_Init+0x68>)
 8005d7c:	f003 fb8a 	bl	8009494 <HAL_SPI_Init>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8005d86:	f7ff fb59 	bl	800543c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005d8a:	bf00      	nop
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	200094b0 	.word	0x200094b0
 8005d94:	40013000 	.word	0x40013000

08005d98 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8005d9c:	4b18      	ldr	r3, [pc, #96]	; (8005e00 <MX_SPI3_Init+0x68>)
 8005d9e:	4a19      	ldr	r2, [pc, #100]	; (8005e04 <MX_SPI3_Init+0x6c>)
 8005da0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005da2:	4b17      	ldr	r3, [pc, #92]	; (8005e00 <MX_SPI3_Init+0x68>)
 8005da4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005da8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005daa:	4b15      	ldr	r3, [pc, #84]	; (8005e00 <MX_SPI3_Init+0x68>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8005db0:	4b13      	ldr	r3, [pc, #76]	; (8005e00 <MX_SPI3_Init+0x68>)
 8005db2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005db6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005db8:	4b11      	ldr	r3, [pc, #68]	; (8005e00 <MX_SPI3_Init+0x68>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005dbe:	4b10      	ldr	r3, [pc, #64]	; (8005e00 <MX_SPI3_Init+0x68>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005dc4:	4b0e      	ldr	r3, [pc, #56]	; (8005e00 <MX_SPI3_Init+0x68>)
 8005dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dca:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005dcc:	4b0c      	ldr	r3, [pc, #48]	; (8005e00 <MX_SPI3_Init+0x68>)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005dd2:	4b0b      	ldr	r3, [pc, #44]	; (8005e00 <MX_SPI3_Init+0x68>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005dd8:	4b09      	ldr	r3, [pc, #36]	; (8005e00 <MX_SPI3_Init+0x68>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dde:	4b08      	ldr	r3, [pc, #32]	; (8005e00 <MX_SPI3_Init+0x68>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8005de4:	4b06      	ldr	r3, [pc, #24]	; (8005e00 <MX_SPI3_Init+0x68>)
 8005de6:	220a      	movs	r2, #10
 8005de8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005dea:	4805      	ldr	r0, [pc, #20]	; (8005e00 <MX_SPI3_Init+0x68>)
 8005dec:	f003 fb52 	bl	8009494 <HAL_SPI_Init>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8005df6:	f7ff fb21 	bl	800543c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005dfa:	bf00      	nop
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	20009458 	.word	0x20009458
 8005e04:	40003c00 	.word	0x40003c00

08005e08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08c      	sub	sp, #48	; 0x30
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e10:	f107 031c 	add.w	r3, r7, #28
 8005e14:	2200      	movs	r2, #0
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	605a      	str	r2, [r3, #4]
 8005e1a:	609a      	str	r2, [r3, #8]
 8005e1c:	60da      	str	r2, [r3, #12]
 8005e1e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a32      	ldr	r2, [pc, #200]	; (8005ef0 <HAL_SPI_MspInit+0xe8>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d12c      	bne.n	8005e84 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61bb      	str	r3, [r7, #24]
 8005e2e:	4b31      	ldr	r3, [pc, #196]	; (8005ef4 <HAL_SPI_MspInit+0xec>)
 8005e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e32:	4a30      	ldr	r2, [pc, #192]	; (8005ef4 <HAL_SPI_MspInit+0xec>)
 8005e34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e38:	6453      	str	r3, [r2, #68]	; 0x44
 8005e3a:	4b2e      	ldr	r3, [pc, #184]	; (8005ef4 <HAL_SPI_MspInit+0xec>)
 8005e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e42:	61bb      	str	r3, [r7, #24]
 8005e44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e46:	2300      	movs	r3, #0
 8005e48:	617b      	str	r3, [r7, #20]
 8005e4a:	4b2a      	ldr	r3, [pc, #168]	; (8005ef4 <HAL_SPI_MspInit+0xec>)
 8005e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4e:	4a29      	ldr	r2, [pc, #164]	; (8005ef4 <HAL_SPI_MspInit+0xec>)
 8005e50:	f043 0301 	orr.w	r3, r3, #1
 8005e54:	6313      	str	r3, [r2, #48]	; 0x30
 8005e56:	4b27      	ldr	r3, [pc, #156]	; (8005ef4 <HAL_SPI_MspInit+0xec>)
 8005e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	617b      	str	r3, [r7, #20]
 8005e60:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005e62:	23e0      	movs	r3, #224	; 0xe0
 8005e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e66:	2302      	movs	r3, #2
 8005e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005e72:	2305      	movs	r3, #5
 8005e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e76:	f107 031c 	add.w	r3, r7, #28
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	481e      	ldr	r0, [pc, #120]	; (8005ef8 <HAL_SPI_MspInit+0xf0>)
 8005e7e:	f002 fb89 	bl	8008594 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005e82:	e031      	b.n	8005ee8 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI3)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a1c      	ldr	r2, [pc, #112]	; (8005efc <HAL_SPI_MspInit+0xf4>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d12c      	bne.n	8005ee8 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005e8e:	2300      	movs	r3, #0
 8005e90:	613b      	str	r3, [r7, #16]
 8005e92:	4b18      	ldr	r3, [pc, #96]	; (8005ef4 <HAL_SPI_MspInit+0xec>)
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	4a17      	ldr	r2, [pc, #92]	; (8005ef4 <HAL_SPI_MspInit+0xec>)
 8005e98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8005e9e:	4b15      	ldr	r3, [pc, #84]	; (8005ef4 <HAL_SPI_MspInit+0xec>)
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ea6:	613b      	str	r3, [r7, #16]
 8005ea8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	4b11      	ldr	r3, [pc, #68]	; (8005ef4 <HAL_SPI_MspInit+0xec>)
 8005eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb2:	4a10      	ldr	r2, [pc, #64]	; (8005ef4 <HAL_SPI_MspInit+0xec>)
 8005eb4:	f043 0304 	orr.w	r3, r3, #4
 8005eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8005eba:	4b0e      	ldr	r3, [pc, #56]	; (8005ef4 <HAL_SPI_MspInit+0xec>)
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebe:	f003 0304 	and.w	r3, r3, #4
 8005ec2:	60fb      	str	r3, [r7, #12]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005ec6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ecc:	2302      	movs	r3, #2
 8005ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005ed8:	2306      	movs	r3, #6
 8005eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005edc:	f107 031c 	add.w	r3, r7, #28
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4807      	ldr	r0, [pc, #28]	; (8005f00 <HAL_SPI_MspInit+0xf8>)
 8005ee4:	f002 fb56 	bl	8008594 <HAL_GPIO_Init>
}
 8005ee8:	bf00      	nop
 8005eea:	3730      	adds	r7, #48	; 0x30
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	40013000 	.word	0x40013000
 8005ef4:	40023800 	.word	0x40023800
 8005ef8:	40020000 	.word	0x40020000
 8005efc:	40003c00 	.word	0x40003c00
 8005f00:	40020800 	.word	0x40020800

08005f04 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8005f04:	b480      	push	{r7}
 8005f06:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8005f08:	4b07      	ldr	r3, [pc, #28]	; (8005f28 <FLASH_Unlock+0x24>)
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	da05      	bge.n	8005f1c <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8005f10:	4b05      	ldr	r3, [pc, #20]	; (8005f28 <FLASH_Unlock+0x24>)
 8005f12:	4a06      	ldr	r2, [pc, #24]	; (8005f2c <FLASH_Unlock+0x28>)
 8005f14:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8005f16:	4b04      	ldr	r3, [pc, #16]	; (8005f28 <FLASH_Unlock+0x24>)
 8005f18:	4a05      	ldr	r2, [pc, #20]	; (8005f30 <FLASH_Unlock+0x2c>)
 8005f1a:	605a      	str	r2, [r3, #4]
  }  
}
 8005f1c:	bf00      	nop
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	40023c00 	.word	0x40023c00
 8005f2c:	45670123 	.word	0x45670123
 8005f30:	cdef89ab 	.word	0xcdef89ab

08005f34 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8005f34:	b480      	push	{r7}
 8005f36:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005f38:	4b05      	ldr	r3, [pc, #20]	; (8005f50 <FLASH_Lock+0x1c>)
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	4a04      	ldr	r2, [pc, #16]	; (8005f50 <FLASH_Lock+0x1c>)
 8005f3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f42:	6113      	str	r3, [r2, #16]
}
 8005f44:	bf00      	nop
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	40023c00 	.word	0x40023c00

08005f54 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE2;
 8005f64:	2309      	movs	r3, #9
 8005f66:	72fb      	strb	r3, [r7, #11]
 
  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8005f68:	78fb      	ldrb	r3, [r7, #3]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d102      	bne.n	8005f74 <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60fb      	str	r3, [r7, #12]
 8005f72:	e010      	b.n	8005f96 <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 8005f74:	78fb      	ldrb	r3, [r7, #3]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d103      	bne.n	8005f82 <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005f7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	e009      	b.n	8005f96 <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 8005f82:	78fb      	ldrb	r3, [r7, #3]
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d103      	bne.n	8005f90 <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005f88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f8c:	60fb      	str	r3, [r7, #12]
 8005f8e:	e002      	b.n	8005f96 <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005f90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005f94:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation2();
 8005f96:	f000 f8bf 	bl	8006118 <FLASH_WaitForLastOperation2>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE2)
 8005f9e:	7afb      	ldrb	r3, [r7, #11]
 8005fa0:	2b09      	cmp	r3, #9
 8005fa2:	d12f      	bne.n	8006004 <FLASH_EraseSector+0xb0>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 8005fa4:	4b1a      	ldr	r3, [pc, #104]	; (8006010 <FLASH_EraseSector+0xbc>)
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	4a19      	ldr	r2, [pc, #100]	; (8006010 <FLASH_EraseSector+0xbc>)
 8005faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fae:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 8005fb0:	4b17      	ldr	r3, [pc, #92]	; (8006010 <FLASH_EraseSector+0xbc>)
 8005fb2:	691a      	ldr	r2, [r3, #16]
 8005fb4:	4916      	ldr	r1, [pc, #88]	; (8006010 <FLASH_EraseSector+0xbc>)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	610b      	str	r3, [r1, #16]
    FLASH->CR &= SECTOR_MASK;
 8005fbc:	4b14      	ldr	r3, [pc, #80]	; (8006010 <FLASH_EraseSector+0xbc>)
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	4a13      	ldr	r2, [pc, #76]	; (8006010 <FLASH_EraseSector+0xbc>)
 8005fc2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005fc6:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8005fc8:	4b11      	ldr	r3, [pc, #68]	; (8006010 <FLASH_EraseSector+0xbc>)
 8005fca:	691a      	ldr	r2, [r3, #16]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	4a0f      	ldr	r2, [pc, #60]	; (8006010 <FLASH_EraseSector+0xbc>)
 8005fd2:	f043 0302 	orr.w	r3, r3, #2
 8005fd6:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8005fd8:	4b0d      	ldr	r3, [pc, #52]	; (8006010 <FLASH_EraseSector+0xbc>)
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	4a0c      	ldr	r2, [pc, #48]	; (8006010 <FLASH_EraseSector+0xbc>)
 8005fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fe2:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation2();
 8005fe4:	f000 f898 	bl	8006118 <FLASH_WaitForLastOperation2>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 8005fec:	4b08      	ldr	r3, [pc, #32]	; (8006010 <FLASH_EraseSector+0xbc>)
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	4a07      	ldr	r2, [pc, #28]	; (8006010 <FLASH_EraseSector+0xbc>)
 8005ff2:	f023 0302 	bic.w	r3, r3, #2
 8005ff6:	6113      	str	r3, [r2, #16]
    FLASH->CR &= SECTOR_MASK; 
 8005ff8:	4b05      	ldr	r3, [pc, #20]	; (8006010 <FLASH_EraseSector+0xbc>)
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	4a04      	ldr	r2, [pc, #16]	; (8006010 <FLASH_EraseSector+0xbc>)
 8005ffe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006002:	6113      	str	r3, [r2, #16]
  }
  /* Return the Erase Status */
  return status;
 8006004:	7afb      	ldrb	r3, [r7, #11]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	40023c00 	.word	0x40023c00

08006014 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE2;
 800601e:	2309      	movs	r3, #9
 8006020:	73fb      	strb	r3, [r7, #15]
 
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation2();
 8006022:	f000 f879 	bl	8006118 <FLASH_WaitForLastOperation2>
 8006026:	4603      	mov	r3, r0
 8006028:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE2)
 800602a:	7bfb      	ldrb	r3, [r7, #15]
 800602c:	2b09      	cmp	r3, #9
 800602e:	d11e      	bne.n	800606e <FLASH_ProgramWord+0x5a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8006030:	4b11      	ldr	r3, [pc, #68]	; (8006078 <FLASH_ProgramWord+0x64>)
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	4a10      	ldr	r2, [pc, #64]	; (8006078 <FLASH_ProgramWord+0x64>)
 8006036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800603a:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 800603c:	4b0e      	ldr	r3, [pc, #56]	; (8006078 <FLASH_ProgramWord+0x64>)
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	4a0d      	ldr	r2, [pc, #52]	; (8006078 <FLASH_ProgramWord+0x64>)
 8006042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006046:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 8006048:	4b0b      	ldr	r3, [pc, #44]	; (8006078 <FLASH_ProgramWord+0x64>)
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	4a0a      	ldr	r2, [pc, #40]	; (8006078 <FLASH_ProgramWord+0x64>)
 800604e:	f043 0301 	orr.w	r3, r3, #1
 8006052:	6113      	str	r3, [r2, #16]
  
    *(__IO uint32_t*)Address = Data;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation2();
 800605a:	f000 f85d 	bl	8006118 <FLASH_WaitForLastOperation2>
 800605e:	4603      	mov	r3, r0
 8006060:	73fb      	strb	r3, [r7, #15]
 
    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8006062:	4b05      	ldr	r3, [pc, #20]	; (8006078 <FLASH_ProgramWord+0x64>)
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	4a04      	ldr	r2, [pc, #16]	; (8006078 <FLASH_ProgramWord+0x64>)
 8006068:	f023 0301 	bic.w	r3, r3, #1
 800606c:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 800606e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	40023c00 	.word	0x40023c00

0800607c <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42xx/43xxx and STM32F401xx/411xE devices)   
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8006084:	4a04      	ldr	r2, [pc, #16]	; (8006098 <FLASH_ClearFlag+0x1c>)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	60d3      	str	r3, [r2, #12]
}
 800608a:	bf00      	nop
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	40023c00 	.word	0x40023c00

0800609c <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_RD2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_GetStatus(void)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE2;
 80060a2:	2309      	movs	r3, #9
 80060a4:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80060a6:	4b1b      	ldr	r3, [pc, #108]	; (8006114 <FLASH_GetStatus+0x78>)
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060b2:	d102      	bne.n	80060ba <FLASH_GetStatus+0x1e>
  {
    flashstatus = FLASH_BUSY2;
 80060b4:	2301      	movs	r3, #1
 80060b6:	71fb      	strb	r3, [r7, #7]
 80060b8:	e025      	b.n	8006106 <FLASH_GetStatus+0x6a>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 80060ba:	4b16      	ldr	r3, [pc, #88]	; (8006114 <FLASH_GetStatus+0x78>)
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f003 0310 	and.w	r3, r3, #16
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <FLASH_GetStatus+0x30>
    { 
      flashstatus = FLASH_ERROR_WRP2;
 80060c6:	2306      	movs	r3, #6
 80060c8:	71fb      	strb	r3, [r7, #7]
 80060ca:	e01c      	b.n	8006106 <FLASH_GetStatus+0x6a>
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 80060cc:	4b11      	ldr	r3, [pc, #68]	; (8006114 <FLASH_GetStatus+0x78>)
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <FLASH_GetStatus+0x42>
      { 
        flashstatus = FLASH_ERROR_RD2;
 80060d8:	2302      	movs	r3, #2
 80060da:	71fb      	strb	r3, [r7, #7]
 80060dc:	e013      	b.n	8006106 <FLASH_GetStatus+0x6a>
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
 80060de:	4b0d      	ldr	r3, [pc, #52]	; (8006114 <FLASH_GetStatus+0x78>)
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <FLASH_GetStatus+0x54>
        {
          flashstatus = FLASH_ERROR_PROGRAM2; 
 80060ea:	2307      	movs	r3, #7
 80060ec:	71fb      	strb	r3, [r7, #7]
 80060ee:	e00a      	b.n	8006106 <FLASH_GetStatus+0x6a>
        }
        else
        {
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 80060f0:	4b08      	ldr	r3, [pc, #32]	; (8006114 <FLASH_GetStatus+0x78>)
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <FLASH_GetStatus+0x66>
          {
            flashstatus = FLASH_ERROR_OPERATION2;
 80060fc:	2308      	movs	r3, #8
 80060fe:	71fb      	strb	r3, [r7, #7]
 8006100:	e001      	b.n	8006106 <FLASH_GetStatus+0x6a>
          }
          else
          {
            flashstatus = FLASH_COMPLETE2;
 8006102:	2309      	movs	r3, #9
 8006104:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 8006106:	79fb      	ldrb	r3, [r7, #7]
}
 8006108:	4618      	mov	r0, r3
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	40023c00 	.word	0x40023c00

08006118 <FLASH_WaitForLastOperation2>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_WaitForLastOperation2(void)
{ 
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE2;
 800611e:	2309      	movs	r3, #9
 8006120:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 8006122:	f7ff ffbb 	bl	800609c <FLASH_GetStatus>
 8006126:	4603      	mov	r3, r0
 8006128:	71fb      	strb	r3, [r7, #7]
 
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY2)
 800612a:	e003      	b.n	8006134 <FLASH_WaitForLastOperation2+0x1c>
  {
    status = FLASH_GetStatus();
 800612c:	f7ff ffb6 	bl	800609c <FLASH_GetStatus>
 8006130:	4603      	mov	r3, r0
 8006132:	71fb      	strb	r3, [r7, #7]
  while(status == FLASH_BUSY2)
 8006134:	79fb      	ldrb	r3, [r7, #7]
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b01      	cmp	r3, #1
 800613a:	d0f7      	beq.n	800612c <FLASH_WaitForLastOperation2+0x14>
  }
  /* Return the operation status */
  return status;
 800613c:	79fb      	ldrb	r3, [r7, #7]
 800613e:	b2db      	uxtb	r3, r3
}
 8006140:	4618      	mov	r0, r3
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800614e:	2300      	movs	r3, #0
 8006150:	607b      	str	r3, [r7, #4]
 8006152:	4b10      	ldr	r3, [pc, #64]	; (8006194 <HAL_MspInit+0x4c>)
 8006154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006156:	4a0f      	ldr	r2, [pc, #60]	; (8006194 <HAL_MspInit+0x4c>)
 8006158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800615c:	6453      	str	r3, [r2, #68]	; 0x44
 800615e:	4b0d      	ldr	r3, [pc, #52]	; (8006194 <HAL_MspInit+0x4c>)
 8006160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006166:	607b      	str	r3, [r7, #4]
 8006168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800616a:	2300      	movs	r3, #0
 800616c:	603b      	str	r3, [r7, #0]
 800616e:	4b09      	ldr	r3, [pc, #36]	; (8006194 <HAL_MspInit+0x4c>)
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	4a08      	ldr	r2, [pc, #32]	; (8006194 <HAL_MspInit+0x4c>)
 8006174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006178:	6413      	str	r3, [r2, #64]	; 0x40
 800617a:	4b06      	ldr	r3, [pc, #24]	; (8006194 <HAL_MspInit+0x4c>)
 800617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8006186:	2007      	movs	r0, #7
 8006188:	f002 f930 	bl	80083ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800618c:	bf00      	nop
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	40023800 	.word	0x40023800

08006198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006198:	b480      	push	{r7}
 800619a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800619c:	bf00      	nop
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80061a6:	b480      	push	{r7}
 80061a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80061aa:	e7fe      	b.n	80061aa <HardFault_Handler+0x4>

080061ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80061ac:	b480      	push	{r7}
 80061ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80061b0:	e7fe      	b.n	80061b0 <MemManage_Handler+0x4>

080061b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80061b2:	b480      	push	{r7}
 80061b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80061b6:	e7fe      	b.n	80061b6 <BusFault_Handler+0x4>

080061b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80061b8:	b480      	push	{r7}
 80061ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80061bc:	e7fe      	b.n	80061bc <UsageFault_Handler+0x4>

080061be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80061be:	b480      	push	{r7}
 80061c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80061c2:	bf00      	nop
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80061cc:	b480      	push	{r7}
 80061ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80061d0:	bf00      	nop
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80061da:	b480      	push	{r7}
 80061dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80061de:	bf00      	nop
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80061ec:	f000 fd82 	bl	8006cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80061f0:	bf00      	nop
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80061f8:	4803      	ldr	r0, [pc, #12]	; (8006208 <CAN1_RX0_IRQHandler+0x14>)
 80061fa:	f001 fdee 	bl	8007dda <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  can_tx_rx();
 80061fe:	f000 f849 	bl	8006294 <can_tx_rx>

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8006202:	bf00      	nop
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	20000334 	.word	0x20000334

0800620c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	//LED_HIGH	// Useful for timing

	/* Sample ADCs */
	analog_sample(&controller);
 8006210:	480c      	ldr	r0, [pc, #48]	; (8006244 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8006212:	f7fc fa57 	bl	80026c4 <analog_sample>

	/* Sample position sensor */
	ps_sample(&comm_encoder, DT);
 8006216:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8006248 <TIM1_UP_TIM10_IRQHandler+0x3c>
 800621a:	480c      	ldr	r0, [pc, #48]	; (800624c <TIM1_UP_TIM10_IRQHandler+0x40>)
 800621c:	f7ff faee 	bl	80057fc <ps_sample>

	/* Run Finite State Machine */
	run_fsm(&state);
 8006220:	480b      	ldr	r0, [pc, #44]	; (8006250 <TIM1_UP_TIM10_IRQHandler+0x44>)
 8006222:	f7fd fa0b 	bl	800363c <run_fsm>

	/* Check for CAN messages */
	can_tx_rx();
 8006226:	f000 f835 	bl	8006294 <can_tx_rx>

	/* increment loop count */
	controller.loop_count++;
 800622a:	4b06      	ldr	r3, [pc, #24]	; (8006244 <TIM1_UP_TIM10_IRQHandler+0x38>)
 800622c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006230:	3301      	adds	r3, #1
 8006232:	4a04      	ldr	r2, [pc, #16]	; (8006244 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8006234:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	//LED_LOW;

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006238:	4806      	ldr	r0, [pc, #24]	; (8006254 <TIM1_UP_TIM10_IRQHandler+0x48>)
 800623a:	f003 fe03 	bl	8009e44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800623e:	bf00      	nop
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	20000794 	.word	0x20000794
 8006248:	37d1b717 	.word	0x37d1b717
 800624c:	20000360 	.word	0x20000360
 8006250:	20000670 	.word	0x20000670
 8006254:	20009508 	.word	0x20009508

08006258 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 800625e:	480a      	ldr	r0, [pc, #40]	; (8006288 <USART2_IRQHandler+0x30>)
 8006260:	f004 fdae 	bl	800adc0 <HAL_UART_IRQHandler>
	state.print_uart_msg = 1;
 8006264:	4b09      	ldr	r3, [pc, #36]	; (800628c <USART2_IRQHandler+0x34>)
 8006266:	2201      	movs	r2, #1
 8006268:	711a      	strb	r2, [r3, #4]

	char c = Serial2RxBuffer[0];
 800626a:	4b09      	ldr	r3, [pc, #36]	; (8006290 <USART2_IRQHandler+0x38>)
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	71fb      	strb	r3, [r7, #7]
	update_fsm(&state, c);
 8006270:	79fb      	ldrb	r3, [r7, #7]
 8006272:	4619      	mov	r1, r3
 8006274:	4805      	ldr	r0, [pc, #20]	; (800628c <USART2_IRQHandler+0x34>)
 8006276:	f7fd fc4b 	bl	8003b10 <update_fsm>

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800627a:	4803      	ldr	r0, [pc, #12]	; (8006288 <USART2_IRQHandler+0x30>)
 800627c:	f004 fda0 	bl	800adc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8006280:	bf00      	nop
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	20009550 	.word	0x20009550
 800628c:	20000670 	.word	0x20000670
 8006290:	2000066c 	.word	0x2000066c

08006294 <can_tx_rx>:

/* USER CODE BEGIN 1 */

void can_tx_rx(void){
 8006294:	b590      	push	{r4, r7, lr}
 8006296:	b097      	sub	sp, #92	; 0x5c
 8006298:	af14      	add	r7, sp, #80	; 0x50

	int no_mesage = HAL_CAN_GetRxMessage(&CAN_H, CAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Read CAN
 800629a:	4bb8      	ldr	r3, [pc, #736]	; (800657c <can_tx_rx+0x2e8>)
 800629c:	4ab8      	ldr	r2, [pc, #736]	; (8006580 <can_tx_rx+0x2ec>)
 800629e:	2100      	movs	r1, #0
 80062a0:	48b8      	ldr	r0, [pc, #736]	; (8006584 <can_tx_rx+0x2f0>)
 80062a2:	f001 fc88 	bl	8007bb6 <HAL_CAN_GetRxMessage>
 80062a6:	4603      	mov	r3, r0
 80062a8:	607b      	str	r3, [r7, #4]
	if(!no_mesage){
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f040 8201 	bne.w	80066b4 <can_tx_rx+0x420>
		state.print_uart_msg = 0;
 80062b2:	4bb5      	ldr	r3, [pc, #724]	; (8006588 <can_tx_rx+0x2f4>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	711a      	strb	r2, [r3, #4]
		uint32_t TxMailbox;

		/* Check for special commands by function code*/
		switch (can_rx.rx_header.StdId >> 7)
 80062b8:	4bb4      	ldr	r3, [pc, #720]	; (800658c <can_tx_rx+0x2f8>)
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	09db      	lsrs	r3, r3, #7
 80062be:	2b05      	cmp	r3, #5
 80062c0:	f200 81bf 	bhi.w	8006642 <can_tx_rx+0x3ae>
 80062c4:	a201      	add	r2, pc, #4	; (adr r2, 80062cc <can_tx_rx+0x38>)
 80062c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ca:	bf00      	nop
 80062cc:	080062e5 	.word	0x080062e5
 80062d0:	08006353 	.word	0x08006353
 80062d4:	080063b9 	.word	0x080063b9
 80062d8:	08006427 	.word	0x08006427
 80062dc:	0800650f 	.word	0x0800650f
 80062e0:	080065b1 	.word	0x080065b1
			{
				case 0:  // REST Mode
					pack_reply(&can_tx, comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, VERSION_NUM, hall_cal.hall_cal_state, state.state, controller.i_q_des);	// Pack response
 80062e4:	4baa      	ldr	r3, [pc, #680]	; (8006590 <can_tx_rx+0x2fc>)
 80062e6:	ed93 7a03 	vldr	s14, [r3, #12]
 80062ea:	4baa      	ldr	r3, [pc, #680]	; (8006594 <can_tx_rx+0x300>)
 80062ec:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80062f0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80062f4:	4ba6      	ldr	r3, [pc, #664]	; (8006590 <can_tx_rx+0x2fc>)
 80062f6:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80062fa:	4ba6      	ldr	r3, [pc, #664]	; (8006594 <can_tx_rx+0x300>)
 80062fc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006300:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8006304:	4ba4      	ldr	r3, [pc, #656]	; (8006598 <can_tx_rx+0x304>)
 8006306:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800630a:	4ba2      	ldr	r3, [pc, #648]	; (8006594 <can_tx_rx+0x300>)
 800630c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006310:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006314:	4b9f      	ldr	r3, [pc, #636]	; (8006594 <can_tx_rx+0x300>)
 8006316:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800631a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800631e:	4b9f      	ldr	r3, [pc, #636]	; (800659c <can_tx_rx+0x308>)
 8006320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006322:	4b99      	ldr	r3, [pc, #612]	; (8006588 <can_tx_rx+0x2f4>)
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	4619      	mov	r1, r3
 8006328:	4b9b      	ldr	r3, [pc, #620]	; (8006598 <can_tx_rx+0x304>)
 800632a:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800632e:	eef0 1a47 	vmov.f32	s3, s14
 8006332:	460b      	mov	r3, r1
 8006334:	2105      	movs	r1, #5
 8006336:	eeb0 1a67 	vmov.f32	s2, s15
 800633a:	eef0 0a46 	vmov.f32	s1, s12
 800633e:	eeb0 0a66 	vmov.f32	s0, s13
 8006342:	4897      	ldr	r0, [pc, #604]	; (80065a0 <can_tx_rx+0x30c>)
 8006344:	f7fb fcb2 	bl	8001cac <pack_reply>
					update_fsm(&state, MENU_CMD);
 8006348:	211b      	movs	r1, #27
 800634a:	488f      	ldr	r0, [pc, #572]	; (8006588 <can_tx_rx+0x2f4>)
 800634c:	f7fd fbe0 	bl	8003b10 <update_fsm>
					break;
 8006350:	e1aa      	b.n	80066a8 <can_tx_rx+0x414>
				case 1:  // READ_INFO Mode
					pack_reply(&can_tx, comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, VERSION_NUM, hall_cal.hall_cal_state, state.state, controller.i_q_des);	// Pack response
 8006352:	4b8f      	ldr	r3, [pc, #572]	; (8006590 <can_tx_rx+0x2fc>)
 8006354:	ed93 7a03 	vldr	s14, [r3, #12]
 8006358:	4b8e      	ldr	r3, [pc, #568]	; (8006594 <can_tx_rx+0x300>)
 800635a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800635e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006362:	4b8b      	ldr	r3, [pc, #556]	; (8006590 <can_tx_rx+0x2fc>)
 8006364:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8006368:	4b8a      	ldr	r3, [pc, #552]	; (8006594 <can_tx_rx+0x300>)
 800636a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800636e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8006372:	4b89      	ldr	r3, [pc, #548]	; (8006598 <can_tx_rx+0x304>)
 8006374:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8006378:	4b86      	ldr	r3, [pc, #536]	; (8006594 <can_tx_rx+0x300>)
 800637a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800637e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006382:	4b84      	ldr	r3, [pc, #528]	; (8006594 <can_tx_rx+0x300>)
 8006384:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638c:	4b83      	ldr	r3, [pc, #524]	; (800659c <can_tx_rx+0x308>)
 800638e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006390:	4b7d      	ldr	r3, [pc, #500]	; (8006588 <can_tx_rx+0x2f4>)
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	4619      	mov	r1, r3
 8006396:	4b80      	ldr	r3, [pc, #512]	; (8006598 <can_tx_rx+0x304>)
 8006398:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800639c:	eef0 1a47 	vmov.f32	s3, s14
 80063a0:	460b      	mov	r3, r1
 80063a2:	2105      	movs	r1, #5
 80063a4:	eeb0 1a67 	vmov.f32	s2, s15
 80063a8:	eef0 0a46 	vmov.f32	s1, s12
 80063ac:	eeb0 0a66 	vmov.f32	s0, s13
 80063b0:	487b      	ldr	r0, [pc, #492]	; (80065a0 <can_tx_rx+0x30c>)
 80063b2:	f7fb fc7b 	bl	8001cac <pack_reply>
					break;
 80063b6:	e177      	b.n	80066a8 <can_tx_rx+0x414>
				case 2:  // SET_ZERO Mode
					pack_reply(&can_tx, comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, VERSION_NUM, hall_cal.hall_cal_state, state.state, controller.i_q_des);	// Pack response
 80063b8:	4b75      	ldr	r3, [pc, #468]	; (8006590 <can_tx_rx+0x2fc>)
 80063ba:	ed93 7a03 	vldr	s14, [r3, #12]
 80063be:	4b75      	ldr	r3, [pc, #468]	; (8006594 <can_tx_rx+0x300>)
 80063c0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80063c4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80063c8:	4b71      	ldr	r3, [pc, #452]	; (8006590 <can_tx_rx+0x2fc>)
 80063ca:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80063ce:	4b71      	ldr	r3, [pc, #452]	; (8006594 <can_tx_rx+0x300>)
 80063d0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80063d4:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80063d8:	4b6f      	ldr	r3, [pc, #444]	; (8006598 <can_tx_rx+0x304>)
 80063da:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80063de:	4b6d      	ldr	r3, [pc, #436]	; (8006594 <can_tx_rx+0x300>)
 80063e0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80063e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063e8:	4b6a      	ldr	r3, [pc, #424]	; (8006594 <can_tx_rx+0x300>)
 80063ea:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80063ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063f2:	4b6a      	ldr	r3, [pc, #424]	; (800659c <can_tx_rx+0x308>)
 80063f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063f6:	4b64      	ldr	r3, [pc, #400]	; (8006588 <can_tx_rx+0x2f4>)
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	4619      	mov	r1, r3
 80063fc:	4b66      	ldr	r3, [pc, #408]	; (8006598 <can_tx_rx+0x304>)
 80063fe:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8006402:	eef0 1a47 	vmov.f32	s3, s14
 8006406:	460b      	mov	r3, r1
 8006408:	2105      	movs	r1, #5
 800640a:	eeb0 1a67 	vmov.f32	s2, s15
 800640e:	eef0 0a46 	vmov.f32	s1, s12
 8006412:	eeb0 0a66 	vmov.f32	s0, s13
 8006416:	4862      	ldr	r0, [pc, #392]	; (80065a0 <can_tx_rx+0x30c>)
 8006418:	f7fb fc48 	bl	8001cac <pack_reply>
					update_fsm(&state, ZERO_CMD);
 800641c:	217a      	movs	r1, #122	; 0x7a
 800641e:	485a      	ldr	r0, [pc, #360]	; (8006588 <can_tx_rx+0x2f4>)
 8006420:	f7fd fb76 	bl	8003b10 <update_fsm>
					break;
 8006424:	e140      	b.n	80066a8 <can_tx_rx+0x414>
				case 3:  // HALL_CAL Mode
					pack_reply(&can_tx, comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, VERSION_NUM, hall_cal.hall_cal_state, state.state, controller.i_q_des);	// Pack response
 8006426:	4b5a      	ldr	r3, [pc, #360]	; (8006590 <can_tx_rx+0x2fc>)
 8006428:	ed93 7a03 	vldr	s14, [r3, #12]
 800642c:	4b59      	ldr	r3, [pc, #356]	; (8006594 <can_tx_rx+0x300>)
 800642e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006432:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006436:	4b56      	ldr	r3, [pc, #344]	; (8006590 <can_tx_rx+0x2fc>)
 8006438:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800643c:	4b55      	ldr	r3, [pc, #340]	; (8006594 <can_tx_rx+0x300>)
 800643e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006442:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8006446:	4b54      	ldr	r3, [pc, #336]	; (8006598 <can_tx_rx+0x304>)
 8006448:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800644c:	4b51      	ldr	r3, [pc, #324]	; (8006594 <can_tx_rx+0x300>)
 800644e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006452:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006456:	4b4f      	ldr	r3, [pc, #316]	; (8006594 <can_tx_rx+0x300>)
 8006458:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800645c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006460:	4b4e      	ldr	r3, [pc, #312]	; (800659c <can_tx_rx+0x308>)
 8006462:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006464:	4b48      	ldr	r3, [pc, #288]	; (8006588 <can_tx_rx+0x2f4>)
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	4619      	mov	r1, r3
 800646a:	4b4b      	ldr	r3, [pc, #300]	; (8006598 <can_tx_rx+0x304>)
 800646c:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8006470:	eef0 1a47 	vmov.f32	s3, s14
 8006474:	460b      	mov	r3, r1
 8006476:	2105      	movs	r1, #5
 8006478:	eeb0 1a67 	vmov.f32	s2, s15
 800647c:	eef0 0a46 	vmov.f32	s1, s12
 8006480:	eeb0 0a66 	vmov.f32	s0, s13
 8006484:	4846      	ldr	r0, [pc, #280]	; (80065a0 <can_tx_rx+0x30c>)
 8006486:	f7fb fc11 	bl	8001cac <pack_reply>
					hall_cal.hall_cal_count = 0;
 800648a:	4b44      	ldr	r3, [pc, #272]	; (800659c <can_tx_rx+0x308>)
 800648c:	2200      	movs	r2, #0
 800648e:	625a      	str	r2, [r3, #36]	; 0x24
					hall_cal.hall_cal_state = 1; // calibrating
 8006490:	4b42      	ldr	r3, [pc, #264]	; (800659c <can_tx_rx+0x308>)
 8006492:	2201      	movs	r2, #1
 8006494:	629a      	str	r2, [r3, #40]	; 0x28
					/*----- convert theta_mech to 0~359.9999deg -----*/
					hall_cal.hall_present_pos = controller.theta_mech;
 8006496:	4b40      	ldr	r3, [pc, #256]	; (8006598 <can_tx_rx+0x304>)
 8006498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649a:	4a40      	ldr	r2, [pc, #256]	; (800659c <can_tx_rx+0x308>)
 800649c:	6113      	str	r3, [r2, #16]
					hall_cal.hall_cal_pcmd = controller.theta_mech;
 800649e:	4b3e      	ldr	r3, [pc, #248]	; (8006598 <can_tx_rx+0x304>)
 80064a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a2:	4a3e      	ldr	r2, [pc, #248]	; (800659c <can_tx_rx+0x308>)
 80064a4:	6093      	str	r3, [r2, #8]
					static float _f_cal_round;
					modff(hall_cal.hall_cal_pcmd/(2*PI_F),&_f_cal_round);
 80064a6:	4b3d      	ldr	r3, [pc, #244]	; (800659c <can_tx_rx+0x308>)
 80064a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80064ac:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80065a4 <can_tx_rx+0x310>
 80064b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80064b4:	483c      	ldr	r0, [pc, #240]	; (80065a8 <can_tx_rx+0x314>)
 80064b6:	eeb0 0a47 	vmov.f32	s0, s14
 80064ba:	f005 fa71 	bl	800b9a0 <modff>
					hall_cal.hall_cal_pcmd = hall_cal.hall_cal_pcmd - _f_cal_round*2*PI_F;
 80064be:	4b37      	ldr	r3, [pc, #220]	; (800659c <can_tx_rx+0x308>)
 80064c0:	ed93 7a02 	vldr	s14, [r3, #8]
 80064c4:	4b38      	ldr	r3, [pc, #224]	; (80065a8 <can_tx_rx+0x314>)
 80064c6:	edd3 7a00 	vldr	s15, [r3]
 80064ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80064ce:	eddf 6a37 	vldr	s13, [pc, #220]	; 80065ac <can_tx_rx+0x318>
 80064d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80064d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064da:	4b30      	ldr	r3, [pc, #192]	; (800659c <can_tx_rx+0x308>)
 80064dc:	edc3 7a02 	vstr	s15, [r3, #8]
					if(hall_cal.hall_cal_pcmd < 0) hall_cal.hall_cal_pcmd = hall_cal.hall_cal_pcmd + 2*PI_F;
 80064e0:	4b2e      	ldr	r3, [pc, #184]	; (800659c <can_tx_rx+0x308>)
 80064e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80064e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80064ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ee:	d509      	bpl.n	8006504 <can_tx_rx+0x270>
 80064f0:	4b2a      	ldr	r3, [pc, #168]	; (800659c <can_tx_rx+0x308>)
 80064f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80064f6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80065a4 <can_tx_rx+0x310>
 80064fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064fe:	4b27      	ldr	r3, [pc, #156]	; (800659c <can_tx_rx+0x308>)
 8006500:	edc3 7a02 	vstr	s15, [r3, #8]
					update_fsm(&state, HALL_CAL_CMD);
 8006504:	2168      	movs	r1, #104	; 0x68
 8006506:	4820      	ldr	r0, [pc, #128]	; (8006588 <can_tx_rx+0x2f4>)
 8006508:	f7fd fb02 	bl	8003b10 <update_fsm>
					break;
 800650c:	e0cc      	b.n	80066a8 <can_tx_rx+0x414>
				case 4:  // Only enter MOTOR Mode
					pack_reply(&can_tx, comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, VERSION_NUM, hall_cal.hall_cal_state, state.state, controller.i_q_des);	// Pack response
 800650e:	4b20      	ldr	r3, [pc, #128]	; (8006590 <can_tx_rx+0x2fc>)
 8006510:	ed93 7a03 	vldr	s14, [r3, #12]
 8006514:	4b1f      	ldr	r3, [pc, #124]	; (8006594 <can_tx_rx+0x300>)
 8006516:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800651a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800651e:	4b1c      	ldr	r3, [pc, #112]	; (8006590 <can_tx_rx+0x2fc>)
 8006520:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8006524:	4b1b      	ldr	r3, [pc, #108]	; (8006594 <can_tx_rx+0x300>)
 8006526:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800652a:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800652e:	4b1a      	ldr	r3, [pc, #104]	; (8006598 <can_tx_rx+0x304>)
 8006530:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8006534:	4b17      	ldr	r3, [pc, #92]	; (8006594 <can_tx_rx+0x300>)
 8006536:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800653a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800653e:	4b15      	ldr	r3, [pc, #84]	; (8006594 <can_tx_rx+0x300>)
 8006540:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006548:	4b14      	ldr	r3, [pc, #80]	; (800659c <can_tx_rx+0x308>)
 800654a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800654c:	4b0e      	ldr	r3, [pc, #56]	; (8006588 <can_tx_rx+0x2f4>)
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	4619      	mov	r1, r3
 8006552:	4b11      	ldr	r3, [pc, #68]	; (8006598 <can_tx_rx+0x304>)
 8006554:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8006558:	eef0 1a47 	vmov.f32	s3, s14
 800655c:	460b      	mov	r3, r1
 800655e:	2105      	movs	r1, #5
 8006560:	eeb0 1a67 	vmov.f32	s2, s15
 8006564:	eef0 0a46 	vmov.f32	s1, s12
 8006568:	eeb0 0a66 	vmov.f32	s0, s13
 800656c:	480c      	ldr	r0, [pc, #48]	; (80065a0 <can_tx_rx+0x30c>)
 800656e:	f7fb fb9d 	bl	8001cac <pack_reply>
					update_fsm(&state, MOTOR_CMD);
 8006572:	216d      	movs	r1, #109	; 0x6d
 8006574:	4804      	ldr	r0, [pc, #16]	; (8006588 <can_tx_rx+0x2f4>)
 8006576:	f7fd facb 	bl	8003b10 <update_fsm>
					break;
 800657a:	e095      	b.n	80066a8 <can_tx_rx+0x414>
 800657c:	200093e0 	.word	0x200093e0
 8006580:	200093e8 	.word	0x200093e8
 8006584:	20000334 	.word	0x20000334
 8006588:	20000670 	.word	0x20000670
 800658c:	200093d8 	.word	0x200093d8
 8006590:	20000360 	.word	0x20000360
 8006594:	20000694 	.word	0x20000694
 8006598:	20000794 	.word	0x20000794
 800659c:	20000640 	.word	0x20000640
 80065a0:	200093ac 	.word	0x200093ac
 80065a4:	40c90fdb 	.word	0x40c90fdb
 80065a8:	2000024c 	.word	0x2000024c
 80065ac:	40490fdb 	.word	0x40490fdb
				case 5:  // Enter Motor Mode and send controller commands
					pack_reply(&can_tx, comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, VERSION_NUM, hall_cal.hall_cal_state, state.state, controller.i_q_des);	// Pack response
 80065b0:	4b42      	ldr	r3, [pc, #264]	; (80066bc <can_tx_rx+0x428>)
 80065b2:	ed93 7a03 	vldr	s14, [r3, #12]
 80065b6:	4b42      	ldr	r3, [pc, #264]	; (80066c0 <can_tx_rx+0x42c>)
 80065b8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80065bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80065c0:	4b3e      	ldr	r3, [pc, #248]	; (80066bc <can_tx_rx+0x428>)
 80065c2:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80065c6:	4b3e      	ldr	r3, [pc, #248]	; (80066c0 <can_tx_rx+0x42c>)
 80065c8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80065cc:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80065d0:	4b3c      	ldr	r3, [pc, #240]	; (80066c4 <can_tx_rx+0x430>)
 80065d2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80065d6:	4b3a      	ldr	r3, [pc, #232]	; (80066c0 <can_tx_rx+0x42c>)
 80065d8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80065dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065e0:	4b37      	ldr	r3, [pc, #220]	; (80066c0 <can_tx_rx+0x42c>)
 80065e2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80065e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ea:	4b37      	ldr	r3, [pc, #220]	; (80066c8 <can_tx_rx+0x434>)
 80065ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065ee:	4b37      	ldr	r3, [pc, #220]	; (80066cc <can_tx_rx+0x438>)
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	4619      	mov	r1, r3
 80065f4:	4b33      	ldr	r3, [pc, #204]	; (80066c4 <can_tx_rx+0x430>)
 80065f6:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 80065fa:	eef0 1a47 	vmov.f32	s3, s14
 80065fe:	460b      	mov	r3, r1
 8006600:	2105      	movs	r1, #5
 8006602:	eeb0 1a67 	vmov.f32	s2, s15
 8006606:	eef0 0a46 	vmov.f32	s1, s12
 800660a:	eeb0 0a66 	vmov.f32	s0, s13
 800660e:	4830      	ldr	r0, [pc, #192]	; (80066d0 <can_tx_rx+0x43c>)
 8006610:	f7fb fb4c 	bl	8001cac <pack_reply>
					unpack_cmd(can_rx, controller.commands);	// Unpack commands
 8006614:	4c2f      	ldr	r4, [pc, #188]	; (80066d4 <can_tx_rx+0x440>)
 8006616:	4b30      	ldr	r3, [pc, #192]	; (80066d8 <can_tx_rx+0x444>)
 8006618:	9312      	str	r3, [sp, #72]	; 0x48
 800661a:	4668      	mov	r0, sp
 800661c:	f104 0310 	add.w	r3, r4, #16
 8006620:	2248      	movs	r2, #72	; 0x48
 8006622:	4619      	mov	r1, r3
 8006624:	f005 fcbc 	bl	800bfa0 <memcpy>
 8006628:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800662c:	f7fb fbd6 	bl	8001ddc <unpack_cmd>
					controller.timeout = 0;					    // Reset timeout counter
 8006630:	4b24      	ldr	r3, [pc, #144]	; (80066c4 <can_tx_rx+0x430>)
 8006632:	2200      	movs	r2, #0
 8006634:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					controller.i_mag_max = controller.i_q;
 8006638:	4b22      	ldr	r3, [pc, #136]	; (80066c4 <can_tx_rx+0x430>)
 800663a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663c:	4a21      	ldr	r2, [pc, #132]	; (80066c4 <can_tx_rx+0x430>)
 800663e:	6513      	str	r3, [r2, #80]	; 0x50
					break;
 8006640:	e032      	b.n	80066a8 <can_tx_rx+0x414>
				default:
					pack_reply(&can_tx, comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, VERSION_NUM, hall_cal.hall_cal_state, state.state, controller.i_q_des);	// Pack response
 8006642:	4b1e      	ldr	r3, [pc, #120]	; (80066bc <can_tx_rx+0x428>)
 8006644:	ed93 7a03 	vldr	s14, [r3, #12]
 8006648:	4b1d      	ldr	r3, [pc, #116]	; (80066c0 <can_tx_rx+0x42c>)
 800664a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800664e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006652:	4b1a      	ldr	r3, [pc, #104]	; (80066bc <can_tx_rx+0x428>)
 8006654:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8006658:	4b19      	ldr	r3, [pc, #100]	; (80066c0 <can_tx_rx+0x42c>)
 800665a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800665e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8006662:	4b18      	ldr	r3, [pc, #96]	; (80066c4 <can_tx_rx+0x430>)
 8006664:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8006668:	4b15      	ldr	r3, [pc, #84]	; (80066c0 <can_tx_rx+0x42c>)
 800666a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800666e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006672:	4b13      	ldr	r3, [pc, #76]	; (80066c0 <can_tx_rx+0x42c>)
 8006674:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800667c:	4b12      	ldr	r3, [pc, #72]	; (80066c8 <can_tx_rx+0x434>)
 800667e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006680:	4b12      	ldr	r3, [pc, #72]	; (80066cc <can_tx_rx+0x438>)
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	4619      	mov	r1, r3
 8006686:	4b0f      	ldr	r3, [pc, #60]	; (80066c4 <can_tx_rx+0x430>)
 8006688:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800668c:	eef0 1a47 	vmov.f32	s3, s14
 8006690:	460b      	mov	r3, r1
 8006692:	2105      	movs	r1, #5
 8006694:	eeb0 1a67 	vmov.f32	s2, s15
 8006698:	eef0 0a46 	vmov.f32	s1, s12
 800669c:	eeb0 0a66 	vmov.f32	s0, s13
 80066a0:	480b      	ldr	r0, [pc, #44]	; (80066d0 <can_tx_rx+0x43c>)
 80066a2:	f7fb fb03 	bl	8001cac <pack_reply>
					break;
 80066a6:	bf00      	nop
			}
		HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 80066a8:	463b      	mov	r3, r7
 80066aa:	4a0c      	ldr	r2, [pc, #48]	; (80066dc <can_tx_rx+0x448>)
 80066ac:	490c      	ldr	r1, [pc, #48]	; (80066e0 <can_tx_rx+0x44c>)
 80066ae:	480d      	ldr	r0, [pc, #52]	; (80066e4 <can_tx_rx+0x450>)
 80066b0:	f001 f9a6 	bl	8007a00 <HAL_CAN_AddTxMessage>
	}

}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd90      	pop	{r4, r7, pc}
 80066bc:	20000360 	.word	0x20000360
 80066c0:	20000694 	.word	0x20000694
 80066c4:	20000794 	.word	0x20000794
 80066c8:	20000640 	.word	0x20000640
 80066cc:	20000670 	.word	0x20000670
 80066d0:	200093ac 	.word	0x200093ac
 80066d4:	200093d8 	.word	0x200093d8
 80066d8:	2000086c 	.word	0x2000086c
 80066dc:	200093ad 	.word	0x200093ad
 80066e0:	200093b8 	.word	0x200093b8
 80066e4:	20000334 	.word	0x20000334

080066e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80066e8:	b480      	push	{r7}
 80066ea:	af00      	add	r7, sp, #0
	return 1;
 80066ec:	2301      	movs	r3, #1
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <_kill>:

int _kill(int pid, int sig)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006702:	f005 fc23 	bl	800bf4c <__errno>
 8006706:	4603      	mov	r3, r0
 8006708:	2216      	movs	r2, #22
 800670a:	601a      	str	r2, [r3, #0]
	return -1;
 800670c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006710:	4618      	mov	r0, r3
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <_exit>:

void _exit (int status)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006720:	f04f 31ff 	mov.w	r1, #4294967295
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f7ff ffe7 	bl	80066f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800672a:	e7fe      	b.n	800672a <_exit+0x12>

0800672c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006738:	2300      	movs	r3, #0
 800673a:	617b      	str	r3, [r7, #20]
 800673c:	e00a      	b.n	8006754 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800673e:	f3af 8000 	nop.w
 8006742:	4601      	mov	r1, r0
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	60ba      	str	r2, [r7, #8]
 800674a:	b2ca      	uxtb	r2, r1
 800674c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	3301      	adds	r3, #1
 8006752:	617b      	str	r3, [r7, #20]
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	429a      	cmp	r2, r3
 800675a:	dbf0      	blt.n	800673e <_read+0x12>
	}

return len;
 800675c:	687b      	ldr	r3, [r7, #4]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b086      	sub	sp, #24
 800676a:	af00      	add	r7, sp, #0
 800676c:	60f8      	str	r0, [r7, #12]
 800676e:	60b9      	str	r1, [r7, #8]
 8006770:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006772:	2300      	movs	r3, #0
 8006774:	617b      	str	r3, [r7, #20]
 8006776:	e009      	b.n	800678c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	60ba      	str	r2, [r7, #8]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	4618      	mov	r0, r3
 8006782:	f000 fa17 	bl	8006bb4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	3301      	adds	r3, #1
 800678a:	617b      	str	r3, [r7, #20]
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	429a      	cmp	r2, r3
 8006792:	dbf1      	blt.n	8006778 <_write+0x12>
	}
	return len;
 8006794:	687b      	ldr	r3, [r7, #4]
}
 8006796:	4618      	mov	r0, r3
 8006798:	3718      	adds	r7, #24
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <_close>:

int _close(int file)
{
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
	return -1;
 80067a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b083      	sub	sp, #12
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80067c6:	605a      	str	r2, [r3, #4]
	return 0;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr

080067d6 <_isatty>:

int _isatty(int file)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b083      	sub	sp, #12
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
	return 1;
 80067de:	2301      	movs	r3, #1
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
	return 0;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
	...

08006808 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006810:	4b11      	ldr	r3, [pc, #68]	; (8006858 <_sbrk+0x50>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d102      	bne.n	800681e <_sbrk+0x16>
		heap_end = &end;
 8006818:	4b0f      	ldr	r3, [pc, #60]	; (8006858 <_sbrk+0x50>)
 800681a:	4a10      	ldr	r2, [pc, #64]	; (800685c <_sbrk+0x54>)
 800681c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800681e:	4b0e      	ldr	r3, [pc, #56]	; (8006858 <_sbrk+0x50>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006824:	4b0c      	ldr	r3, [pc, #48]	; (8006858 <_sbrk+0x50>)
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4413      	add	r3, r2
 800682c:	466a      	mov	r2, sp
 800682e:	4293      	cmp	r3, r2
 8006830:	d907      	bls.n	8006842 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006832:	f005 fb8b 	bl	800bf4c <__errno>
 8006836:	4603      	mov	r3, r0
 8006838:	220c      	movs	r2, #12
 800683a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800683c:	f04f 33ff 	mov.w	r3, #4294967295
 8006840:	e006      	b.n	8006850 <_sbrk+0x48>
	}

	heap_end += incr;
 8006842:	4b05      	ldr	r3, [pc, #20]	; (8006858 <_sbrk+0x50>)
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4413      	add	r3, r2
 800684a:	4a03      	ldr	r2, [pc, #12]	; (8006858 <_sbrk+0x50>)
 800684c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800684e:	68fb      	ldr	r3, [r7, #12]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	20000250 	.word	0x20000250
 800685c:	200095a8 	.word	0x200095a8

08006860 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006860:	b480      	push	{r7}
 8006862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006864:	4b08      	ldr	r3, [pc, #32]	; (8006888 <SystemInit+0x28>)
 8006866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800686a:	4a07      	ldr	r2, [pc, #28]	; (8006888 <SystemInit+0x28>)
 800686c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006874:	4b04      	ldr	r3, [pc, #16]	; (8006888 <SystemInit+0x28>)
 8006876:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800687a:	609a      	str	r2, [r3, #8]
#endif
}
 800687c:	bf00      	nop
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	e000ed00 	.word	0xe000ed00

0800688c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b096      	sub	sp, #88	; 0x58
 8006890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006892:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006896:	2200      	movs	r2, #0
 8006898:	601a      	str	r2, [r3, #0]
 800689a:	605a      	str	r2, [r3, #4]
 800689c:	609a      	str	r2, [r3, #8]
 800689e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80068a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80068a4:	2200      	movs	r2, #0
 80068a6:	601a      	str	r2, [r3, #0]
 80068a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80068aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068ae:	2200      	movs	r2, #0
 80068b0:	601a      	str	r2, [r3, #0]
 80068b2:	605a      	str	r2, [r3, #4]
 80068b4:	609a      	str	r2, [r3, #8]
 80068b6:	60da      	str	r2, [r3, #12]
 80068b8:	611a      	str	r2, [r3, #16]
 80068ba:	615a      	str	r2, [r3, #20]
 80068bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80068be:	1d3b      	adds	r3, r7, #4
 80068c0:	2220      	movs	r2, #32
 80068c2:	2100      	movs	r1, #0
 80068c4:	4618      	mov	r0, r3
 80068c6:	f005 fb79 	bl	800bfbc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80068ca:	4b4a      	ldr	r3, [pc, #296]	; (80069f4 <MX_TIM1_Init+0x168>)
 80068cc:	4a4a      	ldr	r2, [pc, #296]	; (80069f8 <MX_TIM1_Init+0x16c>)
 80068ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80068d0:	4b48      	ldr	r3, [pc, #288]	; (80069f4 <MX_TIM1_Init+0x168>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80068d6:	4b47      	ldr	r3, [pc, #284]	; (80069f4 <MX_TIM1_Init+0x168>)
 80068d8:	2220      	movs	r2, #32
 80068da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0x8CA;
 80068dc:	4b45      	ldr	r3, [pc, #276]	; (80069f4 <MX_TIM1_Init+0x168>)
 80068de:	f640 02ca 	movw	r2, #2250	; 0x8ca
 80068e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068e4:	4b43      	ldr	r3, [pc, #268]	; (80069f4 <MX_TIM1_Init+0x168>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 80068ea:	4b42      	ldr	r3, [pc, #264]	; (80069f4 <MX_TIM1_Init+0x168>)
 80068ec:	2201      	movs	r2, #1
 80068ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80068f0:	4b40      	ldr	r3, [pc, #256]	; (80069f4 <MX_TIM1_Init+0x168>)
 80068f2:	2280      	movs	r2, #128	; 0x80
 80068f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80068f6:	483f      	ldr	r0, [pc, #252]	; (80069f4 <MX_TIM1_Init+0x168>)
 80068f8:	f003 f8c2 	bl	8009a80 <HAL_TIM_Base_Init>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8006902:	f7fe fd9b 	bl	800543c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800690a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800690c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006910:	4619      	mov	r1, r3
 8006912:	4838      	ldr	r0, [pc, #224]	; (80069f4 <MX_TIM1_Init+0x168>)
 8006914:	f003 fc5c 	bl	800a1d0 <HAL_TIM_ConfigClockSource>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800691e:	f7fe fd8d 	bl	800543c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006922:	4834      	ldr	r0, [pc, #208]	; (80069f4 <MX_TIM1_Init+0x168>)
 8006924:	f003 f96c 	bl	8009c00 <HAL_TIM_PWM_Init>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800692e:	f7fe fd85 	bl	800543c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006932:	2300      	movs	r3, #0
 8006934:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006936:	2300      	movs	r3, #0
 8006938:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800693a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800693e:	4619      	mov	r1, r3
 8006940:	482c      	ldr	r0, [pc, #176]	; (80069f4 <MX_TIM1_Init+0x168>)
 8006942:	f004 f84b 	bl	800a9dc <HAL_TIMEx_MasterConfigSynchronization>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d001      	beq.n	8006950 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800694c:	f7fe fd76 	bl	800543c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006950:	2360      	movs	r3, #96	; 0x60
 8006952:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8006954:	2300      	movs	r3, #0
 8006956:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8006958:	2302      	movs	r3, #2
 800695a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800695c:	2300      	movs	r3, #0
 800695e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8006960:	2304      	movs	r3, #4
 8006962:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006964:	2300      	movs	r3, #0
 8006966:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006968:	2300      	movs	r3, #0
 800696a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800696c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006970:	2200      	movs	r2, #0
 8006972:	4619      	mov	r1, r3
 8006974:	481f      	ldr	r0, [pc, #124]	; (80069f4 <MX_TIM1_Init+0x168>)
 8006976:	f003 fb6d 	bl	800a054 <HAL_TIM_PWM_ConfigChannel>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d001      	beq.n	8006984 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8006980:	f7fe fd5c 	bl	800543c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006988:	2204      	movs	r2, #4
 800698a:	4619      	mov	r1, r3
 800698c:	4819      	ldr	r0, [pc, #100]	; (80069f4 <MX_TIM1_Init+0x168>)
 800698e:	f003 fb61 	bl	800a054 <HAL_TIM_PWM_ConfigChannel>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8006998:	f7fe fd50 	bl	800543c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800699c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069a0:	2208      	movs	r2, #8
 80069a2:	4619      	mov	r1, r3
 80069a4:	4813      	ldr	r0, [pc, #76]	; (80069f4 <MX_TIM1_Init+0x168>)
 80069a6:	f003 fb55 	bl	800a054 <HAL_TIM_PWM_ConfigChannel>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d001      	beq.n	80069b4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80069b0:	f7fe fd44 	bl	800543c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80069b4:	2300      	movs	r3, #0
 80069b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80069b8:	2300      	movs	r3, #0
 80069ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80069bc:	2300      	movs	r3, #0
 80069be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80069c0:	2300      	movs	r3, #0
 80069c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80069c4:	2300      	movs	r3, #0
 80069c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80069c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80069cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80069ce:	2300      	movs	r3, #0
 80069d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80069d2:	1d3b      	adds	r3, r7, #4
 80069d4:	4619      	mov	r1, r3
 80069d6:	4807      	ldr	r0, [pc, #28]	; (80069f4 <MX_TIM1_Init+0x168>)
 80069d8:	f004 f87c 	bl	800aad4 <HAL_TIMEx_ConfigBreakDeadTime>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80069e2:	f7fe fd2b 	bl	800543c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80069e6:	4803      	ldr	r0, [pc, #12]	; (80069f4 <MX_TIM1_Init+0x168>)
 80069e8:	f000 f830 	bl	8006a4c <HAL_TIM_MspPostInit>

}
 80069ec:	bf00      	nop
 80069ee:	3758      	adds	r7, #88	; 0x58
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	20009508 	.word	0x20009508
 80069f8:	40010000 	.word	0x40010000

080069fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a0e      	ldr	r2, [pc, #56]	; (8006a44 <HAL_TIM_Base_MspInit+0x48>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d115      	bne.n	8006a3a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006a0e:	2300      	movs	r3, #0
 8006a10:	60fb      	str	r3, [r7, #12]
 8006a12:	4b0d      	ldr	r3, [pc, #52]	; (8006a48 <HAL_TIM_Base_MspInit+0x4c>)
 8006a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a16:	4a0c      	ldr	r2, [pc, #48]	; (8006a48 <HAL_TIM_Base_MspInit+0x4c>)
 8006a18:	f043 0301 	orr.w	r3, r3, #1
 8006a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8006a1e:	4b0a      	ldr	r3, [pc, #40]	; (8006a48 <HAL_TIM_Base_MspInit+0x4c>)
 8006a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	2019      	movs	r0, #25
 8006a30:	f001 fce7 	bl	8008402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006a34:	2019      	movs	r0, #25
 8006a36:	f001 fd00 	bl	800843a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8006a3a:	bf00      	nop
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	40010000 	.word	0x40010000
 8006a48:	40023800 	.word	0x40023800

08006a4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b088      	sub	sp, #32
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a54:	f107 030c 	add.w	r3, r7, #12
 8006a58:	2200      	movs	r2, #0
 8006a5a:	601a      	str	r2, [r3, #0]
 8006a5c:	605a      	str	r2, [r3, #4]
 8006a5e:	609a      	str	r2, [r3, #8]
 8006a60:	60da      	str	r2, [r3, #12]
 8006a62:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a12      	ldr	r2, [pc, #72]	; (8006ab4 <HAL_TIM_MspPostInit+0x68>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d11e      	bne.n	8006aac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a6e:	2300      	movs	r3, #0
 8006a70:	60bb      	str	r3, [r7, #8]
 8006a72:	4b11      	ldr	r3, [pc, #68]	; (8006ab8 <HAL_TIM_MspPostInit+0x6c>)
 8006a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a76:	4a10      	ldr	r2, [pc, #64]	; (8006ab8 <HAL_TIM_MspPostInit+0x6c>)
 8006a78:	f043 0301 	orr.w	r3, r3, #1
 8006a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8006a7e:	4b0e      	ldr	r3, [pc, #56]	; (8006ab8 <HAL_TIM_MspPostInit+0x6c>)
 8006a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	60bb      	str	r3, [r7, #8]
 8006a88:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8006a8a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8006a8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a90:	2302      	movs	r3, #2
 8006a92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a94:	2300      	movs	r3, #0
 8006a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006aa0:	f107 030c 	add.w	r3, r7, #12
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	4805      	ldr	r0, [pc, #20]	; (8006abc <HAL_TIM_MspPostInit+0x70>)
 8006aa8:	f001 fd74 	bl	8008594 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006aac:	bf00      	nop
 8006aae:	3720      	adds	r7, #32
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	40010000 	.word	0x40010000
 8006ab8:	40023800 	.word	0x40023800
 8006abc:	40020000 	.word	0x40020000

08006ac0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006ac4:	4b11      	ldr	r3, [pc, #68]	; (8006b0c <MX_USART2_UART_Init+0x4c>)
 8006ac6:	4a12      	ldr	r2, [pc, #72]	; (8006b10 <MX_USART2_UART_Init+0x50>)
 8006ac8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006aca:	4b10      	ldr	r3, [pc, #64]	; (8006b0c <MX_USART2_UART_Init+0x4c>)
 8006acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006ad0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006ad2:	4b0e      	ldr	r3, [pc, #56]	; (8006b0c <MX_USART2_UART_Init+0x4c>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006ad8:	4b0c      	ldr	r3, [pc, #48]	; (8006b0c <MX_USART2_UART_Init+0x4c>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006ade:	4b0b      	ldr	r3, [pc, #44]	; (8006b0c <MX_USART2_UART_Init+0x4c>)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006ae4:	4b09      	ldr	r3, [pc, #36]	; (8006b0c <MX_USART2_UART_Init+0x4c>)
 8006ae6:	220c      	movs	r2, #12
 8006ae8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006aea:	4b08      	ldr	r3, [pc, #32]	; (8006b0c <MX_USART2_UART_Init+0x4c>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006af0:	4b06      	ldr	r3, [pc, #24]	; (8006b0c <MX_USART2_UART_Init+0x4c>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006af6:	4805      	ldr	r0, [pc, #20]	; (8006b0c <MX_USART2_UART_Init+0x4c>)
 8006af8:	f004 f852 	bl	800aba0 <HAL_UART_Init>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006b02:	f7fe fc9b 	bl	800543c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006b06:	bf00      	nop
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	20009550 	.word	0x20009550
 8006b10:	40004400 	.word	0x40004400

08006b14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b08a      	sub	sp, #40	; 0x28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b1c:	f107 0314 	add.w	r3, r7, #20
 8006b20:	2200      	movs	r2, #0
 8006b22:	601a      	str	r2, [r3, #0]
 8006b24:	605a      	str	r2, [r3, #4]
 8006b26:	609a      	str	r2, [r3, #8]
 8006b28:	60da      	str	r2, [r3, #12]
 8006b2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a1d      	ldr	r2, [pc, #116]	; (8006ba8 <HAL_UART_MspInit+0x94>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d133      	bne.n	8006b9e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006b36:	2300      	movs	r3, #0
 8006b38:	613b      	str	r3, [r7, #16]
 8006b3a:	4b1c      	ldr	r3, [pc, #112]	; (8006bac <HAL_UART_MspInit+0x98>)
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3e:	4a1b      	ldr	r2, [pc, #108]	; (8006bac <HAL_UART_MspInit+0x98>)
 8006b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b44:	6413      	str	r3, [r2, #64]	; 0x40
 8006b46:	4b19      	ldr	r3, [pc, #100]	; (8006bac <HAL_UART_MspInit+0x98>)
 8006b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b4e:	613b      	str	r3, [r7, #16]
 8006b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b52:	2300      	movs	r3, #0
 8006b54:	60fb      	str	r3, [r7, #12]
 8006b56:	4b15      	ldr	r3, [pc, #84]	; (8006bac <HAL_UART_MspInit+0x98>)
 8006b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5a:	4a14      	ldr	r2, [pc, #80]	; (8006bac <HAL_UART_MspInit+0x98>)
 8006b5c:	f043 0301 	orr.w	r3, r3, #1
 8006b60:	6313      	str	r3, [r2, #48]	; 0x30
 8006b62:	4b12      	ldr	r3, [pc, #72]	; (8006bac <HAL_UART_MspInit+0x98>)
 8006b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006b6e:	230c      	movs	r3, #12
 8006b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b72:	2302      	movs	r3, #2
 8006b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b76:	2300      	movs	r3, #0
 8006b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006b7e:	2307      	movs	r3, #7
 8006b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b82:	f107 0314 	add.w	r3, r7, #20
 8006b86:	4619      	mov	r1, r3
 8006b88:	4809      	ldr	r0, [pc, #36]	; (8006bb0 <HAL_UART_MspInit+0x9c>)
 8006b8a:	f001 fd03 	bl	8008594 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006b8e:	2200      	movs	r2, #0
 8006b90:	2100      	movs	r1, #0
 8006b92:	2026      	movs	r0, #38	; 0x26
 8006b94:	f001 fc35 	bl	8008402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006b98:	2026      	movs	r0, #38	; 0x26
 8006b9a:	f001 fc4e 	bl	800843a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006b9e:	bf00      	nop
 8006ba0:	3728      	adds	r7, #40	; 0x28
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	40004400 	.word	0x40004400
 8006bac:	40023800 	.word	0x40023800
 8006bb0:	40020000 	.word	0x40020000

08006bb4 <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8006bbc:	1d39      	adds	r1, r7, #4
 8006bbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	4803      	ldr	r0, [pc, #12]	; (8006bd4 <__io_putchar+0x20>)
 8006bc6:	f004 f838 	bl	800ac3a <HAL_UART_Transmit>
return 0;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	20009550 	.word	0x20009550

08006bd8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8006be0:	2201      	movs	r2, #1
 8006be2:	4904      	ldr	r1, [pc, #16]	; (8006bf4 <HAL_UART_RxCpltCallback+0x1c>)
 8006be4:	4804      	ldr	r0, [pc, #16]	; (8006bf8 <HAL_UART_RxCpltCallback+0x20>)
 8006be6:	f004 f8ba 	bl	800ad5e <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006bea:	bf00      	nop
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	2000066c 	.word	0x2000066c
 8006bf8:	20009550 	.word	0x20009550

08006bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006c34 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006c00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006c02:	e003      	b.n	8006c0c <LoopCopyDataInit>

08006c04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006c04:	4b0c      	ldr	r3, [pc, #48]	; (8006c38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006c06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006c08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006c0a:	3104      	adds	r1, #4

08006c0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006c0c:	480b      	ldr	r0, [pc, #44]	; (8006c3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006c0e:	4b0c      	ldr	r3, [pc, #48]	; (8006c40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006c10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006c12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006c14:	d3f6      	bcc.n	8006c04 <CopyDataInit>
  ldr  r2, =_sbss
 8006c16:	4a0b      	ldr	r2, [pc, #44]	; (8006c44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006c18:	e002      	b.n	8006c20 <LoopFillZerobss>

08006c1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006c1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006c1c:	f842 3b04 	str.w	r3, [r2], #4

08006c20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006c20:	4b09      	ldr	r3, [pc, #36]	; (8006c48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006c22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006c24:	d3f9      	bcc.n	8006c1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006c26:	f7ff fe1b 	bl	8006860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006c2a:	f005 f995 	bl	800bf58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006c2e:	f7fe f841 	bl	8004cb4 <main>
  bx  lr    
 8006c32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006c34:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006c38:	080119e4 	.word	0x080119e4
  ldr  r0, =_sdata
 8006c3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006c40:	20000220 	.word	0x20000220
  ldr  r2, =_sbss
 8006c44:	20000220 	.word	0x20000220
  ldr  r3, = _ebss
 8006c48:	200095a8 	.word	0x200095a8

08006c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006c4c:	e7fe      	b.n	8006c4c <ADC_IRQHandler>
	...

08006c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006c54:	4b0e      	ldr	r3, [pc, #56]	; (8006c90 <HAL_Init+0x40>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a0d      	ldr	r2, [pc, #52]	; (8006c90 <HAL_Init+0x40>)
 8006c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006c60:	4b0b      	ldr	r3, [pc, #44]	; (8006c90 <HAL_Init+0x40>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a0a      	ldr	r2, [pc, #40]	; (8006c90 <HAL_Init+0x40>)
 8006c66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006c6c:	4b08      	ldr	r3, [pc, #32]	; (8006c90 <HAL_Init+0x40>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a07      	ldr	r2, [pc, #28]	; (8006c90 <HAL_Init+0x40>)
 8006c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006c78:	2003      	movs	r0, #3
 8006c7a:	f001 fbb7 	bl	80083ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006c7e:	2000      	movs	r0, #0
 8006c80:	f000 f808 	bl	8006c94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006c84:	f7ff fa60 	bl	8006148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	40023c00 	.word	0x40023c00

08006c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006c9c:	4b12      	ldr	r3, [pc, #72]	; (8006ce8 <HAL_InitTick+0x54>)
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	4b12      	ldr	r3, [pc, #72]	; (8006cec <HAL_InitTick+0x58>)
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f001 fbcf 	bl	8008456 <HAL_SYSTICK_Config>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e00e      	b.n	8006ce0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b0f      	cmp	r3, #15
 8006cc6:	d80a      	bhi.n	8006cde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006cc8:	2200      	movs	r2, #0
 8006cca:	6879      	ldr	r1, [r7, #4]
 8006ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd0:	f001 fb97 	bl	8008402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006cd4:	4a06      	ldr	r2, [pc, #24]	; (8006cf0 <HAL_InitTick+0x5c>)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	e000      	b.n	8006ce0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	20000040 	.word	0x20000040
 8006cec:	20000048 	.word	0x20000048
 8006cf0:	20000044 	.word	0x20000044

08006cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006cf8:	4b06      	ldr	r3, [pc, #24]	; (8006d14 <HAL_IncTick+0x20>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	4b06      	ldr	r3, [pc, #24]	; (8006d18 <HAL_IncTick+0x24>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4413      	add	r3, r2
 8006d04:	4a04      	ldr	r2, [pc, #16]	; (8006d18 <HAL_IncTick+0x24>)
 8006d06:	6013      	str	r3, [r2, #0]
}
 8006d08:	bf00      	nop
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	20000048 	.word	0x20000048
 8006d18:	20009594 	.word	0x20009594

08006d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8006d20:	4b03      	ldr	r3, [pc, #12]	; (8006d30 <HAL_GetTick+0x14>)
 8006d22:	681b      	ldr	r3, [r3, #0]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	20009594 	.word	0x20009594

08006d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d3c:	f7ff ffee 	bl	8006d1c <HAL_GetTick>
 8006d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4c:	d005      	beq.n	8006d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006d4e:	4b0a      	ldr	r3, [pc, #40]	; (8006d78 <HAL_Delay+0x44>)
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	461a      	mov	r2, r3
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4413      	add	r3, r2
 8006d58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006d5a:	bf00      	nop
 8006d5c:	f7ff ffde 	bl	8006d1c <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d8f7      	bhi.n	8006d5c <HAL_Delay+0x28>
  {
  }
}
 8006d6c:	bf00      	nop
 8006d6e:	bf00      	nop
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	20000048 	.word	0x20000048

08006d7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d84:	2300      	movs	r3, #0
 8006d86:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e033      	b.n	8006dfa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d109      	bne.n	8006dae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7fa fa44 	bl	8001228 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db2:	f003 0310 	and.w	r3, r3, #16
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d118      	bne.n	8006dec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006dc2:	f023 0302 	bic.w	r3, r3, #2
 8006dc6:	f043 0202 	orr.w	r2, r3, #2
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fab4 	bl	800733c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dde:	f023 0303 	bic.w	r3, r3, #3
 8006de2:	f043 0201 	orr.w	r2, r3, #1
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	641a      	str	r2, [r3, #64]	; 0x40
 8006dea:	e001      	b.n	8006df0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
	...

08006e04 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d101      	bne.n	8006e1e <HAL_ADC_Start+0x1a>
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	e0b2      	b.n	8006f84 <HAL_ADC_Start+0x180>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d018      	beq.n	8006e66 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	689a      	ldr	r2, [r3, #8]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f042 0201 	orr.w	r2, r2, #1
 8006e42:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006e44:	4b52      	ldr	r3, [pc, #328]	; (8006f90 <HAL_ADC_Start+0x18c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a52      	ldr	r2, [pc, #328]	; (8006f94 <HAL_ADC_Start+0x190>)
 8006e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e4e:	0c9a      	lsrs	r2, r3, #18
 8006e50:	4613      	mov	r3, r2
 8006e52:	005b      	lsls	r3, r3, #1
 8006e54:	4413      	add	r3, r2
 8006e56:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006e58:	e002      	b.n	8006e60 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1f9      	bne.n	8006e5a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d17a      	bne.n	8006f6a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e78:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006e7c:	f023 0301 	bic.w	r3, r3, #1
 8006e80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d007      	beq.n	8006ea6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006e9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eb2:	d106      	bne.n	8006ec2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb8:	f023 0206 	bic.w	r2, r3, #6
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	645a      	str	r2, [r3, #68]	; 0x44
 8006ec0:	e002      	b.n	8006ec8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ed0:	4b31      	ldr	r3, [pc, #196]	; (8006f98 <HAL_ADC_Start+0x194>)
 8006ed2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006edc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f003 031f 	and.w	r3, r3, #31
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d12a      	bne.n	8006f40 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a2b      	ldr	r2, [pc, #172]	; (8006f9c <HAL_ADC_Start+0x198>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d015      	beq.n	8006f20 <HAL_ADC_Start+0x11c>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a29      	ldr	r2, [pc, #164]	; (8006fa0 <HAL_ADC_Start+0x19c>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d105      	bne.n	8006f0a <HAL_ADC_Start+0x106>
 8006efe:	4b26      	ldr	r3, [pc, #152]	; (8006f98 <HAL_ADC_Start+0x194>)
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f003 031f 	and.w	r3, r3, #31
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00a      	beq.n	8006f20 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a25      	ldr	r2, [pc, #148]	; (8006fa4 <HAL_ADC_Start+0x1a0>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d136      	bne.n	8006f82 <HAL_ADC_Start+0x17e>
 8006f14:	4b20      	ldr	r3, [pc, #128]	; (8006f98 <HAL_ADC_Start+0x194>)
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	f003 0310 	and.w	r3, r3, #16
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d130      	bne.n	8006f82 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d129      	bne.n	8006f82 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	689a      	ldr	r2, [r3, #8]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006f3c:	609a      	str	r2, [r3, #8]
 8006f3e:	e020      	b.n	8006f82 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a15      	ldr	r2, [pc, #84]	; (8006f9c <HAL_ADC_Start+0x198>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d11b      	bne.n	8006f82 <HAL_ADC_Start+0x17e>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d114      	bne.n	8006f82 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689a      	ldr	r2, [r3, #8]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006f66:	609a      	str	r2, [r3, #8]
 8006f68:	e00b      	b.n	8006f82 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6e:	f043 0210 	orr.w	r2, r3, #16
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f7a:	f043 0201 	orr.w	r2, r3, #1
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	20000040 	.word	0x20000040
 8006f94:	431bde83 	.word	0x431bde83
 8006f98:	40012300 	.word	0x40012300
 8006f9c:	40012000 	.word	0x40012000
 8006fa0:	40012100 	.word	0x40012100
 8006fa4:	40012200 	.word	0x40012200

08006fa8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fc4:	d113      	bne.n	8006fee <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fd4:	d10b      	bne.n	8006fee <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	f043 0220 	orr.w	r2, r3, #32
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e063      	b.n	80070b6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006fee:	f7ff fe95 	bl	8006d1c <HAL_GetTick>
 8006ff2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006ff4:	e021      	b.n	800703a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffc:	d01d      	beq.n	800703a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d007      	beq.n	8007014 <HAL_ADC_PollForConversion+0x6c>
 8007004:	f7ff fe8a 	bl	8006d1c <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	429a      	cmp	r2, r3
 8007012:	d212      	bcs.n	800703a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0302 	and.w	r3, r3, #2
 800701e:	2b02      	cmp	r3, #2
 8007020:	d00b      	beq.n	800703a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007026:	f043 0204 	orr.w	r2, r3, #4
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e03d      	b.n	80070b6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0302 	and.w	r3, r3, #2
 8007044:	2b02      	cmp	r3, #2
 8007046:	d1d6      	bne.n	8006ff6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f06f 0212 	mvn.w	r2, #18
 8007050:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007056:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d123      	bne.n	80070b4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007070:	2b00      	cmp	r3, #0
 8007072:	d11f      	bne.n	80070b4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800707e:	2b00      	cmp	r3, #0
 8007080:	d006      	beq.n	8007090 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800708c:	2b00      	cmp	r3, #0
 800708e:	d111      	bne.n	80070b4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007094:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d105      	bne.n	80070b4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ac:	f043 0201 	orr.w	r2, r3, #1
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80070be:	b480      	push	{r7}
 80070c0:	b083      	sub	sp, #12
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d101      	bne.n	80070f4 <HAL_ADC_ConfigChannel+0x1c>
 80070f0:	2302      	movs	r3, #2
 80070f2:	e113      	b.n	800731c <HAL_ADC_ConfigChannel+0x244>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b09      	cmp	r3, #9
 8007102:	d925      	bls.n	8007150 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68d9      	ldr	r1, [r3, #12]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	b29b      	uxth	r3, r3
 8007110:	461a      	mov	r2, r3
 8007112:	4613      	mov	r3, r2
 8007114:	005b      	lsls	r3, r3, #1
 8007116:	4413      	add	r3, r2
 8007118:	3b1e      	subs	r3, #30
 800711a:	2207      	movs	r2, #7
 800711c:	fa02 f303 	lsl.w	r3, r2, r3
 8007120:	43da      	mvns	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	400a      	ands	r2, r1
 8007128:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68d9      	ldr	r1, [r3, #12]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	689a      	ldr	r2, [r3, #8]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	b29b      	uxth	r3, r3
 800713a:	4618      	mov	r0, r3
 800713c:	4603      	mov	r3, r0
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	4403      	add	r3, r0
 8007142:	3b1e      	subs	r3, #30
 8007144:	409a      	lsls	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	60da      	str	r2, [r3, #12]
 800714e:	e022      	b.n	8007196 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	6919      	ldr	r1, [r3, #16]
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	b29b      	uxth	r3, r3
 800715c:	461a      	mov	r2, r3
 800715e:	4613      	mov	r3, r2
 8007160:	005b      	lsls	r3, r3, #1
 8007162:	4413      	add	r3, r2
 8007164:	2207      	movs	r2, #7
 8007166:	fa02 f303 	lsl.w	r3, r2, r3
 800716a:	43da      	mvns	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	400a      	ands	r2, r1
 8007172:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6919      	ldr	r1, [r3, #16]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	689a      	ldr	r2, [r3, #8]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	b29b      	uxth	r3, r3
 8007184:	4618      	mov	r0, r3
 8007186:	4603      	mov	r3, r0
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	4403      	add	r3, r0
 800718c:	409a      	lsls	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	430a      	orrs	r2, r1
 8007194:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	2b06      	cmp	r3, #6
 800719c:	d824      	bhi.n	80071e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	4613      	mov	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	3b05      	subs	r3, #5
 80071b0:	221f      	movs	r2, #31
 80071b2:	fa02 f303 	lsl.w	r3, r2, r3
 80071b6:	43da      	mvns	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	400a      	ands	r2, r1
 80071be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	4618      	mov	r0, r3
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	4613      	mov	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4413      	add	r3, r2
 80071d8:	3b05      	subs	r3, #5
 80071da:	fa00 f203 	lsl.w	r2, r0, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	635a      	str	r2, [r3, #52]	; 0x34
 80071e6:	e04c      	b.n	8007282 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	2b0c      	cmp	r3, #12
 80071ee:	d824      	bhi.n	800723a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	4613      	mov	r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	3b23      	subs	r3, #35	; 0x23
 8007202:	221f      	movs	r2, #31
 8007204:	fa02 f303 	lsl.w	r3, r2, r3
 8007208:	43da      	mvns	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	400a      	ands	r2, r1
 8007210:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	b29b      	uxth	r3, r3
 800721e:	4618      	mov	r0, r3
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	4613      	mov	r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	3b23      	subs	r3, #35	; 0x23
 800722c:	fa00 f203 	lsl.w	r2, r0, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	430a      	orrs	r2, r1
 8007236:	631a      	str	r2, [r3, #48]	; 0x30
 8007238:	e023      	b.n	8007282 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	4613      	mov	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4413      	add	r3, r2
 800724a:	3b41      	subs	r3, #65	; 0x41
 800724c:	221f      	movs	r2, #31
 800724e:	fa02 f303 	lsl.w	r3, r2, r3
 8007252:	43da      	mvns	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	400a      	ands	r2, r1
 800725a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	b29b      	uxth	r3, r3
 8007268:	4618      	mov	r0, r3
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	4613      	mov	r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4413      	add	r3, r2
 8007274:	3b41      	subs	r3, #65	; 0x41
 8007276:	fa00 f203 	lsl.w	r2, r0, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	430a      	orrs	r2, r1
 8007280:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007282:	4b29      	ldr	r3, [pc, #164]	; (8007328 <HAL_ADC_ConfigChannel+0x250>)
 8007284:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a28      	ldr	r2, [pc, #160]	; (800732c <HAL_ADC_ConfigChannel+0x254>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d10f      	bne.n	80072b0 <HAL_ADC_ConfigChannel+0x1d8>
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b12      	cmp	r3, #18
 8007296:	d10b      	bne.n	80072b0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a1d      	ldr	r2, [pc, #116]	; (800732c <HAL_ADC_ConfigChannel+0x254>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d12b      	bne.n	8007312 <HAL_ADC_ConfigChannel+0x23a>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a1c      	ldr	r2, [pc, #112]	; (8007330 <HAL_ADC_ConfigChannel+0x258>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d003      	beq.n	80072cc <HAL_ADC_ConfigChannel+0x1f4>
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b11      	cmp	r3, #17
 80072ca:	d122      	bne.n	8007312 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a11      	ldr	r2, [pc, #68]	; (8007330 <HAL_ADC_ConfigChannel+0x258>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d111      	bne.n	8007312 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80072ee:	4b11      	ldr	r3, [pc, #68]	; (8007334 <HAL_ADC_ConfigChannel+0x25c>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a11      	ldr	r2, [pc, #68]	; (8007338 <HAL_ADC_ConfigChannel+0x260>)
 80072f4:	fba2 2303 	umull	r2, r3, r2, r3
 80072f8:	0c9a      	lsrs	r2, r3, #18
 80072fa:	4613      	mov	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4413      	add	r3, r2
 8007300:	005b      	lsls	r3, r3, #1
 8007302:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007304:	e002      	b.n	800730c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	3b01      	subs	r3, #1
 800730a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1f9      	bne.n	8007306 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3714      	adds	r7, #20
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	40012300 	.word	0x40012300
 800732c:	40012000 	.word	0x40012000
 8007330:	10000012 	.word	0x10000012
 8007334:	20000040 	.word	0x20000040
 8007338:	431bde83 	.word	0x431bde83

0800733c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007344:	4b79      	ldr	r3, [pc, #484]	; (800752c <ADC_Init+0x1f0>)
 8007346:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	685a      	ldr	r2, [r3, #4]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	431a      	orrs	r2, r3
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007370:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	6859      	ldr	r1, [r3, #4]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	021a      	lsls	r2, r3, #8
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	685a      	ldr	r2, [r3, #4]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007394:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6859      	ldr	r1, [r3, #4]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	689a      	ldr	r2, [r3, #8]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	430a      	orrs	r2, r1
 80073a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689a      	ldr	r2, [r3, #8]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6899      	ldr	r1, [r3, #8]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68da      	ldr	r2, [r3, #12]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ce:	4a58      	ldr	r2, [pc, #352]	; (8007530 <ADC_Init+0x1f4>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d022      	beq.n	800741a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689a      	ldr	r2, [r3, #8]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80073e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6899      	ldr	r1, [r3, #8]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689a      	ldr	r2, [r3, #8]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007404:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6899      	ldr	r1, [r3, #8]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	430a      	orrs	r2, r1
 8007416:	609a      	str	r2, [r3, #8]
 8007418:	e00f      	b.n	800743a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	689a      	ldr	r2, [r3, #8]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007428:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	689a      	ldr	r2, [r3, #8]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007438:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	689a      	ldr	r2, [r3, #8]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f022 0202 	bic.w	r2, r2, #2
 8007448:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	6899      	ldr	r1, [r3, #8]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	7e1b      	ldrb	r3, [r3, #24]
 8007454:	005a      	lsls	r2, r3, #1
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	430a      	orrs	r2, r1
 800745c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d01b      	beq.n	80074a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685a      	ldr	r2, [r3, #4]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007476:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007486:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6859      	ldr	r1, [r3, #4]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007492:	3b01      	subs	r3, #1
 8007494:	035a      	lsls	r2, r3, #13
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	430a      	orrs	r2, r1
 800749c:	605a      	str	r2, [r3, #4]
 800749e:	e007      	b.n	80074b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80074be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	051a      	lsls	r2, r3, #20
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	430a      	orrs	r2, r1
 80074d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	689a      	ldr	r2, [r3, #8]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80074e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6899      	ldr	r1, [r3, #8]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80074f2:	025a      	lsls	r2, r3, #9
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	430a      	orrs	r2, r1
 80074fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	689a      	ldr	r2, [r3, #8]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800750a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6899      	ldr	r1, [r3, #8]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	029a      	lsls	r2, r3, #10
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	430a      	orrs	r2, r1
 800751e:	609a      	str	r2, [r3, #8]
}
 8007520:	bf00      	nop
 8007522:	3714      	adds	r7, #20
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr
 800752c:	40012300 	.word	0x40012300
 8007530:	0f000001 	.word	0x0f000001

08007534 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007544:	2b01      	cmp	r3, #1
 8007546:	d101      	bne.n	800754c <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8007548:	2302      	movs	r3, #2
 800754a:	e031      	b.n	80075b0 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007554:	4b19      	ldr	r3, [pc, #100]	; (80075bc <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8007556:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	f023 021f 	bic.w	r2, r3, #31
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	431a      	orrs	r2, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	685a      	ldr	r2, [r3, #4]
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	431a      	orrs	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	431a      	orrs	r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3714      	adds	r7, #20
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr
 80075bc:	40012300 	.word	0x40012300

080075c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d101      	bne.n	80075d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e0ed      	b.n	80077ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d102      	bne.n	80075e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7fa faca 	bl	8001b78 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 0202 	bic.w	r2, r2, #2
 80075f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80075f4:	f7ff fb92 	bl	8006d1c <HAL_GetTick>
 80075f8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80075fa:	e012      	b.n	8007622 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80075fc:	f7ff fb8e 	bl	8006d1c <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	2b0a      	cmp	r3, #10
 8007608:	d90b      	bls.n	8007622 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2205      	movs	r2, #5
 800761a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e0c5      	b.n	80077ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f003 0302 	and.w	r3, r3, #2
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1e5      	bne.n	80075fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f042 0201 	orr.w	r2, r2, #1
 800763e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007640:	f7ff fb6c 	bl	8006d1c <HAL_GetTick>
 8007644:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007646:	e012      	b.n	800766e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007648:	f7ff fb68 	bl	8006d1c <HAL_GetTick>
 800764c:	4602      	mov	r2, r0
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	2b0a      	cmp	r3, #10
 8007654:	d90b      	bls.n	800766e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2205      	movs	r2, #5
 8007666:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e09f      	b.n	80077ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	2b00      	cmp	r3, #0
 800767a:	d0e5      	beq.n	8007648 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	7e1b      	ldrb	r3, [r3, #24]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d108      	bne.n	8007696 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007692:	601a      	str	r2, [r3, #0]
 8007694:	e007      	b.n	80076a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	7e5b      	ldrb	r3, [r3, #25]
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d108      	bne.n	80076c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	e007      	b.n	80076d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	7e9b      	ldrb	r3, [r3, #26]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d108      	bne.n	80076ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f042 0220 	orr.w	r2, r2, #32
 80076e6:	601a      	str	r2, [r3, #0]
 80076e8:	e007      	b.n	80076fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f022 0220 	bic.w	r2, r2, #32
 80076f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	7edb      	ldrb	r3, [r3, #27]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d108      	bne.n	8007714 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f022 0210 	bic.w	r2, r2, #16
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	e007      	b.n	8007724 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f042 0210 	orr.w	r2, r2, #16
 8007722:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	7f1b      	ldrb	r3, [r3, #28]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d108      	bne.n	800773e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f042 0208 	orr.w	r2, r2, #8
 800773a:	601a      	str	r2, [r3, #0]
 800773c:	e007      	b.n	800774e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 0208 	bic.w	r2, r2, #8
 800774c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	7f5b      	ldrb	r3, [r3, #29]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d108      	bne.n	8007768 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f042 0204 	orr.w	r2, r2, #4
 8007764:	601a      	str	r2, [r3, #0]
 8007766:	e007      	b.n	8007778 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f022 0204 	bic.w	r2, r2, #4
 8007776:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	689a      	ldr	r2, [r3, #8]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	431a      	orrs	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	431a      	orrs	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	695b      	ldr	r3, [r3, #20]
 800778c:	ea42 0103 	orr.w	r1, r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	1e5a      	subs	r2, r3, #1
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	430a      	orrs	r2, r1
 800779c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
	...

080077b8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b087      	sub	sp, #28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077ce:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80077d0:	7cfb      	ldrb	r3, [r7, #19]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d003      	beq.n	80077de <HAL_CAN_ConfigFilter+0x26>
 80077d6:	7cfb      	ldrb	r3, [r7, #19]
 80077d8:	2b02      	cmp	r3, #2
 80077da:	f040 80be 	bne.w	800795a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80077de:	4b65      	ldr	r3, [pc, #404]	; (8007974 <HAL_CAN_ConfigFilter+0x1bc>)
 80077e0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80077e8:	f043 0201 	orr.w	r2, r3, #1
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80077f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780c:	021b      	lsls	r3, r3, #8
 800780e:	431a      	orrs	r2, r3
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	695b      	ldr	r3, [r3, #20]
 800781a:	f003 031f 	and.w	r3, r3, #31
 800781e:	2201      	movs	r2, #1
 8007820:	fa02 f303 	lsl.w	r3, r2, r3
 8007824:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	43db      	mvns	r3, r3
 8007830:	401a      	ands	r2, r3
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	69db      	ldr	r3, [r3, #28]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d123      	bne.n	8007888 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	43db      	mvns	r3, r3
 800784a:	401a      	ands	r2, r3
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007862:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	3248      	adds	r2, #72	; 0x48
 8007868:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800787c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800787e:	6979      	ldr	r1, [r7, #20]
 8007880:	3348      	adds	r3, #72	; 0x48
 8007882:	00db      	lsls	r3, r3, #3
 8007884:	440b      	add	r3, r1
 8007886:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	69db      	ldr	r3, [r3, #28]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d122      	bne.n	80078d6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	431a      	orrs	r2, r3
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80078ac:	683a      	ldr	r2, [r7, #0]
 80078ae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80078b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	3248      	adds	r2, #72	; 0x48
 80078b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80078ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80078cc:	6979      	ldr	r1, [r7, #20]
 80078ce:	3348      	adds	r3, #72	; 0x48
 80078d0:	00db      	lsls	r3, r3, #3
 80078d2:	440b      	add	r3, r1
 80078d4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d109      	bne.n	80078f2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	43db      	mvns	r3, r3
 80078e8:	401a      	ands	r2, r3
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80078f0:	e007      	b.n	8007902 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	431a      	orrs	r2, r3
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d109      	bne.n	800791e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	43db      	mvns	r3, r3
 8007914:	401a      	ands	r2, r3
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800791c:	e007      	b.n	800792e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	431a      	orrs	r2, r3
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d107      	bne.n	8007946 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	431a      	orrs	r2, r3
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800794c:	f023 0201 	bic.w	r2, r3, #1
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	e006      	b.n	8007968 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
  }
}
 8007968:	4618      	mov	r0, r3
 800796a:	371c      	adds	r7, #28
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr
 8007974:	40006400 	.word	0x40006400

08007978 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b01      	cmp	r3, #1
 800798a:	d12e      	bne.n	80079ea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f022 0201 	bic.w	r2, r2, #1
 80079a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80079a4:	f7ff f9ba 	bl	8006d1c <HAL_GetTick>
 80079a8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80079aa:	e012      	b.n	80079d2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80079ac:	f7ff f9b6 	bl	8006d1c <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	2b0a      	cmp	r3, #10
 80079b8:	d90b      	bls.n	80079d2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2205      	movs	r2, #5
 80079ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e012      	b.n	80079f8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1e5      	bne.n	80079ac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	e006      	b.n	80079f8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
  }
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b089      	sub	sp, #36	; 0x24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
 8007a0c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a14:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007a1e:	7ffb      	ldrb	r3, [r7, #31]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d003      	beq.n	8007a2c <HAL_CAN_AddTxMessage+0x2c>
 8007a24:	7ffb      	ldrb	r3, [r7, #31]
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	f040 80b8 	bne.w	8007b9c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10a      	bne.n	8007a4c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d105      	bne.n	8007a4c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f000 80a0 	beq.w	8007b8c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	0e1b      	lsrs	r3, r3, #24
 8007a50:	f003 0303 	and.w	r3, r3, #3
 8007a54:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d907      	bls.n	8007a6c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a60:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e09e      	b.n	8007baa <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	409a      	lsls	r2, r3
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d10d      	bne.n	8007a9a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007a88:	68f9      	ldr	r1, [r7, #12]
 8007a8a:	6809      	ldr	r1, [r1, #0]
 8007a8c:	431a      	orrs	r2, r3
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	3318      	adds	r3, #24
 8007a92:	011b      	lsls	r3, r3, #4
 8007a94:	440b      	add	r3, r1
 8007a96:	601a      	str	r2, [r3, #0]
 8007a98:	e00f      	b.n	8007aba <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007aa4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007aaa:	68f9      	ldr	r1, [r7, #12]
 8007aac:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007aae:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	3318      	adds	r3, #24
 8007ab4:	011b      	lsls	r3, r3, #4
 8007ab6:	440b      	add	r3, r1
 8007ab8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6819      	ldr	r1, [r3, #0]
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	691a      	ldr	r2, [r3, #16]
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	3318      	adds	r3, #24
 8007ac6:	011b      	lsls	r3, r3, #4
 8007ac8:	440b      	add	r3, r1
 8007aca:	3304      	adds	r3, #4
 8007acc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	7d1b      	ldrb	r3, [r3, #20]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d111      	bne.n	8007afa <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	3318      	adds	r3, #24
 8007ade:	011b      	lsls	r3, r3, #4
 8007ae0:	4413      	add	r3, r2
 8007ae2:	3304      	adds	r3, #4
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	6811      	ldr	r1, [r2, #0]
 8007aea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	3318      	adds	r3, #24
 8007af2:	011b      	lsls	r3, r3, #4
 8007af4:	440b      	add	r3, r1
 8007af6:	3304      	adds	r3, #4
 8007af8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	3307      	adds	r3, #7
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	061a      	lsls	r2, r3, #24
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	3306      	adds	r3, #6
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	041b      	lsls	r3, r3, #16
 8007b0a:	431a      	orrs	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	3305      	adds	r3, #5
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	021b      	lsls	r3, r3, #8
 8007b14:	4313      	orrs	r3, r2
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	3204      	adds	r2, #4
 8007b1a:	7812      	ldrb	r2, [r2, #0]
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	6811      	ldr	r1, [r2, #0]
 8007b22:	ea43 0200 	orr.w	r2, r3, r0
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	011b      	lsls	r3, r3, #4
 8007b2a:	440b      	add	r3, r1
 8007b2c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007b30:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	3303      	adds	r3, #3
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	061a      	lsls	r2, r3, #24
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	3302      	adds	r3, #2
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	041b      	lsls	r3, r3, #16
 8007b42:	431a      	orrs	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	3301      	adds	r3, #1
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	021b      	lsls	r3, r3, #8
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	7812      	ldrb	r2, [r2, #0]
 8007b52:	4610      	mov	r0, r2
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	6811      	ldr	r1, [r2, #0]
 8007b58:	ea43 0200 	orr.w	r2, r3, r0
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	011b      	lsls	r3, r3, #4
 8007b60:	440b      	add	r3, r1
 8007b62:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007b66:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	3318      	adds	r3, #24
 8007b70:	011b      	lsls	r3, r3, #4
 8007b72:	4413      	add	r3, r2
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	6811      	ldr	r1, [r2, #0]
 8007b7a:	f043 0201 	orr.w	r2, r3, #1
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	3318      	adds	r3, #24
 8007b82:	011b      	lsls	r3, r3, #4
 8007b84:	440b      	add	r3, r1
 8007b86:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	e00e      	b.n	8007baa <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e006      	b.n	8007baa <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
  }
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3724      	adds	r7, #36	; 0x24
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b087      	sub	sp, #28
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	60f8      	str	r0, [r7, #12]
 8007bbe:	60b9      	str	r1, [r7, #8]
 8007bc0:	607a      	str	r2, [r7, #4]
 8007bc2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bca:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007bcc:	7dfb      	ldrb	r3, [r7, #23]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d003      	beq.n	8007bda <HAL_CAN_GetRxMessage+0x24>
 8007bd2:	7dfb      	ldrb	r3, [r7, #23]
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	f040 80f3 	bne.w	8007dc0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10e      	bne.n	8007bfe <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	f003 0303 	and.w	r3, r3, #3
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d116      	bne.n	8007c1c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e0e7      	b.n	8007dce <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	f003 0303 	and.w	r3, r3, #3
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d107      	bne.n	8007c1c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c10:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e0d8      	b.n	8007dce <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	331b      	adds	r3, #27
 8007c24:	011b      	lsls	r3, r3, #4
 8007c26:	4413      	add	r3, r2
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 0204 	and.w	r2, r3, #4
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10c      	bne.n	8007c54 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	331b      	adds	r3, #27
 8007c42:	011b      	lsls	r3, r3, #4
 8007c44:	4413      	add	r3, r2
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	0d5b      	lsrs	r3, r3, #21
 8007c4a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	601a      	str	r2, [r3, #0]
 8007c52:	e00b      	b.n	8007c6c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	331b      	adds	r3, #27
 8007c5c:	011b      	lsls	r3, r3, #4
 8007c5e:	4413      	add	r3, r2
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	08db      	lsrs	r3, r3, #3
 8007c64:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	331b      	adds	r3, #27
 8007c74:	011b      	lsls	r3, r3, #4
 8007c76:	4413      	add	r3, r2
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0202 	and.w	r2, r3, #2
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	331b      	adds	r3, #27
 8007c8a:	011b      	lsls	r3, r3, #4
 8007c8c:	4413      	add	r3, r2
 8007c8e:	3304      	adds	r3, #4
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 020f 	and.w	r2, r3, #15
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	331b      	adds	r3, #27
 8007ca2:	011b      	lsls	r3, r3, #4
 8007ca4:	4413      	add	r3, r2
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	0a1b      	lsrs	r3, r3, #8
 8007cac:	b2da      	uxtb	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	331b      	adds	r3, #27
 8007cba:	011b      	lsls	r3, r3, #4
 8007cbc:	4413      	add	r3, r2
 8007cbe:	3304      	adds	r3, #4
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	0c1b      	lsrs	r3, r3, #16
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	011b      	lsls	r3, r3, #4
 8007cd2:	4413      	add	r3, r2
 8007cd4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	b2da      	uxtb	r2, r3
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	011b      	lsls	r3, r3, #4
 8007ce8:	4413      	add	r3, r2
 8007cea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	0a1a      	lsrs	r2, r3, #8
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	b2d2      	uxtb	r2, r2
 8007cf8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	011b      	lsls	r3, r3, #4
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	0c1a      	lsrs	r2, r3, #16
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	3302      	adds	r3, #2
 8007d10:	b2d2      	uxtb	r2, r2
 8007d12:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	011b      	lsls	r3, r3, #4
 8007d1c:	4413      	add	r3, r2
 8007d1e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	0e1a      	lsrs	r2, r3, #24
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	3303      	adds	r3, #3
 8007d2a:	b2d2      	uxtb	r2, r2
 8007d2c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	011b      	lsls	r3, r3, #4
 8007d36:	4413      	add	r3, r2
 8007d38:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	3304      	adds	r3, #4
 8007d42:	b2d2      	uxtb	r2, r2
 8007d44:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	011b      	lsls	r3, r3, #4
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	0a1a      	lsrs	r2, r3, #8
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	3305      	adds	r3, #5
 8007d5c:	b2d2      	uxtb	r2, r2
 8007d5e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	011b      	lsls	r3, r3, #4
 8007d68:	4413      	add	r3, r2
 8007d6a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	0c1a      	lsrs	r2, r3, #16
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	3306      	adds	r3, #6
 8007d76:	b2d2      	uxtb	r2, r2
 8007d78:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	011b      	lsls	r3, r3, #4
 8007d82:	4413      	add	r3, r2
 8007d84:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	0e1a      	lsrs	r2, r3, #24
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	3307      	adds	r3, #7
 8007d90:	b2d2      	uxtb	r2, r2
 8007d92:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d108      	bne.n	8007dac <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68da      	ldr	r2, [r3, #12]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f042 0220 	orr.w	r2, r2, #32
 8007da8:	60da      	str	r2, [r3, #12]
 8007daa:	e007      	b.n	8007dbc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	691a      	ldr	r2, [r3, #16]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f042 0220 	orr.w	r2, r2, #32
 8007dba:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	e006      	b.n	8007dce <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
  }
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	371c      	adds	r7, #28
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b08a      	sub	sp, #40	; 0x28
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007de2:	2300      	movs	r3, #0
 8007de4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	695b      	ldr	r3, [r3, #20]
 8007dec:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007e16:	6a3b      	ldr	r3, [r7, #32]
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d07c      	beq.n	8007f1a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	f003 0301 	and.w	r3, r3, #1
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d023      	beq.n	8007e72 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	f003 0302 	and.w	r3, r3, #2
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d003      	beq.n	8007e44 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f983 	bl	8008148 <HAL_CAN_TxMailbox0CompleteCallback>
 8007e42:	e016      	b.n	8007e72 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	f003 0304 	and.w	r3, r3, #4
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d004      	beq.n	8007e58 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007e54:	627b      	str	r3, [r7, #36]	; 0x24
 8007e56:	e00c      	b.n	8007e72 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	f003 0308 	and.w	r3, r3, #8
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d004      	beq.n	8007e6c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007e68:	627b      	str	r3, [r7, #36]	; 0x24
 8007e6a:	e002      	b.n	8007e72 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f989 	bl	8008184 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d024      	beq.n	8007ec6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e84:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d003      	beq.n	8007e98 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f963 	bl	800815c <HAL_CAN_TxMailbox1CompleteCallback>
 8007e96:	e016      	b.n	8007ec6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d004      	beq.n	8007eac <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8007eaa:	e00c      	b.n	8007ec6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d004      	beq.n	8007ec0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8007ebe:	e002      	b.n	8007ec6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 f969 	bl	8008198 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d024      	beq.n	8007f1a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007ed8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d003      	beq.n	8007eec <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f943 	bl	8008170 <HAL_CAN_TxMailbox2CompleteCallback>
 8007eea:	e016      	b.n	8007f1a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d004      	beq.n	8007f00 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007efc:	627b      	str	r3, [r7, #36]	; 0x24
 8007efe:	e00c      	b.n	8007f1a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d004      	beq.n	8007f14 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f10:	627b      	str	r3, [r7, #36]	; 0x24
 8007f12:	e002      	b.n	8007f1a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f949 	bl	80081ac <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007f1a:	6a3b      	ldr	r3, [r7, #32]
 8007f1c:	f003 0308 	and.w	r3, r3, #8
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00c      	beq.n	8007f3e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	f003 0310 	and.w	r3, r3, #16
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d007      	beq.n	8007f3e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f34:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2210      	movs	r2, #16
 8007f3c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	f003 0304 	and.w	r3, r3, #4
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00b      	beq.n	8007f60 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f003 0308 	and.w	r3, r3, #8
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d006      	beq.n	8007f60 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2208      	movs	r2, #8
 8007f58:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f93a 	bl	80081d4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007f60:	6a3b      	ldr	r3, [r7, #32]
 8007f62:	f003 0302 	and.w	r3, r3, #2
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d009      	beq.n	8007f7e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	f003 0303 	and.w	r3, r3, #3
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d002      	beq.n	8007f7e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f921 	bl	80081c0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007f7e:	6a3b      	ldr	r3, [r7, #32]
 8007f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00c      	beq.n	8007fa2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	f003 0310 	and.w	r3, r3, #16
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d007      	beq.n	8007fa2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007f98:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2210      	movs	r2, #16
 8007fa0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007fa2:	6a3b      	ldr	r3, [r7, #32]
 8007fa4:	f003 0320 	and.w	r3, r3, #32
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00b      	beq.n	8007fc4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	f003 0308 	and.w	r3, r3, #8
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d006      	beq.n	8007fc4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2208      	movs	r2, #8
 8007fbc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f91c 	bl	80081fc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007fc4:	6a3b      	ldr	r3, [r7, #32]
 8007fc6:	f003 0310 	and.w	r3, r3, #16
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d009      	beq.n	8007fe2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	f003 0303 	and.w	r3, r3, #3
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d002      	beq.n	8007fe2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f903 	bl	80081e8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007fe2:	6a3b      	ldr	r3, [r7, #32]
 8007fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00b      	beq.n	8008004 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	f003 0310 	and.w	r3, r3, #16
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d006      	beq.n	8008004 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2210      	movs	r2, #16
 8007ffc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f906 	bl	8008210 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8008004:	6a3b      	ldr	r3, [r7, #32]
 8008006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00b      	beq.n	8008026 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	f003 0308 	and.w	r3, r3, #8
 8008014:	2b00      	cmp	r3, #0
 8008016:	d006      	beq.n	8008026 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2208      	movs	r2, #8
 800801e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 f8ff 	bl	8008224 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800802c:	2b00      	cmp	r3, #0
 800802e:	d07b      	beq.n	8008128 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	f003 0304 	and.w	r3, r3, #4
 8008036:	2b00      	cmp	r3, #0
 8008038:	d072      	beq.n	8008120 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008040:	2b00      	cmp	r3, #0
 8008042:	d008      	beq.n	8008056 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800804a:	2b00      	cmp	r3, #0
 800804c:	d003      	beq.n	8008056 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800804e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008050:	f043 0301 	orr.w	r3, r3, #1
 8008054:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800805c:	2b00      	cmp	r3, #0
 800805e:	d008      	beq.n	8008072 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008066:	2b00      	cmp	r3, #0
 8008068:	d003      	beq.n	8008072 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806c:	f043 0302 	orr.w	r3, r3, #2
 8008070:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8008072:	6a3b      	ldr	r3, [r7, #32]
 8008074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008078:	2b00      	cmp	r3, #0
 800807a:	d008      	beq.n	800808e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8008082:	2b00      	cmp	r3, #0
 8008084:	d003      	beq.n	800808e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8008086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008088:	f043 0304 	orr.w	r3, r3, #4
 800808c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800808e:	6a3b      	ldr	r3, [r7, #32]
 8008090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008094:	2b00      	cmp	r3, #0
 8008096:	d043      	beq.n	8008120 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d03e      	beq.n	8008120 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080a8:	2b60      	cmp	r3, #96	; 0x60
 80080aa:	d02b      	beq.n	8008104 <HAL_CAN_IRQHandler+0x32a>
 80080ac:	2b60      	cmp	r3, #96	; 0x60
 80080ae:	d82e      	bhi.n	800810e <HAL_CAN_IRQHandler+0x334>
 80080b0:	2b50      	cmp	r3, #80	; 0x50
 80080b2:	d022      	beq.n	80080fa <HAL_CAN_IRQHandler+0x320>
 80080b4:	2b50      	cmp	r3, #80	; 0x50
 80080b6:	d82a      	bhi.n	800810e <HAL_CAN_IRQHandler+0x334>
 80080b8:	2b40      	cmp	r3, #64	; 0x40
 80080ba:	d019      	beq.n	80080f0 <HAL_CAN_IRQHandler+0x316>
 80080bc:	2b40      	cmp	r3, #64	; 0x40
 80080be:	d826      	bhi.n	800810e <HAL_CAN_IRQHandler+0x334>
 80080c0:	2b30      	cmp	r3, #48	; 0x30
 80080c2:	d010      	beq.n	80080e6 <HAL_CAN_IRQHandler+0x30c>
 80080c4:	2b30      	cmp	r3, #48	; 0x30
 80080c6:	d822      	bhi.n	800810e <HAL_CAN_IRQHandler+0x334>
 80080c8:	2b10      	cmp	r3, #16
 80080ca:	d002      	beq.n	80080d2 <HAL_CAN_IRQHandler+0x2f8>
 80080cc:	2b20      	cmp	r3, #32
 80080ce:	d005      	beq.n	80080dc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80080d0:	e01d      	b.n	800810e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80080d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d4:	f043 0308 	orr.w	r3, r3, #8
 80080d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80080da:	e019      	b.n	8008110 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80080dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080de:	f043 0310 	orr.w	r3, r3, #16
 80080e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80080e4:	e014      	b.n	8008110 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80080e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e8:	f043 0320 	orr.w	r3, r3, #32
 80080ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80080ee:	e00f      	b.n	8008110 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80080f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80080f8:	e00a      	b.n	8008110 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80080fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008100:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008102:	e005      	b.n	8008110 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8008104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800810a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800810c:	e000      	b.n	8008110 <HAL_CAN_IRQHandler+0x336>
            break;
 800810e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	699a      	ldr	r2, [r3, #24]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800811e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2204      	movs	r2, #4
 8008126:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8008128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812a:	2b00      	cmp	r3, #0
 800812c:	d008      	beq.n	8008140 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008134:	431a      	orrs	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f87c 	bl	8008238 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8008140:	bf00      	nop
 8008142:	3728      	adds	r7, #40	; 0x28
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8008164:	bf00      	nop
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8008178:	bf00      	nop
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800818c:	bf00      	nop
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80081b4:	bf00      	nop
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80081c8:	bf00      	nop
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80081dc:	bf00      	nop
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8008218:	bf00      	nop
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f003 0307 	and.w	r3, r3, #7
 800825a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800825c:	4b0c      	ldr	r3, [pc, #48]	; (8008290 <__NVIC_SetPriorityGrouping+0x44>)
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008268:	4013      	ands	r3, r2
 800826a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800827c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800827e:	4a04      	ldr	r2, [pc, #16]	; (8008290 <__NVIC_SetPriorityGrouping+0x44>)
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	60d3      	str	r3, [r2, #12]
}
 8008284:	bf00      	nop
 8008286:	3714      	adds	r7, #20
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	e000ed00 	.word	0xe000ed00

08008294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008294:	b480      	push	{r7}
 8008296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008298:	4b04      	ldr	r3, [pc, #16]	; (80082ac <__NVIC_GetPriorityGrouping+0x18>)
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	0a1b      	lsrs	r3, r3, #8
 800829e:	f003 0307 	and.w	r3, r3, #7
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	e000ed00 	.word	0xe000ed00

080082b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	4603      	mov	r3, r0
 80082b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	db0b      	blt.n	80082da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80082c2:	79fb      	ldrb	r3, [r7, #7]
 80082c4:	f003 021f 	and.w	r2, r3, #31
 80082c8:	4907      	ldr	r1, [pc, #28]	; (80082e8 <__NVIC_EnableIRQ+0x38>)
 80082ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082ce:	095b      	lsrs	r3, r3, #5
 80082d0:	2001      	movs	r0, #1
 80082d2:	fa00 f202 	lsl.w	r2, r0, r2
 80082d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80082da:	bf00      	nop
 80082dc:	370c      	adds	r7, #12
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	e000e100 	.word	0xe000e100

080082ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	4603      	mov	r3, r0
 80082f4:	6039      	str	r1, [r7, #0]
 80082f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	db0a      	blt.n	8008316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	b2da      	uxtb	r2, r3
 8008304:	490c      	ldr	r1, [pc, #48]	; (8008338 <__NVIC_SetPriority+0x4c>)
 8008306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800830a:	0112      	lsls	r2, r2, #4
 800830c:	b2d2      	uxtb	r2, r2
 800830e:	440b      	add	r3, r1
 8008310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008314:	e00a      	b.n	800832c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	b2da      	uxtb	r2, r3
 800831a:	4908      	ldr	r1, [pc, #32]	; (800833c <__NVIC_SetPriority+0x50>)
 800831c:	79fb      	ldrb	r3, [r7, #7]
 800831e:	f003 030f 	and.w	r3, r3, #15
 8008322:	3b04      	subs	r3, #4
 8008324:	0112      	lsls	r2, r2, #4
 8008326:	b2d2      	uxtb	r2, r2
 8008328:	440b      	add	r3, r1
 800832a:	761a      	strb	r2, [r3, #24]
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr
 8008338:	e000e100 	.word	0xe000e100
 800833c:	e000ed00 	.word	0xe000ed00

08008340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008340:	b480      	push	{r7}
 8008342:	b089      	sub	sp, #36	; 0x24
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f003 0307 	and.w	r3, r3, #7
 8008352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	f1c3 0307 	rsb	r3, r3, #7
 800835a:	2b04      	cmp	r3, #4
 800835c:	bf28      	it	cs
 800835e:	2304      	movcs	r3, #4
 8008360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	3304      	adds	r3, #4
 8008366:	2b06      	cmp	r3, #6
 8008368:	d902      	bls.n	8008370 <NVIC_EncodePriority+0x30>
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	3b03      	subs	r3, #3
 800836e:	e000      	b.n	8008372 <NVIC_EncodePriority+0x32>
 8008370:	2300      	movs	r3, #0
 8008372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008374:	f04f 32ff 	mov.w	r2, #4294967295
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	fa02 f303 	lsl.w	r3, r2, r3
 800837e:	43da      	mvns	r2, r3
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	401a      	ands	r2, r3
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008388:	f04f 31ff 	mov.w	r1, #4294967295
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	fa01 f303 	lsl.w	r3, r1, r3
 8008392:	43d9      	mvns	r1, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008398:	4313      	orrs	r3, r2
         );
}
 800839a:	4618      	mov	r0, r3
 800839c:	3724      	adds	r7, #36	; 0x24
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
	...

080083a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	3b01      	subs	r3, #1
 80083b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80083b8:	d301      	bcc.n	80083be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80083ba:	2301      	movs	r3, #1
 80083bc:	e00f      	b.n	80083de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80083be:	4a0a      	ldr	r2, [pc, #40]	; (80083e8 <SysTick_Config+0x40>)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	3b01      	subs	r3, #1
 80083c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80083c6:	210f      	movs	r1, #15
 80083c8:	f04f 30ff 	mov.w	r0, #4294967295
 80083cc:	f7ff ff8e 	bl	80082ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80083d0:	4b05      	ldr	r3, [pc, #20]	; (80083e8 <SysTick_Config+0x40>)
 80083d2:	2200      	movs	r2, #0
 80083d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80083d6:	4b04      	ldr	r3, [pc, #16]	; (80083e8 <SysTick_Config+0x40>)
 80083d8:	2207      	movs	r2, #7
 80083da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	e000e010 	.word	0xe000e010

080083ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f7ff ff29 	bl	800824c <__NVIC_SetPriorityGrouping>
}
 80083fa:	bf00      	nop
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008402:	b580      	push	{r7, lr}
 8008404:	b086      	sub	sp, #24
 8008406:	af00      	add	r7, sp, #0
 8008408:	4603      	mov	r3, r0
 800840a:	60b9      	str	r1, [r7, #8]
 800840c:	607a      	str	r2, [r7, #4]
 800840e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008410:	2300      	movs	r3, #0
 8008412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008414:	f7ff ff3e 	bl	8008294 <__NVIC_GetPriorityGrouping>
 8008418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	68b9      	ldr	r1, [r7, #8]
 800841e:	6978      	ldr	r0, [r7, #20]
 8008420:	f7ff ff8e 	bl	8008340 <NVIC_EncodePriority>
 8008424:	4602      	mov	r2, r0
 8008426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800842a:	4611      	mov	r1, r2
 800842c:	4618      	mov	r0, r3
 800842e:	f7ff ff5d 	bl	80082ec <__NVIC_SetPriority>
}
 8008432:	bf00      	nop
 8008434:	3718      	adds	r7, #24
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b082      	sub	sp, #8
 800843e:	af00      	add	r7, sp, #0
 8008440:	4603      	mov	r3, r0
 8008442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008448:	4618      	mov	r0, r3
 800844a:	f7ff ff31 	bl	80082b0 <__NVIC_EnableIRQ>
}
 800844e:	bf00      	nop
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b082      	sub	sp, #8
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f7ff ffa2 	bl	80083a8 <SysTick_Config>
 8008464:	4603      	mov	r3, r0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3708      	adds	r7, #8
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b084      	sub	sp, #16
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800847a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800847c:	f7fe fc4e 	bl	8006d1c <HAL_GetTick>
 8008480:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b02      	cmp	r3, #2
 800848c:	d008      	beq.n	80084a0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2280      	movs	r2, #128	; 0x80
 8008492:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e052      	b.n	8008546 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f022 0216 	bic.w	r2, r2, #22
 80084ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	695a      	ldr	r2, [r3, #20]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084be:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d103      	bne.n	80084d0 <HAL_DMA_Abort+0x62>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d007      	beq.n	80084e0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f022 0208 	bic.w	r2, r2, #8
 80084de:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f022 0201 	bic.w	r2, r2, #1
 80084ee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80084f0:	e013      	b.n	800851a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80084f2:	f7fe fc13 	bl	8006d1c <HAL_GetTick>
 80084f6:	4602      	mov	r2, r0
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	1ad3      	subs	r3, r2, r3
 80084fc:	2b05      	cmp	r3, #5
 80084fe:	d90c      	bls.n	800851a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2220      	movs	r2, #32
 8008504:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2203      	movs	r2, #3
 8008512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	e015      	b.n	8008546 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0301 	and.w	r3, r3, #1
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1e4      	bne.n	80084f2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800852c:	223f      	movs	r2, #63	; 0x3f
 800852e:	409a      	lsls	r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800854e:	b480      	push	{r7}
 8008550:	b083      	sub	sp, #12
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b02      	cmp	r3, #2
 8008560:	d004      	beq.n	800856c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2280      	movs	r2, #128	; 0x80
 8008566:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	e00c      	b.n	8008586 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2205      	movs	r2, #5
 8008570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f022 0201 	bic.w	r2, r2, #1
 8008582:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	370c      	adds	r7, #12
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
	...

08008594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008594:	b480      	push	{r7}
 8008596:	b089      	sub	sp, #36	; 0x24
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800859e:	2300      	movs	r3, #0
 80085a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80085a2:	2300      	movs	r3, #0
 80085a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80085a6:	2300      	movs	r3, #0
 80085a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80085aa:	2300      	movs	r3, #0
 80085ac:	61fb      	str	r3, [r7, #28]
 80085ae:	e165      	b.n	800887c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80085b0:	2201      	movs	r2, #1
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	fa02 f303 	lsl.w	r3, r2, r3
 80085b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	4013      	ands	r3, r2
 80085c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80085c4:	693a      	ldr	r2, [r7, #16]
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	f040 8154 	bne.w	8008876 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	f003 0303 	and.w	r3, r3, #3
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d005      	beq.n	80085e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d130      	bne.n	8008648 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	005b      	lsls	r3, r3, #1
 80085f0:	2203      	movs	r2, #3
 80085f2:	fa02 f303 	lsl.w	r3, r2, r3
 80085f6:	43db      	mvns	r3, r3
 80085f8:	69ba      	ldr	r2, [r7, #24]
 80085fa:	4013      	ands	r3, r2
 80085fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	68da      	ldr	r2, [r3, #12]
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	005b      	lsls	r3, r3, #1
 8008606:	fa02 f303 	lsl.w	r3, r2, r3
 800860a:	69ba      	ldr	r2, [r7, #24]
 800860c:	4313      	orrs	r3, r2
 800860e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	69ba      	ldr	r2, [r7, #24]
 8008614:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800861c:	2201      	movs	r2, #1
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	fa02 f303 	lsl.w	r3, r2, r3
 8008624:	43db      	mvns	r3, r3
 8008626:	69ba      	ldr	r2, [r7, #24]
 8008628:	4013      	ands	r3, r2
 800862a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	091b      	lsrs	r3, r3, #4
 8008632:	f003 0201 	and.w	r2, r3, #1
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	fa02 f303 	lsl.w	r3, r2, r3
 800863c:	69ba      	ldr	r2, [r7, #24]
 800863e:	4313      	orrs	r3, r2
 8008640:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	69ba      	ldr	r2, [r7, #24]
 8008646:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	f003 0303 	and.w	r3, r3, #3
 8008650:	2b03      	cmp	r3, #3
 8008652:	d017      	beq.n	8008684 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	005b      	lsls	r3, r3, #1
 800865e:	2203      	movs	r2, #3
 8008660:	fa02 f303 	lsl.w	r3, r2, r3
 8008664:	43db      	mvns	r3, r3
 8008666:	69ba      	ldr	r2, [r7, #24]
 8008668:	4013      	ands	r3, r2
 800866a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	689a      	ldr	r2, [r3, #8]
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	005b      	lsls	r3, r3, #1
 8008674:	fa02 f303 	lsl.w	r3, r2, r3
 8008678:	69ba      	ldr	r2, [r7, #24]
 800867a:	4313      	orrs	r3, r2
 800867c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	69ba      	ldr	r2, [r7, #24]
 8008682:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	f003 0303 	and.w	r3, r3, #3
 800868c:	2b02      	cmp	r3, #2
 800868e:	d123      	bne.n	80086d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	08da      	lsrs	r2, r3, #3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	3208      	adds	r2, #8
 8008698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800869c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	f003 0307 	and.w	r3, r3, #7
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	220f      	movs	r2, #15
 80086a8:	fa02 f303 	lsl.w	r3, r2, r3
 80086ac:	43db      	mvns	r3, r3
 80086ae:	69ba      	ldr	r2, [r7, #24]
 80086b0:	4013      	ands	r3, r2
 80086b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	691a      	ldr	r2, [r3, #16]
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	f003 0307 	and.w	r3, r3, #7
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	fa02 f303 	lsl.w	r3, r2, r3
 80086c4:	69ba      	ldr	r2, [r7, #24]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	08da      	lsrs	r2, r3, #3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	3208      	adds	r2, #8
 80086d2:	69b9      	ldr	r1, [r7, #24]
 80086d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	005b      	lsls	r3, r3, #1
 80086e2:	2203      	movs	r2, #3
 80086e4:	fa02 f303 	lsl.w	r3, r2, r3
 80086e8:	43db      	mvns	r3, r3
 80086ea:	69ba      	ldr	r2, [r7, #24]
 80086ec:	4013      	ands	r3, r2
 80086ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	f003 0203 	and.w	r2, r3, #3
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	005b      	lsls	r3, r3, #1
 80086fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008700:	69ba      	ldr	r2, [r7, #24]
 8008702:	4313      	orrs	r3, r2
 8008704:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	69ba      	ldr	r2, [r7, #24]
 800870a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008714:	2b00      	cmp	r3, #0
 8008716:	f000 80ae 	beq.w	8008876 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800871a:	2300      	movs	r3, #0
 800871c:	60fb      	str	r3, [r7, #12]
 800871e:	4b5d      	ldr	r3, [pc, #372]	; (8008894 <HAL_GPIO_Init+0x300>)
 8008720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008722:	4a5c      	ldr	r2, [pc, #368]	; (8008894 <HAL_GPIO_Init+0x300>)
 8008724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008728:	6453      	str	r3, [r2, #68]	; 0x44
 800872a:	4b5a      	ldr	r3, [pc, #360]	; (8008894 <HAL_GPIO_Init+0x300>)
 800872c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800872e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008732:	60fb      	str	r3, [r7, #12]
 8008734:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008736:	4a58      	ldr	r2, [pc, #352]	; (8008898 <HAL_GPIO_Init+0x304>)
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	089b      	lsrs	r3, r3, #2
 800873c:	3302      	adds	r3, #2
 800873e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	f003 0303 	and.w	r3, r3, #3
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	220f      	movs	r2, #15
 800874e:	fa02 f303 	lsl.w	r3, r2, r3
 8008752:	43db      	mvns	r3, r3
 8008754:	69ba      	ldr	r2, [r7, #24]
 8008756:	4013      	ands	r3, r2
 8008758:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a4f      	ldr	r2, [pc, #316]	; (800889c <HAL_GPIO_Init+0x308>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d025      	beq.n	80087ae <HAL_GPIO_Init+0x21a>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a4e      	ldr	r2, [pc, #312]	; (80088a0 <HAL_GPIO_Init+0x30c>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d01f      	beq.n	80087aa <HAL_GPIO_Init+0x216>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a4d      	ldr	r2, [pc, #308]	; (80088a4 <HAL_GPIO_Init+0x310>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d019      	beq.n	80087a6 <HAL_GPIO_Init+0x212>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a4c      	ldr	r2, [pc, #304]	; (80088a8 <HAL_GPIO_Init+0x314>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d013      	beq.n	80087a2 <HAL_GPIO_Init+0x20e>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a4b      	ldr	r2, [pc, #300]	; (80088ac <HAL_GPIO_Init+0x318>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d00d      	beq.n	800879e <HAL_GPIO_Init+0x20a>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a4a      	ldr	r2, [pc, #296]	; (80088b0 <HAL_GPIO_Init+0x31c>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d007      	beq.n	800879a <HAL_GPIO_Init+0x206>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a49      	ldr	r2, [pc, #292]	; (80088b4 <HAL_GPIO_Init+0x320>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d101      	bne.n	8008796 <HAL_GPIO_Init+0x202>
 8008792:	2306      	movs	r3, #6
 8008794:	e00c      	b.n	80087b0 <HAL_GPIO_Init+0x21c>
 8008796:	2307      	movs	r3, #7
 8008798:	e00a      	b.n	80087b0 <HAL_GPIO_Init+0x21c>
 800879a:	2305      	movs	r3, #5
 800879c:	e008      	b.n	80087b0 <HAL_GPIO_Init+0x21c>
 800879e:	2304      	movs	r3, #4
 80087a0:	e006      	b.n	80087b0 <HAL_GPIO_Init+0x21c>
 80087a2:	2303      	movs	r3, #3
 80087a4:	e004      	b.n	80087b0 <HAL_GPIO_Init+0x21c>
 80087a6:	2302      	movs	r3, #2
 80087a8:	e002      	b.n	80087b0 <HAL_GPIO_Init+0x21c>
 80087aa:	2301      	movs	r3, #1
 80087ac:	e000      	b.n	80087b0 <HAL_GPIO_Init+0x21c>
 80087ae:	2300      	movs	r3, #0
 80087b0:	69fa      	ldr	r2, [r7, #28]
 80087b2:	f002 0203 	and.w	r2, r2, #3
 80087b6:	0092      	lsls	r2, r2, #2
 80087b8:	4093      	lsls	r3, r2
 80087ba:	69ba      	ldr	r2, [r7, #24]
 80087bc:	4313      	orrs	r3, r2
 80087be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80087c0:	4935      	ldr	r1, [pc, #212]	; (8008898 <HAL_GPIO_Init+0x304>)
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	089b      	lsrs	r3, r3, #2
 80087c6:	3302      	adds	r3, #2
 80087c8:	69ba      	ldr	r2, [r7, #24]
 80087ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80087ce:	4b3a      	ldr	r3, [pc, #232]	; (80088b8 <HAL_GPIO_Init+0x324>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	43db      	mvns	r3, r3
 80087d8:	69ba      	ldr	r2, [r7, #24]
 80087da:	4013      	ands	r3, r2
 80087dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d003      	beq.n	80087f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80087ea:	69ba      	ldr	r2, [r7, #24]
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80087f2:	4a31      	ldr	r2, [pc, #196]	; (80088b8 <HAL_GPIO_Init+0x324>)
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80087f8:	4b2f      	ldr	r3, [pc, #188]	; (80088b8 <HAL_GPIO_Init+0x324>)
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	43db      	mvns	r3, r3
 8008802:	69ba      	ldr	r2, [r7, #24]
 8008804:	4013      	ands	r3, r2
 8008806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008810:	2b00      	cmp	r3, #0
 8008812:	d003      	beq.n	800881c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008814:	69ba      	ldr	r2, [r7, #24]
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	4313      	orrs	r3, r2
 800881a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800881c:	4a26      	ldr	r2, [pc, #152]	; (80088b8 <HAL_GPIO_Init+0x324>)
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008822:	4b25      	ldr	r3, [pc, #148]	; (80088b8 <HAL_GPIO_Init+0x324>)
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	43db      	mvns	r3, r3
 800882c:	69ba      	ldr	r2, [r7, #24]
 800882e:	4013      	ands	r3, r2
 8008830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800883a:	2b00      	cmp	r3, #0
 800883c:	d003      	beq.n	8008846 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800883e:	69ba      	ldr	r2, [r7, #24]
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	4313      	orrs	r3, r2
 8008844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008846:	4a1c      	ldr	r2, [pc, #112]	; (80088b8 <HAL_GPIO_Init+0x324>)
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800884c:	4b1a      	ldr	r3, [pc, #104]	; (80088b8 <HAL_GPIO_Init+0x324>)
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	43db      	mvns	r3, r3
 8008856:	69ba      	ldr	r2, [r7, #24]
 8008858:	4013      	ands	r3, r2
 800885a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d003      	beq.n	8008870 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008868:	69ba      	ldr	r2, [r7, #24]
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	4313      	orrs	r3, r2
 800886e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008870:	4a11      	ldr	r2, [pc, #68]	; (80088b8 <HAL_GPIO_Init+0x324>)
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	3301      	adds	r3, #1
 800887a:	61fb      	str	r3, [r7, #28]
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	2b0f      	cmp	r3, #15
 8008880:	f67f ae96 	bls.w	80085b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008884:	bf00      	nop
 8008886:	bf00      	nop
 8008888:	3724      	adds	r7, #36	; 0x24
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	40023800 	.word	0x40023800
 8008898:	40013800 	.word	0x40013800
 800889c:	40020000 	.word	0x40020000
 80088a0:	40020400 	.word	0x40020400
 80088a4:	40020800 	.word	0x40020800
 80088a8:	40020c00 	.word	0x40020c00
 80088ac:	40021000 	.word	0x40021000
 80088b0:	40021400 	.word	0x40021400
 80088b4:	40021800 	.word	0x40021800
 80088b8:	40013c00 	.word	0x40013c00

080088bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80088bc:	b480      	push	{r7}
 80088be:	b085      	sub	sp, #20
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	460b      	mov	r3, r1
 80088c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	691a      	ldr	r2, [r3, #16]
 80088cc:	887b      	ldrh	r3, [r7, #2]
 80088ce:	4013      	ands	r3, r2
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d002      	beq.n	80088da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80088d4:	2301      	movs	r3, #1
 80088d6:	73fb      	strb	r3, [r7, #15]
 80088d8:	e001      	b.n	80088de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80088da:	2300      	movs	r3, #0
 80088dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80088de:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3714      	adds	r7, #20
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	460b      	mov	r3, r1
 80088f6:	807b      	strh	r3, [r7, #2]
 80088f8:	4613      	mov	r3, r2
 80088fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80088fc:	787b      	ldrb	r3, [r7, #1]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d003      	beq.n	800890a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008902:	887a      	ldrh	r2, [r7, #2]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008908:	e003      	b.n	8008912 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800890a:	887b      	ldrh	r3, [r7, #2]
 800890c:	041a      	lsls	r2, r3, #16
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	619a      	str	r2, [r3, #24]
}
 8008912:	bf00      	nop
 8008914:	370c      	adds	r7, #12
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
	...

08008920 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008926:	2300      	movs	r3, #0
 8008928:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800892a:	2300      	movs	r3, #0
 800892c:	603b      	str	r3, [r7, #0]
 800892e:	4b20      	ldr	r3, [pc, #128]	; (80089b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8008930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008932:	4a1f      	ldr	r2, [pc, #124]	; (80089b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8008934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008938:	6413      	str	r3, [r2, #64]	; 0x40
 800893a:	4b1d      	ldr	r3, [pc, #116]	; (80089b0 <HAL_PWREx_EnableOverDrive+0x90>)
 800893c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008942:	603b      	str	r3, [r7, #0]
 8008944:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008946:	4b1b      	ldr	r3, [pc, #108]	; (80089b4 <HAL_PWREx_EnableOverDrive+0x94>)
 8008948:	2201      	movs	r2, #1
 800894a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800894c:	f7fe f9e6 	bl	8006d1c <HAL_GetTick>
 8008950:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008952:	e009      	b.n	8008968 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008954:	f7fe f9e2 	bl	8006d1c <HAL_GetTick>
 8008958:	4602      	mov	r2, r0
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008962:	d901      	bls.n	8008968 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008964:	2303      	movs	r3, #3
 8008966:	e01f      	b.n	80089a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008968:	4b13      	ldr	r3, [pc, #76]	; (80089b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008974:	d1ee      	bne.n	8008954 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008976:	4b11      	ldr	r3, [pc, #68]	; (80089bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8008978:	2201      	movs	r2, #1
 800897a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800897c:	f7fe f9ce 	bl	8006d1c <HAL_GetTick>
 8008980:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008982:	e009      	b.n	8008998 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008984:	f7fe f9ca 	bl	8006d1c <HAL_GetTick>
 8008988:	4602      	mov	r2, r0
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008992:	d901      	bls.n	8008998 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008994:	2303      	movs	r3, #3
 8008996:	e007      	b.n	80089a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008998:	4b07      	ldr	r3, [pc, #28]	; (80089b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089a4:	d1ee      	bne.n	8008984 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	40023800 	.word	0x40023800
 80089b4:	420e0040 	.word	0x420e0040
 80089b8:	40007000 	.word	0x40007000
 80089bc:	420e0044 	.word	0x420e0044

080089c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d101      	bne.n	80089d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	e0cc      	b.n	8008b6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80089d4:	4b68      	ldr	r3, [pc, #416]	; (8008b78 <HAL_RCC_ClockConfig+0x1b8>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 030f 	and.w	r3, r3, #15
 80089dc:	683a      	ldr	r2, [r7, #0]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d90c      	bls.n	80089fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089e2:	4b65      	ldr	r3, [pc, #404]	; (8008b78 <HAL_RCC_ClockConfig+0x1b8>)
 80089e4:	683a      	ldr	r2, [r7, #0]
 80089e6:	b2d2      	uxtb	r2, r2
 80089e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089ea:	4b63      	ldr	r3, [pc, #396]	; (8008b78 <HAL_RCC_ClockConfig+0x1b8>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 030f 	and.w	r3, r3, #15
 80089f2:	683a      	ldr	r2, [r7, #0]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d001      	beq.n	80089fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e0b8      	b.n	8008b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 0302 	and.w	r3, r3, #2
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d020      	beq.n	8008a4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 0304 	and.w	r3, r3, #4
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d005      	beq.n	8008a20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a14:	4b59      	ldr	r3, [pc, #356]	; (8008b7c <HAL_RCC_ClockConfig+0x1bc>)
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	4a58      	ldr	r2, [pc, #352]	; (8008b7c <HAL_RCC_ClockConfig+0x1bc>)
 8008a1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008a1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f003 0308 	and.w	r3, r3, #8
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d005      	beq.n	8008a38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008a2c:	4b53      	ldr	r3, [pc, #332]	; (8008b7c <HAL_RCC_ClockConfig+0x1bc>)
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	4a52      	ldr	r2, [pc, #328]	; (8008b7c <HAL_RCC_ClockConfig+0x1bc>)
 8008a32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008a36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a38:	4b50      	ldr	r3, [pc, #320]	; (8008b7c <HAL_RCC_ClockConfig+0x1bc>)
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	494d      	ldr	r1, [pc, #308]	; (8008b7c <HAL_RCC_ClockConfig+0x1bc>)
 8008a46:	4313      	orrs	r3, r2
 8008a48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 0301 	and.w	r3, r3, #1
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d044      	beq.n	8008ae0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d107      	bne.n	8008a6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a5e:	4b47      	ldr	r3, [pc, #284]	; (8008b7c <HAL_RCC_ClockConfig+0x1bc>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d119      	bne.n	8008a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e07f      	b.n	8008b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d003      	beq.n	8008a7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	d107      	bne.n	8008a8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a7e:	4b3f      	ldr	r3, [pc, #252]	; (8008b7c <HAL_RCC_ClockConfig+0x1bc>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d109      	bne.n	8008a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e06f      	b.n	8008b6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a8e:	4b3b      	ldr	r3, [pc, #236]	; (8008b7c <HAL_RCC_ClockConfig+0x1bc>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f003 0302 	and.w	r3, r3, #2
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d101      	bne.n	8008a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e067      	b.n	8008b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a9e:	4b37      	ldr	r3, [pc, #220]	; (8008b7c <HAL_RCC_ClockConfig+0x1bc>)
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f023 0203 	bic.w	r2, r3, #3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	4934      	ldr	r1, [pc, #208]	; (8008b7c <HAL_RCC_ClockConfig+0x1bc>)
 8008aac:	4313      	orrs	r3, r2
 8008aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008ab0:	f7fe f934 	bl	8006d1c <HAL_GetTick>
 8008ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ab6:	e00a      	b.n	8008ace <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ab8:	f7fe f930 	bl	8006d1c <HAL_GetTick>
 8008abc:	4602      	mov	r2, r0
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d901      	bls.n	8008ace <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008aca:	2303      	movs	r3, #3
 8008acc:	e04f      	b.n	8008b6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ace:	4b2b      	ldr	r3, [pc, #172]	; (8008b7c <HAL_RCC_ClockConfig+0x1bc>)
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	f003 020c 	and.w	r2, r3, #12
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d1eb      	bne.n	8008ab8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ae0:	4b25      	ldr	r3, [pc, #148]	; (8008b78 <HAL_RCC_ClockConfig+0x1b8>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 030f 	and.w	r3, r3, #15
 8008ae8:	683a      	ldr	r2, [r7, #0]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d20c      	bcs.n	8008b08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008aee:	4b22      	ldr	r3, [pc, #136]	; (8008b78 <HAL_RCC_ClockConfig+0x1b8>)
 8008af0:	683a      	ldr	r2, [r7, #0]
 8008af2:	b2d2      	uxtb	r2, r2
 8008af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008af6:	4b20      	ldr	r3, [pc, #128]	; (8008b78 <HAL_RCC_ClockConfig+0x1b8>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f003 030f 	and.w	r3, r3, #15
 8008afe:	683a      	ldr	r2, [r7, #0]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d001      	beq.n	8008b08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e032      	b.n	8008b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 0304 	and.w	r3, r3, #4
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d008      	beq.n	8008b26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b14:	4b19      	ldr	r3, [pc, #100]	; (8008b7c <HAL_RCC_ClockConfig+0x1bc>)
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	4916      	ldr	r1, [pc, #88]	; (8008b7c <HAL_RCC_ClockConfig+0x1bc>)
 8008b22:	4313      	orrs	r3, r2
 8008b24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f003 0308 	and.w	r3, r3, #8
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d009      	beq.n	8008b46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b32:	4b12      	ldr	r3, [pc, #72]	; (8008b7c <HAL_RCC_ClockConfig+0x1bc>)
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	00db      	lsls	r3, r3, #3
 8008b40:	490e      	ldr	r1, [pc, #56]	; (8008b7c <HAL_RCC_ClockConfig+0x1bc>)
 8008b42:	4313      	orrs	r3, r2
 8008b44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008b46:	f000 f855 	bl	8008bf4 <HAL_RCC_GetSysClockFreq>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	4b0b      	ldr	r3, [pc, #44]	; (8008b7c <HAL_RCC_ClockConfig+0x1bc>)
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	091b      	lsrs	r3, r3, #4
 8008b52:	f003 030f 	and.w	r3, r3, #15
 8008b56:	490a      	ldr	r1, [pc, #40]	; (8008b80 <HAL_RCC_ClockConfig+0x1c0>)
 8008b58:	5ccb      	ldrb	r3, [r1, r3]
 8008b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b5e:	4a09      	ldr	r2, [pc, #36]	; (8008b84 <HAL_RCC_ClockConfig+0x1c4>)
 8008b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008b62:	4b09      	ldr	r3, [pc, #36]	; (8008b88 <HAL_RCC_ClockConfig+0x1c8>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7fe f894 	bl	8006c94 <HAL_InitTick>

  return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	40023c00 	.word	0x40023c00
 8008b7c:	40023800 	.word	0x40023800
 8008b80:	080114d8 	.word	0x080114d8
 8008b84:	20000040 	.word	0x20000040
 8008b88:	20000044 	.word	0x20000044

08008b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b90:	4b03      	ldr	r3, [pc, #12]	; (8008ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008b92:	681b      	ldr	r3, [r3, #0]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	20000040 	.word	0x20000040

08008ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008ba8:	f7ff fff0 	bl	8008b8c <HAL_RCC_GetHCLKFreq>
 8008bac:	4602      	mov	r2, r0
 8008bae:	4b05      	ldr	r3, [pc, #20]	; (8008bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	0a9b      	lsrs	r3, r3, #10
 8008bb4:	f003 0307 	and.w	r3, r3, #7
 8008bb8:	4903      	ldr	r1, [pc, #12]	; (8008bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008bba:	5ccb      	ldrb	r3, [r1, r3]
 8008bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	40023800 	.word	0x40023800
 8008bc8:	080114e8 	.word	0x080114e8

08008bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008bd0:	f7ff ffdc 	bl	8008b8c <HAL_RCC_GetHCLKFreq>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	4b05      	ldr	r3, [pc, #20]	; (8008bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	0b5b      	lsrs	r3, r3, #13
 8008bdc:	f003 0307 	and.w	r3, r3, #7
 8008be0:	4903      	ldr	r1, [pc, #12]	; (8008bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008be2:	5ccb      	ldrb	r3, [r1, r3]
 8008be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	40023800 	.word	0x40023800
 8008bf0:	080114e8 	.word	0x080114e8

08008bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bf8:	b088      	sub	sp, #32
 8008bfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8008c00:	2300      	movs	r3, #0
 8008c02:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8008c04:	2300      	movs	r3, #0
 8008c06:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c10:	4bce      	ldr	r3, [pc, #824]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x358>)
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	f003 030c 	and.w	r3, r3, #12
 8008c18:	2b0c      	cmp	r3, #12
 8008c1a:	f200 818d 	bhi.w	8008f38 <HAL_RCC_GetSysClockFreq+0x344>
 8008c1e:	a201      	add	r2, pc, #4	; (adr r2, 8008c24 <HAL_RCC_GetSysClockFreq+0x30>)
 8008c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c24:	08008c59 	.word	0x08008c59
 8008c28:	08008f39 	.word	0x08008f39
 8008c2c:	08008f39 	.word	0x08008f39
 8008c30:	08008f39 	.word	0x08008f39
 8008c34:	08008c5f 	.word	0x08008c5f
 8008c38:	08008f39 	.word	0x08008f39
 8008c3c:	08008f39 	.word	0x08008f39
 8008c40:	08008f39 	.word	0x08008f39
 8008c44:	08008c65 	.word	0x08008c65
 8008c48:	08008f39 	.word	0x08008f39
 8008c4c:	08008f39 	.word	0x08008f39
 8008c50:	08008f39 	.word	0x08008f39
 8008c54:	08008dd9 	.word	0x08008dd9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008c58:	4bbd      	ldr	r3, [pc, #756]	; (8008f50 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008c5a:	61bb      	str	r3, [r7, #24]
       break;
 8008c5c:	e16f      	b.n	8008f3e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008c5e:	4bbd      	ldr	r3, [pc, #756]	; (8008f54 <HAL_RCC_GetSysClockFreq+0x360>)
 8008c60:	61bb      	str	r3, [r7, #24]
      break;
 8008c62:	e16c      	b.n	8008f3e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008c64:	4bb9      	ldr	r3, [pc, #740]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x358>)
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c6c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008c6e:	4bb7      	ldr	r3, [pc, #732]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x358>)
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d053      	beq.n	8008d22 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c7a:	4bb4      	ldr	r3, [pc, #720]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x358>)
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	099b      	lsrs	r3, r3, #6
 8008c80:	461a      	mov	r2, r3
 8008c82:	f04f 0300 	mov.w	r3, #0
 8008c86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008c8a:	f04f 0100 	mov.w	r1, #0
 8008c8e:	ea02 0400 	and.w	r4, r2, r0
 8008c92:	603c      	str	r4, [r7, #0]
 8008c94:	400b      	ands	r3, r1
 8008c96:	607b      	str	r3, [r7, #4]
 8008c98:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	4629      	mov	r1, r5
 8008ca0:	f04f 0200 	mov.w	r2, #0
 8008ca4:	f04f 0300 	mov.w	r3, #0
 8008ca8:	014b      	lsls	r3, r1, #5
 8008caa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008cae:	0142      	lsls	r2, r0, #5
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	4623      	mov	r3, r4
 8008cb6:	1ac0      	subs	r0, r0, r3
 8008cb8:	462b      	mov	r3, r5
 8008cba:	eb61 0103 	sbc.w	r1, r1, r3
 8008cbe:	f04f 0200 	mov.w	r2, #0
 8008cc2:	f04f 0300 	mov.w	r3, #0
 8008cc6:	018b      	lsls	r3, r1, #6
 8008cc8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008ccc:	0182      	lsls	r2, r0, #6
 8008cce:	1a12      	subs	r2, r2, r0
 8008cd0:	eb63 0301 	sbc.w	r3, r3, r1
 8008cd4:	f04f 0000 	mov.w	r0, #0
 8008cd8:	f04f 0100 	mov.w	r1, #0
 8008cdc:	00d9      	lsls	r1, r3, #3
 8008cde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008ce2:	00d0      	lsls	r0, r2, #3
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	4621      	mov	r1, r4
 8008cea:	1852      	adds	r2, r2, r1
 8008cec:	4629      	mov	r1, r5
 8008cee:	eb43 0101 	adc.w	r1, r3, r1
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	f04f 0000 	mov.w	r0, #0
 8008cf8:	f04f 0100 	mov.w	r1, #0
 8008cfc:	0259      	lsls	r1, r3, #9
 8008cfe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008d02:	0250      	lsls	r0, r2, #9
 8008d04:	4602      	mov	r2, r0
 8008d06:	460b      	mov	r3, r1
 8008d08:	4610      	mov	r0, r2
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	461a      	mov	r2, r3
 8008d10:	f04f 0300 	mov.w	r3, #0
 8008d14:	f7f7 ffd8 	bl	8000cc8 <__aeabi_uldivmod>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	61fb      	str	r3, [r7, #28]
 8008d20:	e04c      	b.n	8008dbc <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d22:	4b8a      	ldr	r3, [pc, #552]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x358>)
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	099b      	lsrs	r3, r3, #6
 8008d28:	461a      	mov	r2, r3
 8008d2a:	f04f 0300 	mov.w	r3, #0
 8008d2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008d32:	f04f 0100 	mov.w	r1, #0
 8008d36:	ea02 0a00 	and.w	sl, r2, r0
 8008d3a:	ea03 0b01 	and.w	fp, r3, r1
 8008d3e:	4650      	mov	r0, sl
 8008d40:	4659      	mov	r1, fp
 8008d42:	f04f 0200 	mov.w	r2, #0
 8008d46:	f04f 0300 	mov.w	r3, #0
 8008d4a:	014b      	lsls	r3, r1, #5
 8008d4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008d50:	0142      	lsls	r2, r0, #5
 8008d52:	4610      	mov	r0, r2
 8008d54:	4619      	mov	r1, r3
 8008d56:	ebb0 000a 	subs.w	r0, r0, sl
 8008d5a:	eb61 010b 	sbc.w	r1, r1, fp
 8008d5e:	f04f 0200 	mov.w	r2, #0
 8008d62:	f04f 0300 	mov.w	r3, #0
 8008d66:	018b      	lsls	r3, r1, #6
 8008d68:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008d6c:	0182      	lsls	r2, r0, #6
 8008d6e:	1a12      	subs	r2, r2, r0
 8008d70:	eb63 0301 	sbc.w	r3, r3, r1
 8008d74:	f04f 0000 	mov.w	r0, #0
 8008d78:	f04f 0100 	mov.w	r1, #0
 8008d7c:	00d9      	lsls	r1, r3, #3
 8008d7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008d82:	00d0      	lsls	r0, r2, #3
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	eb12 020a 	adds.w	r2, r2, sl
 8008d8c:	eb43 030b 	adc.w	r3, r3, fp
 8008d90:	f04f 0000 	mov.w	r0, #0
 8008d94:	f04f 0100 	mov.w	r1, #0
 8008d98:	0299      	lsls	r1, r3, #10
 8008d9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008d9e:	0290      	lsls	r0, r2, #10
 8008da0:	4602      	mov	r2, r0
 8008da2:	460b      	mov	r3, r1
 8008da4:	4610      	mov	r0, r2
 8008da6:	4619      	mov	r1, r3
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	461a      	mov	r2, r3
 8008dac:	f04f 0300 	mov.w	r3, #0
 8008db0:	f7f7 ff8a 	bl	8000cc8 <__aeabi_uldivmod>
 8008db4:	4602      	mov	r2, r0
 8008db6:	460b      	mov	r3, r1
 8008db8:	4613      	mov	r3, r2
 8008dba:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008dbc:	4b63      	ldr	r3, [pc, #396]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x358>)
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	0c1b      	lsrs	r3, r3, #16
 8008dc2:	f003 0303 	and.w	r3, r3, #3
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	005b      	lsls	r3, r3, #1
 8008dca:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8008dcc:	69fa      	ldr	r2, [r7, #28]
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dd4:	61bb      	str	r3, [r7, #24]
      break;
 8008dd6:	e0b2      	b.n	8008f3e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008dd8:	4b5c      	ldr	r3, [pc, #368]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x358>)
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008de0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008de2:	4b5a      	ldr	r3, [pc, #360]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x358>)
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d04d      	beq.n	8008e8a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008dee:	4b57      	ldr	r3, [pc, #348]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x358>)
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	099b      	lsrs	r3, r3, #6
 8008df4:	461a      	mov	r2, r3
 8008df6:	f04f 0300 	mov.w	r3, #0
 8008dfa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008dfe:	f04f 0100 	mov.w	r1, #0
 8008e02:	ea02 0800 	and.w	r8, r2, r0
 8008e06:	ea03 0901 	and.w	r9, r3, r1
 8008e0a:	4640      	mov	r0, r8
 8008e0c:	4649      	mov	r1, r9
 8008e0e:	f04f 0200 	mov.w	r2, #0
 8008e12:	f04f 0300 	mov.w	r3, #0
 8008e16:	014b      	lsls	r3, r1, #5
 8008e18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008e1c:	0142      	lsls	r2, r0, #5
 8008e1e:	4610      	mov	r0, r2
 8008e20:	4619      	mov	r1, r3
 8008e22:	ebb0 0008 	subs.w	r0, r0, r8
 8008e26:	eb61 0109 	sbc.w	r1, r1, r9
 8008e2a:	f04f 0200 	mov.w	r2, #0
 8008e2e:	f04f 0300 	mov.w	r3, #0
 8008e32:	018b      	lsls	r3, r1, #6
 8008e34:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008e38:	0182      	lsls	r2, r0, #6
 8008e3a:	1a12      	subs	r2, r2, r0
 8008e3c:	eb63 0301 	sbc.w	r3, r3, r1
 8008e40:	f04f 0000 	mov.w	r0, #0
 8008e44:	f04f 0100 	mov.w	r1, #0
 8008e48:	00d9      	lsls	r1, r3, #3
 8008e4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008e4e:	00d0      	lsls	r0, r2, #3
 8008e50:	4602      	mov	r2, r0
 8008e52:	460b      	mov	r3, r1
 8008e54:	eb12 0208 	adds.w	r2, r2, r8
 8008e58:	eb43 0309 	adc.w	r3, r3, r9
 8008e5c:	f04f 0000 	mov.w	r0, #0
 8008e60:	f04f 0100 	mov.w	r1, #0
 8008e64:	0259      	lsls	r1, r3, #9
 8008e66:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008e6a:	0250      	lsls	r0, r2, #9
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	460b      	mov	r3, r1
 8008e70:	4610      	mov	r0, r2
 8008e72:	4619      	mov	r1, r3
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	461a      	mov	r2, r3
 8008e78:	f04f 0300 	mov.w	r3, #0
 8008e7c:	f7f7 ff24 	bl	8000cc8 <__aeabi_uldivmod>
 8008e80:	4602      	mov	r2, r0
 8008e82:	460b      	mov	r3, r1
 8008e84:	4613      	mov	r3, r2
 8008e86:	61fb      	str	r3, [r7, #28]
 8008e88:	e04a      	b.n	8008f20 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e8a:	4b30      	ldr	r3, [pc, #192]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x358>)
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	099b      	lsrs	r3, r3, #6
 8008e90:	461a      	mov	r2, r3
 8008e92:	f04f 0300 	mov.w	r3, #0
 8008e96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008e9a:	f04f 0100 	mov.w	r1, #0
 8008e9e:	ea02 0400 	and.w	r4, r2, r0
 8008ea2:	ea03 0501 	and.w	r5, r3, r1
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	4629      	mov	r1, r5
 8008eaa:	f04f 0200 	mov.w	r2, #0
 8008eae:	f04f 0300 	mov.w	r3, #0
 8008eb2:	014b      	lsls	r3, r1, #5
 8008eb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008eb8:	0142      	lsls	r2, r0, #5
 8008eba:	4610      	mov	r0, r2
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	1b00      	subs	r0, r0, r4
 8008ec0:	eb61 0105 	sbc.w	r1, r1, r5
 8008ec4:	f04f 0200 	mov.w	r2, #0
 8008ec8:	f04f 0300 	mov.w	r3, #0
 8008ecc:	018b      	lsls	r3, r1, #6
 8008ece:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008ed2:	0182      	lsls	r2, r0, #6
 8008ed4:	1a12      	subs	r2, r2, r0
 8008ed6:	eb63 0301 	sbc.w	r3, r3, r1
 8008eda:	f04f 0000 	mov.w	r0, #0
 8008ede:	f04f 0100 	mov.w	r1, #0
 8008ee2:	00d9      	lsls	r1, r3, #3
 8008ee4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008ee8:	00d0      	lsls	r0, r2, #3
 8008eea:	4602      	mov	r2, r0
 8008eec:	460b      	mov	r3, r1
 8008eee:	1912      	adds	r2, r2, r4
 8008ef0:	eb45 0303 	adc.w	r3, r5, r3
 8008ef4:	f04f 0000 	mov.w	r0, #0
 8008ef8:	f04f 0100 	mov.w	r1, #0
 8008efc:	0299      	lsls	r1, r3, #10
 8008efe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008f02:	0290      	lsls	r0, r2, #10
 8008f04:	4602      	mov	r2, r0
 8008f06:	460b      	mov	r3, r1
 8008f08:	4610      	mov	r0, r2
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	461a      	mov	r2, r3
 8008f10:	f04f 0300 	mov.w	r3, #0
 8008f14:	f7f7 fed8 	bl	8000cc8 <__aeabi_uldivmod>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008f20:	4b0a      	ldr	r3, [pc, #40]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x358>)
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	0f1b      	lsrs	r3, r3, #28
 8008f26:	f003 0307 	and.w	r3, r3, #7
 8008f2a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8008f2c:	69fa      	ldr	r2, [r7, #28]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f34:	61bb      	str	r3, [r7, #24]
      break;
 8008f36:	e002      	b.n	8008f3e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008f38:	4b05      	ldr	r3, [pc, #20]	; (8008f50 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008f3a:	61bb      	str	r3, [r7, #24]
      break;
 8008f3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f3e:	69bb      	ldr	r3, [r7, #24]
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3720      	adds	r7, #32
 8008f44:	46bd      	mov	sp, r7
 8008f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f4a:	bf00      	nop
 8008f4c:	40023800 	.word	0x40023800
 8008f50:	00f42400 	.word	0x00f42400
 8008f54:	007a1200 	.word	0x007a1200

08008f58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d101      	bne.n	8008f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e28d      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 0301 	and.w	r3, r3, #1
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f000 8083 	beq.w	800907e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008f78:	4b94      	ldr	r3, [pc, #592]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	f003 030c 	and.w	r3, r3, #12
 8008f80:	2b04      	cmp	r3, #4
 8008f82:	d019      	beq.n	8008fb8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008f84:	4b91      	ldr	r3, [pc, #580]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008f8c:	2b08      	cmp	r3, #8
 8008f8e:	d106      	bne.n	8008f9e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008f90:	4b8e      	ldr	r3, [pc, #568]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f9c:	d00c      	beq.n	8008fb8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f9e:	4b8b      	ldr	r3, [pc, #556]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008fa6:	2b0c      	cmp	r3, #12
 8008fa8:	d112      	bne.n	8008fd0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008faa:	4b88      	ldr	r3, [pc, #544]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fb6:	d10b      	bne.n	8008fd0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fb8:	4b84      	ldr	r3, [pc, #528]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d05b      	beq.n	800907c <HAL_RCC_OscConfig+0x124>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d157      	bne.n	800907c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e25a      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fd8:	d106      	bne.n	8008fe8 <HAL_RCC_OscConfig+0x90>
 8008fda:	4b7c      	ldr	r3, [pc, #496]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a7b      	ldr	r2, [pc, #492]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8008fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fe4:	6013      	str	r3, [r2, #0]
 8008fe6:	e01d      	b.n	8009024 <HAL_RCC_OscConfig+0xcc>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ff0:	d10c      	bne.n	800900c <HAL_RCC_OscConfig+0xb4>
 8008ff2:	4b76      	ldr	r3, [pc, #472]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a75      	ldr	r2, [pc, #468]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8008ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ffc:	6013      	str	r3, [r2, #0]
 8008ffe:	4b73      	ldr	r3, [pc, #460]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a72      	ldr	r2, [pc, #456]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8009004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009008:	6013      	str	r3, [r2, #0]
 800900a:	e00b      	b.n	8009024 <HAL_RCC_OscConfig+0xcc>
 800900c:	4b6f      	ldr	r3, [pc, #444]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a6e      	ldr	r2, [pc, #440]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8009012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009016:	6013      	str	r3, [r2, #0]
 8009018:	4b6c      	ldr	r3, [pc, #432]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a6b      	ldr	r2, [pc, #428]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 800901e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d013      	beq.n	8009054 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800902c:	f7fd fe76 	bl	8006d1c <HAL_GetTick>
 8009030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009032:	e008      	b.n	8009046 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009034:	f7fd fe72 	bl	8006d1c <HAL_GetTick>
 8009038:	4602      	mov	r2, r0
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	2b64      	cmp	r3, #100	; 0x64
 8009040:	d901      	bls.n	8009046 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	e21f      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009046:	4b61      	ldr	r3, [pc, #388]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800904e:	2b00      	cmp	r3, #0
 8009050:	d0f0      	beq.n	8009034 <HAL_RCC_OscConfig+0xdc>
 8009052:	e014      	b.n	800907e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009054:	f7fd fe62 	bl	8006d1c <HAL_GetTick>
 8009058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800905a:	e008      	b.n	800906e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800905c:	f7fd fe5e 	bl	8006d1c <HAL_GetTick>
 8009060:	4602      	mov	r2, r0
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	2b64      	cmp	r3, #100	; 0x64
 8009068:	d901      	bls.n	800906e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800906a:	2303      	movs	r3, #3
 800906c:	e20b      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800906e:	4b57      	ldr	r3, [pc, #348]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009076:	2b00      	cmp	r3, #0
 8009078:	d1f0      	bne.n	800905c <HAL_RCC_OscConfig+0x104>
 800907a:	e000      	b.n	800907e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800907c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f003 0302 	and.w	r3, r3, #2
 8009086:	2b00      	cmp	r3, #0
 8009088:	d06f      	beq.n	800916a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800908a:	4b50      	ldr	r3, [pc, #320]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	f003 030c 	and.w	r3, r3, #12
 8009092:	2b00      	cmp	r3, #0
 8009094:	d017      	beq.n	80090c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009096:	4b4d      	ldr	r3, [pc, #308]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800909e:	2b08      	cmp	r3, #8
 80090a0:	d105      	bne.n	80090ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80090a2:	4b4a      	ldr	r3, [pc, #296]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00b      	beq.n	80090c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090ae:	4b47      	ldr	r3, [pc, #284]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80090b6:	2b0c      	cmp	r3, #12
 80090b8:	d11c      	bne.n	80090f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090ba:	4b44      	ldr	r3, [pc, #272]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d116      	bne.n	80090f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090c6:	4b41      	ldr	r3, [pc, #260]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f003 0302 	and.w	r3, r3, #2
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d005      	beq.n	80090de <HAL_RCC_OscConfig+0x186>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d001      	beq.n	80090de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	e1d3      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090de:	4b3b      	ldr	r3, [pc, #236]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	691b      	ldr	r3, [r3, #16]
 80090ea:	00db      	lsls	r3, r3, #3
 80090ec:	4937      	ldr	r1, [pc, #220]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 80090ee:	4313      	orrs	r3, r2
 80090f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090f2:	e03a      	b.n	800916a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d020      	beq.n	800913e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80090fc:	4b34      	ldr	r3, [pc, #208]	; (80091d0 <HAL_RCC_OscConfig+0x278>)
 80090fe:	2201      	movs	r2, #1
 8009100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009102:	f7fd fe0b 	bl	8006d1c <HAL_GetTick>
 8009106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009108:	e008      	b.n	800911c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800910a:	f7fd fe07 	bl	8006d1c <HAL_GetTick>
 800910e:	4602      	mov	r2, r0
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	1ad3      	subs	r3, r2, r3
 8009114:	2b02      	cmp	r3, #2
 8009116:	d901      	bls.n	800911c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8009118:	2303      	movs	r3, #3
 800911a:	e1b4      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800911c:	4b2b      	ldr	r3, [pc, #172]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 0302 	and.w	r3, r3, #2
 8009124:	2b00      	cmp	r3, #0
 8009126:	d0f0      	beq.n	800910a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009128:	4b28      	ldr	r3, [pc, #160]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	00db      	lsls	r3, r3, #3
 8009136:	4925      	ldr	r1, [pc, #148]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8009138:	4313      	orrs	r3, r2
 800913a:	600b      	str	r3, [r1, #0]
 800913c:	e015      	b.n	800916a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800913e:	4b24      	ldr	r3, [pc, #144]	; (80091d0 <HAL_RCC_OscConfig+0x278>)
 8009140:	2200      	movs	r2, #0
 8009142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009144:	f7fd fdea 	bl	8006d1c <HAL_GetTick>
 8009148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800914a:	e008      	b.n	800915e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800914c:	f7fd fde6 	bl	8006d1c <HAL_GetTick>
 8009150:	4602      	mov	r2, r0
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	2b02      	cmp	r3, #2
 8009158:	d901      	bls.n	800915e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800915a:	2303      	movs	r3, #3
 800915c:	e193      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800915e:	4b1b      	ldr	r3, [pc, #108]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 0302 	and.w	r3, r3, #2
 8009166:	2b00      	cmp	r3, #0
 8009168:	d1f0      	bne.n	800914c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f003 0308 	and.w	r3, r3, #8
 8009172:	2b00      	cmp	r3, #0
 8009174:	d036      	beq.n	80091e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	695b      	ldr	r3, [r3, #20]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d016      	beq.n	80091ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800917e:	4b15      	ldr	r3, [pc, #84]	; (80091d4 <HAL_RCC_OscConfig+0x27c>)
 8009180:	2201      	movs	r2, #1
 8009182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009184:	f7fd fdca 	bl	8006d1c <HAL_GetTick>
 8009188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800918a:	e008      	b.n	800919e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800918c:	f7fd fdc6 	bl	8006d1c <HAL_GetTick>
 8009190:	4602      	mov	r2, r0
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	1ad3      	subs	r3, r2, r3
 8009196:	2b02      	cmp	r3, #2
 8009198:	d901      	bls.n	800919e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800919a:	2303      	movs	r3, #3
 800919c:	e173      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800919e:	4b0b      	ldr	r3, [pc, #44]	; (80091cc <HAL_RCC_OscConfig+0x274>)
 80091a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091a2:	f003 0302 	and.w	r3, r3, #2
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d0f0      	beq.n	800918c <HAL_RCC_OscConfig+0x234>
 80091aa:	e01b      	b.n	80091e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80091ac:	4b09      	ldr	r3, [pc, #36]	; (80091d4 <HAL_RCC_OscConfig+0x27c>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091b2:	f7fd fdb3 	bl	8006d1c <HAL_GetTick>
 80091b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091b8:	e00e      	b.n	80091d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091ba:	f7fd fdaf 	bl	8006d1c <HAL_GetTick>
 80091be:	4602      	mov	r2, r0
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	1ad3      	subs	r3, r2, r3
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	d907      	bls.n	80091d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80091c8:	2303      	movs	r3, #3
 80091ca:	e15c      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
 80091cc:	40023800 	.word	0x40023800
 80091d0:	42470000 	.word	0x42470000
 80091d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091d8:	4b8a      	ldr	r3, [pc, #552]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 80091da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091dc:	f003 0302 	and.w	r3, r3, #2
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1ea      	bne.n	80091ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f003 0304 	and.w	r3, r3, #4
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f000 8097 	beq.w	8009320 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80091f2:	2300      	movs	r3, #0
 80091f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091f6:	4b83      	ldr	r3, [pc, #524]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 80091f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10f      	bne.n	8009222 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009202:	2300      	movs	r3, #0
 8009204:	60bb      	str	r3, [r7, #8]
 8009206:	4b7f      	ldr	r3, [pc, #508]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 8009208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920a:	4a7e      	ldr	r2, [pc, #504]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 800920c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009210:	6413      	str	r3, [r2, #64]	; 0x40
 8009212:	4b7c      	ldr	r3, [pc, #496]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 8009214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800921a:	60bb      	str	r3, [r7, #8]
 800921c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800921e:	2301      	movs	r3, #1
 8009220:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009222:	4b79      	ldr	r3, [pc, #484]	; (8009408 <HAL_RCC_OscConfig+0x4b0>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800922a:	2b00      	cmp	r3, #0
 800922c:	d118      	bne.n	8009260 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800922e:	4b76      	ldr	r3, [pc, #472]	; (8009408 <HAL_RCC_OscConfig+0x4b0>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a75      	ldr	r2, [pc, #468]	; (8009408 <HAL_RCC_OscConfig+0x4b0>)
 8009234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800923a:	f7fd fd6f 	bl	8006d1c <HAL_GetTick>
 800923e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009240:	e008      	b.n	8009254 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009242:	f7fd fd6b 	bl	8006d1c <HAL_GetTick>
 8009246:	4602      	mov	r2, r0
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	1ad3      	subs	r3, r2, r3
 800924c:	2b02      	cmp	r3, #2
 800924e:	d901      	bls.n	8009254 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009250:	2303      	movs	r3, #3
 8009252:	e118      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009254:	4b6c      	ldr	r3, [pc, #432]	; (8009408 <HAL_RCC_OscConfig+0x4b0>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800925c:	2b00      	cmp	r3, #0
 800925e:	d0f0      	beq.n	8009242 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d106      	bne.n	8009276 <HAL_RCC_OscConfig+0x31e>
 8009268:	4b66      	ldr	r3, [pc, #408]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 800926a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800926c:	4a65      	ldr	r2, [pc, #404]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 800926e:	f043 0301 	orr.w	r3, r3, #1
 8009272:	6713      	str	r3, [r2, #112]	; 0x70
 8009274:	e01c      	b.n	80092b0 <HAL_RCC_OscConfig+0x358>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	2b05      	cmp	r3, #5
 800927c:	d10c      	bne.n	8009298 <HAL_RCC_OscConfig+0x340>
 800927e:	4b61      	ldr	r3, [pc, #388]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 8009280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009282:	4a60      	ldr	r2, [pc, #384]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 8009284:	f043 0304 	orr.w	r3, r3, #4
 8009288:	6713      	str	r3, [r2, #112]	; 0x70
 800928a:	4b5e      	ldr	r3, [pc, #376]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 800928c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800928e:	4a5d      	ldr	r2, [pc, #372]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 8009290:	f043 0301 	orr.w	r3, r3, #1
 8009294:	6713      	str	r3, [r2, #112]	; 0x70
 8009296:	e00b      	b.n	80092b0 <HAL_RCC_OscConfig+0x358>
 8009298:	4b5a      	ldr	r3, [pc, #360]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 800929a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800929c:	4a59      	ldr	r2, [pc, #356]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 800929e:	f023 0301 	bic.w	r3, r3, #1
 80092a2:	6713      	str	r3, [r2, #112]	; 0x70
 80092a4:	4b57      	ldr	r3, [pc, #348]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 80092a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092a8:	4a56      	ldr	r2, [pc, #344]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 80092aa:	f023 0304 	bic.w	r3, r3, #4
 80092ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d015      	beq.n	80092e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092b8:	f7fd fd30 	bl	8006d1c <HAL_GetTick>
 80092bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092be:	e00a      	b.n	80092d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092c0:	f7fd fd2c 	bl	8006d1c <HAL_GetTick>
 80092c4:	4602      	mov	r2, r0
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d901      	bls.n	80092d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80092d2:	2303      	movs	r3, #3
 80092d4:	e0d7      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092d6:	4b4b      	ldr	r3, [pc, #300]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 80092d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092da:	f003 0302 	and.w	r3, r3, #2
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d0ee      	beq.n	80092c0 <HAL_RCC_OscConfig+0x368>
 80092e2:	e014      	b.n	800930e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092e4:	f7fd fd1a 	bl	8006d1c <HAL_GetTick>
 80092e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092ea:	e00a      	b.n	8009302 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092ec:	f7fd fd16 	bl	8006d1c <HAL_GetTick>
 80092f0:	4602      	mov	r2, r0
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	1ad3      	subs	r3, r2, r3
 80092f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d901      	bls.n	8009302 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80092fe:	2303      	movs	r3, #3
 8009300:	e0c1      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009302:	4b40      	ldr	r3, [pc, #256]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 8009304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009306:	f003 0302 	and.w	r3, r3, #2
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1ee      	bne.n	80092ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800930e:	7dfb      	ldrb	r3, [r7, #23]
 8009310:	2b01      	cmp	r3, #1
 8009312:	d105      	bne.n	8009320 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009314:	4b3b      	ldr	r3, [pc, #236]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 8009316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009318:	4a3a      	ldr	r2, [pc, #232]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 800931a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800931e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	699b      	ldr	r3, [r3, #24]
 8009324:	2b00      	cmp	r3, #0
 8009326:	f000 80ad 	beq.w	8009484 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800932a:	4b36      	ldr	r3, [pc, #216]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	f003 030c 	and.w	r3, r3, #12
 8009332:	2b08      	cmp	r3, #8
 8009334:	d060      	beq.n	80093f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	699b      	ldr	r3, [r3, #24]
 800933a:	2b02      	cmp	r3, #2
 800933c:	d145      	bne.n	80093ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800933e:	4b33      	ldr	r3, [pc, #204]	; (800940c <HAL_RCC_OscConfig+0x4b4>)
 8009340:	2200      	movs	r2, #0
 8009342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009344:	f7fd fcea 	bl	8006d1c <HAL_GetTick>
 8009348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800934a:	e008      	b.n	800935e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800934c:	f7fd fce6 	bl	8006d1c <HAL_GetTick>
 8009350:	4602      	mov	r2, r0
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	2b02      	cmp	r3, #2
 8009358:	d901      	bls.n	800935e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800935a:	2303      	movs	r3, #3
 800935c:	e093      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800935e:	4b29      	ldr	r3, [pc, #164]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1f0      	bne.n	800934c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	69da      	ldr	r2, [r3, #28]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6a1b      	ldr	r3, [r3, #32]
 8009372:	431a      	orrs	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009378:	019b      	lsls	r3, r3, #6
 800937a:	431a      	orrs	r2, r3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009380:	085b      	lsrs	r3, r3, #1
 8009382:	3b01      	subs	r3, #1
 8009384:	041b      	lsls	r3, r3, #16
 8009386:	431a      	orrs	r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800938c:	061b      	lsls	r3, r3, #24
 800938e:	431a      	orrs	r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009394:	071b      	lsls	r3, r3, #28
 8009396:	491b      	ldr	r1, [pc, #108]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 8009398:	4313      	orrs	r3, r2
 800939a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800939c:	4b1b      	ldr	r3, [pc, #108]	; (800940c <HAL_RCC_OscConfig+0x4b4>)
 800939e:	2201      	movs	r2, #1
 80093a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093a2:	f7fd fcbb 	bl	8006d1c <HAL_GetTick>
 80093a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093a8:	e008      	b.n	80093bc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093aa:	f7fd fcb7 	bl	8006d1c <HAL_GetTick>
 80093ae:	4602      	mov	r2, r0
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	1ad3      	subs	r3, r2, r3
 80093b4:	2b02      	cmp	r3, #2
 80093b6:	d901      	bls.n	80093bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80093b8:	2303      	movs	r3, #3
 80093ba:	e064      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093bc:	4b11      	ldr	r3, [pc, #68]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d0f0      	beq.n	80093aa <HAL_RCC_OscConfig+0x452>
 80093c8:	e05c      	b.n	8009484 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093ca:	4b10      	ldr	r3, [pc, #64]	; (800940c <HAL_RCC_OscConfig+0x4b4>)
 80093cc:	2200      	movs	r2, #0
 80093ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093d0:	f7fd fca4 	bl	8006d1c <HAL_GetTick>
 80093d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093d6:	e008      	b.n	80093ea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093d8:	f7fd fca0 	bl	8006d1c <HAL_GetTick>
 80093dc:	4602      	mov	r2, r0
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	1ad3      	subs	r3, r2, r3
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d901      	bls.n	80093ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80093e6:	2303      	movs	r3, #3
 80093e8:	e04d      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093ea:	4b06      	ldr	r3, [pc, #24]	; (8009404 <HAL_RCC_OscConfig+0x4ac>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d1f0      	bne.n	80093d8 <HAL_RCC_OscConfig+0x480>
 80093f6:	e045      	b.n	8009484 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	699b      	ldr	r3, [r3, #24]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d107      	bne.n	8009410 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e040      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
 8009404:	40023800 	.word	0x40023800
 8009408:	40007000 	.word	0x40007000
 800940c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009410:	4b1f      	ldr	r3, [pc, #124]	; (8009490 <HAL_RCC_OscConfig+0x538>)
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	699b      	ldr	r3, [r3, #24]
 800941a:	2b01      	cmp	r3, #1
 800941c:	d030      	beq.n	8009480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009428:	429a      	cmp	r2, r3
 800942a:	d129      	bne.n	8009480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009436:	429a      	cmp	r2, r3
 8009438:	d122      	bne.n	8009480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009440:	4013      	ands	r3, r2
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009446:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009448:	4293      	cmp	r3, r2
 800944a:	d119      	bne.n	8009480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009456:	085b      	lsrs	r3, r3, #1
 8009458:	3b01      	subs	r3, #1
 800945a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800945c:	429a      	cmp	r2, r3
 800945e:	d10f      	bne.n	8009480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800946c:	429a      	cmp	r2, r3
 800946e:	d107      	bne.n	8009480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800947a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800947c:	429a      	cmp	r2, r3
 800947e:	d001      	beq.n	8009484 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	e000      	b.n	8009486 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3718      	adds	r7, #24
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	40023800 	.word	0x40023800

08009494 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d101      	bne.n	80094a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e07b      	b.n	800959e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d108      	bne.n	80094c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094b6:	d009      	beq.n	80094cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	61da      	str	r2, [r3, #28]
 80094be:	e005      	b.n	80094cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d106      	bne.n	80094ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f7fc fc8e 	bl	8005e08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2202      	movs	r2, #2
 80094f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009502:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009514:	431a      	orrs	r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800951e:	431a      	orrs	r2, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	f003 0302 	and.w	r3, r3, #2
 8009528:	431a      	orrs	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	695b      	ldr	r3, [r3, #20]
 800952e:	f003 0301 	and.w	r3, r3, #1
 8009532:	431a      	orrs	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	699b      	ldr	r3, [r3, #24]
 8009538:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800953c:	431a      	orrs	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	69db      	ldr	r3, [r3, #28]
 8009542:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009546:	431a      	orrs	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6a1b      	ldr	r3, [r3, #32]
 800954c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009550:	ea42 0103 	orr.w	r1, r2, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009558:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	430a      	orrs	r2, r1
 8009562:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	0c1b      	lsrs	r3, r3, #16
 800956a:	f003 0104 	and.w	r1, r3, #4
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009572:	f003 0210 	and.w	r2, r3, #16
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	430a      	orrs	r2, r1
 800957c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	69da      	ldr	r2, [r3, #28]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800958c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3708      	adds	r7, #8
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b08c      	sub	sp, #48	; 0x30
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	60f8      	str	r0, [r7, #12]
 80095ae:	60b9      	str	r1, [r7, #8]
 80095b0:	607a      	str	r2, [r7, #4]
 80095b2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80095b4:	2301      	movs	r3, #1
 80095b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80095b8:	2300      	movs	r3, #0
 80095ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d101      	bne.n	80095cc <HAL_SPI_TransmitReceive+0x26>
 80095c8:	2302      	movs	r3, #2
 80095ca:	e18a      	b.n	80098e2 <HAL_SPI_TransmitReceive+0x33c>
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095d4:	f7fd fba2 	bl	8006d1c <HAL_GetTick>
 80095d8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80095ea:	887b      	ldrh	r3, [r7, #2]
 80095ec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80095ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d00f      	beq.n	8009616 <HAL_SPI_TransmitReceive+0x70>
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095fc:	d107      	bne.n	800960e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d103      	bne.n	800960e <HAL_SPI_TransmitReceive+0x68>
 8009606:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800960a:	2b04      	cmp	r3, #4
 800960c:	d003      	beq.n	8009616 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800960e:	2302      	movs	r3, #2
 8009610:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009614:	e15b      	b.n	80098ce <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d005      	beq.n	8009628 <HAL_SPI_TransmitReceive+0x82>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d002      	beq.n	8009628 <HAL_SPI_TransmitReceive+0x82>
 8009622:	887b      	ldrh	r3, [r7, #2]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d103      	bne.n	8009630 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800962e:	e14e      	b.n	80098ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009636:	b2db      	uxtb	r3, r3
 8009638:	2b04      	cmp	r3, #4
 800963a:	d003      	beq.n	8009644 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2205      	movs	r2, #5
 8009640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	887a      	ldrh	r2, [r7, #2]
 8009654:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	887a      	ldrh	r2, [r7, #2]
 800965a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	68ba      	ldr	r2, [r7, #8]
 8009660:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	887a      	ldrh	r2, [r7, #2]
 8009666:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	887a      	ldrh	r2, [r7, #2]
 800966c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2200      	movs	r2, #0
 8009678:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009684:	2b40      	cmp	r3, #64	; 0x40
 8009686:	d007      	beq.n	8009698 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009696:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096a0:	d178      	bne.n	8009794 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d002      	beq.n	80096b0 <HAL_SPI_TransmitReceive+0x10a>
 80096aa:	8b7b      	ldrh	r3, [r7, #26]
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d166      	bne.n	800977e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b4:	881a      	ldrh	r2, [r3, #0]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c0:	1c9a      	adds	r2, r3, #2
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	3b01      	subs	r3, #1
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80096d4:	e053      	b.n	800977e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	f003 0302 	and.w	r3, r3, #2
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d11b      	bne.n	800971c <HAL_SPI_TransmitReceive+0x176>
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d016      	beq.n	800971c <HAL_SPI_TransmitReceive+0x176>
 80096ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d113      	bne.n	800971c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f8:	881a      	ldrh	r2, [r3, #0]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009704:	1c9a      	adds	r2, r3, #2
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800970e:	b29b      	uxth	r3, r3
 8009710:	3b01      	subs	r3, #1
 8009712:	b29a      	uxth	r2, r3
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009718:	2300      	movs	r3, #0
 800971a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	f003 0301 	and.w	r3, r3, #1
 8009726:	2b01      	cmp	r3, #1
 8009728:	d119      	bne.n	800975e <HAL_SPI_TransmitReceive+0x1b8>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800972e:	b29b      	uxth	r3, r3
 8009730:	2b00      	cmp	r3, #0
 8009732:	d014      	beq.n	800975e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68da      	ldr	r2, [r3, #12]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973e:	b292      	uxth	r2, r2
 8009740:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009746:	1c9a      	adds	r2, r3, #2
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009750:	b29b      	uxth	r3, r3
 8009752:	3b01      	subs	r3, #1
 8009754:	b29a      	uxth	r2, r3
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800975a:	2301      	movs	r3, #1
 800975c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800975e:	f7fd fadd 	bl	8006d1c <HAL_GetTick>
 8009762:	4602      	mov	r2, r0
 8009764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009766:	1ad3      	subs	r3, r2, r3
 8009768:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800976a:	429a      	cmp	r2, r3
 800976c:	d807      	bhi.n	800977e <HAL_SPI_TransmitReceive+0x1d8>
 800976e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009774:	d003      	beq.n	800977e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009776:	2303      	movs	r3, #3
 8009778:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800977c:	e0a7      	b.n	80098ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009782:	b29b      	uxth	r3, r3
 8009784:	2b00      	cmp	r3, #0
 8009786:	d1a6      	bne.n	80096d6 <HAL_SPI_TransmitReceive+0x130>
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800978c:	b29b      	uxth	r3, r3
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1a1      	bne.n	80096d6 <HAL_SPI_TransmitReceive+0x130>
 8009792:	e07c      	b.n	800988e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d002      	beq.n	80097a2 <HAL_SPI_TransmitReceive+0x1fc>
 800979c:	8b7b      	ldrh	r3, [r7, #26]
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d16b      	bne.n	800987a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	330c      	adds	r3, #12
 80097ac:	7812      	ldrb	r2, [r2, #0]
 80097ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b4:	1c5a      	adds	r2, r3, #1
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097be:	b29b      	uxth	r3, r3
 80097c0:	3b01      	subs	r3, #1
 80097c2:	b29a      	uxth	r2, r3
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097c8:	e057      	b.n	800987a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	f003 0302 	and.w	r3, r3, #2
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	d11c      	bne.n	8009812 <HAL_SPI_TransmitReceive+0x26c>
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097dc:	b29b      	uxth	r3, r3
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d017      	beq.n	8009812 <HAL_SPI_TransmitReceive+0x26c>
 80097e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d114      	bne.n	8009812 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	330c      	adds	r3, #12
 80097f2:	7812      	ldrb	r2, [r2, #0]
 80097f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097fa:	1c5a      	adds	r2, r3, #1
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009804:	b29b      	uxth	r3, r3
 8009806:	3b01      	subs	r3, #1
 8009808:	b29a      	uxth	r2, r3
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800980e:	2300      	movs	r3, #0
 8009810:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	f003 0301 	and.w	r3, r3, #1
 800981c:	2b01      	cmp	r3, #1
 800981e:	d119      	bne.n	8009854 <HAL_SPI_TransmitReceive+0x2ae>
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009824:	b29b      	uxth	r3, r3
 8009826:	2b00      	cmp	r3, #0
 8009828:	d014      	beq.n	8009854 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	68da      	ldr	r2, [r3, #12]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009834:	b2d2      	uxtb	r2, r2
 8009836:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800983c:	1c5a      	adds	r2, r3, #1
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009846:	b29b      	uxth	r3, r3
 8009848:	3b01      	subs	r3, #1
 800984a:	b29a      	uxth	r2, r3
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009850:	2301      	movs	r3, #1
 8009852:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009854:	f7fd fa62 	bl	8006d1c <HAL_GetTick>
 8009858:	4602      	mov	r2, r0
 800985a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985c:	1ad3      	subs	r3, r2, r3
 800985e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009860:	429a      	cmp	r2, r3
 8009862:	d803      	bhi.n	800986c <HAL_SPI_TransmitReceive+0x2c6>
 8009864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800986a:	d102      	bne.n	8009872 <HAL_SPI_TransmitReceive+0x2cc>
 800986c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986e:	2b00      	cmp	r3, #0
 8009870:	d103      	bne.n	800987a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009872:	2303      	movs	r3, #3
 8009874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009878:	e029      	b.n	80098ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800987e:	b29b      	uxth	r3, r3
 8009880:	2b00      	cmp	r3, #0
 8009882:	d1a2      	bne.n	80097ca <HAL_SPI_TransmitReceive+0x224>
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009888:	b29b      	uxth	r3, r3
 800988a:	2b00      	cmp	r3, #0
 800988c:	d19d      	bne.n	80097ca <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800988e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009890:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f000 f8b2 	bl	80099fc <SPI_EndRxTxTransaction>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d006      	beq.n	80098ac <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2220      	movs	r2, #32
 80098a8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80098aa:	e010      	b.n	80098ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d10b      	bne.n	80098cc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80098b4:	2300      	movs	r3, #0
 80098b6:	617b      	str	r3, [r7, #20]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	617b      	str	r3, [r7, #20]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	617b      	str	r3, [r7, #20]
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	e000      	b.n	80098ce <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80098cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2201      	movs	r2, #1
 80098d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2200      	movs	r2, #0
 80098da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80098de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3730      	adds	r7, #48	; 0x30
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
	...

080098ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b088      	sub	sp, #32
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	603b      	str	r3, [r7, #0]
 80098f8:	4613      	mov	r3, r2
 80098fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80098fc:	f7fd fa0e 	bl	8006d1c <HAL_GetTick>
 8009900:	4602      	mov	r2, r0
 8009902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009904:	1a9b      	subs	r3, r3, r2
 8009906:	683a      	ldr	r2, [r7, #0]
 8009908:	4413      	add	r3, r2
 800990a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800990c:	f7fd fa06 	bl	8006d1c <HAL_GetTick>
 8009910:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009912:	4b39      	ldr	r3, [pc, #228]	; (80099f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	015b      	lsls	r3, r3, #5
 8009918:	0d1b      	lsrs	r3, r3, #20
 800991a:	69fa      	ldr	r2, [r7, #28]
 800991c:	fb02 f303 	mul.w	r3, r2, r3
 8009920:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009922:	e054      	b.n	80099ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800992a:	d050      	beq.n	80099ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800992c:	f7fd f9f6 	bl	8006d1c <HAL_GetTick>
 8009930:	4602      	mov	r2, r0
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	1ad3      	subs	r3, r2, r3
 8009936:	69fa      	ldr	r2, [r7, #28]
 8009938:	429a      	cmp	r2, r3
 800993a:	d902      	bls.n	8009942 <SPI_WaitFlagStateUntilTimeout+0x56>
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d13d      	bne.n	80099be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	685a      	ldr	r2, [r3, #4]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009950:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800995a:	d111      	bne.n	8009980 <SPI_WaitFlagStateUntilTimeout+0x94>
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009964:	d004      	beq.n	8009970 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800996e:	d107      	bne.n	8009980 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800997e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009988:	d10f      	bne.n	80099aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009998:	601a      	str	r2, [r3, #0]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80099a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2201      	movs	r2, #1
 80099ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80099ba:	2303      	movs	r3, #3
 80099bc:	e017      	b.n	80099ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d101      	bne.n	80099c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80099c4:	2300      	movs	r3, #0
 80099c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	3b01      	subs	r3, #1
 80099cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	689a      	ldr	r2, [r3, #8]
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	4013      	ands	r3, r2
 80099d8:	68ba      	ldr	r2, [r7, #8]
 80099da:	429a      	cmp	r2, r3
 80099dc:	bf0c      	ite	eq
 80099de:	2301      	moveq	r3, #1
 80099e0:	2300      	movne	r3, #0
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	461a      	mov	r2, r3
 80099e6:	79fb      	ldrb	r3, [r7, #7]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d19b      	bne.n	8009924 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3720      	adds	r7, #32
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	20000040 	.word	0x20000040

080099fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b088      	sub	sp, #32
 8009a00:	af02      	add	r7, sp, #8
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	60b9      	str	r1, [r7, #8]
 8009a06:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009a08:	4b1b      	ldr	r3, [pc, #108]	; (8009a78 <SPI_EndRxTxTransaction+0x7c>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a1b      	ldr	r2, [pc, #108]	; (8009a7c <SPI_EndRxTxTransaction+0x80>)
 8009a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a12:	0d5b      	lsrs	r3, r3, #21
 8009a14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009a18:	fb02 f303 	mul.w	r3, r2, r3
 8009a1c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a26:	d112      	bne.n	8009a4e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	2180      	movs	r1, #128	; 0x80
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	f7ff ff5a 	bl	80098ec <SPI_WaitFlagStateUntilTimeout>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d016      	beq.n	8009a6c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a42:	f043 0220 	orr.w	r2, r3, #32
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009a4a:	2303      	movs	r3, #3
 8009a4c:	e00f      	b.n	8009a6e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d00a      	beq.n	8009a6a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	3b01      	subs	r3, #1
 8009a58:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a64:	2b80      	cmp	r3, #128	; 0x80
 8009a66:	d0f2      	beq.n	8009a4e <SPI_EndRxTxTransaction+0x52>
 8009a68:	e000      	b.n	8009a6c <SPI_EndRxTxTransaction+0x70>
        break;
 8009a6a:	bf00      	nop
  }

  return HAL_OK;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3718      	adds	r7, #24
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	20000040 	.word	0x20000040
 8009a7c:	165e9f81 	.word	0x165e9f81

08009a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d101      	bne.n	8009a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e041      	b.n	8009b16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d106      	bne.n	8009aac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f7fc ffa8 	bl	80069fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2202      	movs	r2, #2
 8009ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	3304      	adds	r3, #4
 8009abc:	4619      	mov	r1, r3
 8009abe:	4610      	mov	r0, r2
 8009ac0:	f000 fc7c 	bl	800a3bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b14:	2300      	movs	r3, #0
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3708      	adds	r7, #8
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
	...

08009b20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d001      	beq.n	8009b38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b34:	2301      	movs	r3, #1
 8009b36:	e04e      	b.n	8009bd6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2202      	movs	r2, #2
 8009b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68da      	ldr	r2, [r3, #12]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f042 0201 	orr.w	r2, r2, #1
 8009b4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a23      	ldr	r2, [pc, #140]	; (8009be4 <HAL_TIM_Base_Start_IT+0xc4>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d022      	beq.n	8009ba0 <HAL_TIM_Base_Start_IT+0x80>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b62:	d01d      	beq.n	8009ba0 <HAL_TIM_Base_Start_IT+0x80>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a1f      	ldr	r2, [pc, #124]	; (8009be8 <HAL_TIM_Base_Start_IT+0xc8>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d018      	beq.n	8009ba0 <HAL_TIM_Base_Start_IT+0x80>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a1e      	ldr	r2, [pc, #120]	; (8009bec <HAL_TIM_Base_Start_IT+0xcc>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d013      	beq.n	8009ba0 <HAL_TIM_Base_Start_IT+0x80>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a1c      	ldr	r2, [pc, #112]	; (8009bf0 <HAL_TIM_Base_Start_IT+0xd0>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d00e      	beq.n	8009ba0 <HAL_TIM_Base_Start_IT+0x80>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a1b      	ldr	r2, [pc, #108]	; (8009bf4 <HAL_TIM_Base_Start_IT+0xd4>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d009      	beq.n	8009ba0 <HAL_TIM_Base_Start_IT+0x80>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a19      	ldr	r2, [pc, #100]	; (8009bf8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d004      	beq.n	8009ba0 <HAL_TIM_Base_Start_IT+0x80>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a18      	ldr	r2, [pc, #96]	; (8009bfc <HAL_TIM_Base_Start_IT+0xdc>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d111      	bne.n	8009bc4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	f003 0307 	and.w	r3, r3, #7
 8009baa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2b06      	cmp	r3, #6
 8009bb0:	d010      	beq.n	8009bd4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f042 0201 	orr.w	r2, r2, #1
 8009bc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bc2:	e007      	b.n	8009bd4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f042 0201 	orr.w	r2, r2, #1
 8009bd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009bd4:	2300      	movs	r3, #0
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3714      	adds	r7, #20
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr
 8009be2:	bf00      	nop
 8009be4:	40010000 	.word	0x40010000
 8009be8:	40000400 	.word	0x40000400
 8009bec:	40000800 	.word	0x40000800
 8009bf0:	40000c00 	.word	0x40000c00
 8009bf4:	40010400 	.word	0x40010400
 8009bf8:	40014000 	.word	0x40014000
 8009bfc:	40001800 	.word	0x40001800

08009c00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d101      	bne.n	8009c12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e041      	b.n	8009c96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d106      	bne.n	8009c2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f839 	bl	8009c9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2202      	movs	r2, #2
 8009c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	3304      	adds	r3, #4
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	4610      	mov	r0, r2
 8009c40:	f000 fbbc 	bl	800a3bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2201      	movs	r2, #1
 8009c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2201      	movs	r2, #1
 8009c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3708      	adds	r7, #8
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009c9e:	b480      	push	{r7}
 8009ca0:	b083      	sub	sp, #12
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009ca6:	bf00      	nop
 8009ca8:	370c      	adds	r7, #12
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
	...

08009cb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d109      	bne.n	8009cd8 <HAL_TIM_PWM_Start+0x24>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	bf14      	ite	ne
 8009cd0:	2301      	movne	r3, #1
 8009cd2:	2300      	moveq	r3, #0
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	e022      	b.n	8009d1e <HAL_TIM_PWM_Start+0x6a>
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	2b04      	cmp	r3, #4
 8009cdc:	d109      	bne.n	8009cf2 <HAL_TIM_PWM_Start+0x3e>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	bf14      	ite	ne
 8009cea:	2301      	movne	r3, #1
 8009cec:	2300      	moveq	r3, #0
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	e015      	b.n	8009d1e <HAL_TIM_PWM_Start+0x6a>
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	2b08      	cmp	r3, #8
 8009cf6:	d109      	bne.n	8009d0c <HAL_TIM_PWM_Start+0x58>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	bf14      	ite	ne
 8009d04:	2301      	movne	r3, #1
 8009d06:	2300      	moveq	r3, #0
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	e008      	b.n	8009d1e <HAL_TIM_PWM_Start+0x6a>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	bf14      	ite	ne
 8009d18:	2301      	movne	r3, #1
 8009d1a:	2300      	moveq	r3, #0
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d001      	beq.n	8009d26 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	e07c      	b.n	8009e20 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d104      	bne.n	8009d36 <HAL_TIM_PWM_Start+0x82>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2202      	movs	r2, #2
 8009d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d34:	e013      	b.n	8009d5e <HAL_TIM_PWM_Start+0xaa>
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	2b04      	cmp	r3, #4
 8009d3a:	d104      	bne.n	8009d46 <HAL_TIM_PWM_Start+0x92>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2202      	movs	r2, #2
 8009d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d44:	e00b      	b.n	8009d5e <HAL_TIM_PWM_Start+0xaa>
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	2b08      	cmp	r3, #8
 8009d4a:	d104      	bne.n	8009d56 <HAL_TIM_PWM_Start+0xa2>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2202      	movs	r2, #2
 8009d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d54:	e003      	b.n	8009d5e <HAL_TIM_PWM_Start+0xaa>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2202      	movs	r2, #2
 8009d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2201      	movs	r2, #1
 8009d64:	6839      	ldr	r1, [r7, #0]
 8009d66:	4618      	mov	r0, r3
 8009d68:	f000 fe12 	bl	800a990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a2d      	ldr	r2, [pc, #180]	; (8009e28 <HAL_TIM_PWM_Start+0x174>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d004      	beq.n	8009d80 <HAL_TIM_PWM_Start+0xcc>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a2c      	ldr	r2, [pc, #176]	; (8009e2c <HAL_TIM_PWM_Start+0x178>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d101      	bne.n	8009d84 <HAL_TIM_PWM_Start+0xd0>
 8009d80:	2301      	movs	r3, #1
 8009d82:	e000      	b.n	8009d86 <HAL_TIM_PWM_Start+0xd2>
 8009d84:	2300      	movs	r3, #0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d007      	beq.n	8009d9a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a22      	ldr	r2, [pc, #136]	; (8009e28 <HAL_TIM_PWM_Start+0x174>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d022      	beq.n	8009dea <HAL_TIM_PWM_Start+0x136>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dac:	d01d      	beq.n	8009dea <HAL_TIM_PWM_Start+0x136>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a1f      	ldr	r2, [pc, #124]	; (8009e30 <HAL_TIM_PWM_Start+0x17c>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d018      	beq.n	8009dea <HAL_TIM_PWM_Start+0x136>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a1d      	ldr	r2, [pc, #116]	; (8009e34 <HAL_TIM_PWM_Start+0x180>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d013      	beq.n	8009dea <HAL_TIM_PWM_Start+0x136>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a1c      	ldr	r2, [pc, #112]	; (8009e38 <HAL_TIM_PWM_Start+0x184>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d00e      	beq.n	8009dea <HAL_TIM_PWM_Start+0x136>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a16      	ldr	r2, [pc, #88]	; (8009e2c <HAL_TIM_PWM_Start+0x178>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d009      	beq.n	8009dea <HAL_TIM_PWM_Start+0x136>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a18      	ldr	r2, [pc, #96]	; (8009e3c <HAL_TIM_PWM_Start+0x188>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d004      	beq.n	8009dea <HAL_TIM_PWM_Start+0x136>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a16      	ldr	r2, [pc, #88]	; (8009e40 <HAL_TIM_PWM_Start+0x18c>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d111      	bne.n	8009e0e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	f003 0307 	and.w	r3, r3, #7
 8009df4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2b06      	cmp	r3, #6
 8009dfa:	d010      	beq.n	8009e1e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f042 0201 	orr.w	r2, r2, #1
 8009e0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e0c:	e007      	b.n	8009e1e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f042 0201 	orr.w	r2, r2, #1
 8009e1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3710      	adds	r7, #16
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}
 8009e28:	40010000 	.word	0x40010000
 8009e2c:	40010400 	.word	0x40010400
 8009e30:	40000400 	.word	0x40000400
 8009e34:	40000800 	.word	0x40000800
 8009e38:	40000c00 	.word	0x40000c00
 8009e3c:	40014000 	.word	0x40014000
 8009e40:	40001800 	.word	0x40001800

08009e44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	f003 0302 	and.w	r3, r3, #2
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	d122      	bne.n	8009ea0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	f003 0302 	and.w	r3, r3, #2
 8009e64:	2b02      	cmp	r3, #2
 8009e66:	d11b      	bne.n	8009ea0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f06f 0202 	mvn.w	r2, #2
 8009e70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2201      	movs	r2, #1
 8009e76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	699b      	ldr	r3, [r3, #24]
 8009e7e:	f003 0303 	and.w	r3, r3, #3
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d003      	beq.n	8009e8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fa7a 	bl	800a380 <HAL_TIM_IC_CaptureCallback>
 8009e8c:	e005      	b.n	8009e9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 fa6c 	bl	800a36c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 fa7d 	bl	800a394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	f003 0304 	and.w	r3, r3, #4
 8009eaa:	2b04      	cmp	r3, #4
 8009eac:	d122      	bne.n	8009ef4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	f003 0304 	and.w	r3, r3, #4
 8009eb8:	2b04      	cmp	r3, #4
 8009eba:	d11b      	bne.n	8009ef4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f06f 0204 	mvn.w	r2, #4
 8009ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2202      	movs	r2, #2
 8009eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	699b      	ldr	r3, [r3, #24]
 8009ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d003      	beq.n	8009ee2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 fa50 	bl	800a380 <HAL_TIM_IC_CaptureCallback>
 8009ee0:	e005      	b.n	8009eee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 fa42 	bl	800a36c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 fa53 	bl	800a394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	f003 0308 	and.w	r3, r3, #8
 8009efe:	2b08      	cmp	r3, #8
 8009f00:	d122      	bne.n	8009f48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	f003 0308 	and.w	r3, r3, #8
 8009f0c:	2b08      	cmp	r3, #8
 8009f0e:	d11b      	bne.n	8009f48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f06f 0208 	mvn.w	r2, #8
 8009f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2204      	movs	r2, #4
 8009f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	69db      	ldr	r3, [r3, #28]
 8009f26:	f003 0303 	and.w	r3, r3, #3
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d003      	beq.n	8009f36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 fa26 	bl	800a380 <HAL_TIM_IC_CaptureCallback>
 8009f34:	e005      	b.n	8009f42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 fa18 	bl	800a36c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 fa29 	bl	800a394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	691b      	ldr	r3, [r3, #16]
 8009f4e:	f003 0310 	and.w	r3, r3, #16
 8009f52:	2b10      	cmp	r3, #16
 8009f54:	d122      	bne.n	8009f9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	f003 0310 	and.w	r3, r3, #16
 8009f60:	2b10      	cmp	r3, #16
 8009f62:	d11b      	bne.n	8009f9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f06f 0210 	mvn.w	r2, #16
 8009f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2208      	movs	r2, #8
 8009f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	69db      	ldr	r3, [r3, #28]
 8009f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d003      	beq.n	8009f8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 f9fc 	bl	800a380 <HAL_TIM_IC_CaptureCallback>
 8009f88:	e005      	b.n	8009f96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 f9ee 	bl	800a36c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 f9ff 	bl	800a394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	f003 0301 	and.w	r3, r3, #1
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d10e      	bne.n	8009fc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	f003 0301 	and.w	r3, r3, #1
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d107      	bne.n	8009fc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f06f 0201 	mvn.w	r2, #1
 8009fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 f9c8 	bl	800a358 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fd2:	2b80      	cmp	r3, #128	; 0x80
 8009fd4:	d10e      	bne.n	8009ff4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fe0:	2b80      	cmp	r3, #128	; 0x80
 8009fe2:	d107      	bne.n	8009ff4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 fdcc 	bl	800ab8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	691b      	ldr	r3, [r3, #16]
 8009ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ffe:	2b40      	cmp	r3, #64	; 0x40
 800a000:	d10e      	bne.n	800a020 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a00c:	2b40      	cmp	r3, #64	; 0x40
 800a00e:	d107      	bne.n	800a020 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 f9c4 	bl	800a3a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	f003 0320 	and.w	r3, r3, #32
 800a02a:	2b20      	cmp	r3, #32
 800a02c:	d10e      	bne.n	800a04c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	68db      	ldr	r3, [r3, #12]
 800a034:	f003 0320 	and.w	r3, r3, #32
 800a038:	2b20      	cmp	r3, #32
 800a03a:	d107      	bne.n	800a04c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f06f 0220 	mvn.w	r2, #32
 800a044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 fd96 	bl	800ab78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a04c:	bf00      	nop
 800a04e:	3708      	adds	r7, #8
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a066:	2b01      	cmp	r3, #1
 800a068:	d101      	bne.n	800a06e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a06a:	2302      	movs	r3, #2
 800a06c:	e0ac      	b.n	800a1c8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2201      	movs	r2, #1
 800a072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2b0c      	cmp	r3, #12
 800a07a:	f200 809f 	bhi.w	800a1bc <HAL_TIM_PWM_ConfigChannel+0x168>
 800a07e:	a201      	add	r2, pc, #4	; (adr r2, 800a084 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a084:	0800a0b9 	.word	0x0800a0b9
 800a088:	0800a1bd 	.word	0x0800a1bd
 800a08c:	0800a1bd 	.word	0x0800a1bd
 800a090:	0800a1bd 	.word	0x0800a1bd
 800a094:	0800a0f9 	.word	0x0800a0f9
 800a098:	0800a1bd 	.word	0x0800a1bd
 800a09c:	0800a1bd 	.word	0x0800a1bd
 800a0a0:	0800a1bd 	.word	0x0800a1bd
 800a0a4:	0800a13b 	.word	0x0800a13b
 800a0a8:	0800a1bd 	.word	0x0800a1bd
 800a0ac:	0800a1bd 	.word	0x0800a1bd
 800a0b0:	0800a1bd 	.word	0x0800a1bd
 800a0b4:	0800a17b 	.word	0x0800a17b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	68b9      	ldr	r1, [r7, #8]
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f000 fa1c 	bl	800a4fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	699a      	ldr	r2, [r3, #24]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f042 0208 	orr.w	r2, r2, #8
 800a0d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	699a      	ldr	r2, [r3, #24]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f022 0204 	bic.w	r2, r2, #4
 800a0e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	6999      	ldr	r1, [r3, #24]
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	691a      	ldr	r2, [r3, #16]
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	430a      	orrs	r2, r1
 800a0f4:	619a      	str	r2, [r3, #24]
      break;
 800a0f6:	e062      	b.n	800a1be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	68b9      	ldr	r1, [r7, #8]
 800a0fe:	4618      	mov	r0, r3
 800a100:	f000 fa6c 	bl	800a5dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	699a      	ldr	r2, [r3, #24]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	699a      	ldr	r2, [r3, #24]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	6999      	ldr	r1, [r3, #24]
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	021a      	lsls	r2, r3, #8
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	430a      	orrs	r2, r1
 800a136:	619a      	str	r2, [r3, #24]
      break;
 800a138:	e041      	b.n	800a1be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	68b9      	ldr	r1, [r7, #8]
 800a140:	4618      	mov	r0, r3
 800a142:	f000 fac1 	bl	800a6c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	69da      	ldr	r2, [r3, #28]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f042 0208 	orr.w	r2, r2, #8
 800a154:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	69da      	ldr	r2, [r3, #28]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f022 0204 	bic.w	r2, r2, #4
 800a164:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	69d9      	ldr	r1, [r3, #28]
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	691a      	ldr	r2, [r3, #16]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	430a      	orrs	r2, r1
 800a176:	61da      	str	r2, [r3, #28]
      break;
 800a178:	e021      	b.n	800a1be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	68b9      	ldr	r1, [r7, #8]
 800a180:	4618      	mov	r0, r3
 800a182:	f000 fb15 	bl	800a7b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	69da      	ldr	r2, [r3, #28]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	69da      	ldr	r2, [r3, #28]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	69d9      	ldr	r1, [r3, #28]
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	691b      	ldr	r3, [r3, #16]
 800a1b0:	021a      	lsls	r2, r3, #8
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	430a      	orrs	r2, r1
 800a1b8:	61da      	str	r2, [r3, #28]
      break;
 800a1ba:	e000      	b.n	800a1be <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800a1bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d101      	bne.n	800a1e8 <HAL_TIM_ConfigClockSource+0x18>
 800a1e4:	2302      	movs	r3, #2
 800a1e6:	e0b3      	b.n	800a350 <HAL_TIM_ConfigClockSource+0x180>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2202      	movs	r2, #2
 800a1f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a206:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a20e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a220:	d03e      	beq.n	800a2a0 <HAL_TIM_ConfigClockSource+0xd0>
 800a222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a226:	f200 8087 	bhi.w	800a338 <HAL_TIM_ConfigClockSource+0x168>
 800a22a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a22e:	f000 8085 	beq.w	800a33c <HAL_TIM_ConfigClockSource+0x16c>
 800a232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a236:	d87f      	bhi.n	800a338 <HAL_TIM_ConfigClockSource+0x168>
 800a238:	2b70      	cmp	r3, #112	; 0x70
 800a23a:	d01a      	beq.n	800a272 <HAL_TIM_ConfigClockSource+0xa2>
 800a23c:	2b70      	cmp	r3, #112	; 0x70
 800a23e:	d87b      	bhi.n	800a338 <HAL_TIM_ConfigClockSource+0x168>
 800a240:	2b60      	cmp	r3, #96	; 0x60
 800a242:	d050      	beq.n	800a2e6 <HAL_TIM_ConfigClockSource+0x116>
 800a244:	2b60      	cmp	r3, #96	; 0x60
 800a246:	d877      	bhi.n	800a338 <HAL_TIM_ConfigClockSource+0x168>
 800a248:	2b50      	cmp	r3, #80	; 0x50
 800a24a:	d03c      	beq.n	800a2c6 <HAL_TIM_ConfigClockSource+0xf6>
 800a24c:	2b50      	cmp	r3, #80	; 0x50
 800a24e:	d873      	bhi.n	800a338 <HAL_TIM_ConfigClockSource+0x168>
 800a250:	2b40      	cmp	r3, #64	; 0x40
 800a252:	d058      	beq.n	800a306 <HAL_TIM_ConfigClockSource+0x136>
 800a254:	2b40      	cmp	r3, #64	; 0x40
 800a256:	d86f      	bhi.n	800a338 <HAL_TIM_ConfigClockSource+0x168>
 800a258:	2b30      	cmp	r3, #48	; 0x30
 800a25a:	d064      	beq.n	800a326 <HAL_TIM_ConfigClockSource+0x156>
 800a25c:	2b30      	cmp	r3, #48	; 0x30
 800a25e:	d86b      	bhi.n	800a338 <HAL_TIM_ConfigClockSource+0x168>
 800a260:	2b20      	cmp	r3, #32
 800a262:	d060      	beq.n	800a326 <HAL_TIM_ConfigClockSource+0x156>
 800a264:	2b20      	cmp	r3, #32
 800a266:	d867      	bhi.n	800a338 <HAL_TIM_ConfigClockSource+0x168>
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d05c      	beq.n	800a326 <HAL_TIM_ConfigClockSource+0x156>
 800a26c:	2b10      	cmp	r3, #16
 800a26e:	d05a      	beq.n	800a326 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a270:	e062      	b.n	800a338 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6818      	ldr	r0, [r3, #0]
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	6899      	ldr	r1, [r3, #8]
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	685a      	ldr	r2, [r3, #4]
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	f000 fb65 	bl	800a950 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a294:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	609a      	str	r2, [r3, #8]
      break;
 800a29e:	e04e      	b.n	800a33e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6818      	ldr	r0, [r3, #0]
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	6899      	ldr	r1, [r3, #8]
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	685a      	ldr	r2, [r3, #4]
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	f000 fb4e 	bl	800a950 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	689a      	ldr	r2, [r3, #8]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a2c2:	609a      	str	r2, [r3, #8]
      break;
 800a2c4:	e03b      	b.n	800a33e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6818      	ldr	r0, [r3, #0]
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	6859      	ldr	r1, [r3, #4]
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	f000 fac2 	bl	800a85c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2150      	movs	r1, #80	; 0x50
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f000 fb1b 	bl	800a91a <TIM_ITRx_SetConfig>
      break;
 800a2e4:	e02b      	b.n	800a33e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6818      	ldr	r0, [r3, #0]
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	6859      	ldr	r1, [r3, #4]
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	f000 fae1 	bl	800a8ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2160      	movs	r1, #96	; 0x60
 800a2fe:	4618      	mov	r0, r3
 800a300:	f000 fb0b 	bl	800a91a <TIM_ITRx_SetConfig>
      break;
 800a304:	e01b      	b.n	800a33e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6818      	ldr	r0, [r3, #0]
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	6859      	ldr	r1, [r3, #4]
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	461a      	mov	r2, r3
 800a314:	f000 faa2 	bl	800a85c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	2140      	movs	r1, #64	; 0x40
 800a31e:	4618      	mov	r0, r3
 800a320:	f000 fafb 	bl	800a91a <TIM_ITRx_SetConfig>
      break;
 800a324:	e00b      	b.n	800a33e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4619      	mov	r1, r3
 800a330:	4610      	mov	r0, r2
 800a332:	f000 faf2 	bl	800a91a <TIM_ITRx_SetConfig>
        break;
 800a336:	e002      	b.n	800a33e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a338:	bf00      	nop
 800a33a:	e000      	b.n	800a33e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a33c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2201      	movs	r2, #1
 800a342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a34e:	2300      	movs	r3, #0
}
 800a350:	4618      	mov	r0, r3
 800a352:	3710      	adds	r7, #16
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a360:	bf00      	nop
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a374:	bf00      	nop
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a388:	bf00      	nop
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a39c:	bf00      	nop
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a3b0:	bf00      	nop
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b085      	sub	sp, #20
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4a40      	ldr	r2, [pc, #256]	; (800a4d0 <TIM_Base_SetConfig+0x114>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d013      	beq.n	800a3fc <TIM_Base_SetConfig+0x40>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3da:	d00f      	beq.n	800a3fc <TIM_Base_SetConfig+0x40>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	4a3d      	ldr	r2, [pc, #244]	; (800a4d4 <TIM_Base_SetConfig+0x118>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d00b      	beq.n	800a3fc <TIM_Base_SetConfig+0x40>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	4a3c      	ldr	r2, [pc, #240]	; (800a4d8 <TIM_Base_SetConfig+0x11c>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d007      	beq.n	800a3fc <TIM_Base_SetConfig+0x40>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4a3b      	ldr	r2, [pc, #236]	; (800a4dc <TIM_Base_SetConfig+0x120>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d003      	beq.n	800a3fc <TIM_Base_SetConfig+0x40>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	4a3a      	ldr	r2, [pc, #232]	; (800a4e0 <TIM_Base_SetConfig+0x124>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d108      	bne.n	800a40e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	68fa      	ldr	r2, [r7, #12]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4a2f      	ldr	r2, [pc, #188]	; (800a4d0 <TIM_Base_SetConfig+0x114>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d02b      	beq.n	800a46e <TIM_Base_SetConfig+0xb2>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a41c:	d027      	beq.n	800a46e <TIM_Base_SetConfig+0xb2>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4a2c      	ldr	r2, [pc, #176]	; (800a4d4 <TIM_Base_SetConfig+0x118>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d023      	beq.n	800a46e <TIM_Base_SetConfig+0xb2>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a2b      	ldr	r2, [pc, #172]	; (800a4d8 <TIM_Base_SetConfig+0x11c>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d01f      	beq.n	800a46e <TIM_Base_SetConfig+0xb2>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a2a      	ldr	r2, [pc, #168]	; (800a4dc <TIM_Base_SetConfig+0x120>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d01b      	beq.n	800a46e <TIM_Base_SetConfig+0xb2>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a29      	ldr	r2, [pc, #164]	; (800a4e0 <TIM_Base_SetConfig+0x124>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d017      	beq.n	800a46e <TIM_Base_SetConfig+0xb2>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4a28      	ldr	r2, [pc, #160]	; (800a4e4 <TIM_Base_SetConfig+0x128>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d013      	beq.n	800a46e <TIM_Base_SetConfig+0xb2>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	4a27      	ldr	r2, [pc, #156]	; (800a4e8 <TIM_Base_SetConfig+0x12c>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d00f      	beq.n	800a46e <TIM_Base_SetConfig+0xb2>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	4a26      	ldr	r2, [pc, #152]	; (800a4ec <TIM_Base_SetConfig+0x130>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d00b      	beq.n	800a46e <TIM_Base_SetConfig+0xb2>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	4a25      	ldr	r2, [pc, #148]	; (800a4f0 <TIM_Base_SetConfig+0x134>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d007      	beq.n	800a46e <TIM_Base_SetConfig+0xb2>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	4a24      	ldr	r2, [pc, #144]	; (800a4f4 <TIM_Base_SetConfig+0x138>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d003      	beq.n	800a46e <TIM_Base_SetConfig+0xb2>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	4a23      	ldr	r2, [pc, #140]	; (800a4f8 <TIM_Base_SetConfig+0x13c>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d108      	bne.n	800a480 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	68fa      	ldr	r2, [r7, #12]
 800a47c:	4313      	orrs	r3, r2
 800a47e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	695b      	ldr	r3, [r3, #20]
 800a48a:	4313      	orrs	r3, r2
 800a48c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	68fa      	ldr	r2, [r7, #12]
 800a492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	689a      	ldr	r2, [r3, #8]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4a0a      	ldr	r2, [pc, #40]	; (800a4d0 <TIM_Base_SetConfig+0x114>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d003      	beq.n	800a4b4 <TIM_Base_SetConfig+0xf8>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4a0c      	ldr	r2, [pc, #48]	; (800a4e0 <TIM_Base_SetConfig+0x124>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d103      	bne.n	800a4bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	691a      	ldr	r2, [r3, #16]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	615a      	str	r2, [r3, #20]
}
 800a4c2:	bf00      	nop
 800a4c4:	3714      	adds	r7, #20
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	40010000 	.word	0x40010000
 800a4d4:	40000400 	.word	0x40000400
 800a4d8:	40000800 	.word	0x40000800
 800a4dc:	40000c00 	.word	0x40000c00
 800a4e0:	40010400 	.word	0x40010400
 800a4e4:	40014000 	.word	0x40014000
 800a4e8:	40014400 	.word	0x40014400
 800a4ec:	40014800 	.word	0x40014800
 800a4f0:	40001800 	.word	0x40001800
 800a4f4:	40001c00 	.word	0x40001c00
 800a4f8:	40002000 	.word	0x40002000

0800a4fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b087      	sub	sp, #28
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6a1b      	ldr	r3, [r3, #32]
 800a50a:	f023 0201 	bic.w	r2, r3, #1
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6a1b      	ldr	r3, [r3, #32]
 800a516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	699b      	ldr	r3, [r3, #24]
 800a522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a52a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f023 0303 	bic.w	r3, r3, #3
 800a532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	68fa      	ldr	r2, [r7, #12]
 800a53a:	4313      	orrs	r3, r2
 800a53c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	f023 0302 	bic.w	r3, r3, #2
 800a544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	689b      	ldr	r3, [r3, #8]
 800a54a:	697a      	ldr	r2, [r7, #20]
 800a54c:	4313      	orrs	r3, r2
 800a54e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	4a20      	ldr	r2, [pc, #128]	; (800a5d4 <TIM_OC1_SetConfig+0xd8>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d003      	beq.n	800a560 <TIM_OC1_SetConfig+0x64>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	4a1f      	ldr	r2, [pc, #124]	; (800a5d8 <TIM_OC1_SetConfig+0xdc>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d10c      	bne.n	800a57a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	f023 0308 	bic.w	r3, r3, #8
 800a566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	68db      	ldr	r3, [r3, #12]
 800a56c:	697a      	ldr	r2, [r7, #20]
 800a56e:	4313      	orrs	r3, r2
 800a570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	f023 0304 	bic.w	r3, r3, #4
 800a578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	4a15      	ldr	r2, [pc, #84]	; (800a5d4 <TIM_OC1_SetConfig+0xd8>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d003      	beq.n	800a58a <TIM_OC1_SetConfig+0x8e>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	4a14      	ldr	r2, [pc, #80]	; (800a5d8 <TIM_OC1_SetConfig+0xdc>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d111      	bne.n	800a5ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	695b      	ldr	r3, [r3, #20]
 800a59e:	693a      	ldr	r2, [r7, #16]
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	699b      	ldr	r3, [r3, #24]
 800a5a8:	693a      	ldr	r2, [r7, #16]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	693a      	ldr	r2, [r7, #16]
 800a5b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	68fa      	ldr	r2, [r7, #12]
 800a5b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	685a      	ldr	r2, [r3, #4]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	697a      	ldr	r2, [r7, #20]
 800a5c6:	621a      	str	r2, [r3, #32]
}
 800a5c8:	bf00      	nop
 800a5ca:	371c      	adds	r7, #28
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr
 800a5d4:	40010000 	.word	0x40010000
 800a5d8:	40010400 	.word	0x40010400

0800a5dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b087      	sub	sp, #28
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6a1b      	ldr	r3, [r3, #32]
 800a5ea:	f023 0210 	bic.w	r2, r3, #16
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6a1b      	ldr	r3, [r3, #32]
 800a5f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	699b      	ldr	r3, [r3, #24]
 800a602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a60a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	021b      	lsls	r3, r3, #8
 800a61a:	68fa      	ldr	r2, [r7, #12]
 800a61c:	4313      	orrs	r3, r2
 800a61e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	f023 0320 	bic.w	r3, r3, #32
 800a626:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	011b      	lsls	r3, r3, #4
 800a62e:	697a      	ldr	r2, [r7, #20]
 800a630:	4313      	orrs	r3, r2
 800a632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	4a22      	ldr	r2, [pc, #136]	; (800a6c0 <TIM_OC2_SetConfig+0xe4>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d003      	beq.n	800a644 <TIM_OC2_SetConfig+0x68>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	4a21      	ldr	r2, [pc, #132]	; (800a6c4 <TIM_OC2_SetConfig+0xe8>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d10d      	bne.n	800a660 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a64a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	011b      	lsls	r3, r3, #4
 800a652:	697a      	ldr	r2, [r7, #20]
 800a654:	4313      	orrs	r3, r2
 800a656:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a65e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	4a17      	ldr	r2, [pc, #92]	; (800a6c0 <TIM_OC2_SetConfig+0xe4>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d003      	beq.n	800a670 <TIM_OC2_SetConfig+0x94>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	4a16      	ldr	r2, [pc, #88]	; (800a6c4 <TIM_OC2_SetConfig+0xe8>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d113      	bne.n	800a698 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a676:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a67e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	695b      	ldr	r3, [r3, #20]
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	693a      	ldr	r2, [r7, #16]
 800a688:	4313      	orrs	r3, r2
 800a68a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	699b      	ldr	r3, [r3, #24]
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	693a      	ldr	r2, [r7, #16]
 800a694:	4313      	orrs	r3, r2
 800a696:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	693a      	ldr	r2, [r7, #16]
 800a69c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	68fa      	ldr	r2, [r7, #12]
 800a6a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	685a      	ldr	r2, [r3, #4]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	697a      	ldr	r2, [r7, #20]
 800a6b0:	621a      	str	r2, [r3, #32]
}
 800a6b2:	bf00      	nop
 800a6b4:	371c      	adds	r7, #28
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr
 800a6be:	bf00      	nop
 800a6c0:	40010000 	.word	0x40010000
 800a6c4:	40010400 	.word	0x40010400

0800a6c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b087      	sub	sp, #28
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a1b      	ldr	r3, [r3, #32]
 800a6d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6a1b      	ldr	r3, [r3, #32]
 800a6e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	69db      	ldr	r3, [r3, #28]
 800a6ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f023 0303 	bic.w	r3, r3, #3
 800a6fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	68fa      	ldr	r2, [r7, #12]
 800a706:	4313      	orrs	r3, r2
 800a708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	021b      	lsls	r3, r3, #8
 800a718:	697a      	ldr	r2, [r7, #20]
 800a71a:	4313      	orrs	r3, r2
 800a71c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	4a21      	ldr	r2, [pc, #132]	; (800a7a8 <TIM_OC3_SetConfig+0xe0>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d003      	beq.n	800a72e <TIM_OC3_SetConfig+0x66>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	4a20      	ldr	r2, [pc, #128]	; (800a7ac <TIM_OC3_SetConfig+0xe4>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d10d      	bne.n	800a74a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a734:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	021b      	lsls	r3, r3, #8
 800a73c:	697a      	ldr	r2, [r7, #20]
 800a73e:	4313      	orrs	r3, r2
 800a740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	4a16      	ldr	r2, [pc, #88]	; (800a7a8 <TIM_OC3_SetConfig+0xe0>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d003      	beq.n	800a75a <TIM_OC3_SetConfig+0x92>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	4a15      	ldr	r2, [pc, #84]	; (800a7ac <TIM_OC3_SetConfig+0xe4>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d113      	bne.n	800a782 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	695b      	ldr	r3, [r3, #20]
 800a76e:	011b      	lsls	r3, r3, #4
 800a770:	693a      	ldr	r2, [r7, #16]
 800a772:	4313      	orrs	r3, r2
 800a774:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	699b      	ldr	r3, [r3, #24]
 800a77a:	011b      	lsls	r3, r3, #4
 800a77c:	693a      	ldr	r2, [r7, #16]
 800a77e:	4313      	orrs	r3, r2
 800a780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	693a      	ldr	r2, [r7, #16]
 800a786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	68fa      	ldr	r2, [r7, #12]
 800a78c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	685a      	ldr	r2, [r3, #4]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	697a      	ldr	r2, [r7, #20]
 800a79a:	621a      	str	r2, [r3, #32]
}
 800a79c:	bf00      	nop
 800a79e:	371c      	adds	r7, #28
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr
 800a7a8:	40010000 	.word	0x40010000
 800a7ac:	40010400 	.word	0x40010400

0800a7b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b087      	sub	sp, #28
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6a1b      	ldr	r3, [r3, #32]
 800a7be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a1b      	ldr	r3, [r3, #32]
 800a7ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	69db      	ldr	r3, [r3, #28]
 800a7d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	021b      	lsls	r3, r3, #8
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a7fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	031b      	lsls	r3, r3, #12
 800a802:	693a      	ldr	r2, [r7, #16]
 800a804:	4313      	orrs	r3, r2
 800a806:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4a12      	ldr	r2, [pc, #72]	; (800a854 <TIM_OC4_SetConfig+0xa4>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d003      	beq.n	800a818 <TIM_OC4_SetConfig+0x68>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4a11      	ldr	r2, [pc, #68]	; (800a858 <TIM_OC4_SetConfig+0xa8>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d109      	bne.n	800a82c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a81e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	695b      	ldr	r3, [r3, #20]
 800a824:	019b      	lsls	r3, r3, #6
 800a826:	697a      	ldr	r2, [r7, #20]
 800a828:	4313      	orrs	r3, r2
 800a82a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	697a      	ldr	r2, [r7, #20]
 800a830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	685a      	ldr	r2, [r3, #4]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	693a      	ldr	r2, [r7, #16]
 800a844:	621a      	str	r2, [r3, #32]
}
 800a846:	bf00      	nop
 800a848:	371c      	adds	r7, #28
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr
 800a852:	bf00      	nop
 800a854:	40010000 	.word	0x40010000
 800a858:	40010400 	.word	0x40010400

0800a85c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b087      	sub	sp, #28
 800a860:	af00      	add	r7, sp, #0
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	60b9      	str	r1, [r7, #8]
 800a866:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6a1b      	ldr	r3, [r3, #32]
 800a86c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	6a1b      	ldr	r3, [r3, #32]
 800a872:	f023 0201 	bic.w	r2, r3, #1
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	699b      	ldr	r3, [r3, #24]
 800a87e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	011b      	lsls	r3, r3, #4
 800a88c:	693a      	ldr	r2, [r7, #16]
 800a88e:	4313      	orrs	r3, r2
 800a890:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	f023 030a 	bic.w	r3, r3, #10
 800a898:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a89a:	697a      	ldr	r2, [r7, #20]
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	693a      	ldr	r2, [r7, #16]
 800a8a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	697a      	ldr	r2, [r7, #20]
 800a8ac:	621a      	str	r2, [r3, #32]
}
 800a8ae:	bf00      	nop
 800a8b0:	371c      	adds	r7, #28
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr

0800a8ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a8ba:	b480      	push	{r7}
 800a8bc:	b087      	sub	sp, #28
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	60f8      	str	r0, [r7, #12]
 800a8c2:	60b9      	str	r1, [r7, #8]
 800a8c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	6a1b      	ldr	r3, [r3, #32]
 800a8ca:	f023 0210 	bic.w	r2, r3, #16
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	699b      	ldr	r3, [r3, #24]
 800a8d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6a1b      	ldr	r3, [r3, #32]
 800a8dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a8e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	031b      	lsls	r3, r3, #12
 800a8ea:	697a      	ldr	r2, [r7, #20]
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a8f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	011b      	lsls	r3, r3, #4
 800a8fc:	693a      	ldr	r2, [r7, #16]
 800a8fe:	4313      	orrs	r3, r2
 800a900:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	697a      	ldr	r2, [r7, #20]
 800a906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	693a      	ldr	r2, [r7, #16]
 800a90c:	621a      	str	r2, [r3, #32]
}
 800a90e:	bf00      	nop
 800a910:	371c      	adds	r7, #28
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr

0800a91a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a91a:	b480      	push	{r7}
 800a91c:	b085      	sub	sp, #20
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
 800a922:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	689b      	ldr	r3, [r3, #8]
 800a928:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a930:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a932:	683a      	ldr	r2, [r7, #0]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	4313      	orrs	r3, r2
 800a938:	f043 0307 	orr.w	r3, r3, #7
 800a93c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	68fa      	ldr	r2, [r7, #12]
 800a942:	609a      	str	r2, [r3, #8]
}
 800a944:	bf00      	nop
 800a946:	3714      	adds	r7, #20
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a950:	b480      	push	{r7}
 800a952:	b087      	sub	sp, #28
 800a954:	af00      	add	r7, sp, #0
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	60b9      	str	r1, [r7, #8]
 800a95a:	607a      	str	r2, [r7, #4]
 800a95c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	689b      	ldr	r3, [r3, #8]
 800a962:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a96a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	021a      	lsls	r2, r3, #8
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	431a      	orrs	r2, r3
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	4313      	orrs	r3, r2
 800a978:	697a      	ldr	r2, [r7, #20]
 800a97a:	4313      	orrs	r3, r2
 800a97c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	697a      	ldr	r2, [r7, #20]
 800a982:	609a      	str	r2, [r3, #8]
}
 800a984:	bf00      	nop
 800a986:	371c      	adds	r7, #28
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a990:	b480      	push	{r7}
 800a992:	b087      	sub	sp, #28
 800a994:	af00      	add	r7, sp, #0
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	60b9      	str	r1, [r7, #8]
 800a99a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	f003 031f 	and.w	r3, r3, #31
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a9a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	6a1a      	ldr	r2, [r3, #32]
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	43db      	mvns	r3, r3
 800a9b2:	401a      	ands	r2, r3
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	6a1a      	ldr	r2, [r3, #32]
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	f003 031f 	and.w	r3, r3, #31
 800a9c2:	6879      	ldr	r1, [r7, #4]
 800a9c4:	fa01 f303 	lsl.w	r3, r1, r3
 800a9c8:	431a      	orrs	r2, r3
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	621a      	str	r2, [r3, #32]
}
 800a9ce:	bf00      	nop
 800a9d0:	371c      	adds	r7, #28
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr
	...

0800a9dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b085      	sub	sp, #20
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d101      	bne.n	800a9f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a9f0:	2302      	movs	r3, #2
 800a9f2:	e05a      	b.n	800aaaa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2202      	movs	r2, #2
 800aa00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	68fa      	ldr	r2, [r7, #12]
 800aa22:	4313      	orrs	r3, r2
 800aa24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	68fa      	ldr	r2, [r7, #12]
 800aa2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a21      	ldr	r2, [pc, #132]	; (800aab8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d022      	beq.n	800aa7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa40:	d01d      	beq.n	800aa7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a1d      	ldr	r2, [pc, #116]	; (800aabc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d018      	beq.n	800aa7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a1b      	ldr	r2, [pc, #108]	; (800aac0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d013      	beq.n	800aa7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a1a      	ldr	r2, [pc, #104]	; (800aac4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d00e      	beq.n	800aa7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a18      	ldr	r2, [pc, #96]	; (800aac8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d009      	beq.n	800aa7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a17      	ldr	r2, [pc, #92]	; (800aacc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d004      	beq.n	800aa7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a15      	ldr	r2, [pc, #84]	; (800aad0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d10c      	bne.n	800aa98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	68ba      	ldr	r2, [r7, #8]
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	68ba      	ldr	r2, [r7, #8]
 800aa96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aaa8:	2300      	movs	r3, #0
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3714      	adds	r7, #20
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr
 800aab6:	bf00      	nop
 800aab8:	40010000 	.word	0x40010000
 800aabc:	40000400 	.word	0x40000400
 800aac0:	40000800 	.word	0x40000800
 800aac4:	40000c00 	.word	0x40000c00
 800aac8:	40010400 	.word	0x40010400
 800aacc:	40014000 	.word	0x40014000
 800aad0:	40001800 	.word	0x40001800

0800aad4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b085      	sub	sp, #20
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aade:	2300      	movs	r3, #0
 800aae0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d101      	bne.n	800aaf0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aaec:	2302      	movs	r3, #2
 800aaee:	e03d      	b.n	800ab6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	4313      	orrs	r3, r2
 800ab04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	4313      	orrs	r3, r2
 800ab12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	695b      	ldr	r3, [r3, #20]
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	69db      	ldr	r3, [r3, #28]
 800ab56:	4313      	orrs	r3, r2
 800ab58:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab6a:	2300      	movs	r3, #0
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3714      	adds	r7, #20
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab80:	bf00      	nop
 800ab82:	370c      	adds	r7, #12
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b083      	sub	sp, #12
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab94:	bf00      	nop
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d101      	bne.n	800abb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800abae:	2301      	movs	r3, #1
 800abb0:	e03f      	b.n	800ac32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d106      	bne.n	800abcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f7fb ffa4 	bl	8006b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2224      	movs	r2, #36	; 0x24
 800abd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	68da      	ldr	r2, [r3, #12]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800abe2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 fc7b 	bl	800b4e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	691a      	ldr	r2, [r3, #16]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800abf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	695a      	ldr	r2, [r3, #20]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	68da      	ldr	r2, [r3, #12]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ac18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2220      	movs	r2, #32
 800ac24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2220      	movs	r2, #32
 800ac2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3708      	adds	r7, #8
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b08a      	sub	sp, #40	; 0x28
 800ac3e:	af02      	add	r7, sp, #8
 800ac40:	60f8      	str	r0, [r7, #12]
 800ac42:	60b9      	str	r1, [r7, #8]
 800ac44:	603b      	str	r3, [r7, #0]
 800ac46:	4613      	mov	r3, r2
 800ac48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	2b20      	cmp	r3, #32
 800ac58:	d17c      	bne.n	800ad54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d002      	beq.n	800ac66 <HAL_UART_Transmit+0x2c>
 800ac60:	88fb      	ldrh	r3, [r7, #6]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d101      	bne.n	800ac6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ac66:	2301      	movs	r3, #1
 800ac68:	e075      	b.n	800ad56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d101      	bne.n	800ac78 <HAL_UART_Transmit+0x3e>
 800ac74:	2302      	movs	r3, #2
 800ac76:	e06e      	b.n	800ad56 <HAL_UART_Transmit+0x11c>
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2200      	movs	r2, #0
 800ac84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2221      	movs	r2, #33	; 0x21
 800ac8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ac8e:	f7fc f845 	bl	8006d1c <HAL_GetTick>
 800ac92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	88fa      	ldrh	r2, [r7, #6]
 800ac98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	88fa      	ldrh	r2, [r7, #6]
 800ac9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aca8:	d108      	bne.n	800acbc <HAL_UART_Transmit+0x82>
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	691b      	ldr	r3, [r3, #16]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d104      	bne.n	800acbc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800acb2:	2300      	movs	r3, #0
 800acb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	61bb      	str	r3, [r7, #24]
 800acba:	e003      	b.n	800acc4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800acc0:	2300      	movs	r3, #0
 800acc2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2200      	movs	r2, #0
 800acc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800accc:	e02a      	b.n	800ad24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	9300      	str	r3, [sp, #0]
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	2200      	movs	r2, #0
 800acd6:	2180      	movs	r1, #128	; 0x80
 800acd8:	68f8      	ldr	r0, [r7, #12]
 800acda:	f000 fa3d 	bl	800b158 <UART_WaitOnFlagUntilTimeout>
 800acde:	4603      	mov	r3, r0
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d001      	beq.n	800ace8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ace4:	2303      	movs	r3, #3
 800ace6:	e036      	b.n	800ad56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d10b      	bne.n	800ad06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	881b      	ldrh	r3, [r3, #0]
 800acf2:	461a      	mov	r2, r3
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800acfc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	3302      	adds	r3, #2
 800ad02:	61bb      	str	r3, [r7, #24]
 800ad04:	e007      	b.n	800ad16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ad06:	69fb      	ldr	r3, [r7, #28]
 800ad08:	781a      	ldrb	r2, [r3, #0]
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ad10:	69fb      	ldr	r3, [r7, #28]
 800ad12:	3301      	adds	r3, #1
 800ad14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	3b01      	subs	r3, #1
 800ad1e:	b29a      	uxth	r2, r3
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d1cf      	bne.n	800acce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	9300      	str	r3, [sp, #0]
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	2200      	movs	r2, #0
 800ad36:	2140      	movs	r1, #64	; 0x40
 800ad38:	68f8      	ldr	r0, [r7, #12]
 800ad3a:	f000 fa0d 	bl	800b158 <UART_WaitOnFlagUntilTimeout>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d001      	beq.n	800ad48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ad44:	2303      	movs	r3, #3
 800ad46:	e006      	b.n	800ad56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2220      	movs	r2, #32
 800ad4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ad50:	2300      	movs	r3, #0
 800ad52:	e000      	b.n	800ad56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ad54:	2302      	movs	r3, #2
  }
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3720      	adds	r7, #32
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	b084      	sub	sp, #16
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	60f8      	str	r0, [r7, #12]
 800ad66:	60b9      	str	r1, [r7, #8]
 800ad68:	4613      	mov	r3, r2
 800ad6a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	2b20      	cmp	r3, #32
 800ad76:	d11d      	bne.n	800adb4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d002      	beq.n	800ad84 <HAL_UART_Receive_IT+0x26>
 800ad7e:	88fb      	ldrh	r3, [r7, #6]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d101      	bne.n	800ad88 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ad84:	2301      	movs	r3, #1
 800ad86:	e016      	b.n	800adb6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d101      	bne.n	800ad96 <HAL_UART_Receive_IT+0x38>
 800ad92:	2302      	movs	r3, #2
 800ad94:	e00f      	b.n	800adb6 <HAL_UART_Receive_IT+0x58>
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2201      	movs	r2, #1
 800ad9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2200      	movs	r2, #0
 800ada2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800ada4:	88fb      	ldrh	r3, [r7, #6]
 800ada6:	461a      	mov	r2, r3
 800ada8:	68b9      	ldr	r1, [r7, #8]
 800adaa:	68f8      	ldr	r0, [r7, #12]
 800adac:	f000 fa1e 	bl	800b1ec <UART_Start_Receive_IT>
 800adb0:	4603      	mov	r3, r0
 800adb2:	e000      	b.n	800adb6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800adb4:	2302      	movs	r3, #2
  }
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
	...

0800adc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b08a      	sub	sp, #40	; 0x28
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	695b      	ldr	r3, [r3, #20]
 800adde:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800ade0:	2300      	movs	r3, #0
 800ade2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800ade4:	2300      	movs	r3, #0
 800ade6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ade8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adea:	f003 030f 	and.w	r3, r3, #15
 800adee:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d10d      	bne.n	800ae12 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800adf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf8:	f003 0320 	and.w	r3, r3, #32
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d008      	beq.n	800ae12 <HAL_UART_IRQHandler+0x52>
 800ae00:	6a3b      	ldr	r3, [r7, #32]
 800ae02:	f003 0320 	and.w	r3, r3, #32
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d003      	beq.n	800ae12 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f000 fad1 	bl	800b3b2 <UART_Receive_IT>
      return;
 800ae10:	e17c      	b.n	800b10c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	f000 80b1 	beq.w	800af7c <HAL_UART_IRQHandler+0x1bc>
 800ae1a:	69fb      	ldr	r3, [r7, #28]
 800ae1c:	f003 0301 	and.w	r3, r3, #1
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d105      	bne.n	800ae30 <HAL_UART_IRQHandler+0x70>
 800ae24:	6a3b      	ldr	r3, [r7, #32]
 800ae26:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	f000 80a6 	beq.w	800af7c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ae30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae32:	f003 0301 	and.w	r3, r3, #1
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00a      	beq.n	800ae50 <HAL_UART_IRQHandler+0x90>
 800ae3a:	6a3b      	ldr	r3, [r7, #32]
 800ae3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d005      	beq.n	800ae50 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae48:	f043 0201 	orr.w	r2, r3, #1
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ae50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae52:	f003 0304 	and.w	r3, r3, #4
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00a      	beq.n	800ae70 <HAL_UART_IRQHandler+0xb0>
 800ae5a:	69fb      	ldr	r3, [r7, #28]
 800ae5c:	f003 0301 	and.w	r3, r3, #1
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d005      	beq.n	800ae70 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae68:	f043 0202 	orr.w	r2, r3, #2
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ae70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae72:	f003 0302 	and.w	r3, r3, #2
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d00a      	beq.n	800ae90 <HAL_UART_IRQHandler+0xd0>
 800ae7a:	69fb      	ldr	r3, [r7, #28]
 800ae7c:	f003 0301 	and.w	r3, r3, #1
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d005      	beq.n	800ae90 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae88:	f043 0204 	orr.w	r2, r3, #4
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800ae90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae92:	f003 0308 	and.w	r3, r3, #8
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d00f      	beq.n	800aeba <HAL_UART_IRQHandler+0xfa>
 800ae9a:	6a3b      	ldr	r3, [r7, #32]
 800ae9c:	f003 0320 	and.w	r3, r3, #32
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d104      	bne.n	800aeae <HAL_UART_IRQHandler+0xee>
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	f003 0301 	and.w	r3, r3, #1
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d005      	beq.n	800aeba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb2:	f043 0208 	orr.w	r2, r3, #8
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	f000 811f 	beq.w	800b102 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec6:	f003 0320 	and.w	r3, r3, #32
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d007      	beq.n	800aede <HAL_UART_IRQHandler+0x11e>
 800aece:	6a3b      	ldr	r3, [r7, #32]
 800aed0:	f003 0320 	and.w	r3, r3, #32
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d002      	beq.n	800aede <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 fa6a 	bl	800b3b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	695b      	ldr	r3, [r3, #20]
 800aee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aee8:	2b40      	cmp	r3, #64	; 0x40
 800aeea:	bf0c      	ite	eq
 800aeec:	2301      	moveq	r3, #1
 800aeee:	2300      	movne	r3, #0
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef8:	f003 0308 	and.w	r3, r3, #8
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d102      	bne.n	800af06 <HAL_UART_IRQHandler+0x146>
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d031      	beq.n	800af6a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 f9aa 	bl	800b260 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	695b      	ldr	r3, [r3, #20]
 800af12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af16:	2b40      	cmp	r3, #64	; 0x40
 800af18:	d123      	bne.n	800af62 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	695a      	ldr	r2, [r3, #20]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af28:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d013      	beq.n	800af5a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af36:	4a77      	ldr	r2, [pc, #476]	; (800b114 <HAL_UART_IRQHandler+0x354>)
 800af38:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af3e:	4618      	mov	r0, r3
 800af40:	f7fd fb05 	bl	800854e <HAL_DMA_Abort_IT>
 800af44:	4603      	mov	r3, r0
 800af46:	2b00      	cmp	r3, #0
 800af48:	d016      	beq.n	800af78 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800af54:	4610      	mov	r0, r2
 800af56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af58:	e00e      	b.n	800af78 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 f8e6 	bl	800b12c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af60:	e00a      	b.n	800af78 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 f8e2 	bl	800b12c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af68:	e006      	b.n	800af78 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 f8de 	bl	800b12c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2200      	movs	r2, #0
 800af74:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800af76:	e0c4      	b.n	800b102 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af78:	bf00      	nop
    return;
 800af7a:	e0c2      	b.n	800b102 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af80:	2b01      	cmp	r3, #1
 800af82:	f040 80a2 	bne.w	800b0ca <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800af86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af88:	f003 0310 	and.w	r3, r3, #16
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f000 809c 	beq.w	800b0ca <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800af92:	6a3b      	ldr	r3, [r7, #32]
 800af94:	f003 0310 	and.w	r3, r3, #16
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f000 8096 	beq.w	800b0ca <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800af9e:	2300      	movs	r3, #0
 800afa0:	60fb      	str	r3, [r7, #12]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	60fb      	str	r3, [r7, #12]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	60fb      	str	r3, [r7, #12]
 800afb2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	695b      	ldr	r3, [r3, #20]
 800afba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afbe:	2b40      	cmp	r3, #64	; 0x40
 800afc0:	d14f      	bne.n	800b062 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800afcc:	8a3b      	ldrh	r3, [r7, #16]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	f000 8099 	beq.w	800b106 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800afd8:	8a3a      	ldrh	r2, [r7, #16]
 800afda:	429a      	cmp	r2, r3
 800afdc:	f080 8093 	bcs.w	800b106 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	8a3a      	ldrh	r2, [r7, #16]
 800afe4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afea:	69db      	ldr	r3, [r3, #28]
 800afec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aff0:	d02b      	beq.n	800b04a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	68da      	ldr	r2, [r3, #12]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b000:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	695a      	ldr	r2, [r3, #20]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f022 0201 	bic.w	r2, r2, #1
 800b010:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	695a      	ldr	r2, [r3, #20]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b020:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2220      	movs	r2, #32
 800b026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2200      	movs	r2, #0
 800b02e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	68da      	ldr	r2, [r3, #12]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f022 0210 	bic.w	r2, r2, #16
 800b03e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b044:	4618      	mov	r0, r3
 800b046:	f7fd fa12 	bl	800846e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b052:	b29b      	uxth	r3, r3
 800b054:	1ad3      	subs	r3, r2, r3
 800b056:	b29b      	uxth	r3, r3
 800b058:	4619      	mov	r1, r3
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 f870 	bl	800b140 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b060:	e051      	b.n	800b106 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	1ad3      	subs	r3, r2, r3
 800b06e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b074:	b29b      	uxth	r3, r3
 800b076:	2b00      	cmp	r3, #0
 800b078:	d047      	beq.n	800b10a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800b07a:	8a7b      	ldrh	r3, [r7, #18]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d044      	beq.n	800b10a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	68da      	ldr	r2, [r3, #12]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b08e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	695a      	ldr	r2, [r3, #20]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f022 0201 	bic.w	r2, r2, #1
 800b09e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2220      	movs	r2, #32
 800b0a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	68da      	ldr	r2, [r3, #12]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f022 0210 	bic.w	r2, r2, #16
 800b0bc:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b0be:	8a7b      	ldrh	r3, [r7, #18]
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f000 f83c 	bl	800b140 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b0c8:	e01f      	b.n	800b10a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d008      	beq.n	800b0e6 <HAL_UART_IRQHandler+0x326>
 800b0d4:	6a3b      	ldr	r3, [r7, #32]
 800b0d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d003      	beq.n	800b0e6 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f000 f8ff 	bl	800b2e2 <UART_Transmit_IT>
    return;
 800b0e4:	e012      	b.n	800b10c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d00d      	beq.n	800b10c <HAL_UART_IRQHandler+0x34c>
 800b0f0:	6a3b      	ldr	r3, [r7, #32]
 800b0f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d008      	beq.n	800b10c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 f941 	bl	800b382 <UART_EndTransmit_IT>
    return;
 800b100:	e004      	b.n	800b10c <HAL_UART_IRQHandler+0x34c>
    return;
 800b102:	bf00      	nop
 800b104:	e002      	b.n	800b10c <HAL_UART_IRQHandler+0x34c>
      return;
 800b106:	bf00      	nop
 800b108:	e000      	b.n	800b10c <HAL_UART_IRQHandler+0x34c>
      return;
 800b10a:	bf00      	nop
  }
}
 800b10c:	3728      	adds	r7, #40	; 0x28
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
 800b112:	bf00      	nop
 800b114:	0800b2bb 	.word	0x0800b2bb

0800b118 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b118:	b480      	push	{r7}
 800b11a:	b083      	sub	sp, #12
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b120:	bf00      	nop
 800b122:	370c      	adds	r7, #12
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr

0800b12c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b134:	bf00      	nop
 800b136:	370c      	adds	r7, #12
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b140:	b480      	push	{r7}
 800b142:	b083      	sub	sp, #12
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	460b      	mov	r3, r1
 800b14a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b14c:	bf00      	nop
 800b14e:	370c      	adds	r7, #12
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr

0800b158 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	603b      	str	r3, [r7, #0]
 800b164:	4613      	mov	r3, r2
 800b166:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b168:	e02c      	b.n	800b1c4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b16a:	69bb      	ldr	r3, [r7, #24]
 800b16c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b170:	d028      	beq.n	800b1c4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d007      	beq.n	800b188 <UART_WaitOnFlagUntilTimeout+0x30>
 800b178:	f7fb fdd0 	bl	8006d1c <HAL_GetTick>
 800b17c:	4602      	mov	r2, r0
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	1ad3      	subs	r3, r2, r3
 800b182:	69ba      	ldr	r2, [r7, #24]
 800b184:	429a      	cmp	r2, r3
 800b186:	d21d      	bcs.n	800b1c4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	68da      	ldr	r2, [r3, #12]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b196:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	695a      	ldr	r2, [r3, #20]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f022 0201 	bic.w	r2, r2, #1
 800b1a6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2220      	movs	r2, #32
 800b1ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2220      	movs	r2, #32
 800b1b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b1c0:	2303      	movs	r3, #3
 800b1c2:	e00f      	b.n	800b1e4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	681a      	ldr	r2, [r3, #0]
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	4013      	ands	r3, r2
 800b1ce:	68ba      	ldr	r2, [r7, #8]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	bf0c      	ite	eq
 800b1d4:	2301      	moveq	r3, #1
 800b1d6:	2300      	movne	r3, #0
 800b1d8:	b2db      	uxtb	r3, r3
 800b1da:	461a      	mov	r2, r3
 800b1dc:	79fb      	ldrb	r3, [r7, #7]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d0c3      	beq.n	800b16a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b1e2:	2300      	movs	r3, #0
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3710      	adds	r7, #16
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b085      	sub	sp, #20
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	68ba      	ldr	r2, [r7, #8]
 800b1fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	88fa      	ldrh	r2, [r7, #6]
 800b204:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	88fa      	ldrh	r2, [r7, #6]
 800b20a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2200      	movs	r2, #0
 800b210:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2222      	movs	r2, #34	; 0x22
 800b216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2200      	movs	r2, #0
 800b21e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	68da      	ldr	r2, [r3, #12]
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b230:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	695a      	ldr	r2, [r3, #20]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f042 0201 	orr.w	r2, r2, #1
 800b240:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	68da      	ldr	r2, [r3, #12]
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f042 0220 	orr.w	r2, r2, #32
 800b250:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b252:	2300      	movs	r3, #0
}
 800b254:	4618      	mov	r0, r3
 800b256:	3714      	adds	r7, #20
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	68da      	ldr	r2, [r3, #12]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b276:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	695a      	ldr	r2, [r3, #20]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f022 0201 	bic.w	r2, r2, #1
 800b286:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d107      	bne.n	800b2a0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	68da      	ldr	r2, [r3, #12]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f022 0210 	bic.w	r2, r2, #16
 800b29e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2220      	movs	r2, #32
 800b2a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b2ae:	bf00      	nop
 800b2b0:	370c      	adds	r7, #12
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr

0800b2ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b2ba:	b580      	push	{r7, lr}
 800b2bc:	b084      	sub	sp, #16
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	f7ff ff29 	bl	800b12c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2da:	bf00      	nop
 800b2dc:	3710      	adds	r7, #16
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}

0800b2e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b2e2:	b480      	push	{r7}
 800b2e4:	b085      	sub	sp, #20
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	2b21      	cmp	r3, #33	; 0x21
 800b2f4:	d13e      	bne.n	800b374 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2fe:	d114      	bne.n	800b32a <UART_Transmit_IT+0x48>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	691b      	ldr	r3, [r3, #16]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d110      	bne.n	800b32a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6a1b      	ldr	r3, [r3, #32]
 800b30c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	881b      	ldrh	r3, [r3, #0]
 800b312:	461a      	mov	r2, r3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b31c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6a1b      	ldr	r3, [r3, #32]
 800b322:	1c9a      	adds	r2, r3, #2
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	621a      	str	r2, [r3, #32]
 800b328:	e008      	b.n	800b33c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6a1b      	ldr	r3, [r3, #32]
 800b32e:	1c59      	adds	r1, r3, #1
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	6211      	str	r1, [r2, #32]
 800b334:	781a      	ldrb	r2, [r3, #0]
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b340:	b29b      	uxth	r3, r3
 800b342:	3b01      	subs	r3, #1
 800b344:	b29b      	uxth	r3, r3
 800b346:	687a      	ldr	r2, [r7, #4]
 800b348:	4619      	mov	r1, r3
 800b34a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d10f      	bne.n	800b370 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	68da      	ldr	r2, [r3, #12]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b35e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	68da      	ldr	r2, [r3, #12]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b36e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b370:	2300      	movs	r3, #0
 800b372:	e000      	b.n	800b376 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b374:	2302      	movs	r3, #2
  }
}
 800b376:	4618      	mov	r0, r3
 800b378:	3714      	adds	r7, #20
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr

0800b382 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b382:	b580      	push	{r7, lr}
 800b384:	b082      	sub	sp, #8
 800b386:	af00      	add	r7, sp, #0
 800b388:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	68da      	ldr	r2, [r3, #12]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b398:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2220      	movs	r2, #32
 800b39e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f7ff feb8 	bl	800b118 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b3a8:	2300      	movs	r3, #0
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3708      	adds	r7, #8
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}

0800b3b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b3b2:	b580      	push	{r7, lr}
 800b3b4:	b084      	sub	sp, #16
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b3c0:	b2db      	uxtb	r3, r3
 800b3c2:	2b22      	cmp	r3, #34	; 0x22
 800b3c4:	f040 8087 	bne.w	800b4d6 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3d0:	d117      	bne.n	800b402 <UART_Receive_IT+0x50>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	691b      	ldr	r3, [r3, #16]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d113      	bne.n	800b402 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3e2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3f0:	b29a      	uxth	r2, r3
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3fa:	1c9a      	adds	r2, r3, #2
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	629a      	str	r2, [r3, #40]	; 0x28
 800b400:	e026      	b.n	800b450 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b406:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800b408:	2300      	movs	r3, #0
 800b40a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	689b      	ldr	r3, [r3, #8]
 800b410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b414:	d007      	beq.n	800b426 <UART_Receive_IT+0x74>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	689b      	ldr	r3, [r3, #8]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d10a      	bne.n	800b434 <UART_Receive_IT+0x82>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	691b      	ldr	r3, [r3, #16]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d106      	bne.n	800b434 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	b2da      	uxtb	r2, r3
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	701a      	strb	r2, [r3, #0]
 800b432:	e008      	b.n	800b446 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	685b      	ldr	r3, [r3, #4]
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b440:	b2da      	uxtb	r2, r3
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b44a:	1c5a      	adds	r2, r3, #1
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b454:	b29b      	uxth	r3, r3
 800b456:	3b01      	subs	r3, #1
 800b458:	b29b      	uxth	r3, r3
 800b45a:	687a      	ldr	r2, [r7, #4]
 800b45c:	4619      	mov	r1, r3
 800b45e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b460:	2b00      	cmp	r3, #0
 800b462:	d136      	bne.n	800b4d2 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	68da      	ldr	r2, [r3, #12]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f022 0220 	bic.w	r2, r2, #32
 800b472:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	68da      	ldr	r2, [r3, #12]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b482:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	695a      	ldr	r2, [r3, #20]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f022 0201 	bic.w	r2, r2, #1
 800b492:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2220      	movs	r2, #32
 800b498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d10e      	bne.n	800b4c2 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	68da      	ldr	r2, [r3, #12]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f022 0210 	bic.w	r2, r2, #16
 800b4b2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f7ff fe40 	bl	800b140 <HAL_UARTEx_RxEventCallback>
 800b4c0:	e002      	b.n	800b4c8 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f7fb fb88 	bl	8006bd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	e002      	b.n	800b4d8 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	e000      	b.n	800b4d8 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800b4d6:	2302      	movs	r3, #2
  }
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3710      	adds	r7, #16
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e4:	b09f      	sub	sp, #124	; 0x7c
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b4ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	691b      	ldr	r3, [r3, #16]
 800b4f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b4f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4f6:	68d9      	ldr	r1, [r3, #12]
 800b4f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	ea40 0301 	orr.w	r3, r0, r1
 800b500:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b504:	689a      	ldr	r2, [r3, #8]
 800b506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b508:	691b      	ldr	r3, [r3, #16]
 800b50a:	431a      	orrs	r2, r3
 800b50c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b50e:	695b      	ldr	r3, [r3, #20]
 800b510:	431a      	orrs	r2, r3
 800b512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b514:	69db      	ldr	r3, [r3, #28]
 800b516:	4313      	orrs	r3, r2
 800b518:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800b51a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	68db      	ldr	r3, [r3, #12]
 800b520:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b524:	f021 010c 	bic.w	r1, r1, #12
 800b528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b52e:	430b      	orrs	r3, r1
 800b530:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	695b      	ldr	r3, [r3, #20]
 800b538:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b53c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b53e:	6999      	ldr	r1, [r3, #24]
 800b540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	ea40 0301 	orr.w	r3, r0, r1
 800b548:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b54a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	4bc5      	ldr	r3, [pc, #788]	; (800b864 <UART_SetConfig+0x384>)
 800b550:	429a      	cmp	r2, r3
 800b552:	d004      	beq.n	800b55e <UART_SetConfig+0x7e>
 800b554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	4bc3      	ldr	r3, [pc, #780]	; (800b868 <UART_SetConfig+0x388>)
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d103      	bne.n	800b566 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b55e:	f7fd fb35 	bl	8008bcc <HAL_RCC_GetPCLK2Freq>
 800b562:	6778      	str	r0, [r7, #116]	; 0x74
 800b564:	e002      	b.n	800b56c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b566:	f7fd fb1d 	bl	8008ba4 <HAL_RCC_GetPCLK1Freq>
 800b56a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b56c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b56e:	69db      	ldr	r3, [r3, #28]
 800b570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b574:	f040 80b6 	bne.w	800b6e4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b57a:	461c      	mov	r4, r3
 800b57c:	f04f 0500 	mov.w	r5, #0
 800b580:	4622      	mov	r2, r4
 800b582:	462b      	mov	r3, r5
 800b584:	1891      	adds	r1, r2, r2
 800b586:	6439      	str	r1, [r7, #64]	; 0x40
 800b588:	415b      	adcs	r3, r3
 800b58a:	647b      	str	r3, [r7, #68]	; 0x44
 800b58c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b590:	1912      	adds	r2, r2, r4
 800b592:	eb45 0303 	adc.w	r3, r5, r3
 800b596:	f04f 0000 	mov.w	r0, #0
 800b59a:	f04f 0100 	mov.w	r1, #0
 800b59e:	00d9      	lsls	r1, r3, #3
 800b5a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b5a4:	00d0      	lsls	r0, r2, #3
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	460b      	mov	r3, r1
 800b5aa:	1911      	adds	r1, r2, r4
 800b5ac:	6639      	str	r1, [r7, #96]	; 0x60
 800b5ae:	416b      	adcs	r3, r5
 800b5b0:	667b      	str	r3, [r7, #100]	; 0x64
 800b5b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	f04f 0300 	mov.w	r3, #0
 800b5bc:	1891      	adds	r1, r2, r2
 800b5be:	63b9      	str	r1, [r7, #56]	; 0x38
 800b5c0:	415b      	adcs	r3, r3
 800b5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b5c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800b5cc:	f7f5 fb7c 	bl	8000cc8 <__aeabi_uldivmod>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	4ba5      	ldr	r3, [pc, #660]	; (800b86c <UART_SetConfig+0x38c>)
 800b5d6:	fba3 2302 	umull	r2, r3, r3, r2
 800b5da:	095b      	lsrs	r3, r3, #5
 800b5dc:	011e      	lsls	r6, r3, #4
 800b5de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b5e0:	461c      	mov	r4, r3
 800b5e2:	f04f 0500 	mov.w	r5, #0
 800b5e6:	4622      	mov	r2, r4
 800b5e8:	462b      	mov	r3, r5
 800b5ea:	1891      	adds	r1, r2, r2
 800b5ec:	6339      	str	r1, [r7, #48]	; 0x30
 800b5ee:	415b      	adcs	r3, r3
 800b5f0:	637b      	str	r3, [r7, #52]	; 0x34
 800b5f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b5f6:	1912      	adds	r2, r2, r4
 800b5f8:	eb45 0303 	adc.w	r3, r5, r3
 800b5fc:	f04f 0000 	mov.w	r0, #0
 800b600:	f04f 0100 	mov.w	r1, #0
 800b604:	00d9      	lsls	r1, r3, #3
 800b606:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b60a:	00d0      	lsls	r0, r2, #3
 800b60c:	4602      	mov	r2, r0
 800b60e:	460b      	mov	r3, r1
 800b610:	1911      	adds	r1, r2, r4
 800b612:	65b9      	str	r1, [r7, #88]	; 0x58
 800b614:	416b      	adcs	r3, r5
 800b616:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	461a      	mov	r2, r3
 800b61e:	f04f 0300 	mov.w	r3, #0
 800b622:	1891      	adds	r1, r2, r2
 800b624:	62b9      	str	r1, [r7, #40]	; 0x28
 800b626:	415b      	adcs	r3, r3
 800b628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b62a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b62e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b632:	f7f5 fb49 	bl	8000cc8 <__aeabi_uldivmod>
 800b636:	4602      	mov	r2, r0
 800b638:	460b      	mov	r3, r1
 800b63a:	4b8c      	ldr	r3, [pc, #560]	; (800b86c <UART_SetConfig+0x38c>)
 800b63c:	fba3 1302 	umull	r1, r3, r3, r2
 800b640:	095b      	lsrs	r3, r3, #5
 800b642:	2164      	movs	r1, #100	; 0x64
 800b644:	fb01 f303 	mul.w	r3, r1, r3
 800b648:	1ad3      	subs	r3, r2, r3
 800b64a:	00db      	lsls	r3, r3, #3
 800b64c:	3332      	adds	r3, #50	; 0x32
 800b64e:	4a87      	ldr	r2, [pc, #540]	; (800b86c <UART_SetConfig+0x38c>)
 800b650:	fba2 2303 	umull	r2, r3, r2, r3
 800b654:	095b      	lsrs	r3, r3, #5
 800b656:	005b      	lsls	r3, r3, #1
 800b658:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b65c:	441e      	add	r6, r3
 800b65e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b660:	4618      	mov	r0, r3
 800b662:	f04f 0100 	mov.w	r1, #0
 800b666:	4602      	mov	r2, r0
 800b668:	460b      	mov	r3, r1
 800b66a:	1894      	adds	r4, r2, r2
 800b66c:	623c      	str	r4, [r7, #32]
 800b66e:	415b      	adcs	r3, r3
 800b670:	627b      	str	r3, [r7, #36]	; 0x24
 800b672:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b676:	1812      	adds	r2, r2, r0
 800b678:	eb41 0303 	adc.w	r3, r1, r3
 800b67c:	f04f 0400 	mov.w	r4, #0
 800b680:	f04f 0500 	mov.w	r5, #0
 800b684:	00dd      	lsls	r5, r3, #3
 800b686:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b68a:	00d4      	lsls	r4, r2, #3
 800b68c:	4622      	mov	r2, r4
 800b68e:	462b      	mov	r3, r5
 800b690:	1814      	adds	r4, r2, r0
 800b692:	653c      	str	r4, [r7, #80]	; 0x50
 800b694:	414b      	adcs	r3, r1
 800b696:	657b      	str	r3, [r7, #84]	; 0x54
 800b698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	461a      	mov	r2, r3
 800b69e:	f04f 0300 	mov.w	r3, #0
 800b6a2:	1891      	adds	r1, r2, r2
 800b6a4:	61b9      	str	r1, [r7, #24]
 800b6a6:	415b      	adcs	r3, r3
 800b6a8:	61fb      	str	r3, [r7, #28]
 800b6aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b6ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b6b2:	f7f5 fb09 	bl	8000cc8 <__aeabi_uldivmod>
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	4b6c      	ldr	r3, [pc, #432]	; (800b86c <UART_SetConfig+0x38c>)
 800b6bc:	fba3 1302 	umull	r1, r3, r3, r2
 800b6c0:	095b      	lsrs	r3, r3, #5
 800b6c2:	2164      	movs	r1, #100	; 0x64
 800b6c4:	fb01 f303 	mul.w	r3, r1, r3
 800b6c8:	1ad3      	subs	r3, r2, r3
 800b6ca:	00db      	lsls	r3, r3, #3
 800b6cc:	3332      	adds	r3, #50	; 0x32
 800b6ce:	4a67      	ldr	r2, [pc, #412]	; (800b86c <UART_SetConfig+0x38c>)
 800b6d0:	fba2 2303 	umull	r2, r3, r2, r3
 800b6d4:	095b      	lsrs	r3, r3, #5
 800b6d6:	f003 0207 	and.w	r2, r3, #7
 800b6da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4432      	add	r2, r6
 800b6e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b6e2:	e0b9      	b.n	800b858 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b6e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6e6:	461c      	mov	r4, r3
 800b6e8:	f04f 0500 	mov.w	r5, #0
 800b6ec:	4622      	mov	r2, r4
 800b6ee:	462b      	mov	r3, r5
 800b6f0:	1891      	adds	r1, r2, r2
 800b6f2:	6139      	str	r1, [r7, #16]
 800b6f4:	415b      	adcs	r3, r3
 800b6f6:	617b      	str	r3, [r7, #20]
 800b6f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b6fc:	1912      	adds	r2, r2, r4
 800b6fe:	eb45 0303 	adc.w	r3, r5, r3
 800b702:	f04f 0000 	mov.w	r0, #0
 800b706:	f04f 0100 	mov.w	r1, #0
 800b70a:	00d9      	lsls	r1, r3, #3
 800b70c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b710:	00d0      	lsls	r0, r2, #3
 800b712:	4602      	mov	r2, r0
 800b714:	460b      	mov	r3, r1
 800b716:	eb12 0804 	adds.w	r8, r2, r4
 800b71a:	eb43 0905 	adc.w	r9, r3, r5
 800b71e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	4618      	mov	r0, r3
 800b724:	f04f 0100 	mov.w	r1, #0
 800b728:	f04f 0200 	mov.w	r2, #0
 800b72c:	f04f 0300 	mov.w	r3, #0
 800b730:	008b      	lsls	r3, r1, #2
 800b732:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b736:	0082      	lsls	r2, r0, #2
 800b738:	4640      	mov	r0, r8
 800b73a:	4649      	mov	r1, r9
 800b73c:	f7f5 fac4 	bl	8000cc8 <__aeabi_uldivmod>
 800b740:	4602      	mov	r2, r0
 800b742:	460b      	mov	r3, r1
 800b744:	4b49      	ldr	r3, [pc, #292]	; (800b86c <UART_SetConfig+0x38c>)
 800b746:	fba3 2302 	umull	r2, r3, r3, r2
 800b74a:	095b      	lsrs	r3, r3, #5
 800b74c:	011e      	lsls	r6, r3, #4
 800b74e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b750:	4618      	mov	r0, r3
 800b752:	f04f 0100 	mov.w	r1, #0
 800b756:	4602      	mov	r2, r0
 800b758:	460b      	mov	r3, r1
 800b75a:	1894      	adds	r4, r2, r2
 800b75c:	60bc      	str	r4, [r7, #8]
 800b75e:	415b      	adcs	r3, r3
 800b760:	60fb      	str	r3, [r7, #12]
 800b762:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b766:	1812      	adds	r2, r2, r0
 800b768:	eb41 0303 	adc.w	r3, r1, r3
 800b76c:	f04f 0400 	mov.w	r4, #0
 800b770:	f04f 0500 	mov.w	r5, #0
 800b774:	00dd      	lsls	r5, r3, #3
 800b776:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b77a:	00d4      	lsls	r4, r2, #3
 800b77c:	4622      	mov	r2, r4
 800b77e:	462b      	mov	r3, r5
 800b780:	1814      	adds	r4, r2, r0
 800b782:	64bc      	str	r4, [r7, #72]	; 0x48
 800b784:	414b      	adcs	r3, r1
 800b786:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	4618      	mov	r0, r3
 800b78e:	f04f 0100 	mov.w	r1, #0
 800b792:	f04f 0200 	mov.w	r2, #0
 800b796:	f04f 0300 	mov.w	r3, #0
 800b79a:	008b      	lsls	r3, r1, #2
 800b79c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b7a0:	0082      	lsls	r2, r0, #2
 800b7a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b7a6:	f7f5 fa8f 	bl	8000cc8 <__aeabi_uldivmod>
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	4b2f      	ldr	r3, [pc, #188]	; (800b86c <UART_SetConfig+0x38c>)
 800b7b0:	fba3 1302 	umull	r1, r3, r3, r2
 800b7b4:	095b      	lsrs	r3, r3, #5
 800b7b6:	2164      	movs	r1, #100	; 0x64
 800b7b8:	fb01 f303 	mul.w	r3, r1, r3
 800b7bc:	1ad3      	subs	r3, r2, r3
 800b7be:	011b      	lsls	r3, r3, #4
 800b7c0:	3332      	adds	r3, #50	; 0x32
 800b7c2:	4a2a      	ldr	r2, [pc, #168]	; (800b86c <UART_SetConfig+0x38c>)
 800b7c4:	fba2 2303 	umull	r2, r3, r2, r3
 800b7c8:	095b      	lsrs	r3, r3, #5
 800b7ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7ce:	441e      	add	r6, r3
 800b7d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f04f 0100 	mov.w	r1, #0
 800b7d8:	4602      	mov	r2, r0
 800b7da:	460b      	mov	r3, r1
 800b7dc:	1894      	adds	r4, r2, r2
 800b7de:	603c      	str	r4, [r7, #0]
 800b7e0:	415b      	adcs	r3, r3
 800b7e2:	607b      	str	r3, [r7, #4]
 800b7e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7e8:	1812      	adds	r2, r2, r0
 800b7ea:	eb41 0303 	adc.w	r3, r1, r3
 800b7ee:	f04f 0400 	mov.w	r4, #0
 800b7f2:	f04f 0500 	mov.w	r5, #0
 800b7f6:	00dd      	lsls	r5, r3, #3
 800b7f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b7fc:	00d4      	lsls	r4, r2, #3
 800b7fe:	4622      	mov	r2, r4
 800b800:	462b      	mov	r3, r5
 800b802:	eb12 0a00 	adds.w	sl, r2, r0
 800b806:	eb43 0b01 	adc.w	fp, r3, r1
 800b80a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	4618      	mov	r0, r3
 800b810:	f04f 0100 	mov.w	r1, #0
 800b814:	f04f 0200 	mov.w	r2, #0
 800b818:	f04f 0300 	mov.w	r3, #0
 800b81c:	008b      	lsls	r3, r1, #2
 800b81e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b822:	0082      	lsls	r2, r0, #2
 800b824:	4650      	mov	r0, sl
 800b826:	4659      	mov	r1, fp
 800b828:	f7f5 fa4e 	bl	8000cc8 <__aeabi_uldivmod>
 800b82c:	4602      	mov	r2, r0
 800b82e:	460b      	mov	r3, r1
 800b830:	4b0e      	ldr	r3, [pc, #56]	; (800b86c <UART_SetConfig+0x38c>)
 800b832:	fba3 1302 	umull	r1, r3, r3, r2
 800b836:	095b      	lsrs	r3, r3, #5
 800b838:	2164      	movs	r1, #100	; 0x64
 800b83a:	fb01 f303 	mul.w	r3, r1, r3
 800b83e:	1ad3      	subs	r3, r2, r3
 800b840:	011b      	lsls	r3, r3, #4
 800b842:	3332      	adds	r3, #50	; 0x32
 800b844:	4a09      	ldr	r2, [pc, #36]	; (800b86c <UART_SetConfig+0x38c>)
 800b846:	fba2 2303 	umull	r2, r3, r2, r3
 800b84a:	095b      	lsrs	r3, r3, #5
 800b84c:	f003 020f 	and.w	r2, r3, #15
 800b850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4432      	add	r2, r6
 800b856:	609a      	str	r2, [r3, #8]
}
 800b858:	bf00      	nop
 800b85a:	377c      	adds	r7, #124	; 0x7c
 800b85c:	46bd      	mov	sp, r7
 800b85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b862:	bf00      	nop
 800b864:	40011000 	.word	0x40011000
 800b868:	40011400 	.word	0x40011400
 800b86c:	51eb851f 	.word	0x51eb851f

0800b870 <round>:
 800b870:	ec51 0b10 	vmov	r0, r1, d0
 800b874:	b570      	push	{r4, r5, r6, lr}
 800b876:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800b87a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800b87e:	2c13      	cmp	r4, #19
 800b880:	ee10 2a10 	vmov	r2, s0
 800b884:	460b      	mov	r3, r1
 800b886:	dc19      	bgt.n	800b8bc <round+0x4c>
 800b888:	2c00      	cmp	r4, #0
 800b88a:	da09      	bge.n	800b8a0 <round+0x30>
 800b88c:	3401      	adds	r4, #1
 800b88e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800b892:	d103      	bne.n	800b89c <round+0x2c>
 800b894:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b898:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b89c:	2100      	movs	r1, #0
 800b89e:	e028      	b.n	800b8f2 <round+0x82>
 800b8a0:	4d15      	ldr	r5, [pc, #84]	; (800b8f8 <round+0x88>)
 800b8a2:	4125      	asrs	r5, r4
 800b8a4:	ea01 0605 	and.w	r6, r1, r5
 800b8a8:	4332      	orrs	r2, r6
 800b8aa:	d00e      	beq.n	800b8ca <round+0x5a>
 800b8ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b8b0:	fa42 f404 	asr.w	r4, r2, r4
 800b8b4:	4423      	add	r3, r4
 800b8b6:	ea23 0305 	bic.w	r3, r3, r5
 800b8ba:	e7ef      	b.n	800b89c <round+0x2c>
 800b8bc:	2c33      	cmp	r4, #51	; 0x33
 800b8be:	dd07      	ble.n	800b8d0 <round+0x60>
 800b8c0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800b8c4:	d101      	bne.n	800b8ca <round+0x5a>
 800b8c6:	f7f4 fd01 	bl	80002cc <__adddf3>
 800b8ca:	ec41 0b10 	vmov	d0, r0, r1
 800b8ce:	bd70      	pop	{r4, r5, r6, pc}
 800b8d0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800b8d4:	f04f 35ff 	mov.w	r5, #4294967295
 800b8d8:	40f5      	lsrs	r5, r6
 800b8da:	4228      	tst	r0, r5
 800b8dc:	d0f5      	beq.n	800b8ca <round+0x5a>
 800b8de:	2101      	movs	r1, #1
 800b8e0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800b8e4:	fa01 f404 	lsl.w	r4, r1, r4
 800b8e8:	1912      	adds	r2, r2, r4
 800b8ea:	bf28      	it	cs
 800b8ec:	185b      	addcs	r3, r3, r1
 800b8ee:	ea22 0105 	bic.w	r1, r2, r5
 800b8f2:	4608      	mov	r0, r1
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	e7e8      	b.n	800b8ca <round+0x5a>
 800b8f8:	000fffff 	.word	0x000fffff

0800b8fc <fmaxf>:
 800b8fc:	b508      	push	{r3, lr}
 800b8fe:	ed2d 8b02 	vpush	{d8}
 800b902:	eeb0 8a40 	vmov.f32	s16, s0
 800b906:	eef0 8a60 	vmov.f32	s17, s1
 800b90a:	f000 f82d 	bl	800b968 <__fpclassifyf>
 800b90e:	b148      	cbz	r0, 800b924 <fmaxf+0x28>
 800b910:	eeb0 0a68 	vmov.f32	s0, s17
 800b914:	f000 f828 	bl	800b968 <__fpclassifyf>
 800b918:	b130      	cbz	r0, 800b928 <fmaxf+0x2c>
 800b91a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b922:	dc01      	bgt.n	800b928 <fmaxf+0x2c>
 800b924:	eeb0 8a68 	vmov.f32	s16, s17
 800b928:	eeb0 0a48 	vmov.f32	s0, s16
 800b92c:	ecbd 8b02 	vpop	{d8}
 800b930:	bd08      	pop	{r3, pc}

0800b932 <fminf>:
 800b932:	b508      	push	{r3, lr}
 800b934:	ed2d 8b02 	vpush	{d8}
 800b938:	eeb0 8a40 	vmov.f32	s16, s0
 800b93c:	eef0 8a60 	vmov.f32	s17, s1
 800b940:	f000 f812 	bl	800b968 <__fpclassifyf>
 800b944:	b148      	cbz	r0, 800b95a <fminf+0x28>
 800b946:	eeb0 0a68 	vmov.f32	s0, s17
 800b94a:	f000 f80d 	bl	800b968 <__fpclassifyf>
 800b94e:	b130      	cbz	r0, 800b95e <fminf+0x2c>
 800b950:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b958:	d401      	bmi.n	800b95e <fminf+0x2c>
 800b95a:	eeb0 8a68 	vmov.f32	s16, s17
 800b95e:	eeb0 0a48 	vmov.f32	s0, s16
 800b962:	ecbd 8b02 	vpop	{d8}
 800b966:	bd08      	pop	{r3, pc}

0800b968 <__fpclassifyf>:
 800b968:	ee10 3a10 	vmov	r3, s0
 800b96c:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800b970:	d00d      	beq.n	800b98e <__fpclassifyf+0x26>
 800b972:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800b976:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800b97a:	d30a      	bcc.n	800b992 <__fpclassifyf+0x2a>
 800b97c:	4b07      	ldr	r3, [pc, #28]	; (800b99c <__fpclassifyf+0x34>)
 800b97e:	1e42      	subs	r2, r0, #1
 800b980:	429a      	cmp	r2, r3
 800b982:	d908      	bls.n	800b996 <__fpclassifyf+0x2e>
 800b984:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800b988:	4258      	negs	r0, r3
 800b98a:	4158      	adcs	r0, r3
 800b98c:	4770      	bx	lr
 800b98e:	2002      	movs	r0, #2
 800b990:	4770      	bx	lr
 800b992:	2004      	movs	r0, #4
 800b994:	4770      	bx	lr
 800b996:	2003      	movs	r0, #3
 800b998:	4770      	bx	lr
 800b99a:	bf00      	nop
 800b99c:	007ffffe 	.word	0x007ffffe

0800b9a0 <modff>:
 800b9a0:	ee10 3a10 	vmov	r3, s0
 800b9a4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b9a8:	3a7f      	subs	r2, #127	; 0x7f
 800b9aa:	2a16      	cmp	r2, #22
 800b9ac:	dc0a      	bgt.n	800b9c4 <modff+0x24>
 800b9ae:	2a00      	cmp	r2, #0
 800b9b0:	da03      	bge.n	800b9ba <modff+0x1a>
 800b9b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b9b6:	6003      	str	r3, [r0, #0]
 800b9b8:	4770      	bx	lr
 800b9ba:	490a      	ldr	r1, [pc, #40]	; (800b9e4 <modff+0x44>)
 800b9bc:	fa41 f202 	asr.w	r2, r1, r2
 800b9c0:	4213      	tst	r3, r2
 800b9c2:	d106      	bne.n	800b9d2 <modff+0x32>
 800b9c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b9c8:	ed80 0a00 	vstr	s0, [r0]
 800b9cc:	ee00 3a10 	vmov	s0, r3
 800b9d0:	4770      	bx	lr
 800b9d2:	ea23 0302 	bic.w	r3, r3, r2
 800b9d6:	ee07 3a90 	vmov	s15, r3
 800b9da:	6003      	str	r3, [r0, #0]
 800b9dc:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b9e0:	4770      	bx	lr
 800b9e2:	bf00      	nop
 800b9e4:	007fffff 	.word	0x007fffff

0800b9e8 <exp>:
 800b9e8:	b538      	push	{r3, r4, r5, lr}
 800b9ea:	ed2d 8b02 	vpush	{d8}
 800b9ee:	ec55 4b10 	vmov	r4, r5, d0
 800b9f2:	f000 f899 	bl	800bb28 <__ieee754_exp>
 800b9f6:	4b22      	ldr	r3, [pc, #136]	; (800ba80 <exp+0x98>)
 800b9f8:	eeb0 8a40 	vmov.f32	s16, s0
 800b9fc:	eef0 8a60 	vmov.f32	s17, s1
 800ba00:	f993 3000 	ldrsb.w	r3, [r3]
 800ba04:	3301      	adds	r3, #1
 800ba06:	d012      	beq.n	800ba2e <exp+0x46>
 800ba08:	ec45 4b10 	vmov	d0, r4, r5
 800ba0c:	f000 fa8b 	bl	800bf26 <finite>
 800ba10:	b168      	cbz	r0, 800ba2e <exp+0x46>
 800ba12:	a313      	add	r3, pc, #76	; (adr r3, 800ba60 <exp+0x78>)
 800ba14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba18:	4620      	mov	r0, r4
 800ba1a:	4629      	mov	r1, r5
 800ba1c:	f7f5 f89c 	bl	8000b58 <__aeabi_dcmpgt>
 800ba20:	b160      	cbz	r0, 800ba3c <exp+0x54>
 800ba22:	f000 fa93 	bl	800bf4c <__errno>
 800ba26:	ed9f 8b10 	vldr	d8, [pc, #64]	; 800ba68 <exp+0x80>
 800ba2a:	2322      	movs	r3, #34	; 0x22
 800ba2c:	6003      	str	r3, [r0, #0]
 800ba2e:	eeb0 0a48 	vmov.f32	s0, s16
 800ba32:	eef0 0a68 	vmov.f32	s1, s17
 800ba36:	ecbd 8b02 	vpop	{d8}
 800ba3a:	bd38      	pop	{r3, r4, r5, pc}
 800ba3c:	a30c      	add	r3, pc, #48	; (adr r3, 800ba70 <exp+0x88>)
 800ba3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba42:	4620      	mov	r0, r4
 800ba44:	4629      	mov	r1, r5
 800ba46:	f7f5 f869 	bl	8000b1c <__aeabi_dcmplt>
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	d0ef      	beq.n	800ba2e <exp+0x46>
 800ba4e:	f000 fa7d 	bl	800bf4c <__errno>
 800ba52:	2322      	movs	r3, #34	; 0x22
 800ba54:	ed9f 8b08 	vldr	d8, [pc, #32]	; 800ba78 <exp+0x90>
 800ba58:	6003      	str	r3, [r0, #0]
 800ba5a:	e7e8      	b.n	800ba2e <exp+0x46>
 800ba5c:	f3af 8000 	nop.w
 800ba60:	fefa39ef 	.word	0xfefa39ef
 800ba64:	40862e42 	.word	0x40862e42
 800ba68:	00000000 	.word	0x00000000
 800ba6c:	7ff00000 	.word	0x7ff00000
 800ba70:	d52d3051 	.word	0xd52d3051
 800ba74:	c0874910 	.word	0xc0874910
	...
 800ba80:	20000049 	.word	0x20000049

0800ba84 <fmodf>:
 800ba84:	b508      	push	{r3, lr}
 800ba86:	ed2d 8b02 	vpush	{d8}
 800ba8a:	eef0 8a40 	vmov.f32	s17, s0
 800ba8e:	eeb0 8a60 	vmov.f32	s16, s1
 800ba92:	f000 f9c3 	bl	800be1c <__ieee754_fmodf>
 800ba96:	4b0f      	ldr	r3, [pc, #60]	; (800bad4 <fmodf+0x50>)
 800ba98:	f993 3000 	ldrsb.w	r3, [r3]
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	d016      	beq.n	800bace <fmodf+0x4a>
 800baa0:	eeb4 8a48 	vcmp.f32	s16, s16
 800baa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baa8:	d611      	bvs.n	800bace <fmodf+0x4a>
 800baaa:	eef4 8a68 	vcmp.f32	s17, s17
 800baae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bab2:	d60c      	bvs.n	800bace <fmodf+0x4a>
 800bab4:	eddf 8a08 	vldr	s17, [pc, #32]	; 800bad8 <fmodf+0x54>
 800bab8:	eeb4 8a68 	vcmp.f32	s16, s17
 800babc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bac0:	d105      	bne.n	800bace <fmodf+0x4a>
 800bac2:	f000 fa43 	bl	800bf4c <__errno>
 800bac6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800baca:	2321      	movs	r3, #33	; 0x21
 800bacc:	6003      	str	r3, [r0, #0]
 800bace:	ecbd 8b02 	vpop	{d8}
 800bad2:	bd08      	pop	{r3, pc}
 800bad4:	20000049 	.word	0x20000049
 800bad8:	00000000 	.word	0x00000000

0800badc <sqrtf>:
 800badc:	b508      	push	{r3, lr}
 800bade:	ed2d 8b02 	vpush	{d8}
 800bae2:	eeb0 8a40 	vmov.f32	s16, s0
 800bae6:	f000 fa1b 	bl	800bf20 <__ieee754_sqrtf>
 800baea:	4b0d      	ldr	r3, [pc, #52]	; (800bb20 <sqrtf+0x44>)
 800baec:	f993 3000 	ldrsb.w	r3, [r3]
 800baf0:	3301      	adds	r3, #1
 800baf2:	d011      	beq.n	800bb18 <sqrtf+0x3c>
 800baf4:	eeb4 8a48 	vcmp.f32	s16, s16
 800baf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bafc:	d60c      	bvs.n	800bb18 <sqrtf+0x3c>
 800bafe:	eddf 8a09 	vldr	s17, [pc, #36]	; 800bb24 <sqrtf+0x48>
 800bb02:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bb06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb0a:	d505      	bpl.n	800bb18 <sqrtf+0x3c>
 800bb0c:	f000 fa1e 	bl	800bf4c <__errno>
 800bb10:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bb14:	2321      	movs	r3, #33	; 0x21
 800bb16:	6003      	str	r3, [r0, #0]
 800bb18:	ecbd 8b02 	vpop	{d8}
 800bb1c:	bd08      	pop	{r3, pc}
 800bb1e:	bf00      	nop
 800bb20:	20000049 	.word	0x20000049
 800bb24:	00000000 	.word	0x00000000

0800bb28 <__ieee754_exp>:
 800bb28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb2c:	ec55 4b10 	vmov	r4, r5, d0
 800bb30:	49b1      	ldr	r1, [pc, #708]	; (800bdf8 <__ieee754_exp+0x2d0>)
 800bb32:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bb36:	428b      	cmp	r3, r1
 800bb38:	ed2d 8b04 	vpush	{d8-d9}
 800bb3c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800bb40:	d937      	bls.n	800bbb2 <__ieee754_exp+0x8a>
 800bb42:	49ae      	ldr	r1, [pc, #696]	; (800bdfc <__ieee754_exp+0x2d4>)
 800bb44:	428b      	cmp	r3, r1
 800bb46:	d916      	bls.n	800bb76 <__ieee754_exp+0x4e>
 800bb48:	ee10 3a10 	vmov	r3, s0
 800bb4c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800bb50:	4313      	orrs	r3, r2
 800bb52:	d009      	beq.n	800bb68 <__ieee754_exp+0x40>
 800bb54:	ee10 2a10 	vmov	r2, s0
 800bb58:	462b      	mov	r3, r5
 800bb5a:	4620      	mov	r0, r4
 800bb5c:	4629      	mov	r1, r5
 800bb5e:	f7f4 fbb5 	bl	80002cc <__adddf3>
 800bb62:	4604      	mov	r4, r0
 800bb64:	460d      	mov	r5, r1
 800bb66:	e000      	b.n	800bb6a <__ieee754_exp+0x42>
 800bb68:	bb06      	cbnz	r6, 800bbac <__ieee754_exp+0x84>
 800bb6a:	ecbd 8b04 	vpop	{d8-d9}
 800bb6e:	ec45 4b10 	vmov	d0, r4, r5
 800bb72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb76:	a38a      	add	r3, pc, #552	; (adr r3, 800bda0 <__ieee754_exp+0x278>)
 800bb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7c:	ee10 0a10 	vmov	r0, s0
 800bb80:	4629      	mov	r1, r5
 800bb82:	f7f4 ffe9 	bl	8000b58 <__aeabi_dcmpgt>
 800bb86:	b138      	cbz	r0, 800bb98 <__ieee754_exp+0x70>
 800bb88:	a387      	add	r3, pc, #540	; (adr r3, 800bda8 <__ieee754_exp+0x280>)
 800bb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8e:	4610      	mov	r0, r2
 800bb90:	4619      	mov	r1, r3
 800bb92:	f7f4 fd51 	bl	8000638 <__aeabi_dmul>
 800bb96:	e7e4      	b.n	800bb62 <__ieee754_exp+0x3a>
 800bb98:	a385      	add	r3, pc, #532	; (adr r3, 800bdb0 <__ieee754_exp+0x288>)
 800bb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9e:	4620      	mov	r0, r4
 800bba0:	4629      	mov	r1, r5
 800bba2:	f7f4 ffbb 	bl	8000b1c <__aeabi_dcmplt>
 800bba6:	2800      	cmp	r0, #0
 800bba8:	f000 8087 	beq.w	800bcba <__ieee754_exp+0x192>
 800bbac:	2400      	movs	r4, #0
 800bbae:	2500      	movs	r5, #0
 800bbb0:	e7db      	b.n	800bb6a <__ieee754_exp+0x42>
 800bbb2:	4a93      	ldr	r2, [pc, #588]	; (800be00 <__ieee754_exp+0x2d8>)
 800bbb4:	4293      	cmp	r3, r2
 800bbb6:	f240 80ac 	bls.w	800bd12 <__ieee754_exp+0x1ea>
 800bbba:	4a92      	ldr	r2, [pc, #584]	; (800be04 <__ieee754_exp+0x2dc>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d87c      	bhi.n	800bcba <__ieee754_exp+0x192>
 800bbc0:	4b91      	ldr	r3, [pc, #580]	; (800be08 <__ieee754_exp+0x2e0>)
 800bbc2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbca:	ee10 0a10 	vmov	r0, s0
 800bbce:	4629      	mov	r1, r5
 800bbd0:	f7f4 fb7a 	bl	80002c8 <__aeabi_dsub>
 800bbd4:	4b8d      	ldr	r3, [pc, #564]	; (800be0c <__ieee754_exp+0x2e4>)
 800bbd6:	00f7      	lsls	r7, r6, #3
 800bbd8:	443b      	add	r3, r7
 800bbda:	ed93 7b00 	vldr	d7, [r3]
 800bbde:	f1c6 0a01 	rsb	sl, r6, #1
 800bbe2:	4680      	mov	r8, r0
 800bbe4:	4689      	mov	r9, r1
 800bbe6:	ebaa 0a06 	sub.w	sl, sl, r6
 800bbea:	eeb0 8a47 	vmov.f32	s16, s14
 800bbee:	eef0 8a67 	vmov.f32	s17, s15
 800bbf2:	ec53 2b18 	vmov	r2, r3, d8
 800bbf6:	4640      	mov	r0, r8
 800bbf8:	4649      	mov	r1, r9
 800bbfa:	f7f4 fb65 	bl	80002c8 <__aeabi_dsub>
 800bbfe:	4604      	mov	r4, r0
 800bc00:	460d      	mov	r5, r1
 800bc02:	4622      	mov	r2, r4
 800bc04:	462b      	mov	r3, r5
 800bc06:	4620      	mov	r0, r4
 800bc08:	4629      	mov	r1, r5
 800bc0a:	f7f4 fd15 	bl	8000638 <__aeabi_dmul>
 800bc0e:	a36a      	add	r3, pc, #424	; (adr r3, 800bdb8 <__ieee754_exp+0x290>)
 800bc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc14:	4606      	mov	r6, r0
 800bc16:	460f      	mov	r7, r1
 800bc18:	f7f4 fd0e 	bl	8000638 <__aeabi_dmul>
 800bc1c:	a368      	add	r3, pc, #416	; (adr r3, 800bdc0 <__ieee754_exp+0x298>)
 800bc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc22:	f7f4 fb51 	bl	80002c8 <__aeabi_dsub>
 800bc26:	4632      	mov	r2, r6
 800bc28:	463b      	mov	r3, r7
 800bc2a:	f7f4 fd05 	bl	8000638 <__aeabi_dmul>
 800bc2e:	a366      	add	r3, pc, #408	; (adr r3, 800bdc8 <__ieee754_exp+0x2a0>)
 800bc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc34:	f7f4 fb4a 	bl	80002cc <__adddf3>
 800bc38:	4632      	mov	r2, r6
 800bc3a:	463b      	mov	r3, r7
 800bc3c:	f7f4 fcfc 	bl	8000638 <__aeabi_dmul>
 800bc40:	a363      	add	r3, pc, #396	; (adr r3, 800bdd0 <__ieee754_exp+0x2a8>)
 800bc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc46:	f7f4 fb3f 	bl	80002c8 <__aeabi_dsub>
 800bc4a:	4632      	mov	r2, r6
 800bc4c:	463b      	mov	r3, r7
 800bc4e:	f7f4 fcf3 	bl	8000638 <__aeabi_dmul>
 800bc52:	a361      	add	r3, pc, #388	; (adr r3, 800bdd8 <__ieee754_exp+0x2b0>)
 800bc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc58:	f7f4 fb38 	bl	80002cc <__adddf3>
 800bc5c:	4632      	mov	r2, r6
 800bc5e:	463b      	mov	r3, r7
 800bc60:	f7f4 fcea 	bl	8000638 <__aeabi_dmul>
 800bc64:	4602      	mov	r2, r0
 800bc66:	460b      	mov	r3, r1
 800bc68:	4620      	mov	r0, r4
 800bc6a:	4629      	mov	r1, r5
 800bc6c:	f7f4 fb2c 	bl	80002c8 <__aeabi_dsub>
 800bc70:	4602      	mov	r2, r0
 800bc72:	460b      	mov	r3, r1
 800bc74:	4606      	mov	r6, r0
 800bc76:	460f      	mov	r7, r1
 800bc78:	4620      	mov	r0, r4
 800bc7a:	4629      	mov	r1, r5
 800bc7c:	f7f4 fcdc 	bl	8000638 <__aeabi_dmul>
 800bc80:	ec41 0b19 	vmov	d9, r0, r1
 800bc84:	f1ba 0f00 	cmp.w	sl, #0
 800bc88:	d15d      	bne.n	800bd46 <__ieee754_exp+0x21e>
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bc90:	4630      	mov	r0, r6
 800bc92:	4639      	mov	r1, r7
 800bc94:	f7f4 fb18 	bl	80002c8 <__aeabi_dsub>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	ec51 0b19 	vmov	r0, r1, d9
 800bca0:	f7f4 fdf4 	bl	800088c <__aeabi_ddiv>
 800bca4:	4622      	mov	r2, r4
 800bca6:	462b      	mov	r3, r5
 800bca8:	f7f4 fb0e 	bl	80002c8 <__aeabi_dsub>
 800bcac:	4602      	mov	r2, r0
 800bcae:	460b      	mov	r3, r1
 800bcb0:	2000      	movs	r0, #0
 800bcb2:	4957      	ldr	r1, [pc, #348]	; (800be10 <__ieee754_exp+0x2e8>)
 800bcb4:	f7f4 fb08 	bl	80002c8 <__aeabi_dsub>
 800bcb8:	e753      	b.n	800bb62 <__ieee754_exp+0x3a>
 800bcba:	4856      	ldr	r0, [pc, #344]	; (800be14 <__ieee754_exp+0x2ec>)
 800bcbc:	a348      	add	r3, pc, #288	; (adr r3, 800bde0 <__ieee754_exp+0x2b8>)
 800bcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc2:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800bcc6:	4629      	mov	r1, r5
 800bcc8:	4620      	mov	r0, r4
 800bcca:	f7f4 fcb5 	bl	8000638 <__aeabi_dmul>
 800bcce:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bcd2:	f7f4 fafb 	bl	80002cc <__adddf3>
 800bcd6:	f7f4 ff5f 	bl	8000b98 <__aeabi_d2iz>
 800bcda:	4682      	mov	sl, r0
 800bcdc:	f7f4 fc42 	bl	8000564 <__aeabi_i2d>
 800bce0:	a341      	add	r3, pc, #260	; (adr r3, 800bde8 <__ieee754_exp+0x2c0>)
 800bce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce6:	4606      	mov	r6, r0
 800bce8:	460f      	mov	r7, r1
 800bcea:	f7f4 fca5 	bl	8000638 <__aeabi_dmul>
 800bcee:	4602      	mov	r2, r0
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	4629      	mov	r1, r5
 800bcf6:	f7f4 fae7 	bl	80002c8 <__aeabi_dsub>
 800bcfa:	a33d      	add	r3, pc, #244	; (adr r3, 800bdf0 <__ieee754_exp+0x2c8>)
 800bcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd00:	4680      	mov	r8, r0
 800bd02:	4689      	mov	r9, r1
 800bd04:	4630      	mov	r0, r6
 800bd06:	4639      	mov	r1, r7
 800bd08:	f7f4 fc96 	bl	8000638 <__aeabi_dmul>
 800bd0c:	ec41 0b18 	vmov	d8, r0, r1
 800bd10:	e76f      	b.n	800bbf2 <__ieee754_exp+0xca>
 800bd12:	4a41      	ldr	r2, [pc, #260]	; (800be18 <__ieee754_exp+0x2f0>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d811      	bhi.n	800bd3c <__ieee754_exp+0x214>
 800bd18:	a323      	add	r3, pc, #140	; (adr r3, 800bda8 <__ieee754_exp+0x280>)
 800bd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1e:	ee10 0a10 	vmov	r0, s0
 800bd22:	4629      	mov	r1, r5
 800bd24:	f7f4 fad2 	bl	80002cc <__adddf3>
 800bd28:	4b39      	ldr	r3, [pc, #228]	; (800be10 <__ieee754_exp+0x2e8>)
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	f7f4 ff14 	bl	8000b58 <__aeabi_dcmpgt>
 800bd30:	b138      	cbz	r0, 800bd42 <__ieee754_exp+0x21a>
 800bd32:	4b37      	ldr	r3, [pc, #220]	; (800be10 <__ieee754_exp+0x2e8>)
 800bd34:	2200      	movs	r2, #0
 800bd36:	4620      	mov	r0, r4
 800bd38:	4629      	mov	r1, r5
 800bd3a:	e710      	b.n	800bb5e <__ieee754_exp+0x36>
 800bd3c:	f04f 0a00 	mov.w	sl, #0
 800bd40:	e75f      	b.n	800bc02 <__ieee754_exp+0xda>
 800bd42:	4682      	mov	sl, r0
 800bd44:	e75d      	b.n	800bc02 <__ieee754_exp+0xda>
 800bd46:	4632      	mov	r2, r6
 800bd48:	463b      	mov	r3, r7
 800bd4a:	2000      	movs	r0, #0
 800bd4c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800bd50:	f7f4 faba 	bl	80002c8 <__aeabi_dsub>
 800bd54:	4602      	mov	r2, r0
 800bd56:	460b      	mov	r3, r1
 800bd58:	ec51 0b19 	vmov	r0, r1, d9
 800bd5c:	f7f4 fd96 	bl	800088c <__aeabi_ddiv>
 800bd60:	4602      	mov	r2, r0
 800bd62:	460b      	mov	r3, r1
 800bd64:	ec51 0b18 	vmov	r0, r1, d8
 800bd68:	f7f4 faae 	bl	80002c8 <__aeabi_dsub>
 800bd6c:	4642      	mov	r2, r8
 800bd6e:	464b      	mov	r3, r9
 800bd70:	f7f4 faaa 	bl	80002c8 <__aeabi_dsub>
 800bd74:	4602      	mov	r2, r0
 800bd76:	460b      	mov	r3, r1
 800bd78:	2000      	movs	r0, #0
 800bd7a:	4925      	ldr	r1, [pc, #148]	; (800be10 <__ieee754_exp+0x2e8>)
 800bd7c:	f7f4 faa4 	bl	80002c8 <__aeabi_dsub>
 800bd80:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800bd84:	4592      	cmp	sl, r2
 800bd86:	db02      	blt.n	800bd8e <__ieee754_exp+0x266>
 800bd88:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800bd8c:	e6e9      	b.n	800bb62 <__ieee754_exp+0x3a>
 800bd8e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800bd92:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800bd96:	2200      	movs	r2, #0
 800bd98:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800bd9c:	e6f9      	b.n	800bb92 <__ieee754_exp+0x6a>
 800bd9e:	bf00      	nop
 800bda0:	fefa39ef 	.word	0xfefa39ef
 800bda4:	40862e42 	.word	0x40862e42
 800bda8:	8800759c 	.word	0x8800759c
 800bdac:	7e37e43c 	.word	0x7e37e43c
 800bdb0:	d52d3051 	.word	0xd52d3051
 800bdb4:	c0874910 	.word	0xc0874910
 800bdb8:	72bea4d0 	.word	0x72bea4d0
 800bdbc:	3e663769 	.word	0x3e663769
 800bdc0:	c5d26bf1 	.word	0xc5d26bf1
 800bdc4:	3ebbbd41 	.word	0x3ebbbd41
 800bdc8:	af25de2c 	.word	0xaf25de2c
 800bdcc:	3f11566a 	.word	0x3f11566a
 800bdd0:	16bebd93 	.word	0x16bebd93
 800bdd4:	3f66c16c 	.word	0x3f66c16c
 800bdd8:	5555553e 	.word	0x5555553e
 800bddc:	3fc55555 	.word	0x3fc55555
 800bde0:	652b82fe 	.word	0x652b82fe
 800bde4:	3ff71547 	.word	0x3ff71547
 800bde8:	fee00000 	.word	0xfee00000
 800bdec:	3fe62e42 	.word	0x3fe62e42
 800bdf0:	35793c76 	.word	0x35793c76
 800bdf4:	3dea39ef 	.word	0x3dea39ef
 800bdf8:	40862e41 	.word	0x40862e41
 800bdfc:	7fefffff 	.word	0x7fefffff
 800be00:	3fd62e42 	.word	0x3fd62e42
 800be04:	3ff0a2b1 	.word	0x3ff0a2b1
 800be08:	08011500 	.word	0x08011500
 800be0c:	08011510 	.word	0x08011510
 800be10:	3ff00000 	.word	0x3ff00000
 800be14:	080114f0 	.word	0x080114f0
 800be18:	3e2fffff 	.word	0x3e2fffff

0800be1c <__ieee754_fmodf>:
 800be1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be1e:	ee10 6a90 	vmov	r6, s1
 800be22:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 800be26:	d009      	beq.n	800be3c <__ieee754_fmodf+0x20>
 800be28:	ee10 2a10 	vmov	r2, s0
 800be2c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800be30:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800be34:	da02      	bge.n	800be3c <__ieee754_fmodf+0x20>
 800be36:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800be3a:	dd04      	ble.n	800be46 <__ieee754_fmodf+0x2a>
 800be3c:	ee60 0a20 	vmul.f32	s1, s0, s1
 800be40:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800be44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be46:	42ab      	cmp	r3, r5
 800be48:	dbfc      	blt.n	800be44 <__ieee754_fmodf+0x28>
 800be4a:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 800be4e:	d106      	bne.n	800be5e <__ieee754_fmodf+0x42>
 800be50:	4a32      	ldr	r2, [pc, #200]	; (800bf1c <__ieee754_fmodf+0x100>)
 800be52:	0fe3      	lsrs	r3, r4, #31
 800be54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800be58:	ed93 0a00 	vldr	s0, [r3]
 800be5c:	e7f2      	b.n	800be44 <__ieee754_fmodf+0x28>
 800be5e:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800be62:	d13f      	bne.n	800bee4 <__ieee754_fmodf+0xc8>
 800be64:	0219      	lsls	r1, r3, #8
 800be66:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800be6a:	2900      	cmp	r1, #0
 800be6c:	dc37      	bgt.n	800bede <__ieee754_fmodf+0xc2>
 800be6e:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800be72:	d13d      	bne.n	800bef0 <__ieee754_fmodf+0xd4>
 800be74:	022f      	lsls	r7, r5, #8
 800be76:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800be7a:	2f00      	cmp	r7, #0
 800be7c:	da35      	bge.n	800beea <__ieee754_fmodf+0xce>
 800be7e:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800be82:	bfbb      	ittet	lt
 800be84:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800be88:	1a12      	sublt	r2, r2, r0
 800be8a:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800be8e:	4093      	lsllt	r3, r2
 800be90:	bfa8      	it	ge
 800be92:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800be96:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800be9a:	bfb5      	itete	lt
 800be9c:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800bea0:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 800bea4:	1a52      	sublt	r2, r2, r1
 800bea6:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 800beaa:	bfb8      	it	lt
 800beac:	4095      	lsllt	r5, r2
 800beae:	1a40      	subs	r0, r0, r1
 800beb0:	1b5a      	subs	r2, r3, r5
 800beb2:	bb00      	cbnz	r0, 800bef6 <__ieee754_fmodf+0xda>
 800beb4:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800beb8:	bf38      	it	cc
 800beba:	4613      	movcc	r3, r2
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d0c7      	beq.n	800be50 <__ieee754_fmodf+0x34>
 800bec0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bec4:	db1f      	blt.n	800bf06 <__ieee754_fmodf+0xea>
 800bec6:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800beca:	db1f      	blt.n	800bf0c <__ieee754_fmodf+0xf0>
 800becc:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800bed0:	317f      	adds	r1, #127	; 0x7f
 800bed2:	4323      	orrs	r3, r4
 800bed4:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800bed8:	ee00 3a10 	vmov	s0, r3
 800bedc:	e7b2      	b.n	800be44 <__ieee754_fmodf+0x28>
 800bede:	3801      	subs	r0, #1
 800bee0:	0049      	lsls	r1, r1, #1
 800bee2:	e7c2      	b.n	800be6a <__ieee754_fmodf+0x4e>
 800bee4:	15d8      	asrs	r0, r3, #23
 800bee6:	387f      	subs	r0, #127	; 0x7f
 800bee8:	e7c1      	b.n	800be6e <__ieee754_fmodf+0x52>
 800beea:	3901      	subs	r1, #1
 800beec:	007f      	lsls	r7, r7, #1
 800beee:	e7c4      	b.n	800be7a <__ieee754_fmodf+0x5e>
 800bef0:	15e9      	asrs	r1, r5, #23
 800bef2:	397f      	subs	r1, #127	; 0x7f
 800bef4:	e7c3      	b.n	800be7e <__ieee754_fmodf+0x62>
 800bef6:	2a00      	cmp	r2, #0
 800bef8:	da02      	bge.n	800bf00 <__ieee754_fmodf+0xe4>
 800befa:	005b      	lsls	r3, r3, #1
 800befc:	3801      	subs	r0, #1
 800befe:	e7d7      	b.n	800beb0 <__ieee754_fmodf+0x94>
 800bf00:	d0a6      	beq.n	800be50 <__ieee754_fmodf+0x34>
 800bf02:	0053      	lsls	r3, r2, #1
 800bf04:	e7fa      	b.n	800befc <__ieee754_fmodf+0xe0>
 800bf06:	005b      	lsls	r3, r3, #1
 800bf08:	3901      	subs	r1, #1
 800bf0a:	e7d9      	b.n	800bec0 <__ieee754_fmodf+0xa4>
 800bf0c:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800bf10:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800bf14:	3182      	adds	r1, #130	; 0x82
 800bf16:	410b      	asrs	r3, r1
 800bf18:	4323      	orrs	r3, r4
 800bf1a:	e7dd      	b.n	800bed8 <__ieee754_fmodf+0xbc>
 800bf1c:	08011520 	.word	0x08011520

0800bf20 <__ieee754_sqrtf>:
 800bf20:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bf24:	4770      	bx	lr

0800bf26 <finite>:
 800bf26:	b082      	sub	sp, #8
 800bf28:	ed8d 0b00 	vstr	d0, [sp]
 800bf2c:	9801      	ldr	r0, [sp, #4]
 800bf2e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800bf32:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bf36:	0fc0      	lsrs	r0, r0, #31
 800bf38:	b002      	add	sp, #8
 800bf3a:	4770      	bx	lr

0800bf3c <atof>:
 800bf3c:	2100      	movs	r1, #0
 800bf3e:	f001 bb65 	b.w	800d60c <strtod>

0800bf42 <atoi>:
 800bf42:	220a      	movs	r2, #10
 800bf44:	2100      	movs	r1, #0
 800bf46:	f001 bbf1 	b.w	800d72c <strtol>
	...

0800bf4c <__errno>:
 800bf4c:	4b01      	ldr	r3, [pc, #4]	; (800bf54 <__errno+0x8>)
 800bf4e:	6818      	ldr	r0, [r3, #0]
 800bf50:	4770      	bx	lr
 800bf52:	bf00      	nop
 800bf54:	2000004c 	.word	0x2000004c

0800bf58 <__libc_init_array>:
 800bf58:	b570      	push	{r4, r5, r6, lr}
 800bf5a:	4d0d      	ldr	r5, [pc, #52]	; (800bf90 <__libc_init_array+0x38>)
 800bf5c:	4c0d      	ldr	r4, [pc, #52]	; (800bf94 <__libc_init_array+0x3c>)
 800bf5e:	1b64      	subs	r4, r4, r5
 800bf60:	10a4      	asrs	r4, r4, #2
 800bf62:	2600      	movs	r6, #0
 800bf64:	42a6      	cmp	r6, r4
 800bf66:	d109      	bne.n	800bf7c <__libc_init_array+0x24>
 800bf68:	4d0b      	ldr	r5, [pc, #44]	; (800bf98 <__libc_init_array+0x40>)
 800bf6a:	4c0c      	ldr	r4, [pc, #48]	; (800bf9c <__libc_init_array+0x44>)
 800bf6c:	f004 f906 	bl	801017c <_init>
 800bf70:	1b64      	subs	r4, r4, r5
 800bf72:	10a4      	asrs	r4, r4, #2
 800bf74:	2600      	movs	r6, #0
 800bf76:	42a6      	cmp	r6, r4
 800bf78:	d105      	bne.n	800bf86 <__libc_init_array+0x2e>
 800bf7a:	bd70      	pop	{r4, r5, r6, pc}
 800bf7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf80:	4798      	blx	r3
 800bf82:	3601      	adds	r6, #1
 800bf84:	e7ee      	b.n	800bf64 <__libc_init_array+0xc>
 800bf86:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf8a:	4798      	blx	r3
 800bf8c:	3601      	adds	r6, #1
 800bf8e:	e7f2      	b.n	800bf76 <__libc_init_array+0x1e>
 800bf90:	080119dc 	.word	0x080119dc
 800bf94:	080119dc 	.word	0x080119dc
 800bf98:	080119dc 	.word	0x080119dc
 800bf9c:	080119e0 	.word	0x080119e0

0800bfa0 <memcpy>:
 800bfa0:	440a      	add	r2, r1
 800bfa2:	4291      	cmp	r1, r2
 800bfa4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bfa8:	d100      	bne.n	800bfac <memcpy+0xc>
 800bfaa:	4770      	bx	lr
 800bfac:	b510      	push	{r4, lr}
 800bfae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfb6:	4291      	cmp	r1, r2
 800bfb8:	d1f9      	bne.n	800bfae <memcpy+0xe>
 800bfba:	bd10      	pop	{r4, pc}

0800bfbc <memset>:
 800bfbc:	4402      	add	r2, r0
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d100      	bne.n	800bfc6 <memset+0xa>
 800bfc4:	4770      	bx	lr
 800bfc6:	f803 1b01 	strb.w	r1, [r3], #1
 800bfca:	e7f9      	b.n	800bfc0 <memset+0x4>

0800bfcc <__cvt>:
 800bfcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfd0:	ec55 4b10 	vmov	r4, r5, d0
 800bfd4:	2d00      	cmp	r5, #0
 800bfd6:	460e      	mov	r6, r1
 800bfd8:	4619      	mov	r1, r3
 800bfda:	462b      	mov	r3, r5
 800bfdc:	bfbb      	ittet	lt
 800bfde:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bfe2:	461d      	movlt	r5, r3
 800bfe4:	2300      	movge	r3, #0
 800bfe6:	232d      	movlt	r3, #45	; 0x2d
 800bfe8:	700b      	strb	r3, [r1, #0]
 800bfea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bfec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bff0:	4691      	mov	r9, r2
 800bff2:	f023 0820 	bic.w	r8, r3, #32
 800bff6:	bfbc      	itt	lt
 800bff8:	4622      	movlt	r2, r4
 800bffa:	4614      	movlt	r4, r2
 800bffc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c000:	d005      	beq.n	800c00e <__cvt+0x42>
 800c002:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c006:	d100      	bne.n	800c00a <__cvt+0x3e>
 800c008:	3601      	adds	r6, #1
 800c00a:	2102      	movs	r1, #2
 800c00c:	e000      	b.n	800c010 <__cvt+0x44>
 800c00e:	2103      	movs	r1, #3
 800c010:	ab03      	add	r3, sp, #12
 800c012:	9301      	str	r3, [sp, #4]
 800c014:	ab02      	add	r3, sp, #8
 800c016:	9300      	str	r3, [sp, #0]
 800c018:	ec45 4b10 	vmov	d0, r4, r5
 800c01c:	4653      	mov	r3, sl
 800c01e:	4632      	mov	r2, r6
 800c020:	f001 fcda 	bl	800d9d8 <_dtoa_r>
 800c024:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c028:	4607      	mov	r7, r0
 800c02a:	d102      	bne.n	800c032 <__cvt+0x66>
 800c02c:	f019 0f01 	tst.w	r9, #1
 800c030:	d022      	beq.n	800c078 <__cvt+0xac>
 800c032:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c036:	eb07 0906 	add.w	r9, r7, r6
 800c03a:	d110      	bne.n	800c05e <__cvt+0x92>
 800c03c:	783b      	ldrb	r3, [r7, #0]
 800c03e:	2b30      	cmp	r3, #48	; 0x30
 800c040:	d10a      	bne.n	800c058 <__cvt+0x8c>
 800c042:	2200      	movs	r2, #0
 800c044:	2300      	movs	r3, #0
 800c046:	4620      	mov	r0, r4
 800c048:	4629      	mov	r1, r5
 800c04a:	f7f4 fd5d 	bl	8000b08 <__aeabi_dcmpeq>
 800c04e:	b918      	cbnz	r0, 800c058 <__cvt+0x8c>
 800c050:	f1c6 0601 	rsb	r6, r6, #1
 800c054:	f8ca 6000 	str.w	r6, [sl]
 800c058:	f8da 3000 	ldr.w	r3, [sl]
 800c05c:	4499      	add	r9, r3
 800c05e:	2200      	movs	r2, #0
 800c060:	2300      	movs	r3, #0
 800c062:	4620      	mov	r0, r4
 800c064:	4629      	mov	r1, r5
 800c066:	f7f4 fd4f 	bl	8000b08 <__aeabi_dcmpeq>
 800c06a:	b108      	cbz	r0, 800c070 <__cvt+0xa4>
 800c06c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c070:	2230      	movs	r2, #48	; 0x30
 800c072:	9b03      	ldr	r3, [sp, #12]
 800c074:	454b      	cmp	r3, r9
 800c076:	d307      	bcc.n	800c088 <__cvt+0xbc>
 800c078:	9b03      	ldr	r3, [sp, #12]
 800c07a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c07c:	1bdb      	subs	r3, r3, r7
 800c07e:	4638      	mov	r0, r7
 800c080:	6013      	str	r3, [r2, #0]
 800c082:	b004      	add	sp, #16
 800c084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c088:	1c59      	adds	r1, r3, #1
 800c08a:	9103      	str	r1, [sp, #12]
 800c08c:	701a      	strb	r2, [r3, #0]
 800c08e:	e7f0      	b.n	800c072 <__cvt+0xa6>

0800c090 <__exponent>:
 800c090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c092:	4603      	mov	r3, r0
 800c094:	2900      	cmp	r1, #0
 800c096:	bfb8      	it	lt
 800c098:	4249      	neglt	r1, r1
 800c09a:	f803 2b02 	strb.w	r2, [r3], #2
 800c09e:	bfb4      	ite	lt
 800c0a0:	222d      	movlt	r2, #45	; 0x2d
 800c0a2:	222b      	movge	r2, #43	; 0x2b
 800c0a4:	2909      	cmp	r1, #9
 800c0a6:	7042      	strb	r2, [r0, #1]
 800c0a8:	dd2a      	ble.n	800c100 <__exponent+0x70>
 800c0aa:	f10d 0407 	add.w	r4, sp, #7
 800c0ae:	46a4      	mov	ip, r4
 800c0b0:	270a      	movs	r7, #10
 800c0b2:	46a6      	mov	lr, r4
 800c0b4:	460a      	mov	r2, r1
 800c0b6:	fb91 f6f7 	sdiv	r6, r1, r7
 800c0ba:	fb07 1516 	mls	r5, r7, r6, r1
 800c0be:	3530      	adds	r5, #48	; 0x30
 800c0c0:	2a63      	cmp	r2, #99	; 0x63
 800c0c2:	f104 34ff 	add.w	r4, r4, #4294967295
 800c0c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c0ca:	4631      	mov	r1, r6
 800c0cc:	dcf1      	bgt.n	800c0b2 <__exponent+0x22>
 800c0ce:	3130      	adds	r1, #48	; 0x30
 800c0d0:	f1ae 0502 	sub.w	r5, lr, #2
 800c0d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c0d8:	1c44      	adds	r4, r0, #1
 800c0da:	4629      	mov	r1, r5
 800c0dc:	4561      	cmp	r1, ip
 800c0de:	d30a      	bcc.n	800c0f6 <__exponent+0x66>
 800c0e0:	f10d 0209 	add.w	r2, sp, #9
 800c0e4:	eba2 020e 	sub.w	r2, r2, lr
 800c0e8:	4565      	cmp	r5, ip
 800c0ea:	bf88      	it	hi
 800c0ec:	2200      	movhi	r2, #0
 800c0ee:	4413      	add	r3, r2
 800c0f0:	1a18      	subs	r0, r3, r0
 800c0f2:	b003      	add	sp, #12
 800c0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c0fe:	e7ed      	b.n	800c0dc <__exponent+0x4c>
 800c100:	2330      	movs	r3, #48	; 0x30
 800c102:	3130      	adds	r1, #48	; 0x30
 800c104:	7083      	strb	r3, [r0, #2]
 800c106:	70c1      	strb	r1, [r0, #3]
 800c108:	1d03      	adds	r3, r0, #4
 800c10a:	e7f1      	b.n	800c0f0 <__exponent+0x60>

0800c10c <_printf_float>:
 800c10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c110:	ed2d 8b02 	vpush	{d8}
 800c114:	b08d      	sub	sp, #52	; 0x34
 800c116:	460c      	mov	r4, r1
 800c118:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c11c:	4616      	mov	r6, r2
 800c11e:	461f      	mov	r7, r3
 800c120:	4605      	mov	r5, r0
 800c122:	f002 ff6b 	bl	800effc <_localeconv_r>
 800c126:	f8d0 a000 	ldr.w	sl, [r0]
 800c12a:	4650      	mov	r0, sl
 800c12c:	f7f4 f870 	bl	8000210 <strlen>
 800c130:	2300      	movs	r3, #0
 800c132:	930a      	str	r3, [sp, #40]	; 0x28
 800c134:	6823      	ldr	r3, [r4, #0]
 800c136:	9305      	str	r3, [sp, #20]
 800c138:	f8d8 3000 	ldr.w	r3, [r8]
 800c13c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c140:	3307      	adds	r3, #7
 800c142:	f023 0307 	bic.w	r3, r3, #7
 800c146:	f103 0208 	add.w	r2, r3, #8
 800c14a:	f8c8 2000 	str.w	r2, [r8]
 800c14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c152:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c156:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c15a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c15e:	9307      	str	r3, [sp, #28]
 800c160:	f8cd 8018 	str.w	r8, [sp, #24]
 800c164:	ee08 0a10 	vmov	s16, r0
 800c168:	4b9f      	ldr	r3, [pc, #636]	; (800c3e8 <_printf_float+0x2dc>)
 800c16a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c16e:	f04f 32ff 	mov.w	r2, #4294967295
 800c172:	f7f4 fcfb 	bl	8000b6c <__aeabi_dcmpun>
 800c176:	bb88      	cbnz	r0, 800c1dc <_printf_float+0xd0>
 800c178:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c17c:	4b9a      	ldr	r3, [pc, #616]	; (800c3e8 <_printf_float+0x2dc>)
 800c17e:	f04f 32ff 	mov.w	r2, #4294967295
 800c182:	f7f4 fcd5 	bl	8000b30 <__aeabi_dcmple>
 800c186:	bb48      	cbnz	r0, 800c1dc <_printf_float+0xd0>
 800c188:	2200      	movs	r2, #0
 800c18a:	2300      	movs	r3, #0
 800c18c:	4640      	mov	r0, r8
 800c18e:	4649      	mov	r1, r9
 800c190:	f7f4 fcc4 	bl	8000b1c <__aeabi_dcmplt>
 800c194:	b110      	cbz	r0, 800c19c <_printf_float+0x90>
 800c196:	232d      	movs	r3, #45	; 0x2d
 800c198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c19c:	4b93      	ldr	r3, [pc, #588]	; (800c3ec <_printf_float+0x2e0>)
 800c19e:	4894      	ldr	r0, [pc, #592]	; (800c3f0 <_printf_float+0x2e4>)
 800c1a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c1a4:	bf94      	ite	ls
 800c1a6:	4698      	movls	r8, r3
 800c1a8:	4680      	movhi	r8, r0
 800c1aa:	2303      	movs	r3, #3
 800c1ac:	6123      	str	r3, [r4, #16]
 800c1ae:	9b05      	ldr	r3, [sp, #20]
 800c1b0:	f023 0204 	bic.w	r2, r3, #4
 800c1b4:	6022      	str	r2, [r4, #0]
 800c1b6:	f04f 0900 	mov.w	r9, #0
 800c1ba:	9700      	str	r7, [sp, #0]
 800c1bc:	4633      	mov	r3, r6
 800c1be:	aa0b      	add	r2, sp, #44	; 0x2c
 800c1c0:	4621      	mov	r1, r4
 800c1c2:	4628      	mov	r0, r5
 800c1c4:	f000 f9d8 	bl	800c578 <_printf_common>
 800c1c8:	3001      	adds	r0, #1
 800c1ca:	f040 8090 	bne.w	800c2ee <_printf_float+0x1e2>
 800c1ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d2:	b00d      	add	sp, #52	; 0x34
 800c1d4:	ecbd 8b02 	vpop	{d8}
 800c1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1dc:	4642      	mov	r2, r8
 800c1de:	464b      	mov	r3, r9
 800c1e0:	4640      	mov	r0, r8
 800c1e2:	4649      	mov	r1, r9
 800c1e4:	f7f4 fcc2 	bl	8000b6c <__aeabi_dcmpun>
 800c1e8:	b140      	cbz	r0, 800c1fc <_printf_float+0xf0>
 800c1ea:	464b      	mov	r3, r9
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	bfbc      	itt	lt
 800c1f0:	232d      	movlt	r3, #45	; 0x2d
 800c1f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c1f6:	487f      	ldr	r0, [pc, #508]	; (800c3f4 <_printf_float+0x2e8>)
 800c1f8:	4b7f      	ldr	r3, [pc, #508]	; (800c3f8 <_printf_float+0x2ec>)
 800c1fa:	e7d1      	b.n	800c1a0 <_printf_float+0x94>
 800c1fc:	6863      	ldr	r3, [r4, #4]
 800c1fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c202:	9206      	str	r2, [sp, #24]
 800c204:	1c5a      	adds	r2, r3, #1
 800c206:	d13f      	bne.n	800c288 <_printf_float+0x17c>
 800c208:	2306      	movs	r3, #6
 800c20a:	6063      	str	r3, [r4, #4]
 800c20c:	9b05      	ldr	r3, [sp, #20]
 800c20e:	6861      	ldr	r1, [r4, #4]
 800c210:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c214:	2300      	movs	r3, #0
 800c216:	9303      	str	r3, [sp, #12]
 800c218:	ab0a      	add	r3, sp, #40	; 0x28
 800c21a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c21e:	ab09      	add	r3, sp, #36	; 0x24
 800c220:	ec49 8b10 	vmov	d0, r8, r9
 800c224:	9300      	str	r3, [sp, #0]
 800c226:	6022      	str	r2, [r4, #0]
 800c228:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c22c:	4628      	mov	r0, r5
 800c22e:	f7ff fecd 	bl	800bfcc <__cvt>
 800c232:	9b06      	ldr	r3, [sp, #24]
 800c234:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c236:	2b47      	cmp	r3, #71	; 0x47
 800c238:	4680      	mov	r8, r0
 800c23a:	d108      	bne.n	800c24e <_printf_float+0x142>
 800c23c:	1cc8      	adds	r0, r1, #3
 800c23e:	db02      	blt.n	800c246 <_printf_float+0x13a>
 800c240:	6863      	ldr	r3, [r4, #4]
 800c242:	4299      	cmp	r1, r3
 800c244:	dd41      	ble.n	800c2ca <_printf_float+0x1be>
 800c246:	f1ab 0b02 	sub.w	fp, fp, #2
 800c24a:	fa5f fb8b 	uxtb.w	fp, fp
 800c24e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c252:	d820      	bhi.n	800c296 <_printf_float+0x18a>
 800c254:	3901      	subs	r1, #1
 800c256:	465a      	mov	r2, fp
 800c258:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c25c:	9109      	str	r1, [sp, #36]	; 0x24
 800c25e:	f7ff ff17 	bl	800c090 <__exponent>
 800c262:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c264:	1813      	adds	r3, r2, r0
 800c266:	2a01      	cmp	r2, #1
 800c268:	4681      	mov	r9, r0
 800c26a:	6123      	str	r3, [r4, #16]
 800c26c:	dc02      	bgt.n	800c274 <_printf_float+0x168>
 800c26e:	6822      	ldr	r2, [r4, #0]
 800c270:	07d2      	lsls	r2, r2, #31
 800c272:	d501      	bpl.n	800c278 <_printf_float+0x16c>
 800c274:	3301      	adds	r3, #1
 800c276:	6123      	str	r3, [r4, #16]
 800c278:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d09c      	beq.n	800c1ba <_printf_float+0xae>
 800c280:	232d      	movs	r3, #45	; 0x2d
 800c282:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c286:	e798      	b.n	800c1ba <_printf_float+0xae>
 800c288:	9a06      	ldr	r2, [sp, #24]
 800c28a:	2a47      	cmp	r2, #71	; 0x47
 800c28c:	d1be      	bne.n	800c20c <_printf_float+0x100>
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d1bc      	bne.n	800c20c <_printf_float+0x100>
 800c292:	2301      	movs	r3, #1
 800c294:	e7b9      	b.n	800c20a <_printf_float+0xfe>
 800c296:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c29a:	d118      	bne.n	800c2ce <_printf_float+0x1c2>
 800c29c:	2900      	cmp	r1, #0
 800c29e:	6863      	ldr	r3, [r4, #4]
 800c2a0:	dd0b      	ble.n	800c2ba <_printf_float+0x1ae>
 800c2a2:	6121      	str	r1, [r4, #16]
 800c2a4:	b913      	cbnz	r3, 800c2ac <_printf_float+0x1a0>
 800c2a6:	6822      	ldr	r2, [r4, #0]
 800c2a8:	07d0      	lsls	r0, r2, #31
 800c2aa:	d502      	bpl.n	800c2b2 <_printf_float+0x1a6>
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	440b      	add	r3, r1
 800c2b0:	6123      	str	r3, [r4, #16]
 800c2b2:	65a1      	str	r1, [r4, #88]	; 0x58
 800c2b4:	f04f 0900 	mov.w	r9, #0
 800c2b8:	e7de      	b.n	800c278 <_printf_float+0x16c>
 800c2ba:	b913      	cbnz	r3, 800c2c2 <_printf_float+0x1b6>
 800c2bc:	6822      	ldr	r2, [r4, #0]
 800c2be:	07d2      	lsls	r2, r2, #31
 800c2c0:	d501      	bpl.n	800c2c6 <_printf_float+0x1ba>
 800c2c2:	3302      	adds	r3, #2
 800c2c4:	e7f4      	b.n	800c2b0 <_printf_float+0x1a4>
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	e7f2      	b.n	800c2b0 <_printf_float+0x1a4>
 800c2ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c2ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2d0:	4299      	cmp	r1, r3
 800c2d2:	db05      	blt.n	800c2e0 <_printf_float+0x1d4>
 800c2d4:	6823      	ldr	r3, [r4, #0]
 800c2d6:	6121      	str	r1, [r4, #16]
 800c2d8:	07d8      	lsls	r0, r3, #31
 800c2da:	d5ea      	bpl.n	800c2b2 <_printf_float+0x1a6>
 800c2dc:	1c4b      	adds	r3, r1, #1
 800c2de:	e7e7      	b.n	800c2b0 <_printf_float+0x1a4>
 800c2e0:	2900      	cmp	r1, #0
 800c2e2:	bfd4      	ite	le
 800c2e4:	f1c1 0202 	rsble	r2, r1, #2
 800c2e8:	2201      	movgt	r2, #1
 800c2ea:	4413      	add	r3, r2
 800c2ec:	e7e0      	b.n	800c2b0 <_printf_float+0x1a4>
 800c2ee:	6823      	ldr	r3, [r4, #0]
 800c2f0:	055a      	lsls	r2, r3, #21
 800c2f2:	d407      	bmi.n	800c304 <_printf_float+0x1f8>
 800c2f4:	6923      	ldr	r3, [r4, #16]
 800c2f6:	4642      	mov	r2, r8
 800c2f8:	4631      	mov	r1, r6
 800c2fa:	4628      	mov	r0, r5
 800c2fc:	47b8      	blx	r7
 800c2fe:	3001      	adds	r0, #1
 800c300:	d12c      	bne.n	800c35c <_printf_float+0x250>
 800c302:	e764      	b.n	800c1ce <_printf_float+0xc2>
 800c304:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c308:	f240 80e0 	bls.w	800c4cc <_printf_float+0x3c0>
 800c30c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c310:	2200      	movs	r2, #0
 800c312:	2300      	movs	r3, #0
 800c314:	f7f4 fbf8 	bl	8000b08 <__aeabi_dcmpeq>
 800c318:	2800      	cmp	r0, #0
 800c31a:	d034      	beq.n	800c386 <_printf_float+0x27a>
 800c31c:	4a37      	ldr	r2, [pc, #220]	; (800c3fc <_printf_float+0x2f0>)
 800c31e:	2301      	movs	r3, #1
 800c320:	4631      	mov	r1, r6
 800c322:	4628      	mov	r0, r5
 800c324:	47b8      	blx	r7
 800c326:	3001      	adds	r0, #1
 800c328:	f43f af51 	beq.w	800c1ce <_printf_float+0xc2>
 800c32c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c330:	429a      	cmp	r2, r3
 800c332:	db02      	blt.n	800c33a <_printf_float+0x22e>
 800c334:	6823      	ldr	r3, [r4, #0]
 800c336:	07d8      	lsls	r0, r3, #31
 800c338:	d510      	bpl.n	800c35c <_printf_float+0x250>
 800c33a:	ee18 3a10 	vmov	r3, s16
 800c33e:	4652      	mov	r2, sl
 800c340:	4631      	mov	r1, r6
 800c342:	4628      	mov	r0, r5
 800c344:	47b8      	blx	r7
 800c346:	3001      	adds	r0, #1
 800c348:	f43f af41 	beq.w	800c1ce <_printf_float+0xc2>
 800c34c:	f04f 0800 	mov.w	r8, #0
 800c350:	f104 091a 	add.w	r9, r4, #26
 800c354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c356:	3b01      	subs	r3, #1
 800c358:	4543      	cmp	r3, r8
 800c35a:	dc09      	bgt.n	800c370 <_printf_float+0x264>
 800c35c:	6823      	ldr	r3, [r4, #0]
 800c35e:	079b      	lsls	r3, r3, #30
 800c360:	f100 8105 	bmi.w	800c56e <_printf_float+0x462>
 800c364:	68e0      	ldr	r0, [r4, #12]
 800c366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c368:	4298      	cmp	r0, r3
 800c36a:	bfb8      	it	lt
 800c36c:	4618      	movlt	r0, r3
 800c36e:	e730      	b.n	800c1d2 <_printf_float+0xc6>
 800c370:	2301      	movs	r3, #1
 800c372:	464a      	mov	r2, r9
 800c374:	4631      	mov	r1, r6
 800c376:	4628      	mov	r0, r5
 800c378:	47b8      	blx	r7
 800c37a:	3001      	adds	r0, #1
 800c37c:	f43f af27 	beq.w	800c1ce <_printf_float+0xc2>
 800c380:	f108 0801 	add.w	r8, r8, #1
 800c384:	e7e6      	b.n	800c354 <_printf_float+0x248>
 800c386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c388:	2b00      	cmp	r3, #0
 800c38a:	dc39      	bgt.n	800c400 <_printf_float+0x2f4>
 800c38c:	4a1b      	ldr	r2, [pc, #108]	; (800c3fc <_printf_float+0x2f0>)
 800c38e:	2301      	movs	r3, #1
 800c390:	4631      	mov	r1, r6
 800c392:	4628      	mov	r0, r5
 800c394:	47b8      	blx	r7
 800c396:	3001      	adds	r0, #1
 800c398:	f43f af19 	beq.w	800c1ce <_printf_float+0xc2>
 800c39c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	d102      	bne.n	800c3aa <_printf_float+0x29e>
 800c3a4:	6823      	ldr	r3, [r4, #0]
 800c3a6:	07d9      	lsls	r1, r3, #31
 800c3a8:	d5d8      	bpl.n	800c35c <_printf_float+0x250>
 800c3aa:	ee18 3a10 	vmov	r3, s16
 800c3ae:	4652      	mov	r2, sl
 800c3b0:	4631      	mov	r1, r6
 800c3b2:	4628      	mov	r0, r5
 800c3b4:	47b8      	blx	r7
 800c3b6:	3001      	adds	r0, #1
 800c3b8:	f43f af09 	beq.w	800c1ce <_printf_float+0xc2>
 800c3bc:	f04f 0900 	mov.w	r9, #0
 800c3c0:	f104 0a1a 	add.w	sl, r4, #26
 800c3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3c6:	425b      	negs	r3, r3
 800c3c8:	454b      	cmp	r3, r9
 800c3ca:	dc01      	bgt.n	800c3d0 <_printf_float+0x2c4>
 800c3cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3ce:	e792      	b.n	800c2f6 <_printf_float+0x1ea>
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	4652      	mov	r2, sl
 800c3d4:	4631      	mov	r1, r6
 800c3d6:	4628      	mov	r0, r5
 800c3d8:	47b8      	blx	r7
 800c3da:	3001      	adds	r0, #1
 800c3dc:	f43f aef7 	beq.w	800c1ce <_printf_float+0xc2>
 800c3e0:	f109 0901 	add.w	r9, r9, #1
 800c3e4:	e7ee      	b.n	800c3c4 <_printf_float+0x2b8>
 800c3e6:	bf00      	nop
 800c3e8:	7fefffff 	.word	0x7fefffff
 800c3ec:	0801152c 	.word	0x0801152c
 800c3f0:	08011530 	.word	0x08011530
 800c3f4:	08011538 	.word	0x08011538
 800c3f8:	08011534 	.word	0x08011534
 800c3fc:	0801153c 	.word	0x0801153c
 800c400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c402:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c404:	429a      	cmp	r2, r3
 800c406:	bfa8      	it	ge
 800c408:	461a      	movge	r2, r3
 800c40a:	2a00      	cmp	r2, #0
 800c40c:	4691      	mov	r9, r2
 800c40e:	dc37      	bgt.n	800c480 <_printf_float+0x374>
 800c410:	f04f 0b00 	mov.w	fp, #0
 800c414:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c418:	f104 021a 	add.w	r2, r4, #26
 800c41c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c41e:	9305      	str	r3, [sp, #20]
 800c420:	eba3 0309 	sub.w	r3, r3, r9
 800c424:	455b      	cmp	r3, fp
 800c426:	dc33      	bgt.n	800c490 <_printf_float+0x384>
 800c428:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c42c:	429a      	cmp	r2, r3
 800c42e:	db3b      	blt.n	800c4a8 <_printf_float+0x39c>
 800c430:	6823      	ldr	r3, [r4, #0]
 800c432:	07da      	lsls	r2, r3, #31
 800c434:	d438      	bmi.n	800c4a8 <_printf_float+0x39c>
 800c436:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c438:	9b05      	ldr	r3, [sp, #20]
 800c43a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c43c:	1ad3      	subs	r3, r2, r3
 800c43e:	eba2 0901 	sub.w	r9, r2, r1
 800c442:	4599      	cmp	r9, r3
 800c444:	bfa8      	it	ge
 800c446:	4699      	movge	r9, r3
 800c448:	f1b9 0f00 	cmp.w	r9, #0
 800c44c:	dc35      	bgt.n	800c4ba <_printf_float+0x3ae>
 800c44e:	f04f 0800 	mov.w	r8, #0
 800c452:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c456:	f104 0a1a 	add.w	sl, r4, #26
 800c45a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c45e:	1a9b      	subs	r3, r3, r2
 800c460:	eba3 0309 	sub.w	r3, r3, r9
 800c464:	4543      	cmp	r3, r8
 800c466:	f77f af79 	ble.w	800c35c <_printf_float+0x250>
 800c46a:	2301      	movs	r3, #1
 800c46c:	4652      	mov	r2, sl
 800c46e:	4631      	mov	r1, r6
 800c470:	4628      	mov	r0, r5
 800c472:	47b8      	blx	r7
 800c474:	3001      	adds	r0, #1
 800c476:	f43f aeaa 	beq.w	800c1ce <_printf_float+0xc2>
 800c47a:	f108 0801 	add.w	r8, r8, #1
 800c47e:	e7ec      	b.n	800c45a <_printf_float+0x34e>
 800c480:	4613      	mov	r3, r2
 800c482:	4631      	mov	r1, r6
 800c484:	4642      	mov	r2, r8
 800c486:	4628      	mov	r0, r5
 800c488:	47b8      	blx	r7
 800c48a:	3001      	adds	r0, #1
 800c48c:	d1c0      	bne.n	800c410 <_printf_float+0x304>
 800c48e:	e69e      	b.n	800c1ce <_printf_float+0xc2>
 800c490:	2301      	movs	r3, #1
 800c492:	4631      	mov	r1, r6
 800c494:	4628      	mov	r0, r5
 800c496:	9205      	str	r2, [sp, #20]
 800c498:	47b8      	blx	r7
 800c49a:	3001      	adds	r0, #1
 800c49c:	f43f ae97 	beq.w	800c1ce <_printf_float+0xc2>
 800c4a0:	9a05      	ldr	r2, [sp, #20]
 800c4a2:	f10b 0b01 	add.w	fp, fp, #1
 800c4a6:	e7b9      	b.n	800c41c <_printf_float+0x310>
 800c4a8:	ee18 3a10 	vmov	r3, s16
 800c4ac:	4652      	mov	r2, sl
 800c4ae:	4631      	mov	r1, r6
 800c4b0:	4628      	mov	r0, r5
 800c4b2:	47b8      	blx	r7
 800c4b4:	3001      	adds	r0, #1
 800c4b6:	d1be      	bne.n	800c436 <_printf_float+0x32a>
 800c4b8:	e689      	b.n	800c1ce <_printf_float+0xc2>
 800c4ba:	9a05      	ldr	r2, [sp, #20]
 800c4bc:	464b      	mov	r3, r9
 800c4be:	4442      	add	r2, r8
 800c4c0:	4631      	mov	r1, r6
 800c4c2:	4628      	mov	r0, r5
 800c4c4:	47b8      	blx	r7
 800c4c6:	3001      	adds	r0, #1
 800c4c8:	d1c1      	bne.n	800c44e <_printf_float+0x342>
 800c4ca:	e680      	b.n	800c1ce <_printf_float+0xc2>
 800c4cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4ce:	2a01      	cmp	r2, #1
 800c4d0:	dc01      	bgt.n	800c4d6 <_printf_float+0x3ca>
 800c4d2:	07db      	lsls	r3, r3, #31
 800c4d4:	d538      	bpl.n	800c548 <_printf_float+0x43c>
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	4642      	mov	r2, r8
 800c4da:	4631      	mov	r1, r6
 800c4dc:	4628      	mov	r0, r5
 800c4de:	47b8      	blx	r7
 800c4e0:	3001      	adds	r0, #1
 800c4e2:	f43f ae74 	beq.w	800c1ce <_printf_float+0xc2>
 800c4e6:	ee18 3a10 	vmov	r3, s16
 800c4ea:	4652      	mov	r2, sl
 800c4ec:	4631      	mov	r1, r6
 800c4ee:	4628      	mov	r0, r5
 800c4f0:	47b8      	blx	r7
 800c4f2:	3001      	adds	r0, #1
 800c4f4:	f43f ae6b 	beq.w	800c1ce <_printf_float+0xc2>
 800c4f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	2300      	movs	r3, #0
 800c500:	f7f4 fb02 	bl	8000b08 <__aeabi_dcmpeq>
 800c504:	b9d8      	cbnz	r0, 800c53e <_printf_float+0x432>
 800c506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c508:	f108 0201 	add.w	r2, r8, #1
 800c50c:	3b01      	subs	r3, #1
 800c50e:	4631      	mov	r1, r6
 800c510:	4628      	mov	r0, r5
 800c512:	47b8      	blx	r7
 800c514:	3001      	adds	r0, #1
 800c516:	d10e      	bne.n	800c536 <_printf_float+0x42a>
 800c518:	e659      	b.n	800c1ce <_printf_float+0xc2>
 800c51a:	2301      	movs	r3, #1
 800c51c:	4652      	mov	r2, sl
 800c51e:	4631      	mov	r1, r6
 800c520:	4628      	mov	r0, r5
 800c522:	47b8      	blx	r7
 800c524:	3001      	adds	r0, #1
 800c526:	f43f ae52 	beq.w	800c1ce <_printf_float+0xc2>
 800c52a:	f108 0801 	add.w	r8, r8, #1
 800c52e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c530:	3b01      	subs	r3, #1
 800c532:	4543      	cmp	r3, r8
 800c534:	dcf1      	bgt.n	800c51a <_printf_float+0x40e>
 800c536:	464b      	mov	r3, r9
 800c538:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c53c:	e6dc      	b.n	800c2f8 <_printf_float+0x1ec>
 800c53e:	f04f 0800 	mov.w	r8, #0
 800c542:	f104 0a1a 	add.w	sl, r4, #26
 800c546:	e7f2      	b.n	800c52e <_printf_float+0x422>
 800c548:	2301      	movs	r3, #1
 800c54a:	4642      	mov	r2, r8
 800c54c:	e7df      	b.n	800c50e <_printf_float+0x402>
 800c54e:	2301      	movs	r3, #1
 800c550:	464a      	mov	r2, r9
 800c552:	4631      	mov	r1, r6
 800c554:	4628      	mov	r0, r5
 800c556:	47b8      	blx	r7
 800c558:	3001      	adds	r0, #1
 800c55a:	f43f ae38 	beq.w	800c1ce <_printf_float+0xc2>
 800c55e:	f108 0801 	add.w	r8, r8, #1
 800c562:	68e3      	ldr	r3, [r4, #12]
 800c564:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c566:	1a5b      	subs	r3, r3, r1
 800c568:	4543      	cmp	r3, r8
 800c56a:	dcf0      	bgt.n	800c54e <_printf_float+0x442>
 800c56c:	e6fa      	b.n	800c364 <_printf_float+0x258>
 800c56e:	f04f 0800 	mov.w	r8, #0
 800c572:	f104 0919 	add.w	r9, r4, #25
 800c576:	e7f4      	b.n	800c562 <_printf_float+0x456>

0800c578 <_printf_common>:
 800c578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c57c:	4616      	mov	r6, r2
 800c57e:	4699      	mov	r9, r3
 800c580:	688a      	ldr	r2, [r1, #8]
 800c582:	690b      	ldr	r3, [r1, #16]
 800c584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c588:	4293      	cmp	r3, r2
 800c58a:	bfb8      	it	lt
 800c58c:	4613      	movlt	r3, r2
 800c58e:	6033      	str	r3, [r6, #0]
 800c590:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c594:	4607      	mov	r7, r0
 800c596:	460c      	mov	r4, r1
 800c598:	b10a      	cbz	r2, 800c59e <_printf_common+0x26>
 800c59a:	3301      	adds	r3, #1
 800c59c:	6033      	str	r3, [r6, #0]
 800c59e:	6823      	ldr	r3, [r4, #0]
 800c5a0:	0699      	lsls	r1, r3, #26
 800c5a2:	bf42      	ittt	mi
 800c5a4:	6833      	ldrmi	r3, [r6, #0]
 800c5a6:	3302      	addmi	r3, #2
 800c5a8:	6033      	strmi	r3, [r6, #0]
 800c5aa:	6825      	ldr	r5, [r4, #0]
 800c5ac:	f015 0506 	ands.w	r5, r5, #6
 800c5b0:	d106      	bne.n	800c5c0 <_printf_common+0x48>
 800c5b2:	f104 0a19 	add.w	sl, r4, #25
 800c5b6:	68e3      	ldr	r3, [r4, #12]
 800c5b8:	6832      	ldr	r2, [r6, #0]
 800c5ba:	1a9b      	subs	r3, r3, r2
 800c5bc:	42ab      	cmp	r3, r5
 800c5be:	dc26      	bgt.n	800c60e <_printf_common+0x96>
 800c5c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c5c4:	1e13      	subs	r3, r2, #0
 800c5c6:	6822      	ldr	r2, [r4, #0]
 800c5c8:	bf18      	it	ne
 800c5ca:	2301      	movne	r3, #1
 800c5cc:	0692      	lsls	r2, r2, #26
 800c5ce:	d42b      	bmi.n	800c628 <_printf_common+0xb0>
 800c5d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c5d4:	4649      	mov	r1, r9
 800c5d6:	4638      	mov	r0, r7
 800c5d8:	47c0      	blx	r8
 800c5da:	3001      	adds	r0, #1
 800c5dc:	d01e      	beq.n	800c61c <_printf_common+0xa4>
 800c5de:	6823      	ldr	r3, [r4, #0]
 800c5e0:	68e5      	ldr	r5, [r4, #12]
 800c5e2:	6832      	ldr	r2, [r6, #0]
 800c5e4:	f003 0306 	and.w	r3, r3, #6
 800c5e8:	2b04      	cmp	r3, #4
 800c5ea:	bf08      	it	eq
 800c5ec:	1aad      	subeq	r5, r5, r2
 800c5ee:	68a3      	ldr	r3, [r4, #8]
 800c5f0:	6922      	ldr	r2, [r4, #16]
 800c5f2:	bf0c      	ite	eq
 800c5f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c5f8:	2500      	movne	r5, #0
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	bfc4      	itt	gt
 800c5fe:	1a9b      	subgt	r3, r3, r2
 800c600:	18ed      	addgt	r5, r5, r3
 800c602:	2600      	movs	r6, #0
 800c604:	341a      	adds	r4, #26
 800c606:	42b5      	cmp	r5, r6
 800c608:	d11a      	bne.n	800c640 <_printf_common+0xc8>
 800c60a:	2000      	movs	r0, #0
 800c60c:	e008      	b.n	800c620 <_printf_common+0xa8>
 800c60e:	2301      	movs	r3, #1
 800c610:	4652      	mov	r2, sl
 800c612:	4649      	mov	r1, r9
 800c614:	4638      	mov	r0, r7
 800c616:	47c0      	blx	r8
 800c618:	3001      	adds	r0, #1
 800c61a:	d103      	bne.n	800c624 <_printf_common+0xac>
 800c61c:	f04f 30ff 	mov.w	r0, #4294967295
 800c620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c624:	3501      	adds	r5, #1
 800c626:	e7c6      	b.n	800c5b6 <_printf_common+0x3e>
 800c628:	18e1      	adds	r1, r4, r3
 800c62a:	1c5a      	adds	r2, r3, #1
 800c62c:	2030      	movs	r0, #48	; 0x30
 800c62e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c632:	4422      	add	r2, r4
 800c634:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c638:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c63c:	3302      	adds	r3, #2
 800c63e:	e7c7      	b.n	800c5d0 <_printf_common+0x58>
 800c640:	2301      	movs	r3, #1
 800c642:	4622      	mov	r2, r4
 800c644:	4649      	mov	r1, r9
 800c646:	4638      	mov	r0, r7
 800c648:	47c0      	blx	r8
 800c64a:	3001      	adds	r0, #1
 800c64c:	d0e6      	beq.n	800c61c <_printf_common+0xa4>
 800c64e:	3601      	adds	r6, #1
 800c650:	e7d9      	b.n	800c606 <_printf_common+0x8e>
	...

0800c654 <_printf_i>:
 800c654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c658:	460c      	mov	r4, r1
 800c65a:	4691      	mov	r9, r2
 800c65c:	7e27      	ldrb	r7, [r4, #24]
 800c65e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c660:	2f78      	cmp	r7, #120	; 0x78
 800c662:	4680      	mov	r8, r0
 800c664:	469a      	mov	sl, r3
 800c666:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c66a:	d807      	bhi.n	800c67c <_printf_i+0x28>
 800c66c:	2f62      	cmp	r7, #98	; 0x62
 800c66e:	d80a      	bhi.n	800c686 <_printf_i+0x32>
 800c670:	2f00      	cmp	r7, #0
 800c672:	f000 80d8 	beq.w	800c826 <_printf_i+0x1d2>
 800c676:	2f58      	cmp	r7, #88	; 0x58
 800c678:	f000 80a3 	beq.w	800c7c2 <_printf_i+0x16e>
 800c67c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c680:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c684:	e03a      	b.n	800c6fc <_printf_i+0xa8>
 800c686:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c68a:	2b15      	cmp	r3, #21
 800c68c:	d8f6      	bhi.n	800c67c <_printf_i+0x28>
 800c68e:	a001      	add	r0, pc, #4	; (adr r0, 800c694 <_printf_i+0x40>)
 800c690:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c694:	0800c6ed 	.word	0x0800c6ed
 800c698:	0800c701 	.word	0x0800c701
 800c69c:	0800c67d 	.word	0x0800c67d
 800c6a0:	0800c67d 	.word	0x0800c67d
 800c6a4:	0800c67d 	.word	0x0800c67d
 800c6a8:	0800c67d 	.word	0x0800c67d
 800c6ac:	0800c701 	.word	0x0800c701
 800c6b0:	0800c67d 	.word	0x0800c67d
 800c6b4:	0800c67d 	.word	0x0800c67d
 800c6b8:	0800c67d 	.word	0x0800c67d
 800c6bc:	0800c67d 	.word	0x0800c67d
 800c6c0:	0800c80d 	.word	0x0800c80d
 800c6c4:	0800c731 	.word	0x0800c731
 800c6c8:	0800c7ef 	.word	0x0800c7ef
 800c6cc:	0800c67d 	.word	0x0800c67d
 800c6d0:	0800c67d 	.word	0x0800c67d
 800c6d4:	0800c82f 	.word	0x0800c82f
 800c6d8:	0800c67d 	.word	0x0800c67d
 800c6dc:	0800c731 	.word	0x0800c731
 800c6e0:	0800c67d 	.word	0x0800c67d
 800c6e4:	0800c67d 	.word	0x0800c67d
 800c6e8:	0800c7f7 	.word	0x0800c7f7
 800c6ec:	680b      	ldr	r3, [r1, #0]
 800c6ee:	1d1a      	adds	r2, r3, #4
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	600a      	str	r2, [r1, #0]
 800c6f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c6f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	e0a3      	b.n	800c848 <_printf_i+0x1f4>
 800c700:	6825      	ldr	r5, [r4, #0]
 800c702:	6808      	ldr	r0, [r1, #0]
 800c704:	062e      	lsls	r6, r5, #24
 800c706:	f100 0304 	add.w	r3, r0, #4
 800c70a:	d50a      	bpl.n	800c722 <_printf_i+0xce>
 800c70c:	6805      	ldr	r5, [r0, #0]
 800c70e:	600b      	str	r3, [r1, #0]
 800c710:	2d00      	cmp	r5, #0
 800c712:	da03      	bge.n	800c71c <_printf_i+0xc8>
 800c714:	232d      	movs	r3, #45	; 0x2d
 800c716:	426d      	negs	r5, r5
 800c718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c71c:	485e      	ldr	r0, [pc, #376]	; (800c898 <_printf_i+0x244>)
 800c71e:	230a      	movs	r3, #10
 800c720:	e019      	b.n	800c756 <_printf_i+0x102>
 800c722:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c726:	6805      	ldr	r5, [r0, #0]
 800c728:	600b      	str	r3, [r1, #0]
 800c72a:	bf18      	it	ne
 800c72c:	b22d      	sxthne	r5, r5
 800c72e:	e7ef      	b.n	800c710 <_printf_i+0xbc>
 800c730:	680b      	ldr	r3, [r1, #0]
 800c732:	6825      	ldr	r5, [r4, #0]
 800c734:	1d18      	adds	r0, r3, #4
 800c736:	6008      	str	r0, [r1, #0]
 800c738:	0628      	lsls	r0, r5, #24
 800c73a:	d501      	bpl.n	800c740 <_printf_i+0xec>
 800c73c:	681d      	ldr	r5, [r3, #0]
 800c73e:	e002      	b.n	800c746 <_printf_i+0xf2>
 800c740:	0669      	lsls	r1, r5, #25
 800c742:	d5fb      	bpl.n	800c73c <_printf_i+0xe8>
 800c744:	881d      	ldrh	r5, [r3, #0]
 800c746:	4854      	ldr	r0, [pc, #336]	; (800c898 <_printf_i+0x244>)
 800c748:	2f6f      	cmp	r7, #111	; 0x6f
 800c74a:	bf0c      	ite	eq
 800c74c:	2308      	moveq	r3, #8
 800c74e:	230a      	movne	r3, #10
 800c750:	2100      	movs	r1, #0
 800c752:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c756:	6866      	ldr	r6, [r4, #4]
 800c758:	60a6      	str	r6, [r4, #8]
 800c75a:	2e00      	cmp	r6, #0
 800c75c:	bfa2      	ittt	ge
 800c75e:	6821      	ldrge	r1, [r4, #0]
 800c760:	f021 0104 	bicge.w	r1, r1, #4
 800c764:	6021      	strge	r1, [r4, #0]
 800c766:	b90d      	cbnz	r5, 800c76c <_printf_i+0x118>
 800c768:	2e00      	cmp	r6, #0
 800c76a:	d04d      	beq.n	800c808 <_printf_i+0x1b4>
 800c76c:	4616      	mov	r6, r2
 800c76e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c772:	fb03 5711 	mls	r7, r3, r1, r5
 800c776:	5dc7      	ldrb	r7, [r0, r7]
 800c778:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c77c:	462f      	mov	r7, r5
 800c77e:	42bb      	cmp	r3, r7
 800c780:	460d      	mov	r5, r1
 800c782:	d9f4      	bls.n	800c76e <_printf_i+0x11a>
 800c784:	2b08      	cmp	r3, #8
 800c786:	d10b      	bne.n	800c7a0 <_printf_i+0x14c>
 800c788:	6823      	ldr	r3, [r4, #0]
 800c78a:	07df      	lsls	r7, r3, #31
 800c78c:	d508      	bpl.n	800c7a0 <_printf_i+0x14c>
 800c78e:	6923      	ldr	r3, [r4, #16]
 800c790:	6861      	ldr	r1, [r4, #4]
 800c792:	4299      	cmp	r1, r3
 800c794:	bfde      	ittt	le
 800c796:	2330      	movle	r3, #48	; 0x30
 800c798:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c79c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c7a0:	1b92      	subs	r2, r2, r6
 800c7a2:	6122      	str	r2, [r4, #16]
 800c7a4:	f8cd a000 	str.w	sl, [sp]
 800c7a8:	464b      	mov	r3, r9
 800c7aa:	aa03      	add	r2, sp, #12
 800c7ac:	4621      	mov	r1, r4
 800c7ae:	4640      	mov	r0, r8
 800c7b0:	f7ff fee2 	bl	800c578 <_printf_common>
 800c7b4:	3001      	adds	r0, #1
 800c7b6:	d14c      	bne.n	800c852 <_printf_i+0x1fe>
 800c7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7bc:	b004      	add	sp, #16
 800c7be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7c2:	4835      	ldr	r0, [pc, #212]	; (800c898 <_printf_i+0x244>)
 800c7c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c7c8:	6823      	ldr	r3, [r4, #0]
 800c7ca:	680e      	ldr	r6, [r1, #0]
 800c7cc:	061f      	lsls	r7, r3, #24
 800c7ce:	f856 5b04 	ldr.w	r5, [r6], #4
 800c7d2:	600e      	str	r6, [r1, #0]
 800c7d4:	d514      	bpl.n	800c800 <_printf_i+0x1ac>
 800c7d6:	07d9      	lsls	r1, r3, #31
 800c7d8:	bf44      	itt	mi
 800c7da:	f043 0320 	orrmi.w	r3, r3, #32
 800c7de:	6023      	strmi	r3, [r4, #0]
 800c7e0:	b91d      	cbnz	r5, 800c7ea <_printf_i+0x196>
 800c7e2:	6823      	ldr	r3, [r4, #0]
 800c7e4:	f023 0320 	bic.w	r3, r3, #32
 800c7e8:	6023      	str	r3, [r4, #0]
 800c7ea:	2310      	movs	r3, #16
 800c7ec:	e7b0      	b.n	800c750 <_printf_i+0xfc>
 800c7ee:	6823      	ldr	r3, [r4, #0]
 800c7f0:	f043 0320 	orr.w	r3, r3, #32
 800c7f4:	6023      	str	r3, [r4, #0]
 800c7f6:	2378      	movs	r3, #120	; 0x78
 800c7f8:	4828      	ldr	r0, [pc, #160]	; (800c89c <_printf_i+0x248>)
 800c7fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c7fe:	e7e3      	b.n	800c7c8 <_printf_i+0x174>
 800c800:	065e      	lsls	r6, r3, #25
 800c802:	bf48      	it	mi
 800c804:	b2ad      	uxthmi	r5, r5
 800c806:	e7e6      	b.n	800c7d6 <_printf_i+0x182>
 800c808:	4616      	mov	r6, r2
 800c80a:	e7bb      	b.n	800c784 <_printf_i+0x130>
 800c80c:	680b      	ldr	r3, [r1, #0]
 800c80e:	6826      	ldr	r6, [r4, #0]
 800c810:	6960      	ldr	r0, [r4, #20]
 800c812:	1d1d      	adds	r5, r3, #4
 800c814:	600d      	str	r5, [r1, #0]
 800c816:	0635      	lsls	r5, r6, #24
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	d501      	bpl.n	800c820 <_printf_i+0x1cc>
 800c81c:	6018      	str	r0, [r3, #0]
 800c81e:	e002      	b.n	800c826 <_printf_i+0x1d2>
 800c820:	0671      	lsls	r1, r6, #25
 800c822:	d5fb      	bpl.n	800c81c <_printf_i+0x1c8>
 800c824:	8018      	strh	r0, [r3, #0]
 800c826:	2300      	movs	r3, #0
 800c828:	6123      	str	r3, [r4, #16]
 800c82a:	4616      	mov	r6, r2
 800c82c:	e7ba      	b.n	800c7a4 <_printf_i+0x150>
 800c82e:	680b      	ldr	r3, [r1, #0]
 800c830:	1d1a      	adds	r2, r3, #4
 800c832:	600a      	str	r2, [r1, #0]
 800c834:	681e      	ldr	r6, [r3, #0]
 800c836:	6862      	ldr	r2, [r4, #4]
 800c838:	2100      	movs	r1, #0
 800c83a:	4630      	mov	r0, r6
 800c83c:	f7f3 fcf0 	bl	8000220 <memchr>
 800c840:	b108      	cbz	r0, 800c846 <_printf_i+0x1f2>
 800c842:	1b80      	subs	r0, r0, r6
 800c844:	6060      	str	r0, [r4, #4]
 800c846:	6863      	ldr	r3, [r4, #4]
 800c848:	6123      	str	r3, [r4, #16]
 800c84a:	2300      	movs	r3, #0
 800c84c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c850:	e7a8      	b.n	800c7a4 <_printf_i+0x150>
 800c852:	6923      	ldr	r3, [r4, #16]
 800c854:	4632      	mov	r2, r6
 800c856:	4649      	mov	r1, r9
 800c858:	4640      	mov	r0, r8
 800c85a:	47d0      	blx	sl
 800c85c:	3001      	adds	r0, #1
 800c85e:	d0ab      	beq.n	800c7b8 <_printf_i+0x164>
 800c860:	6823      	ldr	r3, [r4, #0]
 800c862:	079b      	lsls	r3, r3, #30
 800c864:	d413      	bmi.n	800c88e <_printf_i+0x23a>
 800c866:	68e0      	ldr	r0, [r4, #12]
 800c868:	9b03      	ldr	r3, [sp, #12]
 800c86a:	4298      	cmp	r0, r3
 800c86c:	bfb8      	it	lt
 800c86e:	4618      	movlt	r0, r3
 800c870:	e7a4      	b.n	800c7bc <_printf_i+0x168>
 800c872:	2301      	movs	r3, #1
 800c874:	4632      	mov	r2, r6
 800c876:	4649      	mov	r1, r9
 800c878:	4640      	mov	r0, r8
 800c87a:	47d0      	blx	sl
 800c87c:	3001      	adds	r0, #1
 800c87e:	d09b      	beq.n	800c7b8 <_printf_i+0x164>
 800c880:	3501      	adds	r5, #1
 800c882:	68e3      	ldr	r3, [r4, #12]
 800c884:	9903      	ldr	r1, [sp, #12]
 800c886:	1a5b      	subs	r3, r3, r1
 800c888:	42ab      	cmp	r3, r5
 800c88a:	dcf2      	bgt.n	800c872 <_printf_i+0x21e>
 800c88c:	e7eb      	b.n	800c866 <_printf_i+0x212>
 800c88e:	2500      	movs	r5, #0
 800c890:	f104 0619 	add.w	r6, r4, #25
 800c894:	e7f5      	b.n	800c882 <_printf_i+0x22e>
 800c896:	bf00      	nop
 800c898:	0801153e 	.word	0x0801153e
 800c89c:	0801154f 	.word	0x0801154f

0800c8a0 <iprintf>:
 800c8a0:	b40f      	push	{r0, r1, r2, r3}
 800c8a2:	4b0a      	ldr	r3, [pc, #40]	; (800c8cc <iprintf+0x2c>)
 800c8a4:	b513      	push	{r0, r1, r4, lr}
 800c8a6:	681c      	ldr	r4, [r3, #0]
 800c8a8:	b124      	cbz	r4, 800c8b4 <iprintf+0x14>
 800c8aa:	69a3      	ldr	r3, [r4, #24]
 800c8ac:	b913      	cbnz	r3, 800c8b4 <iprintf+0x14>
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	f001 ff98 	bl	800e7e4 <__sinit>
 800c8b4:	ab05      	add	r3, sp, #20
 800c8b6:	9a04      	ldr	r2, [sp, #16]
 800c8b8:	68a1      	ldr	r1, [r4, #8]
 800c8ba:	9301      	str	r3, [sp, #4]
 800c8bc:	4620      	mov	r0, r4
 800c8be:	f003 f9c1 	bl	800fc44 <_vfiprintf_r>
 800c8c2:	b002      	add	sp, #8
 800c8c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8c8:	b004      	add	sp, #16
 800c8ca:	4770      	bx	lr
 800c8cc:	2000004c 	.word	0x2000004c

0800c8d0 <_puts_r>:
 800c8d0:	b570      	push	{r4, r5, r6, lr}
 800c8d2:	460e      	mov	r6, r1
 800c8d4:	4605      	mov	r5, r0
 800c8d6:	b118      	cbz	r0, 800c8e0 <_puts_r+0x10>
 800c8d8:	6983      	ldr	r3, [r0, #24]
 800c8da:	b90b      	cbnz	r3, 800c8e0 <_puts_r+0x10>
 800c8dc:	f001 ff82 	bl	800e7e4 <__sinit>
 800c8e0:	69ab      	ldr	r3, [r5, #24]
 800c8e2:	68ac      	ldr	r4, [r5, #8]
 800c8e4:	b913      	cbnz	r3, 800c8ec <_puts_r+0x1c>
 800c8e6:	4628      	mov	r0, r5
 800c8e8:	f001 ff7c 	bl	800e7e4 <__sinit>
 800c8ec:	4b2c      	ldr	r3, [pc, #176]	; (800c9a0 <_puts_r+0xd0>)
 800c8ee:	429c      	cmp	r4, r3
 800c8f0:	d120      	bne.n	800c934 <_puts_r+0x64>
 800c8f2:	686c      	ldr	r4, [r5, #4]
 800c8f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8f6:	07db      	lsls	r3, r3, #31
 800c8f8:	d405      	bmi.n	800c906 <_puts_r+0x36>
 800c8fa:	89a3      	ldrh	r3, [r4, #12]
 800c8fc:	0598      	lsls	r0, r3, #22
 800c8fe:	d402      	bmi.n	800c906 <_puts_r+0x36>
 800c900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c902:	f002 fb80 	bl	800f006 <__retarget_lock_acquire_recursive>
 800c906:	89a3      	ldrh	r3, [r4, #12]
 800c908:	0719      	lsls	r1, r3, #28
 800c90a:	d51d      	bpl.n	800c948 <_puts_r+0x78>
 800c90c:	6923      	ldr	r3, [r4, #16]
 800c90e:	b1db      	cbz	r3, 800c948 <_puts_r+0x78>
 800c910:	3e01      	subs	r6, #1
 800c912:	68a3      	ldr	r3, [r4, #8]
 800c914:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c918:	3b01      	subs	r3, #1
 800c91a:	60a3      	str	r3, [r4, #8]
 800c91c:	bb39      	cbnz	r1, 800c96e <_puts_r+0x9e>
 800c91e:	2b00      	cmp	r3, #0
 800c920:	da38      	bge.n	800c994 <_puts_r+0xc4>
 800c922:	4622      	mov	r2, r4
 800c924:	210a      	movs	r1, #10
 800c926:	4628      	mov	r0, r5
 800c928:	f000 ff0a 	bl	800d740 <__swbuf_r>
 800c92c:	3001      	adds	r0, #1
 800c92e:	d011      	beq.n	800c954 <_puts_r+0x84>
 800c930:	250a      	movs	r5, #10
 800c932:	e011      	b.n	800c958 <_puts_r+0x88>
 800c934:	4b1b      	ldr	r3, [pc, #108]	; (800c9a4 <_puts_r+0xd4>)
 800c936:	429c      	cmp	r4, r3
 800c938:	d101      	bne.n	800c93e <_puts_r+0x6e>
 800c93a:	68ac      	ldr	r4, [r5, #8]
 800c93c:	e7da      	b.n	800c8f4 <_puts_r+0x24>
 800c93e:	4b1a      	ldr	r3, [pc, #104]	; (800c9a8 <_puts_r+0xd8>)
 800c940:	429c      	cmp	r4, r3
 800c942:	bf08      	it	eq
 800c944:	68ec      	ldreq	r4, [r5, #12]
 800c946:	e7d5      	b.n	800c8f4 <_puts_r+0x24>
 800c948:	4621      	mov	r1, r4
 800c94a:	4628      	mov	r0, r5
 800c94c:	f000 ff4a 	bl	800d7e4 <__swsetup_r>
 800c950:	2800      	cmp	r0, #0
 800c952:	d0dd      	beq.n	800c910 <_puts_r+0x40>
 800c954:	f04f 35ff 	mov.w	r5, #4294967295
 800c958:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c95a:	07da      	lsls	r2, r3, #31
 800c95c:	d405      	bmi.n	800c96a <_puts_r+0x9a>
 800c95e:	89a3      	ldrh	r3, [r4, #12]
 800c960:	059b      	lsls	r3, r3, #22
 800c962:	d402      	bmi.n	800c96a <_puts_r+0x9a>
 800c964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c966:	f002 fb4f 	bl	800f008 <__retarget_lock_release_recursive>
 800c96a:	4628      	mov	r0, r5
 800c96c:	bd70      	pop	{r4, r5, r6, pc}
 800c96e:	2b00      	cmp	r3, #0
 800c970:	da04      	bge.n	800c97c <_puts_r+0xac>
 800c972:	69a2      	ldr	r2, [r4, #24]
 800c974:	429a      	cmp	r2, r3
 800c976:	dc06      	bgt.n	800c986 <_puts_r+0xb6>
 800c978:	290a      	cmp	r1, #10
 800c97a:	d004      	beq.n	800c986 <_puts_r+0xb6>
 800c97c:	6823      	ldr	r3, [r4, #0]
 800c97e:	1c5a      	adds	r2, r3, #1
 800c980:	6022      	str	r2, [r4, #0]
 800c982:	7019      	strb	r1, [r3, #0]
 800c984:	e7c5      	b.n	800c912 <_puts_r+0x42>
 800c986:	4622      	mov	r2, r4
 800c988:	4628      	mov	r0, r5
 800c98a:	f000 fed9 	bl	800d740 <__swbuf_r>
 800c98e:	3001      	adds	r0, #1
 800c990:	d1bf      	bne.n	800c912 <_puts_r+0x42>
 800c992:	e7df      	b.n	800c954 <_puts_r+0x84>
 800c994:	6823      	ldr	r3, [r4, #0]
 800c996:	250a      	movs	r5, #10
 800c998:	1c5a      	adds	r2, r3, #1
 800c99a:	6022      	str	r2, [r4, #0]
 800c99c:	701d      	strb	r5, [r3, #0]
 800c99e:	e7db      	b.n	800c958 <_puts_r+0x88>
 800c9a0:	08011768 	.word	0x08011768
 800c9a4:	08011788 	.word	0x08011788
 800c9a8:	08011748 	.word	0x08011748

0800c9ac <puts>:
 800c9ac:	4b02      	ldr	r3, [pc, #8]	; (800c9b8 <puts+0xc>)
 800c9ae:	4601      	mov	r1, r0
 800c9b0:	6818      	ldr	r0, [r3, #0]
 800c9b2:	f7ff bf8d 	b.w	800c8d0 <_puts_r>
 800c9b6:	bf00      	nop
 800c9b8:	2000004c 	.word	0x2000004c

0800c9bc <sulp>:
 800c9bc:	b570      	push	{r4, r5, r6, lr}
 800c9be:	4604      	mov	r4, r0
 800c9c0:	460d      	mov	r5, r1
 800c9c2:	ec45 4b10 	vmov	d0, r4, r5
 800c9c6:	4616      	mov	r6, r2
 800c9c8:	f002 ff0a 	bl	800f7e0 <__ulp>
 800c9cc:	ec51 0b10 	vmov	r0, r1, d0
 800c9d0:	b17e      	cbz	r6, 800c9f2 <sulp+0x36>
 800c9d2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c9d6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	dd09      	ble.n	800c9f2 <sulp+0x36>
 800c9de:	051b      	lsls	r3, r3, #20
 800c9e0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c9e4:	2400      	movs	r4, #0
 800c9e6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c9ea:	4622      	mov	r2, r4
 800c9ec:	462b      	mov	r3, r5
 800c9ee:	f7f3 fe23 	bl	8000638 <__aeabi_dmul>
 800c9f2:	bd70      	pop	{r4, r5, r6, pc}
 800c9f4:	0000      	movs	r0, r0
	...

0800c9f8 <_strtod_l>:
 800c9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9fc:	b0a3      	sub	sp, #140	; 0x8c
 800c9fe:	461f      	mov	r7, r3
 800ca00:	2300      	movs	r3, #0
 800ca02:	931e      	str	r3, [sp, #120]	; 0x78
 800ca04:	4ba4      	ldr	r3, [pc, #656]	; (800cc98 <_strtod_l+0x2a0>)
 800ca06:	9219      	str	r2, [sp, #100]	; 0x64
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	9307      	str	r3, [sp, #28]
 800ca0c:	4604      	mov	r4, r0
 800ca0e:	4618      	mov	r0, r3
 800ca10:	4688      	mov	r8, r1
 800ca12:	f7f3 fbfd 	bl	8000210 <strlen>
 800ca16:	f04f 0a00 	mov.w	sl, #0
 800ca1a:	4605      	mov	r5, r0
 800ca1c:	f04f 0b00 	mov.w	fp, #0
 800ca20:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800ca24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca26:	781a      	ldrb	r2, [r3, #0]
 800ca28:	2a2b      	cmp	r2, #43	; 0x2b
 800ca2a:	d04c      	beq.n	800cac6 <_strtod_l+0xce>
 800ca2c:	d839      	bhi.n	800caa2 <_strtod_l+0xaa>
 800ca2e:	2a0d      	cmp	r2, #13
 800ca30:	d832      	bhi.n	800ca98 <_strtod_l+0xa0>
 800ca32:	2a08      	cmp	r2, #8
 800ca34:	d832      	bhi.n	800ca9c <_strtod_l+0xa4>
 800ca36:	2a00      	cmp	r2, #0
 800ca38:	d03c      	beq.n	800cab4 <_strtod_l+0xbc>
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	930e      	str	r3, [sp, #56]	; 0x38
 800ca3e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ca40:	7833      	ldrb	r3, [r6, #0]
 800ca42:	2b30      	cmp	r3, #48	; 0x30
 800ca44:	f040 80b4 	bne.w	800cbb0 <_strtod_l+0x1b8>
 800ca48:	7873      	ldrb	r3, [r6, #1]
 800ca4a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ca4e:	2b58      	cmp	r3, #88	; 0x58
 800ca50:	d16c      	bne.n	800cb2c <_strtod_l+0x134>
 800ca52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca54:	9301      	str	r3, [sp, #4]
 800ca56:	ab1e      	add	r3, sp, #120	; 0x78
 800ca58:	9702      	str	r7, [sp, #8]
 800ca5a:	9300      	str	r3, [sp, #0]
 800ca5c:	4a8f      	ldr	r2, [pc, #572]	; (800cc9c <_strtod_l+0x2a4>)
 800ca5e:	ab1f      	add	r3, sp, #124	; 0x7c
 800ca60:	a91d      	add	r1, sp, #116	; 0x74
 800ca62:	4620      	mov	r0, r4
 800ca64:	f001 ffc2 	bl	800e9ec <__gethex>
 800ca68:	f010 0707 	ands.w	r7, r0, #7
 800ca6c:	4605      	mov	r5, r0
 800ca6e:	d005      	beq.n	800ca7c <_strtod_l+0x84>
 800ca70:	2f06      	cmp	r7, #6
 800ca72:	d12a      	bne.n	800caca <_strtod_l+0xd2>
 800ca74:	3601      	adds	r6, #1
 800ca76:	2300      	movs	r3, #0
 800ca78:	961d      	str	r6, [sp, #116]	; 0x74
 800ca7a:	930e      	str	r3, [sp, #56]	; 0x38
 800ca7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	f040 8596 	bne.w	800d5b0 <_strtod_l+0xbb8>
 800ca84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca86:	b1db      	cbz	r3, 800cac0 <_strtod_l+0xc8>
 800ca88:	4652      	mov	r2, sl
 800ca8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ca8e:	ec43 2b10 	vmov	d0, r2, r3
 800ca92:	b023      	add	sp, #140	; 0x8c
 800ca94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca98:	2a20      	cmp	r2, #32
 800ca9a:	d1ce      	bne.n	800ca3a <_strtod_l+0x42>
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	931d      	str	r3, [sp, #116]	; 0x74
 800caa0:	e7c0      	b.n	800ca24 <_strtod_l+0x2c>
 800caa2:	2a2d      	cmp	r2, #45	; 0x2d
 800caa4:	d1c9      	bne.n	800ca3a <_strtod_l+0x42>
 800caa6:	2201      	movs	r2, #1
 800caa8:	920e      	str	r2, [sp, #56]	; 0x38
 800caaa:	1c5a      	adds	r2, r3, #1
 800caac:	921d      	str	r2, [sp, #116]	; 0x74
 800caae:	785b      	ldrb	r3, [r3, #1]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d1c4      	bne.n	800ca3e <_strtod_l+0x46>
 800cab4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cab6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800caba:	2b00      	cmp	r3, #0
 800cabc:	f040 8576 	bne.w	800d5ac <_strtod_l+0xbb4>
 800cac0:	4652      	mov	r2, sl
 800cac2:	465b      	mov	r3, fp
 800cac4:	e7e3      	b.n	800ca8e <_strtod_l+0x96>
 800cac6:	2200      	movs	r2, #0
 800cac8:	e7ee      	b.n	800caa8 <_strtod_l+0xb0>
 800caca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cacc:	b13a      	cbz	r2, 800cade <_strtod_l+0xe6>
 800cace:	2135      	movs	r1, #53	; 0x35
 800cad0:	a820      	add	r0, sp, #128	; 0x80
 800cad2:	f002 ff90 	bl	800f9f6 <__copybits>
 800cad6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cad8:	4620      	mov	r0, r4
 800cada:	f002 fb55 	bl	800f188 <_Bfree>
 800cade:	3f01      	subs	r7, #1
 800cae0:	2f05      	cmp	r7, #5
 800cae2:	d807      	bhi.n	800caf4 <_strtod_l+0xfc>
 800cae4:	e8df f007 	tbb	[pc, r7]
 800cae8:	1d180b0e 	.word	0x1d180b0e
 800caec:	030e      	.short	0x030e
 800caee:	f04f 0b00 	mov.w	fp, #0
 800caf2:	46da      	mov	sl, fp
 800caf4:	0728      	lsls	r0, r5, #28
 800caf6:	d5c1      	bpl.n	800ca7c <_strtod_l+0x84>
 800caf8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800cafc:	e7be      	b.n	800ca7c <_strtod_l+0x84>
 800cafe:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800cb02:	e7f7      	b.n	800caf4 <_strtod_l+0xfc>
 800cb04:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800cb08:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800cb0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cb0e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cb12:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cb16:	e7ed      	b.n	800caf4 <_strtod_l+0xfc>
 800cb18:	f8df b184 	ldr.w	fp, [pc, #388]	; 800cca0 <_strtod_l+0x2a8>
 800cb1c:	f04f 0a00 	mov.w	sl, #0
 800cb20:	e7e8      	b.n	800caf4 <_strtod_l+0xfc>
 800cb22:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cb26:	f04f 3aff 	mov.w	sl, #4294967295
 800cb2a:	e7e3      	b.n	800caf4 <_strtod_l+0xfc>
 800cb2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cb2e:	1c5a      	adds	r2, r3, #1
 800cb30:	921d      	str	r2, [sp, #116]	; 0x74
 800cb32:	785b      	ldrb	r3, [r3, #1]
 800cb34:	2b30      	cmp	r3, #48	; 0x30
 800cb36:	d0f9      	beq.n	800cb2c <_strtod_l+0x134>
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d09f      	beq.n	800ca7c <_strtod_l+0x84>
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	f04f 0900 	mov.w	r9, #0
 800cb42:	9304      	str	r3, [sp, #16]
 800cb44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cb46:	930a      	str	r3, [sp, #40]	; 0x28
 800cb48:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800cb4c:	464f      	mov	r7, r9
 800cb4e:	220a      	movs	r2, #10
 800cb50:	981d      	ldr	r0, [sp, #116]	; 0x74
 800cb52:	7806      	ldrb	r6, [r0, #0]
 800cb54:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800cb58:	b2d9      	uxtb	r1, r3
 800cb5a:	2909      	cmp	r1, #9
 800cb5c:	d92a      	bls.n	800cbb4 <_strtod_l+0x1bc>
 800cb5e:	9907      	ldr	r1, [sp, #28]
 800cb60:	462a      	mov	r2, r5
 800cb62:	f003 f9fc 	bl	800ff5e <strncmp>
 800cb66:	b398      	cbz	r0, 800cbd0 <_strtod_l+0x1d8>
 800cb68:	2000      	movs	r0, #0
 800cb6a:	4633      	mov	r3, r6
 800cb6c:	463d      	mov	r5, r7
 800cb6e:	9007      	str	r0, [sp, #28]
 800cb70:	4602      	mov	r2, r0
 800cb72:	2b65      	cmp	r3, #101	; 0x65
 800cb74:	d001      	beq.n	800cb7a <_strtod_l+0x182>
 800cb76:	2b45      	cmp	r3, #69	; 0x45
 800cb78:	d118      	bne.n	800cbac <_strtod_l+0x1b4>
 800cb7a:	b91d      	cbnz	r5, 800cb84 <_strtod_l+0x18c>
 800cb7c:	9b04      	ldr	r3, [sp, #16]
 800cb7e:	4303      	orrs	r3, r0
 800cb80:	d098      	beq.n	800cab4 <_strtod_l+0xbc>
 800cb82:	2500      	movs	r5, #0
 800cb84:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800cb88:	f108 0301 	add.w	r3, r8, #1
 800cb8c:	931d      	str	r3, [sp, #116]	; 0x74
 800cb8e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800cb92:	2b2b      	cmp	r3, #43	; 0x2b
 800cb94:	d075      	beq.n	800cc82 <_strtod_l+0x28a>
 800cb96:	2b2d      	cmp	r3, #45	; 0x2d
 800cb98:	d07b      	beq.n	800cc92 <_strtod_l+0x29a>
 800cb9a:	f04f 0c00 	mov.w	ip, #0
 800cb9e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800cba2:	2909      	cmp	r1, #9
 800cba4:	f240 8082 	bls.w	800ccac <_strtod_l+0x2b4>
 800cba8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800cbac:	2600      	movs	r6, #0
 800cbae:	e09d      	b.n	800ccec <_strtod_l+0x2f4>
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	e7c4      	b.n	800cb3e <_strtod_l+0x146>
 800cbb4:	2f08      	cmp	r7, #8
 800cbb6:	bfd8      	it	le
 800cbb8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800cbba:	f100 0001 	add.w	r0, r0, #1
 800cbbe:	bfda      	itte	le
 800cbc0:	fb02 3301 	mlale	r3, r2, r1, r3
 800cbc4:	9309      	strle	r3, [sp, #36]	; 0x24
 800cbc6:	fb02 3909 	mlagt	r9, r2, r9, r3
 800cbca:	3701      	adds	r7, #1
 800cbcc:	901d      	str	r0, [sp, #116]	; 0x74
 800cbce:	e7bf      	b.n	800cb50 <_strtod_l+0x158>
 800cbd0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cbd2:	195a      	adds	r2, r3, r5
 800cbd4:	921d      	str	r2, [sp, #116]	; 0x74
 800cbd6:	5d5b      	ldrb	r3, [r3, r5]
 800cbd8:	2f00      	cmp	r7, #0
 800cbda:	d037      	beq.n	800cc4c <_strtod_l+0x254>
 800cbdc:	9007      	str	r0, [sp, #28]
 800cbde:	463d      	mov	r5, r7
 800cbe0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800cbe4:	2a09      	cmp	r2, #9
 800cbe6:	d912      	bls.n	800cc0e <_strtod_l+0x216>
 800cbe8:	2201      	movs	r2, #1
 800cbea:	e7c2      	b.n	800cb72 <_strtod_l+0x17a>
 800cbec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cbee:	1c5a      	adds	r2, r3, #1
 800cbf0:	921d      	str	r2, [sp, #116]	; 0x74
 800cbf2:	785b      	ldrb	r3, [r3, #1]
 800cbf4:	3001      	adds	r0, #1
 800cbf6:	2b30      	cmp	r3, #48	; 0x30
 800cbf8:	d0f8      	beq.n	800cbec <_strtod_l+0x1f4>
 800cbfa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800cbfe:	2a08      	cmp	r2, #8
 800cc00:	f200 84db 	bhi.w	800d5ba <_strtod_l+0xbc2>
 800cc04:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800cc06:	9007      	str	r0, [sp, #28]
 800cc08:	2000      	movs	r0, #0
 800cc0a:	920a      	str	r2, [sp, #40]	; 0x28
 800cc0c:	4605      	mov	r5, r0
 800cc0e:	3b30      	subs	r3, #48	; 0x30
 800cc10:	f100 0201 	add.w	r2, r0, #1
 800cc14:	d014      	beq.n	800cc40 <_strtod_l+0x248>
 800cc16:	9907      	ldr	r1, [sp, #28]
 800cc18:	4411      	add	r1, r2
 800cc1a:	9107      	str	r1, [sp, #28]
 800cc1c:	462a      	mov	r2, r5
 800cc1e:	eb00 0e05 	add.w	lr, r0, r5
 800cc22:	210a      	movs	r1, #10
 800cc24:	4572      	cmp	r2, lr
 800cc26:	d113      	bne.n	800cc50 <_strtod_l+0x258>
 800cc28:	182a      	adds	r2, r5, r0
 800cc2a:	2a08      	cmp	r2, #8
 800cc2c:	f105 0501 	add.w	r5, r5, #1
 800cc30:	4405      	add	r5, r0
 800cc32:	dc1c      	bgt.n	800cc6e <_strtod_l+0x276>
 800cc34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc36:	220a      	movs	r2, #10
 800cc38:	fb02 3301 	mla	r3, r2, r1, r3
 800cc3c:	9309      	str	r3, [sp, #36]	; 0x24
 800cc3e:	2200      	movs	r2, #0
 800cc40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cc42:	1c59      	adds	r1, r3, #1
 800cc44:	911d      	str	r1, [sp, #116]	; 0x74
 800cc46:	785b      	ldrb	r3, [r3, #1]
 800cc48:	4610      	mov	r0, r2
 800cc4a:	e7c9      	b.n	800cbe0 <_strtod_l+0x1e8>
 800cc4c:	4638      	mov	r0, r7
 800cc4e:	e7d2      	b.n	800cbf6 <_strtod_l+0x1fe>
 800cc50:	2a08      	cmp	r2, #8
 800cc52:	dc04      	bgt.n	800cc5e <_strtod_l+0x266>
 800cc54:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cc56:	434e      	muls	r6, r1
 800cc58:	9609      	str	r6, [sp, #36]	; 0x24
 800cc5a:	3201      	adds	r2, #1
 800cc5c:	e7e2      	b.n	800cc24 <_strtod_l+0x22c>
 800cc5e:	f102 0c01 	add.w	ip, r2, #1
 800cc62:	f1bc 0f10 	cmp.w	ip, #16
 800cc66:	bfd8      	it	le
 800cc68:	fb01 f909 	mulle.w	r9, r1, r9
 800cc6c:	e7f5      	b.n	800cc5a <_strtod_l+0x262>
 800cc6e:	2d10      	cmp	r5, #16
 800cc70:	bfdc      	itt	le
 800cc72:	220a      	movle	r2, #10
 800cc74:	fb02 3909 	mlale	r9, r2, r9, r3
 800cc78:	e7e1      	b.n	800cc3e <_strtod_l+0x246>
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	9307      	str	r3, [sp, #28]
 800cc7e:	2201      	movs	r2, #1
 800cc80:	e77c      	b.n	800cb7c <_strtod_l+0x184>
 800cc82:	f04f 0c00 	mov.w	ip, #0
 800cc86:	f108 0302 	add.w	r3, r8, #2
 800cc8a:	931d      	str	r3, [sp, #116]	; 0x74
 800cc8c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800cc90:	e785      	b.n	800cb9e <_strtod_l+0x1a6>
 800cc92:	f04f 0c01 	mov.w	ip, #1
 800cc96:	e7f6      	b.n	800cc86 <_strtod_l+0x28e>
 800cc98:	08011814 	.word	0x08011814
 800cc9c:	08011560 	.word	0x08011560
 800cca0:	7ff00000 	.word	0x7ff00000
 800cca4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cca6:	1c59      	adds	r1, r3, #1
 800cca8:	911d      	str	r1, [sp, #116]	; 0x74
 800ccaa:	785b      	ldrb	r3, [r3, #1]
 800ccac:	2b30      	cmp	r3, #48	; 0x30
 800ccae:	d0f9      	beq.n	800cca4 <_strtod_l+0x2ac>
 800ccb0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800ccb4:	2908      	cmp	r1, #8
 800ccb6:	f63f af79 	bhi.w	800cbac <_strtod_l+0x1b4>
 800ccba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800ccbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ccc0:	9308      	str	r3, [sp, #32]
 800ccc2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ccc4:	1c59      	adds	r1, r3, #1
 800ccc6:	911d      	str	r1, [sp, #116]	; 0x74
 800ccc8:	785b      	ldrb	r3, [r3, #1]
 800ccca:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800ccce:	2e09      	cmp	r6, #9
 800ccd0:	d937      	bls.n	800cd42 <_strtod_l+0x34a>
 800ccd2:	9e08      	ldr	r6, [sp, #32]
 800ccd4:	1b89      	subs	r1, r1, r6
 800ccd6:	2908      	cmp	r1, #8
 800ccd8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ccdc:	dc02      	bgt.n	800cce4 <_strtod_l+0x2ec>
 800ccde:	4576      	cmp	r6, lr
 800cce0:	bfa8      	it	ge
 800cce2:	4676      	movge	r6, lr
 800cce4:	f1bc 0f00 	cmp.w	ip, #0
 800cce8:	d000      	beq.n	800ccec <_strtod_l+0x2f4>
 800ccea:	4276      	negs	r6, r6
 800ccec:	2d00      	cmp	r5, #0
 800ccee:	d14f      	bne.n	800cd90 <_strtod_l+0x398>
 800ccf0:	9904      	ldr	r1, [sp, #16]
 800ccf2:	4301      	orrs	r1, r0
 800ccf4:	f47f aec2 	bne.w	800ca7c <_strtod_l+0x84>
 800ccf8:	2a00      	cmp	r2, #0
 800ccfa:	f47f aedb 	bne.w	800cab4 <_strtod_l+0xbc>
 800ccfe:	2b69      	cmp	r3, #105	; 0x69
 800cd00:	d027      	beq.n	800cd52 <_strtod_l+0x35a>
 800cd02:	dc24      	bgt.n	800cd4e <_strtod_l+0x356>
 800cd04:	2b49      	cmp	r3, #73	; 0x49
 800cd06:	d024      	beq.n	800cd52 <_strtod_l+0x35a>
 800cd08:	2b4e      	cmp	r3, #78	; 0x4e
 800cd0a:	f47f aed3 	bne.w	800cab4 <_strtod_l+0xbc>
 800cd0e:	499e      	ldr	r1, [pc, #632]	; (800cf88 <_strtod_l+0x590>)
 800cd10:	a81d      	add	r0, sp, #116	; 0x74
 800cd12:	f002 f8c3 	bl	800ee9c <__match>
 800cd16:	2800      	cmp	r0, #0
 800cd18:	f43f aecc 	beq.w	800cab4 <_strtod_l+0xbc>
 800cd1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	2b28      	cmp	r3, #40	; 0x28
 800cd22:	d12d      	bne.n	800cd80 <_strtod_l+0x388>
 800cd24:	4999      	ldr	r1, [pc, #612]	; (800cf8c <_strtod_l+0x594>)
 800cd26:	aa20      	add	r2, sp, #128	; 0x80
 800cd28:	a81d      	add	r0, sp, #116	; 0x74
 800cd2a:	f002 f8cb 	bl	800eec4 <__hexnan>
 800cd2e:	2805      	cmp	r0, #5
 800cd30:	d126      	bne.n	800cd80 <_strtod_l+0x388>
 800cd32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd34:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800cd38:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800cd3c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800cd40:	e69c      	b.n	800ca7c <_strtod_l+0x84>
 800cd42:	210a      	movs	r1, #10
 800cd44:	fb01 3e0e 	mla	lr, r1, lr, r3
 800cd48:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800cd4c:	e7b9      	b.n	800ccc2 <_strtod_l+0x2ca>
 800cd4e:	2b6e      	cmp	r3, #110	; 0x6e
 800cd50:	e7db      	b.n	800cd0a <_strtod_l+0x312>
 800cd52:	498f      	ldr	r1, [pc, #572]	; (800cf90 <_strtod_l+0x598>)
 800cd54:	a81d      	add	r0, sp, #116	; 0x74
 800cd56:	f002 f8a1 	bl	800ee9c <__match>
 800cd5a:	2800      	cmp	r0, #0
 800cd5c:	f43f aeaa 	beq.w	800cab4 <_strtod_l+0xbc>
 800cd60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cd62:	498c      	ldr	r1, [pc, #560]	; (800cf94 <_strtod_l+0x59c>)
 800cd64:	3b01      	subs	r3, #1
 800cd66:	a81d      	add	r0, sp, #116	; 0x74
 800cd68:	931d      	str	r3, [sp, #116]	; 0x74
 800cd6a:	f002 f897 	bl	800ee9c <__match>
 800cd6e:	b910      	cbnz	r0, 800cd76 <_strtod_l+0x37e>
 800cd70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cd72:	3301      	adds	r3, #1
 800cd74:	931d      	str	r3, [sp, #116]	; 0x74
 800cd76:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800cfa4 <_strtod_l+0x5ac>
 800cd7a:	f04f 0a00 	mov.w	sl, #0
 800cd7e:	e67d      	b.n	800ca7c <_strtod_l+0x84>
 800cd80:	4885      	ldr	r0, [pc, #532]	; (800cf98 <_strtod_l+0x5a0>)
 800cd82:	f003 f891 	bl	800fea8 <nan>
 800cd86:	ed8d 0b04 	vstr	d0, [sp, #16]
 800cd8a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800cd8e:	e675      	b.n	800ca7c <_strtod_l+0x84>
 800cd90:	9b07      	ldr	r3, [sp, #28]
 800cd92:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd94:	1af3      	subs	r3, r6, r3
 800cd96:	2f00      	cmp	r7, #0
 800cd98:	bf08      	it	eq
 800cd9a:	462f      	moveq	r7, r5
 800cd9c:	2d10      	cmp	r5, #16
 800cd9e:	9308      	str	r3, [sp, #32]
 800cda0:	46a8      	mov	r8, r5
 800cda2:	bfa8      	it	ge
 800cda4:	f04f 0810 	movge.w	r8, #16
 800cda8:	f7f3 fbcc 	bl	8000544 <__aeabi_ui2d>
 800cdac:	2d09      	cmp	r5, #9
 800cdae:	4682      	mov	sl, r0
 800cdb0:	468b      	mov	fp, r1
 800cdb2:	dd13      	ble.n	800cddc <_strtod_l+0x3e4>
 800cdb4:	4b79      	ldr	r3, [pc, #484]	; (800cf9c <_strtod_l+0x5a4>)
 800cdb6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cdba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cdbe:	f7f3 fc3b 	bl	8000638 <__aeabi_dmul>
 800cdc2:	4682      	mov	sl, r0
 800cdc4:	4648      	mov	r0, r9
 800cdc6:	468b      	mov	fp, r1
 800cdc8:	f7f3 fbbc 	bl	8000544 <__aeabi_ui2d>
 800cdcc:	4602      	mov	r2, r0
 800cdce:	460b      	mov	r3, r1
 800cdd0:	4650      	mov	r0, sl
 800cdd2:	4659      	mov	r1, fp
 800cdd4:	f7f3 fa7a 	bl	80002cc <__adddf3>
 800cdd8:	4682      	mov	sl, r0
 800cdda:	468b      	mov	fp, r1
 800cddc:	2d0f      	cmp	r5, #15
 800cdde:	dc38      	bgt.n	800ce52 <_strtod_l+0x45a>
 800cde0:	9b08      	ldr	r3, [sp, #32]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	f43f ae4a 	beq.w	800ca7c <_strtod_l+0x84>
 800cde8:	dd24      	ble.n	800ce34 <_strtod_l+0x43c>
 800cdea:	2b16      	cmp	r3, #22
 800cdec:	dc0b      	bgt.n	800ce06 <_strtod_l+0x40e>
 800cdee:	4d6b      	ldr	r5, [pc, #428]	; (800cf9c <_strtod_l+0x5a4>)
 800cdf0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800cdf4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cdf8:	4652      	mov	r2, sl
 800cdfa:	465b      	mov	r3, fp
 800cdfc:	f7f3 fc1c 	bl	8000638 <__aeabi_dmul>
 800ce00:	4682      	mov	sl, r0
 800ce02:	468b      	mov	fp, r1
 800ce04:	e63a      	b.n	800ca7c <_strtod_l+0x84>
 800ce06:	9a08      	ldr	r2, [sp, #32]
 800ce08:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	db20      	blt.n	800ce52 <_strtod_l+0x45a>
 800ce10:	4c62      	ldr	r4, [pc, #392]	; (800cf9c <_strtod_l+0x5a4>)
 800ce12:	f1c5 050f 	rsb	r5, r5, #15
 800ce16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ce1a:	4652      	mov	r2, sl
 800ce1c:	465b      	mov	r3, fp
 800ce1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce22:	f7f3 fc09 	bl	8000638 <__aeabi_dmul>
 800ce26:	9b08      	ldr	r3, [sp, #32]
 800ce28:	1b5d      	subs	r5, r3, r5
 800ce2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ce2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ce32:	e7e3      	b.n	800cdfc <_strtod_l+0x404>
 800ce34:	9b08      	ldr	r3, [sp, #32]
 800ce36:	3316      	adds	r3, #22
 800ce38:	db0b      	blt.n	800ce52 <_strtod_l+0x45a>
 800ce3a:	9b07      	ldr	r3, [sp, #28]
 800ce3c:	4a57      	ldr	r2, [pc, #348]	; (800cf9c <_strtod_l+0x5a4>)
 800ce3e:	1b9e      	subs	r6, r3, r6
 800ce40:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800ce44:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ce48:	4650      	mov	r0, sl
 800ce4a:	4659      	mov	r1, fp
 800ce4c:	f7f3 fd1e 	bl	800088c <__aeabi_ddiv>
 800ce50:	e7d6      	b.n	800ce00 <_strtod_l+0x408>
 800ce52:	9b08      	ldr	r3, [sp, #32]
 800ce54:	eba5 0808 	sub.w	r8, r5, r8
 800ce58:	4498      	add	r8, r3
 800ce5a:	f1b8 0f00 	cmp.w	r8, #0
 800ce5e:	dd71      	ble.n	800cf44 <_strtod_l+0x54c>
 800ce60:	f018 030f 	ands.w	r3, r8, #15
 800ce64:	d00a      	beq.n	800ce7c <_strtod_l+0x484>
 800ce66:	494d      	ldr	r1, [pc, #308]	; (800cf9c <_strtod_l+0x5a4>)
 800ce68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ce6c:	4652      	mov	r2, sl
 800ce6e:	465b      	mov	r3, fp
 800ce70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce74:	f7f3 fbe0 	bl	8000638 <__aeabi_dmul>
 800ce78:	4682      	mov	sl, r0
 800ce7a:	468b      	mov	fp, r1
 800ce7c:	f038 080f 	bics.w	r8, r8, #15
 800ce80:	d04d      	beq.n	800cf1e <_strtod_l+0x526>
 800ce82:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ce86:	dd22      	ble.n	800cece <_strtod_l+0x4d6>
 800ce88:	2500      	movs	r5, #0
 800ce8a:	462e      	mov	r6, r5
 800ce8c:	9509      	str	r5, [sp, #36]	; 0x24
 800ce8e:	9507      	str	r5, [sp, #28]
 800ce90:	2322      	movs	r3, #34	; 0x22
 800ce92:	f8df b110 	ldr.w	fp, [pc, #272]	; 800cfa4 <_strtod_l+0x5ac>
 800ce96:	6023      	str	r3, [r4, #0]
 800ce98:	f04f 0a00 	mov.w	sl, #0
 800ce9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	f43f adec 	beq.w	800ca7c <_strtod_l+0x84>
 800cea4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cea6:	4620      	mov	r0, r4
 800cea8:	f002 f96e 	bl	800f188 <_Bfree>
 800ceac:	9907      	ldr	r1, [sp, #28]
 800ceae:	4620      	mov	r0, r4
 800ceb0:	f002 f96a 	bl	800f188 <_Bfree>
 800ceb4:	4631      	mov	r1, r6
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	f002 f966 	bl	800f188 <_Bfree>
 800cebc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cebe:	4620      	mov	r0, r4
 800cec0:	f002 f962 	bl	800f188 <_Bfree>
 800cec4:	4629      	mov	r1, r5
 800cec6:	4620      	mov	r0, r4
 800cec8:	f002 f95e 	bl	800f188 <_Bfree>
 800cecc:	e5d6      	b.n	800ca7c <_strtod_l+0x84>
 800cece:	2300      	movs	r3, #0
 800ced0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ced4:	4650      	mov	r0, sl
 800ced6:	4659      	mov	r1, fp
 800ced8:	4699      	mov	r9, r3
 800ceda:	f1b8 0f01 	cmp.w	r8, #1
 800cede:	dc21      	bgt.n	800cf24 <_strtod_l+0x52c>
 800cee0:	b10b      	cbz	r3, 800cee6 <_strtod_l+0x4ee>
 800cee2:	4682      	mov	sl, r0
 800cee4:	468b      	mov	fp, r1
 800cee6:	4b2e      	ldr	r3, [pc, #184]	; (800cfa0 <_strtod_l+0x5a8>)
 800cee8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ceec:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800cef0:	4652      	mov	r2, sl
 800cef2:	465b      	mov	r3, fp
 800cef4:	e9d9 0100 	ldrd	r0, r1, [r9]
 800cef8:	f7f3 fb9e 	bl	8000638 <__aeabi_dmul>
 800cefc:	4b29      	ldr	r3, [pc, #164]	; (800cfa4 <_strtod_l+0x5ac>)
 800cefe:	460a      	mov	r2, r1
 800cf00:	400b      	ands	r3, r1
 800cf02:	4929      	ldr	r1, [pc, #164]	; (800cfa8 <_strtod_l+0x5b0>)
 800cf04:	428b      	cmp	r3, r1
 800cf06:	4682      	mov	sl, r0
 800cf08:	d8be      	bhi.n	800ce88 <_strtod_l+0x490>
 800cf0a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cf0e:	428b      	cmp	r3, r1
 800cf10:	bf86      	itte	hi
 800cf12:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800cfac <_strtod_l+0x5b4>
 800cf16:	f04f 3aff 	movhi.w	sl, #4294967295
 800cf1a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800cf1e:	2300      	movs	r3, #0
 800cf20:	9304      	str	r3, [sp, #16]
 800cf22:	e081      	b.n	800d028 <_strtod_l+0x630>
 800cf24:	f018 0f01 	tst.w	r8, #1
 800cf28:	d007      	beq.n	800cf3a <_strtod_l+0x542>
 800cf2a:	4b1d      	ldr	r3, [pc, #116]	; (800cfa0 <_strtod_l+0x5a8>)
 800cf2c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800cf30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf34:	f7f3 fb80 	bl	8000638 <__aeabi_dmul>
 800cf38:	2301      	movs	r3, #1
 800cf3a:	f109 0901 	add.w	r9, r9, #1
 800cf3e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cf42:	e7ca      	b.n	800ceda <_strtod_l+0x4e2>
 800cf44:	d0eb      	beq.n	800cf1e <_strtod_l+0x526>
 800cf46:	f1c8 0800 	rsb	r8, r8, #0
 800cf4a:	f018 020f 	ands.w	r2, r8, #15
 800cf4e:	d00a      	beq.n	800cf66 <_strtod_l+0x56e>
 800cf50:	4b12      	ldr	r3, [pc, #72]	; (800cf9c <_strtod_l+0x5a4>)
 800cf52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf56:	4650      	mov	r0, sl
 800cf58:	4659      	mov	r1, fp
 800cf5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf5e:	f7f3 fc95 	bl	800088c <__aeabi_ddiv>
 800cf62:	4682      	mov	sl, r0
 800cf64:	468b      	mov	fp, r1
 800cf66:	ea5f 1828 	movs.w	r8, r8, asr #4
 800cf6a:	d0d8      	beq.n	800cf1e <_strtod_l+0x526>
 800cf6c:	f1b8 0f1f 	cmp.w	r8, #31
 800cf70:	dd1e      	ble.n	800cfb0 <_strtod_l+0x5b8>
 800cf72:	2500      	movs	r5, #0
 800cf74:	462e      	mov	r6, r5
 800cf76:	9509      	str	r5, [sp, #36]	; 0x24
 800cf78:	9507      	str	r5, [sp, #28]
 800cf7a:	2322      	movs	r3, #34	; 0x22
 800cf7c:	f04f 0a00 	mov.w	sl, #0
 800cf80:	f04f 0b00 	mov.w	fp, #0
 800cf84:	6023      	str	r3, [r4, #0]
 800cf86:	e789      	b.n	800ce9c <_strtod_l+0x4a4>
 800cf88:	08011539 	.word	0x08011539
 800cf8c:	08011574 	.word	0x08011574
 800cf90:	08011531 	.word	0x08011531
 800cf94:	080116b4 	.word	0x080116b4
 800cf98:	080119d0 	.word	0x080119d0
 800cf9c:	080118b0 	.word	0x080118b0
 800cfa0:	08011888 	.word	0x08011888
 800cfa4:	7ff00000 	.word	0x7ff00000
 800cfa8:	7ca00000 	.word	0x7ca00000
 800cfac:	7fefffff 	.word	0x7fefffff
 800cfb0:	f018 0310 	ands.w	r3, r8, #16
 800cfb4:	bf18      	it	ne
 800cfb6:	236a      	movne	r3, #106	; 0x6a
 800cfb8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800d370 <_strtod_l+0x978>
 800cfbc:	9304      	str	r3, [sp, #16]
 800cfbe:	4650      	mov	r0, sl
 800cfc0:	4659      	mov	r1, fp
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	f018 0f01 	tst.w	r8, #1
 800cfc8:	d004      	beq.n	800cfd4 <_strtod_l+0x5dc>
 800cfca:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cfce:	f7f3 fb33 	bl	8000638 <__aeabi_dmul>
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800cfd8:	f109 0908 	add.w	r9, r9, #8
 800cfdc:	d1f2      	bne.n	800cfc4 <_strtod_l+0x5cc>
 800cfde:	b10b      	cbz	r3, 800cfe4 <_strtod_l+0x5ec>
 800cfe0:	4682      	mov	sl, r0
 800cfe2:	468b      	mov	fp, r1
 800cfe4:	9b04      	ldr	r3, [sp, #16]
 800cfe6:	b1bb      	cbz	r3, 800d018 <_strtod_l+0x620>
 800cfe8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800cfec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	4659      	mov	r1, fp
 800cff4:	dd10      	ble.n	800d018 <_strtod_l+0x620>
 800cff6:	2b1f      	cmp	r3, #31
 800cff8:	f340 8128 	ble.w	800d24c <_strtod_l+0x854>
 800cffc:	2b34      	cmp	r3, #52	; 0x34
 800cffe:	bfde      	ittt	le
 800d000:	3b20      	suble	r3, #32
 800d002:	f04f 32ff 	movle.w	r2, #4294967295
 800d006:	fa02 f303 	lslle.w	r3, r2, r3
 800d00a:	f04f 0a00 	mov.w	sl, #0
 800d00e:	bfcc      	ite	gt
 800d010:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d014:	ea03 0b01 	andle.w	fp, r3, r1
 800d018:	2200      	movs	r2, #0
 800d01a:	2300      	movs	r3, #0
 800d01c:	4650      	mov	r0, sl
 800d01e:	4659      	mov	r1, fp
 800d020:	f7f3 fd72 	bl	8000b08 <__aeabi_dcmpeq>
 800d024:	2800      	cmp	r0, #0
 800d026:	d1a4      	bne.n	800cf72 <_strtod_l+0x57a>
 800d028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d02a:	9300      	str	r3, [sp, #0]
 800d02c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d02e:	462b      	mov	r3, r5
 800d030:	463a      	mov	r2, r7
 800d032:	4620      	mov	r0, r4
 800d034:	f002 f914 	bl	800f260 <__s2b>
 800d038:	9009      	str	r0, [sp, #36]	; 0x24
 800d03a:	2800      	cmp	r0, #0
 800d03c:	f43f af24 	beq.w	800ce88 <_strtod_l+0x490>
 800d040:	9b07      	ldr	r3, [sp, #28]
 800d042:	1b9e      	subs	r6, r3, r6
 800d044:	9b08      	ldr	r3, [sp, #32]
 800d046:	2b00      	cmp	r3, #0
 800d048:	bfb4      	ite	lt
 800d04a:	4633      	movlt	r3, r6
 800d04c:	2300      	movge	r3, #0
 800d04e:	9310      	str	r3, [sp, #64]	; 0x40
 800d050:	9b08      	ldr	r3, [sp, #32]
 800d052:	2500      	movs	r5, #0
 800d054:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d058:	9318      	str	r3, [sp, #96]	; 0x60
 800d05a:	462e      	mov	r6, r5
 800d05c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d05e:	4620      	mov	r0, r4
 800d060:	6859      	ldr	r1, [r3, #4]
 800d062:	f002 f851 	bl	800f108 <_Balloc>
 800d066:	9007      	str	r0, [sp, #28]
 800d068:	2800      	cmp	r0, #0
 800d06a:	f43f af11 	beq.w	800ce90 <_strtod_l+0x498>
 800d06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d070:	691a      	ldr	r2, [r3, #16]
 800d072:	3202      	adds	r2, #2
 800d074:	f103 010c 	add.w	r1, r3, #12
 800d078:	0092      	lsls	r2, r2, #2
 800d07a:	300c      	adds	r0, #12
 800d07c:	f7fe ff90 	bl	800bfa0 <memcpy>
 800d080:	ec4b ab10 	vmov	d0, sl, fp
 800d084:	aa20      	add	r2, sp, #128	; 0x80
 800d086:	a91f      	add	r1, sp, #124	; 0x7c
 800d088:	4620      	mov	r0, r4
 800d08a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800d08e:	f002 fc23 	bl	800f8d8 <__d2b>
 800d092:	901e      	str	r0, [sp, #120]	; 0x78
 800d094:	2800      	cmp	r0, #0
 800d096:	f43f aefb 	beq.w	800ce90 <_strtod_l+0x498>
 800d09a:	2101      	movs	r1, #1
 800d09c:	4620      	mov	r0, r4
 800d09e:	f002 f979 	bl	800f394 <__i2b>
 800d0a2:	4606      	mov	r6, r0
 800d0a4:	2800      	cmp	r0, #0
 800d0a6:	f43f aef3 	beq.w	800ce90 <_strtod_l+0x498>
 800d0aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d0ac:	9904      	ldr	r1, [sp, #16]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	bfab      	itete	ge
 800d0b2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800d0b4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800d0b6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800d0b8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800d0bc:	bfac      	ite	ge
 800d0be:	eb03 0902 	addge.w	r9, r3, r2
 800d0c2:	1ad7      	sublt	r7, r2, r3
 800d0c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d0c6:	eba3 0801 	sub.w	r8, r3, r1
 800d0ca:	4490      	add	r8, r2
 800d0cc:	4ba3      	ldr	r3, [pc, #652]	; (800d35c <_strtod_l+0x964>)
 800d0ce:	f108 38ff 	add.w	r8, r8, #4294967295
 800d0d2:	4598      	cmp	r8, r3
 800d0d4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d0d8:	f280 80cc 	bge.w	800d274 <_strtod_l+0x87c>
 800d0dc:	eba3 0308 	sub.w	r3, r3, r8
 800d0e0:	2b1f      	cmp	r3, #31
 800d0e2:	eba2 0203 	sub.w	r2, r2, r3
 800d0e6:	f04f 0101 	mov.w	r1, #1
 800d0ea:	f300 80b6 	bgt.w	800d25a <_strtod_l+0x862>
 800d0ee:	fa01 f303 	lsl.w	r3, r1, r3
 800d0f2:	9311      	str	r3, [sp, #68]	; 0x44
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	930c      	str	r3, [sp, #48]	; 0x30
 800d0f8:	eb09 0802 	add.w	r8, r9, r2
 800d0fc:	9b04      	ldr	r3, [sp, #16]
 800d0fe:	45c1      	cmp	r9, r8
 800d100:	4417      	add	r7, r2
 800d102:	441f      	add	r7, r3
 800d104:	464b      	mov	r3, r9
 800d106:	bfa8      	it	ge
 800d108:	4643      	movge	r3, r8
 800d10a:	42bb      	cmp	r3, r7
 800d10c:	bfa8      	it	ge
 800d10e:	463b      	movge	r3, r7
 800d110:	2b00      	cmp	r3, #0
 800d112:	bfc2      	ittt	gt
 800d114:	eba8 0803 	subgt.w	r8, r8, r3
 800d118:	1aff      	subgt	r7, r7, r3
 800d11a:	eba9 0903 	subgt.w	r9, r9, r3
 800d11e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d120:	2b00      	cmp	r3, #0
 800d122:	dd17      	ble.n	800d154 <_strtod_l+0x75c>
 800d124:	4631      	mov	r1, r6
 800d126:	461a      	mov	r2, r3
 800d128:	4620      	mov	r0, r4
 800d12a:	f002 f9ef 	bl	800f50c <__pow5mult>
 800d12e:	4606      	mov	r6, r0
 800d130:	2800      	cmp	r0, #0
 800d132:	f43f aead 	beq.w	800ce90 <_strtod_l+0x498>
 800d136:	4601      	mov	r1, r0
 800d138:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d13a:	4620      	mov	r0, r4
 800d13c:	f002 f940 	bl	800f3c0 <__multiply>
 800d140:	900f      	str	r0, [sp, #60]	; 0x3c
 800d142:	2800      	cmp	r0, #0
 800d144:	f43f aea4 	beq.w	800ce90 <_strtod_l+0x498>
 800d148:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d14a:	4620      	mov	r0, r4
 800d14c:	f002 f81c 	bl	800f188 <_Bfree>
 800d150:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d152:	931e      	str	r3, [sp, #120]	; 0x78
 800d154:	f1b8 0f00 	cmp.w	r8, #0
 800d158:	f300 8091 	bgt.w	800d27e <_strtod_l+0x886>
 800d15c:	9b08      	ldr	r3, [sp, #32]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	dd08      	ble.n	800d174 <_strtod_l+0x77c>
 800d162:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d164:	9907      	ldr	r1, [sp, #28]
 800d166:	4620      	mov	r0, r4
 800d168:	f002 f9d0 	bl	800f50c <__pow5mult>
 800d16c:	9007      	str	r0, [sp, #28]
 800d16e:	2800      	cmp	r0, #0
 800d170:	f43f ae8e 	beq.w	800ce90 <_strtod_l+0x498>
 800d174:	2f00      	cmp	r7, #0
 800d176:	dd08      	ble.n	800d18a <_strtod_l+0x792>
 800d178:	9907      	ldr	r1, [sp, #28]
 800d17a:	463a      	mov	r2, r7
 800d17c:	4620      	mov	r0, r4
 800d17e:	f002 fa1f 	bl	800f5c0 <__lshift>
 800d182:	9007      	str	r0, [sp, #28]
 800d184:	2800      	cmp	r0, #0
 800d186:	f43f ae83 	beq.w	800ce90 <_strtod_l+0x498>
 800d18a:	f1b9 0f00 	cmp.w	r9, #0
 800d18e:	dd08      	ble.n	800d1a2 <_strtod_l+0x7aa>
 800d190:	4631      	mov	r1, r6
 800d192:	464a      	mov	r2, r9
 800d194:	4620      	mov	r0, r4
 800d196:	f002 fa13 	bl	800f5c0 <__lshift>
 800d19a:	4606      	mov	r6, r0
 800d19c:	2800      	cmp	r0, #0
 800d19e:	f43f ae77 	beq.w	800ce90 <_strtod_l+0x498>
 800d1a2:	9a07      	ldr	r2, [sp, #28]
 800d1a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d1a6:	4620      	mov	r0, r4
 800d1a8:	f002 fa92 	bl	800f6d0 <__mdiff>
 800d1ac:	4605      	mov	r5, r0
 800d1ae:	2800      	cmp	r0, #0
 800d1b0:	f43f ae6e 	beq.w	800ce90 <_strtod_l+0x498>
 800d1b4:	68c3      	ldr	r3, [r0, #12]
 800d1b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	60c3      	str	r3, [r0, #12]
 800d1bc:	4631      	mov	r1, r6
 800d1be:	f002 fa6b 	bl	800f698 <__mcmp>
 800d1c2:	2800      	cmp	r0, #0
 800d1c4:	da65      	bge.n	800d292 <_strtod_l+0x89a>
 800d1c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1c8:	ea53 030a 	orrs.w	r3, r3, sl
 800d1cc:	f040 8087 	bne.w	800d2de <_strtod_l+0x8e6>
 800d1d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	f040 8082 	bne.w	800d2de <_strtod_l+0x8e6>
 800d1da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d1de:	0d1b      	lsrs	r3, r3, #20
 800d1e0:	051b      	lsls	r3, r3, #20
 800d1e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d1e6:	d97a      	bls.n	800d2de <_strtod_l+0x8e6>
 800d1e8:	696b      	ldr	r3, [r5, #20]
 800d1ea:	b913      	cbnz	r3, 800d1f2 <_strtod_l+0x7fa>
 800d1ec:	692b      	ldr	r3, [r5, #16]
 800d1ee:	2b01      	cmp	r3, #1
 800d1f0:	dd75      	ble.n	800d2de <_strtod_l+0x8e6>
 800d1f2:	4629      	mov	r1, r5
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	4620      	mov	r0, r4
 800d1f8:	f002 f9e2 	bl	800f5c0 <__lshift>
 800d1fc:	4631      	mov	r1, r6
 800d1fe:	4605      	mov	r5, r0
 800d200:	f002 fa4a 	bl	800f698 <__mcmp>
 800d204:	2800      	cmp	r0, #0
 800d206:	dd6a      	ble.n	800d2de <_strtod_l+0x8e6>
 800d208:	9904      	ldr	r1, [sp, #16]
 800d20a:	4a55      	ldr	r2, [pc, #340]	; (800d360 <_strtod_l+0x968>)
 800d20c:	465b      	mov	r3, fp
 800d20e:	2900      	cmp	r1, #0
 800d210:	f000 8085 	beq.w	800d31e <_strtod_l+0x926>
 800d214:	ea02 010b 	and.w	r1, r2, fp
 800d218:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d21c:	dc7f      	bgt.n	800d31e <_strtod_l+0x926>
 800d21e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d222:	f77f aeaa 	ble.w	800cf7a <_strtod_l+0x582>
 800d226:	4a4f      	ldr	r2, [pc, #316]	; (800d364 <_strtod_l+0x96c>)
 800d228:	2300      	movs	r3, #0
 800d22a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800d22e:	4650      	mov	r0, sl
 800d230:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800d234:	4659      	mov	r1, fp
 800d236:	f7f3 f9ff 	bl	8000638 <__aeabi_dmul>
 800d23a:	460b      	mov	r3, r1
 800d23c:	4303      	orrs	r3, r0
 800d23e:	bf08      	it	eq
 800d240:	2322      	moveq	r3, #34	; 0x22
 800d242:	4682      	mov	sl, r0
 800d244:	468b      	mov	fp, r1
 800d246:	bf08      	it	eq
 800d248:	6023      	streq	r3, [r4, #0]
 800d24a:	e62b      	b.n	800cea4 <_strtod_l+0x4ac>
 800d24c:	f04f 32ff 	mov.w	r2, #4294967295
 800d250:	fa02 f303 	lsl.w	r3, r2, r3
 800d254:	ea03 0a0a 	and.w	sl, r3, sl
 800d258:	e6de      	b.n	800d018 <_strtod_l+0x620>
 800d25a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d25e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d262:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d266:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d26a:	fa01 f308 	lsl.w	r3, r1, r8
 800d26e:	930c      	str	r3, [sp, #48]	; 0x30
 800d270:	9111      	str	r1, [sp, #68]	; 0x44
 800d272:	e741      	b.n	800d0f8 <_strtod_l+0x700>
 800d274:	2300      	movs	r3, #0
 800d276:	930c      	str	r3, [sp, #48]	; 0x30
 800d278:	2301      	movs	r3, #1
 800d27a:	9311      	str	r3, [sp, #68]	; 0x44
 800d27c:	e73c      	b.n	800d0f8 <_strtod_l+0x700>
 800d27e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d280:	4642      	mov	r2, r8
 800d282:	4620      	mov	r0, r4
 800d284:	f002 f99c 	bl	800f5c0 <__lshift>
 800d288:	901e      	str	r0, [sp, #120]	; 0x78
 800d28a:	2800      	cmp	r0, #0
 800d28c:	f47f af66 	bne.w	800d15c <_strtod_l+0x764>
 800d290:	e5fe      	b.n	800ce90 <_strtod_l+0x498>
 800d292:	465f      	mov	r7, fp
 800d294:	d16e      	bne.n	800d374 <_strtod_l+0x97c>
 800d296:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d298:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d29c:	b342      	cbz	r2, 800d2f0 <_strtod_l+0x8f8>
 800d29e:	4a32      	ldr	r2, [pc, #200]	; (800d368 <_strtod_l+0x970>)
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d128      	bne.n	800d2f6 <_strtod_l+0x8fe>
 800d2a4:	9b04      	ldr	r3, [sp, #16]
 800d2a6:	4650      	mov	r0, sl
 800d2a8:	b1eb      	cbz	r3, 800d2e6 <_strtod_l+0x8ee>
 800d2aa:	4a2d      	ldr	r2, [pc, #180]	; (800d360 <_strtod_l+0x968>)
 800d2ac:	403a      	ands	r2, r7
 800d2ae:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d2b2:	f04f 31ff 	mov.w	r1, #4294967295
 800d2b6:	d819      	bhi.n	800d2ec <_strtod_l+0x8f4>
 800d2b8:	0d12      	lsrs	r2, r2, #20
 800d2ba:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d2be:	fa01 f303 	lsl.w	r3, r1, r3
 800d2c2:	4298      	cmp	r0, r3
 800d2c4:	d117      	bne.n	800d2f6 <_strtod_l+0x8fe>
 800d2c6:	4b29      	ldr	r3, [pc, #164]	; (800d36c <_strtod_l+0x974>)
 800d2c8:	429f      	cmp	r7, r3
 800d2ca:	d102      	bne.n	800d2d2 <_strtod_l+0x8da>
 800d2cc:	3001      	adds	r0, #1
 800d2ce:	f43f addf 	beq.w	800ce90 <_strtod_l+0x498>
 800d2d2:	4b23      	ldr	r3, [pc, #140]	; (800d360 <_strtod_l+0x968>)
 800d2d4:	403b      	ands	r3, r7
 800d2d6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d2da:	f04f 0a00 	mov.w	sl, #0
 800d2de:	9b04      	ldr	r3, [sp, #16]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d1a0      	bne.n	800d226 <_strtod_l+0x82e>
 800d2e4:	e5de      	b.n	800cea4 <_strtod_l+0x4ac>
 800d2e6:	f04f 33ff 	mov.w	r3, #4294967295
 800d2ea:	e7ea      	b.n	800d2c2 <_strtod_l+0x8ca>
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	e7e8      	b.n	800d2c2 <_strtod_l+0x8ca>
 800d2f0:	ea53 030a 	orrs.w	r3, r3, sl
 800d2f4:	d088      	beq.n	800d208 <_strtod_l+0x810>
 800d2f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d2f8:	b1db      	cbz	r3, 800d332 <_strtod_l+0x93a>
 800d2fa:	423b      	tst	r3, r7
 800d2fc:	d0ef      	beq.n	800d2de <_strtod_l+0x8e6>
 800d2fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d300:	9a04      	ldr	r2, [sp, #16]
 800d302:	4650      	mov	r0, sl
 800d304:	4659      	mov	r1, fp
 800d306:	b1c3      	cbz	r3, 800d33a <_strtod_l+0x942>
 800d308:	f7ff fb58 	bl	800c9bc <sulp>
 800d30c:	4602      	mov	r2, r0
 800d30e:	460b      	mov	r3, r1
 800d310:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d314:	f7f2 ffda 	bl	80002cc <__adddf3>
 800d318:	4682      	mov	sl, r0
 800d31a:	468b      	mov	fp, r1
 800d31c:	e7df      	b.n	800d2de <_strtod_l+0x8e6>
 800d31e:	4013      	ands	r3, r2
 800d320:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d324:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d328:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d32c:	f04f 3aff 	mov.w	sl, #4294967295
 800d330:	e7d5      	b.n	800d2de <_strtod_l+0x8e6>
 800d332:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d334:	ea13 0f0a 	tst.w	r3, sl
 800d338:	e7e0      	b.n	800d2fc <_strtod_l+0x904>
 800d33a:	f7ff fb3f 	bl	800c9bc <sulp>
 800d33e:	4602      	mov	r2, r0
 800d340:	460b      	mov	r3, r1
 800d342:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d346:	f7f2 ffbf 	bl	80002c8 <__aeabi_dsub>
 800d34a:	2200      	movs	r2, #0
 800d34c:	2300      	movs	r3, #0
 800d34e:	4682      	mov	sl, r0
 800d350:	468b      	mov	fp, r1
 800d352:	f7f3 fbd9 	bl	8000b08 <__aeabi_dcmpeq>
 800d356:	2800      	cmp	r0, #0
 800d358:	d0c1      	beq.n	800d2de <_strtod_l+0x8e6>
 800d35a:	e60e      	b.n	800cf7a <_strtod_l+0x582>
 800d35c:	fffffc02 	.word	0xfffffc02
 800d360:	7ff00000 	.word	0x7ff00000
 800d364:	39500000 	.word	0x39500000
 800d368:	000fffff 	.word	0x000fffff
 800d36c:	7fefffff 	.word	0x7fefffff
 800d370:	08011588 	.word	0x08011588
 800d374:	4631      	mov	r1, r6
 800d376:	4628      	mov	r0, r5
 800d378:	f002 fb0a 	bl	800f990 <__ratio>
 800d37c:	ec59 8b10 	vmov	r8, r9, d0
 800d380:	ee10 0a10 	vmov	r0, s0
 800d384:	2200      	movs	r2, #0
 800d386:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d38a:	4649      	mov	r1, r9
 800d38c:	f7f3 fbd0 	bl	8000b30 <__aeabi_dcmple>
 800d390:	2800      	cmp	r0, #0
 800d392:	d07c      	beq.n	800d48e <_strtod_l+0xa96>
 800d394:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d396:	2b00      	cmp	r3, #0
 800d398:	d04c      	beq.n	800d434 <_strtod_l+0xa3c>
 800d39a:	4b95      	ldr	r3, [pc, #596]	; (800d5f0 <_strtod_l+0xbf8>)
 800d39c:	2200      	movs	r2, #0
 800d39e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d3a2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d5f0 <_strtod_l+0xbf8>
 800d3a6:	f04f 0800 	mov.w	r8, #0
 800d3aa:	4b92      	ldr	r3, [pc, #584]	; (800d5f4 <_strtod_l+0xbfc>)
 800d3ac:	403b      	ands	r3, r7
 800d3ae:	9311      	str	r3, [sp, #68]	; 0x44
 800d3b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d3b2:	4b91      	ldr	r3, [pc, #580]	; (800d5f8 <_strtod_l+0xc00>)
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	f040 80b2 	bne.w	800d51e <_strtod_l+0xb26>
 800d3ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d3be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d3c2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d3c6:	ec4b ab10 	vmov	d0, sl, fp
 800d3ca:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800d3ce:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d3d2:	f002 fa05 	bl	800f7e0 <__ulp>
 800d3d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d3da:	ec53 2b10 	vmov	r2, r3, d0
 800d3de:	f7f3 f92b 	bl	8000638 <__aeabi_dmul>
 800d3e2:	4652      	mov	r2, sl
 800d3e4:	465b      	mov	r3, fp
 800d3e6:	f7f2 ff71 	bl	80002cc <__adddf3>
 800d3ea:	460b      	mov	r3, r1
 800d3ec:	4981      	ldr	r1, [pc, #516]	; (800d5f4 <_strtod_l+0xbfc>)
 800d3ee:	4a83      	ldr	r2, [pc, #524]	; (800d5fc <_strtod_l+0xc04>)
 800d3f0:	4019      	ands	r1, r3
 800d3f2:	4291      	cmp	r1, r2
 800d3f4:	4682      	mov	sl, r0
 800d3f6:	d95e      	bls.n	800d4b6 <_strtod_l+0xabe>
 800d3f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3fa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d103      	bne.n	800d40a <_strtod_l+0xa12>
 800d402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d404:	3301      	adds	r3, #1
 800d406:	f43f ad43 	beq.w	800ce90 <_strtod_l+0x498>
 800d40a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800d608 <_strtod_l+0xc10>
 800d40e:	f04f 3aff 	mov.w	sl, #4294967295
 800d412:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d414:	4620      	mov	r0, r4
 800d416:	f001 feb7 	bl	800f188 <_Bfree>
 800d41a:	9907      	ldr	r1, [sp, #28]
 800d41c:	4620      	mov	r0, r4
 800d41e:	f001 feb3 	bl	800f188 <_Bfree>
 800d422:	4631      	mov	r1, r6
 800d424:	4620      	mov	r0, r4
 800d426:	f001 feaf 	bl	800f188 <_Bfree>
 800d42a:	4629      	mov	r1, r5
 800d42c:	4620      	mov	r0, r4
 800d42e:	f001 feab 	bl	800f188 <_Bfree>
 800d432:	e613      	b.n	800d05c <_strtod_l+0x664>
 800d434:	f1ba 0f00 	cmp.w	sl, #0
 800d438:	d11b      	bne.n	800d472 <_strtod_l+0xa7a>
 800d43a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d43e:	b9f3      	cbnz	r3, 800d47e <_strtod_l+0xa86>
 800d440:	4b6b      	ldr	r3, [pc, #428]	; (800d5f0 <_strtod_l+0xbf8>)
 800d442:	2200      	movs	r2, #0
 800d444:	4640      	mov	r0, r8
 800d446:	4649      	mov	r1, r9
 800d448:	f7f3 fb68 	bl	8000b1c <__aeabi_dcmplt>
 800d44c:	b9d0      	cbnz	r0, 800d484 <_strtod_l+0xa8c>
 800d44e:	4640      	mov	r0, r8
 800d450:	4649      	mov	r1, r9
 800d452:	4b6b      	ldr	r3, [pc, #428]	; (800d600 <_strtod_l+0xc08>)
 800d454:	2200      	movs	r2, #0
 800d456:	f7f3 f8ef 	bl	8000638 <__aeabi_dmul>
 800d45a:	4680      	mov	r8, r0
 800d45c:	4689      	mov	r9, r1
 800d45e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d462:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800d466:	931b      	str	r3, [sp, #108]	; 0x6c
 800d468:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800d46c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d470:	e79b      	b.n	800d3aa <_strtod_l+0x9b2>
 800d472:	f1ba 0f01 	cmp.w	sl, #1
 800d476:	d102      	bne.n	800d47e <_strtod_l+0xa86>
 800d478:	2f00      	cmp	r7, #0
 800d47a:	f43f ad7e 	beq.w	800cf7a <_strtod_l+0x582>
 800d47e:	4b61      	ldr	r3, [pc, #388]	; (800d604 <_strtod_l+0xc0c>)
 800d480:	2200      	movs	r2, #0
 800d482:	e78c      	b.n	800d39e <_strtod_l+0x9a6>
 800d484:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800d600 <_strtod_l+0xc08>
 800d488:	f04f 0800 	mov.w	r8, #0
 800d48c:	e7e7      	b.n	800d45e <_strtod_l+0xa66>
 800d48e:	4b5c      	ldr	r3, [pc, #368]	; (800d600 <_strtod_l+0xc08>)
 800d490:	4640      	mov	r0, r8
 800d492:	4649      	mov	r1, r9
 800d494:	2200      	movs	r2, #0
 800d496:	f7f3 f8cf 	bl	8000638 <__aeabi_dmul>
 800d49a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d49c:	4680      	mov	r8, r0
 800d49e:	4689      	mov	r9, r1
 800d4a0:	b933      	cbnz	r3, 800d4b0 <_strtod_l+0xab8>
 800d4a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d4a6:	9012      	str	r0, [sp, #72]	; 0x48
 800d4a8:	9313      	str	r3, [sp, #76]	; 0x4c
 800d4aa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800d4ae:	e7dd      	b.n	800d46c <_strtod_l+0xa74>
 800d4b0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800d4b4:	e7f9      	b.n	800d4aa <_strtod_l+0xab2>
 800d4b6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d4ba:	9b04      	ldr	r3, [sp, #16]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d1a8      	bne.n	800d412 <_strtod_l+0xa1a>
 800d4c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d4c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d4c6:	0d1b      	lsrs	r3, r3, #20
 800d4c8:	051b      	lsls	r3, r3, #20
 800d4ca:	429a      	cmp	r2, r3
 800d4cc:	d1a1      	bne.n	800d412 <_strtod_l+0xa1a>
 800d4ce:	4640      	mov	r0, r8
 800d4d0:	4649      	mov	r1, r9
 800d4d2:	f7f3 fc11 	bl	8000cf8 <__aeabi_d2lz>
 800d4d6:	f7f3 f881 	bl	80005dc <__aeabi_l2d>
 800d4da:	4602      	mov	r2, r0
 800d4dc:	460b      	mov	r3, r1
 800d4de:	4640      	mov	r0, r8
 800d4e0:	4649      	mov	r1, r9
 800d4e2:	f7f2 fef1 	bl	80002c8 <__aeabi_dsub>
 800d4e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d4e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d4ec:	ea43 030a 	orr.w	r3, r3, sl
 800d4f0:	4313      	orrs	r3, r2
 800d4f2:	4680      	mov	r8, r0
 800d4f4:	4689      	mov	r9, r1
 800d4f6:	d053      	beq.n	800d5a0 <_strtod_l+0xba8>
 800d4f8:	a335      	add	r3, pc, #212	; (adr r3, 800d5d0 <_strtod_l+0xbd8>)
 800d4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fe:	f7f3 fb0d 	bl	8000b1c <__aeabi_dcmplt>
 800d502:	2800      	cmp	r0, #0
 800d504:	f47f acce 	bne.w	800cea4 <_strtod_l+0x4ac>
 800d508:	a333      	add	r3, pc, #204	; (adr r3, 800d5d8 <_strtod_l+0xbe0>)
 800d50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50e:	4640      	mov	r0, r8
 800d510:	4649      	mov	r1, r9
 800d512:	f7f3 fb21 	bl	8000b58 <__aeabi_dcmpgt>
 800d516:	2800      	cmp	r0, #0
 800d518:	f43f af7b 	beq.w	800d412 <_strtod_l+0xa1a>
 800d51c:	e4c2      	b.n	800cea4 <_strtod_l+0x4ac>
 800d51e:	9b04      	ldr	r3, [sp, #16]
 800d520:	b333      	cbz	r3, 800d570 <_strtod_l+0xb78>
 800d522:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d524:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d528:	d822      	bhi.n	800d570 <_strtod_l+0xb78>
 800d52a:	a32d      	add	r3, pc, #180	; (adr r3, 800d5e0 <_strtod_l+0xbe8>)
 800d52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d530:	4640      	mov	r0, r8
 800d532:	4649      	mov	r1, r9
 800d534:	f7f3 fafc 	bl	8000b30 <__aeabi_dcmple>
 800d538:	b1a0      	cbz	r0, 800d564 <_strtod_l+0xb6c>
 800d53a:	4649      	mov	r1, r9
 800d53c:	4640      	mov	r0, r8
 800d53e:	f7f3 fb53 	bl	8000be8 <__aeabi_d2uiz>
 800d542:	2801      	cmp	r0, #1
 800d544:	bf38      	it	cc
 800d546:	2001      	movcc	r0, #1
 800d548:	f7f2 fffc 	bl	8000544 <__aeabi_ui2d>
 800d54c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d54e:	4680      	mov	r8, r0
 800d550:	4689      	mov	r9, r1
 800d552:	bb13      	cbnz	r3, 800d59a <_strtod_l+0xba2>
 800d554:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d558:	9014      	str	r0, [sp, #80]	; 0x50
 800d55a:	9315      	str	r3, [sp, #84]	; 0x54
 800d55c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d560:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d564:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d566:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d568:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d56c:	1a9b      	subs	r3, r3, r2
 800d56e:	930d      	str	r3, [sp, #52]	; 0x34
 800d570:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d574:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d578:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d57c:	f002 f930 	bl	800f7e0 <__ulp>
 800d580:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d584:	ec53 2b10 	vmov	r2, r3, d0
 800d588:	f7f3 f856 	bl	8000638 <__aeabi_dmul>
 800d58c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d590:	f7f2 fe9c 	bl	80002cc <__adddf3>
 800d594:	4682      	mov	sl, r0
 800d596:	468b      	mov	fp, r1
 800d598:	e78f      	b.n	800d4ba <_strtod_l+0xac2>
 800d59a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800d59e:	e7dd      	b.n	800d55c <_strtod_l+0xb64>
 800d5a0:	a311      	add	r3, pc, #68	; (adr r3, 800d5e8 <_strtod_l+0xbf0>)
 800d5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a6:	f7f3 fab9 	bl	8000b1c <__aeabi_dcmplt>
 800d5aa:	e7b4      	b.n	800d516 <_strtod_l+0xb1e>
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	930e      	str	r3, [sp, #56]	; 0x38
 800d5b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d5b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d5b4:	6013      	str	r3, [r2, #0]
 800d5b6:	f7ff ba65 	b.w	800ca84 <_strtod_l+0x8c>
 800d5ba:	2b65      	cmp	r3, #101	; 0x65
 800d5bc:	f43f ab5d 	beq.w	800cc7a <_strtod_l+0x282>
 800d5c0:	2b45      	cmp	r3, #69	; 0x45
 800d5c2:	f43f ab5a 	beq.w	800cc7a <_strtod_l+0x282>
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	f7ff bb92 	b.w	800ccf0 <_strtod_l+0x2f8>
 800d5cc:	f3af 8000 	nop.w
 800d5d0:	94a03595 	.word	0x94a03595
 800d5d4:	3fdfffff 	.word	0x3fdfffff
 800d5d8:	35afe535 	.word	0x35afe535
 800d5dc:	3fe00000 	.word	0x3fe00000
 800d5e0:	ffc00000 	.word	0xffc00000
 800d5e4:	41dfffff 	.word	0x41dfffff
 800d5e8:	94a03595 	.word	0x94a03595
 800d5ec:	3fcfffff 	.word	0x3fcfffff
 800d5f0:	3ff00000 	.word	0x3ff00000
 800d5f4:	7ff00000 	.word	0x7ff00000
 800d5f8:	7fe00000 	.word	0x7fe00000
 800d5fc:	7c9fffff 	.word	0x7c9fffff
 800d600:	3fe00000 	.word	0x3fe00000
 800d604:	bff00000 	.word	0xbff00000
 800d608:	7fefffff 	.word	0x7fefffff

0800d60c <strtod>:
 800d60c:	460a      	mov	r2, r1
 800d60e:	4601      	mov	r1, r0
 800d610:	4802      	ldr	r0, [pc, #8]	; (800d61c <strtod+0x10>)
 800d612:	4b03      	ldr	r3, [pc, #12]	; (800d620 <strtod+0x14>)
 800d614:	6800      	ldr	r0, [r0, #0]
 800d616:	f7ff b9ef 	b.w	800c9f8 <_strtod_l>
 800d61a:	bf00      	nop
 800d61c:	2000004c 	.word	0x2000004c
 800d620:	200000b4 	.word	0x200000b4

0800d624 <_strtol_l.isra.0>:
 800d624:	2b01      	cmp	r3, #1
 800d626:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d62a:	d001      	beq.n	800d630 <_strtol_l.isra.0+0xc>
 800d62c:	2b24      	cmp	r3, #36	; 0x24
 800d62e:	d906      	bls.n	800d63e <_strtol_l.isra.0+0x1a>
 800d630:	f7fe fc8c 	bl	800bf4c <__errno>
 800d634:	2316      	movs	r3, #22
 800d636:	6003      	str	r3, [r0, #0]
 800d638:	2000      	movs	r0, #0
 800d63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d63e:	4f3a      	ldr	r7, [pc, #232]	; (800d728 <_strtol_l.isra.0+0x104>)
 800d640:	468e      	mov	lr, r1
 800d642:	4676      	mov	r6, lr
 800d644:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d648:	5de5      	ldrb	r5, [r4, r7]
 800d64a:	f015 0508 	ands.w	r5, r5, #8
 800d64e:	d1f8      	bne.n	800d642 <_strtol_l.isra.0+0x1e>
 800d650:	2c2d      	cmp	r4, #45	; 0x2d
 800d652:	d134      	bne.n	800d6be <_strtol_l.isra.0+0x9a>
 800d654:	f89e 4000 	ldrb.w	r4, [lr]
 800d658:	f04f 0801 	mov.w	r8, #1
 800d65c:	f106 0e02 	add.w	lr, r6, #2
 800d660:	2b00      	cmp	r3, #0
 800d662:	d05c      	beq.n	800d71e <_strtol_l.isra.0+0xfa>
 800d664:	2b10      	cmp	r3, #16
 800d666:	d10c      	bne.n	800d682 <_strtol_l.isra.0+0x5e>
 800d668:	2c30      	cmp	r4, #48	; 0x30
 800d66a:	d10a      	bne.n	800d682 <_strtol_l.isra.0+0x5e>
 800d66c:	f89e 4000 	ldrb.w	r4, [lr]
 800d670:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d674:	2c58      	cmp	r4, #88	; 0x58
 800d676:	d14d      	bne.n	800d714 <_strtol_l.isra.0+0xf0>
 800d678:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800d67c:	2310      	movs	r3, #16
 800d67e:	f10e 0e02 	add.w	lr, lr, #2
 800d682:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800d686:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d68a:	2600      	movs	r6, #0
 800d68c:	fbbc f9f3 	udiv	r9, ip, r3
 800d690:	4635      	mov	r5, r6
 800d692:	fb03 ca19 	mls	sl, r3, r9, ip
 800d696:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800d69a:	2f09      	cmp	r7, #9
 800d69c:	d818      	bhi.n	800d6d0 <_strtol_l.isra.0+0xac>
 800d69e:	463c      	mov	r4, r7
 800d6a0:	42a3      	cmp	r3, r4
 800d6a2:	dd24      	ble.n	800d6ee <_strtol_l.isra.0+0xca>
 800d6a4:	2e00      	cmp	r6, #0
 800d6a6:	db1f      	blt.n	800d6e8 <_strtol_l.isra.0+0xc4>
 800d6a8:	45a9      	cmp	r9, r5
 800d6aa:	d31d      	bcc.n	800d6e8 <_strtol_l.isra.0+0xc4>
 800d6ac:	d101      	bne.n	800d6b2 <_strtol_l.isra.0+0x8e>
 800d6ae:	45a2      	cmp	sl, r4
 800d6b0:	db1a      	blt.n	800d6e8 <_strtol_l.isra.0+0xc4>
 800d6b2:	fb05 4503 	mla	r5, r5, r3, r4
 800d6b6:	2601      	movs	r6, #1
 800d6b8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d6bc:	e7eb      	b.n	800d696 <_strtol_l.isra.0+0x72>
 800d6be:	2c2b      	cmp	r4, #43	; 0x2b
 800d6c0:	bf08      	it	eq
 800d6c2:	f89e 4000 	ldrbeq.w	r4, [lr]
 800d6c6:	46a8      	mov	r8, r5
 800d6c8:	bf08      	it	eq
 800d6ca:	f106 0e02 	addeq.w	lr, r6, #2
 800d6ce:	e7c7      	b.n	800d660 <_strtol_l.isra.0+0x3c>
 800d6d0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800d6d4:	2f19      	cmp	r7, #25
 800d6d6:	d801      	bhi.n	800d6dc <_strtol_l.isra.0+0xb8>
 800d6d8:	3c37      	subs	r4, #55	; 0x37
 800d6da:	e7e1      	b.n	800d6a0 <_strtol_l.isra.0+0x7c>
 800d6dc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800d6e0:	2f19      	cmp	r7, #25
 800d6e2:	d804      	bhi.n	800d6ee <_strtol_l.isra.0+0xca>
 800d6e4:	3c57      	subs	r4, #87	; 0x57
 800d6e6:	e7db      	b.n	800d6a0 <_strtol_l.isra.0+0x7c>
 800d6e8:	f04f 36ff 	mov.w	r6, #4294967295
 800d6ec:	e7e4      	b.n	800d6b8 <_strtol_l.isra.0+0x94>
 800d6ee:	2e00      	cmp	r6, #0
 800d6f0:	da05      	bge.n	800d6fe <_strtol_l.isra.0+0xda>
 800d6f2:	2322      	movs	r3, #34	; 0x22
 800d6f4:	6003      	str	r3, [r0, #0]
 800d6f6:	4665      	mov	r5, ip
 800d6f8:	b942      	cbnz	r2, 800d70c <_strtol_l.isra.0+0xe8>
 800d6fa:	4628      	mov	r0, r5
 800d6fc:	e79d      	b.n	800d63a <_strtol_l.isra.0+0x16>
 800d6fe:	f1b8 0f00 	cmp.w	r8, #0
 800d702:	d000      	beq.n	800d706 <_strtol_l.isra.0+0xe2>
 800d704:	426d      	negs	r5, r5
 800d706:	2a00      	cmp	r2, #0
 800d708:	d0f7      	beq.n	800d6fa <_strtol_l.isra.0+0xd6>
 800d70a:	b10e      	cbz	r6, 800d710 <_strtol_l.isra.0+0xec>
 800d70c:	f10e 31ff 	add.w	r1, lr, #4294967295
 800d710:	6011      	str	r1, [r2, #0]
 800d712:	e7f2      	b.n	800d6fa <_strtol_l.isra.0+0xd6>
 800d714:	2430      	movs	r4, #48	; 0x30
 800d716:	2b00      	cmp	r3, #0
 800d718:	d1b3      	bne.n	800d682 <_strtol_l.isra.0+0x5e>
 800d71a:	2308      	movs	r3, #8
 800d71c:	e7b1      	b.n	800d682 <_strtol_l.isra.0+0x5e>
 800d71e:	2c30      	cmp	r4, #48	; 0x30
 800d720:	d0a4      	beq.n	800d66c <_strtol_l.isra.0+0x48>
 800d722:	230a      	movs	r3, #10
 800d724:	e7ad      	b.n	800d682 <_strtol_l.isra.0+0x5e>
 800d726:	bf00      	nop
 800d728:	080115b1 	.word	0x080115b1

0800d72c <strtol>:
 800d72c:	4613      	mov	r3, r2
 800d72e:	460a      	mov	r2, r1
 800d730:	4601      	mov	r1, r0
 800d732:	4802      	ldr	r0, [pc, #8]	; (800d73c <strtol+0x10>)
 800d734:	6800      	ldr	r0, [r0, #0]
 800d736:	f7ff bf75 	b.w	800d624 <_strtol_l.isra.0>
 800d73a:	bf00      	nop
 800d73c:	2000004c 	.word	0x2000004c

0800d740 <__swbuf_r>:
 800d740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d742:	460e      	mov	r6, r1
 800d744:	4614      	mov	r4, r2
 800d746:	4605      	mov	r5, r0
 800d748:	b118      	cbz	r0, 800d752 <__swbuf_r+0x12>
 800d74a:	6983      	ldr	r3, [r0, #24]
 800d74c:	b90b      	cbnz	r3, 800d752 <__swbuf_r+0x12>
 800d74e:	f001 f849 	bl	800e7e4 <__sinit>
 800d752:	4b21      	ldr	r3, [pc, #132]	; (800d7d8 <__swbuf_r+0x98>)
 800d754:	429c      	cmp	r4, r3
 800d756:	d12b      	bne.n	800d7b0 <__swbuf_r+0x70>
 800d758:	686c      	ldr	r4, [r5, #4]
 800d75a:	69a3      	ldr	r3, [r4, #24]
 800d75c:	60a3      	str	r3, [r4, #8]
 800d75e:	89a3      	ldrh	r3, [r4, #12]
 800d760:	071a      	lsls	r2, r3, #28
 800d762:	d52f      	bpl.n	800d7c4 <__swbuf_r+0x84>
 800d764:	6923      	ldr	r3, [r4, #16]
 800d766:	b36b      	cbz	r3, 800d7c4 <__swbuf_r+0x84>
 800d768:	6923      	ldr	r3, [r4, #16]
 800d76a:	6820      	ldr	r0, [r4, #0]
 800d76c:	1ac0      	subs	r0, r0, r3
 800d76e:	6963      	ldr	r3, [r4, #20]
 800d770:	b2f6      	uxtb	r6, r6
 800d772:	4283      	cmp	r3, r0
 800d774:	4637      	mov	r7, r6
 800d776:	dc04      	bgt.n	800d782 <__swbuf_r+0x42>
 800d778:	4621      	mov	r1, r4
 800d77a:	4628      	mov	r0, r5
 800d77c:	f000 ff9e 	bl	800e6bc <_fflush_r>
 800d780:	bb30      	cbnz	r0, 800d7d0 <__swbuf_r+0x90>
 800d782:	68a3      	ldr	r3, [r4, #8]
 800d784:	3b01      	subs	r3, #1
 800d786:	60a3      	str	r3, [r4, #8]
 800d788:	6823      	ldr	r3, [r4, #0]
 800d78a:	1c5a      	adds	r2, r3, #1
 800d78c:	6022      	str	r2, [r4, #0]
 800d78e:	701e      	strb	r6, [r3, #0]
 800d790:	6963      	ldr	r3, [r4, #20]
 800d792:	3001      	adds	r0, #1
 800d794:	4283      	cmp	r3, r0
 800d796:	d004      	beq.n	800d7a2 <__swbuf_r+0x62>
 800d798:	89a3      	ldrh	r3, [r4, #12]
 800d79a:	07db      	lsls	r3, r3, #31
 800d79c:	d506      	bpl.n	800d7ac <__swbuf_r+0x6c>
 800d79e:	2e0a      	cmp	r6, #10
 800d7a0:	d104      	bne.n	800d7ac <__swbuf_r+0x6c>
 800d7a2:	4621      	mov	r1, r4
 800d7a4:	4628      	mov	r0, r5
 800d7a6:	f000 ff89 	bl	800e6bc <_fflush_r>
 800d7aa:	b988      	cbnz	r0, 800d7d0 <__swbuf_r+0x90>
 800d7ac:	4638      	mov	r0, r7
 800d7ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7b0:	4b0a      	ldr	r3, [pc, #40]	; (800d7dc <__swbuf_r+0x9c>)
 800d7b2:	429c      	cmp	r4, r3
 800d7b4:	d101      	bne.n	800d7ba <__swbuf_r+0x7a>
 800d7b6:	68ac      	ldr	r4, [r5, #8]
 800d7b8:	e7cf      	b.n	800d75a <__swbuf_r+0x1a>
 800d7ba:	4b09      	ldr	r3, [pc, #36]	; (800d7e0 <__swbuf_r+0xa0>)
 800d7bc:	429c      	cmp	r4, r3
 800d7be:	bf08      	it	eq
 800d7c0:	68ec      	ldreq	r4, [r5, #12]
 800d7c2:	e7ca      	b.n	800d75a <__swbuf_r+0x1a>
 800d7c4:	4621      	mov	r1, r4
 800d7c6:	4628      	mov	r0, r5
 800d7c8:	f000 f80c 	bl	800d7e4 <__swsetup_r>
 800d7cc:	2800      	cmp	r0, #0
 800d7ce:	d0cb      	beq.n	800d768 <__swbuf_r+0x28>
 800d7d0:	f04f 37ff 	mov.w	r7, #4294967295
 800d7d4:	e7ea      	b.n	800d7ac <__swbuf_r+0x6c>
 800d7d6:	bf00      	nop
 800d7d8:	08011768 	.word	0x08011768
 800d7dc:	08011788 	.word	0x08011788
 800d7e0:	08011748 	.word	0x08011748

0800d7e4 <__swsetup_r>:
 800d7e4:	4b32      	ldr	r3, [pc, #200]	; (800d8b0 <__swsetup_r+0xcc>)
 800d7e6:	b570      	push	{r4, r5, r6, lr}
 800d7e8:	681d      	ldr	r5, [r3, #0]
 800d7ea:	4606      	mov	r6, r0
 800d7ec:	460c      	mov	r4, r1
 800d7ee:	b125      	cbz	r5, 800d7fa <__swsetup_r+0x16>
 800d7f0:	69ab      	ldr	r3, [r5, #24]
 800d7f2:	b913      	cbnz	r3, 800d7fa <__swsetup_r+0x16>
 800d7f4:	4628      	mov	r0, r5
 800d7f6:	f000 fff5 	bl	800e7e4 <__sinit>
 800d7fa:	4b2e      	ldr	r3, [pc, #184]	; (800d8b4 <__swsetup_r+0xd0>)
 800d7fc:	429c      	cmp	r4, r3
 800d7fe:	d10f      	bne.n	800d820 <__swsetup_r+0x3c>
 800d800:	686c      	ldr	r4, [r5, #4]
 800d802:	89a3      	ldrh	r3, [r4, #12]
 800d804:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d808:	0719      	lsls	r1, r3, #28
 800d80a:	d42c      	bmi.n	800d866 <__swsetup_r+0x82>
 800d80c:	06dd      	lsls	r5, r3, #27
 800d80e:	d411      	bmi.n	800d834 <__swsetup_r+0x50>
 800d810:	2309      	movs	r3, #9
 800d812:	6033      	str	r3, [r6, #0]
 800d814:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d818:	81a3      	strh	r3, [r4, #12]
 800d81a:	f04f 30ff 	mov.w	r0, #4294967295
 800d81e:	e03e      	b.n	800d89e <__swsetup_r+0xba>
 800d820:	4b25      	ldr	r3, [pc, #148]	; (800d8b8 <__swsetup_r+0xd4>)
 800d822:	429c      	cmp	r4, r3
 800d824:	d101      	bne.n	800d82a <__swsetup_r+0x46>
 800d826:	68ac      	ldr	r4, [r5, #8]
 800d828:	e7eb      	b.n	800d802 <__swsetup_r+0x1e>
 800d82a:	4b24      	ldr	r3, [pc, #144]	; (800d8bc <__swsetup_r+0xd8>)
 800d82c:	429c      	cmp	r4, r3
 800d82e:	bf08      	it	eq
 800d830:	68ec      	ldreq	r4, [r5, #12]
 800d832:	e7e6      	b.n	800d802 <__swsetup_r+0x1e>
 800d834:	0758      	lsls	r0, r3, #29
 800d836:	d512      	bpl.n	800d85e <__swsetup_r+0x7a>
 800d838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d83a:	b141      	cbz	r1, 800d84e <__swsetup_r+0x6a>
 800d83c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d840:	4299      	cmp	r1, r3
 800d842:	d002      	beq.n	800d84a <__swsetup_r+0x66>
 800d844:	4630      	mov	r0, r6
 800d846:	f002 f929 	bl	800fa9c <_free_r>
 800d84a:	2300      	movs	r3, #0
 800d84c:	6363      	str	r3, [r4, #52]	; 0x34
 800d84e:	89a3      	ldrh	r3, [r4, #12]
 800d850:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d854:	81a3      	strh	r3, [r4, #12]
 800d856:	2300      	movs	r3, #0
 800d858:	6063      	str	r3, [r4, #4]
 800d85a:	6923      	ldr	r3, [r4, #16]
 800d85c:	6023      	str	r3, [r4, #0]
 800d85e:	89a3      	ldrh	r3, [r4, #12]
 800d860:	f043 0308 	orr.w	r3, r3, #8
 800d864:	81a3      	strh	r3, [r4, #12]
 800d866:	6923      	ldr	r3, [r4, #16]
 800d868:	b94b      	cbnz	r3, 800d87e <__swsetup_r+0x9a>
 800d86a:	89a3      	ldrh	r3, [r4, #12]
 800d86c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d874:	d003      	beq.n	800d87e <__swsetup_r+0x9a>
 800d876:	4621      	mov	r1, r4
 800d878:	4630      	mov	r0, r6
 800d87a:	f001 fbeb 	bl	800f054 <__smakebuf_r>
 800d87e:	89a0      	ldrh	r0, [r4, #12]
 800d880:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d884:	f010 0301 	ands.w	r3, r0, #1
 800d888:	d00a      	beq.n	800d8a0 <__swsetup_r+0xbc>
 800d88a:	2300      	movs	r3, #0
 800d88c:	60a3      	str	r3, [r4, #8]
 800d88e:	6963      	ldr	r3, [r4, #20]
 800d890:	425b      	negs	r3, r3
 800d892:	61a3      	str	r3, [r4, #24]
 800d894:	6923      	ldr	r3, [r4, #16]
 800d896:	b943      	cbnz	r3, 800d8aa <__swsetup_r+0xc6>
 800d898:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d89c:	d1ba      	bne.n	800d814 <__swsetup_r+0x30>
 800d89e:	bd70      	pop	{r4, r5, r6, pc}
 800d8a0:	0781      	lsls	r1, r0, #30
 800d8a2:	bf58      	it	pl
 800d8a4:	6963      	ldrpl	r3, [r4, #20]
 800d8a6:	60a3      	str	r3, [r4, #8]
 800d8a8:	e7f4      	b.n	800d894 <__swsetup_r+0xb0>
 800d8aa:	2000      	movs	r0, #0
 800d8ac:	e7f7      	b.n	800d89e <__swsetup_r+0xba>
 800d8ae:	bf00      	nop
 800d8b0:	2000004c 	.word	0x2000004c
 800d8b4:	08011768 	.word	0x08011768
 800d8b8:	08011788 	.word	0x08011788
 800d8bc:	08011748 	.word	0x08011748

0800d8c0 <quorem>:
 800d8c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8c4:	6903      	ldr	r3, [r0, #16]
 800d8c6:	690c      	ldr	r4, [r1, #16]
 800d8c8:	42a3      	cmp	r3, r4
 800d8ca:	4607      	mov	r7, r0
 800d8cc:	f2c0 8081 	blt.w	800d9d2 <quorem+0x112>
 800d8d0:	3c01      	subs	r4, #1
 800d8d2:	f101 0814 	add.w	r8, r1, #20
 800d8d6:	f100 0514 	add.w	r5, r0, #20
 800d8da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d8de:	9301      	str	r3, [sp, #4]
 800d8e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d8e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d8e8:	3301      	adds	r3, #1
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d8f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d8f4:	fbb2 f6f3 	udiv	r6, r2, r3
 800d8f8:	d331      	bcc.n	800d95e <quorem+0x9e>
 800d8fa:	f04f 0e00 	mov.w	lr, #0
 800d8fe:	4640      	mov	r0, r8
 800d900:	46ac      	mov	ip, r5
 800d902:	46f2      	mov	sl, lr
 800d904:	f850 2b04 	ldr.w	r2, [r0], #4
 800d908:	b293      	uxth	r3, r2
 800d90a:	fb06 e303 	mla	r3, r6, r3, lr
 800d90e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d912:	b29b      	uxth	r3, r3
 800d914:	ebaa 0303 	sub.w	r3, sl, r3
 800d918:	0c12      	lsrs	r2, r2, #16
 800d91a:	f8dc a000 	ldr.w	sl, [ip]
 800d91e:	fb06 e202 	mla	r2, r6, r2, lr
 800d922:	fa13 f38a 	uxtah	r3, r3, sl
 800d926:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d92a:	fa1f fa82 	uxth.w	sl, r2
 800d92e:	f8dc 2000 	ldr.w	r2, [ip]
 800d932:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d936:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d940:	4581      	cmp	r9, r0
 800d942:	f84c 3b04 	str.w	r3, [ip], #4
 800d946:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d94a:	d2db      	bcs.n	800d904 <quorem+0x44>
 800d94c:	f855 300b 	ldr.w	r3, [r5, fp]
 800d950:	b92b      	cbnz	r3, 800d95e <quorem+0x9e>
 800d952:	9b01      	ldr	r3, [sp, #4]
 800d954:	3b04      	subs	r3, #4
 800d956:	429d      	cmp	r5, r3
 800d958:	461a      	mov	r2, r3
 800d95a:	d32e      	bcc.n	800d9ba <quorem+0xfa>
 800d95c:	613c      	str	r4, [r7, #16]
 800d95e:	4638      	mov	r0, r7
 800d960:	f001 fe9a 	bl	800f698 <__mcmp>
 800d964:	2800      	cmp	r0, #0
 800d966:	db24      	blt.n	800d9b2 <quorem+0xf2>
 800d968:	3601      	adds	r6, #1
 800d96a:	4628      	mov	r0, r5
 800d96c:	f04f 0c00 	mov.w	ip, #0
 800d970:	f858 2b04 	ldr.w	r2, [r8], #4
 800d974:	f8d0 e000 	ldr.w	lr, [r0]
 800d978:	b293      	uxth	r3, r2
 800d97a:	ebac 0303 	sub.w	r3, ip, r3
 800d97e:	0c12      	lsrs	r2, r2, #16
 800d980:	fa13 f38e 	uxtah	r3, r3, lr
 800d984:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d988:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d98c:	b29b      	uxth	r3, r3
 800d98e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d992:	45c1      	cmp	r9, r8
 800d994:	f840 3b04 	str.w	r3, [r0], #4
 800d998:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d99c:	d2e8      	bcs.n	800d970 <quorem+0xb0>
 800d99e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d9a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d9a6:	b922      	cbnz	r2, 800d9b2 <quorem+0xf2>
 800d9a8:	3b04      	subs	r3, #4
 800d9aa:	429d      	cmp	r5, r3
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	d30a      	bcc.n	800d9c6 <quorem+0x106>
 800d9b0:	613c      	str	r4, [r7, #16]
 800d9b2:	4630      	mov	r0, r6
 800d9b4:	b003      	add	sp, #12
 800d9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9ba:	6812      	ldr	r2, [r2, #0]
 800d9bc:	3b04      	subs	r3, #4
 800d9be:	2a00      	cmp	r2, #0
 800d9c0:	d1cc      	bne.n	800d95c <quorem+0x9c>
 800d9c2:	3c01      	subs	r4, #1
 800d9c4:	e7c7      	b.n	800d956 <quorem+0x96>
 800d9c6:	6812      	ldr	r2, [r2, #0]
 800d9c8:	3b04      	subs	r3, #4
 800d9ca:	2a00      	cmp	r2, #0
 800d9cc:	d1f0      	bne.n	800d9b0 <quorem+0xf0>
 800d9ce:	3c01      	subs	r4, #1
 800d9d0:	e7eb      	b.n	800d9aa <quorem+0xea>
 800d9d2:	2000      	movs	r0, #0
 800d9d4:	e7ee      	b.n	800d9b4 <quorem+0xf4>
	...

0800d9d8 <_dtoa_r>:
 800d9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9dc:	ed2d 8b02 	vpush	{d8}
 800d9e0:	ec57 6b10 	vmov	r6, r7, d0
 800d9e4:	b095      	sub	sp, #84	; 0x54
 800d9e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d9e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d9ec:	9105      	str	r1, [sp, #20]
 800d9ee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d9f2:	4604      	mov	r4, r0
 800d9f4:	9209      	str	r2, [sp, #36]	; 0x24
 800d9f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d9f8:	b975      	cbnz	r5, 800da18 <_dtoa_r+0x40>
 800d9fa:	2010      	movs	r0, #16
 800d9fc:	f001 fb6a 	bl	800f0d4 <malloc>
 800da00:	4602      	mov	r2, r0
 800da02:	6260      	str	r0, [r4, #36]	; 0x24
 800da04:	b920      	cbnz	r0, 800da10 <_dtoa_r+0x38>
 800da06:	4bb2      	ldr	r3, [pc, #712]	; (800dcd0 <_dtoa_r+0x2f8>)
 800da08:	21ea      	movs	r1, #234	; 0xea
 800da0a:	48b2      	ldr	r0, [pc, #712]	; (800dcd4 <_dtoa_r+0x2fc>)
 800da0c:	f002 fad8 	bl	800ffc0 <__assert_func>
 800da10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800da14:	6005      	str	r5, [r0, #0]
 800da16:	60c5      	str	r5, [r0, #12]
 800da18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da1a:	6819      	ldr	r1, [r3, #0]
 800da1c:	b151      	cbz	r1, 800da34 <_dtoa_r+0x5c>
 800da1e:	685a      	ldr	r2, [r3, #4]
 800da20:	604a      	str	r2, [r1, #4]
 800da22:	2301      	movs	r3, #1
 800da24:	4093      	lsls	r3, r2
 800da26:	608b      	str	r3, [r1, #8]
 800da28:	4620      	mov	r0, r4
 800da2a:	f001 fbad 	bl	800f188 <_Bfree>
 800da2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da30:	2200      	movs	r2, #0
 800da32:	601a      	str	r2, [r3, #0]
 800da34:	1e3b      	subs	r3, r7, #0
 800da36:	bfb9      	ittee	lt
 800da38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800da3c:	9303      	strlt	r3, [sp, #12]
 800da3e:	2300      	movge	r3, #0
 800da40:	f8c8 3000 	strge.w	r3, [r8]
 800da44:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800da48:	4ba3      	ldr	r3, [pc, #652]	; (800dcd8 <_dtoa_r+0x300>)
 800da4a:	bfbc      	itt	lt
 800da4c:	2201      	movlt	r2, #1
 800da4e:	f8c8 2000 	strlt.w	r2, [r8]
 800da52:	ea33 0309 	bics.w	r3, r3, r9
 800da56:	d11b      	bne.n	800da90 <_dtoa_r+0xb8>
 800da58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800da5a:	f242 730f 	movw	r3, #9999	; 0x270f
 800da5e:	6013      	str	r3, [r2, #0]
 800da60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800da64:	4333      	orrs	r3, r6
 800da66:	f000 857a 	beq.w	800e55e <_dtoa_r+0xb86>
 800da6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da6c:	b963      	cbnz	r3, 800da88 <_dtoa_r+0xb0>
 800da6e:	4b9b      	ldr	r3, [pc, #620]	; (800dcdc <_dtoa_r+0x304>)
 800da70:	e024      	b.n	800dabc <_dtoa_r+0xe4>
 800da72:	4b9b      	ldr	r3, [pc, #620]	; (800dce0 <_dtoa_r+0x308>)
 800da74:	9300      	str	r3, [sp, #0]
 800da76:	3308      	adds	r3, #8
 800da78:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800da7a:	6013      	str	r3, [r2, #0]
 800da7c:	9800      	ldr	r0, [sp, #0]
 800da7e:	b015      	add	sp, #84	; 0x54
 800da80:	ecbd 8b02 	vpop	{d8}
 800da84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da88:	4b94      	ldr	r3, [pc, #592]	; (800dcdc <_dtoa_r+0x304>)
 800da8a:	9300      	str	r3, [sp, #0]
 800da8c:	3303      	adds	r3, #3
 800da8e:	e7f3      	b.n	800da78 <_dtoa_r+0xa0>
 800da90:	ed9d 7b02 	vldr	d7, [sp, #8]
 800da94:	2200      	movs	r2, #0
 800da96:	ec51 0b17 	vmov	r0, r1, d7
 800da9a:	2300      	movs	r3, #0
 800da9c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800daa0:	f7f3 f832 	bl	8000b08 <__aeabi_dcmpeq>
 800daa4:	4680      	mov	r8, r0
 800daa6:	b158      	cbz	r0, 800dac0 <_dtoa_r+0xe8>
 800daa8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800daaa:	2301      	movs	r3, #1
 800daac:	6013      	str	r3, [r2, #0]
 800daae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	f000 8551 	beq.w	800e558 <_dtoa_r+0xb80>
 800dab6:	488b      	ldr	r0, [pc, #556]	; (800dce4 <_dtoa_r+0x30c>)
 800dab8:	6018      	str	r0, [r3, #0]
 800daba:	1e43      	subs	r3, r0, #1
 800dabc:	9300      	str	r3, [sp, #0]
 800dabe:	e7dd      	b.n	800da7c <_dtoa_r+0xa4>
 800dac0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800dac4:	aa12      	add	r2, sp, #72	; 0x48
 800dac6:	a913      	add	r1, sp, #76	; 0x4c
 800dac8:	4620      	mov	r0, r4
 800daca:	f001 ff05 	bl	800f8d8 <__d2b>
 800dace:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dad2:	4683      	mov	fp, r0
 800dad4:	2d00      	cmp	r5, #0
 800dad6:	d07c      	beq.n	800dbd2 <_dtoa_r+0x1fa>
 800dad8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dada:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800dade:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dae2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800dae6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800daea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800daee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800daf2:	4b7d      	ldr	r3, [pc, #500]	; (800dce8 <_dtoa_r+0x310>)
 800daf4:	2200      	movs	r2, #0
 800daf6:	4630      	mov	r0, r6
 800daf8:	4639      	mov	r1, r7
 800dafa:	f7f2 fbe5 	bl	80002c8 <__aeabi_dsub>
 800dafe:	a36e      	add	r3, pc, #440	; (adr r3, 800dcb8 <_dtoa_r+0x2e0>)
 800db00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db04:	f7f2 fd98 	bl	8000638 <__aeabi_dmul>
 800db08:	a36d      	add	r3, pc, #436	; (adr r3, 800dcc0 <_dtoa_r+0x2e8>)
 800db0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db0e:	f7f2 fbdd 	bl	80002cc <__adddf3>
 800db12:	4606      	mov	r6, r0
 800db14:	4628      	mov	r0, r5
 800db16:	460f      	mov	r7, r1
 800db18:	f7f2 fd24 	bl	8000564 <__aeabi_i2d>
 800db1c:	a36a      	add	r3, pc, #424	; (adr r3, 800dcc8 <_dtoa_r+0x2f0>)
 800db1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db22:	f7f2 fd89 	bl	8000638 <__aeabi_dmul>
 800db26:	4602      	mov	r2, r0
 800db28:	460b      	mov	r3, r1
 800db2a:	4630      	mov	r0, r6
 800db2c:	4639      	mov	r1, r7
 800db2e:	f7f2 fbcd 	bl	80002cc <__adddf3>
 800db32:	4606      	mov	r6, r0
 800db34:	460f      	mov	r7, r1
 800db36:	f7f3 f82f 	bl	8000b98 <__aeabi_d2iz>
 800db3a:	2200      	movs	r2, #0
 800db3c:	4682      	mov	sl, r0
 800db3e:	2300      	movs	r3, #0
 800db40:	4630      	mov	r0, r6
 800db42:	4639      	mov	r1, r7
 800db44:	f7f2 ffea 	bl	8000b1c <__aeabi_dcmplt>
 800db48:	b148      	cbz	r0, 800db5e <_dtoa_r+0x186>
 800db4a:	4650      	mov	r0, sl
 800db4c:	f7f2 fd0a 	bl	8000564 <__aeabi_i2d>
 800db50:	4632      	mov	r2, r6
 800db52:	463b      	mov	r3, r7
 800db54:	f7f2 ffd8 	bl	8000b08 <__aeabi_dcmpeq>
 800db58:	b908      	cbnz	r0, 800db5e <_dtoa_r+0x186>
 800db5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800db5e:	f1ba 0f16 	cmp.w	sl, #22
 800db62:	d854      	bhi.n	800dc0e <_dtoa_r+0x236>
 800db64:	4b61      	ldr	r3, [pc, #388]	; (800dcec <_dtoa_r+0x314>)
 800db66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800db6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800db72:	f7f2 ffd3 	bl	8000b1c <__aeabi_dcmplt>
 800db76:	2800      	cmp	r0, #0
 800db78:	d04b      	beq.n	800dc12 <_dtoa_r+0x23a>
 800db7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800db7e:	2300      	movs	r3, #0
 800db80:	930e      	str	r3, [sp, #56]	; 0x38
 800db82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800db84:	1b5d      	subs	r5, r3, r5
 800db86:	1e6b      	subs	r3, r5, #1
 800db88:	9304      	str	r3, [sp, #16]
 800db8a:	bf43      	ittte	mi
 800db8c:	2300      	movmi	r3, #0
 800db8e:	f1c5 0801 	rsbmi	r8, r5, #1
 800db92:	9304      	strmi	r3, [sp, #16]
 800db94:	f04f 0800 	movpl.w	r8, #0
 800db98:	f1ba 0f00 	cmp.w	sl, #0
 800db9c:	db3b      	blt.n	800dc16 <_dtoa_r+0x23e>
 800db9e:	9b04      	ldr	r3, [sp, #16]
 800dba0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800dba4:	4453      	add	r3, sl
 800dba6:	9304      	str	r3, [sp, #16]
 800dba8:	2300      	movs	r3, #0
 800dbaa:	9306      	str	r3, [sp, #24]
 800dbac:	9b05      	ldr	r3, [sp, #20]
 800dbae:	2b09      	cmp	r3, #9
 800dbb0:	d869      	bhi.n	800dc86 <_dtoa_r+0x2ae>
 800dbb2:	2b05      	cmp	r3, #5
 800dbb4:	bfc4      	itt	gt
 800dbb6:	3b04      	subgt	r3, #4
 800dbb8:	9305      	strgt	r3, [sp, #20]
 800dbba:	9b05      	ldr	r3, [sp, #20]
 800dbbc:	f1a3 0302 	sub.w	r3, r3, #2
 800dbc0:	bfcc      	ite	gt
 800dbc2:	2500      	movgt	r5, #0
 800dbc4:	2501      	movle	r5, #1
 800dbc6:	2b03      	cmp	r3, #3
 800dbc8:	d869      	bhi.n	800dc9e <_dtoa_r+0x2c6>
 800dbca:	e8df f003 	tbb	[pc, r3]
 800dbce:	4e2c      	.short	0x4e2c
 800dbd0:	5a4c      	.short	0x5a4c
 800dbd2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800dbd6:	441d      	add	r5, r3
 800dbd8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dbdc:	2b20      	cmp	r3, #32
 800dbde:	bfc1      	itttt	gt
 800dbe0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dbe4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800dbe8:	fa09 f303 	lslgt.w	r3, r9, r3
 800dbec:	fa26 f000 	lsrgt.w	r0, r6, r0
 800dbf0:	bfda      	itte	le
 800dbf2:	f1c3 0320 	rsble	r3, r3, #32
 800dbf6:	fa06 f003 	lslle.w	r0, r6, r3
 800dbfa:	4318      	orrgt	r0, r3
 800dbfc:	f7f2 fca2 	bl	8000544 <__aeabi_ui2d>
 800dc00:	2301      	movs	r3, #1
 800dc02:	4606      	mov	r6, r0
 800dc04:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800dc08:	3d01      	subs	r5, #1
 800dc0a:	9310      	str	r3, [sp, #64]	; 0x40
 800dc0c:	e771      	b.n	800daf2 <_dtoa_r+0x11a>
 800dc0e:	2301      	movs	r3, #1
 800dc10:	e7b6      	b.n	800db80 <_dtoa_r+0x1a8>
 800dc12:	900e      	str	r0, [sp, #56]	; 0x38
 800dc14:	e7b5      	b.n	800db82 <_dtoa_r+0x1aa>
 800dc16:	f1ca 0300 	rsb	r3, sl, #0
 800dc1a:	9306      	str	r3, [sp, #24]
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	eba8 080a 	sub.w	r8, r8, sl
 800dc22:	930d      	str	r3, [sp, #52]	; 0x34
 800dc24:	e7c2      	b.n	800dbac <_dtoa_r+0x1d4>
 800dc26:	2300      	movs	r3, #0
 800dc28:	9308      	str	r3, [sp, #32]
 800dc2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	dc39      	bgt.n	800dca4 <_dtoa_r+0x2cc>
 800dc30:	f04f 0901 	mov.w	r9, #1
 800dc34:	f8cd 9004 	str.w	r9, [sp, #4]
 800dc38:	464b      	mov	r3, r9
 800dc3a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800dc3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dc40:	2200      	movs	r2, #0
 800dc42:	6042      	str	r2, [r0, #4]
 800dc44:	2204      	movs	r2, #4
 800dc46:	f102 0614 	add.w	r6, r2, #20
 800dc4a:	429e      	cmp	r6, r3
 800dc4c:	6841      	ldr	r1, [r0, #4]
 800dc4e:	d92f      	bls.n	800dcb0 <_dtoa_r+0x2d8>
 800dc50:	4620      	mov	r0, r4
 800dc52:	f001 fa59 	bl	800f108 <_Balloc>
 800dc56:	9000      	str	r0, [sp, #0]
 800dc58:	2800      	cmp	r0, #0
 800dc5a:	d14b      	bne.n	800dcf4 <_dtoa_r+0x31c>
 800dc5c:	4b24      	ldr	r3, [pc, #144]	; (800dcf0 <_dtoa_r+0x318>)
 800dc5e:	4602      	mov	r2, r0
 800dc60:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dc64:	e6d1      	b.n	800da0a <_dtoa_r+0x32>
 800dc66:	2301      	movs	r3, #1
 800dc68:	e7de      	b.n	800dc28 <_dtoa_r+0x250>
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	9308      	str	r3, [sp, #32]
 800dc6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc70:	eb0a 0903 	add.w	r9, sl, r3
 800dc74:	f109 0301 	add.w	r3, r9, #1
 800dc78:	2b01      	cmp	r3, #1
 800dc7a:	9301      	str	r3, [sp, #4]
 800dc7c:	bfb8      	it	lt
 800dc7e:	2301      	movlt	r3, #1
 800dc80:	e7dd      	b.n	800dc3e <_dtoa_r+0x266>
 800dc82:	2301      	movs	r3, #1
 800dc84:	e7f2      	b.n	800dc6c <_dtoa_r+0x294>
 800dc86:	2501      	movs	r5, #1
 800dc88:	2300      	movs	r3, #0
 800dc8a:	9305      	str	r3, [sp, #20]
 800dc8c:	9508      	str	r5, [sp, #32]
 800dc8e:	f04f 39ff 	mov.w	r9, #4294967295
 800dc92:	2200      	movs	r2, #0
 800dc94:	f8cd 9004 	str.w	r9, [sp, #4]
 800dc98:	2312      	movs	r3, #18
 800dc9a:	9209      	str	r2, [sp, #36]	; 0x24
 800dc9c:	e7cf      	b.n	800dc3e <_dtoa_r+0x266>
 800dc9e:	2301      	movs	r3, #1
 800dca0:	9308      	str	r3, [sp, #32]
 800dca2:	e7f4      	b.n	800dc8e <_dtoa_r+0x2b6>
 800dca4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800dca8:	f8cd 9004 	str.w	r9, [sp, #4]
 800dcac:	464b      	mov	r3, r9
 800dcae:	e7c6      	b.n	800dc3e <_dtoa_r+0x266>
 800dcb0:	3101      	adds	r1, #1
 800dcb2:	6041      	str	r1, [r0, #4]
 800dcb4:	0052      	lsls	r2, r2, #1
 800dcb6:	e7c6      	b.n	800dc46 <_dtoa_r+0x26e>
 800dcb8:	636f4361 	.word	0x636f4361
 800dcbc:	3fd287a7 	.word	0x3fd287a7
 800dcc0:	8b60c8b3 	.word	0x8b60c8b3
 800dcc4:	3fc68a28 	.word	0x3fc68a28
 800dcc8:	509f79fb 	.word	0x509f79fb
 800dccc:	3fd34413 	.word	0x3fd34413
 800dcd0:	080116be 	.word	0x080116be
 800dcd4:	080116d5 	.word	0x080116d5
 800dcd8:	7ff00000 	.word	0x7ff00000
 800dcdc:	080116ba 	.word	0x080116ba
 800dce0:	080116b1 	.word	0x080116b1
 800dce4:	0801153d 	.word	0x0801153d
 800dce8:	3ff80000 	.word	0x3ff80000
 800dcec:	080118b0 	.word	0x080118b0
 800dcf0:	08011734 	.word	0x08011734
 800dcf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dcf6:	9a00      	ldr	r2, [sp, #0]
 800dcf8:	601a      	str	r2, [r3, #0]
 800dcfa:	9b01      	ldr	r3, [sp, #4]
 800dcfc:	2b0e      	cmp	r3, #14
 800dcfe:	f200 80ad 	bhi.w	800de5c <_dtoa_r+0x484>
 800dd02:	2d00      	cmp	r5, #0
 800dd04:	f000 80aa 	beq.w	800de5c <_dtoa_r+0x484>
 800dd08:	f1ba 0f00 	cmp.w	sl, #0
 800dd0c:	dd36      	ble.n	800dd7c <_dtoa_r+0x3a4>
 800dd0e:	4ac3      	ldr	r2, [pc, #780]	; (800e01c <_dtoa_r+0x644>)
 800dd10:	f00a 030f 	and.w	r3, sl, #15
 800dd14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dd18:	ed93 7b00 	vldr	d7, [r3]
 800dd1c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800dd20:	ea4f 172a 	mov.w	r7, sl, asr #4
 800dd24:	eeb0 8a47 	vmov.f32	s16, s14
 800dd28:	eef0 8a67 	vmov.f32	s17, s15
 800dd2c:	d016      	beq.n	800dd5c <_dtoa_r+0x384>
 800dd2e:	4bbc      	ldr	r3, [pc, #752]	; (800e020 <_dtoa_r+0x648>)
 800dd30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dd34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dd38:	f7f2 fda8 	bl	800088c <__aeabi_ddiv>
 800dd3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd40:	f007 070f 	and.w	r7, r7, #15
 800dd44:	2503      	movs	r5, #3
 800dd46:	4eb6      	ldr	r6, [pc, #728]	; (800e020 <_dtoa_r+0x648>)
 800dd48:	b957      	cbnz	r7, 800dd60 <_dtoa_r+0x388>
 800dd4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd4e:	ec53 2b18 	vmov	r2, r3, d8
 800dd52:	f7f2 fd9b 	bl	800088c <__aeabi_ddiv>
 800dd56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd5a:	e029      	b.n	800ddb0 <_dtoa_r+0x3d8>
 800dd5c:	2502      	movs	r5, #2
 800dd5e:	e7f2      	b.n	800dd46 <_dtoa_r+0x36e>
 800dd60:	07f9      	lsls	r1, r7, #31
 800dd62:	d508      	bpl.n	800dd76 <_dtoa_r+0x39e>
 800dd64:	ec51 0b18 	vmov	r0, r1, d8
 800dd68:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dd6c:	f7f2 fc64 	bl	8000638 <__aeabi_dmul>
 800dd70:	ec41 0b18 	vmov	d8, r0, r1
 800dd74:	3501      	adds	r5, #1
 800dd76:	107f      	asrs	r7, r7, #1
 800dd78:	3608      	adds	r6, #8
 800dd7a:	e7e5      	b.n	800dd48 <_dtoa_r+0x370>
 800dd7c:	f000 80a6 	beq.w	800decc <_dtoa_r+0x4f4>
 800dd80:	f1ca 0600 	rsb	r6, sl, #0
 800dd84:	4ba5      	ldr	r3, [pc, #660]	; (800e01c <_dtoa_r+0x644>)
 800dd86:	4fa6      	ldr	r7, [pc, #664]	; (800e020 <_dtoa_r+0x648>)
 800dd88:	f006 020f 	and.w	r2, r6, #15
 800dd8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd94:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dd98:	f7f2 fc4e 	bl	8000638 <__aeabi_dmul>
 800dd9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dda0:	1136      	asrs	r6, r6, #4
 800dda2:	2300      	movs	r3, #0
 800dda4:	2502      	movs	r5, #2
 800dda6:	2e00      	cmp	r6, #0
 800dda8:	f040 8085 	bne.w	800deb6 <_dtoa_r+0x4de>
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d1d2      	bne.n	800dd56 <_dtoa_r+0x37e>
 800ddb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	f000 808c 	beq.w	800ded0 <_dtoa_r+0x4f8>
 800ddb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ddbc:	4b99      	ldr	r3, [pc, #612]	; (800e024 <_dtoa_r+0x64c>)
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	4630      	mov	r0, r6
 800ddc2:	4639      	mov	r1, r7
 800ddc4:	f7f2 feaa 	bl	8000b1c <__aeabi_dcmplt>
 800ddc8:	2800      	cmp	r0, #0
 800ddca:	f000 8081 	beq.w	800ded0 <_dtoa_r+0x4f8>
 800ddce:	9b01      	ldr	r3, [sp, #4]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d07d      	beq.n	800ded0 <_dtoa_r+0x4f8>
 800ddd4:	f1b9 0f00 	cmp.w	r9, #0
 800ddd8:	dd3c      	ble.n	800de54 <_dtoa_r+0x47c>
 800ddda:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ddde:	9307      	str	r3, [sp, #28]
 800dde0:	2200      	movs	r2, #0
 800dde2:	4b91      	ldr	r3, [pc, #580]	; (800e028 <_dtoa_r+0x650>)
 800dde4:	4630      	mov	r0, r6
 800dde6:	4639      	mov	r1, r7
 800dde8:	f7f2 fc26 	bl	8000638 <__aeabi_dmul>
 800ddec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddf0:	3501      	adds	r5, #1
 800ddf2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ddf6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ddfa:	4628      	mov	r0, r5
 800ddfc:	f7f2 fbb2 	bl	8000564 <__aeabi_i2d>
 800de00:	4632      	mov	r2, r6
 800de02:	463b      	mov	r3, r7
 800de04:	f7f2 fc18 	bl	8000638 <__aeabi_dmul>
 800de08:	4b88      	ldr	r3, [pc, #544]	; (800e02c <_dtoa_r+0x654>)
 800de0a:	2200      	movs	r2, #0
 800de0c:	f7f2 fa5e 	bl	80002cc <__adddf3>
 800de10:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800de14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de18:	9303      	str	r3, [sp, #12]
 800de1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d15c      	bne.n	800deda <_dtoa_r+0x502>
 800de20:	4b83      	ldr	r3, [pc, #524]	; (800e030 <_dtoa_r+0x658>)
 800de22:	2200      	movs	r2, #0
 800de24:	4630      	mov	r0, r6
 800de26:	4639      	mov	r1, r7
 800de28:	f7f2 fa4e 	bl	80002c8 <__aeabi_dsub>
 800de2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800de30:	4606      	mov	r6, r0
 800de32:	460f      	mov	r7, r1
 800de34:	f7f2 fe90 	bl	8000b58 <__aeabi_dcmpgt>
 800de38:	2800      	cmp	r0, #0
 800de3a:	f040 8296 	bne.w	800e36a <_dtoa_r+0x992>
 800de3e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800de42:	4630      	mov	r0, r6
 800de44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de48:	4639      	mov	r1, r7
 800de4a:	f7f2 fe67 	bl	8000b1c <__aeabi_dcmplt>
 800de4e:	2800      	cmp	r0, #0
 800de50:	f040 8288 	bne.w	800e364 <_dtoa_r+0x98c>
 800de54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800de58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800de5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800de5e:	2b00      	cmp	r3, #0
 800de60:	f2c0 8158 	blt.w	800e114 <_dtoa_r+0x73c>
 800de64:	f1ba 0f0e 	cmp.w	sl, #14
 800de68:	f300 8154 	bgt.w	800e114 <_dtoa_r+0x73c>
 800de6c:	4b6b      	ldr	r3, [pc, #428]	; (800e01c <_dtoa_r+0x644>)
 800de6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800de72:	e9d3 8900 	ldrd	r8, r9, [r3]
 800de76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de78:	2b00      	cmp	r3, #0
 800de7a:	f280 80e3 	bge.w	800e044 <_dtoa_r+0x66c>
 800de7e:	9b01      	ldr	r3, [sp, #4]
 800de80:	2b00      	cmp	r3, #0
 800de82:	f300 80df 	bgt.w	800e044 <_dtoa_r+0x66c>
 800de86:	f040 826d 	bne.w	800e364 <_dtoa_r+0x98c>
 800de8a:	4b69      	ldr	r3, [pc, #420]	; (800e030 <_dtoa_r+0x658>)
 800de8c:	2200      	movs	r2, #0
 800de8e:	4640      	mov	r0, r8
 800de90:	4649      	mov	r1, r9
 800de92:	f7f2 fbd1 	bl	8000638 <__aeabi_dmul>
 800de96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800de9a:	f7f2 fe53 	bl	8000b44 <__aeabi_dcmpge>
 800de9e:	9e01      	ldr	r6, [sp, #4]
 800dea0:	4637      	mov	r7, r6
 800dea2:	2800      	cmp	r0, #0
 800dea4:	f040 8243 	bne.w	800e32e <_dtoa_r+0x956>
 800dea8:	9d00      	ldr	r5, [sp, #0]
 800deaa:	2331      	movs	r3, #49	; 0x31
 800deac:	f805 3b01 	strb.w	r3, [r5], #1
 800deb0:	f10a 0a01 	add.w	sl, sl, #1
 800deb4:	e23f      	b.n	800e336 <_dtoa_r+0x95e>
 800deb6:	07f2      	lsls	r2, r6, #31
 800deb8:	d505      	bpl.n	800dec6 <_dtoa_r+0x4ee>
 800deba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800debe:	f7f2 fbbb 	bl	8000638 <__aeabi_dmul>
 800dec2:	3501      	adds	r5, #1
 800dec4:	2301      	movs	r3, #1
 800dec6:	1076      	asrs	r6, r6, #1
 800dec8:	3708      	adds	r7, #8
 800deca:	e76c      	b.n	800dda6 <_dtoa_r+0x3ce>
 800decc:	2502      	movs	r5, #2
 800dece:	e76f      	b.n	800ddb0 <_dtoa_r+0x3d8>
 800ded0:	9b01      	ldr	r3, [sp, #4]
 800ded2:	f8cd a01c 	str.w	sl, [sp, #28]
 800ded6:	930c      	str	r3, [sp, #48]	; 0x30
 800ded8:	e78d      	b.n	800ddf6 <_dtoa_r+0x41e>
 800deda:	9900      	ldr	r1, [sp, #0]
 800dedc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800dede:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dee0:	4b4e      	ldr	r3, [pc, #312]	; (800e01c <_dtoa_r+0x644>)
 800dee2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dee6:	4401      	add	r1, r0
 800dee8:	9102      	str	r1, [sp, #8]
 800deea:	9908      	ldr	r1, [sp, #32]
 800deec:	eeb0 8a47 	vmov.f32	s16, s14
 800def0:	eef0 8a67 	vmov.f32	s17, s15
 800def4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800def8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800defc:	2900      	cmp	r1, #0
 800defe:	d045      	beq.n	800df8c <_dtoa_r+0x5b4>
 800df00:	494c      	ldr	r1, [pc, #304]	; (800e034 <_dtoa_r+0x65c>)
 800df02:	2000      	movs	r0, #0
 800df04:	f7f2 fcc2 	bl	800088c <__aeabi_ddiv>
 800df08:	ec53 2b18 	vmov	r2, r3, d8
 800df0c:	f7f2 f9dc 	bl	80002c8 <__aeabi_dsub>
 800df10:	9d00      	ldr	r5, [sp, #0]
 800df12:	ec41 0b18 	vmov	d8, r0, r1
 800df16:	4639      	mov	r1, r7
 800df18:	4630      	mov	r0, r6
 800df1a:	f7f2 fe3d 	bl	8000b98 <__aeabi_d2iz>
 800df1e:	900c      	str	r0, [sp, #48]	; 0x30
 800df20:	f7f2 fb20 	bl	8000564 <__aeabi_i2d>
 800df24:	4602      	mov	r2, r0
 800df26:	460b      	mov	r3, r1
 800df28:	4630      	mov	r0, r6
 800df2a:	4639      	mov	r1, r7
 800df2c:	f7f2 f9cc 	bl	80002c8 <__aeabi_dsub>
 800df30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df32:	3330      	adds	r3, #48	; 0x30
 800df34:	f805 3b01 	strb.w	r3, [r5], #1
 800df38:	ec53 2b18 	vmov	r2, r3, d8
 800df3c:	4606      	mov	r6, r0
 800df3e:	460f      	mov	r7, r1
 800df40:	f7f2 fdec 	bl	8000b1c <__aeabi_dcmplt>
 800df44:	2800      	cmp	r0, #0
 800df46:	d165      	bne.n	800e014 <_dtoa_r+0x63c>
 800df48:	4632      	mov	r2, r6
 800df4a:	463b      	mov	r3, r7
 800df4c:	4935      	ldr	r1, [pc, #212]	; (800e024 <_dtoa_r+0x64c>)
 800df4e:	2000      	movs	r0, #0
 800df50:	f7f2 f9ba 	bl	80002c8 <__aeabi_dsub>
 800df54:	ec53 2b18 	vmov	r2, r3, d8
 800df58:	f7f2 fde0 	bl	8000b1c <__aeabi_dcmplt>
 800df5c:	2800      	cmp	r0, #0
 800df5e:	f040 80b9 	bne.w	800e0d4 <_dtoa_r+0x6fc>
 800df62:	9b02      	ldr	r3, [sp, #8]
 800df64:	429d      	cmp	r5, r3
 800df66:	f43f af75 	beq.w	800de54 <_dtoa_r+0x47c>
 800df6a:	4b2f      	ldr	r3, [pc, #188]	; (800e028 <_dtoa_r+0x650>)
 800df6c:	ec51 0b18 	vmov	r0, r1, d8
 800df70:	2200      	movs	r2, #0
 800df72:	f7f2 fb61 	bl	8000638 <__aeabi_dmul>
 800df76:	4b2c      	ldr	r3, [pc, #176]	; (800e028 <_dtoa_r+0x650>)
 800df78:	ec41 0b18 	vmov	d8, r0, r1
 800df7c:	2200      	movs	r2, #0
 800df7e:	4630      	mov	r0, r6
 800df80:	4639      	mov	r1, r7
 800df82:	f7f2 fb59 	bl	8000638 <__aeabi_dmul>
 800df86:	4606      	mov	r6, r0
 800df88:	460f      	mov	r7, r1
 800df8a:	e7c4      	b.n	800df16 <_dtoa_r+0x53e>
 800df8c:	ec51 0b17 	vmov	r0, r1, d7
 800df90:	f7f2 fb52 	bl	8000638 <__aeabi_dmul>
 800df94:	9b02      	ldr	r3, [sp, #8]
 800df96:	9d00      	ldr	r5, [sp, #0]
 800df98:	930c      	str	r3, [sp, #48]	; 0x30
 800df9a:	ec41 0b18 	vmov	d8, r0, r1
 800df9e:	4639      	mov	r1, r7
 800dfa0:	4630      	mov	r0, r6
 800dfa2:	f7f2 fdf9 	bl	8000b98 <__aeabi_d2iz>
 800dfa6:	9011      	str	r0, [sp, #68]	; 0x44
 800dfa8:	f7f2 fadc 	bl	8000564 <__aeabi_i2d>
 800dfac:	4602      	mov	r2, r0
 800dfae:	460b      	mov	r3, r1
 800dfb0:	4630      	mov	r0, r6
 800dfb2:	4639      	mov	r1, r7
 800dfb4:	f7f2 f988 	bl	80002c8 <__aeabi_dsub>
 800dfb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dfba:	3330      	adds	r3, #48	; 0x30
 800dfbc:	f805 3b01 	strb.w	r3, [r5], #1
 800dfc0:	9b02      	ldr	r3, [sp, #8]
 800dfc2:	429d      	cmp	r5, r3
 800dfc4:	4606      	mov	r6, r0
 800dfc6:	460f      	mov	r7, r1
 800dfc8:	f04f 0200 	mov.w	r2, #0
 800dfcc:	d134      	bne.n	800e038 <_dtoa_r+0x660>
 800dfce:	4b19      	ldr	r3, [pc, #100]	; (800e034 <_dtoa_r+0x65c>)
 800dfd0:	ec51 0b18 	vmov	r0, r1, d8
 800dfd4:	f7f2 f97a 	bl	80002cc <__adddf3>
 800dfd8:	4602      	mov	r2, r0
 800dfda:	460b      	mov	r3, r1
 800dfdc:	4630      	mov	r0, r6
 800dfde:	4639      	mov	r1, r7
 800dfe0:	f7f2 fdba 	bl	8000b58 <__aeabi_dcmpgt>
 800dfe4:	2800      	cmp	r0, #0
 800dfe6:	d175      	bne.n	800e0d4 <_dtoa_r+0x6fc>
 800dfe8:	ec53 2b18 	vmov	r2, r3, d8
 800dfec:	4911      	ldr	r1, [pc, #68]	; (800e034 <_dtoa_r+0x65c>)
 800dfee:	2000      	movs	r0, #0
 800dff0:	f7f2 f96a 	bl	80002c8 <__aeabi_dsub>
 800dff4:	4602      	mov	r2, r0
 800dff6:	460b      	mov	r3, r1
 800dff8:	4630      	mov	r0, r6
 800dffa:	4639      	mov	r1, r7
 800dffc:	f7f2 fd8e 	bl	8000b1c <__aeabi_dcmplt>
 800e000:	2800      	cmp	r0, #0
 800e002:	f43f af27 	beq.w	800de54 <_dtoa_r+0x47c>
 800e006:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e008:	1e6b      	subs	r3, r5, #1
 800e00a:	930c      	str	r3, [sp, #48]	; 0x30
 800e00c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e010:	2b30      	cmp	r3, #48	; 0x30
 800e012:	d0f8      	beq.n	800e006 <_dtoa_r+0x62e>
 800e014:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e018:	e04a      	b.n	800e0b0 <_dtoa_r+0x6d8>
 800e01a:	bf00      	nop
 800e01c:	080118b0 	.word	0x080118b0
 800e020:	08011888 	.word	0x08011888
 800e024:	3ff00000 	.word	0x3ff00000
 800e028:	40240000 	.word	0x40240000
 800e02c:	401c0000 	.word	0x401c0000
 800e030:	40140000 	.word	0x40140000
 800e034:	3fe00000 	.word	0x3fe00000
 800e038:	4baf      	ldr	r3, [pc, #700]	; (800e2f8 <_dtoa_r+0x920>)
 800e03a:	f7f2 fafd 	bl	8000638 <__aeabi_dmul>
 800e03e:	4606      	mov	r6, r0
 800e040:	460f      	mov	r7, r1
 800e042:	e7ac      	b.n	800df9e <_dtoa_r+0x5c6>
 800e044:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e048:	9d00      	ldr	r5, [sp, #0]
 800e04a:	4642      	mov	r2, r8
 800e04c:	464b      	mov	r3, r9
 800e04e:	4630      	mov	r0, r6
 800e050:	4639      	mov	r1, r7
 800e052:	f7f2 fc1b 	bl	800088c <__aeabi_ddiv>
 800e056:	f7f2 fd9f 	bl	8000b98 <__aeabi_d2iz>
 800e05a:	9002      	str	r0, [sp, #8]
 800e05c:	f7f2 fa82 	bl	8000564 <__aeabi_i2d>
 800e060:	4642      	mov	r2, r8
 800e062:	464b      	mov	r3, r9
 800e064:	f7f2 fae8 	bl	8000638 <__aeabi_dmul>
 800e068:	4602      	mov	r2, r0
 800e06a:	460b      	mov	r3, r1
 800e06c:	4630      	mov	r0, r6
 800e06e:	4639      	mov	r1, r7
 800e070:	f7f2 f92a 	bl	80002c8 <__aeabi_dsub>
 800e074:	9e02      	ldr	r6, [sp, #8]
 800e076:	9f01      	ldr	r7, [sp, #4]
 800e078:	3630      	adds	r6, #48	; 0x30
 800e07a:	f805 6b01 	strb.w	r6, [r5], #1
 800e07e:	9e00      	ldr	r6, [sp, #0]
 800e080:	1bae      	subs	r6, r5, r6
 800e082:	42b7      	cmp	r7, r6
 800e084:	4602      	mov	r2, r0
 800e086:	460b      	mov	r3, r1
 800e088:	d137      	bne.n	800e0fa <_dtoa_r+0x722>
 800e08a:	f7f2 f91f 	bl	80002cc <__adddf3>
 800e08e:	4642      	mov	r2, r8
 800e090:	464b      	mov	r3, r9
 800e092:	4606      	mov	r6, r0
 800e094:	460f      	mov	r7, r1
 800e096:	f7f2 fd5f 	bl	8000b58 <__aeabi_dcmpgt>
 800e09a:	b9c8      	cbnz	r0, 800e0d0 <_dtoa_r+0x6f8>
 800e09c:	4642      	mov	r2, r8
 800e09e:	464b      	mov	r3, r9
 800e0a0:	4630      	mov	r0, r6
 800e0a2:	4639      	mov	r1, r7
 800e0a4:	f7f2 fd30 	bl	8000b08 <__aeabi_dcmpeq>
 800e0a8:	b110      	cbz	r0, 800e0b0 <_dtoa_r+0x6d8>
 800e0aa:	9b02      	ldr	r3, [sp, #8]
 800e0ac:	07d9      	lsls	r1, r3, #31
 800e0ae:	d40f      	bmi.n	800e0d0 <_dtoa_r+0x6f8>
 800e0b0:	4620      	mov	r0, r4
 800e0b2:	4659      	mov	r1, fp
 800e0b4:	f001 f868 	bl	800f188 <_Bfree>
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	702b      	strb	r3, [r5, #0]
 800e0bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e0be:	f10a 0001 	add.w	r0, sl, #1
 800e0c2:	6018      	str	r0, [r3, #0]
 800e0c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	f43f acd8 	beq.w	800da7c <_dtoa_r+0xa4>
 800e0cc:	601d      	str	r5, [r3, #0]
 800e0ce:	e4d5      	b.n	800da7c <_dtoa_r+0xa4>
 800e0d0:	f8cd a01c 	str.w	sl, [sp, #28]
 800e0d4:	462b      	mov	r3, r5
 800e0d6:	461d      	mov	r5, r3
 800e0d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e0dc:	2a39      	cmp	r2, #57	; 0x39
 800e0de:	d108      	bne.n	800e0f2 <_dtoa_r+0x71a>
 800e0e0:	9a00      	ldr	r2, [sp, #0]
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	d1f7      	bne.n	800e0d6 <_dtoa_r+0x6fe>
 800e0e6:	9a07      	ldr	r2, [sp, #28]
 800e0e8:	9900      	ldr	r1, [sp, #0]
 800e0ea:	3201      	adds	r2, #1
 800e0ec:	9207      	str	r2, [sp, #28]
 800e0ee:	2230      	movs	r2, #48	; 0x30
 800e0f0:	700a      	strb	r2, [r1, #0]
 800e0f2:	781a      	ldrb	r2, [r3, #0]
 800e0f4:	3201      	adds	r2, #1
 800e0f6:	701a      	strb	r2, [r3, #0]
 800e0f8:	e78c      	b.n	800e014 <_dtoa_r+0x63c>
 800e0fa:	4b7f      	ldr	r3, [pc, #508]	; (800e2f8 <_dtoa_r+0x920>)
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	f7f2 fa9b 	bl	8000638 <__aeabi_dmul>
 800e102:	2200      	movs	r2, #0
 800e104:	2300      	movs	r3, #0
 800e106:	4606      	mov	r6, r0
 800e108:	460f      	mov	r7, r1
 800e10a:	f7f2 fcfd 	bl	8000b08 <__aeabi_dcmpeq>
 800e10e:	2800      	cmp	r0, #0
 800e110:	d09b      	beq.n	800e04a <_dtoa_r+0x672>
 800e112:	e7cd      	b.n	800e0b0 <_dtoa_r+0x6d8>
 800e114:	9a08      	ldr	r2, [sp, #32]
 800e116:	2a00      	cmp	r2, #0
 800e118:	f000 80c4 	beq.w	800e2a4 <_dtoa_r+0x8cc>
 800e11c:	9a05      	ldr	r2, [sp, #20]
 800e11e:	2a01      	cmp	r2, #1
 800e120:	f300 80a8 	bgt.w	800e274 <_dtoa_r+0x89c>
 800e124:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e126:	2a00      	cmp	r2, #0
 800e128:	f000 80a0 	beq.w	800e26c <_dtoa_r+0x894>
 800e12c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e130:	9e06      	ldr	r6, [sp, #24]
 800e132:	4645      	mov	r5, r8
 800e134:	9a04      	ldr	r2, [sp, #16]
 800e136:	2101      	movs	r1, #1
 800e138:	441a      	add	r2, r3
 800e13a:	4620      	mov	r0, r4
 800e13c:	4498      	add	r8, r3
 800e13e:	9204      	str	r2, [sp, #16]
 800e140:	f001 f928 	bl	800f394 <__i2b>
 800e144:	4607      	mov	r7, r0
 800e146:	2d00      	cmp	r5, #0
 800e148:	dd0b      	ble.n	800e162 <_dtoa_r+0x78a>
 800e14a:	9b04      	ldr	r3, [sp, #16]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	dd08      	ble.n	800e162 <_dtoa_r+0x78a>
 800e150:	42ab      	cmp	r3, r5
 800e152:	9a04      	ldr	r2, [sp, #16]
 800e154:	bfa8      	it	ge
 800e156:	462b      	movge	r3, r5
 800e158:	eba8 0803 	sub.w	r8, r8, r3
 800e15c:	1aed      	subs	r5, r5, r3
 800e15e:	1ad3      	subs	r3, r2, r3
 800e160:	9304      	str	r3, [sp, #16]
 800e162:	9b06      	ldr	r3, [sp, #24]
 800e164:	b1fb      	cbz	r3, 800e1a6 <_dtoa_r+0x7ce>
 800e166:	9b08      	ldr	r3, [sp, #32]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	f000 809f 	beq.w	800e2ac <_dtoa_r+0x8d4>
 800e16e:	2e00      	cmp	r6, #0
 800e170:	dd11      	ble.n	800e196 <_dtoa_r+0x7be>
 800e172:	4639      	mov	r1, r7
 800e174:	4632      	mov	r2, r6
 800e176:	4620      	mov	r0, r4
 800e178:	f001 f9c8 	bl	800f50c <__pow5mult>
 800e17c:	465a      	mov	r2, fp
 800e17e:	4601      	mov	r1, r0
 800e180:	4607      	mov	r7, r0
 800e182:	4620      	mov	r0, r4
 800e184:	f001 f91c 	bl	800f3c0 <__multiply>
 800e188:	4659      	mov	r1, fp
 800e18a:	9007      	str	r0, [sp, #28]
 800e18c:	4620      	mov	r0, r4
 800e18e:	f000 fffb 	bl	800f188 <_Bfree>
 800e192:	9b07      	ldr	r3, [sp, #28]
 800e194:	469b      	mov	fp, r3
 800e196:	9b06      	ldr	r3, [sp, #24]
 800e198:	1b9a      	subs	r2, r3, r6
 800e19a:	d004      	beq.n	800e1a6 <_dtoa_r+0x7ce>
 800e19c:	4659      	mov	r1, fp
 800e19e:	4620      	mov	r0, r4
 800e1a0:	f001 f9b4 	bl	800f50c <__pow5mult>
 800e1a4:	4683      	mov	fp, r0
 800e1a6:	2101      	movs	r1, #1
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	f001 f8f3 	bl	800f394 <__i2b>
 800e1ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	4606      	mov	r6, r0
 800e1b4:	dd7c      	ble.n	800e2b0 <_dtoa_r+0x8d8>
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	4601      	mov	r1, r0
 800e1ba:	4620      	mov	r0, r4
 800e1bc:	f001 f9a6 	bl	800f50c <__pow5mult>
 800e1c0:	9b05      	ldr	r3, [sp, #20]
 800e1c2:	2b01      	cmp	r3, #1
 800e1c4:	4606      	mov	r6, r0
 800e1c6:	dd76      	ble.n	800e2b6 <_dtoa_r+0x8de>
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	9306      	str	r3, [sp, #24]
 800e1cc:	6933      	ldr	r3, [r6, #16]
 800e1ce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e1d2:	6918      	ldr	r0, [r3, #16]
 800e1d4:	f001 f88e 	bl	800f2f4 <__hi0bits>
 800e1d8:	f1c0 0020 	rsb	r0, r0, #32
 800e1dc:	9b04      	ldr	r3, [sp, #16]
 800e1de:	4418      	add	r0, r3
 800e1e0:	f010 001f 	ands.w	r0, r0, #31
 800e1e4:	f000 8086 	beq.w	800e2f4 <_dtoa_r+0x91c>
 800e1e8:	f1c0 0320 	rsb	r3, r0, #32
 800e1ec:	2b04      	cmp	r3, #4
 800e1ee:	dd7f      	ble.n	800e2f0 <_dtoa_r+0x918>
 800e1f0:	f1c0 001c 	rsb	r0, r0, #28
 800e1f4:	9b04      	ldr	r3, [sp, #16]
 800e1f6:	4403      	add	r3, r0
 800e1f8:	4480      	add	r8, r0
 800e1fa:	4405      	add	r5, r0
 800e1fc:	9304      	str	r3, [sp, #16]
 800e1fe:	f1b8 0f00 	cmp.w	r8, #0
 800e202:	dd05      	ble.n	800e210 <_dtoa_r+0x838>
 800e204:	4659      	mov	r1, fp
 800e206:	4642      	mov	r2, r8
 800e208:	4620      	mov	r0, r4
 800e20a:	f001 f9d9 	bl	800f5c0 <__lshift>
 800e20e:	4683      	mov	fp, r0
 800e210:	9b04      	ldr	r3, [sp, #16]
 800e212:	2b00      	cmp	r3, #0
 800e214:	dd05      	ble.n	800e222 <_dtoa_r+0x84a>
 800e216:	4631      	mov	r1, r6
 800e218:	461a      	mov	r2, r3
 800e21a:	4620      	mov	r0, r4
 800e21c:	f001 f9d0 	bl	800f5c0 <__lshift>
 800e220:	4606      	mov	r6, r0
 800e222:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e224:	2b00      	cmp	r3, #0
 800e226:	d069      	beq.n	800e2fc <_dtoa_r+0x924>
 800e228:	4631      	mov	r1, r6
 800e22a:	4658      	mov	r0, fp
 800e22c:	f001 fa34 	bl	800f698 <__mcmp>
 800e230:	2800      	cmp	r0, #0
 800e232:	da63      	bge.n	800e2fc <_dtoa_r+0x924>
 800e234:	2300      	movs	r3, #0
 800e236:	4659      	mov	r1, fp
 800e238:	220a      	movs	r2, #10
 800e23a:	4620      	mov	r0, r4
 800e23c:	f000 ffc6 	bl	800f1cc <__multadd>
 800e240:	9b08      	ldr	r3, [sp, #32]
 800e242:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e246:	4683      	mov	fp, r0
 800e248:	2b00      	cmp	r3, #0
 800e24a:	f000 818f 	beq.w	800e56c <_dtoa_r+0xb94>
 800e24e:	4639      	mov	r1, r7
 800e250:	2300      	movs	r3, #0
 800e252:	220a      	movs	r2, #10
 800e254:	4620      	mov	r0, r4
 800e256:	f000 ffb9 	bl	800f1cc <__multadd>
 800e25a:	f1b9 0f00 	cmp.w	r9, #0
 800e25e:	4607      	mov	r7, r0
 800e260:	f300 808e 	bgt.w	800e380 <_dtoa_r+0x9a8>
 800e264:	9b05      	ldr	r3, [sp, #20]
 800e266:	2b02      	cmp	r3, #2
 800e268:	dc50      	bgt.n	800e30c <_dtoa_r+0x934>
 800e26a:	e089      	b.n	800e380 <_dtoa_r+0x9a8>
 800e26c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e26e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e272:	e75d      	b.n	800e130 <_dtoa_r+0x758>
 800e274:	9b01      	ldr	r3, [sp, #4]
 800e276:	1e5e      	subs	r6, r3, #1
 800e278:	9b06      	ldr	r3, [sp, #24]
 800e27a:	42b3      	cmp	r3, r6
 800e27c:	bfbf      	itttt	lt
 800e27e:	9b06      	ldrlt	r3, [sp, #24]
 800e280:	9606      	strlt	r6, [sp, #24]
 800e282:	1af2      	sublt	r2, r6, r3
 800e284:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e286:	bfb6      	itet	lt
 800e288:	189b      	addlt	r3, r3, r2
 800e28a:	1b9e      	subge	r6, r3, r6
 800e28c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e28e:	9b01      	ldr	r3, [sp, #4]
 800e290:	bfb8      	it	lt
 800e292:	2600      	movlt	r6, #0
 800e294:	2b00      	cmp	r3, #0
 800e296:	bfb5      	itete	lt
 800e298:	eba8 0503 	sublt.w	r5, r8, r3
 800e29c:	9b01      	ldrge	r3, [sp, #4]
 800e29e:	2300      	movlt	r3, #0
 800e2a0:	4645      	movge	r5, r8
 800e2a2:	e747      	b.n	800e134 <_dtoa_r+0x75c>
 800e2a4:	9e06      	ldr	r6, [sp, #24]
 800e2a6:	9f08      	ldr	r7, [sp, #32]
 800e2a8:	4645      	mov	r5, r8
 800e2aa:	e74c      	b.n	800e146 <_dtoa_r+0x76e>
 800e2ac:	9a06      	ldr	r2, [sp, #24]
 800e2ae:	e775      	b.n	800e19c <_dtoa_r+0x7c4>
 800e2b0:	9b05      	ldr	r3, [sp, #20]
 800e2b2:	2b01      	cmp	r3, #1
 800e2b4:	dc18      	bgt.n	800e2e8 <_dtoa_r+0x910>
 800e2b6:	9b02      	ldr	r3, [sp, #8]
 800e2b8:	b9b3      	cbnz	r3, 800e2e8 <_dtoa_r+0x910>
 800e2ba:	9b03      	ldr	r3, [sp, #12]
 800e2bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e2c0:	b9a3      	cbnz	r3, 800e2ec <_dtoa_r+0x914>
 800e2c2:	9b03      	ldr	r3, [sp, #12]
 800e2c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e2c8:	0d1b      	lsrs	r3, r3, #20
 800e2ca:	051b      	lsls	r3, r3, #20
 800e2cc:	b12b      	cbz	r3, 800e2da <_dtoa_r+0x902>
 800e2ce:	9b04      	ldr	r3, [sp, #16]
 800e2d0:	3301      	adds	r3, #1
 800e2d2:	9304      	str	r3, [sp, #16]
 800e2d4:	f108 0801 	add.w	r8, r8, #1
 800e2d8:	2301      	movs	r3, #1
 800e2da:	9306      	str	r3, [sp, #24]
 800e2dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	f47f af74 	bne.w	800e1cc <_dtoa_r+0x7f4>
 800e2e4:	2001      	movs	r0, #1
 800e2e6:	e779      	b.n	800e1dc <_dtoa_r+0x804>
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	e7f6      	b.n	800e2da <_dtoa_r+0x902>
 800e2ec:	9b02      	ldr	r3, [sp, #8]
 800e2ee:	e7f4      	b.n	800e2da <_dtoa_r+0x902>
 800e2f0:	d085      	beq.n	800e1fe <_dtoa_r+0x826>
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	301c      	adds	r0, #28
 800e2f6:	e77d      	b.n	800e1f4 <_dtoa_r+0x81c>
 800e2f8:	40240000 	.word	0x40240000
 800e2fc:	9b01      	ldr	r3, [sp, #4]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	dc38      	bgt.n	800e374 <_dtoa_r+0x99c>
 800e302:	9b05      	ldr	r3, [sp, #20]
 800e304:	2b02      	cmp	r3, #2
 800e306:	dd35      	ble.n	800e374 <_dtoa_r+0x99c>
 800e308:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e30c:	f1b9 0f00 	cmp.w	r9, #0
 800e310:	d10d      	bne.n	800e32e <_dtoa_r+0x956>
 800e312:	4631      	mov	r1, r6
 800e314:	464b      	mov	r3, r9
 800e316:	2205      	movs	r2, #5
 800e318:	4620      	mov	r0, r4
 800e31a:	f000 ff57 	bl	800f1cc <__multadd>
 800e31e:	4601      	mov	r1, r0
 800e320:	4606      	mov	r6, r0
 800e322:	4658      	mov	r0, fp
 800e324:	f001 f9b8 	bl	800f698 <__mcmp>
 800e328:	2800      	cmp	r0, #0
 800e32a:	f73f adbd 	bgt.w	800dea8 <_dtoa_r+0x4d0>
 800e32e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e330:	9d00      	ldr	r5, [sp, #0]
 800e332:	ea6f 0a03 	mvn.w	sl, r3
 800e336:	f04f 0800 	mov.w	r8, #0
 800e33a:	4631      	mov	r1, r6
 800e33c:	4620      	mov	r0, r4
 800e33e:	f000 ff23 	bl	800f188 <_Bfree>
 800e342:	2f00      	cmp	r7, #0
 800e344:	f43f aeb4 	beq.w	800e0b0 <_dtoa_r+0x6d8>
 800e348:	f1b8 0f00 	cmp.w	r8, #0
 800e34c:	d005      	beq.n	800e35a <_dtoa_r+0x982>
 800e34e:	45b8      	cmp	r8, r7
 800e350:	d003      	beq.n	800e35a <_dtoa_r+0x982>
 800e352:	4641      	mov	r1, r8
 800e354:	4620      	mov	r0, r4
 800e356:	f000 ff17 	bl	800f188 <_Bfree>
 800e35a:	4639      	mov	r1, r7
 800e35c:	4620      	mov	r0, r4
 800e35e:	f000 ff13 	bl	800f188 <_Bfree>
 800e362:	e6a5      	b.n	800e0b0 <_dtoa_r+0x6d8>
 800e364:	2600      	movs	r6, #0
 800e366:	4637      	mov	r7, r6
 800e368:	e7e1      	b.n	800e32e <_dtoa_r+0x956>
 800e36a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e36c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e370:	4637      	mov	r7, r6
 800e372:	e599      	b.n	800dea8 <_dtoa_r+0x4d0>
 800e374:	9b08      	ldr	r3, [sp, #32]
 800e376:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	f000 80fd 	beq.w	800e57a <_dtoa_r+0xba2>
 800e380:	2d00      	cmp	r5, #0
 800e382:	dd05      	ble.n	800e390 <_dtoa_r+0x9b8>
 800e384:	4639      	mov	r1, r7
 800e386:	462a      	mov	r2, r5
 800e388:	4620      	mov	r0, r4
 800e38a:	f001 f919 	bl	800f5c0 <__lshift>
 800e38e:	4607      	mov	r7, r0
 800e390:	9b06      	ldr	r3, [sp, #24]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d05c      	beq.n	800e450 <_dtoa_r+0xa78>
 800e396:	6879      	ldr	r1, [r7, #4]
 800e398:	4620      	mov	r0, r4
 800e39a:	f000 feb5 	bl	800f108 <_Balloc>
 800e39e:	4605      	mov	r5, r0
 800e3a0:	b928      	cbnz	r0, 800e3ae <_dtoa_r+0x9d6>
 800e3a2:	4b80      	ldr	r3, [pc, #512]	; (800e5a4 <_dtoa_r+0xbcc>)
 800e3a4:	4602      	mov	r2, r0
 800e3a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e3aa:	f7ff bb2e 	b.w	800da0a <_dtoa_r+0x32>
 800e3ae:	693a      	ldr	r2, [r7, #16]
 800e3b0:	3202      	adds	r2, #2
 800e3b2:	0092      	lsls	r2, r2, #2
 800e3b4:	f107 010c 	add.w	r1, r7, #12
 800e3b8:	300c      	adds	r0, #12
 800e3ba:	f7fd fdf1 	bl	800bfa0 <memcpy>
 800e3be:	2201      	movs	r2, #1
 800e3c0:	4629      	mov	r1, r5
 800e3c2:	4620      	mov	r0, r4
 800e3c4:	f001 f8fc 	bl	800f5c0 <__lshift>
 800e3c8:	9b00      	ldr	r3, [sp, #0]
 800e3ca:	3301      	adds	r3, #1
 800e3cc:	9301      	str	r3, [sp, #4]
 800e3ce:	9b00      	ldr	r3, [sp, #0]
 800e3d0:	444b      	add	r3, r9
 800e3d2:	9307      	str	r3, [sp, #28]
 800e3d4:	9b02      	ldr	r3, [sp, #8]
 800e3d6:	f003 0301 	and.w	r3, r3, #1
 800e3da:	46b8      	mov	r8, r7
 800e3dc:	9306      	str	r3, [sp, #24]
 800e3de:	4607      	mov	r7, r0
 800e3e0:	9b01      	ldr	r3, [sp, #4]
 800e3e2:	4631      	mov	r1, r6
 800e3e4:	3b01      	subs	r3, #1
 800e3e6:	4658      	mov	r0, fp
 800e3e8:	9302      	str	r3, [sp, #8]
 800e3ea:	f7ff fa69 	bl	800d8c0 <quorem>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	3330      	adds	r3, #48	; 0x30
 800e3f2:	9004      	str	r0, [sp, #16]
 800e3f4:	4641      	mov	r1, r8
 800e3f6:	4658      	mov	r0, fp
 800e3f8:	9308      	str	r3, [sp, #32]
 800e3fa:	f001 f94d 	bl	800f698 <__mcmp>
 800e3fe:	463a      	mov	r2, r7
 800e400:	4681      	mov	r9, r0
 800e402:	4631      	mov	r1, r6
 800e404:	4620      	mov	r0, r4
 800e406:	f001 f963 	bl	800f6d0 <__mdiff>
 800e40a:	68c2      	ldr	r2, [r0, #12]
 800e40c:	9b08      	ldr	r3, [sp, #32]
 800e40e:	4605      	mov	r5, r0
 800e410:	bb02      	cbnz	r2, 800e454 <_dtoa_r+0xa7c>
 800e412:	4601      	mov	r1, r0
 800e414:	4658      	mov	r0, fp
 800e416:	f001 f93f 	bl	800f698 <__mcmp>
 800e41a:	9b08      	ldr	r3, [sp, #32]
 800e41c:	4602      	mov	r2, r0
 800e41e:	4629      	mov	r1, r5
 800e420:	4620      	mov	r0, r4
 800e422:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e426:	f000 feaf 	bl	800f188 <_Bfree>
 800e42a:	9b05      	ldr	r3, [sp, #20]
 800e42c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e42e:	9d01      	ldr	r5, [sp, #4]
 800e430:	ea43 0102 	orr.w	r1, r3, r2
 800e434:	9b06      	ldr	r3, [sp, #24]
 800e436:	430b      	orrs	r3, r1
 800e438:	9b08      	ldr	r3, [sp, #32]
 800e43a:	d10d      	bne.n	800e458 <_dtoa_r+0xa80>
 800e43c:	2b39      	cmp	r3, #57	; 0x39
 800e43e:	d029      	beq.n	800e494 <_dtoa_r+0xabc>
 800e440:	f1b9 0f00 	cmp.w	r9, #0
 800e444:	dd01      	ble.n	800e44a <_dtoa_r+0xa72>
 800e446:	9b04      	ldr	r3, [sp, #16]
 800e448:	3331      	adds	r3, #49	; 0x31
 800e44a:	9a02      	ldr	r2, [sp, #8]
 800e44c:	7013      	strb	r3, [r2, #0]
 800e44e:	e774      	b.n	800e33a <_dtoa_r+0x962>
 800e450:	4638      	mov	r0, r7
 800e452:	e7b9      	b.n	800e3c8 <_dtoa_r+0x9f0>
 800e454:	2201      	movs	r2, #1
 800e456:	e7e2      	b.n	800e41e <_dtoa_r+0xa46>
 800e458:	f1b9 0f00 	cmp.w	r9, #0
 800e45c:	db06      	blt.n	800e46c <_dtoa_r+0xa94>
 800e45e:	9905      	ldr	r1, [sp, #20]
 800e460:	ea41 0909 	orr.w	r9, r1, r9
 800e464:	9906      	ldr	r1, [sp, #24]
 800e466:	ea59 0101 	orrs.w	r1, r9, r1
 800e46a:	d120      	bne.n	800e4ae <_dtoa_r+0xad6>
 800e46c:	2a00      	cmp	r2, #0
 800e46e:	ddec      	ble.n	800e44a <_dtoa_r+0xa72>
 800e470:	4659      	mov	r1, fp
 800e472:	2201      	movs	r2, #1
 800e474:	4620      	mov	r0, r4
 800e476:	9301      	str	r3, [sp, #4]
 800e478:	f001 f8a2 	bl	800f5c0 <__lshift>
 800e47c:	4631      	mov	r1, r6
 800e47e:	4683      	mov	fp, r0
 800e480:	f001 f90a 	bl	800f698 <__mcmp>
 800e484:	2800      	cmp	r0, #0
 800e486:	9b01      	ldr	r3, [sp, #4]
 800e488:	dc02      	bgt.n	800e490 <_dtoa_r+0xab8>
 800e48a:	d1de      	bne.n	800e44a <_dtoa_r+0xa72>
 800e48c:	07da      	lsls	r2, r3, #31
 800e48e:	d5dc      	bpl.n	800e44a <_dtoa_r+0xa72>
 800e490:	2b39      	cmp	r3, #57	; 0x39
 800e492:	d1d8      	bne.n	800e446 <_dtoa_r+0xa6e>
 800e494:	9a02      	ldr	r2, [sp, #8]
 800e496:	2339      	movs	r3, #57	; 0x39
 800e498:	7013      	strb	r3, [r2, #0]
 800e49a:	462b      	mov	r3, r5
 800e49c:	461d      	mov	r5, r3
 800e49e:	3b01      	subs	r3, #1
 800e4a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e4a4:	2a39      	cmp	r2, #57	; 0x39
 800e4a6:	d050      	beq.n	800e54a <_dtoa_r+0xb72>
 800e4a8:	3201      	adds	r2, #1
 800e4aa:	701a      	strb	r2, [r3, #0]
 800e4ac:	e745      	b.n	800e33a <_dtoa_r+0x962>
 800e4ae:	2a00      	cmp	r2, #0
 800e4b0:	dd03      	ble.n	800e4ba <_dtoa_r+0xae2>
 800e4b2:	2b39      	cmp	r3, #57	; 0x39
 800e4b4:	d0ee      	beq.n	800e494 <_dtoa_r+0xabc>
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	e7c7      	b.n	800e44a <_dtoa_r+0xa72>
 800e4ba:	9a01      	ldr	r2, [sp, #4]
 800e4bc:	9907      	ldr	r1, [sp, #28]
 800e4be:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e4c2:	428a      	cmp	r2, r1
 800e4c4:	d02a      	beq.n	800e51c <_dtoa_r+0xb44>
 800e4c6:	4659      	mov	r1, fp
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	220a      	movs	r2, #10
 800e4cc:	4620      	mov	r0, r4
 800e4ce:	f000 fe7d 	bl	800f1cc <__multadd>
 800e4d2:	45b8      	cmp	r8, r7
 800e4d4:	4683      	mov	fp, r0
 800e4d6:	f04f 0300 	mov.w	r3, #0
 800e4da:	f04f 020a 	mov.w	r2, #10
 800e4de:	4641      	mov	r1, r8
 800e4e0:	4620      	mov	r0, r4
 800e4e2:	d107      	bne.n	800e4f4 <_dtoa_r+0xb1c>
 800e4e4:	f000 fe72 	bl	800f1cc <__multadd>
 800e4e8:	4680      	mov	r8, r0
 800e4ea:	4607      	mov	r7, r0
 800e4ec:	9b01      	ldr	r3, [sp, #4]
 800e4ee:	3301      	adds	r3, #1
 800e4f0:	9301      	str	r3, [sp, #4]
 800e4f2:	e775      	b.n	800e3e0 <_dtoa_r+0xa08>
 800e4f4:	f000 fe6a 	bl	800f1cc <__multadd>
 800e4f8:	4639      	mov	r1, r7
 800e4fa:	4680      	mov	r8, r0
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	220a      	movs	r2, #10
 800e500:	4620      	mov	r0, r4
 800e502:	f000 fe63 	bl	800f1cc <__multadd>
 800e506:	4607      	mov	r7, r0
 800e508:	e7f0      	b.n	800e4ec <_dtoa_r+0xb14>
 800e50a:	f1b9 0f00 	cmp.w	r9, #0
 800e50e:	9a00      	ldr	r2, [sp, #0]
 800e510:	bfcc      	ite	gt
 800e512:	464d      	movgt	r5, r9
 800e514:	2501      	movle	r5, #1
 800e516:	4415      	add	r5, r2
 800e518:	f04f 0800 	mov.w	r8, #0
 800e51c:	4659      	mov	r1, fp
 800e51e:	2201      	movs	r2, #1
 800e520:	4620      	mov	r0, r4
 800e522:	9301      	str	r3, [sp, #4]
 800e524:	f001 f84c 	bl	800f5c0 <__lshift>
 800e528:	4631      	mov	r1, r6
 800e52a:	4683      	mov	fp, r0
 800e52c:	f001 f8b4 	bl	800f698 <__mcmp>
 800e530:	2800      	cmp	r0, #0
 800e532:	dcb2      	bgt.n	800e49a <_dtoa_r+0xac2>
 800e534:	d102      	bne.n	800e53c <_dtoa_r+0xb64>
 800e536:	9b01      	ldr	r3, [sp, #4]
 800e538:	07db      	lsls	r3, r3, #31
 800e53a:	d4ae      	bmi.n	800e49a <_dtoa_r+0xac2>
 800e53c:	462b      	mov	r3, r5
 800e53e:	461d      	mov	r5, r3
 800e540:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e544:	2a30      	cmp	r2, #48	; 0x30
 800e546:	d0fa      	beq.n	800e53e <_dtoa_r+0xb66>
 800e548:	e6f7      	b.n	800e33a <_dtoa_r+0x962>
 800e54a:	9a00      	ldr	r2, [sp, #0]
 800e54c:	429a      	cmp	r2, r3
 800e54e:	d1a5      	bne.n	800e49c <_dtoa_r+0xac4>
 800e550:	f10a 0a01 	add.w	sl, sl, #1
 800e554:	2331      	movs	r3, #49	; 0x31
 800e556:	e779      	b.n	800e44c <_dtoa_r+0xa74>
 800e558:	4b13      	ldr	r3, [pc, #76]	; (800e5a8 <_dtoa_r+0xbd0>)
 800e55a:	f7ff baaf 	b.w	800dabc <_dtoa_r+0xe4>
 800e55e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e560:	2b00      	cmp	r3, #0
 800e562:	f47f aa86 	bne.w	800da72 <_dtoa_r+0x9a>
 800e566:	4b11      	ldr	r3, [pc, #68]	; (800e5ac <_dtoa_r+0xbd4>)
 800e568:	f7ff baa8 	b.w	800dabc <_dtoa_r+0xe4>
 800e56c:	f1b9 0f00 	cmp.w	r9, #0
 800e570:	dc03      	bgt.n	800e57a <_dtoa_r+0xba2>
 800e572:	9b05      	ldr	r3, [sp, #20]
 800e574:	2b02      	cmp	r3, #2
 800e576:	f73f aec9 	bgt.w	800e30c <_dtoa_r+0x934>
 800e57a:	9d00      	ldr	r5, [sp, #0]
 800e57c:	4631      	mov	r1, r6
 800e57e:	4658      	mov	r0, fp
 800e580:	f7ff f99e 	bl	800d8c0 <quorem>
 800e584:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e588:	f805 3b01 	strb.w	r3, [r5], #1
 800e58c:	9a00      	ldr	r2, [sp, #0]
 800e58e:	1aaa      	subs	r2, r5, r2
 800e590:	4591      	cmp	r9, r2
 800e592:	ddba      	ble.n	800e50a <_dtoa_r+0xb32>
 800e594:	4659      	mov	r1, fp
 800e596:	2300      	movs	r3, #0
 800e598:	220a      	movs	r2, #10
 800e59a:	4620      	mov	r0, r4
 800e59c:	f000 fe16 	bl	800f1cc <__multadd>
 800e5a0:	4683      	mov	fp, r0
 800e5a2:	e7eb      	b.n	800e57c <_dtoa_r+0xba4>
 800e5a4:	08011734 	.word	0x08011734
 800e5a8:	0801153c 	.word	0x0801153c
 800e5ac:	080116b1 	.word	0x080116b1

0800e5b0 <__sflush_r>:
 800e5b0:	898a      	ldrh	r2, [r1, #12]
 800e5b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5b6:	4605      	mov	r5, r0
 800e5b8:	0710      	lsls	r0, r2, #28
 800e5ba:	460c      	mov	r4, r1
 800e5bc:	d458      	bmi.n	800e670 <__sflush_r+0xc0>
 800e5be:	684b      	ldr	r3, [r1, #4]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	dc05      	bgt.n	800e5d0 <__sflush_r+0x20>
 800e5c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	dc02      	bgt.n	800e5d0 <__sflush_r+0x20>
 800e5ca:	2000      	movs	r0, #0
 800e5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e5d2:	2e00      	cmp	r6, #0
 800e5d4:	d0f9      	beq.n	800e5ca <__sflush_r+0x1a>
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e5dc:	682f      	ldr	r7, [r5, #0]
 800e5de:	602b      	str	r3, [r5, #0]
 800e5e0:	d032      	beq.n	800e648 <__sflush_r+0x98>
 800e5e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e5e4:	89a3      	ldrh	r3, [r4, #12]
 800e5e6:	075a      	lsls	r2, r3, #29
 800e5e8:	d505      	bpl.n	800e5f6 <__sflush_r+0x46>
 800e5ea:	6863      	ldr	r3, [r4, #4]
 800e5ec:	1ac0      	subs	r0, r0, r3
 800e5ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e5f0:	b10b      	cbz	r3, 800e5f6 <__sflush_r+0x46>
 800e5f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e5f4:	1ac0      	subs	r0, r0, r3
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e5fc:	6a21      	ldr	r1, [r4, #32]
 800e5fe:	4628      	mov	r0, r5
 800e600:	47b0      	blx	r6
 800e602:	1c43      	adds	r3, r0, #1
 800e604:	89a3      	ldrh	r3, [r4, #12]
 800e606:	d106      	bne.n	800e616 <__sflush_r+0x66>
 800e608:	6829      	ldr	r1, [r5, #0]
 800e60a:	291d      	cmp	r1, #29
 800e60c:	d82c      	bhi.n	800e668 <__sflush_r+0xb8>
 800e60e:	4a2a      	ldr	r2, [pc, #168]	; (800e6b8 <__sflush_r+0x108>)
 800e610:	40ca      	lsrs	r2, r1
 800e612:	07d6      	lsls	r6, r2, #31
 800e614:	d528      	bpl.n	800e668 <__sflush_r+0xb8>
 800e616:	2200      	movs	r2, #0
 800e618:	6062      	str	r2, [r4, #4]
 800e61a:	04d9      	lsls	r1, r3, #19
 800e61c:	6922      	ldr	r2, [r4, #16]
 800e61e:	6022      	str	r2, [r4, #0]
 800e620:	d504      	bpl.n	800e62c <__sflush_r+0x7c>
 800e622:	1c42      	adds	r2, r0, #1
 800e624:	d101      	bne.n	800e62a <__sflush_r+0x7a>
 800e626:	682b      	ldr	r3, [r5, #0]
 800e628:	b903      	cbnz	r3, 800e62c <__sflush_r+0x7c>
 800e62a:	6560      	str	r0, [r4, #84]	; 0x54
 800e62c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e62e:	602f      	str	r7, [r5, #0]
 800e630:	2900      	cmp	r1, #0
 800e632:	d0ca      	beq.n	800e5ca <__sflush_r+0x1a>
 800e634:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e638:	4299      	cmp	r1, r3
 800e63a:	d002      	beq.n	800e642 <__sflush_r+0x92>
 800e63c:	4628      	mov	r0, r5
 800e63e:	f001 fa2d 	bl	800fa9c <_free_r>
 800e642:	2000      	movs	r0, #0
 800e644:	6360      	str	r0, [r4, #52]	; 0x34
 800e646:	e7c1      	b.n	800e5cc <__sflush_r+0x1c>
 800e648:	6a21      	ldr	r1, [r4, #32]
 800e64a:	2301      	movs	r3, #1
 800e64c:	4628      	mov	r0, r5
 800e64e:	47b0      	blx	r6
 800e650:	1c41      	adds	r1, r0, #1
 800e652:	d1c7      	bne.n	800e5e4 <__sflush_r+0x34>
 800e654:	682b      	ldr	r3, [r5, #0]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d0c4      	beq.n	800e5e4 <__sflush_r+0x34>
 800e65a:	2b1d      	cmp	r3, #29
 800e65c:	d001      	beq.n	800e662 <__sflush_r+0xb2>
 800e65e:	2b16      	cmp	r3, #22
 800e660:	d101      	bne.n	800e666 <__sflush_r+0xb6>
 800e662:	602f      	str	r7, [r5, #0]
 800e664:	e7b1      	b.n	800e5ca <__sflush_r+0x1a>
 800e666:	89a3      	ldrh	r3, [r4, #12]
 800e668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e66c:	81a3      	strh	r3, [r4, #12]
 800e66e:	e7ad      	b.n	800e5cc <__sflush_r+0x1c>
 800e670:	690f      	ldr	r7, [r1, #16]
 800e672:	2f00      	cmp	r7, #0
 800e674:	d0a9      	beq.n	800e5ca <__sflush_r+0x1a>
 800e676:	0793      	lsls	r3, r2, #30
 800e678:	680e      	ldr	r6, [r1, #0]
 800e67a:	bf08      	it	eq
 800e67c:	694b      	ldreq	r3, [r1, #20]
 800e67e:	600f      	str	r7, [r1, #0]
 800e680:	bf18      	it	ne
 800e682:	2300      	movne	r3, #0
 800e684:	eba6 0807 	sub.w	r8, r6, r7
 800e688:	608b      	str	r3, [r1, #8]
 800e68a:	f1b8 0f00 	cmp.w	r8, #0
 800e68e:	dd9c      	ble.n	800e5ca <__sflush_r+0x1a>
 800e690:	6a21      	ldr	r1, [r4, #32]
 800e692:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e694:	4643      	mov	r3, r8
 800e696:	463a      	mov	r2, r7
 800e698:	4628      	mov	r0, r5
 800e69a:	47b0      	blx	r6
 800e69c:	2800      	cmp	r0, #0
 800e69e:	dc06      	bgt.n	800e6ae <__sflush_r+0xfe>
 800e6a0:	89a3      	ldrh	r3, [r4, #12]
 800e6a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6a6:	81a3      	strh	r3, [r4, #12]
 800e6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e6ac:	e78e      	b.n	800e5cc <__sflush_r+0x1c>
 800e6ae:	4407      	add	r7, r0
 800e6b0:	eba8 0800 	sub.w	r8, r8, r0
 800e6b4:	e7e9      	b.n	800e68a <__sflush_r+0xda>
 800e6b6:	bf00      	nop
 800e6b8:	20400001 	.word	0x20400001

0800e6bc <_fflush_r>:
 800e6bc:	b538      	push	{r3, r4, r5, lr}
 800e6be:	690b      	ldr	r3, [r1, #16]
 800e6c0:	4605      	mov	r5, r0
 800e6c2:	460c      	mov	r4, r1
 800e6c4:	b913      	cbnz	r3, 800e6cc <_fflush_r+0x10>
 800e6c6:	2500      	movs	r5, #0
 800e6c8:	4628      	mov	r0, r5
 800e6ca:	bd38      	pop	{r3, r4, r5, pc}
 800e6cc:	b118      	cbz	r0, 800e6d6 <_fflush_r+0x1a>
 800e6ce:	6983      	ldr	r3, [r0, #24]
 800e6d0:	b90b      	cbnz	r3, 800e6d6 <_fflush_r+0x1a>
 800e6d2:	f000 f887 	bl	800e7e4 <__sinit>
 800e6d6:	4b14      	ldr	r3, [pc, #80]	; (800e728 <_fflush_r+0x6c>)
 800e6d8:	429c      	cmp	r4, r3
 800e6da:	d11b      	bne.n	800e714 <_fflush_r+0x58>
 800e6dc:	686c      	ldr	r4, [r5, #4]
 800e6de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d0ef      	beq.n	800e6c6 <_fflush_r+0xa>
 800e6e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e6e8:	07d0      	lsls	r0, r2, #31
 800e6ea:	d404      	bmi.n	800e6f6 <_fflush_r+0x3a>
 800e6ec:	0599      	lsls	r1, r3, #22
 800e6ee:	d402      	bmi.n	800e6f6 <_fflush_r+0x3a>
 800e6f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e6f2:	f000 fc88 	bl	800f006 <__retarget_lock_acquire_recursive>
 800e6f6:	4628      	mov	r0, r5
 800e6f8:	4621      	mov	r1, r4
 800e6fa:	f7ff ff59 	bl	800e5b0 <__sflush_r>
 800e6fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e700:	07da      	lsls	r2, r3, #31
 800e702:	4605      	mov	r5, r0
 800e704:	d4e0      	bmi.n	800e6c8 <_fflush_r+0xc>
 800e706:	89a3      	ldrh	r3, [r4, #12]
 800e708:	059b      	lsls	r3, r3, #22
 800e70a:	d4dd      	bmi.n	800e6c8 <_fflush_r+0xc>
 800e70c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e70e:	f000 fc7b 	bl	800f008 <__retarget_lock_release_recursive>
 800e712:	e7d9      	b.n	800e6c8 <_fflush_r+0xc>
 800e714:	4b05      	ldr	r3, [pc, #20]	; (800e72c <_fflush_r+0x70>)
 800e716:	429c      	cmp	r4, r3
 800e718:	d101      	bne.n	800e71e <_fflush_r+0x62>
 800e71a:	68ac      	ldr	r4, [r5, #8]
 800e71c:	e7df      	b.n	800e6de <_fflush_r+0x22>
 800e71e:	4b04      	ldr	r3, [pc, #16]	; (800e730 <_fflush_r+0x74>)
 800e720:	429c      	cmp	r4, r3
 800e722:	bf08      	it	eq
 800e724:	68ec      	ldreq	r4, [r5, #12]
 800e726:	e7da      	b.n	800e6de <_fflush_r+0x22>
 800e728:	08011768 	.word	0x08011768
 800e72c:	08011788 	.word	0x08011788
 800e730:	08011748 	.word	0x08011748

0800e734 <std>:
 800e734:	2300      	movs	r3, #0
 800e736:	b510      	push	{r4, lr}
 800e738:	4604      	mov	r4, r0
 800e73a:	e9c0 3300 	strd	r3, r3, [r0]
 800e73e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e742:	6083      	str	r3, [r0, #8]
 800e744:	8181      	strh	r1, [r0, #12]
 800e746:	6643      	str	r3, [r0, #100]	; 0x64
 800e748:	81c2      	strh	r2, [r0, #14]
 800e74a:	6183      	str	r3, [r0, #24]
 800e74c:	4619      	mov	r1, r3
 800e74e:	2208      	movs	r2, #8
 800e750:	305c      	adds	r0, #92	; 0x5c
 800e752:	f7fd fc33 	bl	800bfbc <memset>
 800e756:	4b05      	ldr	r3, [pc, #20]	; (800e76c <std+0x38>)
 800e758:	6263      	str	r3, [r4, #36]	; 0x24
 800e75a:	4b05      	ldr	r3, [pc, #20]	; (800e770 <std+0x3c>)
 800e75c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e75e:	4b05      	ldr	r3, [pc, #20]	; (800e774 <std+0x40>)
 800e760:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e762:	4b05      	ldr	r3, [pc, #20]	; (800e778 <std+0x44>)
 800e764:	6224      	str	r4, [r4, #32]
 800e766:	6323      	str	r3, [r4, #48]	; 0x30
 800e768:	bd10      	pop	{r4, pc}
 800e76a:	bf00      	nop
 800e76c:	0800fed9 	.word	0x0800fed9
 800e770:	0800fefb 	.word	0x0800fefb
 800e774:	0800ff33 	.word	0x0800ff33
 800e778:	0800ff57 	.word	0x0800ff57

0800e77c <_cleanup_r>:
 800e77c:	4901      	ldr	r1, [pc, #4]	; (800e784 <_cleanup_r+0x8>)
 800e77e:	f000 b8af 	b.w	800e8e0 <_fwalk_reent>
 800e782:	bf00      	nop
 800e784:	0800e6bd 	.word	0x0800e6bd

0800e788 <__sfmoreglue>:
 800e788:	b570      	push	{r4, r5, r6, lr}
 800e78a:	1e4a      	subs	r2, r1, #1
 800e78c:	2568      	movs	r5, #104	; 0x68
 800e78e:	4355      	muls	r5, r2
 800e790:	460e      	mov	r6, r1
 800e792:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e796:	f001 f9d1 	bl	800fb3c <_malloc_r>
 800e79a:	4604      	mov	r4, r0
 800e79c:	b140      	cbz	r0, 800e7b0 <__sfmoreglue+0x28>
 800e79e:	2100      	movs	r1, #0
 800e7a0:	e9c0 1600 	strd	r1, r6, [r0]
 800e7a4:	300c      	adds	r0, #12
 800e7a6:	60a0      	str	r0, [r4, #8]
 800e7a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e7ac:	f7fd fc06 	bl	800bfbc <memset>
 800e7b0:	4620      	mov	r0, r4
 800e7b2:	bd70      	pop	{r4, r5, r6, pc}

0800e7b4 <__sfp_lock_acquire>:
 800e7b4:	4801      	ldr	r0, [pc, #4]	; (800e7bc <__sfp_lock_acquire+0x8>)
 800e7b6:	f000 bc26 	b.w	800f006 <__retarget_lock_acquire_recursive>
 800e7ba:	bf00      	nop
 800e7bc:	200095a0 	.word	0x200095a0

0800e7c0 <__sfp_lock_release>:
 800e7c0:	4801      	ldr	r0, [pc, #4]	; (800e7c8 <__sfp_lock_release+0x8>)
 800e7c2:	f000 bc21 	b.w	800f008 <__retarget_lock_release_recursive>
 800e7c6:	bf00      	nop
 800e7c8:	200095a0 	.word	0x200095a0

0800e7cc <__sinit_lock_acquire>:
 800e7cc:	4801      	ldr	r0, [pc, #4]	; (800e7d4 <__sinit_lock_acquire+0x8>)
 800e7ce:	f000 bc1a 	b.w	800f006 <__retarget_lock_acquire_recursive>
 800e7d2:	bf00      	nop
 800e7d4:	2000959b 	.word	0x2000959b

0800e7d8 <__sinit_lock_release>:
 800e7d8:	4801      	ldr	r0, [pc, #4]	; (800e7e0 <__sinit_lock_release+0x8>)
 800e7da:	f000 bc15 	b.w	800f008 <__retarget_lock_release_recursive>
 800e7de:	bf00      	nop
 800e7e0:	2000959b 	.word	0x2000959b

0800e7e4 <__sinit>:
 800e7e4:	b510      	push	{r4, lr}
 800e7e6:	4604      	mov	r4, r0
 800e7e8:	f7ff fff0 	bl	800e7cc <__sinit_lock_acquire>
 800e7ec:	69a3      	ldr	r3, [r4, #24]
 800e7ee:	b11b      	cbz	r3, 800e7f8 <__sinit+0x14>
 800e7f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7f4:	f7ff bff0 	b.w	800e7d8 <__sinit_lock_release>
 800e7f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e7fc:	6523      	str	r3, [r4, #80]	; 0x50
 800e7fe:	4b13      	ldr	r3, [pc, #76]	; (800e84c <__sinit+0x68>)
 800e800:	4a13      	ldr	r2, [pc, #76]	; (800e850 <__sinit+0x6c>)
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	62a2      	str	r2, [r4, #40]	; 0x28
 800e806:	42a3      	cmp	r3, r4
 800e808:	bf04      	itt	eq
 800e80a:	2301      	moveq	r3, #1
 800e80c:	61a3      	streq	r3, [r4, #24]
 800e80e:	4620      	mov	r0, r4
 800e810:	f000 f820 	bl	800e854 <__sfp>
 800e814:	6060      	str	r0, [r4, #4]
 800e816:	4620      	mov	r0, r4
 800e818:	f000 f81c 	bl	800e854 <__sfp>
 800e81c:	60a0      	str	r0, [r4, #8]
 800e81e:	4620      	mov	r0, r4
 800e820:	f000 f818 	bl	800e854 <__sfp>
 800e824:	2200      	movs	r2, #0
 800e826:	60e0      	str	r0, [r4, #12]
 800e828:	2104      	movs	r1, #4
 800e82a:	6860      	ldr	r0, [r4, #4]
 800e82c:	f7ff ff82 	bl	800e734 <std>
 800e830:	68a0      	ldr	r0, [r4, #8]
 800e832:	2201      	movs	r2, #1
 800e834:	2109      	movs	r1, #9
 800e836:	f7ff ff7d 	bl	800e734 <std>
 800e83a:	68e0      	ldr	r0, [r4, #12]
 800e83c:	2202      	movs	r2, #2
 800e83e:	2112      	movs	r1, #18
 800e840:	f7ff ff78 	bl	800e734 <std>
 800e844:	2301      	movs	r3, #1
 800e846:	61a3      	str	r3, [r4, #24]
 800e848:	e7d2      	b.n	800e7f0 <__sinit+0xc>
 800e84a:	bf00      	nop
 800e84c:	08011528 	.word	0x08011528
 800e850:	0800e77d 	.word	0x0800e77d

0800e854 <__sfp>:
 800e854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e856:	4607      	mov	r7, r0
 800e858:	f7ff ffac 	bl	800e7b4 <__sfp_lock_acquire>
 800e85c:	4b1e      	ldr	r3, [pc, #120]	; (800e8d8 <__sfp+0x84>)
 800e85e:	681e      	ldr	r6, [r3, #0]
 800e860:	69b3      	ldr	r3, [r6, #24]
 800e862:	b913      	cbnz	r3, 800e86a <__sfp+0x16>
 800e864:	4630      	mov	r0, r6
 800e866:	f7ff ffbd 	bl	800e7e4 <__sinit>
 800e86a:	3648      	adds	r6, #72	; 0x48
 800e86c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e870:	3b01      	subs	r3, #1
 800e872:	d503      	bpl.n	800e87c <__sfp+0x28>
 800e874:	6833      	ldr	r3, [r6, #0]
 800e876:	b30b      	cbz	r3, 800e8bc <__sfp+0x68>
 800e878:	6836      	ldr	r6, [r6, #0]
 800e87a:	e7f7      	b.n	800e86c <__sfp+0x18>
 800e87c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e880:	b9d5      	cbnz	r5, 800e8b8 <__sfp+0x64>
 800e882:	4b16      	ldr	r3, [pc, #88]	; (800e8dc <__sfp+0x88>)
 800e884:	60e3      	str	r3, [r4, #12]
 800e886:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e88a:	6665      	str	r5, [r4, #100]	; 0x64
 800e88c:	f000 fbba 	bl	800f004 <__retarget_lock_init_recursive>
 800e890:	f7ff ff96 	bl	800e7c0 <__sfp_lock_release>
 800e894:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e898:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e89c:	6025      	str	r5, [r4, #0]
 800e89e:	61a5      	str	r5, [r4, #24]
 800e8a0:	2208      	movs	r2, #8
 800e8a2:	4629      	mov	r1, r5
 800e8a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e8a8:	f7fd fb88 	bl	800bfbc <memset>
 800e8ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e8b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e8b4:	4620      	mov	r0, r4
 800e8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8b8:	3468      	adds	r4, #104	; 0x68
 800e8ba:	e7d9      	b.n	800e870 <__sfp+0x1c>
 800e8bc:	2104      	movs	r1, #4
 800e8be:	4638      	mov	r0, r7
 800e8c0:	f7ff ff62 	bl	800e788 <__sfmoreglue>
 800e8c4:	4604      	mov	r4, r0
 800e8c6:	6030      	str	r0, [r6, #0]
 800e8c8:	2800      	cmp	r0, #0
 800e8ca:	d1d5      	bne.n	800e878 <__sfp+0x24>
 800e8cc:	f7ff ff78 	bl	800e7c0 <__sfp_lock_release>
 800e8d0:	230c      	movs	r3, #12
 800e8d2:	603b      	str	r3, [r7, #0]
 800e8d4:	e7ee      	b.n	800e8b4 <__sfp+0x60>
 800e8d6:	bf00      	nop
 800e8d8:	08011528 	.word	0x08011528
 800e8dc:	ffff0001 	.word	0xffff0001

0800e8e0 <_fwalk_reent>:
 800e8e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8e4:	4606      	mov	r6, r0
 800e8e6:	4688      	mov	r8, r1
 800e8e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e8ec:	2700      	movs	r7, #0
 800e8ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e8f2:	f1b9 0901 	subs.w	r9, r9, #1
 800e8f6:	d505      	bpl.n	800e904 <_fwalk_reent+0x24>
 800e8f8:	6824      	ldr	r4, [r4, #0]
 800e8fa:	2c00      	cmp	r4, #0
 800e8fc:	d1f7      	bne.n	800e8ee <_fwalk_reent+0xe>
 800e8fe:	4638      	mov	r0, r7
 800e900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e904:	89ab      	ldrh	r3, [r5, #12]
 800e906:	2b01      	cmp	r3, #1
 800e908:	d907      	bls.n	800e91a <_fwalk_reent+0x3a>
 800e90a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e90e:	3301      	adds	r3, #1
 800e910:	d003      	beq.n	800e91a <_fwalk_reent+0x3a>
 800e912:	4629      	mov	r1, r5
 800e914:	4630      	mov	r0, r6
 800e916:	47c0      	blx	r8
 800e918:	4307      	orrs	r7, r0
 800e91a:	3568      	adds	r5, #104	; 0x68
 800e91c:	e7e9      	b.n	800e8f2 <_fwalk_reent+0x12>

0800e91e <rshift>:
 800e91e:	6903      	ldr	r3, [r0, #16]
 800e920:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e928:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e92c:	f100 0414 	add.w	r4, r0, #20
 800e930:	dd45      	ble.n	800e9be <rshift+0xa0>
 800e932:	f011 011f 	ands.w	r1, r1, #31
 800e936:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e93a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e93e:	d10c      	bne.n	800e95a <rshift+0x3c>
 800e940:	f100 0710 	add.w	r7, r0, #16
 800e944:	4629      	mov	r1, r5
 800e946:	42b1      	cmp	r1, r6
 800e948:	d334      	bcc.n	800e9b4 <rshift+0x96>
 800e94a:	1a9b      	subs	r3, r3, r2
 800e94c:	009b      	lsls	r3, r3, #2
 800e94e:	1eea      	subs	r2, r5, #3
 800e950:	4296      	cmp	r6, r2
 800e952:	bf38      	it	cc
 800e954:	2300      	movcc	r3, #0
 800e956:	4423      	add	r3, r4
 800e958:	e015      	b.n	800e986 <rshift+0x68>
 800e95a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e95e:	f1c1 0820 	rsb	r8, r1, #32
 800e962:	40cf      	lsrs	r7, r1
 800e964:	f105 0e04 	add.w	lr, r5, #4
 800e968:	46a1      	mov	r9, r4
 800e96a:	4576      	cmp	r6, lr
 800e96c:	46f4      	mov	ip, lr
 800e96e:	d815      	bhi.n	800e99c <rshift+0x7e>
 800e970:	1a9b      	subs	r3, r3, r2
 800e972:	009a      	lsls	r2, r3, #2
 800e974:	3a04      	subs	r2, #4
 800e976:	3501      	adds	r5, #1
 800e978:	42ae      	cmp	r6, r5
 800e97a:	bf38      	it	cc
 800e97c:	2200      	movcc	r2, #0
 800e97e:	18a3      	adds	r3, r4, r2
 800e980:	50a7      	str	r7, [r4, r2]
 800e982:	b107      	cbz	r7, 800e986 <rshift+0x68>
 800e984:	3304      	adds	r3, #4
 800e986:	1b1a      	subs	r2, r3, r4
 800e988:	42a3      	cmp	r3, r4
 800e98a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e98e:	bf08      	it	eq
 800e990:	2300      	moveq	r3, #0
 800e992:	6102      	str	r2, [r0, #16]
 800e994:	bf08      	it	eq
 800e996:	6143      	streq	r3, [r0, #20]
 800e998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e99c:	f8dc c000 	ldr.w	ip, [ip]
 800e9a0:	fa0c fc08 	lsl.w	ip, ip, r8
 800e9a4:	ea4c 0707 	orr.w	r7, ip, r7
 800e9a8:	f849 7b04 	str.w	r7, [r9], #4
 800e9ac:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e9b0:	40cf      	lsrs	r7, r1
 800e9b2:	e7da      	b.n	800e96a <rshift+0x4c>
 800e9b4:	f851 cb04 	ldr.w	ip, [r1], #4
 800e9b8:	f847 cf04 	str.w	ip, [r7, #4]!
 800e9bc:	e7c3      	b.n	800e946 <rshift+0x28>
 800e9be:	4623      	mov	r3, r4
 800e9c0:	e7e1      	b.n	800e986 <rshift+0x68>

0800e9c2 <__hexdig_fun>:
 800e9c2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e9c6:	2b09      	cmp	r3, #9
 800e9c8:	d802      	bhi.n	800e9d0 <__hexdig_fun+0xe>
 800e9ca:	3820      	subs	r0, #32
 800e9cc:	b2c0      	uxtb	r0, r0
 800e9ce:	4770      	bx	lr
 800e9d0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e9d4:	2b05      	cmp	r3, #5
 800e9d6:	d801      	bhi.n	800e9dc <__hexdig_fun+0x1a>
 800e9d8:	3847      	subs	r0, #71	; 0x47
 800e9da:	e7f7      	b.n	800e9cc <__hexdig_fun+0xa>
 800e9dc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e9e0:	2b05      	cmp	r3, #5
 800e9e2:	d801      	bhi.n	800e9e8 <__hexdig_fun+0x26>
 800e9e4:	3827      	subs	r0, #39	; 0x27
 800e9e6:	e7f1      	b.n	800e9cc <__hexdig_fun+0xa>
 800e9e8:	2000      	movs	r0, #0
 800e9ea:	4770      	bx	lr

0800e9ec <__gethex>:
 800e9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9f0:	ed2d 8b02 	vpush	{d8}
 800e9f4:	b089      	sub	sp, #36	; 0x24
 800e9f6:	ee08 0a10 	vmov	s16, r0
 800e9fa:	9304      	str	r3, [sp, #16]
 800e9fc:	4bbc      	ldr	r3, [pc, #752]	; (800ecf0 <__gethex+0x304>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	9301      	str	r3, [sp, #4]
 800ea02:	4618      	mov	r0, r3
 800ea04:	468b      	mov	fp, r1
 800ea06:	4690      	mov	r8, r2
 800ea08:	f7f1 fc02 	bl	8000210 <strlen>
 800ea0c:	9b01      	ldr	r3, [sp, #4]
 800ea0e:	f8db 2000 	ldr.w	r2, [fp]
 800ea12:	4403      	add	r3, r0
 800ea14:	4682      	mov	sl, r0
 800ea16:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ea1a:	9305      	str	r3, [sp, #20]
 800ea1c:	1c93      	adds	r3, r2, #2
 800ea1e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ea22:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ea26:	32fe      	adds	r2, #254	; 0xfe
 800ea28:	18d1      	adds	r1, r2, r3
 800ea2a:	461f      	mov	r7, r3
 800ea2c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ea30:	9100      	str	r1, [sp, #0]
 800ea32:	2830      	cmp	r0, #48	; 0x30
 800ea34:	d0f8      	beq.n	800ea28 <__gethex+0x3c>
 800ea36:	f7ff ffc4 	bl	800e9c2 <__hexdig_fun>
 800ea3a:	4604      	mov	r4, r0
 800ea3c:	2800      	cmp	r0, #0
 800ea3e:	d13a      	bne.n	800eab6 <__gethex+0xca>
 800ea40:	9901      	ldr	r1, [sp, #4]
 800ea42:	4652      	mov	r2, sl
 800ea44:	4638      	mov	r0, r7
 800ea46:	f001 fa8a 	bl	800ff5e <strncmp>
 800ea4a:	4605      	mov	r5, r0
 800ea4c:	2800      	cmp	r0, #0
 800ea4e:	d168      	bne.n	800eb22 <__gethex+0x136>
 800ea50:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ea54:	eb07 060a 	add.w	r6, r7, sl
 800ea58:	f7ff ffb3 	bl	800e9c2 <__hexdig_fun>
 800ea5c:	2800      	cmp	r0, #0
 800ea5e:	d062      	beq.n	800eb26 <__gethex+0x13a>
 800ea60:	4633      	mov	r3, r6
 800ea62:	7818      	ldrb	r0, [r3, #0]
 800ea64:	2830      	cmp	r0, #48	; 0x30
 800ea66:	461f      	mov	r7, r3
 800ea68:	f103 0301 	add.w	r3, r3, #1
 800ea6c:	d0f9      	beq.n	800ea62 <__gethex+0x76>
 800ea6e:	f7ff ffa8 	bl	800e9c2 <__hexdig_fun>
 800ea72:	2301      	movs	r3, #1
 800ea74:	fab0 f480 	clz	r4, r0
 800ea78:	0964      	lsrs	r4, r4, #5
 800ea7a:	4635      	mov	r5, r6
 800ea7c:	9300      	str	r3, [sp, #0]
 800ea7e:	463a      	mov	r2, r7
 800ea80:	4616      	mov	r6, r2
 800ea82:	3201      	adds	r2, #1
 800ea84:	7830      	ldrb	r0, [r6, #0]
 800ea86:	f7ff ff9c 	bl	800e9c2 <__hexdig_fun>
 800ea8a:	2800      	cmp	r0, #0
 800ea8c:	d1f8      	bne.n	800ea80 <__gethex+0x94>
 800ea8e:	9901      	ldr	r1, [sp, #4]
 800ea90:	4652      	mov	r2, sl
 800ea92:	4630      	mov	r0, r6
 800ea94:	f001 fa63 	bl	800ff5e <strncmp>
 800ea98:	b980      	cbnz	r0, 800eabc <__gethex+0xd0>
 800ea9a:	b94d      	cbnz	r5, 800eab0 <__gethex+0xc4>
 800ea9c:	eb06 050a 	add.w	r5, r6, sl
 800eaa0:	462a      	mov	r2, r5
 800eaa2:	4616      	mov	r6, r2
 800eaa4:	3201      	adds	r2, #1
 800eaa6:	7830      	ldrb	r0, [r6, #0]
 800eaa8:	f7ff ff8b 	bl	800e9c2 <__hexdig_fun>
 800eaac:	2800      	cmp	r0, #0
 800eaae:	d1f8      	bne.n	800eaa2 <__gethex+0xb6>
 800eab0:	1bad      	subs	r5, r5, r6
 800eab2:	00ad      	lsls	r5, r5, #2
 800eab4:	e004      	b.n	800eac0 <__gethex+0xd4>
 800eab6:	2400      	movs	r4, #0
 800eab8:	4625      	mov	r5, r4
 800eaba:	e7e0      	b.n	800ea7e <__gethex+0x92>
 800eabc:	2d00      	cmp	r5, #0
 800eabe:	d1f7      	bne.n	800eab0 <__gethex+0xc4>
 800eac0:	7833      	ldrb	r3, [r6, #0]
 800eac2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800eac6:	2b50      	cmp	r3, #80	; 0x50
 800eac8:	d13b      	bne.n	800eb42 <__gethex+0x156>
 800eaca:	7873      	ldrb	r3, [r6, #1]
 800eacc:	2b2b      	cmp	r3, #43	; 0x2b
 800eace:	d02c      	beq.n	800eb2a <__gethex+0x13e>
 800ead0:	2b2d      	cmp	r3, #45	; 0x2d
 800ead2:	d02e      	beq.n	800eb32 <__gethex+0x146>
 800ead4:	1c71      	adds	r1, r6, #1
 800ead6:	f04f 0900 	mov.w	r9, #0
 800eada:	7808      	ldrb	r0, [r1, #0]
 800eadc:	f7ff ff71 	bl	800e9c2 <__hexdig_fun>
 800eae0:	1e43      	subs	r3, r0, #1
 800eae2:	b2db      	uxtb	r3, r3
 800eae4:	2b18      	cmp	r3, #24
 800eae6:	d82c      	bhi.n	800eb42 <__gethex+0x156>
 800eae8:	f1a0 0210 	sub.w	r2, r0, #16
 800eaec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eaf0:	f7ff ff67 	bl	800e9c2 <__hexdig_fun>
 800eaf4:	1e43      	subs	r3, r0, #1
 800eaf6:	b2db      	uxtb	r3, r3
 800eaf8:	2b18      	cmp	r3, #24
 800eafa:	d91d      	bls.n	800eb38 <__gethex+0x14c>
 800eafc:	f1b9 0f00 	cmp.w	r9, #0
 800eb00:	d000      	beq.n	800eb04 <__gethex+0x118>
 800eb02:	4252      	negs	r2, r2
 800eb04:	4415      	add	r5, r2
 800eb06:	f8cb 1000 	str.w	r1, [fp]
 800eb0a:	b1e4      	cbz	r4, 800eb46 <__gethex+0x15a>
 800eb0c:	9b00      	ldr	r3, [sp, #0]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	bf14      	ite	ne
 800eb12:	2700      	movne	r7, #0
 800eb14:	2706      	moveq	r7, #6
 800eb16:	4638      	mov	r0, r7
 800eb18:	b009      	add	sp, #36	; 0x24
 800eb1a:	ecbd 8b02 	vpop	{d8}
 800eb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb22:	463e      	mov	r6, r7
 800eb24:	4625      	mov	r5, r4
 800eb26:	2401      	movs	r4, #1
 800eb28:	e7ca      	b.n	800eac0 <__gethex+0xd4>
 800eb2a:	f04f 0900 	mov.w	r9, #0
 800eb2e:	1cb1      	adds	r1, r6, #2
 800eb30:	e7d3      	b.n	800eada <__gethex+0xee>
 800eb32:	f04f 0901 	mov.w	r9, #1
 800eb36:	e7fa      	b.n	800eb2e <__gethex+0x142>
 800eb38:	230a      	movs	r3, #10
 800eb3a:	fb03 0202 	mla	r2, r3, r2, r0
 800eb3e:	3a10      	subs	r2, #16
 800eb40:	e7d4      	b.n	800eaec <__gethex+0x100>
 800eb42:	4631      	mov	r1, r6
 800eb44:	e7df      	b.n	800eb06 <__gethex+0x11a>
 800eb46:	1bf3      	subs	r3, r6, r7
 800eb48:	3b01      	subs	r3, #1
 800eb4a:	4621      	mov	r1, r4
 800eb4c:	2b07      	cmp	r3, #7
 800eb4e:	dc0b      	bgt.n	800eb68 <__gethex+0x17c>
 800eb50:	ee18 0a10 	vmov	r0, s16
 800eb54:	f000 fad8 	bl	800f108 <_Balloc>
 800eb58:	4604      	mov	r4, r0
 800eb5a:	b940      	cbnz	r0, 800eb6e <__gethex+0x182>
 800eb5c:	4b65      	ldr	r3, [pc, #404]	; (800ecf4 <__gethex+0x308>)
 800eb5e:	4602      	mov	r2, r0
 800eb60:	21de      	movs	r1, #222	; 0xde
 800eb62:	4865      	ldr	r0, [pc, #404]	; (800ecf8 <__gethex+0x30c>)
 800eb64:	f001 fa2c 	bl	800ffc0 <__assert_func>
 800eb68:	3101      	adds	r1, #1
 800eb6a:	105b      	asrs	r3, r3, #1
 800eb6c:	e7ee      	b.n	800eb4c <__gethex+0x160>
 800eb6e:	f100 0914 	add.w	r9, r0, #20
 800eb72:	f04f 0b00 	mov.w	fp, #0
 800eb76:	f1ca 0301 	rsb	r3, sl, #1
 800eb7a:	f8cd 9008 	str.w	r9, [sp, #8]
 800eb7e:	f8cd b000 	str.w	fp, [sp]
 800eb82:	9306      	str	r3, [sp, #24]
 800eb84:	42b7      	cmp	r7, r6
 800eb86:	d340      	bcc.n	800ec0a <__gethex+0x21e>
 800eb88:	9802      	ldr	r0, [sp, #8]
 800eb8a:	9b00      	ldr	r3, [sp, #0]
 800eb8c:	f840 3b04 	str.w	r3, [r0], #4
 800eb90:	eba0 0009 	sub.w	r0, r0, r9
 800eb94:	1080      	asrs	r0, r0, #2
 800eb96:	0146      	lsls	r6, r0, #5
 800eb98:	6120      	str	r0, [r4, #16]
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f000 fbaa 	bl	800f2f4 <__hi0bits>
 800eba0:	1a30      	subs	r0, r6, r0
 800eba2:	f8d8 6000 	ldr.w	r6, [r8]
 800eba6:	42b0      	cmp	r0, r6
 800eba8:	dd63      	ble.n	800ec72 <__gethex+0x286>
 800ebaa:	1b87      	subs	r7, r0, r6
 800ebac:	4639      	mov	r1, r7
 800ebae:	4620      	mov	r0, r4
 800ebb0:	f000 ff44 	bl	800fa3c <__any_on>
 800ebb4:	4682      	mov	sl, r0
 800ebb6:	b1a8      	cbz	r0, 800ebe4 <__gethex+0x1f8>
 800ebb8:	1e7b      	subs	r3, r7, #1
 800ebba:	1159      	asrs	r1, r3, #5
 800ebbc:	f003 021f 	and.w	r2, r3, #31
 800ebc0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ebc4:	f04f 0a01 	mov.w	sl, #1
 800ebc8:	fa0a f202 	lsl.w	r2, sl, r2
 800ebcc:	420a      	tst	r2, r1
 800ebce:	d009      	beq.n	800ebe4 <__gethex+0x1f8>
 800ebd0:	4553      	cmp	r3, sl
 800ebd2:	dd05      	ble.n	800ebe0 <__gethex+0x1f4>
 800ebd4:	1eb9      	subs	r1, r7, #2
 800ebd6:	4620      	mov	r0, r4
 800ebd8:	f000 ff30 	bl	800fa3c <__any_on>
 800ebdc:	2800      	cmp	r0, #0
 800ebde:	d145      	bne.n	800ec6c <__gethex+0x280>
 800ebe0:	f04f 0a02 	mov.w	sl, #2
 800ebe4:	4639      	mov	r1, r7
 800ebe6:	4620      	mov	r0, r4
 800ebe8:	f7ff fe99 	bl	800e91e <rshift>
 800ebec:	443d      	add	r5, r7
 800ebee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ebf2:	42ab      	cmp	r3, r5
 800ebf4:	da4c      	bge.n	800ec90 <__gethex+0x2a4>
 800ebf6:	ee18 0a10 	vmov	r0, s16
 800ebfa:	4621      	mov	r1, r4
 800ebfc:	f000 fac4 	bl	800f188 <_Bfree>
 800ec00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ec02:	2300      	movs	r3, #0
 800ec04:	6013      	str	r3, [r2, #0]
 800ec06:	27a3      	movs	r7, #163	; 0xa3
 800ec08:	e785      	b.n	800eb16 <__gethex+0x12a>
 800ec0a:	1e73      	subs	r3, r6, #1
 800ec0c:	9a05      	ldr	r2, [sp, #20]
 800ec0e:	9303      	str	r3, [sp, #12]
 800ec10:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ec14:	4293      	cmp	r3, r2
 800ec16:	d019      	beq.n	800ec4c <__gethex+0x260>
 800ec18:	f1bb 0f20 	cmp.w	fp, #32
 800ec1c:	d107      	bne.n	800ec2e <__gethex+0x242>
 800ec1e:	9b02      	ldr	r3, [sp, #8]
 800ec20:	9a00      	ldr	r2, [sp, #0]
 800ec22:	f843 2b04 	str.w	r2, [r3], #4
 800ec26:	9302      	str	r3, [sp, #8]
 800ec28:	2300      	movs	r3, #0
 800ec2a:	9300      	str	r3, [sp, #0]
 800ec2c:	469b      	mov	fp, r3
 800ec2e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ec32:	f7ff fec6 	bl	800e9c2 <__hexdig_fun>
 800ec36:	9b00      	ldr	r3, [sp, #0]
 800ec38:	f000 000f 	and.w	r0, r0, #15
 800ec3c:	fa00 f00b 	lsl.w	r0, r0, fp
 800ec40:	4303      	orrs	r3, r0
 800ec42:	9300      	str	r3, [sp, #0]
 800ec44:	f10b 0b04 	add.w	fp, fp, #4
 800ec48:	9b03      	ldr	r3, [sp, #12]
 800ec4a:	e00d      	b.n	800ec68 <__gethex+0x27c>
 800ec4c:	9b03      	ldr	r3, [sp, #12]
 800ec4e:	9a06      	ldr	r2, [sp, #24]
 800ec50:	4413      	add	r3, r2
 800ec52:	42bb      	cmp	r3, r7
 800ec54:	d3e0      	bcc.n	800ec18 <__gethex+0x22c>
 800ec56:	4618      	mov	r0, r3
 800ec58:	9901      	ldr	r1, [sp, #4]
 800ec5a:	9307      	str	r3, [sp, #28]
 800ec5c:	4652      	mov	r2, sl
 800ec5e:	f001 f97e 	bl	800ff5e <strncmp>
 800ec62:	9b07      	ldr	r3, [sp, #28]
 800ec64:	2800      	cmp	r0, #0
 800ec66:	d1d7      	bne.n	800ec18 <__gethex+0x22c>
 800ec68:	461e      	mov	r6, r3
 800ec6a:	e78b      	b.n	800eb84 <__gethex+0x198>
 800ec6c:	f04f 0a03 	mov.w	sl, #3
 800ec70:	e7b8      	b.n	800ebe4 <__gethex+0x1f8>
 800ec72:	da0a      	bge.n	800ec8a <__gethex+0x29e>
 800ec74:	1a37      	subs	r7, r6, r0
 800ec76:	4621      	mov	r1, r4
 800ec78:	ee18 0a10 	vmov	r0, s16
 800ec7c:	463a      	mov	r2, r7
 800ec7e:	f000 fc9f 	bl	800f5c0 <__lshift>
 800ec82:	1bed      	subs	r5, r5, r7
 800ec84:	4604      	mov	r4, r0
 800ec86:	f100 0914 	add.w	r9, r0, #20
 800ec8a:	f04f 0a00 	mov.w	sl, #0
 800ec8e:	e7ae      	b.n	800ebee <__gethex+0x202>
 800ec90:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ec94:	42a8      	cmp	r0, r5
 800ec96:	dd72      	ble.n	800ed7e <__gethex+0x392>
 800ec98:	1b45      	subs	r5, r0, r5
 800ec9a:	42ae      	cmp	r6, r5
 800ec9c:	dc36      	bgt.n	800ed0c <__gethex+0x320>
 800ec9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eca2:	2b02      	cmp	r3, #2
 800eca4:	d02a      	beq.n	800ecfc <__gethex+0x310>
 800eca6:	2b03      	cmp	r3, #3
 800eca8:	d02c      	beq.n	800ed04 <__gethex+0x318>
 800ecaa:	2b01      	cmp	r3, #1
 800ecac:	d115      	bne.n	800ecda <__gethex+0x2ee>
 800ecae:	42ae      	cmp	r6, r5
 800ecb0:	d113      	bne.n	800ecda <__gethex+0x2ee>
 800ecb2:	2e01      	cmp	r6, #1
 800ecb4:	d10b      	bne.n	800ecce <__gethex+0x2e2>
 800ecb6:	9a04      	ldr	r2, [sp, #16]
 800ecb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ecbc:	6013      	str	r3, [r2, #0]
 800ecbe:	2301      	movs	r3, #1
 800ecc0:	6123      	str	r3, [r4, #16]
 800ecc2:	f8c9 3000 	str.w	r3, [r9]
 800ecc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ecc8:	2762      	movs	r7, #98	; 0x62
 800ecca:	601c      	str	r4, [r3, #0]
 800eccc:	e723      	b.n	800eb16 <__gethex+0x12a>
 800ecce:	1e71      	subs	r1, r6, #1
 800ecd0:	4620      	mov	r0, r4
 800ecd2:	f000 feb3 	bl	800fa3c <__any_on>
 800ecd6:	2800      	cmp	r0, #0
 800ecd8:	d1ed      	bne.n	800ecb6 <__gethex+0x2ca>
 800ecda:	ee18 0a10 	vmov	r0, s16
 800ecde:	4621      	mov	r1, r4
 800ece0:	f000 fa52 	bl	800f188 <_Bfree>
 800ece4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ece6:	2300      	movs	r3, #0
 800ece8:	6013      	str	r3, [r2, #0]
 800ecea:	2750      	movs	r7, #80	; 0x50
 800ecec:	e713      	b.n	800eb16 <__gethex+0x12a>
 800ecee:	bf00      	nop
 800ecf0:	08011814 	.word	0x08011814
 800ecf4:	08011734 	.word	0x08011734
 800ecf8:	080117a8 	.word	0x080117a8
 800ecfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d1eb      	bne.n	800ecda <__gethex+0x2ee>
 800ed02:	e7d8      	b.n	800ecb6 <__gethex+0x2ca>
 800ed04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d1d5      	bne.n	800ecb6 <__gethex+0x2ca>
 800ed0a:	e7e6      	b.n	800ecda <__gethex+0x2ee>
 800ed0c:	1e6f      	subs	r7, r5, #1
 800ed0e:	f1ba 0f00 	cmp.w	sl, #0
 800ed12:	d131      	bne.n	800ed78 <__gethex+0x38c>
 800ed14:	b127      	cbz	r7, 800ed20 <__gethex+0x334>
 800ed16:	4639      	mov	r1, r7
 800ed18:	4620      	mov	r0, r4
 800ed1a:	f000 fe8f 	bl	800fa3c <__any_on>
 800ed1e:	4682      	mov	sl, r0
 800ed20:	117b      	asrs	r3, r7, #5
 800ed22:	2101      	movs	r1, #1
 800ed24:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ed28:	f007 071f 	and.w	r7, r7, #31
 800ed2c:	fa01 f707 	lsl.w	r7, r1, r7
 800ed30:	421f      	tst	r7, r3
 800ed32:	4629      	mov	r1, r5
 800ed34:	4620      	mov	r0, r4
 800ed36:	bf18      	it	ne
 800ed38:	f04a 0a02 	orrne.w	sl, sl, #2
 800ed3c:	1b76      	subs	r6, r6, r5
 800ed3e:	f7ff fdee 	bl	800e91e <rshift>
 800ed42:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ed46:	2702      	movs	r7, #2
 800ed48:	f1ba 0f00 	cmp.w	sl, #0
 800ed4c:	d048      	beq.n	800ede0 <__gethex+0x3f4>
 800ed4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ed52:	2b02      	cmp	r3, #2
 800ed54:	d015      	beq.n	800ed82 <__gethex+0x396>
 800ed56:	2b03      	cmp	r3, #3
 800ed58:	d017      	beq.n	800ed8a <__gethex+0x39e>
 800ed5a:	2b01      	cmp	r3, #1
 800ed5c:	d109      	bne.n	800ed72 <__gethex+0x386>
 800ed5e:	f01a 0f02 	tst.w	sl, #2
 800ed62:	d006      	beq.n	800ed72 <__gethex+0x386>
 800ed64:	f8d9 0000 	ldr.w	r0, [r9]
 800ed68:	ea4a 0a00 	orr.w	sl, sl, r0
 800ed6c:	f01a 0f01 	tst.w	sl, #1
 800ed70:	d10e      	bne.n	800ed90 <__gethex+0x3a4>
 800ed72:	f047 0710 	orr.w	r7, r7, #16
 800ed76:	e033      	b.n	800ede0 <__gethex+0x3f4>
 800ed78:	f04f 0a01 	mov.w	sl, #1
 800ed7c:	e7d0      	b.n	800ed20 <__gethex+0x334>
 800ed7e:	2701      	movs	r7, #1
 800ed80:	e7e2      	b.n	800ed48 <__gethex+0x35c>
 800ed82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ed84:	f1c3 0301 	rsb	r3, r3, #1
 800ed88:	9315      	str	r3, [sp, #84]	; 0x54
 800ed8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d0f0      	beq.n	800ed72 <__gethex+0x386>
 800ed90:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ed94:	f104 0314 	add.w	r3, r4, #20
 800ed98:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ed9c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800eda0:	f04f 0c00 	mov.w	ip, #0
 800eda4:	4618      	mov	r0, r3
 800eda6:	f853 2b04 	ldr.w	r2, [r3], #4
 800edaa:	f1b2 3fff 	cmp.w	r2, #4294967295
 800edae:	d01c      	beq.n	800edea <__gethex+0x3fe>
 800edb0:	3201      	adds	r2, #1
 800edb2:	6002      	str	r2, [r0, #0]
 800edb4:	2f02      	cmp	r7, #2
 800edb6:	f104 0314 	add.w	r3, r4, #20
 800edba:	d13f      	bne.n	800ee3c <__gethex+0x450>
 800edbc:	f8d8 2000 	ldr.w	r2, [r8]
 800edc0:	3a01      	subs	r2, #1
 800edc2:	42b2      	cmp	r2, r6
 800edc4:	d10a      	bne.n	800eddc <__gethex+0x3f0>
 800edc6:	1171      	asrs	r1, r6, #5
 800edc8:	2201      	movs	r2, #1
 800edca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800edce:	f006 061f 	and.w	r6, r6, #31
 800edd2:	fa02 f606 	lsl.w	r6, r2, r6
 800edd6:	421e      	tst	r6, r3
 800edd8:	bf18      	it	ne
 800edda:	4617      	movne	r7, r2
 800eddc:	f047 0720 	orr.w	r7, r7, #32
 800ede0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ede2:	601c      	str	r4, [r3, #0]
 800ede4:	9b04      	ldr	r3, [sp, #16]
 800ede6:	601d      	str	r5, [r3, #0]
 800ede8:	e695      	b.n	800eb16 <__gethex+0x12a>
 800edea:	4299      	cmp	r1, r3
 800edec:	f843 cc04 	str.w	ip, [r3, #-4]
 800edf0:	d8d8      	bhi.n	800eda4 <__gethex+0x3b8>
 800edf2:	68a3      	ldr	r3, [r4, #8]
 800edf4:	459b      	cmp	fp, r3
 800edf6:	db19      	blt.n	800ee2c <__gethex+0x440>
 800edf8:	6861      	ldr	r1, [r4, #4]
 800edfa:	ee18 0a10 	vmov	r0, s16
 800edfe:	3101      	adds	r1, #1
 800ee00:	f000 f982 	bl	800f108 <_Balloc>
 800ee04:	4681      	mov	r9, r0
 800ee06:	b918      	cbnz	r0, 800ee10 <__gethex+0x424>
 800ee08:	4b1a      	ldr	r3, [pc, #104]	; (800ee74 <__gethex+0x488>)
 800ee0a:	4602      	mov	r2, r0
 800ee0c:	2184      	movs	r1, #132	; 0x84
 800ee0e:	e6a8      	b.n	800eb62 <__gethex+0x176>
 800ee10:	6922      	ldr	r2, [r4, #16]
 800ee12:	3202      	adds	r2, #2
 800ee14:	f104 010c 	add.w	r1, r4, #12
 800ee18:	0092      	lsls	r2, r2, #2
 800ee1a:	300c      	adds	r0, #12
 800ee1c:	f7fd f8c0 	bl	800bfa0 <memcpy>
 800ee20:	4621      	mov	r1, r4
 800ee22:	ee18 0a10 	vmov	r0, s16
 800ee26:	f000 f9af 	bl	800f188 <_Bfree>
 800ee2a:	464c      	mov	r4, r9
 800ee2c:	6923      	ldr	r3, [r4, #16]
 800ee2e:	1c5a      	adds	r2, r3, #1
 800ee30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ee34:	6122      	str	r2, [r4, #16]
 800ee36:	2201      	movs	r2, #1
 800ee38:	615a      	str	r2, [r3, #20]
 800ee3a:	e7bb      	b.n	800edb4 <__gethex+0x3c8>
 800ee3c:	6922      	ldr	r2, [r4, #16]
 800ee3e:	455a      	cmp	r2, fp
 800ee40:	dd0b      	ble.n	800ee5a <__gethex+0x46e>
 800ee42:	2101      	movs	r1, #1
 800ee44:	4620      	mov	r0, r4
 800ee46:	f7ff fd6a 	bl	800e91e <rshift>
 800ee4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ee4e:	3501      	adds	r5, #1
 800ee50:	42ab      	cmp	r3, r5
 800ee52:	f6ff aed0 	blt.w	800ebf6 <__gethex+0x20a>
 800ee56:	2701      	movs	r7, #1
 800ee58:	e7c0      	b.n	800eddc <__gethex+0x3f0>
 800ee5a:	f016 061f 	ands.w	r6, r6, #31
 800ee5e:	d0fa      	beq.n	800ee56 <__gethex+0x46a>
 800ee60:	449a      	add	sl, r3
 800ee62:	f1c6 0620 	rsb	r6, r6, #32
 800ee66:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ee6a:	f000 fa43 	bl	800f2f4 <__hi0bits>
 800ee6e:	42b0      	cmp	r0, r6
 800ee70:	dbe7      	blt.n	800ee42 <__gethex+0x456>
 800ee72:	e7f0      	b.n	800ee56 <__gethex+0x46a>
 800ee74:	08011734 	.word	0x08011734

0800ee78 <L_shift>:
 800ee78:	f1c2 0208 	rsb	r2, r2, #8
 800ee7c:	0092      	lsls	r2, r2, #2
 800ee7e:	b570      	push	{r4, r5, r6, lr}
 800ee80:	f1c2 0620 	rsb	r6, r2, #32
 800ee84:	6843      	ldr	r3, [r0, #4]
 800ee86:	6804      	ldr	r4, [r0, #0]
 800ee88:	fa03 f506 	lsl.w	r5, r3, r6
 800ee8c:	432c      	orrs	r4, r5
 800ee8e:	40d3      	lsrs	r3, r2
 800ee90:	6004      	str	r4, [r0, #0]
 800ee92:	f840 3f04 	str.w	r3, [r0, #4]!
 800ee96:	4288      	cmp	r0, r1
 800ee98:	d3f4      	bcc.n	800ee84 <L_shift+0xc>
 800ee9a:	bd70      	pop	{r4, r5, r6, pc}

0800ee9c <__match>:
 800ee9c:	b530      	push	{r4, r5, lr}
 800ee9e:	6803      	ldr	r3, [r0, #0]
 800eea0:	3301      	adds	r3, #1
 800eea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eea6:	b914      	cbnz	r4, 800eeae <__match+0x12>
 800eea8:	6003      	str	r3, [r0, #0]
 800eeaa:	2001      	movs	r0, #1
 800eeac:	bd30      	pop	{r4, r5, pc}
 800eeae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eeb2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800eeb6:	2d19      	cmp	r5, #25
 800eeb8:	bf98      	it	ls
 800eeba:	3220      	addls	r2, #32
 800eebc:	42a2      	cmp	r2, r4
 800eebe:	d0f0      	beq.n	800eea2 <__match+0x6>
 800eec0:	2000      	movs	r0, #0
 800eec2:	e7f3      	b.n	800eeac <__match+0x10>

0800eec4 <__hexnan>:
 800eec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eec8:	680b      	ldr	r3, [r1, #0]
 800eeca:	6801      	ldr	r1, [r0, #0]
 800eecc:	115e      	asrs	r6, r3, #5
 800eece:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800eed2:	f013 031f 	ands.w	r3, r3, #31
 800eed6:	b087      	sub	sp, #28
 800eed8:	bf18      	it	ne
 800eeda:	3604      	addne	r6, #4
 800eedc:	2500      	movs	r5, #0
 800eede:	1f37      	subs	r7, r6, #4
 800eee0:	4682      	mov	sl, r0
 800eee2:	4690      	mov	r8, r2
 800eee4:	9301      	str	r3, [sp, #4]
 800eee6:	f846 5c04 	str.w	r5, [r6, #-4]
 800eeea:	46b9      	mov	r9, r7
 800eeec:	463c      	mov	r4, r7
 800eeee:	9502      	str	r5, [sp, #8]
 800eef0:	46ab      	mov	fp, r5
 800eef2:	784a      	ldrb	r2, [r1, #1]
 800eef4:	1c4b      	adds	r3, r1, #1
 800eef6:	9303      	str	r3, [sp, #12]
 800eef8:	b342      	cbz	r2, 800ef4c <__hexnan+0x88>
 800eefa:	4610      	mov	r0, r2
 800eefc:	9105      	str	r1, [sp, #20]
 800eefe:	9204      	str	r2, [sp, #16]
 800ef00:	f7ff fd5f 	bl	800e9c2 <__hexdig_fun>
 800ef04:	2800      	cmp	r0, #0
 800ef06:	d14f      	bne.n	800efa8 <__hexnan+0xe4>
 800ef08:	9a04      	ldr	r2, [sp, #16]
 800ef0a:	9905      	ldr	r1, [sp, #20]
 800ef0c:	2a20      	cmp	r2, #32
 800ef0e:	d818      	bhi.n	800ef42 <__hexnan+0x7e>
 800ef10:	9b02      	ldr	r3, [sp, #8]
 800ef12:	459b      	cmp	fp, r3
 800ef14:	dd13      	ble.n	800ef3e <__hexnan+0x7a>
 800ef16:	454c      	cmp	r4, r9
 800ef18:	d206      	bcs.n	800ef28 <__hexnan+0x64>
 800ef1a:	2d07      	cmp	r5, #7
 800ef1c:	dc04      	bgt.n	800ef28 <__hexnan+0x64>
 800ef1e:	462a      	mov	r2, r5
 800ef20:	4649      	mov	r1, r9
 800ef22:	4620      	mov	r0, r4
 800ef24:	f7ff ffa8 	bl	800ee78 <L_shift>
 800ef28:	4544      	cmp	r4, r8
 800ef2a:	d950      	bls.n	800efce <__hexnan+0x10a>
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	f1a4 0904 	sub.w	r9, r4, #4
 800ef32:	f844 3c04 	str.w	r3, [r4, #-4]
 800ef36:	f8cd b008 	str.w	fp, [sp, #8]
 800ef3a:	464c      	mov	r4, r9
 800ef3c:	461d      	mov	r5, r3
 800ef3e:	9903      	ldr	r1, [sp, #12]
 800ef40:	e7d7      	b.n	800eef2 <__hexnan+0x2e>
 800ef42:	2a29      	cmp	r2, #41	; 0x29
 800ef44:	d156      	bne.n	800eff4 <__hexnan+0x130>
 800ef46:	3102      	adds	r1, #2
 800ef48:	f8ca 1000 	str.w	r1, [sl]
 800ef4c:	f1bb 0f00 	cmp.w	fp, #0
 800ef50:	d050      	beq.n	800eff4 <__hexnan+0x130>
 800ef52:	454c      	cmp	r4, r9
 800ef54:	d206      	bcs.n	800ef64 <__hexnan+0xa0>
 800ef56:	2d07      	cmp	r5, #7
 800ef58:	dc04      	bgt.n	800ef64 <__hexnan+0xa0>
 800ef5a:	462a      	mov	r2, r5
 800ef5c:	4649      	mov	r1, r9
 800ef5e:	4620      	mov	r0, r4
 800ef60:	f7ff ff8a 	bl	800ee78 <L_shift>
 800ef64:	4544      	cmp	r4, r8
 800ef66:	d934      	bls.n	800efd2 <__hexnan+0x10e>
 800ef68:	f1a8 0204 	sub.w	r2, r8, #4
 800ef6c:	4623      	mov	r3, r4
 800ef6e:	f853 1b04 	ldr.w	r1, [r3], #4
 800ef72:	f842 1f04 	str.w	r1, [r2, #4]!
 800ef76:	429f      	cmp	r7, r3
 800ef78:	d2f9      	bcs.n	800ef6e <__hexnan+0xaa>
 800ef7a:	1b3b      	subs	r3, r7, r4
 800ef7c:	f023 0303 	bic.w	r3, r3, #3
 800ef80:	3304      	adds	r3, #4
 800ef82:	3401      	adds	r4, #1
 800ef84:	3e03      	subs	r6, #3
 800ef86:	42b4      	cmp	r4, r6
 800ef88:	bf88      	it	hi
 800ef8a:	2304      	movhi	r3, #4
 800ef8c:	4443      	add	r3, r8
 800ef8e:	2200      	movs	r2, #0
 800ef90:	f843 2b04 	str.w	r2, [r3], #4
 800ef94:	429f      	cmp	r7, r3
 800ef96:	d2fb      	bcs.n	800ef90 <__hexnan+0xcc>
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	b91b      	cbnz	r3, 800efa4 <__hexnan+0xe0>
 800ef9c:	4547      	cmp	r7, r8
 800ef9e:	d127      	bne.n	800eff0 <__hexnan+0x12c>
 800efa0:	2301      	movs	r3, #1
 800efa2:	603b      	str	r3, [r7, #0]
 800efa4:	2005      	movs	r0, #5
 800efa6:	e026      	b.n	800eff6 <__hexnan+0x132>
 800efa8:	3501      	adds	r5, #1
 800efaa:	2d08      	cmp	r5, #8
 800efac:	f10b 0b01 	add.w	fp, fp, #1
 800efb0:	dd06      	ble.n	800efc0 <__hexnan+0xfc>
 800efb2:	4544      	cmp	r4, r8
 800efb4:	d9c3      	bls.n	800ef3e <__hexnan+0x7a>
 800efb6:	2300      	movs	r3, #0
 800efb8:	f844 3c04 	str.w	r3, [r4, #-4]
 800efbc:	2501      	movs	r5, #1
 800efbe:	3c04      	subs	r4, #4
 800efc0:	6822      	ldr	r2, [r4, #0]
 800efc2:	f000 000f 	and.w	r0, r0, #15
 800efc6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800efca:	6022      	str	r2, [r4, #0]
 800efcc:	e7b7      	b.n	800ef3e <__hexnan+0x7a>
 800efce:	2508      	movs	r5, #8
 800efd0:	e7b5      	b.n	800ef3e <__hexnan+0x7a>
 800efd2:	9b01      	ldr	r3, [sp, #4]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d0df      	beq.n	800ef98 <__hexnan+0xd4>
 800efd8:	f04f 32ff 	mov.w	r2, #4294967295
 800efdc:	f1c3 0320 	rsb	r3, r3, #32
 800efe0:	fa22 f303 	lsr.w	r3, r2, r3
 800efe4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800efe8:	401a      	ands	r2, r3
 800efea:	f846 2c04 	str.w	r2, [r6, #-4]
 800efee:	e7d3      	b.n	800ef98 <__hexnan+0xd4>
 800eff0:	3f04      	subs	r7, #4
 800eff2:	e7d1      	b.n	800ef98 <__hexnan+0xd4>
 800eff4:	2004      	movs	r0, #4
 800eff6:	b007      	add	sp, #28
 800eff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800effc <_localeconv_r>:
 800effc:	4800      	ldr	r0, [pc, #0]	; (800f000 <_localeconv_r+0x4>)
 800effe:	4770      	bx	lr
 800f000:	200001a4 	.word	0x200001a4

0800f004 <__retarget_lock_init_recursive>:
 800f004:	4770      	bx	lr

0800f006 <__retarget_lock_acquire_recursive>:
 800f006:	4770      	bx	lr

0800f008 <__retarget_lock_release_recursive>:
 800f008:	4770      	bx	lr

0800f00a <__swhatbuf_r>:
 800f00a:	b570      	push	{r4, r5, r6, lr}
 800f00c:	460e      	mov	r6, r1
 800f00e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f012:	2900      	cmp	r1, #0
 800f014:	b096      	sub	sp, #88	; 0x58
 800f016:	4614      	mov	r4, r2
 800f018:	461d      	mov	r5, r3
 800f01a:	da07      	bge.n	800f02c <__swhatbuf_r+0x22>
 800f01c:	2300      	movs	r3, #0
 800f01e:	602b      	str	r3, [r5, #0]
 800f020:	89b3      	ldrh	r3, [r6, #12]
 800f022:	061a      	lsls	r2, r3, #24
 800f024:	d410      	bmi.n	800f048 <__swhatbuf_r+0x3e>
 800f026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f02a:	e00e      	b.n	800f04a <__swhatbuf_r+0x40>
 800f02c:	466a      	mov	r2, sp
 800f02e:	f001 f807 	bl	8010040 <_fstat_r>
 800f032:	2800      	cmp	r0, #0
 800f034:	dbf2      	blt.n	800f01c <__swhatbuf_r+0x12>
 800f036:	9a01      	ldr	r2, [sp, #4]
 800f038:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f03c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f040:	425a      	negs	r2, r3
 800f042:	415a      	adcs	r2, r3
 800f044:	602a      	str	r2, [r5, #0]
 800f046:	e7ee      	b.n	800f026 <__swhatbuf_r+0x1c>
 800f048:	2340      	movs	r3, #64	; 0x40
 800f04a:	2000      	movs	r0, #0
 800f04c:	6023      	str	r3, [r4, #0]
 800f04e:	b016      	add	sp, #88	; 0x58
 800f050:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f054 <__smakebuf_r>:
 800f054:	898b      	ldrh	r3, [r1, #12]
 800f056:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f058:	079d      	lsls	r5, r3, #30
 800f05a:	4606      	mov	r6, r0
 800f05c:	460c      	mov	r4, r1
 800f05e:	d507      	bpl.n	800f070 <__smakebuf_r+0x1c>
 800f060:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f064:	6023      	str	r3, [r4, #0]
 800f066:	6123      	str	r3, [r4, #16]
 800f068:	2301      	movs	r3, #1
 800f06a:	6163      	str	r3, [r4, #20]
 800f06c:	b002      	add	sp, #8
 800f06e:	bd70      	pop	{r4, r5, r6, pc}
 800f070:	ab01      	add	r3, sp, #4
 800f072:	466a      	mov	r2, sp
 800f074:	f7ff ffc9 	bl	800f00a <__swhatbuf_r>
 800f078:	9900      	ldr	r1, [sp, #0]
 800f07a:	4605      	mov	r5, r0
 800f07c:	4630      	mov	r0, r6
 800f07e:	f000 fd5d 	bl	800fb3c <_malloc_r>
 800f082:	b948      	cbnz	r0, 800f098 <__smakebuf_r+0x44>
 800f084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f088:	059a      	lsls	r2, r3, #22
 800f08a:	d4ef      	bmi.n	800f06c <__smakebuf_r+0x18>
 800f08c:	f023 0303 	bic.w	r3, r3, #3
 800f090:	f043 0302 	orr.w	r3, r3, #2
 800f094:	81a3      	strh	r3, [r4, #12]
 800f096:	e7e3      	b.n	800f060 <__smakebuf_r+0xc>
 800f098:	4b0d      	ldr	r3, [pc, #52]	; (800f0d0 <__smakebuf_r+0x7c>)
 800f09a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f09c:	89a3      	ldrh	r3, [r4, #12]
 800f09e:	6020      	str	r0, [r4, #0]
 800f0a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0a4:	81a3      	strh	r3, [r4, #12]
 800f0a6:	9b00      	ldr	r3, [sp, #0]
 800f0a8:	6163      	str	r3, [r4, #20]
 800f0aa:	9b01      	ldr	r3, [sp, #4]
 800f0ac:	6120      	str	r0, [r4, #16]
 800f0ae:	b15b      	cbz	r3, 800f0c8 <__smakebuf_r+0x74>
 800f0b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0b4:	4630      	mov	r0, r6
 800f0b6:	f000 ffd5 	bl	8010064 <_isatty_r>
 800f0ba:	b128      	cbz	r0, 800f0c8 <__smakebuf_r+0x74>
 800f0bc:	89a3      	ldrh	r3, [r4, #12]
 800f0be:	f023 0303 	bic.w	r3, r3, #3
 800f0c2:	f043 0301 	orr.w	r3, r3, #1
 800f0c6:	81a3      	strh	r3, [r4, #12]
 800f0c8:	89a0      	ldrh	r0, [r4, #12]
 800f0ca:	4305      	orrs	r5, r0
 800f0cc:	81a5      	strh	r5, [r4, #12]
 800f0ce:	e7cd      	b.n	800f06c <__smakebuf_r+0x18>
 800f0d0:	0800e77d 	.word	0x0800e77d

0800f0d4 <malloc>:
 800f0d4:	4b02      	ldr	r3, [pc, #8]	; (800f0e0 <malloc+0xc>)
 800f0d6:	4601      	mov	r1, r0
 800f0d8:	6818      	ldr	r0, [r3, #0]
 800f0da:	f000 bd2f 	b.w	800fb3c <_malloc_r>
 800f0de:	bf00      	nop
 800f0e0:	2000004c 	.word	0x2000004c

0800f0e4 <__ascii_mbtowc>:
 800f0e4:	b082      	sub	sp, #8
 800f0e6:	b901      	cbnz	r1, 800f0ea <__ascii_mbtowc+0x6>
 800f0e8:	a901      	add	r1, sp, #4
 800f0ea:	b142      	cbz	r2, 800f0fe <__ascii_mbtowc+0x1a>
 800f0ec:	b14b      	cbz	r3, 800f102 <__ascii_mbtowc+0x1e>
 800f0ee:	7813      	ldrb	r3, [r2, #0]
 800f0f0:	600b      	str	r3, [r1, #0]
 800f0f2:	7812      	ldrb	r2, [r2, #0]
 800f0f4:	1e10      	subs	r0, r2, #0
 800f0f6:	bf18      	it	ne
 800f0f8:	2001      	movne	r0, #1
 800f0fa:	b002      	add	sp, #8
 800f0fc:	4770      	bx	lr
 800f0fe:	4610      	mov	r0, r2
 800f100:	e7fb      	b.n	800f0fa <__ascii_mbtowc+0x16>
 800f102:	f06f 0001 	mvn.w	r0, #1
 800f106:	e7f8      	b.n	800f0fa <__ascii_mbtowc+0x16>

0800f108 <_Balloc>:
 800f108:	b570      	push	{r4, r5, r6, lr}
 800f10a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f10c:	4604      	mov	r4, r0
 800f10e:	460d      	mov	r5, r1
 800f110:	b976      	cbnz	r6, 800f130 <_Balloc+0x28>
 800f112:	2010      	movs	r0, #16
 800f114:	f7ff ffde 	bl	800f0d4 <malloc>
 800f118:	4602      	mov	r2, r0
 800f11a:	6260      	str	r0, [r4, #36]	; 0x24
 800f11c:	b920      	cbnz	r0, 800f128 <_Balloc+0x20>
 800f11e:	4b18      	ldr	r3, [pc, #96]	; (800f180 <_Balloc+0x78>)
 800f120:	4818      	ldr	r0, [pc, #96]	; (800f184 <_Balloc+0x7c>)
 800f122:	2166      	movs	r1, #102	; 0x66
 800f124:	f000 ff4c 	bl	800ffc0 <__assert_func>
 800f128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f12c:	6006      	str	r6, [r0, #0]
 800f12e:	60c6      	str	r6, [r0, #12]
 800f130:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f132:	68f3      	ldr	r3, [r6, #12]
 800f134:	b183      	cbz	r3, 800f158 <_Balloc+0x50>
 800f136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f138:	68db      	ldr	r3, [r3, #12]
 800f13a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f13e:	b9b8      	cbnz	r0, 800f170 <_Balloc+0x68>
 800f140:	2101      	movs	r1, #1
 800f142:	fa01 f605 	lsl.w	r6, r1, r5
 800f146:	1d72      	adds	r2, r6, #5
 800f148:	0092      	lsls	r2, r2, #2
 800f14a:	4620      	mov	r0, r4
 800f14c:	f000 fc97 	bl	800fa7e <_calloc_r>
 800f150:	b160      	cbz	r0, 800f16c <_Balloc+0x64>
 800f152:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f156:	e00e      	b.n	800f176 <_Balloc+0x6e>
 800f158:	2221      	movs	r2, #33	; 0x21
 800f15a:	2104      	movs	r1, #4
 800f15c:	4620      	mov	r0, r4
 800f15e:	f000 fc8e 	bl	800fa7e <_calloc_r>
 800f162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f164:	60f0      	str	r0, [r6, #12]
 800f166:	68db      	ldr	r3, [r3, #12]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d1e4      	bne.n	800f136 <_Balloc+0x2e>
 800f16c:	2000      	movs	r0, #0
 800f16e:	bd70      	pop	{r4, r5, r6, pc}
 800f170:	6802      	ldr	r2, [r0, #0]
 800f172:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f176:	2300      	movs	r3, #0
 800f178:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f17c:	e7f7      	b.n	800f16e <_Balloc+0x66>
 800f17e:	bf00      	nop
 800f180:	080116be 	.word	0x080116be
 800f184:	08011828 	.word	0x08011828

0800f188 <_Bfree>:
 800f188:	b570      	push	{r4, r5, r6, lr}
 800f18a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f18c:	4605      	mov	r5, r0
 800f18e:	460c      	mov	r4, r1
 800f190:	b976      	cbnz	r6, 800f1b0 <_Bfree+0x28>
 800f192:	2010      	movs	r0, #16
 800f194:	f7ff ff9e 	bl	800f0d4 <malloc>
 800f198:	4602      	mov	r2, r0
 800f19a:	6268      	str	r0, [r5, #36]	; 0x24
 800f19c:	b920      	cbnz	r0, 800f1a8 <_Bfree+0x20>
 800f19e:	4b09      	ldr	r3, [pc, #36]	; (800f1c4 <_Bfree+0x3c>)
 800f1a0:	4809      	ldr	r0, [pc, #36]	; (800f1c8 <_Bfree+0x40>)
 800f1a2:	218a      	movs	r1, #138	; 0x8a
 800f1a4:	f000 ff0c 	bl	800ffc0 <__assert_func>
 800f1a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f1ac:	6006      	str	r6, [r0, #0]
 800f1ae:	60c6      	str	r6, [r0, #12]
 800f1b0:	b13c      	cbz	r4, 800f1c2 <_Bfree+0x3a>
 800f1b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f1b4:	6862      	ldr	r2, [r4, #4]
 800f1b6:	68db      	ldr	r3, [r3, #12]
 800f1b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f1bc:	6021      	str	r1, [r4, #0]
 800f1be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f1c2:	bd70      	pop	{r4, r5, r6, pc}
 800f1c4:	080116be 	.word	0x080116be
 800f1c8:	08011828 	.word	0x08011828

0800f1cc <__multadd>:
 800f1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1d0:	690e      	ldr	r6, [r1, #16]
 800f1d2:	4607      	mov	r7, r0
 800f1d4:	4698      	mov	r8, r3
 800f1d6:	460c      	mov	r4, r1
 800f1d8:	f101 0014 	add.w	r0, r1, #20
 800f1dc:	2300      	movs	r3, #0
 800f1de:	6805      	ldr	r5, [r0, #0]
 800f1e0:	b2a9      	uxth	r1, r5
 800f1e2:	fb02 8101 	mla	r1, r2, r1, r8
 800f1e6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f1ea:	0c2d      	lsrs	r5, r5, #16
 800f1ec:	fb02 c505 	mla	r5, r2, r5, ip
 800f1f0:	b289      	uxth	r1, r1
 800f1f2:	3301      	adds	r3, #1
 800f1f4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f1f8:	429e      	cmp	r6, r3
 800f1fa:	f840 1b04 	str.w	r1, [r0], #4
 800f1fe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f202:	dcec      	bgt.n	800f1de <__multadd+0x12>
 800f204:	f1b8 0f00 	cmp.w	r8, #0
 800f208:	d022      	beq.n	800f250 <__multadd+0x84>
 800f20a:	68a3      	ldr	r3, [r4, #8]
 800f20c:	42b3      	cmp	r3, r6
 800f20e:	dc19      	bgt.n	800f244 <__multadd+0x78>
 800f210:	6861      	ldr	r1, [r4, #4]
 800f212:	4638      	mov	r0, r7
 800f214:	3101      	adds	r1, #1
 800f216:	f7ff ff77 	bl	800f108 <_Balloc>
 800f21a:	4605      	mov	r5, r0
 800f21c:	b928      	cbnz	r0, 800f22a <__multadd+0x5e>
 800f21e:	4602      	mov	r2, r0
 800f220:	4b0d      	ldr	r3, [pc, #52]	; (800f258 <__multadd+0x8c>)
 800f222:	480e      	ldr	r0, [pc, #56]	; (800f25c <__multadd+0x90>)
 800f224:	21b5      	movs	r1, #181	; 0xb5
 800f226:	f000 fecb 	bl	800ffc0 <__assert_func>
 800f22a:	6922      	ldr	r2, [r4, #16]
 800f22c:	3202      	adds	r2, #2
 800f22e:	f104 010c 	add.w	r1, r4, #12
 800f232:	0092      	lsls	r2, r2, #2
 800f234:	300c      	adds	r0, #12
 800f236:	f7fc feb3 	bl	800bfa0 <memcpy>
 800f23a:	4621      	mov	r1, r4
 800f23c:	4638      	mov	r0, r7
 800f23e:	f7ff ffa3 	bl	800f188 <_Bfree>
 800f242:	462c      	mov	r4, r5
 800f244:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f248:	3601      	adds	r6, #1
 800f24a:	f8c3 8014 	str.w	r8, [r3, #20]
 800f24e:	6126      	str	r6, [r4, #16]
 800f250:	4620      	mov	r0, r4
 800f252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f256:	bf00      	nop
 800f258:	08011734 	.word	0x08011734
 800f25c:	08011828 	.word	0x08011828

0800f260 <__s2b>:
 800f260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f264:	460c      	mov	r4, r1
 800f266:	4615      	mov	r5, r2
 800f268:	461f      	mov	r7, r3
 800f26a:	2209      	movs	r2, #9
 800f26c:	3308      	adds	r3, #8
 800f26e:	4606      	mov	r6, r0
 800f270:	fb93 f3f2 	sdiv	r3, r3, r2
 800f274:	2100      	movs	r1, #0
 800f276:	2201      	movs	r2, #1
 800f278:	429a      	cmp	r2, r3
 800f27a:	db09      	blt.n	800f290 <__s2b+0x30>
 800f27c:	4630      	mov	r0, r6
 800f27e:	f7ff ff43 	bl	800f108 <_Balloc>
 800f282:	b940      	cbnz	r0, 800f296 <__s2b+0x36>
 800f284:	4602      	mov	r2, r0
 800f286:	4b19      	ldr	r3, [pc, #100]	; (800f2ec <__s2b+0x8c>)
 800f288:	4819      	ldr	r0, [pc, #100]	; (800f2f0 <__s2b+0x90>)
 800f28a:	21ce      	movs	r1, #206	; 0xce
 800f28c:	f000 fe98 	bl	800ffc0 <__assert_func>
 800f290:	0052      	lsls	r2, r2, #1
 800f292:	3101      	adds	r1, #1
 800f294:	e7f0      	b.n	800f278 <__s2b+0x18>
 800f296:	9b08      	ldr	r3, [sp, #32]
 800f298:	6143      	str	r3, [r0, #20]
 800f29a:	2d09      	cmp	r5, #9
 800f29c:	f04f 0301 	mov.w	r3, #1
 800f2a0:	6103      	str	r3, [r0, #16]
 800f2a2:	dd16      	ble.n	800f2d2 <__s2b+0x72>
 800f2a4:	f104 0909 	add.w	r9, r4, #9
 800f2a8:	46c8      	mov	r8, r9
 800f2aa:	442c      	add	r4, r5
 800f2ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f2b0:	4601      	mov	r1, r0
 800f2b2:	3b30      	subs	r3, #48	; 0x30
 800f2b4:	220a      	movs	r2, #10
 800f2b6:	4630      	mov	r0, r6
 800f2b8:	f7ff ff88 	bl	800f1cc <__multadd>
 800f2bc:	45a0      	cmp	r8, r4
 800f2be:	d1f5      	bne.n	800f2ac <__s2b+0x4c>
 800f2c0:	f1a5 0408 	sub.w	r4, r5, #8
 800f2c4:	444c      	add	r4, r9
 800f2c6:	1b2d      	subs	r5, r5, r4
 800f2c8:	1963      	adds	r3, r4, r5
 800f2ca:	42bb      	cmp	r3, r7
 800f2cc:	db04      	blt.n	800f2d8 <__s2b+0x78>
 800f2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2d2:	340a      	adds	r4, #10
 800f2d4:	2509      	movs	r5, #9
 800f2d6:	e7f6      	b.n	800f2c6 <__s2b+0x66>
 800f2d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f2dc:	4601      	mov	r1, r0
 800f2de:	3b30      	subs	r3, #48	; 0x30
 800f2e0:	220a      	movs	r2, #10
 800f2e2:	4630      	mov	r0, r6
 800f2e4:	f7ff ff72 	bl	800f1cc <__multadd>
 800f2e8:	e7ee      	b.n	800f2c8 <__s2b+0x68>
 800f2ea:	bf00      	nop
 800f2ec:	08011734 	.word	0x08011734
 800f2f0:	08011828 	.word	0x08011828

0800f2f4 <__hi0bits>:
 800f2f4:	0c03      	lsrs	r3, r0, #16
 800f2f6:	041b      	lsls	r3, r3, #16
 800f2f8:	b9d3      	cbnz	r3, 800f330 <__hi0bits+0x3c>
 800f2fa:	0400      	lsls	r0, r0, #16
 800f2fc:	2310      	movs	r3, #16
 800f2fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f302:	bf04      	itt	eq
 800f304:	0200      	lsleq	r0, r0, #8
 800f306:	3308      	addeq	r3, #8
 800f308:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f30c:	bf04      	itt	eq
 800f30e:	0100      	lsleq	r0, r0, #4
 800f310:	3304      	addeq	r3, #4
 800f312:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f316:	bf04      	itt	eq
 800f318:	0080      	lsleq	r0, r0, #2
 800f31a:	3302      	addeq	r3, #2
 800f31c:	2800      	cmp	r0, #0
 800f31e:	db05      	blt.n	800f32c <__hi0bits+0x38>
 800f320:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f324:	f103 0301 	add.w	r3, r3, #1
 800f328:	bf08      	it	eq
 800f32a:	2320      	moveq	r3, #32
 800f32c:	4618      	mov	r0, r3
 800f32e:	4770      	bx	lr
 800f330:	2300      	movs	r3, #0
 800f332:	e7e4      	b.n	800f2fe <__hi0bits+0xa>

0800f334 <__lo0bits>:
 800f334:	6803      	ldr	r3, [r0, #0]
 800f336:	f013 0207 	ands.w	r2, r3, #7
 800f33a:	4601      	mov	r1, r0
 800f33c:	d00b      	beq.n	800f356 <__lo0bits+0x22>
 800f33e:	07da      	lsls	r2, r3, #31
 800f340:	d424      	bmi.n	800f38c <__lo0bits+0x58>
 800f342:	0798      	lsls	r0, r3, #30
 800f344:	bf49      	itett	mi
 800f346:	085b      	lsrmi	r3, r3, #1
 800f348:	089b      	lsrpl	r3, r3, #2
 800f34a:	2001      	movmi	r0, #1
 800f34c:	600b      	strmi	r3, [r1, #0]
 800f34e:	bf5c      	itt	pl
 800f350:	600b      	strpl	r3, [r1, #0]
 800f352:	2002      	movpl	r0, #2
 800f354:	4770      	bx	lr
 800f356:	b298      	uxth	r0, r3
 800f358:	b9b0      	cbnz	r0, 800f388 <__lo0bits+0x54>
 800f35a:	0c1b      	lsrs	r3, r3, #16
 800f35c:	2010      	movs	r0, #16
 800f35e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f362:	bf04      	itt	eq
 800f364:	0a1b      	lsreq	r3, r3, #8
 800f366:	3008      	addeq	r0, #8
 800f368:	071a      	lsls	r2, r3, #28
 800f36a:	bf04      	itt	eq
 800f36c:	091b      	lsreq	r3, r3, #4
 800f36e:	3004      	addeq	r0, #4
 800f370:	079a      	lsls	r2, r3, #30
 800f372:	bf04      	itt	eq
 800f374:	089b      	lsreq	r3, r3, #2
 800f376:	3002      	addeq	r0, #2
 800f378:	07da      	lsls	r2, r3, #31
 800f37a:	d403      	bmi.n	800f384 <__lo0bits+0x50>
 800f37c:	085b      	lsrs	r3, r3, #1
 800f37e:	f100 0001 	add.w	r0, r0, #1
 800f382:	d005      	beq.n	800f390 <__lo0bits+0x5c>
 800f384:	600b      	str	r3, [r1, #0]
 800f386:	4770      	bx	lr
 800f388:	4610      	mov	r0, r2
 800f38a:	e7e8      	b.n	800f35e <__lo0bits+0x2a>
 800f38c:	2000      	movs	r0, #0
 800f38e:	4770      	bx	lr
 800f390:	2020      	movs	r0, #32
 800f392:	4770      	bx	lr

0800f394 <__i2b>:
 800f394:	b510      	push	{r4, lr}
 800f396:	460c      	mov	r4, r1
 800f398:	2101      	movs	r1, #1
 800f39a:	f7ff feb5 	bl	800f108 <_Balloc>
 800f39e:	4602      	mov	r2, r0
 800f3a0:	b928      	cbnz	r0, 800f3ae <__i2b+0x1a>
 800f3a2:	4b05      	ldr	r3, [pc, #20]	; (800f3b8 <__i2b+0x24>)
 800f3a4:	4805      	ldr	r0, [pc, #20]	; (800f3bc <__i2b+0x28>)
 800f3a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f3aa:	f000 fe09 	bl	800ffc0 <__assert_func>
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	6144      	str	r4, [r0, #20]
 800f3b2:	6103      	str	r3, [r0, #16]
 800f3b4:	bd10      	pop	{r4, pc}
 800f3b6:	bf00      	nop
 800f3b8:	08011734 	.word	0x08011734
 800f3bc:	08011828 	.word	0x08011828

0800f3c0 <__multiply>:
 800f3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3c4:	4614      	mov	r4, r2
 800f3c6:	690a      	ldr	r2, [r1, #16]
 800f3c8:	6923      	ldr	r3, [r4, #16]
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	bfb8      	it	lt
 800f3ce:	460b      	movlt	r3, r1
 800f3d0:	460d      	mov	r5, r1
 800f3d2:	bfbc      	itt	lt
 800f3d4:	4625      	movlt	r5, r4
 800f3d6:	461c      	movlt	r4, r3
 800f3d8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f3dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f3e0:	68ab      	ldr	r3, [r5, #8]
 800f3e2:	6869      	ldr	r1, [r5, #4]
 800f3e4:	eb0a 0709 	add.w	r7, sl, r9
 800f3e8:	42bb      	cmp	r3, r7
 800f3ea:	b085      	sub	sp, #20
 800f3ec:	bfb8      	it	lt
 800f3ee:	3101      	addlt	r1, #1
 800f3f0:	f7ff fe8a 	bl	800f108 <_Balloc>
 800f3f4:	b930      	cbnz	r0, 800f404 <__multiply+0x44>
 800f3f6:	4602      	mov	r2, r0
 800f3f8:	4b42      	ldr	r3, [pc, #264]	; (800f504 <__multiply+0x144>)
 800f3fa:	4843      	ldr	r0, [pc, #268]	; (800f508 <__multiply+0x148>)
 800f3fc:	f240 115d 	movw	r1, #349	; 0x15d
 800f400:	f000 fdde 	bl	800ffc0 <__assert_func>
 800f404:	f100 0614 	add.w	r6, r0, #20
 800f408:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f40c:	4633      	mov	r3, r6
 800f40e:	2200      	movs	r2, #0
 800f410:	4543      	cmp	r3, r8
 800f412:	d31e      	bcc.n	800f452 <__multiply+0x92>
 800f414:	f105 0c14 	add.w	ip, r5, #20
 800f418:	f104 0314 	add.w	r3, r4, #20
 800f41c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f420:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f424:	9202      	str	r2, [sp, #8]
 800f426:	ebac 0205 	sub.w	r2, ip, r5
 800f42a:	3a15      	subs	r2, #21
 800f42c:	f022 0203 	bic.w	r2, r2, #3
 800f430:	3204      	adds	r2, #4
 800f432:	f105 0115 	add.w	r1, r5, #21
 800f436:	458c      	cmp	ip, r1
 800f438:	bf38      	it	cc
 800f43a:	2204      	movcc	r2, #4
 800f43c:	9201      	str	r2, [sp, #4]
 800f43e:	9a02      	ldr	r2, [sp, #8]
 800f440:	9303      	str	r3, [sp, #12]
 800f442:	429a      	cmp	r2, r3
 800f444:	d808      	bhi.n	800f458 <__multiply+0x98>
 800f446:	2f00      	cmp	r7, #0
 800f448:	dc55      	bgt.n	800f4f6 <__multiply+0x136>
 800f44a:	6107      	str	r7, [r0, #16]
 800f44c:	b005      	add	sp, #20
 800f44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f452:	f843 2b04 	str.w	r2, [r3], #4
 800f456:	e7db      	b.n	800f410 <__multiply+0x50>
 800f458:	f8b3 a000 	ldrh.w	sl, [r3]
 800f45c:	f1ba 0f00 	cmp.w	sl, #0
 800f460:	d020      	beq.n	800f4a4 <__multiply+0xe4>
 800f462:	f105 0e14 	add.w	lr, r5, #20
 800f466:	46b1      	mov	r9, r6
 800f468:	2200      	movs	r2, #0
 800f46a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f46e:	f8d9 b000 	ldr.w	fp, [r9]
 800f472:	b2a1      	uxth	r1, r4
 800f474:	fa1f fb8b 	uxth.w	fp, fp
 800f478:	fb0a b101 	mla	r1, sl, r1, fp
 800f47c:	4411      	add	r1, r2
 800f47e:	f8d9 2000 	ldr.w	r2, [r9]
 800f482:	0c24      	lsrs	r4, r4, #16
 800f484:	0c12      	lsrs	r2, r2, #16
 800f486:	fb0a 2404 	mla	r4, sl, r4, r2
 800f48a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f48e:	b289      	uxth	r1, r1
 800f490:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f494:	45f4      	cmp	ip, lr
 800f496:	f849 1b04 	str.w	r1, [r9], #4
 800f49a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f49e:	d8e4      	bhi.n	800f46a <__multiply+0xaa>
 800f4a0:	9901      	ldr	r1, [sp, #4]
 800f4a2:	5072      	str	r2, [r6, r1]
 800f4a4:	9a03      	ldr	r2, [sp, #12]
 800f4a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f4aa:	3304      	adds	r3, #4
 800f4ac:	f1b9 0f00 	cmp.w	r9, #0
 800f4b0:	d01f      	beq.n	800f4f2 <__multiply+0x132>
 800f4b2:	6834      	ldr	r4, [r6, #0]
 800f4b4:	f105 0114 	add.w	r1, r5, #20
 800f4b8:	46b6      	mov	lr, r6
 800f4ba:	f04f 0a00 	mov.w	sl, #0
 800f4be:	880a      	ldrh	r2, [r1, #0]
 800f4c0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f4c4:	fb09 b202 	mla	r2, r9, r2, fp
 800f4c8:	4492      	add	sl, r2
 800f4ca:	b2a4      	uxth	r4, r4
 800f4cc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f4d0:	f84e 4b04 	str.w	r4, [lr], #4
 800f4d4:	f851 4b04 	ldr.w	r4, [r1], #4
 800f4d8:	f8be 2000 	ldrh.w	r2, [lr]
 800f4dc:	0c24      	lsrs	r4, r4, #16
 800f4de:	fb09 2404 	mla	r4, r9, r4, r2
 800f4e2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f4e6:	458c      	cmp	ip, r1
 800f4e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f4ec:	d8e7      	bhi.n	800f4be <__multiply+0xfe>
 800f4ee:	9a01      	ldr	r2, [sp, #4]
 800f4f0:	50b4      	str	r4, [r6, r2]
 800f4f2:	3604      	adds	r6, #4
 800f4f4:	e7a3      	b.n	800f43e <__multiply+0x7e>
 800f4f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d1a5      	bne.n	800f44a <__multiply+0x8a>
 800f4fe:	3f01      	subs	r7, #1
 800f500:	e7a1      	b.n	800f446 <__multiply+0x86>
 800f502:	bf00      	nop
 800f504:	08011734 	.word	0x08011734
 800f508:	08011828 	.word	0x08011828

0800f50c <__pow5mult>:
 800f50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f510:	4615      	mov	r5, r2
 800f512:	f012 0203 	ands.w	r2, r2, #3
 800f516:	4606      	mov	r6, r0
 800f518:	460f      	mov	r7, r1
 800f51a:	d007      	beq.n	800f52c <__pow5mult+0x20>
 800f51c:	4c25      	ldr	r4, [pc, #148]	; (800f5b4 <__pow5mult+0xa8>)
 800f51e:	3a01      	subs	r2, #1
 800f520:	2300      	movs	r3, #0
 800f522:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f526:	f7ff fe51 	bl	800f1cc <__multadd>
 800f52a:	4607      	mov	r7, r0
 800f52c:	10ad      	asrs	r5, r5, #2
 800f52e:	d03d      	beq.n	800f5ac <__pow5mult+0xa0>
 800f530:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f532:	b97c      	cbnz	r4, 800f554 <__pow5mult+0x48>
 800f534:	2010      	movs	r0, #16
 800f536:	f7ff fdcd 	bl	800f0d4 <malloc>
 800f53a:	4602      	mov	r2, r0
 800f53c:	6270      	str	r0, [r6, #36]	; 0x24
 800f53e:	b928      	cbnz	r0, 800f54c <__pow5mult+0x40>
 800f540:	4b1d      	ldr	r3, [pc, #116]	; (800f5b8 <__pow5mult+0xac>)
 800f542:	481e      	ldr	r0, [pc, #120]	; (800f5bc <__pow5mult+0xb0>)
 800f544:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f548:	f000 fd3a 	bl	800ffc0 <__assert_func>
 800f54c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f550:	6004      	str	r4, [r0, #0]
 800f552:	60c4      	str	r4, [r0, #12]
 800f554:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f558:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f55c:	b94c      	cbnz	r4, 800f572 <__pow5mult+0x66>
 800f55e:	f240 2171 	movw	r1, #625	; 0x271
 800f562:	4630      	mov	r0, r6
 800f564:	f7ff ff16 	bl	800f394 <__i2b>
 800f568:	2300      	movs	r3, #0
 800f56a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f56e:	4604      	mov	r4, r0
 800f570:	6003      	str	r3, [r0, #0]
 800f572:	f04f 0900 	mov.w	r9, #0
 800f576:	07eb      	lsls	r3, r5, #31
 800f578:	d50a      	bpl.n	800f590 <__pow5mult+0x84>
 800f57a:	4639      	mov	r1, r7
 800f57c:	4622      	mov	r2, r4
 800f57e:	4630      	mov	r0, r6
 800f580:	f7ff ff1e 	bl	800f3c0 <__multiply>
 800f584:	4639      	mov	r1, r7
 800f586:	4680      	mov	r8, r0
 800f588:	4630      	mov	r0, r6
 800f58a:	f7ff fdfd 	bl	800f188 <_Bfree>
 800f58e:	4647      	mov	r7, r8
 800f590:	106d      	asrs	r5, r5, #1
 800f592:	d00b      	beq.n	800f5ac <__pow5mult+0xa0>
 800f594:	6820      	ldr	r0, [r4, #0]
 800f596:	b938      	cbnz	r0, 800f5a8 <__pow5mult+0x9c>
 800f598:	4622      	mov	r2, r4
 800f59a:	4621      	mov	r1, r4
 800f59c:	4630      	mov	r0, r6
 800f59e:	f7ff ff0f 	bl	800f3c0 <__multiply>
 800f5a2:	6020      	str	r0, [r4, #0]
 800f5a4:	f8c0 9000 	str.w	r9, [r0]
 800f5a8:	4604      	mov	r4, r0
 800f5aa:	e7e4      	b.n	800f576 <__pow5mult+0x6a>
 800f5ac:	4638      	mov	r0, r7
 800f5ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5b2:	bf00      	nop
 800f5b4:	08011978 	.word	0x08011978
 800f5b8:	080116be 	.word	0x080116be
 800f5bc:	08011828 	.word	0x08011828

0800f5c0 <__lshift>:
 800f5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5c4:	460c      	mov	r4, r1
 800f5c6:	6849      	ldr	r1, [r1, #4]
 800f5c8:	6923      	ldr	r3, [r4, #16]
 800f5ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f5ce:	68a3      	ldr	r3, [r4, #8]
 800f5d0:	4607      	mov	r7, r0
 800f5d2:	4691      	mov	r9, r2
 800f5d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f5d8:	f108 0601 	add.w	r6, r8, #1
 800f5dc:	42b3      	cmp	r3, r6
 800f5de:	db0b      	blt.n	800f5f8 <__lshift+0x38>
 800f5e0:	4638      	mov	r0, r7
 800f5e2:	f7ff fd91 	bl	800f108 <_Balloc>
 800f5e6:	4605      	mov	r5, r0
 800f5e8:	b948      	cbnz	r0, 800f5fe <__lshift+0x3e>
 800f5ea:	4602      	mov	r2, r0
 800f5ec:	4b28      	ldr	r3, [pc, #160]	; (800f690 <__lshift+0xd0>)
 800f5ee:	4829      	ldr	r0, [pc, #164]	; (800f694 <__lshift+0xd4>)
 800f5f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f5f4:	f000 fce4 	bl	800ffc0 <__assert_func>
 800f5f8:	3101      	adds	r1, #1
 800f5fa:	005b      	lsls	r3, r3, #1
 800f5fc:	e7ee      	b.n	800f5dc <__lshift+0x1c>
 800f5fe:	2300      	movs	r3, #0
 800f600:	f100 0114 	add.w	r1, r0, #20
 800f604:	f100 0210 	add.w	r2, r0, #16
 800f608:	4618      	mov	r0, r3
 800f60a:	4553      	cmp	r3, sl
 800f60c:	db33      	blt.n	800f676 <__lshift+0xb6>
 800f60e:	6920      	ldr	r0, [r4, #16]
 800f610:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f614:	f104 0314 	add.w	r3, r4, #20
 800f618:	f019 091f 	ands.w	r9, r9, #31
 800f61c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f620:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f624:	d02b      	beq.n	800f67e <__lshift+0xbe>
 800f626:	f1c9 0e20 	rsb	lr, r9, #32
 800f62a:	468a      	mov	sl, r1
 800f62c:	2200      	movs	r2, #0
 800f62e:	6818      	ldr	r0, [r3, #0]
 800f630:	fa00 f009 	lsl.w	r0, r0, r9
 800f634:	4302      	orrs	r2, r0
 800f636:	f84a 2b04 	str.w	r2, [sl], #4
 800f63a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f63e:	459c      	cmp	ip, r3
 800f640:	fa22 f20e 	lsr.w	r2, r2, lr
 800f644:	d8f3      	bhi.n	800f62e <__lshift+0x6e>
 800f646:	ebac 0304 	sub.w	r3, ip, r4
 800f64a:	3b15      	subs	r3, #21
 800f64c:	f023 0303 	bic.w	r3, r3, #3
 800f650:	3304      	adds	r3, #4
 800f652:	f104 0015 	add.w	r0, r4, #21
 800f656:	4584      	cmp	ip, r0
 800f658:	bf38      	it	cc
 800f65a:	2304      	movcc	r3, #4
 800f65c:	50ca      	str	r2, [r1, r3]
 800f65e:	b10a      	cbz	r2, 800f664 <__lshift+0xa4>
 800f660:	f108 0602 	add.w	r6, r8, #2
 800f664:	3e01      	subs	r6, #1
 800f666:	4638      	mov	r0, r7
 800f668:	612e      	str	r6, [r5, #16]
 800f66a:	4621      	mov	r1, r4
 800f66c:	f7ff fd8c 	bl	800f188 <_Bfree>
 800f670:	4628      	mov	r0, r5
 800f672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f676:	f842 0f04 	str.w	r0, [r2, #4]!
 800f67a:	3301      	adds	r3, #1
 800f67c:	e7c5      	b.n	800f60a <__lshift+0x4a>
 800f67e:	3904      	subs	r1, #4
 800f680:	f853 2b04 	ldr.w	r2, [r3], #4
 800f684:	f841 2f04 	str.w	r2, [r1, #4]!
 800f688:	459c      	cmp	ip, r3
 800f68a:	d8f9      	bhi.n	800f680 <__lshift+0xc0>
 800f68c:	e7ea      	b.n	800f664 <__lshift+0xa4>
 800f68e:	bf00      	nop
 800f690:	08011734 	.word	0x08011734
 800f694:	08011828 	.word	0x08011828

0800f698 <__mcmp>:
 800f698:	b530      	push	{r4, r5, lr}
 800f69a:	6902      	ldr	r2, [r0, #16]
 800f69c:	690c      	ldr	r4, [r1, #16]
 800f69e:	1b12      	subs	r2, r2, r4
 800f6a0:	d10e      	bne.n	800f6c0 <__mcmp+0x28>
 800f6a2:	f100 0314 	add.w	r3, r0, #20
 800f6a6:	3114      	adds	r1, #20
 800f6a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f6ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f6b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f6b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f6b8:	42a5      	cmp	r5, r4
 800f6ba:	d003      	beq.n	800f6c4 <__mcmp+0x2c>
 800f6bc:	d305      	bcc.n	800f6ca <__mcmp+0x32>
 800f6be:	2201      	movs	r2, #1
 800f6c0:	4610      	mov	r0, r2
 800f6c2:	bd30      	pop	{r4, r5, pc}
 800f6c4:	4283      	cmp	r3, r0
 800f6c6:	d3f3      	bcc.n	800f6b0 <__mcmp+0x18>
 800f6c8:	e7fa      	b.n	800f6c0 <__mcmp+0x28>
 800f6ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f6ce:	e7f7      	b.n	800f6c0 <__mcmp+0x28>

0800f6d0 <__mdiff>:
 800f6d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6d4:	460c      	mov	r4, r1
 800f6d6:	4606      	mov	r6, r0
 800f6d8:	4611      	mov	r1, r2
 800f6da:	4620      	mov	r0, r4
 800f6dc:	4617      	mov	r7, r2
 800f6de:	f7ff ffdb 	bl	800f698 <__mcmp>
 800f6e2:	1e05      	subs	r5, r0, #0
 800f6e4:	d110      	bne.n	800f708 <__mdiff+0x38>
 800f6e6:	4629      	mov	r1, r5
 800f6e8:	4630      	mov	r0, r6
 800f6ea:	f7ff fd0d 	bl	800f108 <_Balloc>
 800f6ee:	b930      	cbnz	r0, 800f6fe <__mdiff+0x2e>
 800f6f0:	4b39      	ldr	r3, [pc, #228]	; (800f7d8 <__mdiff+0x108>)
 800f6f2:	4602      	mov	r2, r0
 800f6f4:	f240 2132 	movw	r1, #562	; 0x232
 800f6f8:	4838      	ldr	r0, [pc, #224]	; (800f7dc <__mdiff+0x10c>)
 800f6fa:	f000 fc61 	bl	800ffc0 <__assert_func>
 800f6fe:	2301      	movs	r3, #1
 800f700:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f704:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f708:	bfa4      	itt	ge
 800f70a:	463b      	movge	r3, r7
 800f70c:	4627      	movge	r7, r4
 800f70e:	4630      	mov	r0, r6
 800f710:	6879      	ldr	r1, [r7, #4]
 800f712:	bfa6      	itte	ge
 800f714:	461c      	movge	r4, r3
 800f716:	2500      	movge	r5, #0
 800f718:	2501      	movlt	r5, #1
 800f71a:	f7ff fcf5 	bl	800f108 <_Balloc>
 800f71e:	b920      	cbnz	r0, 800f72a <__mdiff+0x5a>
 800f720:	4b2d      	ldr	r3, [pc, #180]	; (800f7d8 <__mdiff+0x108>)
 800f722:	4602      	mov	r2, r0
 800f724:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f728:	e7e6      	b.n	800f6f8 <__mdiff+0x28>
 800f72a:	693e      	ldr	r6, [r7, #16]
 800f72c:	60c5      	str	r5, [r0, #12]
 800f72e:	6925      	ldr	r5, [r4, #16]
 800f730:	f107 0114 	add.w	r1, r7, #20
 800f734:	f104 0914 	add.w	r9, r4, #20
 800f738:	f100 0e14 	add.w	lr, r0, #20
 800f73c:	f107 0210 	add.w	r2, r7, #16
 800f740:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f744:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f748:	46f2      	mov	sl, lr
 800f74a:	2700      	movs	r7, #0
 800f74c:	f859 3b04 	ldr.w	r3, [r9], #4
 800f750:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f754:	fa1f f883 	uxth.w	r8, r3
 800f758:	fa17 f78b 	uxtah	r7, r7, fp
 800f75c:	0c1b      	lsrs	r3, r3, #16
 800f75e:	eba7 0808 	sub.w	r8, r7, r8
 800f762:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f766:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f76a:	fa1f f888 	uxth.w	r8, r8
 800f76e:	141f      	asrs	r7, r3, #16
 800f770:	454d      	cmp	r5, r9
 800f772:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f776:	f84a 3b04 	str.w	r3, [sl], #4
 800f77a:	d8e7      	bhi.n	800f74c <__mdiff+0x7c>
 800f77c:	1b2b      	subs	r3, r5, r4
 800f77e:	3b15      	subs	r3, #21
 800f780:	f023 0303 	bic.w	r3, r3, #3
 800f784:	3304      	adds	r3, #4
 800f786:	3415      	adds	r4, #21
 800f788:	42a5      	cmp	r5, r4
 800f78a:	bf38      	it	cc
 800f78c:	2304      	movcc	r3, #4
 800f78e:	4419      	add	r1, r3
 800f790:	4473      	add	r3, lr
 800f792:	469e      	mov	lr, r3
 800f794:	460d      	mov	r5, r1
 800f796:	4565      	cmp	r5, ip
 800f798:	d30e      	bcc.n	800f7b8 <__mdiff+0xe8>
 800f79a:	f10c 0203 	add.w	r2, ip, #3
 800f79e:	1a52      	subs	r2, r2, r1
 800f7a0:	f022 0203 	bic.w	r2, r2, #3
 800f7a4:	3903      	subs	r1, #3
 800f7a6:	458c      	cmp	ip, r1
 800f7a8:	bf38      	it	cc
 800f7aa:	2200      	movcc	r2, #0
 800f7ac:	441a      	add	r2, r3
 800f7ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f7b2:	b17b      	cbz	r3, 800f7d4 <__mdiff+0x104>
 800f7b4:	6106      	str	r6, [r0, #16]
 800f7b6:	e7a5      	b.n	800f704 <__mdiff+0x34>
 800f7b8:	f855 8b04 	ldr.w	r8, [r5], #4
 800f7bc:	fa17 f488 	uxtah	r4, r7, r8
 800f7c0:	1422      	asrs	r2, r4, #16
 800f7c2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f7c6:	b2a4      	uxth	r4, r4
 800f7c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f7cc:	f84e 4b04 	str.w	r4, [lr], #4
 800f7d0:	1417      	asrs	r7, r2, #16
 800f7d2:	e7e0      	b.n	800f796 <__mdiff+0xc6>
 800f7d4:	3e01      	subs	r6, #1
 800f7d6:	e7ea      	b.n	800f7ae <__mdiff+0xde>
 800f7d8:	08011734 	.word	0x08011734
 800f7dc:	08011828 	.word	0x08011828

0800f7e0 <__ulp>:
 800f7e0:	b082      	sub	sp, #8
 800f7e2:	ed8d 0b00 	vstr	d0, [sp]
 800f7e6:	9b01      	ldr	r3, [sp, #4]
 800f7e8:	4912      	ldr	r1, [pc, #72]	; (800f834 <__ulp+0x54>)
 800f7ea:	4019      	ands	r1, r3
 800f7ec:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f7f0:	2900      	cmp	r1, #0
 800f7f2:	dd05      	ble.n	800f800 <__ulp+0x20>
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	460b      	mov	r3, r1
 800f7f8:	ec43 2b10 	vmov	d0, r2, r3
 800f7fc:	b002      	add	sp, #8
 800f7fe:	4770      	bx	lr
 800f800:	4249      	negs	r1, r1
 800f802:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f806:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f80a:	f04f 0200 	mov.w	r2, #0
 800f80e:	f04f 0300 	mov.w	r3, #0
 800f812:	da04      	bge.n	800f81e <__ulp+0x3e>
 800f814:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f818:	fa41 f300 	asr.w	r3, r1, r0
 800f81c:	e7ec      	b.n	800f7f8 <__ulp+0x18>
 800f81e:	f1a0 0114 	sub.w	r1, r0, #20
 800f822:	291e      	cmp	r1, #30
 800f824:	bfda      	itte	le
 800f826:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f82a:	fa20 f101 	lsrle.w	r1, r0, r1
 800f82e:	2101      	movgt	r1, #1
 800f830:	460a      	mov	r2, r1
 800f832:	e7e1      	b.n	800f7f8 <__ulp+0x18>
 800f834:	7ff00000 	.word	0x7ff00000

0800f838 <__b2d>:
 800f838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f83a:	6905      	ldr	r5, [r0, #16]
 800f83c:	f100 0714 	add.w	r7, r0, #20
 800f840:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f844:	1f2e      	subs	r6, r5, #4
 800f846:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f84a:	4620      	mov	r0, r4
 800f84c:	f7ff fd52 	bl	800f2f4 <__hi0bits>
 800f850:	f1c0 0320 	rsb	r3, r0, #32
 800f854:	280a      	cmp	r0, #10
 800f856:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f8d4 <__b2d+0x9c>
 800f85a:	600b      	str	r3, [r1, #0]
 800f85c:	dc14      	bgt.n	800f888 <__b2d+0x50>
 800f85e:	f1c0 0e0b 	rsb	lr, r0, #11
 800f862:	fa24 f10e 	lsr.w	r1, r4, lr
 800f866:	42b7      	cmp	r7, r6
 800f868:	ea41 030c 	orr.w	r3, r1, ip
 800f86c:	bf34      	ite	cc
 800f86e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f872:	2100      	movcs	r1, #0
 800f874:	3015      	adds	r0, #21
 800f876:	fa04 f000 	lsl.w	r0, r4, r0
 800f87a:	fa21 f10e 	lsr.w	r1, r1, lr
 800f87e:	ea40 0201 	orr.w	r2, r0, r1
 800f882:	ec43 2b10 	vmov	d0, r2, r3
 800f886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f888:	42b7      	cmp	r7, r6
 800f88a:	bf3a      	itte	cc
 800f88c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f890:	f1a5 0608 	subcc.w	r6, r5, #8
 800f894:	2100      	movcs	r1, #0
 800f896:	380b      	subs	r0, #11
 800f898:	d017      	beq.n	800f8ca <__b2d+0x92>
 800f89a:	f1c0 0c20 	rsb	ip, r0, #32
 800f89e:	fa04 f500 	lsl.w	r5, r4, r0
 800f8a2:	42be      	cmp	r6, r7
 800f8a4:	fa21 f40c 	lsr.w	r4, r1, ip
 800f8a8:	ea45 0504 	orr.w	r5, r5, r4
 800f8ac:	bf8c      	ite	hi
 800f8ae:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f8b2:	2400      	movls	r4, #0
 800f8b4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f8b8:	fa01 f000 	lsl.w	r0, r1, r0
 800f8bc:	fa24 f40c 	lsr.w	r4, r4, ip
 800f8c0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f8c4:	ea40 0204 	orr.w	r2, r0, r4
 800f8c8:	e7db      	b.n	800f882 <__b2d+0x4a>
 800f8ca:	ea44 030c 	orr.w	r3, r4, ip
 800f8ce:	460a      	mov	r2, r1
 800f8d0:	e7d7      	b.n	800f882 <__b2d+0x4a>
 800f8d2:	bf00      	nop
 800f8d4:	3ff00000 	.word	0x3ff00000

0800f8d8 <__d2b>:
 800f8d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f8dc:	4689      	mov	r9, r1
 800f8de:	2101      	movs	r1, #1
 800f8e0:	ec57 6b10 	vmov	r6, r7, d0
 800f8e4:	4690      	mov	r8, r2
 800f8e6:	f7ff fc0f 	bl	800f108 <_Balloc>
 800f8ea:	4604      	mov	r4, r0
 800f8ec:	b930      	cbnz	r0, 800f8fc <__d2b+0x24>
 800f8ee:	4602      	mov	r2, r0
 800f8f0:	4b25      	ldr	r3, [pc, #148]	; (800f988 <__d2b+0xb0>)
 800f8f2:	4826      	ldr	r0, [pc, #152]	; (800f98c <__d2b+0xb4>)
 800f8f4:	f240 310a 	movw	r1, #778	; 0x30a
 800f8f8:	f000 fb62 	bl	800ffc0 <__assert_func>
 800f8fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f900:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f904:	bb35      	cbnz	r5, 800f954 <__d2b+0x7c>
 800f906:	2e00      	cmp	r6, #0
 800f908:	9301      	str	r3, [sp, #4]
 800f90a:	d028      	beq.n	800f95e <__d2b+0x86>
 800f90c:	4668      	mov	r0, sp
 800f90e:	9600      	str	r6, [sp, #0]
 800f910:	f7ff fd10 	bl	800f334 <__lo0bits>
 800f914:	9900      	ldr	r1, [sp, #0]
 800f916:	b300      	cbz	r0, 800f95a <__d2b+0x82>
 800f918:	9a01      	ldr	r2, [sp, #4]
 800f91a:	f1c0 0320 	rsb	r3, r0, #32
 800f91e:	fa02 f303 	lsl.w	r3, r2, r3
 800f922:	430b      	orrs	r3, r1
 800f924:	40c2      	lsrs	r2, r0
 800f926:	6163      	str	r3, [r4, #20]
 800f928:	9201      	str	r2, [sp, #4]
 800f92a:	9b01      	ldr	r3, [sp, #4]
 800f92c:	61a3      	str	r3, [r4, #24]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	bf14      	ite	ne
 800f932:	2202      	movne	r2, #2
 800f934:	2201      	moveq	r2, #1
 800f936:	6122      	str	r2, [r4, #16]
 800f938:	b1d5      	cbz	r5, 800f970 <__d2b+0x98>
 800f93a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f93e:	4405      	add	r5, r0
 800f940:	f8c9 5000 	str.w	r5, [r9]
 800f944:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f948:	f8c8 0000 	str.w	r0, [r8]
 800f94c:	4620      	mov	r0, r4
 800f94e:	b003      	add	sp, #12
 800f950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f954:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f958:	e7d5      	b.n	800f906 <__d2b+0x2e>
 800f95a:	6161      	str	r1, [r4, #20]
 800f95c:	e7e5      	b.n	800f92a <__d2b+0x52>
 800f95e:	a801      	add	r0, sp, #4
 800f960:	f7ff fce8 	bl	800f334 <__lo0bits>
 800f964:	9b01      	ldr	r3, [sp, #4]
 800f966:	6163      	str	r3, [r4, #20]
 800f968:	2201      	movs	r2, #1
 800f96a:	6122      	str	r2, [r4, #16]
 800f96c:	3020      	adds	r0, #32
 800f96e:	e7e3      	b.n	800f938 <__d2b+0x60>
 800f970:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f974:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f978:	f8c9 0000 	str.w	r0, [r9]
 800f97c:	6918      	ldr	r0, [r3, #16]
 800f97e:	f7ff fcb9 	bl	800f2f4 <__hi0bits>
 800f982:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f986:	e7df      	b.n	800f948 <__d2b+0x70>
 800f988:	08011734 	.word	0x08011734
 800f98c:	08011828 	.word	0x08011828

0800f990 <__ratio>:
 800f990:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f994:	4688      	mov	r8, r1
 800f996:	4669      	mov	r1, sp
 800f998:	4681      	mov	r9, r0
 800f99a:	f7ff ff4d 	bl	800f838 <__b2d>
 800f99e:	a901      	add	r1, sp, #4
 800f9a0:	4640      	mov	r0, r8
 800f9a2:	ec55 4b10 	vmov	r4, r5, d0
 800f9a6:	f7ff ff47 	bl	800f838 <__b2d>
 800f9aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f9ae:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f9b2:	eba3 0c02 	sub.w	ip, r3, r2
 800f9b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f9ba:	1a9b      	subs	r3, r3, r2
 800f9bc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f9c0:	ec51 0b10 	vmov	r0, r1, d0
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	bfd6      	itet	le
 800f9c8:	460a      	movle	r2, r1
 800f9ca:	462a      	movgt	r2, r5
 800f9cc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f9d0:	468b      	mov	fp, r1
 800f9d2:	462f      	mov	r7, r5
 800f9d4:	bfd4      	ite	le
 800f9d6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f9da:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f9de:	4620      	mov	r0, r4
 800f9e0:	ee10 2a10 	vmov	r2, s0
 800f9e4:	465b      	mov	r3, fp
 800f9e6:	4639      	mov	r1, r7
 800f9e8:	f7f0 ff50 	bl	800088c <__aeabi_ddiv>
 800f9ec:	ec41 0b10 	vmov	d0, r0, r1
 800f9f0:	b003      	add	sp, #12
 800f9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f9f6 <__copybits>:
 800f9f6:	3901      	subs	r1, #1
 800f9f8:	b570      	push	{r4, r5, r6, lr}
 800f9fa:	1149      	asrs	r1, r1, #5
 800f9fc:	6914      	ldr	r4, [r2, #16]
 800f9fe:	3101      	adds	r1, #1
 800fa00:	f102 0314 	add.w	r3, r2, #20
 800fa04:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fa08:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fa0c:	1f05      	subs	r5, r0, #4
 800fa0e:	42a3      	cmp	r3, r4
 800fa10:	d30c      	bcc.n	800fa2c <__copybits+0x36>
 800fa12:	1aa3      	subs	r3, r4, r2
 800fa14:	3b11      	subs	r3, #17
 800fa16:	f023 0303 	bic.w	r3, r3, #3
 800fa1a:	3211      	adds	r2, #17
 800fa1c:	42a2      	cmp	r2, r4
 800fa1e:	bf88      	it	hi
 800fa20:	2300      	movhi	r3, #0
 800fa22:	4418      	add	r0, r3
 800fa24:	2300      	movs	r3, #0
 800fa26:	4288      	cmp	r0, r1
 800fa28:	d305      	bcc.n	800fa36 <__copybits+0x40>
 800fa2a:	bd70      	pop	{r4, r5, r6, pc}
 800fa2c:	f853 6b04 	ldr.w	r6, [r3], #4
 800fa30:	f845 6f04 	str.w	r6, [r5, #4]!
 800fa34:	e7eb      	b.n	800fa0e <__copybits+0x18>
 800fa36:	f840 3b04 	str.w	r3, [r0], #4
 800fa3a:	e7f4      	b.n	800fa26 <__copybits+0x30>

0800fa3c <__any_on>:
 800fa3c:	f100 0214 	add.w	r2, r0, #20
 800fa40:	6900      	ldr	r0, [r0, #16]
 800fa42:	114b      	asrs	r3, r1, #5
 800fa44:	4298      	cmp	r0, r3
 800fa46:	b510      	push	{r4, lr}
 800fa48:	db11      	blt.n	800fa6e <__any_on+0x32>
 800fa4a:	dd0a      	ble.n	800fa62 <__any_on+0x26>
 800fa4c:	f011 011f 	ands.w	r1, r1, #31
 800fa50:	d007      	beq.n	800fa62 <__any_on+0x26>
 800fa52:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fa56:	fa24 f001 	lsr.w	r0, r4, r1
 800fa5a:	fa00 f101 	lsl.w	r1, r0, r1
 800fa5e:	428c      	cmp	r4, r1
 800fa60:	d10b      	bne.n	800fa7a <__any_on+0x3e>
 800fa62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d803      	bhi.n	800fa72 <__any_on+0x36>
 800fa6a:	2000      	movs	r0, #0
 800fa6c:	bd10      	pop	{r4, pc}
 800fa6e:	4603      	mov	r3, r0
 800fa70:	e7f7      	b.n	800fa62 <__any_on+0x26>
 800fa72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fa76:	2900      	cmp	r1, #0
 800fa78:	d0f5      	beq.n	800fa66 <__any_on+0x2a>
 800fa7a:	2001      	movs	r0, #1
 800fa7c:	e7f6      	b.n	800fa6c <__any_on+0x30>

0800fa7e <_calloc_r>:
 800fa7e:	b513      	push	{r0, r1, r4, lr}
 800fa80:	434a      	muls	r2, r1
 800fa82:	4611      	mov	r1, r2
 800fa84:	9201      	str	r2, [sp, #4]
 800fa86:	f000 f859 	bl	800fb3c <_malloc_r>
 800fa8a:	4604      	mov	r4, r0
 800fa8c:	b118      	cbz	r0, 800fa96 <_calloc_r+0x18>
 800fa8e:	9a01      	ldr	r2, [sp, #4]
 800fa90:	2100      	movs	r1, #0
 800fa92:	f7fc fa93 	bl	800bfbc <memset>
 800fa96:	4620      	mov	r0, r4
 800fa98:	b002      	add	sp, #8
 800fa9a:	bd10      	pop	{r4, pc}

0800fa9c <_free_r>:
 800fa9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa9e:	2900      	cmp	r1, #0
 800faa0:	d048      	beq.n	800fb34 <_free_r+0x98>
 800faa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800faa6:	9001      	str	r0, [sp, #4]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	f1a1 0404 	sub.w	r4, r1, #4
 800faae:	bfb8      	it	lt
 800fab0:	18e4      	addlt	r4, r4, r3
 800fab2:	f000 faf9 	bl	80100a8 <__malloc_lock>
 800fab6:	4a20      	ldr	r2, [pc, #128]	; (800fb38 <_free_r+0x9c>)
 800fab8:	9801      	ldr	r0, [sp, #4]
 800faba:	6813      	ldr	r3, [r2, #0]
 800fabc:	4615      	mov	r5, r2
 800fabe:	b933      	cbnz	r3, 800face <_free_r+0x32>
 800fac0:	6063      	str	r3, [r4, #4]
 800fac2:	6014      	str	r4, [r2, #0]
 800fac4:	b003      	add	sp, #12
 800fac6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800faca:	f000 baf3 	b.w	80100b4 <__malloc_unlock>
 800face:	42a3      	cmp	r3, r4
 800fad0:	d90b      	bls.n	800faea <_free_r+0x4e>
 800fad2:	6821      	ldr	r1, [r4, #0]
 800fad4:	1862      	adds	r2, r4, r1
 800fad6:	4293      	cmp	r3, r2
 800fad8:	bf04      	itt	eq
 800fada:	681a      	ldreq	r2, [r3, #0]
 800fadc:	685b      	ldreq	r3, [r3, #4]
 800fade:	6063      	str	r3, [r4, #4]
 800fae0:	bf04      	itt	eq
 800fae2:	1852      	addeq	r2, r2, r1
 800fae4:	6022      	streq	r2, [r4, #0]
 800fae6:	602c      	str	r4, [r5, #0]
 800fae8:	e7ec      	b.n	800fac4 <_free_r+0x28>
 800faea:	461a      	mov	r2, r3
 800faec:	685b      	ldr	r3, [r3, #4]
 800faee:	b10b      	cbz	r3, 800faf4 <_free_r+0x58>
 800faf0:	42a3      	cmp	r3, r4
 800faf2:	d9fa      	bls.n	800faea <_free_r+0x4e>
 800faf4:	6811      	ldr	r1, [r2, #0]
 800faf6:	1855      	adds	r5, r2, r1
 800faf8:	42a5      	cmp	r5, r4
 800fafa:	d10b      	bne.n	800fb14 <_free_r+0x78>
 800fafc:	6824      	ldr	r4, [r4, #0]
 800fafe:	4421      	add	r1, r4
 800fb00:	1854      	adds	r4, r2, r1
 800fb02:	42a3      	cmp	r3, r4
 800fb04:	6011      	str	r1, [r2, #0]
 800fb06:	d1dd      	bne.n	800fac4 <_free_r+0x28>
 800fb08:	681c      	ldr	r4, [r3, #0]
 800fb0a:	685b      	ldr	r3, [r3, #4]
 800fb0c:	6053      	str	r3, [r2, #4]
 800fb0e:	4421      	add	r1, r4
 800fb10:	6011      	str	r1, [r2, #0]
 800fb12:	e7d7      	b.n	800fac4 <_free_r+0x28>
 800fb14:	d902      	bls.n	800fb1c <_free_r+0x80>
 800fb16:	230c      	movs	r3, #12
 800fb18:	6003      	str	r3, [r0, #0]
 800fb1a:	e7d3      	b.n	800fac4 <_free_r+0x28>
 800fb1c:	6825      	ldr	r5, [r4, #0]
 800fb1e:	1961      	adds	r1, r4, r5
 800fb20:	428b      	cmp	r3, r1
 800fb22:	bf04      	itt	eq
 800fb24:	6819      	ldreq	r1, [r3, #0]
 800fb26:	685b      	ldreq	r3, [r3, #4]
 800fb28:	6063      	str	r3, [r4, #4]
 800fb2a:	bf04      	itt	eq
 800fb2c:	1949      	addeq	r1, r1, r5
 800fb2e:	6021      	streq	r1, [r4, #0]
 800fb30:	6054      	str	r4, [r2, #4]
 800fb32:	e7c7      	b.n	800fac4 <_free_r+0x28>
 800fb34:	b003      	add	sp, #12
 800fb36:	bd30      	pop	{r4, r5, pc}
 800fb38:	20000254 	.word	0x20000254

0800fb3c <_malloc_r>:
 800fb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb3e:	1ccd      	adds	r5, r1, #3
 800fb40:	f025 0503 	bic.w	r5, r5, #3
 800fb44:	3508      	adds	r5, #8
 800fb46:	2d0c      	cmp	r5, #12
 800fb48:	bf38      	it	cc
 800fb4a:	250c      	movcc	r5, #12
 800fb4c:	2d00      	cmp	r5, #0
 800fb4e:	4606      	mov	r6, r0
 800fb50:	db01      	blt.n	800fb56 <_malloc_r+0x1a>
 800fb52:	42a9      	cmp	r1, r5
 800fb54:	d903      	bls.n	800fb5e <_malloc_r+0x22>
 800fb56:	230c      	movs	r3, #12
 800fb58:	6033      	str	r3, [r6, #0]
 800fb5a:	2000      	movs	r0, #0
 800fb5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb5e:	f000 faa3 	bl	80100a8 <__malloc_lock>
 800fb62:	4921      	ldr	r1, [pc, #132]	; (800fbe8 <_malloc_r+0xac>)
 800fb64:	680a      	ldr	r2, [r1, #0]
 800fb66:	4614      	mov	r4, r2
 800fb68:	b99c      	cbnz	r4, 800fb92 <_malloc_r+0x56>
 800fb6a:	4f20      	ldr	r7, [pc, #128]	; (800fbec <_malloc_r+0xb0>)
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	b923      	cbnz	r3, 800fb7a <_malloc_r+0x3e>
 800fb70:	4621      	mov	r1, r4
 800fb72:	4630      	mov	r0, r6
 800fb74:	f000 f9a0 	bl	800feb8 <_sbrk_r>
 800fb78:	6038      	str	r0, [r7, #0]
 800fb7a:	4629      	mov	r1, r5
 800fb7c:	4630      	mov	r0, r6
 800fb7e:	f000 f99b 	bl	800feb8 <_sbrk_r>
 800fb82:	1c43      	adds	r3, r0, #1
 800fb84:	d123      	bne.n	800fbce <_malloc_r+0x92>
 800fb86:	230c      	movs	r3, #12
 800fb88:	6033      	str	r3, [r6, #0]
 800fb8a:	4630      	mov	r0, r6
 800fb8c:	f000 fa92 	bl	80100b4 <__malloc_unlock>
 800fb90:	e7e3      	b.n	800fb5a <_malloc_r+0x1e>
 800fb92:	6823      	ldr	r3, [r4, #0]
 800fb94:	1b5b      	subs	r3, r3, r5
 800fb96:	d417      	bmi.n	800fbc8 <_malloc_r+0x8c>
 800fb98:	2b0b      	cmp	r3, #11
 800fb9a:	d903      	bls.n	800fba4 <_malloc_r+0x68>
 800fb9c:	6023      	str	r3, [r4, #0]
 800fb9e:	441c      	add	r4, r3
 800fba0:	6025      	str	r5, [r4, #0]
 800fba2:	e004      	b.n	800fbae <_malloc_r+0x72>
 800fba4:	6863      	ldr	r3, [r4, #4]
 800fba6:	42a2      	cmp	r2, r4
 800fba8:	bf0c      	ite	eq
 800fbaa:	600b      	streq	r3, [r1, #0]
 800fbac:	6053      	strne	r3, [r2, #4]
 800fbae:	4630      	mov	r0, r6
 800fbb0:	f000 fa80 	bl	80100b4 <__malloc_unlock>
 800fbb4:	f104 000b 	add.w	r0, r4, #11
 800fbb8:	1d23      	adds	r3, r4, #4
 800fbba:	f020 0007 	bic.w	r0, r0, #7
 800fbbe:	1ac2      	subs	r2, r0, r3
 800fbc0:	d0cc      	beq.n	800fb5c <_malloc_r+0x20>
 800fbc2:	1a1b      	subs	r3, r3, r0
 800fbc4:	50a3      	str	r3, [r4, r2]
 800fbc6:	e7c9      	b.n	800fb5c <_malloc_r+0x20>
 800fbc8:	4622      	mov	r2, r4
 800fbca:	6864      	ldr	r4, [r4, #4]
 800fbcc:	e7cc      	b.n	800fb68 <_malloc_r+0x2c>
 800fbce:	1cc4      	adds	r4, r0, #3
 800fbd0:	f024 0403 	bic.w	r4, r4, #3
 800fbd4:	42a0      	cmp	r0, r4
 800fbd6:	d0e3      	beq.n	800fba0 <_malloc_r+0x64>
 800fbd8:	1a21      	subs	r1, r4, r0
 800fbda:	4630      	mov	r0, r6
 800fbdc:	f000 f96c 	bl	800feb8 <_sbrk_r>
 800fbe0:	3001      	adds	r0, #1
 800fbe2:	d1dd      	bne.n	800fba0 <_malloc_r+0x64>
 800fbe4:	e7cf      	b.n	800fb86 <_malloc_r+0x4a>
 800fbe6:	bf00      	nop
 800fbe8:	20000254 	.word	0x20000254
 800fbec:	20000258 	.word	0x20000258

0800fbf0 <__sfputc_r>:
 800fbf0:	6893      	ldr	r3, [r2, #8]
 800fbf2:	3b01      	subs	r3, #1
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	b410      	push	{r4}
 800fbf8:	6093      	str	r3, [r2, #8]
 800fbfa:	da08      	bge.n	800fc0e <__sfputc_r+0x1e>
 800fbfc:	6994      	ldr	r4, [r2, #24]
 800fbfe:	42a3      	cmp	r3, r4
 800fc00:	db01      	blt.n	800fc06 <__sfputc_r+0x16>
 800fc02:	290a      	cmp	r1, #10
 800fc04:	d103      	bne.n	800fc0e <__sfputc_r+0x1e>
 800fc06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc0a:	f7fd bd99 	b.w	800d740 <__swbuf_r>
 800fc0e:	6813      	ldr	r3, [r2, #0]
 800fc10:	1c58      	adds	r0, r3, #1
 800fc12:	6010      	str	r0, [r2, #0]
 800fc14:	7019      	strb	r1, [r3, #0]
 800fc16:	4608      	mov	r0, r1
 800fc18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc1c:	4770      	bx	lr

0800fc1e <__sfputs_r>:
 800fc1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc20:	4606      	mov	r6, r0
 800fc22:	460f      	mov	r7, r1
 800fc24:	4614      	mov	r4, r2
 800fc26:	18d5      	adds	r5, r2, r3
 800fc28:	42ac      	cmp	r4, r5
 800fc2a:	d101      	bne.n	800fc30 <__sfputs_r+0x12>
 800fc2c:	2000      	movs	r0, #0
 800fc2e:	e007      	b.n	800fc40 <__sfputs_r+0x22>
 800fc30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc34:	463a      	mov	r2, r7
 800fc36:	4630      	mov	r0, r6
 800fc38:	f7ff ffda 	bl	800fbf0 <__sfputc_r>
 800fc3c:	1c43      	adds	r3, r0, #1
 800fc3e:	d1f3      	bne.n	800fc28 <__sfputs_r+0xa>
 800fc40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fc44 <_vfiprintf_r>:
 800fc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc48:	460d      	mov	r5, r1
 800fc4a:	b09d      	sub	sp, #116	; 0x74
 800fc4c:	4614      	mov	r4, r2
 800fc4e:	4698      	mov	r8, r3
 800fc50:	4606      	mov	r6, r0
 800fc52:	b118      	cbz	r0, 800fc5c <_vfiprintf_r+0x18>
 800fc54:	6983      	ldr	r3, [r0, #24]
 800fc56:	b90b      	cbnz	r3, 800fc5c <_vfiprintf_r+0x18>
 800fc58:	f7fe fdc4 	bl	800e7e4 <__sinit>
 800fc5c:	4b89      	ldr	r3, [pc, #548]	; (800fe84 <_vfiprintf_r+0x240>)
 800fc5e:	429d      	cmp	r5, r3
 800fc60:	d11b      	bne.n	800fc9a <_vfiprintf_r+0x56>
 800fc62:	6875      	ldr	r5, [r6, #4]
 800fc64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc66:	07d9      	lsls	r1, r3, #31
 800fc68:	d405      	bmi.n	800fc76 <_vfiprintf_r+0x32>
 800fc6a:	89ab      	ldrh	r3, [r5, #12]
 800fc6c:	059a      	lsls	r2, r3, #22
 800fc6e:	d402      	bmi.n	800fc76 <_vfiprintf_r+0x32>
 800fc70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc72:	f7ff f9c8 	bl	800f006 <__retarget_lock_acquire_recursive>
 800fc76:	89ab      	ldrh	r3, [r5, #12]
 800fc78:	071b      	lsls	r3, r3, #28
 800fc7a:	d501      	bpl.n	800fc80 <_vfiprintf_r+0x3c>
 800fc7c:	692b      	ldr	r3, [r5, #16]
 800fc7e:	b9eb      	cbnz	r3, 800fcbc <_vfiprintf_r+0x78>
 800fc80:	4629      	mov	r1, r5
 800fc82:	4630      	mov	r0, r6
 800fc84:	f7fd fdae 	bl	800d7e4 <__swsetup_r>
 800fc88:	b1c0      	cbz	r0, 800fcbc <_vfiprintf_r+0x78>
 800fc8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc8c:	07dc      	lsls	r4, r3, #31
 800fc8e:	d50e      	bpl.n	800fcae <_vfiprintf_r+0x6a>
 800fc90:	f04f 30ff 	mov.w	r0, #4294967295
 800fc94:	b01d      	add	sp, #116	; 0x74
 800fc96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc9a:	4b7b      	ldr	r3, [pc, #492]	; (800fe88 <_vfiprintf_r+0x244>)
 800fc9c:	429d      	cmp	r5, r3
 800fc9e:	d101      	bne.n	800fca4 <_vfiprintf_r+0x60>
 800fca0:	68b5      	ldr	r5, [r6, #8]
 800fca2:	e7df      	b.n	800fc64 <_vfiprintf_r+0x20>
 800fca4:	4b79      	ldr	r3, [pc, #484]	; (800fe8c <_vfiprintf_r+0x248>)
 800fca6:	429d      	cmp	r5, r3
 800fca8:	bf08      	it	eq
 800fcaa:	68f5      	ldreq	r5, [r6, #12]
 800fcac:	e7da      	b.n	800fc64 <_vfiprintf_r+0x20>
 800fcae:	89ab      	ldrh	r3, [r5, #12]
 800fcb0:	0598      	lsls	r0, r3, #22
 800fcb2:	d4ed      	bmi.n	800fc90 <_vfiprintf_r+0x4c>
 800fcb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fcb6:	f7ff f9a7 	bl	800f008 <__retarget_lock_release_recursive>
 800fcba:	e7e9      	b.n	800fc90 <_vfiprintf_r+0x4c>
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	9309      	str	r3, [sp, #36]	; 0x24
 800fcc0:	2320      	movs	r3, #32
 800fcc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fcc6:	f8cd 800c 	str.w	r8, [sp, #12]
 800fcca:	2330      	movs	r3, #48	; 0x30
 800fccc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fe90 <_vfiprintf_r+0x24c>
 800fcd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fcd4:	f04f 0901 	mov.w	r9, #1
 800fcd8:	4623      	mov	r3, r4
 800fcda:	469a      	mov	sl, r3
 800fcdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fce0:	b10a      	cbz	r2, 800fce6 <_vfiprintf_r+0xa2>
 800fce2:	2a25      	cmp	r2, #37	; 0x25
 800fce4:	d1f9      	bne.n	800fcda <_vfiprintf_r+0x96>
 800fce6:	ebba 0b04 	subs.w	fp, sl, r4
 800fcea:	d00b      	beq.n	800fd04 <_vfiprintf_r+0xc0>
 800fcec:	465b      	mov	r3, fp
 800fcee:	4622      	mov	r2, r4
 800fcf0:	4629      	mov	r1, r5
 800fcf2:	4630      	mov	r0, r6
 800fcf4:	f7ff ff93 	bl	800fc1e <__sfputs_r>
 800fcf8:	3001      	adds	r0, #1
 800fcfa:	f000 80aa 	beq.w	800fe52 <_vfiprintf_r+0x20e>
 800fcfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd00:	445a      	add	r2, fp
 800fd02:	9209      	str	r2, [sp, #36]	; 0x24
 800fd04:	f89a 3000 	ldrb.w	r3, [sl]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	f000 80a2 	beq.w	800fe52 <_vfiprintf_r+0x20e>
 800fd0e:	2300      	movs	r3, #0
 800fd10:	f04f 32ff 	mov.w	r2, #4294967295
 800fd14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd18:	f10a 0a01 	add.w	sl, sl, #1
 800fd1c:	9304      	str	r3, [sp, #16]
 800fd1e:	9307      	str	r3, [sp, #28]
 800fd20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd24:	931a      	str	r3, [sp, #104]	; 0x68
 800fd26:	4654      	mov	r4, sl
 800fd28:	2205      	movs	r2, #5
 800fd2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd2e:	4858      	ldr	r0, [pc, #352]	; (800fe90 <_vfiprintf_r+0x24c>)
 800fd30:	f7f0 fa76 	bl	8000220 <memchr>
 800fd34:	9a04      	ldr	r2, [sp, #16]
 800fd36:	b9d8      	cbnz	r0, 800fd70 <_vfiprintf_r+0x12c>
 800fd38:	06d1      	lsls	r1, r2, #27
 800fd3a:	bf44      	itt	mi
 800fd3c:	2320      	movmi	r3, #32
 800fd3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd42:	0713      	lsls	r3, r2, #28
 800fd44:	bf44      	itt	mi
 800fd46:	232b      	movmi	r3, #43	; 0x2b
 800fd48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd4c:	f89a 3000 	ldrb.w	r3, [sl]
 800fd50:	2b2a      	cmp	r3, #42	; 0x2a
 800fd52:	d015      	beq.n	800fd80 <_vfiprintf_r+0x13c>
 800fd54:	9a07      	ldr	r2, [sp, #28]
 800fd56:	4654      	mov	r4, sl
 800fd58:	2000      	movs	r0, #0
 800fd5a:	f04f 0c0a 	mov.w	ip, #10
 800fd5e:	4621      	mov	r1, r4
 800fd60:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd64:	3b30      	subs	r3, #48	; 0x30
 800fd66:	2b09      	cmp	r3, #9
 800fd68:	d94e      	bls.n	800fe08 <_vfiprintf_r+0x1c4>
 800fd6a:	b1b0      	cbz	r0, 800fd9a <_vfiprintf_r+0x156>
 800fd6c:	9207      	str	r2, [sp, #28]
 800fd6e:	e014      	b.n	800fd9a <_vfiprintf_r+0x156>
 800fd70:	eba0 0308 	sub.w	r3, r0, r8
 800fd74:	fa09 f303 	lsl.w	r3, r9, r3
 800fd78:	4313      	orrs	r3, r2
 800fd7a:	9304      	str	r3, [sp, #16]
 800fd7c:	46a2      	mov	sl, r4
 800fd7e:	e7d2      	b.n	800fd26 <_vfiprintf_r+0xe2>
 800fd80:	9b03      	ldr	r3, [sp, #12]
 800fd82:	1d19      	adds	r1, r3, #4
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	9103      	str	r1, [sp, #12]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	bfbb      	ittet	lt
 800fd8c:	425b      	neglt	r3, r3
 800fd8e:	f042 0202 	orrlt.w	r2, r2, #2
 800fd92:	9307      	strge	r3, [sp, #28]
 800fd94:	9307      	strlt	r3, [sp, #28]
 800fd96:	bfb8      	it	lt
 800fd98:	9204      	strlt	r2, [sp, #16]
 800fd9a:	7823      	ldrb	r3, [r4, #0]
 800fd9c:	2b2e      	cmp	r3, #46	; 0x2e
 800fd9e:	d10c      	bne.n	800fdba <_vfiprintf_r+0x176>
 800fda0:	7863      	ldrb	r3, [r4, #1]
 800fda2:	2b2a      	cmp	r3, #42	; 0x2a
 800fda4:	d135      	bne.n	800fe12 <_vfiprintf_r+0x1ce>
 800fda6:	9b03      	ldr	r3, [sp, #12]
 800fda8:	1d1a      	adds	r2, r3, #4
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	9203      	str	r2, [sp, #12]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	bfb8      	it	lt
 800fdb2:	f04f 33ff 	movlt.w	r3, #4294967295
 800fdb6:	3402      	adds	r4, #2
 800fdb8:	9305      	str	r3, [sp, #20]
 800fdba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fea0 <_vfiprintf_r+0x25c>
 800fdbe:	7821      	ldrb	r1, [r4, #0]
 800fdc0:	2203      	movs	r2, #3
 800fdc2:	4650      	mov	r0, sl
 800fdc4:	f7f0 fa2c 	bl	8000220 <memchr>
 800fdc8:	b140      	cbz	r0, 800fddc <_vfiprintf_r+0x198>
 800fdca:	2340      	movs	r3, #64	; 0x40
 800fdcc:	eba0 000a 	sub.w	r0, r0, sl
 800fdd0:	fa03 f000 	lsl.w	r0, r3, r0
 800fdd4:	9b04      	ldr	r3, [sp, #16]
 800fdd6:	4303      	orrs	r3, r0
 800fdd8:	3401      	adds	r4, #1
 800fdda:	9304      	str	r3, [sp, #16]
 800fddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fde0:	482c      	ldr	r0, [pc, #176]	; (800fe94 <_vfiprintf_r+0x250>)
 800fde2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fde6:	2206      	movs	r2, #6
 800fde8:	f7f0 fa1a 	bl	8000220 <memchr>
 800fdec:	2800      	cmp	r0, #0
 800fdee:	d03f      	beq.n	800fe70 <_vfiprintf_r+0x22c>
 800fdf0:	4b29      	ldr	r3, [pc, #164]	; (800fe98 <_vfiprintf_r+0x254>)
 800fdf2:	bb1b      	cbnz	r3, 800fe3c <_vfiprintf_r+0x1f8>
 800fdf4:	9b03      	ldr	r3, [sp, #12]
 800fdf6:	3307      	adds	r3, #7
 800fdf8:	f023 0307 	bic.w	r3, r3, #7
 800fdfc:	3308      	adds	r3, #8
 800fdfe:	9303      	str	r3, [sp, #12]
 800fe00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe02:	443b      	add	r3, r7
 800fe04:	9309      	str	r3, [sp, #36]	; 0x24
 800fe06:	e767      	b.n	800fcd8 <_vfiprintf_r+0x94>
 800fe08:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe0c:	460c      	mov	r4, r1
 800fe0e:	2001      	movs	r0, #1
 800fe10:	e7a5      	b.n	800fd5e <_vfiprintf_r+0x11a>
 800fe12:	2300      	movs	r3, #0
 800fe14:	3401      	adds	r4, #1
 800fe16:	9305      	str	r3, [sp, #20]
 800fe18:	4619      	mov	r1, r3
 800fe1a:	f04f 0c0a 	mov.w	ip, #10
 800fe1e:	4620      	mov	r0, r4
 800fe20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe24:	3a30      	subs	r2, #48	; 0x30
 800fe26:	2a09      	cmp	r2, #9
 800fe28:	d903      	bls.n	800fe32 <_vfiprintf_r+0x1ee>
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d0c5      	beq.n	800fdba <_vfiprintf_r+0x176>
 800fe2e:	9105      	str	r1, [sp, #20]
 800fe30:	e7c3      	b.n	800fdba <_vfiprintf_r+0x176>
 800fe32:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe36:	4604      	mov	r4, r0
 800fe38:	2301      	movs	r3, #1
 800fe3a:	e7f0      	b.n	800fe1e <_vfiprintf_r+0x1da>
 800fe3c:	ab03      	add	r3, sp, #12
 800fe3e:	9300      	str	r3, [sp, #0]
 800fe40:	462a      	mov	r2, r5
 800fe42:	4b16      	ldr	r3, [pc, #88]	; (800fe9c <_vfiprintf_r+0x258>)
 800fe44:	a904      	add	r1, sp, #16
 800fe46:	4630      	mov	r0, r6
 800fe48:	f7fc f960 	bl	800c10c <_printf_float>
 800fe4c:	4607      	mov	r7, r0
 800fe4e:	1c78      	adds	r0, r7, #1
 800fe50:	d1d6      	bne.n	800fe00 <_vfiprintf_r+0x1bc>
 800fe52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe54:	07d9      	lsls	r1, r3, #31
 800fe56:	d405      	bmi.n	800fe64 <_vfiprintf_r+0x220>
 800fe58:	89ab      	ldrh	r3, [r5, #12]
 800fe5a:	059a      	lsls	r2, r3, #22
 800fe5c:	d402      	bmi.n	800fe64 <_vfiprintf_r+0x220>
 800fe5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe60:	f7ff f8d2 	bl	800f008 <__retarget_lock_release_recursive>
 800fe64:	89ab      	ldrh	r3, [r5, #12]
 800fe66:	065b      	lsls	r3, r3, #25
 800fe68:	f53f af12 	bmi.w	800fc90 <_vfiprintf_r+0x4c>
 800fe6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe6e:	e711      	b.n	800fc94 <_vfiprintf_r+0x50>
 800fe70:	ab03      	add	r3, sp, #12
 800fe72:	9300      	str	r3, [sp, #0]
 800fe74:	462a      	mov	r2, r5
 800fe76:	4b09      	ldr	r3, [pc, #36]	; (800fe9c <_vfiprintf_r+0x258>)
 800fe78:	a904      	add	r1, sp, #16
 800fe7a:	4630      	mov	r0, r6
 800fe7c:	f7fc fbea 	bl	800c654 <_printf_i>
 800fe80:	e7e4      	b.n	800fe4c <_vfiprintf_r+0x208>
 800fe82:	bf00      	nop
 800fe84:	08011768 	.word	0x08011768
 800fe88:	08011788 	.word	0x08011788
 800fe8c:	08011748 	.word	0x08011748
 800fe90:	08011984 	.word	0x08011984
 800fe94:	0801198e 	.word	0x0801198e
 800fe98:	0800c10d 	.word	0x0800c10d
 800fe9c:	0800fc1f 	.word	0x0800fc1f
 800fea0:	0801198a 	.word	0x0801198a
 800fea4:	00000000 	.word	0x00000000

0800fea8 <nan>:
 800fea8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800feb0 <nan+0x8>
 800feac:	4770      	bx	lr
 800feae:	bf00      	nop
 800feb0:	00000000 	.word	0x00000000
 800feb4:	7ff80000 	.word	0x7ff80000

0800feb8 <_sbrk_r>:
 800feb8:	b538      	push	{r3, r4, r5, lr}
 800feba:	4d06      	ldr	r5, [pc, #24]	; (800fed4 <_sbrk_r+0x1c>)
 800febc:	2300      	movs	r3, #0
 800febe:	4604      	mov	r4, r0
 800fec0:	4608      	mov	r0, r1
 800fec2:	602b      	str	r3, [r5, #0]
 800fec4:	f7f6 fca0 	bl	8006808 <_sbrk>
 800fec8:	1c43      	adds	r3, r0, #1
 800feca:	d102      	bne.n	800fed2 <_sbrk_r+0x1a>
 800fecc:	682b      	ldr	r3, [r5, #0]
 800fece:	b103      	cbz	r3, 800fed2 <_sbrk_r+0x1a>
 800fed0:	6023      	str	r3, [r4, #0]
 800fed2:	bd38      	pop	{r3, r4, r5, pc}
 800fed4:	200095a4 	.word	0x200095a4

0800fed8 <__sread>:
 800fed8:	b510      	push	{r4, lr}
 800feda:	460c      	mov	r4, r1
 800fedc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fee0:	f000 f8ee 	bl	80100c0 <_read_r>
 800fee4:	2800      	cmp	r0, #0
 800fee6:	bfab      	itete	ge
 800fee8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800feea:	89a3      	ldrhlt	r3, [r4, #12]
 800feec:	181b      	addge	r3, r3, r0
 800feee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fef2:	bfac      	ite	ge
 800fef4:	6563      	strge	r3, [r4, #84]	; 0x54
 800fef6:	81a3      	strhlt	r3, [r4, #12]
 800fef8:	bd10      	pop	{r4, pc}

0800fefa <__swrite>:
 800fefa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fefe:	461f      	mov	r7, r3
 800ff00:	898b      	ldrh	r3, [r1, #12]
 800ff02:	05db      	lsls	r3, r3, #23
 800ff04:	4605      	mov	r5, r0
 800ff06:	460c      	mov	r4, r1
 800ff08:	4616      	mov	r6, r2
 800ff0a:	d505      	bpl.n	800ff18 <__swrite+0x1e>
 800ff0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff10:	2302      	movs	r3, #2
 800ff12:	2200      	movs	r2, #0
 800ff14:	f000 f8b6 	bl	8010084 <_lseek_r>
 800ff18:	89a3      	ldrh	r3, [r4, #12]
 800ff1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ff22:	81a3      	strh	r3, [r4, #12]
 800ff24:	4632      	mov	r2, r6
 800ff26:	463b      	mov	r3, r7
 800ff28:	4628      	mov	r0, r5
 800ff2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff2e:	f000 b835 	b.w	800ff9c <_write_r>

0800ff32 <__sseek>:
 800ff32:	b510      	push	{r4, lr}
 800ff34:	460c      	mov	r4, r1
 800ff36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff3a:	f000 f8a3 	bl	8010084 <_lseek_r>
 800ff3e:	1c43      	adds	r3, r0, #1
 800ff40:	89a3      	ldrh	r3, [r4, #12]
 800ff42:	bf15      	itete	ne
 800ff44:	6560      	strne	r0, [r4, #84]	; 0x54
 800ff46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ff4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ff4e:	81a3      	strheq	r3, [r4, #12]
 800ff50:	bf18      	it	ne
 800ff52:	81a3      	strhne	r3, [r4, #12]
 800ff54:	bd10      	pop	{r4, pc}

0800ff56 <__sclose>:
 800ff56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff5a:	f000 b84f 	b.w	800fffc <_close_r>

0800ff5e <strncmp>:
 800ff5e:	b510      	push	{r4, lr}
 800ff60:	b16a      	cbz	r2, 800ff7e <strncmp+0x20>
 800ff62:	3901      	subs	r1, #1
 800ff64:	1884      	adds	r4, r0, r2
 800ff66:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ff6a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ff6e:	4293      	cmp	r3, r2
 800ff70:	d103      	bne.n	800ff7a <strncmp+0x1c>
 800ff72:	42a0      	cmp	r0, r4
 800ff74:	d001      	beq.n	800ff7a <strncmp+0x1c>
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d1f5      	bne.n	800ff66 <strncmp+0x8>
 800ff7a:	1a98      	subs	r0, r3, r2
 800ff7c:	bd10      	pop	{r4, pc}
 800ff7e:	4610      	mov	r0, r2
 800ff80:	e7fc      	b.n	800ff7c <strncmp+0x1e>

0800ff82 <__ascii_wctomb>:
 800ff82:	b149      	cbz	r1, 800ff98 <__ascii_wctomb+0x16>
 800ff84:	2aff      	cmp	r2, #255	; 0xff
 800ff86:	bf85      	ittet	hi
 800ff88:	238a      	movhi	r3, #138	; 0x8a
 800ff8a:	6003      	strhi	r3, [r0, #0]
 800ff8c:	700a      	strbls	r2, [r1, #0]
 800ff8e:	f04f 30ff 	movhi.w	r0, #4294967295
 800ff92:	bf98      	it	ls
 800ff94:	2001      	movls	r0, #1
 800ff96:	4770      	bx	lr
 800ff98:	4608      	mov	r0, r1
 800ff9a:	4770      	bx	lr

0800ff9c <_write_r>:
 800ff9c:	b538      	push	{r3, r4, r5, lr}
 800ff9e:	4d07      	ldr	r5, [pc, #28]	; (800ffbc <_write_r+0x20>)
 800ffa0:	4604      	mov	r4, r0
 800ffa2:	4608      	mov	r0, r1
 800ffa4:	4611      	mov	r1, r2
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	602a      	str	r2, [r5, #0]
 800ffaa:	461a      	mov	r2, r3
 800ffac:	f7f6 fbdb 	bl	8006766 <_write>
 800ffb0:	1c43      	adds	r3, r0, #1
 800ffb2:	d102      	bne.n	800ffba <_write_r+0x1e>
 800ffb4:	682b      	ldr	r3, [r5, #0]
 800ffb6:	b103      	cbz	r3, 800ffba <_write_r+0x1e>
 800ffb8:	6023      	str	r3, [r4, #0]
 800ffba:	bd38      	pop	{r3, r4, r5, pc}
 800ffbc:	200095a4 	.word	0x200095a4

0800ffc0 <__assert_func>:
 800ffc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ffc2:	4614      	mov	r4, r2
 800ffc4:	461a      	mov	r2, r3
 800ffc6:	4b09      	ldr	r3, [pc, #36]	; (800ffec <__assert_func+0x2c>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	4605      	mov	r5, r0
 800ffcc:	68d8      	ldr	r0, [r3, #12]
 800ffce:	b14c      	cbz	r4, 800ffe4 <__assert_func+0x24>
 800ffd0:	4b07      	ldr	r3, [pc, #28]	; (800fff0 <__assert_func+0x30>)
 800ffd2:	9100      	str	r1, [sp, #0]
 800ffd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ffd8:	4906      	ldr	r1, [pc, #24]	; (800fff4 <__assert_func+0x34>)
 800ffda:	462b      	mov	r3, r5
 800ffdc:	f000 f81e 	bl	801001c <fiprintf>
 800ffe0:	f000 f880 	bl	80100e4 <abort>
 800ffe4:	4b04      	ldr	r3, [pc, #16]	; (800fff8 <__assert_func+0x38>)
 800ffe6:	461c      	mov	r4, r3
 800ffe8:	e7f3      	b.n	800ffd2 <__assert_func+0x12>
 800ffea:	bf00      	nop
 800ffec:	2000004c 	.word	0x2000004c
 800fff0:	08011995 	.word	0x08011995
 800fff4:	080119a2 	.word	0x080119a2
 800fff8:	080119d0 	.word	0x080119d0

0800fffc <_close_r>:
 800fffc:	b538      	push	{r3, r4, r5, lr}
 800fffe:	4d06      	ldr	r5, [pc, #24]	; (8010018 <_close_r+0x1c>)
 8010000:	2300      	movs	r3, #0
 8010002:	4604      	mov	r4, r0
 8010004:	4608      	mov	r0, r1
 8010006:	602b      	str	r3, [r5, #0]
 8010008:	f7f6 fbc9 	bl	800679e <_close>
 801000c:	1c43      	adds	r3, r0, #1
 801000e:	d102      	bne.n	8010016 <_close_r+0x1a>
 8010010:	682b      	ldr	r3, [r5, #0]
 8010012:	b103      	cbz	r3, 8010016 <_close_r+0x1a>
 8010014:	6023      	str	r3, [r4, #0]
 8010016:	bd38      	pop	{r3, r4, r5, pc}
 8010018:	200095a4 	.word	0x200095a4

0801001c <fiprintf>:
 801001c:	b40e      	push	{r1, r2, r3}
 801001e:	b503      	push	{r0, r1, lr}
 8010020:	4601      	mov	r1, r0
 8010022:	ab03      	add	r3, sp, #12
 8010024:	4805      	ldr	r0, [pc, #20]	; (801003c <fiprintf+0x20>)
 8010026:	f853 2b04 	ldr.w	r2, [r3], #4
 801002a:	6800      	ldr	r0, [r0, #0]
 801002c:	9301      	str	r3, [sp, #4]
 801002e:	f7ff fe09 	bl	800fc44 <_vfiprintf_r>
 8010032:	b002      	add	sp, #8
 8010034:	f85d eb04 	ldr.w	lr, [sp], #4
 8010038:	b003      	add	sp, #12
 801003a:	4770      	bx	lr
 801003c:	2000004c 	.word	0x2000004c

08010040 <_fstat_r>:
 8010040:	b538      	push	{r3, r4, r5, lr}
 8010042:	4d07      	ldr	r5, [pc, #28]	; (8010060 <_fstat_r+0x20>)
 8010044:	2300      	movs	r3, #0
 8010046:	4604      	mov	r4, r0
 8010048:	4608      	mov	r0, r1
 801004a:	4611      	mov	r1, r2
 801004c:	602b      	str	r3, [r5, #0]
 801004e:	f7f6 fbb2 	bl	80067b6 <_fstat>
 8010052:	1c43      	adds	r3, r0, #1
 8010054:	d102      	bne.n	801005c <_fstat_r+0x1c>
 8010056:	682b      	ldr	r3, [r5, #0]
 8010058:	b103      	cbz	r3, 801005c <_fstat_r+0x1c>
 801005a:	6023      	str	r3, [r4, #0]
 801005c:	bd38      	pop	{r3, r4, r5, pc}
 801005e:	bf00      	nop
 8010060:	200095a4 	.word	0x200095a4

08010064 <_isatty_r>:
 8010064:	b538      	push	{r3, r4, r5, lr}
 8010066:	4d06      	ldr	r5, [pc, #24]	; (8010080 <_isatty_r+0x1c>)
 8010068:	2300      	movs	r3, #0
 801006a:	4604      	mov	r4, r0
 801006c:	4608      	mov	r0, r1
 801006e:	602b      	str	r3, [r5, #0]
 8010070:	f7f6 fbb1 	bl	80067d6 <_isatty>
 8010074:	1c43      	adds	r3, r0, #1
 8010076:	d102      	bne.n	801007e <_isatty_r+0x1a>
 8010078:	682b      	ldr	r3, [r5, #0]
 801007a:	b103      	cbz	r3, 801007e <_isatty_r+0x1a>
 801007c:	6023      	str	r3, [r4, #0]
 801007e:	bd38      	pop	{r3, r4, r5, pc}
 8010080:	200095a4 	.word	0x200095a4

08010084 <_lseek_r>:
 8010084:	b538      	push	{r3, r4, r5, lr}
 8010086:	4d07      	ldr	r5, [pc, #28]	; (80100a4 <_lseek_r+0x20>)
 8010088:	4604      	mov	r4, r0
 801008a:	4608      	mov	r0, r1
 801008c:	4611      	mov	r1, r2
 801008e:	2200      	movs	r2, #0
 8010090:	602a      	str	r2, [r5, #0]
 8010092:	461a      	mov	r2, r3
 8010094:	f7f6 fbaa 	bl	80067ec <_lseek>
 8010098:	1c43      	adds	r3, r0, #1
 801009a:	d102      	bne.n	80100a2 <_lseek_r+0x1e>
 801009c:	682b      	ldr	r3, [r5, #0]
 801009e:	b103      	cbz	r3, 80100a2 <_lseek_r+0x1e>
 80100a0:	6023      	str	r3, [r4, #0]
 80100a2:	bd38      	pop	{r3, r4, r5, pc}
 80100a4:	200095a4 	.word	0x200095a4

080100a8 <__malloc_lock>:
 80100a8:	4801      	ldr	r0, [pc, #4]	; (80100b0 <__malloc_lock+0x8>)
 80100aa:	f7fe bfac 	b.w	800f006 <__retarget_lock_acquire_recursive>
 80100ae:	bf00      	nop
 80100b0:	2000959c 	.word	0x2000959c

080100b4 <__malloc_unlock>:
 80100b4:	4801      	ldr	r0, [pc, #4]	; (80100bc <__malloc_unlock+0x8>)
 80100b6:	f7fe bfa7 	b.w	800f008 <__retarget_lock_release_recursive>
 80100ba:	bf00      	nop
 80100bc:	2000959c 	.word	0x2000959c

080100c0 <_read_r>:
 80100c0:	b538      	push	{r3, r4, r5, lr}
 80100c2:	4d07      	ldr	r5, [pc, #28]	; (80100e0 <_read_r+0x20>)
 80100c4:	4604      	mov	r4, r0
 80100c6:	4608      	mov	r0, r1
 80100c8:	4611      	mov	r1, r2
 80100ca:	2200      	movs	r2, #0
 80100cc:	602a      	str	r2, [r5, #0]
 80100ce:	461a      	mov	r2, r3
 80100d0:	f7f6 fb2c 	bl	800672c <_read>
 80100d4:	1c43      	adds	r3, r0, #1
 80100d6:	d102      	bne.n	80100de <_read_r+0x1e>
 80100d8:	682b      	ldr	r3, [r5, #0]
 80100da:	b103      	cbz	r3, 80100de <_read_r+0x1e>
 80100dc:	6023      	str	r3, [r4, #0]
 80100de:	bd38      	pop	{r3, r4, r5, pc}
 80100e0:	200095a4 	.word	0x200095a4

080100e4 <abort>:
 80100e4:	b508      	push	{r3, lr}
 80100e6:	2006      	movs	r0, #6
 80100e8:	f000 f82c 	bl	8010144 <raise>
 80100ec:	2001      	movs	r0, #1
 80100ee:	f7f6 fb13 	bl	8006718 <_exit>

080100f2 <_raise_r>:
 80100f2:	291f      	cmp	r1, #31
 80100f4:	b538      	push	{r3, r4, r5, lr}
 80100f6:	4604      	mov	r4, r0
 80100f8:	460d      	mov	r5, r1
 80100fa:	d904      	bls.n	8010106 <_raise_r+0x14>
 80100fc:	2316      	movs	r3, #22
 80100fe:	6003      	str	r3, [r0, #0]
 8010100:	f04f 30ff 	mov.w	r0, #4294967295
 8010104:	bd38      	pop	{r3, r4, r5, pc}
 8010106:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010108:	b112      	cbz	r2, 8010110 <_raise_r+0x1e>
 801010a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801010e:	b94b      	cbnz	r3, 8010124 <_raise_r+0x32>
 8010110:	4620      	mov	r0, r4
 8010112:	f000 f831 	bl	8010178 <_getpid_r>
 8010116:	462a      	mov	r2, r5
 8010118:	4601      	mov	r1, r0
 801011a:	4620      	mov	r0, r4
 801011c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010120:	f000 b818 	b.w	8010154 <_kill_r>
 8010124:	2b01      	cmp	r3, #1
 8010126:	d00a      	beq.n	801013e <_raise_r+0x4c>
 8010128:	1c59      	adds	r1, r3, #1
 801012a:	d103      	bne.n	8010134 <_raise_r+0x42>
 801012c:	2316      	movs	r3, #22
 801012e:	6003      	str	r3, [r0, #0]
 8010130:	2001      	movs	r0, #1
 8010132:	e7e7      	b.n	8010104 <_raise_r+0x12>
 8010134:	2400      	movs	r4, #0
 8010136:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801013a:	4628      	mov	r0, r5
 801013c:	4798      	blx	r3
 801013e:	2000      	movs	r0, #0
 8010140:	e7e0      	b.n	8010104 <_raise_r+0x12>
	...

08010144 <raise>:
 8010144:	4b02      	ldr	r3, [pc, #8]	; (8010150 <raise+0xc>)
 8010146:	4601      	mov	r1, r0
 8010148:	6818      	ldr	r0, [r3, #0]
 801014a:	f7ff bfd2 	b.w	80100f2 <_raise_r>
 801014e:	bf00      	nop
 8010150:	2000004c 	.word	0x2000004c

08010154 <_kill_r>:
 8010154:	b538      	push	{r3, r4, r5, lr}
 8010156:	4d07      	ldr	r5, [pc, #28]	; (8010174 <_kill_r+0x20>)
 8010158:	2300      	movs	r3, #0
 801015a:	4604      	mov	r4, r0
 801015c:	4608      	mov	r0, r1
 801015e:	4611      	mov	r1, r2
 8010160:	602b      	str	r3, [r5, #0]
 8010162:	f7f6 fac9 	bl	80066f8 <_kill>
 8010166:	1c43      	adds	r3, r0, #1
 8010168:	d102      	bne.n	8010170 <_kill_r+0x1c>
 801016a:	682b      	ldr	r3, [r5, #0]
 801016c:	b103      	cbz	r3, 8010170 <_kill_r+0x1c>
 801016e:	6023      	str	r3, [r4, #0]
 8010170:	bd38      	pop	{r3, r4, r5, pc}
 8010172:	bf00      	nop
 8010174:	200095a4 	.word	0x200095a4

08010178 <_getpid_r>:
 8010178:	f7f6 bab6 	b.w	80066e8 <_getpid>

0801017c <_init>:
 801017c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801017e:	bf00      	nop
 8010180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010182:	bc08      	pop	{r3}
 8010184:	469e      	mov	lr, r3
 8010186:	4770      	bx	lr

08010188 <_fini>:
 8010188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801018a:	bf00      	nop
 801018c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801018e:	bc08      	pop	{r3}
 8010190:	469e      	mov	lr, r3
 8010192:	4770      	bx	lr
