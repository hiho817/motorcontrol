
motorcontrol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f78c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001694  0800f960  0800f960  0001f960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010ff4  08010ff4  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  08010ff4  08010ff4  00020ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ffc  08010ffc  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ffc  08010ffc  00020ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011000  08011000  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08011004  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009338  20000220  08011224  00030220  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20009558  08011224  00039558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .debug_info   000258a2  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ca9  00000000  00000000  00055af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  0005a7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015d8  00000000  00000000  0005bf40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029450  00000000  00000000  0005d518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ebd2  00000000  00000000  00086968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7314  00000000  00000000  000a553a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018c84e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077e4  00000000  00000000  0018c8a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f944 	.word	0x0800f944

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	0800f944 	.word	0x0800f944

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800104a:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <MX_ADC1_Init+0xc8>)
 800104c:	4a2a      	ldr	r2, [pc, #168]	; (80010f8 <MX_ADC1_Init+0xcc>)
 800104e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001050:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <MX_ADC1_Init+0xc8>)
 8001052:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001056:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001058:	4b26      	ldr	r3, [pc, #152]	; (80010f4 <MX_ADC1_Init+0xc8>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800105e:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <MX_ADC1_Init+0xc8>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001064:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <MX_ADC1_Init+0xc8>)
 8001066:	2200      	movs	r2, #0
 8001068:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800106a:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <MX_ADC1_Init+0xc8>)
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001072:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <MX_ADC1_Init+0xc8>)
 8001074:	2200      	movs	r2, #0
 8001076:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001078:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <MX_ADC1_Init+0xc8>)
 800107a:	4a20      	ldr	r2, [pc, #128]	; (80010fc <MX_ADC1_Init+0xd0>)
 800107c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107e:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <MX_ADC1_Init+0xc8>)
 8001080:	2200      	movs	r2, #0
 8001082:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001084:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <MX_ADC1_Init+0xc8>)
 8001086:	2201      	movs	r2, #1
 8001088:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <MX_ADC1_Init+0xc8>)
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <MX_ADC1_Init+0xc8>)
 8001094:	2201      	movs	r2, #1
 8001096:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001098:	4816      	ldr	r0, [pc, #88]	; (80010f4 <MX_ADC1_Init+0xc8>)
 800109a:	f005 fa8d 	bl	80065b8 <HAL_ADC_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80010a4:	f003 fdc4 	bl	8004c30 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 80010a8:	2316      	movs	r3, #22
 80010aa:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4619      	mov	r1, r3
 80010ba:	480e      	ldr	r0, [pc, #56]	; (80010f4 <MX_ADC1_Init+0xc8>)
 80010bc:	f005 fe58 	bl	8006d70 <HAL_ADCEx_MultiModeConfigChannel>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80010c6:	f003 fdb3 	bl	8004c30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010ca:	230a      	movs	r3, #10
 80010cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 80010ce:	2301      	movs	r3, #1
 80010d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	4619      	mov	r1, r3
 80010da:	4806      	ldr	r0, [pc, #24]	; (80010f4 <MX_ADC1_Init+0xc8>)
 80010dc:	f005 fc1a 	bl	8006914 <HAL_ADC_ConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80010e6:	f003 fda3 	bl	8004c30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	3720      	adds	r7, #32
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000290 	.word	0x20000290
 80010f8:	40012000 	.word	0x40012000
 80010fc:	0f000001 	.word	0x0f000001

08001100 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001106:	463b      	mov	r3, r7
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001112:	4b1e      	ldr	r3, [pc, #120]	; (800118c <MX_ADC2_Init+0x8c>)
 8001114:	4a1e      	ldr	r2, [pc, #120]	; (8001190 <MX_ADC2_Init+0x90>)
 8001116:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <MX_ADC2_Init+0x8c>)
 800111a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800111e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001120:	4b1a      	ldr	r3, [pc, #104]	; (800118c <MX_ADC2_Init+0x8c>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <MX_ADC2_Init+0x8c>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <MX_ADC2_Init+0x8c>)
 800112e:	2200      	movs	r2, #0
 8001130:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001132:	4b16      	ldr	r3, [pc, #88]	; (800118c <MX_ADC2_Init+0x8c>)
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <MX_ADC2_Init+0x8c>)
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <MX_ADC2_Init+0x8c>)
 8001142:	2201      	movs	r2, #1
 8001144:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_ADC2_Init+0x8c>)
 8001148:	2200      	movs	r2, #0
 800114a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800114e:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MX_ADC2_Init+0x8c>)
 8001150:	2201      	movs	r2, #1
 8001152:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001154:	480d      	ldr	r0, [pc, #52]	; (800118c <MX_ADC2_Init+0x8c>)
 8001156:	f005 fa2f 	bl	80065b8 <HAL_ADC_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 8001160:	f003 fd66 	bl	8004c30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001164:	230b      	movs	r3, #11
 8001166:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001168:	2301      	movs	r3, #1
 800116a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800116c:	2300      	movs	r3, #0
 800116e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001170:	463b      	mov	r3, r7
 8001172:	4619      	mov	r1, r3
 8001174:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_ADC2_Init+0x8c>)
 8001176:	f005 fbcd 	bl	8006914 <HAL_ADC_ConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8001180:	f003 fd56 	bl	8004c30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000248 	.word	0x20000248
 8001190:	40012100 	.word	0x40012100

08001194 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800119a:	463b      	mov	r3, r7
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80011a6:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <MX_ADC3_Init+0x8c>)
 80011a8:	4a1e      	ldr	r2, [pc, #120]	; (8001224 <MX_ADC3_Init+0x90>)
 80011aa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011ac:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <MX_ADC3_Init+0x8c>)
 80011ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011b2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011b4:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <MX_ADC3_Init+0x8c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80011ba:	4b19      	ldr	r3, [pc, #100]	; (8001220 <MX_ADC3_Init+0x8c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011c0:	4b17      	ldr	r3, [pc, #92]	; (8001220 <MX_ADC3_Init+0x8c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <MX_ADC3_Init+0x8c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <MX_ADC3_Init+0x8c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <MX_ADC3_Init+0x8c>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_ADC3_Init+0x8c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_ADC3_Init+0x8c>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011e8:	480d      	ldr	r0, [pc, #52]	; (8001220 <MX_ADC3_Init+0x8c>)
 80011ea:	f005 f9e5 	bl	80065b8 <HAL_ADC_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_ADC3_Init+0x64>
  {
    Error_Handler();
 80011f4:	f003 fd1c 	bl	8004c30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011fc:	2301      	movs	r3, #1
 80011fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001204:	463b      	mov	r3, r7
 8001206:	4619      	mov	r1, r3
 8001208:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_ADC3_Init+0x8c>)
 800120a:	f005 fb83 	bl	8006914 <HAL_ADC_ConfigChannel>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8001214:	f003 fd0c 	bl	8004c30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200002d8 	.word	0x200002d8
 8001224:	40012200 	.word	0x40012200

08001228 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08e      	sub	sp, #56	; 0x38
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a45      	ldr	r2, [pc, #276]	; (800135c <HAL_ADC_MspInit+0x134>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d128      	bne.n	800129c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	623b      	str	r3, [r7, #32]
 800124e:	4b44      	ldr	r3, [pc, #272]	; (8001360 <HAL_ADC_MspInit+0x138>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	4a43      	ldr	r2, [pc, #268]	; (8001360 <HAL_ADC_MspInit+0x138>)
 8001254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001258:	6453      	str	r3, [r2, #68]	; 0x44
 800125a:	4b41      	ldr	r3, [pc, #260]	; (8001360 <HAL_ADC_MspInit+0x138>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001262:	623b      	str	r3, [r7, #32]
 8001264:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
 800126a:	4b3d      	ldr	r3, [pc, #244]	; (8001360 <HAL_ADC_MspInit+0x138>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a3c      	ldr	r2, [pc, #240]	; (8001360 <HAL_ADC_MspInit+0x138>)
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b3a      	ldr	r3, [pc, #232]	; (8001360 <HAL_ADC_MspInit+0x138>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001282:	2301      	movs	r3, #1
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001286:	2303      	movs	r3, #3
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001292:	4619      	mov	r1, r3
 8001294:	4833      	ldr	r0, [pc, #204]	; (8001364 <HAL_ADC_MspInit+0x13c>)
 8001296:	f006 fd9b 	bl	8007dd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800129a:	e05a      	b.n	8001352 <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC2)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a31      	ldr	r2, [pc, #196]	; (8001368 <HAL_ADC_MspInit+0x140>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d128      	bne.n	80012f8 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
 80012aa:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <HAL_ADC_MspInit+0x138>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	4a2c      	ldr	r2, [pc, #176]	; (8001360 <HAL_ADC_MspInit+0x138>)
 80012b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012b4:	6453      	str	r3, [r2, #68]	; 0x44
 80012b6:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <HAL_ADC_MspInit+0x138>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012be:	61bb      	str	r3, [r7, #24]
 80012c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	4b26      	ldr	r3, [pc, #152]	; (8001360 <HAL_ADC_MspInit+0x138>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a25      	ldr	r2, [pc, #148]	; (8001360 <HAL_ADC_MspInit+0x138>)
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b23      	ldr	r3, [pc, #140]	; (8001360 <HAL_ADC_MspInit+0x138>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012de:	2302      	movs	r3, #2
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e2:	2303      	movs	r3, #3
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ee:	4619      	mov	r1, r3
 80012f0:	481c      	ldr	r0, [pc, #112]	; (8001364 <HAL_ADC_MspInit+0x13c>)
 80012f2:	f006 fd6d 	bl	8007dd0 <HAL_GPIO_Init>
}
 80012f6:	e02c      	b.n	8001352 <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC3)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a1b      	ldr	r2, [pc, #108]	; (800136c <HAL_ADC_MspInit+0x144>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d127      	bne.n	8001352 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_ADC_MspInit+0x138>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	4a15      	ldr	r2, [pc, #84]	; (8001360 <HAL_ADC_MspInit+0x138>)
 800130c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001310:	6453      	str	r3, [r2, #68]	; 0x44
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <HAL_ADC_MspInit+0x138>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <HAL_ADC_MspInit+0x138>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a0e      	ldr	r2, [pc, #56]	; (8001360 <HAL_ADC_MspInit+0x138>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <HAL_ADC_MspInit+0x138>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800133a:	2301      	movs	r3, #1
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133e:	2303      	movs	r3, #3
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134a:	4619      	mov	r1, r3
 800134c:	4808      	ldr	r0, [pc, #32]	; (8001370 <HAL_ADC_MspInit+0x148>)
 800134e:	f006 fd3f 	bl	8007dd0 <HAL_GPIO_Init>
}
 8001352:	bf00      	nop
 8001354:	3738      	adds	r7, #56	; 0x38
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40012000 	.word	0x40012000
 8001360:	40023800 	.word	0x40023800
 8001364:	40020800 	.word	0x40020800
 8001368:	40012100 	.word	0x40012100
 800136c:	40012200 	.word	0x40012200
 8001370:	40020000 	.word	0x40020000

08001374 <order_phases>:
#include <stdio.h>
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001374:	b5b0      	push	{r4, r5, r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af02      	add	r7, sp, #8
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
 8001380:	603b      	str	r3, [r7, #0]
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 8001382:	4b76      	ldr	r3, [pc, #472]	; (800155c <order_phases+0x1e8>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]

	if(!cal->started){
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	7c1b      	ldrb	r3, [r3, #16]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d108      	bne.n	80013a2 <order_phases+0x2e>
		printf("Checking phase sign, pole pairs\r\n");
 8001390:	4873      	ldr	r0, [pc, #460]	; (8001560 <order_phases+0x1ec>)
 8001392:	f00a feef 	bl	800c174 <puts>
		cal->started = 1;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	60da      	str	r2, [r3, #12]
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	ee07 3a90 	vmov	s15, r3
 80013ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b2:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001564 <order_phases+0x1f0>
 80013b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	edd3 7a05 	vldr	s15, [r3, #20]
 80013c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d2:	d528      	bpl.n	8001426 <order_phases+0xb2>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80013e6:	3388      	adds	r3, #136	; 0x88
 80013e8:	601a      	str	r2, [r3, #0]
        cal->cal_position.elec_velocity = 0;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80013f0:	3390      	adds	r3, #144	; 0x90
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
        controller->i_d_des = I_CAL;
 80013f8:	4b5b      	ldr	r3, [pc, #364]	; (8001568 <order_phases+0x1f4>)
 80013fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        controller->i_q_des = 0.0f;
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        commutate(controller, &cal->cal_position);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001412:	332c      	adds	r3, #44	; 0x2c
 8001414:	4619      	mov	r1, r3
 8001416:	68b8      	ldr	r0, [r7, #8]
 8001418:	f001 fdac 	bl	8002f74 <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	68da      	ldr	r2, [r3, #12]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	619a      	str	r2, [r3, #24]
    	return;
 8001424:	e096      	b.n	8001554 <order_phases+0x1e0>
    }

    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	edd3 7a05 	vldr	s15, [r3, #20]
 800142c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800156c <order_phases+0x1f8>
 8001430:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001438:	d51d      	bpl.n	8001476 <order_phases+0x102>
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001440:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001444:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001448:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800144c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	edc3 7a02 	vstr	s15, [r3, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001460:	3388      	adds	r3, #136	; 0x88
 8001462:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800146a:	332c      	adds	r3, #44	; 0x2c
 800146c:	4619      	mov	r1, r3
 800146e:	68b8      	ldr	r0, [r7, #8]
 8001470:	f001 fd80 	bl	8002f74 <commutate>
    	return;
 8001474:	e06e      	b.n	8001554 <order_phases+0x1e0>
    }

	reset_foc(controller);
 8001476:	68b8      	ldr	r0, [r7, #8]
 8001478:	f001 fc62 	bl	8002d40 <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	617b      	str	r3, [r7, #20]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	edd3 7a06 	vldr	s15, [r3, #24]
 8001488:	ed97 7a05 	vldr	s14, [r7, #20]
 800148c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001490:	eef0 7ae7 	vabs.f32	s15, s15
 8001494:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001570 <order_phases+0x1fc>
 8001498:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800149c:	ee16 0a90 	vmov	r0, s13
 80014a0:	f7ff f872 	bl	8000588 <__aeabi_f2d>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	ec43 2b10 	vmov	d0, r2, r3
 80014ac:	f009 fde6 	bl	800b07c <round>
 80014b0:	ec53 2b10 	vmov	r2, r3, d0
 80014b4:	4610      	mov	r0, r2
 80014b6:	4619      	mov	r1, r3
 80014b8:	f7ff fb96 	bl	8000be8 <__aeabi_d2uiz>
 80014bc:	4603      	mov	r3, r0
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	701a      	strb	r2, [r3, #0]

	if(cal->theta_start < theta_end){
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	edd3 7a06 	vldr	s15, [r3, #24]
 80014ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80014ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d6:	dd07      	ble.n	80014e8 <order_phases+0x174>
		cal->phase_order = 0;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Phase order correct\r\n");
 80014e0:	4824      	ldr	r0, [pc, #144]	; (8001574 <order_phases+0x200>)
 80014e2:	f00a fe47 	bl	800c174 <puts>
 80014e6:	e006      	b.n	80014f6 <order_phases+0x182>
	}
	else{
		cal->phase_order = 1;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2201      	movs	r2, #1
 80014ec:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Swapping phase sign\r\n");
 80014f0:	4821      	ldr	r0, [pc, #132]	; (8001578 <order_phases+0x204>)
 80014f2:	f00a fe3f 	bl	800c174 <puts>
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	4619      	mov	r1, r3
 80014fc:	481f      	ldr	r0, [pc, #124]	; (800157c <order_phases+0x208>)
 80014fe:	f00a fdb3 	bl	800c068 <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff f83e 	bl	8000588 <__aeabi_f2d>
 800150c:	4604      	mov	r4, r0
 800150e:	460d      	mov	r5, r1
 8001510:	6978      	ldr	r0, [r7, #20]
 8001512:	f7ff f839 	bl	8000588 <__aeabi_f2d>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	e9cd 2300 	strd	r2, r3, [sp]
 800151e:	4622      	mov	r2, r4
 8001520:	462b      	mov	r3, r5
 8001522:	4817      	ldr	r0, [pc, #92]	; (8001580 <order_phases+0x20c>)
 8001524:	f00a fda0 	bl	800c068 <iprintf>
    PHASE_ORDER = cal->phase_order;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800152e:	461a      	mov	r2, r3
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <order_phases+0x1e8>)
 8001532:	601a      	str	r2, [r3, #0]
    PPAIRS = (float)cal->ppairs;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	ee07 3a90 	vmov	s15, r3
 800153c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <order_phases+0x1f4>)
 8001542:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    cal->started = 0;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	741a      	strb	r2, [r3, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bdb0      	pop	{r4, r5, r7, pc}
 800155a:	bf00      	nop
 800155c:	20008f64 	.word	0x20008f64
 8001560:	0800f960 	.word	0x0800f960
 8001564:	37d1b717 	.word	0x37d1b717
 8001568:	20000650 	.word	0x20000650
 800156c:	3fd06cbe 	.word	0x3fd06cbe
 8001570:	40c90fdb 	.word	0x40c90fdb
 8001574:	0800f984 	.word	0x0800f984
 8001578:	0800f99c 	.word	0x0800f99c
 800157c:	0800f9b4 	.word	0x0800f9b4
 8001580:	0800f9c8 	.word	0x0800f9c8

08001584 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001584:	b5b0      	push	{r4, r5, r7, lr}
 8001586:	b094      	sub	sp, #80	; 0x50
 8001588:	af02      	add	r7, sp, #8
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
 8001590:	603b      	str	r3, [r7, #0]
	/* Calibrates e-zero and encoder nonliearity */

	if(!cal->started){
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	7c1b      	ldrb	r3, [r3, #16]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10f      	bne.n	80015ba <calibrate_encoder+0x36>
			printf("Starting offset cal and linearization\r\n");
 800159a:	489e      	ldr	r0, [pc, #632]	; (8001814 <calibrate_encoder+0x290>)
 800159c:	f00a fdea 	bl	800c174 <puts>
			cal->started = 1;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	741a      	strb	r2, [r3, #16]
			cal->start_count = loop_count;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	60da      	str	r2, [r3, #12]
			cal->next_sample_time = T1;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
			cal->sample_count = 0;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	849a      	strh	r2, [r3, #36]	; 0x24
		}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	ee07 3a90 	vmov	s15, r3
 80015c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ca:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001818 <calibrate_encoder+0x294>
 80015ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	edd3 7a05 	vldr	s15, [r3, #20]
 80015de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ea:	d525      	bpl.n	8001638 <calibrate_encoder+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80015fe:	3388      	adds	r3, #136	; 0x88
 8001600:	601a      	str	r2, [r3, #0]
        controller->i_d_des = I_CAL;
 8001602:	4b86      	ldr	r3, [pc, #536]	; (800181c <calibrate_encoder+0x298>)
 8001604:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        controller->i_q_des = 0.0f;
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        commutate(controller, &cal->cal_position);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800161c:	332c      	adds	r3, #44	; 0x2c
 800161e:	4619      	mov	r1, r3
 8001620:	68b8      	ldr	r0, [r7, #8]
 8001622:	f001 fca7 	bl	8002f74 <commutate>

    	cal->theta_start = encoder->angle_multiturn[0];
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	68da      	ldr	r2, [r3, #12]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	619a      	str	r2, [r3, #24]
    	cal->next_sample_time = cal->time;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	695a      	ldr	r2, [r3, #20]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 8001636:	e259      	b.n	8001aec <calibrate_encoder+0x568>
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	ed93 7a05 	vldr	s14, [r3, #20]
 800163e:	4b77      	ldr	r3, [pc, #476]	; (800181c <calibrate_encoder+0x298>)
 8001640:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001644:	eddf 6a76 	vldr	s13, [pc, #472]	; 8001820 <calibrate_encoder+0x29c>
 8001648:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800164c:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8001650:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001654:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001658:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800165c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001664:	f140 808f 	bpl.w	8001786 <calibrate_encoder+0x202>
    	// rotate voltage vector through one mechanical rotation in the positive direction
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	edd3 7a02 	vldr	s15, [r3, #8]
 800166e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001824 <calibrate_encoder+0x2a0>
 8001672:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	edc3 7a02 	vstr	s15, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001686:	3388      	adds	r3, #136	; 0x88
 8001688:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001690:	332c      	adds	r3, #44	; 0x2c
 8001692:	4619      	mov	r1, r3
 8001694:	68b8      	ldr	r0, [r7, #8]
 8001696:	f001 fc6d 	bl	8002f74 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if(cal->time > cal->next_sample_time){
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	ed93 7a05 	vldr	s14, [r3, #20]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ae:	dc00      	bgt.n	80016b2 <calibrate_encoder+0x12e>
				return;
			}
			cal->sample_count++;

		}
		return;
 80016b0:	e21c      	b.n	8001aec <calibrate_encoder+0x568>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80016b8:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001838 <calibrate_encoder+0x2b4>
 80016bc:	ee67 6a87 	vmul.f32	s13, s15, s14
 80016c0:	4b56      	ldr	r3, [pc, #344]	; (800181c <calibrate_encoder+0x298>)
 80016c2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016c6:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001820 <calibrate_encoder+0x29c>
 80016ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d6:	ee17 3a90 	vmov	r3, s15
 80016da:	61bb      	str	r3, [r7, #24]
			int error = encoder->raw - count_ref;//- encoder->raw;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	617b      	str	r3, [r7, #20]
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	13db      	asrs	r3, r3, #15
 80016ea:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80016f2:	4618      	mov	r0, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	441a      	add	r2, r3
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	f100 030a 	add.w	r3, r0, #10
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	605a      	str	r2, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001708:	461d      	mov	r5, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	330a      	adds	r3, #10
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	685c      	ldr	r4, [r3, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe ff33 	bl	8000588 <__aeabi_f2d>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	e9cd 2300 	strd	r2, r3, [sp]
 800172a:	4623      	mov	r3, r4
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4629      	mov	r1, r5
 8001730:	483d      	ldr	r0, [pc, #244]	; (8001828 <calibrate_encoder+0x2a4>)
 8001732:	f00a fc99 	bl	800c068 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800173c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800182c <calibrate_encoder+0x2a8>
 8001740:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800174e:	ee07 3a90 	vmov	s15, r3
 8001752:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001756:	4b31      	ldr	r3, [pc, #196]	; (800181c <calibrate_encoder+0x298>)
 8001758:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800175c:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001830 <calibrate_encoder+0x2ac>
 8001760:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001764:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001768:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800176c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001774:	f000 81b7 	beq.w	8001ae6 <calibrate_encoder+0x562>
			cal->sample_count++;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800177c:	3301      	adds	r3, #1
 800177e:	b29a      	uxth	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	849a      	strh	r2, [r3, #36]	; 0x24
		return;
 8001784:	e1b2      	b.n	8001aec <calibrate_encoder+0x568>
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	ed93 7a05 	vldr	s14, [r3, #20]
 800178c:	4b23      	ldr	r3, [pc, #140]	; (800181c <calibrate_encoder+0x298>)
 800178e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001792:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001834 <calibrate_encoder+0x2b0>
 8001796:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800179a:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800179e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80017a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80017aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b2:	f140 80a9 	bpl.w	8001908 <calibrate_encoder+0x384>
		// rotate voltage vector through one mechanical rotation in the negative direction
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80017bc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001824 <calibrate_encoder+0x2a0>
 80017c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	edc3 7a02 	vstr	s15, [r3, #8]
		controller->i_d_des = I_CAL;
 80017ca:	4b14      	ldr	r3, [pc, #80]	; (800181c <calibrate_encoder+0x298>)
 80017cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		controller->i_q_des = 0.0f;
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		cal->cal_position.elec_angle = cal->theta_ref;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80017e8:	3388      	adds	r3, #136	; 0x88
 80017ea:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80017f2:	332c      	adds	r3, #44	; 0x2c
 80017f4:	4619      	mov	r1, r3
 80017f6:	68b8      	ldr	r0, [r7, #8]
 80017f8:	f001 fbbc 	bl	8002f74 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	ed93 7a05 	vldr	s14, [r3, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001808:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800180c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001810:	dc14      	bgt.n	800183c <calibrate_encoder+0x2b8>
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
			cal->sample_count--;
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
 8001812:	e16a      	b.n	8001aea <calibrate_encoder+0x566>
 8001814:	0800f9e4 	.word	0x0800f9e4
 8001818:	37d1b717 	.word	0x37d1b717
 800181c:	20000650 	.word	0x20000650
 8001820:	40c90fdb 	.word	0x40c90fdb
 8001824:	3983126e 	.word	0x3983126e
 8001828:	0800fa0c 	.word	0x0800fa0c
 800182c:	3ba0d97c 	.word	0x3ba0d97c
 8001830:	43000000 	.word	0x43000000
 8001834:	41490fdb 	.word	0x41490fdb
 8001838:	47800000 	.word	0x47800000
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 8152 	beq.w	8001aea <calibrate_encoder+0x566>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	edd3 7a02 	vldr	s15, [r3, #8]
 800184c:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8001838 <calibrate_encoder+0x2b4>
 8001850:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001854:	4ba7      	ldr	r3, [pc, #668]	; (8001af4 <calibrate_encoder+0x570>)
 8001856:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800185a:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8001af8 <calibrate_encoder+0x574>
 800185e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001866:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800186a:	ee17 3a90 	vmov	r3, s15
 800186e:	623b      	str	r3, [r7, #32]
			int error = encoder->raw - count_ref;// - encoder->raw;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001874:	6a3b      	ldr	r3, [r7, #32]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	61fb      	str	r3, [r7, #28]
			error = error + ENC_CPR*(error<0);
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	13db      	asrs	r3, r3, #15
 800187e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	4413      	add	r3, r2
 8001886:	61fb      	str	r3, [r7, #28]
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	330a      	adds	r3, #10
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	4413      	add	r3, r2
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800189e:	4610      	mov	r0, r2
 80018a0:	0fda      	lsrs	r2, r3, #31
 80018a2:	4413      	add	r3, r2
 80018a4:	105b      	asrs	r3, r3, #1
 80018a6:	4619      	mov	r1, r3
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	f100 030a 	add.w	r3, r0, #10
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	6059      	str	r1, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018b8:	461d      	mov	r5, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	330a      	adds	r3, #10
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	685c      	ldr	r4, [r3, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fe5b 	bl	8000588 <__aeabi_f2d>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	e9cd 2300 	strd	r2, r3, [sp]
 80018da:	4623      	mov	r3, r4
 80018dc:	6a3a      	ldr	r2, [r7, #32]
 80018de:	4629      	mov	r1, r5
 80018e0:	4886      	ldr	r0, [pc, #536]	; (8001afc <calibrate_encoder+0x578>)
 80018e2:	f00a fbc1 	bl	800c068 <iprintf>
			cal->sample_count--;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018ea:	3b01      	subs	r3, #1
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	849a      	strh	r2, [r3, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80018f8:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001b00 <calibrate_encoder+0x57c>
 80018fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		return;
 8001906:	e0f0      	b.n	8001aea <calibrate_encoder+0x566>
    }

    reset_foc(controller);
 8001908:	68b8      	ldr	r0, [r7, #8]
 800190a:	f001 fa19 	bl	8002d40 <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8001912:	2300      	movs	r3, #0
 8001914:	643b      	str	r3, [r7, #64]	; 0x40
 8001916:	e00b      	b.n	8001930 <calibrate_encoder+0x3ac>
		ezero_mean += cal->error_arr[i];
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800191c:	330a      	adds	r3, #10
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001926:	4413      	add	r3, r2
 8001928:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 800192a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800192c:	3301      	adds	r3, #1
 800192e:	643b      	str	r3, [r7, #64]	; 0x40
 8001930:	4b70      	ldr	r3, [pc, #448]	; (8001af4 <calibrate_encoder+0x570>)
 8001932:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001936:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800193a:	ee17 3a90 	vmov	r3, s15
 800193e:	01db      	lsls	r3, r3, #7
 8001940:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001942:	429a      	cmp	r2, r3
 8001944:	dbe8      	blt.n	8001918 <calibrate_encoder+0x394>
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 8001946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001948:	ee07 3a90 	vmov	s15, r3
 800194c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001950:	4b68      	ldr	r3, [pc, #416]	; (8001af4 <calibrate_encoder+0x570>)
 8001952:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001956:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001b04 <calibrate_encoder+0x580>
 800195a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800195e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001962:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001966:	ee17 2a90 	vmov	r2, s15
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	61da      	str	r2, [r3, #28]

	// Moving average to filter out cogging ripple

	int window = SAMPLES_PER_PPAIR;
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
	int lut_offset = (ENC_CPR-cal->error_arr[0])*N_LUT/ENC_CPR;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001976:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 800197a:	2b00      	cmp	r3, #0
 800197c:	da01      	bge.n	8001982 <calibrate_encoder+0x3fe>
 800197e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001982:	125b      	asrs	r3, r3, #9
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i<N_LUT; i++){
 8001986:	2300      	movs	r3, #0
 8001988:	63fb      	str	r3, [r7, #60]	; 0x3c
 800198a:	e0a0      	b.n	8001ace <calibrate_encoder+0x54a>
			int moving_avg = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001992:	0fda      	lsrs	r2, r3, #31
 8001994:	4413      	add	r3, r2
 8001996:	105b      	asrs	r3, r3, #1
 8001998:	425b      	negs	r3, r3
 800199a:	637b      	str	r3, [r7, #52]	; 0x34
 800199c:	e068      	b.n	8001a70 <calibrate_encoder+0x4ec>
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 800199e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019a0:	ee07 3a90 	vmov	s15, r3
 80019a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a8:	4b52      	ldr	r3, [pc, #328]	; (8001af4 <calibrate_encoder+0x570>)
 80019aa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b2:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001b04 <calibrate_encoder+0x580>
 80019b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ba:	eddf 6a52 	vldr	s13, [pc, #328]	; 8001b04 <calibrate_encoder+0x580>
 80019be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c4:	ee07 3a90 	vmov	s15, r3
 80019c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019d4:	ee17 3a90 	vmov	r3, s15
 80019d8:	633b      	str	r3, [r7, #48]	; 0x30
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 80019da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019dc:	2b00      	cmp	r3, #0
 80019de:	da13      	bge.n	8001a08 <calibrate_encoder+0x484>
 80019e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e2:	ee07 3a90 	vmov	s15, r3
 80019e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ea:	4b42      	ldr	r3, [pc, #264]	; (8001af4 <calibrate_encoder+0x570>)
 80019ec:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019f0:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001b04 <calibrate_encoder+0x580>
 80019f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a00:	ee17 3a90 	vmov	r3, s15
 8001a04:	633b      	str	r3, [r7, #48]	; 0x30
 8001a06:	e027      	b.n	8001a58 <calibrate_encoder+0x4d4>
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a0a:	ee07 3a90 	vmov	s15, r3
 8001a0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a12:	4b38      	ldr	r3, [pc, #224]	; (8001af4 <calibrate_encoder+0x570>)
 8001a14:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a18:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001b04 <calibrate_encoder+0x580>
 8001a1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a24:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001a28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a30:	dd12      	ble.n	8001a58 <calibrate_encoder+0x4d4>
 8001a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a34:	ee07 3a90 	vmov	s15, r3
 8001a38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a3c:	4b2d      	ldr	r3, [pc, #180]	; (8001af4 <calibrate_encoder+0x570>)
 8001a3e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a42:	eddf 6a30 	vldr	s13, [pc, #192]	; 8001b04 <calibrate_encoder+0x580>
 8001a46:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a52:	ee17 3a90 	vmov	r3, s15
 8001a56:	633b      	str	r3, [r7, #48]	; 0x30
				moving_avg += cal->error_arr[index];
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5c:	330a      	adds	r3, #10
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a66:	4413      	add	r3, r2
 8001a68:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8001a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a72:	0fda      	lsrs	r2, r3, #31
 8001a74:	4413      	add	r3, r2
 8001a76:	105b      	asrs	r3, r3, #1
 8001a78:	461a      	mov	r2, r3
 8001a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	db8e      	blt.n	800199e <calibrate_encoder+0x41a>
			}
			moving_avg = moving_avg/window;
 8001a80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a84:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a88:	63bb      	str	r3, [r7, #56]	; 0x38
			int lut_index = lut_offset + i;
 8001a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a8e:	4413      	add	r3, r2
 8001a90:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8001a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a94:	2b7f      	cmp	r3, #127	; 0x7f
 8001a96:	dd02      	ble.n	8001a9e <calibrate_encoder+0x51a>
 8001a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a9a:	3b80      	subs	r3, #128	; 0x80
 8001a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001aa4:	1ad2      	subs	r2, r2, r3
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aaa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001aae:	330a      	adds	r3, #10
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ac2:	4811      	ldr	r0, [pc, #68]	; (8001b08 <calibrate_encoder+0x584>)
 8001ac4:	f00a fad0 	bl	800c068 <iprintf>
	for(int i = 0; i<N_LUT; i++){
 8001ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aca:	3301      	adds	r3, #1
 8001acc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ad0:	2b7f      	cmp	r3, #127	; 0x7f
 8001ad2:	f77f af5b 	ble.w	800198c <calibrate_encoder+0x408>

		}

	cal->started = 0;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	741a      	strb	r2, [r3, #16]
	cal->done_cal = 1;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001ae4:	e002      	b.n	8001aec <calibrate_encoder+0x568>
				return;
 8001ae6:	bf00      	nop
 8001ae8:	e000      	b.n	8001aec <calibrate_encoder+0x568>
		return;
 8001aea:	bf00      	nop
}
 8001aec:	3748      	adds	r7, #72	; 0x48
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bdb0      	pop	{r4, r5, r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000650 	.word	0x20000650
 8001af8:	40c90fdb 	.word	0x40c90fdb
 8001afc:	0800fa0c 	.word	0x0800fa0c
 8001b00:	3ba0d97c 	.word	0x3ba0d97c
 8001b04:	43000000 	.word	0x43000000
 8001b08:	0800fa1c 	.word	0x0800fa1c

08001b0c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <MX_CAN1_Init+0x64>)
 8001b12:	4a18      	ldr	r2, [pc, #96]	; (8001b74 <MX_CAN1_Init+0x68>)
 8001b14:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <MX_CAN1_Init+0x64>)
 8001b18:	2203      	movs	r2, #3
 8001b1a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <MX_CAN1_Init+0x64>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <MX_CAN1_Init+0x64>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <MX_CAN1_Init+0x64>)
 8001b2a:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8001b2e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <MX_CAN1_Init+0x64>)
 8001b32:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b36:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001b38:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <MX_CAN1_Init+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <MX_CAN1_Init+0x64>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <MX_CAN1_Init+0x64>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <MX_CAN1_Init+0x64>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <MX_CAN1_Init+0x64>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <MX_CAN1_Init+0x64>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001b5c:	4804      	ldr	r0, [pc, #16]	; (8001b70 <MX_CAN1_Init+0x64>)
 8001b5e:	f005 f94d 	bl	8006dfc <HAL_CAN_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001b68:	f003 f862 	bl	8004c30 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000320 	.word	0x20000320
 8001b74:	40006400 	.word	0x40006400

08001b78 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	; 0x28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a1d      	ldr	r2, [pc, #116]	; (8001c0c <HAL_CAN_MspInit+0x94>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d134      	bne.n	8001c04 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <HAL_CAN_MspInit+0x98>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	4a1b      	ldr	r2, [pc, #108]	; (8001c10 <HAL_CAN_MspInit+0x98>)
 8001ba4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8001baa:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <HAL_CAN_MspInit+0x98>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <HAL_CAN_MspInit+0x98>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a14      	ldr	r2, [pc, #80]	; (8001c10 <HAL_CAN_MspInit+0x98>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_CAN_MspInit+0x98>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be0:	2303      	movs	r3, #3
 8001be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001be4:	2309      	movs	r3, #9
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	4809      	ldr	r0, [pc, #36]	; (8001c14 <HAL_CAN_MspInit+0x9c>)
 8001bf0:	f006 f8ee 	bl	8007dd0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	2014      	movs	r0, #20
 8001bfa:	f006 f820 	bl	8007c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001bfe:	2014      	movs	r0, #20
 8001c00:	f006 f839 	bl	8007c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001c04:	bf00      	nop
 8001c06:	3728      	adds	r7, #40	; 0x28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40006400 	.word	0x40006400
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020400 	.word	0x40020400

08001c18 <can_rx_init>:
  }
}

/* USER CODE BEGIN 1 */

void can_rx_init(CANRxMessage *msg){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	msg->filter.FilterFIFOAssignment=CAN_FILTER_FIFO0; 	// set fifo assignment
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	639a      	str	r2, [r3, #56]	; 0x38
	msg->filter.FilterIdHigh=CAN_ID<<5; 				// CAN ID
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <can_rx_init+0x54>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	015b      	lsls	r3, r3, #5
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	629a      	str	r2, [r3, #40]	; 0x28
	msg->filter.FilterIdLow=0x0;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	62da      	str	r2, [r3, #44]	; 0x2c
	msg->filter.FilterMaskIdHigh=0xFFF;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001c3e:	631a      	str	r2, [r3, #48]	; 0x30
	msg->filter.FilterMaskIdLow=0;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	635a      	str	r2, [r3, #52]	; 0x34
	msg->filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	641a      	str	r2, [r3, #64]	; 0x40
	msg->filter.FilterScale=CAN_FILTERSCALE_32BIT;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	645a      	str	r2, [r3, #68]	; 0x44
	msg->filter.FilterActivation=ENABLE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	649a      	str	r2, [r3, #72]	; 0x48
	HAL_CAN_ConfigFilter(&CAN_H, &msg->filter);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3328      	adds	r3, #40	; 0x28
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4804      	ldr	r0, [pc, #16]	; (8001c70 <can_rx_init+0x58>)
 8001c60:	f005 f9c8 	bl	8006ff4 <HAL_CAN_ConfigFilter>
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20008f64 	.word	0x20008f64
 8001c70:	20000320 	.word	0x20000320

08001c74 <can_tx_init>:

void can_tx_init(CANTxMessage *msg){
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	msg->tx_header.DLC = 7; 			// message size of 7 byte
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2207      	movs	r2, #7
 8001c80:	619a      	str	r2, [r3, #24]
	msg->tx_header.IDE=CAN_ID_STD; 		// set identifier to standard
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
	msg->tx_header.RTR=CAN_RTR_DATA; 	// set data type to remote transmission request?
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	615a      	str	r2, [r3, #20]
	msg->tx_header.StdId = CAN_MASTER;  // recipient CAN ID
 8001c8e:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <can_tx_init+0x30>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	461a      	mov	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	609a      	str	r2, [r3, #8]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	20008f64 	.word	0x20008f64

08001ca8 <pack_reply>:
/// 0: [position[15-8]]
/// 1: [position[7-0]]
/// 2: [velocity[11-4]]
/// 3: [velocity[3-0], current[11-8]]
/// 4: [current[7-0]]
void pack_reply(CANTxMessage *msg, uint8_t id, float p, float v, float t, float vb){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	; 0x28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6178      	str	r0, [r7, #20]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	ed87 0a03 	vstr	s0, [r7, #12]
 8001cb6:	edc7 0a02 	vstr	s1, [r7, #8]
 8001cba:	ed87 1a01 	vstr	s2, [r7, #4]
 8001cbe:	edc7 1a00 	vstr	s3, [r7]
 8001cc2:	74fb      	strb	r3, [r7, #19]
    int p_int = float_to_uint(p, P_MIN, P_MAX, 16);
 8001cc4:	4b3f      	ldr	r3, [pc, #252]	; (8001dc4 <pack_reply+0x11c>)
 8001cc6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001cca:	4b3e      	ldr	r3, [pc, #248]	; (8001dc4 <pack_reply+0x11c>)
 8001ccc:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8001cd0:	2010      	movs	r0, #16
 8001cd2:	eeb0 1a47 	vmov.f32	s2, s14
 8001cd6:	eef0 0a67 	vmov.f32	s1, s15
 8001cda:	ed97 0a03 	vldr	s0, [r7, #12]
 8001cde:	f003 f897 	bl	8004e10 <float_to_uint>
 8001ce2:	6278      	str	r0, [r7, #36]	; 0x24
    int v_int = float_to_uint(v, V_MIN, V_MAX, 12);
 8001ce4:	4b37      	ldr	r3, [pc, #220]	; (8001dc4 <pack_reply+0x11c>)
 8001ce6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001cea:	4b36      	ldr	r3, [pc, #216]	; (8001dc4 <pack_reply+0x11c>)
 8001cec:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001cf0:	200c      	movs	r0, #12
 8001cf2:	eeb0 1a47 	vmov.f32	s2, s14
 8001cf6:	eef0 0a67 	vmov.f32	s1, s15
 8001cfa:	ed97 0a02 	vldr	s0, [r7, #8]
 8001cfe:	f003 f887 	bl	8004e10 <float_to_uint>
 8001d02:	6238      	str	r0, [r7, #32]
    int t_int = float_to_uint(t, -(I_MAX+SENSE_BUFFER)*KT*GR, (I_MAX+SENSE_BUFFER)*KT*GR, 12);
 8001d04:	4b2f      	ldr	r3, [pc, #188]	; (8001dc4 <pack_reply+0x11c>)
 8001d06:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d0a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001dc8 <pack_reply+0x120>
 8001d0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d12:	eeb1 7a67 	vneg.f32	s14, s15
 8001d16:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <pack_reply+0x11c>)
 8001d18:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001d1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d20:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <pack_reply+0x11c>)
 8001d22:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001d26:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001d2a:	4b26      	ldr	r3, [pc, #152]	; (8001dc4 <pack_reply+0x11c>)
 8001d2c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d30:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001dc8 <pack_reply+0x120>
 8001d34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001d38:	4b22      	ldr	r3, [pc, #136]	; (8001dc4 <pack_reply+0x11c>)
 8001d3a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001d3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d42:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <pack_reply+0x11c>)
 8001d44:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d4c:	200c      	movs	r0, #12
 8001d4e:	eeb0 1a67 	vmov.f32	s2, s15
 8001d52:	eef0 0a66 	vmov.f32	s1, s13
 8001d56:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d5a:	f003 f859 	bl	8004e10 <float_to_uint>
 8001d5e:	61f8      	str	r0, [r7, #28]
    int vb_int = float_to_uint(vb, VB_MIN, VB_MAX, 8);
 8001d60:	2008      	movs	r0, #8
 8001d62:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 8001dcc <pack_reply+0x124>
 8001d66:	eddf 0a18 	vldr	s1, [pc, #96]	; 8001dc8 <pack_reply+0x120>
 8001d6a:	ed97 0a00 	vldr	s0, [r7]
 8001d6e:	f003 f84f 	bl	8004e10 <float_to_uint>
 8001d72:	61b8      	str	r0, [r7, #24]
    msg->data[0] = id;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	7cfa      	ldrb	r2, [r7, #19]
 8001d78:	705a      	strb	r2, [r3, #1]
    msg->data[1] = p_int>>8;
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	121b      	asrs	r3, r3, #8
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	709a      	strb	r2, [r3, #2]
    msg->data[2] = p_int&0xFF;
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	70da      	strb	r2, [r3, #3]
    msg->data[3] = v_int>>4;
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
 8001d8e:	111b      	asrs	r3, r3, #4
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	711a      	strb	r2, [r3, #4]
    msg->data[4] = ((v_int&0xF)<<4) + (t_int>>8);
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	011b      	lsls	r3, r3, #4
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	121b      	asrs	r3, r3, #8
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	4413      	add	r3, r2
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	715a      	strb	r2, [r3, #5]
    msg->data[5] = t_int&0xFF;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	719a      	strb	r2, [r3, #6]
    msg->data[6] = vb_int;
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	71da      	strb	r2, [r3, #7]
    }
 8001dba:	bf00      	nop
 8001dbc:	3728      	adds	r7, #40	; 0x28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000650 	.word	0x20000650
 8001dc8:	00000000 	.word	0x00000000
 8001dcc:	42200000 	.word	0x42200000

08001dd0 <unpack_cmd>:
/// 3: [velocity[3-0], kp[11-8]]
/// 4: [kp[7-0]]
/// 5: [kd[11-4]]
/// 6: [kd[3-0], torque[11-8]]
/// 7: [torque[7-0]]
void unpack_cmd(CANRxMessage msg, float *commands){// ControllerStruct * controller){
 8001dd0:	b084      	sub	sp, #16
 8001dd2:	b590      	push	{r4, r7, lr}
 8001dd4:	b087      	sub	sp, #28
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001ddc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        int p_int = (msg.data[0]<<8)|msg.data[1];
 8001de0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001de4:	021b      	lsls	r3, r3, #8
 8001de6:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001dea:	4313      	orrs	r3, r2
 8001dec:	617b      	str	r3, [r7, #20]
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 8001dee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001df8:	0912      	lsrs	r2, r2, #4
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8001e00:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e04:	021b      	lsls	r3, r3, #8
 8001e06:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001e0a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 8001e12:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001e16:	011b      	lsls	r3, r3, #4
 8001e18:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001e1c:	0912      	lsrs	r2, r2, #4
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	4313      	orrs	r3, r2
 8001e22:	60bb      	str	r3, [r7, #8]
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8001e24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e28:	021b      	lsls	r3, r3, #8
 8001e2a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001e2e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001e32:	4313      	orrs	r3, r2
 8001e34:	607b      	str	r3, [r7, #4]

        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001e36:	4b3e      	ldr	r3, [pc, #248]	; (8001f30 <unpack_cmd+0x160>)
 8001e38:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001e3c:	4b3c      	ldr	r3, [pc, #240]	; (8001f30 <unpack_cmd+0x160>)
 8001e3e:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8001e42:	2110      	movs	r1, #16
 8001e44:	eef0 0a47 	vmov.f32	s1, s14
 8001e48:	eeb0 0a67 	vmov.f32	s0, s15
 8001e4c:	6978      	ldr	r0, [r7, #20]
 8001e4e:	f003 f812 	bl	8004e76 <uint_to_float>
 8001e52:	eef0 7a40 	vmov.f32	s15, s0
 8001e56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e58:	edc3 7a00 	vstr	s15, [r3]
        commands[1] = uint_to_float(v_int, V_MIN, V_MAX, 12);
 8001e5c:	4b34      	ldr	r3, [pc, #208]	; (8001f30 <unpack_cmd+0x160>)
 8001e5e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001e62:	4b33      	ldr	r3, [pc, #204]	; (8001f30 <unpack_cmd+0x160>)
 8001e64:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001e68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e6a:	1d1c      	adds	r4, r3, #4
 8001e6c:	210c      	movs	r1, #12
 8001e6e:	eef0 0a47 	vmov.f32	s1, s14
 8001e72:	eeb0 0a67 	vmov.f32	s0, s15
 8001e76:	6938      	ldr	r0, [r7, #16]
 8001e78:	f002 fffd 	bl	8004e76 <uint_to_float>
 8001e7c:	eef0 7a40 	vmov.f32	s15, s0
 8001e80:	edc4 7a00 	vstr	s15, [r4]
        commands[2] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 8001e84:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <unpack_cmd+0x160>)
 8001e86:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001e8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e8c:	f103 0408 	add.w	r4, r3, #8
 8001e90:	210c      	movs	r1, #12
 8001e92:	eef0 0a67 	vmov.f32	s1, s15
 8001e96:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8001f34 <unpack_cmd+0x164>
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f002 ffeb 	bl	8004e76 <uint_to_float>
 8001ea0:	eef0 7a40 	vmov.f32	s15, s0
 8001ea4:	edc4 7a00 	vstr	s15, [r4]
        commands[3] = uint_to_float(kd_int, KD_MIN, KD_MAX, 12);
 8001ea8:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <unpack_cmd+0x160>)
 8001eaa:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001eae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eb0:	f103 040c 	add.w	r4, r3, #12
 8001eb4:	210c      	movs	r1, #12
 8001eb6:	eef0 0a67 	vmov.f32	s1, s15
 8001eba:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8001f34 <unpack_cmd+0x164>
 8001ebe:	68b8      	ldr	r0, [r7, #8]
 8001ec0:	f002 ffd9 	bl	8004e76 <uint_to_float>
 8001ec4:	eef0 7a40 	vmov.f32	s15, s0
 8001ec8:	edc4 7a00 	vstr	s15, [r4]
        commands[4] = uint_to_float(t_int, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 8001ecc:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <unpack_cmd+0x160>)
 8001ece:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ed2:	eeb1 7a67 	vneg.f32	s14, s15
 8001ed6:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <unpack_cmd+0x160>)
 8001ed8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001edc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ee0:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <unpack_cmd+0x160>)
 8001ee2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001ee6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001eea:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <unpack_cmd+0x160>)
 8001eec:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <unpack_cmd+0x160>)
 8001ef2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001ef6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <unpack_cmd+0x160>)
 8001efc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f06:	f103 0410 	add.w	r4, r3, #16
 8001f0a:	210c      	movs	r1, #12
 8001f0c:	eef0 0a67 	vmov.f32	s1, s15
 8001f10:	eeb0 0a66 	vmov.f32	s0, s13
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f002 ffae 	bl	8004e76 <uint_to_float>
 8001f1a:	eef0 7a40 	vmov.f32	s15, s0
 8001f1e:	edc4 7a00 	vstr	s15, [r4]
    //printf("Received   ");
    //printf("%.3f  %.3f  %.3f  %.3f  %.3f   %.3f", controller->p_des, controller->v_des, controller->kp, controller->kd, controller->t_ff, controller->i_q_ref);
    //printf("\n\r");
    }
 8001f22:	bf00      	nop
 8001f24:	371c      	adds	r7, #28
 8001f26:	46bd      	mov	sp, r7
 8001f28:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001f2c:	b004      	add	sp, #16
 8001f2e:	4770      	bx	lr
 8001f30:	20000650 	.word	0x20000650
 8001f34:	00000000 	.word	0x00000000

08001f38 <drv_spi_write>:
#include "drv8323.h"
#include <stdio.h>
#include "usart.h"
#include "hw_config.h"

uint16_t drv_spi_write(DRVStruct * drv, uint16_t val){
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af02      	add	r7, sp, #8
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	807b      	strh	r3, [r7, #2]
	drv->spi_tx_word = val;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	887a      	ldrh	r2, [r7, #2]
 8001f48:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2110      	movs	r1, #16
 8001f4e:	480f      	ldr	r0, [pc, #60]	; (8001f8c <drv_spi_write+0x54>)
 8001f50:	f006 f8d2 	bl	80080f8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	1c9a      	adds	r2, r3, #2
 8001f5a:	2364      	movs	r3, #100	; 0x64
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	2301      	movs	r3, #1
 8001f60:	480b      	ldr	r0, [pc, #44]	; (8001f90 <drv_spi_write+0x58>)
 8001f62:	f006 ff26 	bl	8008db2 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001f66:	bf00      	nop
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <drv_spi_write+0x58>)
 8001f6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d0f9      	beq.n	8001f68 <drv_spi_write+0x30>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001f74:	2201      	movs	r2, #1
 8001f76:	2110      	movs	r1, #16
 8001f78:	4804      	ldr	r0, [pc, #16]	; (8001f8c <drv_spi_write+0x54>)
 8001f7a:	f006 f8bd 	bl	80080f8 <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	885b      	ldrh	r3, [r3, #2]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40020000 	.word	0x40020000
 8001f90:	20009460 	.word	0x20009460

08001f94 <drv_read_FSR1>:
uint16_t drv_read_FSR1(DRVStruct drv){
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	463b      	mov	r3, r7
 8001f9c:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR1);
 8001fa0:	463b      	mov	r3, r7
 8001fa2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff ffc6 	bl	8001f38 <drv_spi_write>
 8001fac:	4603      	mov	r3, r0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <drv_read_FSR2>:

uint16_t drv_read_FSR2(DRVStruct drv){
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR2);
 8001fc2:	463b      	mov	r3, r7
 8001fc4:	f248 0101 	movw	r1, #32769	; 0x8001
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ffb5 	bl	8001f38 <drv_spi_write>
 8001fce:	4603      	mov	r3, r0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <drv_read_register>:

uint16_t drv_read_register(DRVStruct drv, int reg){
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	f107 0308 	add.w	r3, r7, #8
 8001fe2:	e883 0003 	stmia.w	r3, {r0, r1}
 8001fe6:	607a      	str	r2, [r7, #4]
	return drv_spi_write(&drv, (1<<15)|(reg<<11));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	02db      	lsls	r3, r3, #11
 8001fec:	b21b      	sxth	r3, r3
 8001fee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ff2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ff6:	b21b      	sxth	r3, r3
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	f107 0308 	add.w	r3, r7, #8
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff99 	bl	8001f38 <drv_spi_write>
 8002006:	4603      	mov	r3, r0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <drv_write_register>:
void drv_write_register(DRVStruct drv, int reg, int val){
 8002010:	b590      	push	{r4, r7, lr}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	f107 0408 	add.w	r4, r7, #8
 800201a:	e884 0003 	stmia.w	r4, {r0, r1}
 800201e:	607a      	str	r2, [r7, #4]
 8002020:	603b      	str	r3, [r7, #0]
	drv_spi_write(&drv, (reg<<11)|val);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	02db      	lsls	r3, r3, #11
 8002026:	b21a      	sxth	r2, r3
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	b21b      	sxth	r3, r3
 800202c:	4313      	orrs	r3, r2
 800202e:	b21b      	sxth	r3, r3
 8002030:	b29a      	uxth	r2, r3
 8002032:	f107 0308 	add.w	r3, r7, #8
 8002036:	4611      	mov	r1, r2
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff ff7d 	bl	8001f38 <drv_spi_write>
}
 800203e:	bf00      	nop
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	bd90      	pop	{r4, r7, pc}

08002046 <drv_write_DCR>:
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 8002046:	b590      	push	{r4, r7, lr}
 8002048:	b087      	sub	sp, #28
 800204a:	af00      	add	r7, sp, #0
 800204c:	f107 0408 	add.w	r4, r7, #8
 8002050:	e884 0003 	stmia.w	r4, {r0, r1}
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	603b      	str	r3, [r7, #0]
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	025b      	lsls	r3, r3, #9
 800205c:	b21b      	sxth	r3, r3
 800205e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002062:	b21a      	sxth	r2, r3
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	b21b      	sxth	r3, r3
 800206a:	4313      	orrs	r3, r2
 800206c:	b21a      	sxth	r2, r3
 800206e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002070:	01db      	lsls	r3, r3, #7
 8002072:	b21b      	sxth	r3, r3
 8002074:	4313      	orrs	r3, r2
 8002076:	b21a      	sxth	r2, r3
 8002078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800207a:	015b      	lsls	r3, r3, #5
 800207c:	b21b      	sxth	r3, r3
 800207e:	4313      	orrs	r3, r2
 8002080:	b21a      	sxth	r2, r3
 8002082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002084:	011b      	lsls	r3, r3, #4
 8002086:	b21b      	sxth	r3, r3
 8002088:	4313      	orrs	r3, r2
 800208a:	b21a      	sxth	r2, r3
 800208c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	b21b      	sxth	r3, r3
 8002092:	4313      	orrs	r3, r2
 8002094:	b21a      	sxth	r2, r3
 8002096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	b21b      	sxth	r3, r3
 800209c:	4313      	orrs	r3, r2
 800209e:	b21a      	sxth	r2, r3
 80020a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	4313      	orrs	r3, r2
 80020a8:	b21a      	sxth	r2, r3
 80020aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020ac:	b21b      	sxth	r3, r3
 80020ae:	4313      	orrs	r3, r2
 80020b0:	b21b      	sxth	r3, r3
 80020b2:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 80020b4:	8afa      	ldrh	r2, [r7, #22]
 80020b6:	f107 0308 	add.w	r3, r7, #8
 80020ba:	4611      	mov	r1, r2
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ff3b 	bl	8001f38 <drv_spi_write>
}
 80020c2:	bf00      	nop
 80020c4:	371c      	adds	r7, #28
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd90      	pop	{r4, r7, pc}

080020ca <drv_write_OCPCR>:
}
void drv_write_LSR(DRVStruct drv, int CBC, int TDRIVE, int IDRIVEP_LS, int IDRIVEN_LS){
	uint16_t val = (LSR<<11) | (CBC<<10) | (TDRIVE<<8) | (IDRIVEP_LS<<4) | IDRIVEN_LS;
	drv_spi_write(&drv, val);
}
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 80020ca:	b590      	push	{r4, r7, lr}
 80020cc:	b087      	sub	sp, #28
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	f107 0408 	add.w	r4, r7, #8
 80020d4:	e884 0003 	stmia.w	r4, {r0, r1}
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	603b      	str	r3, [r7, #0]
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	029b      	lsls	r3, r3, #10
 80020e0:	b21b      	sxth	r3, r3
 80020e2:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80020e6:	b21a      	sxth	r2, r3
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	021b      	lsls	r3, r3, #8
 80020ec:	b21b      	sxth	r3, r3
 80020ee:	4313      	orrs	r3, r2
 80020f0:	b21a      	sxth	r2, r3
 80020f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f4:	019b      	lsls	r3, r3, #6
 80020f6:	b21b      	sxth	r3, r3
 80020f8:	4313      	orrs	r3, r2
 80020fa:	b21a      	sxth	r2, r3
 80020fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	b21b      	sxth	r3, r3
 8002102:	4313      	orrs	r3, r2
 8002104:	b21a      	sxth	r2, r3
 8002106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002108:	b21b      	sxth	r3, r3
 800210a:	4313      	orrs	r3, r2
 800210c:	b21b      	sxth	r3, r3
 800210e:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8002110:	8afa      	ldrh	r2, [r7, #22]
 8002112:	f107 0308 	add.w	r3, r7, #8
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff0d 	bl	8001f38 <drv_spi_write>
}
 800211e:	bf00      	nop
 8002120:	371c      	adds	r7, #28
 8002122:	46bd      	mov	sp, r7
 8002124:	bd90      	pop	{r4, r7, pc}

08002126 <drv_write_CSACR>:
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 8002126:	b590      	push	{r4, r7, lr}
 8002128:	b087      	sub	sp, #28
 800212a:	af00      	add	r7, sp, #0
 800212c:	f107 0408 	add.w	r4, r7, #8
 8002130:	e884 0003 	stmia.w	r4, {r0, r1}
 8002134:	607a      	str	r2, [r7, #4]
 8002136:	603b      	str	r3, [r7, #0]
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	029b      	lsls	r3, r3, #10
 800213c:	b21b      	sxth	r3, r3
 800213e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002142:	b21a      	sxth	r2, r3
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	025b      	lsls	r3, r3, #9
 8002148:	b21b      	sxth	r3, r3
 800214a:	4313      	orrs	r3, r2
 800214c:	b21a      	sxth	r2, r3
 800214e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002150:	021b      	lsls	r3, r3, #8
 8002152:	b21b      	sxth	r3, r3
 8002154:	4313      	orrs	r3, r2
 8002156:	b21a      	sxth	r2, r3
 8002158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215a:	019b      	lsls	r3, r3, #6
 800215c:	b21b      	sxth	r3, r3
 800215e:	4313      	orrs	r3, r2
 8002160:	b21a      	sxth	r2, r3
 8002162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002164:	015b      	lsls	r3, r3, #5
 8002166:	b21b      	sxth	r3, r3
 8002168:	4313      	orrs	r3, r2
 800216a:	b21a      	sxth	r2, r3
 800216c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	b21b      	sxth	r3, r3
 8002172:	4313      	orrs	r3, r2
 8002174:	b21a      	sxth	r2, r3
 8002176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	b21b      	sxth	r3, r3
 800217c:	4313      	orrs	r3, r2
 800217e:	b21a      	sxth	r2, r3
 8002180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	b21b      	sxth	r3, r3
 8002186:	4313      	orrs	r3, r2
 8002188:	b21a      	sxth	r2, r3
 800218a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800218c:	b21b      	sxth	r3, r3
 800218e:	4313      	orrs	r3, r2
 8002190:	b21b      	sxth	r3, r3
 8002192:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8002194:	8afa      	ldrh	r2, [r7, #22]
 8002196:	f107 0308 	add.w	r3, r7, #8
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff fecb 	bl	8001f38 <drv_spi_write>
}
 80021a2:	bf00      	nop
 80021a4:	371c      	adds	r7, #28
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd90      	pop	{r4, r7, pc}

080021aa <drv_enable_gd>:
void drv_enable_gd(DRVStruct drv){
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b084      	sub	sp, #16
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	463b      	mov	r3, r7
 80021b2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
 80021b6:	2202      	movs	r2, #2
 80021b8:	463b      	mov	r3, r7
 80021ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021be:	f7ff ff0b 	bl	8001fd8 <drv_read_register>
 80021c2:	4603      	mov	r3, r0
 80021c4:	f023 0304 	bic.w	r3, r3, #4
 80021c8:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 80021ca:	89fb      	ldrh	r3, [r7, #14]
 80021cc:	2202      	movs	r2, #2
 80021ce:	4639      	mov	r1, r7
 80021d0:	c903      	ldmia	r1, {r0, r1}
 80021d2:	f7ff ff1d 	bl	8002010 <drv_write_register>
}
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <drv_disable_gd>:
void drv_disable_gd(DRVStruct drv){
 80021de:	b580      	push	{r7, lr}
 80021e0:	b084      	sub	sp, #16
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	463b      	mov	r3, r7
 80021e6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) | (0x1<<2);
 80021ea:	2202      	movs	r2, #2
 80021ec:	463b      	mov	r3, r7
 80021ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021f2:	f7ff fef1 	bl	8001fd8 <drv_read_register>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f043 0304 	orr.w	r3, r3, #4
 80021fc:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 80021fe:	89fb      	ldrh	r3, [r7, #14]
 8002200:	2202      	movs	r2, #2
 8002202:	4639      	mov	r1, r7
 8002204:	c903      	ldmia	r1, {r0, r1}
 8002206:	f7ff ff03 	bl	8002010 <drv_write_register>
}
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <drv_print_faults>:
void drv_calibrate(DRVStruct drv){
	uint16_t val = (0x1<<4) + (0x1<<3) + (0x1<<2);
	drv_write_register(drv, CSACR, val);
}
void drv_print_faults(DRVStruct drv){
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	463b      	mov	r3, r7
 800221c:	e883 0003 	stmia.w	r3, {r0, r1}
    uint16_t val1 = drv_read_FSR1(drv);
 8002220:	463b      	mov	r3, r7
 8002222:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002226:	f7ff feb5 	bl	8001f94 <drv_read_FSR1>
 800222a:	4603      	mov	r3, r0
 800222c:	81fb      	strh	r3, [r7, #14]
    uint16_t val2 = drv_read_FSR2(drv);
 800222e:	463b      	mov	r3, r7
 8002230:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002234:	f7ff febf 	bl	8001fb6 <drv_read_FSR2>
 8002238:	4603      	mov	r3, r0
 800223a:	81bb      	strh	r3, [r7, #12]

    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");}
 800223c:	89fb      	ldrh	r3, [r7, #14]
 800223e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <drv_print_faults+0x38>
 8002246:	4857      	ldr	r0, [pc, #348]	; (80023a4 <drv_print_faults+0x190>)
 8002248:	f009 ff0e 	bl	800c068 <iprintf>

    if(val1 & (1<<9)){printf("VDS_OCP\n\r");}
 800224c:	89fb      	ldrh	r3, [r7, #14]
 800224e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002252:	2b00      	cmp	r3, #0
 8002254:	d002      	beq.n	800225c <drv_print_faults+0x48>
 8002256:	4854      	ldr	r0, [pc, #336]	; (80023a8 <drv_print_faults+0x194>)
 8002258:	f009 ff06 	bl	800c068 <iprintf>
    if(val1 & (1<<8)){printf("GDF\n\r");}
 800225c:	89fb      	ldrh	r3, [r7, #14]
 800225e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <drv_print_faults+0x58>
 8002266:	4851      	ldr	r0, [pc, #324]	; (80023ac <drv_print_faults+0x198>)
 8002268:	f009 fefe 	bl	800c068 <iprintf>
    if(val1 & (1<<7)){printf("UVLO\n\r");}
 800226c:	89fb      	ldrh	r3, [r7, #14]
 800226e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002272:	2b00      	cmp	r3, #0
 8002274:	d002      	beq.n	800227c <drv_print_faults+0x68>
 8002276:	484e      	ldr	r0, [pc, #312]	; (80023b0 <drv_print_faults+0x19c>)
 8002278:	f009 fef6 	bl	800c068 <iprintf>
    if(val1 & (1<<6)){printf("OTSD\n\r");}
 800227c:	89fb      	ldrh	r3, [r7, #14]
 800227e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <drv_print_faults+0x78>
 8002286:	484b      	ldr	r0, [pc, #300]	; (80023b4 <drv_print_faults+0x1a0>)
 8002288:	f009 feee 	bl	800c068 <iprintf>
    if(val1 & (1<<5)){printf("VDS_HA\n\r");}
 800228c:	89fb      	ldrh	r3, [r7, #14]
 800228e:	f003 0320 	and.w	r3, r3, #32
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <drv_print_faults+0x88>
 8002296:	4848      	ldr	r0, [pc, #288]	; (80023b8 <drv_print_faults+0x1a4>)
 8002298:	f009 fee6 	bl	800c068 <iprintf>
    if(val1 & (1<<4)){printf("VDS_LA\n\r");}
 800229c:	89fb      	ldrh	r3, [r7, #14]
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d002      	beq.n	80022ac <drv_print_faults+0x98>
 80022a6:	4845      	ldr	r0, [pc, #276]	; (80023bc <drv_print_faults+0x1a8>)
 80022a8:	f009 fede 	bl	800c068 <iprintf>
    if(val1 & (1<<3)){printf("VDS_HB\n\r");}
 80022ac:	89fb      	ldrh	r3, [r7, #14]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <drv_print_faults+0xa8>
 80022b6:	4842      	ldr	r0, [pc, #264]	; (80023c0 <drv_print_faults+0x1ac>)
 80022b8:	f009 fed6 	bl	800c068 <iprintf>
    if(val1 & (1<<2)){printf("VDS_LB\n\r");}
 80022bc:	89fb      	ldrh	r3, [r7, #14]
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d002      	beq.n	80022cc <drv_print_faults+0xb8>
 80022c6:	483f      	ldr	r0, [pc, #252]	; (80023c4 <drv_print_faults+0x1b0>)
 80022c8:	f009 fece 	bl	800c068 <iprintf>
    if(val1 & (1<<1)){printf("VDS_HC\n\r");}
 80022cc:	89fb      	ldrh	r3, [r7, #14]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d002      	beq.n	80022dc <drv_print_faults+0xc8>
 80022d6:	483c      	ldr	r0, [pc, #240]	; (80023c8 <drv_print_faults+0x1b4>)
 80022d8:	f009 fec6 	bl	800c068 <iprintf>
    if(val1 & (1)){printf("VDS_LC\n\r");}
 80022dc:	89fb      	ldrh	r3, [r7, #14]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <drv_print_faults+0xd8>
 80022e6:	4839      	ldr	r0, [pc, #228]	; (80023cc <drv_print_faults+0x1b8>)
 80022e8:	f009 febe 	bl	800c068 <iprintf>

    if(val2 & (1<<10)){printf("SA_OC\n\r");}
 80022ec:	89bb      	ldrh	r3, [r7, #12]
 80022ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d002      	beq.n	80022fc <drv_print_faults+0xe8>
 80022f6:	4836      	ldr	r0, [pc, #216]	; (80023d0 <drv_print_faults+0x1bc>)
 80022f8:	f009 feb6 	bl	800c068 <iprintf>
    if(val2 & (1<<9)){printf("SB_OC\n\r");}
 80022fc:	89bb      	ldrh	r3, [r7, #12]
 80022fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <drv_print_faults+0xf8>
 8002306:	4833      	ldr	r0, [pc, #204]	; (80023d4 <drv_print_faults+0x1c0>)
 8002308:	f009 feae 	bl	800c068 <iprintf>
    if(val2 & (1<<8)){printf("SC_OC\n\r");}
 800230c:	89bb      	ldrh	r3, [r7, #12]
 800230e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <drv_print_faults+0x108>
 8002316:	4830      	ldr	r0, [pc, #192]	; (80023d8 <drv_print_faults+0x1c4>)
 8002318:	f009 fea6 	bl	800c068 <iprintf>
    if(val2 & (1<<7)){printf("OTW\n\r");}
 800231c:	89bb      	ldrh	r3, [r7, #12]
 800231e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002322:	2b00      	cmp	r3, #0
 8002324:	d002      	beq.n	800232c <drv_print_faults+0x118>
 8002326:	482d      	ldr	r0, [pc, #180]	; (80023dc <drv_print_faults+0x1c8>)
 8002328:	f009 fe9e 	bl	800c068 <iprintf>
    if(val2 & (1<<6)){printf("CPUV\n\r");}
 800232c:	89bb      	ldrh	r3, [r7, #12]
 800232e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <drv_print_faults+0x128>
 8002336:	482a      	ldr	r0, [pc, #168]	; (80023e0 <drv_print_faults+0x1cc>)
 8002338:	f009 fe96 	bl	800c068 <iprintf>
    if(val2 & (1<<5)){printf("VGS_HA\n\r");}
 800233c:	89bb      	ldrh	r3, [r7, #12]
 800233e:	f003 0320 	and.w	r3, r3, #32
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <drv_print_faults+0x138>
 8002346:	4827      	ldr	r0, [pc, #156]	; (80023e4 <drv_print_faults+0x1d0>)
 8002348:	f009 fe8e 	bl	800c068 <iprintf>
    if(val2 & (1<<4)){printf("VGS_LA\n\r");}
 800234c:	89bb      	ldrh	r3, [r7, #12]
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <drv_print_faults+0x148>
 8002356:	4824      	ldr	r0, [pc, #144]	; (80023e8 <drv_print_faults+0x1d4>)
 8002358:	f009 fe86 	bl	800c068 <iprintf>
    if(val2 & (1<<3)){printf("VGS_HB\n\r");}
 800235c:	89bb      	ldrh	r3, [r7, #12]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <drv_print_faults+0x158>
 8002366:	4821      	ldr	r0, [pc, #132]	; (80023ec <drv_print_faults+0x1d8>)
 8002368:	f009 fe7e 	bl	800c068 <iprintf>
    if(val2 & (1<<2)){printf("VGS_LB\n\r");}
 800236c:	89bb      	ldrh	r3, [r7, #12]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <drv_print_faults+0x168>
 8002376:	481e      	ldr	r0, [pc, #120]	; (80023f0 <drv_print_faults+0x1dc>)
 8002378:	f009 fe76 	bl	800c068 <iprintf>
    if(val2 & (1<<1)){printf("VGS_HC\n\r");}
 800237c:	89bb      	ldrh	r3, [r7, #12]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <drv_print_faults+0x178>
 8002386:	481b      	ldr	r0, [pc, #108]	; (80023f4 <drv_print_faults+0x1e0>)
 8002388:	f009 fe6e 	bl	800c068 <iprintf>
    if(val2 & (1)){printf("VGS_LC\n\r");}
 800238c:	89bb      	ldrh	r3, [r7, #12]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <drv_print_faults+0x188>
 8002396:	4818      	ldr	r0, [pc, #96]	; (80023f8 <drv_print_faults+0x1e4>)
 8002398:	f009 fe66 	bl	800c068 <iprintf>

}
 800239c:	bf00      	nop
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	0800fa28 	.word	0x0800fa28
 80023a8:	0800fa34 	.word	0x0800fa34
 80023ac:	0800fa40 	.word	0x0800fa40
 80023b0:	0800fa48 	.word	0x0800fa48
 80023b4:	0800fa50 	.word	0x0800fa50
 80023b8:	0800fa58 	.word	0x0800fa58
 80023bc:	0800fa64 	.word	0x0800fa64
 80023c0:	0800fa70 	.word	0x0800fa70
 80023c4:	0800fa7c 	.word	0x0800fa7c
 80023c8:	0800fa88 	.word	0x0800fa88
 80023cc:	0800fa94 	.word	0x0800fa94
 80023d0:	0800faa0 	.word	0x0800faa0
 80023d4:	0800faa8 	.word	0x0800faa8
 80023d8:	0800fab0 	.word	0x0800fab0
 80023dc:	0800fab8 	.word	0x0800fab8
 80023e0:	0800fac0 	.word	0x0800fac0
 80023e4:	0800fac8 	.word	0x0800fac8
 80023e8:	0800fad4 	.word	0x0800fad4
 80023ec:	0800fae0 	.word	0x0800fae0
 80023f0:	0800faec 	.word	0x0800faec
 80023f4:	0800faf8 	.word	0x0800faf8
 80023f8:	0800fb04 	.word	0x0800fb04

080023fc <flash_writer_init>:
#include "flash_writer.h"




void flash_writer_init(FlashWriter *fw, uint32_t sector) {
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
	if(sector>7) sector = 7;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	2b07      	cmp	r3, #7
 800240a:	d901      	bls.n	8002410 <flash_writer_init+0x14>
 800240c:	2307      	movs	r3, #7
 800240e:	603b      	str	r3, [r7, #0]
	fw->sector = sector;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	609a      	str	r2, [r3, #8]
	fw->base = __SECTOR_ADDRS[sector];
 8002416:	4a07      	ldr	r2, [pc, #28]	; (8002434 <flash_writer_init+0x38>)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	605a      	str	r2, [r3, #4]
	fw->ready = false;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	20000000 	.word	0x20000000

08002438 <flash_writer_open>:
bool flash_writer_ready(FlashWriter fw) {
    return fw.ready;
}

void flash_writer_open(FlashWriter * fw) {
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
    FLASH_Unlock();
 8002440:	f003 f95a 	bl	80056f8 <FLASH_Unlock>
    FLASH_ClearFlag( FLASH_FLAG_EOP |  FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 8002444:	20f1      	movs	r0, #241	; 0xf1
 8002446:	f003 fa13 	bl	8005870 <FLASH_ClearFlag>
    FLASH_EraseSector(__SECTORS[fw->sector], VoltageRange_3);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	4a07      	ldr	r2, [pc, #28]	; (800246c <flash_writer_open+0x34>)
 8002450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002454:	2102      	movs	r1, #2
 8002456:	4618      	mov	r0, r3
 8002458:	f003 f976 	bl	8005748 <FLASH_EraseSector>
    fw->ready = true;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	701a      	strb	r2, [r3, #0]
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000020 	.word	0x20000020

08002470 <flash_writer_write_int>:

void flash_writer_write_int(FlashWriter fw, uint32_t index, int x) {
 8002470:	b590      	push	{r4, r7, lr}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	1d3c      	adds	r4, r7, #4
 8002478:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800247c:	603b      	str	r3, [r7, #0]
    union UN {int a; uint32_t b;};
    union UN un;
    un.a = x;
 800247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002480:	617b      	str	r3, [r7, #20]
    FLASH_ProgramWord(fw.base + 4 * index, un.b);
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	4611      	mov	r1, r2
 800248e:	4618      	mov	r0, r3
 8002490:	f003 f9ba 	bl	8005808 <FLASH_ProgramWord>
}
 8002494:	bf00      	nop
 8002496:	371c      	adds	r7, #28
 8002498:	46bd      	mov	sp, r7
 800249a:	bd90      	pop	{r4, r7, pc}

0800249c <flash_writer_write_float>:

void flash_writer_write_uint(FlashWriter fw, uint32_t index, unsigned int x) {
    FLASH_ProgramWord(fw.base + 4 * index, x);
}

void flash_writer_write_float(FlashWriter fw, uint32_t index, float x) {
 800249c:	b590      	push	{r4, r7, lr}
 800249e:	b089      	sub	sp, #36	; 0x24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	f107 040c 	add.w	r4, r7, #12
 80024a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	ed87 0a01 	vstr	s0, [r7, #4]
    union UN {float a; uint32_t b;};
    union UN un;
    un.a = x;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	61fb      	str	r3, [r7, #28]
    FLASH_ProgramWord(fw.base + 4 * index, un.b);
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	4611      	mov	r1, r2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f003 f9a1 	bl	8005808 <FLASH_ProgramWord>
}
 80024c6:	bf00      	nop
 80024c8:	3724      	adds	r7, #36	; 0x24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd90      	pop	{r4, r7, pc}

080024ce <flash_writer_close>:

void flash_writer_close(FlashWriter * fw) {
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
    FLASH_Lock();
 80024d6:	f003 f927 	bl	8005728 <FLASH_Lock>
    fw->ready = false;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <flash_read_int>:

int flash_read_int(FlashWriter fw, uint32_t index) {
 80024e8:	b490      	push	{r4, r7}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	1d3c      	adds	r4, r7, #4
 80024f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80024f4:	603b      	str	r3, [r7, #0]
    return *(int*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4a05      	ldr	r2, [pc, #20]	; (8002510 <flash_read_int+0x28>)
 80024fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	681b      	ldr	r3, [r3, #0]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bc90      	pop	{r4, r7}
 800250e:	4770      	bx	lr
 8002510:	20000000 	.word	0x20000000

08002514 <flash_read_float>:

uint32_t flash_read_uint(FlashWriter fw, uint32_t index) {
    return *(uint32_t*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
}

float flash_read_float(FlashWriter fw, uint32_t index) {
 8002514:	b490      	push	{r4, r7}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	1d3c      	adds	r4, r7, #4
 800251c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002520:	603b      	str	r3, [r7, #0]
    return *(float*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4a07      	ldr	r2, [pc, #28]	; (8002544 <flash_read_float+0x30>)
 8002526:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	ee07 3a90 	vmov	s15, r3
}
 8002536:	eeb0 0a67 	vmov.f32	s0, s15
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bc90      	pop	{r4, r7}
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	20000000 	.word	0x20000000

08002548 <set_dtc>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void set_dtc(ControllerStruct *controller){
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002554:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800255a:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002560:	60fb      	str	r3, [r7, #12]

	if(INVERT_DTC){
		dtc_u = 1.0f - controller->dtc_u;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002568:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800256c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002570:	edc7 7a05 	vstr	s15, [r7, #20]
		dtc_v = 1.0f - controller->dtc_v;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800257a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800257e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002582:	edc7 7a04 	vstr	s15, [r7, #16]
		dtc_w = 1.0f - controller->dtc_w;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800258c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002590:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002594:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002598:	4b3b      	ldr	r3, [pc, #236]	; (8002688 <set_dtc+0x140>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d136      	bne.n	800260e <set_dtc+0xc6>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 80025a0:	4b3a      	ldr	r3, [pc, #232]	; (800268c <set_dtc+0x144>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a6:	ee07 3a90 	vmov	s15, r3
 80025aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80025b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b6:	4b35      	ldr	r3, [pc, #212]	; (800268c <set_dtc+0x144>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025be:	ee17 2a90 	vmov	r2, s15
 80025c2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 80025c4:	4b31      	ldr	r3, [pc, #196]	; (800268c <set_dtc+0x144>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ca:	ee07 3a90 	vmov	s15, r3
 80025ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80025d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025da:	4b2c      	ldr	r3, [pc, #176]	; (800268c <set_dtc+0x144>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025e2:	ee17 2a90 	vmov	r2, s15
 80025e6:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 80025e8:	4b28      	ldr	r3, [pc, #160]	; (800268c <set_dtc+0x144>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ee:	ee07 3a90 	vmov	s15, r3
 80025f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80025fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025fe:	4b23      	ldr	r3, [pc, #140]	; (800268c <set_dtc+0x144>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002606:	ee17 2a90 	vmov	r2, s15
 800260a:	63da      	str	r2, [r3, #60]	; 0x3c
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
	}
}
 800260c:	e035      	b.n	800267a <set_dtc+0x132>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
 800260e:	4b1f      	ldr	r3, [pc, #124]	; (800268c <set_dtc+0x144>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	ee07 3a90 	vmov	s15, r3
 8002618:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800261c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002624:	4b19      	ldr	r3, [pc, #100]	; (800268c <set_dtc+0x144>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800262c:	ee17 2a90 	vmov	r2, s15
 8002630:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
 8002632:	4b16      	ldr	r3, [pc, #88]	; (800268c <set_dtc+0x144>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	ee07 3a90 	vmov	s15, r3
 800263c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002640:	edd7 7a04 	vldr	s15, [r7, #16]
 8002644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002648:	4b10      	ldr	r3, [pc, #64]	; (800268c <set_dtc+0x144>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002650:	ee17 2a90 	vmov	r2, s15
 8002654:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 8002656:	4b0d      	ldr	r3, [pc, #52]	; (800268c <set_dtc+0x144>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	ee07 3a90 	vmov	s15, r3
 8002660:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002664:	edd7 7a03 	vldr	s15, [r7, #12]
 8002668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800266c:	4b07      	ldr	r3, [pc, #28]	; (800268c <set_dtc+0x144>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002674:	ee17 2a90 	vmov	r2, s15
 8002678:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800267a:	bf00      	nop
 800267c:	371c      	adds	r7, #28
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	20008f64 	.word	0x20008f64
 800268c:	200094b8 	.word	0x200094b8

08002690 <analog_sample>:

void analog_sample (ControllerStruct *controller){
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
	/* Sampe ADCs */
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002698:	4b38      	ldr	r3, [pc, #224]	; (800277c <analog_sample+0xec>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10e      	bne.n	80026be <analog_sample+0x2e>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 80026a0:	4837      	ldr	r0, [pc, #220]	; (8002780 <analog_sample+0xf0>)
 80026a2:	f004 f92a 	bl	80068fa <HAL_ADC_GetValue>
 80026a6:	4603      	mov	r3, r0
 80026a8:	461a      	mov	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 80026ae:	4835      	ldr	r0, [pc, #212]	; (8002784 <analog_sample+0xf4>)
 80026b0:	f004 f923 	bl	80068fa <HAL_ADC_GetValue>
 80026b4:	4603      	mov	r3, r0
 80026b6:	461a      	mov	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	e00d      	b.n	80026da <analog_sample+0x4a>
		//adc_ch_ic = ADC_CH_IC;
	}
	else{
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 80026be:	4831      	ldr	r0, [pc, #196]	; (8002784 <analog_sample+0xf4>)
 80026c0:	f004 f91b 	bl	80068fa <HAL_ADC_GetValue>
 80026c4:	4603      	mov	r3, r0
 80026c6:	461a      	mov	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 80026cc:	482c      	ldr	r0, [pc, #176]	; (8002780 <analog_sample+0xf0>)
 80026ce:	f004 f914 	bl	80068fa <HAL_ADC_GetValue>
 80026d2:	4603      	mov	r3, r0
 80026d4:	461a      	mov	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	609a      	str	r2, [r3, #8]
		//adc_ch_ic = ADC_CH_IB;
	}


	HAL_ADC_Start(&ADC_CH_MAIN);
 80026da:	4829      	ldr	r0, [pc, #164]	; (8002780 <analog_sample+0xf0>)
 80026dc:	f003 ffb0 	bl	8006640 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&ADC_CH_MAIN, HAL_MAX_DELAY);
 80026e0:	f04f 31ff 	mov.w	r1, #4294967295
 80026e4:	4826      	ldr	r0, [pc, #152]	; (8002780 <analog_sample+0xf0>)
 80026e6:	f004 f87d 	bl	80067e4 <HAL_ADC_PollForConversion>

	controller->adc_vbus_raw = HAL_ADC_GetValue(&ADC_CH_VBUS);
 80026ea:	4827      	ldr	r0, [pc, #156]	; (8002788 <analog_sample+0xf8>)
 80026ec:	f004 f905 	bl	80068fa <HAL_ADC_GetValue>
 80026f0:	4603      	mov	r3, r0
 80026f2:	461a      	mov	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	611a      	str	r2, [r3, #16]
	controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	ee07 3a90 	vmov	s15, r3
 8002700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002704:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800278c <analog_sample+0xfc>
 8002708:	ee67 7a87 	vmul.f32	s15, s15, s14
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	edc3 7a08 	vstr	s15, [r3, #32]

    controller->i_a = controller->i_scale*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	ee07 3a90 	vmov	s15, r3
 8002728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800272c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	edc3 7a05 	vstr	s15, [r3, #20]
    controller->i_b = controller->i_scale*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	ee07 3a90 	vmov	s15, r3
 800274c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	edc3 7a06 	vstr	s15, [r3, #24]
    controller->i_c = -controller->i_a - controller->i_b;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002760:	eeb1 7a67 	vneg.f32	s14, s15
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	edd3 7a06 	vldr	s15, [r3, #24]
 800276a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	edc3 7a07 	vstr	s15, [r3, #28]

}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	20008f64 	.word	0x20008f64
 8002780:	20000290 	.word	0x20000290
 8002784:	20000248 	.word	0x20000248
 8002788:	200002d8 	.word	0x200002d8
 800278c:	3c533318 	.word	0x3c533318

08002790 <abc>:

void abc( float theta, float d, float q, float *a, float *b, float *c){
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af00      	add	r7, sp, #0
 8002796:	ed87 0a05 	vstr	s0, [r7, #20]
 800279a:	edc7 0a04 	vstr	s1, [r7, #16]
 800279e:	ed87 1a03 	vstr	s2, [r7, #12]
 80027a2:	60b8      	str	r0, [r7, #8]
 80027a4:	6079      	str	r1, [r7, #4]
 80027a6:	603a      	str	r2, [r7, #0]
    /* Inverse DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1 */

    float cf = cos_lut(theta);
 80027a8:	ed97 0a05 	vldr	s0, [r7, #20]
 80027ac:	f002 fbd0 	bl	8004f50 <cos_lut>
 80027b0:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 80027b4:	ed97 0a05 	vldr	s0, [r7, #20]
 80027b8:	f002 fb90 	bl	8004edc <sin_lut>
 80027bc:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 80027c0:	ed97 7a07 	vldr	s14, [r7, #28]
 80027c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80027c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027cc:	edd7 6a06 	vldr	s13, [r7, #24]
 80027d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80027d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 80027e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80027e6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002890 <abc+0x100>
 80027ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80027f2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80027f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80027fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002802:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002806:	edd7 7a07 	vldr	s15, [r7, #28]
 800280a:	eddf 6a22 	vldr	s13, [pc, #136]	; 8002894 <abc+0x104>
 800280e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002812:	edd7 7a06 	vldr	s15, [r7, #24]
 8002816:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800281a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800281e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002822:	edd7 7a03 	vldr	s15, [r7, #12]
 8002826:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800282a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	edc3 7a00 	vstr	s15, [r3]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 8002834:	edd7 7a06 	vldr	s15, [r7, #24]
 8002838:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002894 <abc+0x104>
 800283c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002840:	edd7 7a07 	vldr	s15, [r7, #28]
 8002844:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002848:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800284c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002850:	edd7 7a04 	vldr	s15, [r7, #16]
 8002854:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002858:	edd7 7a07 	vldr	s15, [r7, #28]
 800285c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002890 <abc+0x100>
 8002860:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002864:	edd7 7a06 	vldr	s15, [r7, #24]
 8002868:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800286c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002870:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002874:	edd7 7a03 	vldr	s15, [r7, #12]
 8002878:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800287c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	edc3 7a00 	vstr	s15, [r3]
    }
 8002886:	bf00      	nop
 8002888:	3720      	adds	r7, #32
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	3f5db3d7 	.word	0x3f5db3d7
 8002894:	bf5db3d7 	.word	0xbf5db3d7

08002898 <dq0>:


void dq0(float theta, float a, float b, float c, float *d, float *q){
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af00      	add	r7, sp, #0
 800289e:	ed87 0a05 	vstr	s0, [r7, #20]
 80028a2:	edc7 0a04 	vstr	s1, [r7, #16]
 80028a6:	ed87 1a03 	vstr	s2, [r7, #12]
 80028aa:	edc7 1a02 	vstr	s3, [r7, #8]
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
    /* DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1*/

    float cf = cos_lut(theta);
 80028b2:	ed97 0a05 	vldr	s0, [r7, #20]
 80028b6:	f002 fb4b 	bl	8004f50 <cos_lut>
 80028ba:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 80028be:	ed97 0a05 	vldr	s0, [r7, #20]
 80028c2:	f002 fb0b 	bl	8004edc <sin_lut>
 80028c6:	ed87 0a06 	vstr	s0, [r7, #24]

    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 80028ca:	ed97 7a07 	vldr	s14, [r7, #28]
 80028ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80028d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80028da:	eddf 6a34 	vldr	s13, [pc, #208]	; 80029ac <dq0+0x114>
 80028de:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80028e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80028e6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80028ea:	ee67 7a86 	vmul.f32	s15, s15, s12
 80028ee:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80028f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80028f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8002902:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80029b0 <dq0+0x118>
 8002906:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800290a:	edd7 7a07 	vldr	s15, [r7, #28]
 800290e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002912:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002916:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800291a:	edd7 7a02 	vldr	s15, [r7, #8]
 800291e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002926:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80029b4 <dq0+0x11c>
 800292a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002934:	edd7 7a06 	vldr	s15, [r7, #24]
 8002938:	eeb1 7a67 	vneg.f32	s14, s15
 800293c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002940:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002944:	edd7 7a07 	vldr	s15, [r7, #28]
 8002948:	eddf 6a19 	vldr	s13, [pc, #100]	; 80029b0 <dq0+0x118>
 800294c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002950:	edd7 7a06 	vldr	s15, [r7, #24]
 8002954:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002958:	ee67 7a86 	vmul.f32	s15, s15, s12
 800295c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002960:	edd7 7a03 	vldr	s15, [r7, #12]
 8002964:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002968:	ee37 7a67 	vsub.f32	s14, s14, s15
 800296c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002970:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80029ac <dq0+0x114>
 8002974:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002978:	edd7 7a06 	vldr	s15, [r7, #24]
 800297c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002980:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002984:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002988:	edd7 7a02 	vldr	s15, [r7, #8]
 800298c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002990:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002994:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80029b4 <dq0+0x11c>
 8002998:	ee67 7a87 	vmul.f32	s15, s15, s14
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	edc3 7a00 	vstr	s15, [r3]

    }
 80029a2:	bf00      	nop
 80029a4:	3720      	adds	r7, #32
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	3f5db3d7 	.word	0x3f5db3d7
 80029b0:	bf5db3d7 	.word	0xbf5db3d7
 80029b4:	3f2aaaab 	.word	0x3f2aaaab

080029b8 <svm>:

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 80029b8:	b580      	push	{r7, lr}
 80029ba:	ed2d 8b02 	vpush	{d8}
 80029be:	b08a      	sub	sp, #40	; 0x28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	ed87 0a07 	vstr	s0, [r7, #28]
 80029c6:	edc7 0a06 	vstr	s1, [r7, #24]
 80029ca:	ed87 1a05 	vstr	s2, [r7, #20]
 80029ce:	edc7 1a04 	vstr	s3, [r7, #16]
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 80029d8:	ed97 1a04 	vldr	s2, [r7, #16]
 80029dc:	edd7 0a05 	vldr	s1, [r7, #20]
 80029e0:	ed97 0a06 	vldr	s0, [r7, #24]
 80029e4:	f002 f997 	bl	8004d16 <fminf3>
 80029e8:	eeb0 8a40 	vmov.f32	s16, s0
 80029ec:	ed97 1a04 	vldr	s2, [r7, #16]
 80029f0:	edd7 0a05 	vldr	s1, [r7, #20]
 80029f4:	ed97 0a06 	vldr	s0, [r7, #24]
 80029f8:	f002 f959 	bl	8004cae <fmaxf3>
 80029fc:	eef0 7a40 	vmov.f32	s15, s0
 8002a00:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002a04:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a0c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);
 8002a10:	4b41      	ldr	r3, [pc, #260]	; (8002b18 <svm+0x160>)
 8002a12:	623b      	str	r3, [r7, #32]

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002a14:	ed97 7a06 	vldr	s14, [r7, #24]
 8002a18:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a20:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a28:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002b1c <svm+0x164>
 8002a2c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002a30:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a38:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a40:	eddf 0a37 	vldr	s1, [pc, #220]	; 8002b20 <svm+0x168>
 8002a44:	eeb0 0a67 	vmov.f32	s0, s15
 8002a48:	f002 f8f9 	bl	8004c3e <fast_fmaxf>
 8002a4c:	eef0 7a40 	vmov.f32	s15, s0
 8002a50:	eddf 0a34 	vldr	s1, [pc, #208]	; 8002b24 <svm+0x16c>
 8002a54:	eeb0 0a67 	vmov.f32	s0, s15
 8002a58:	f002 f90d 	bl	8004c76 <fast_fminf>
 8002a5c:	eef0 7a40 	vmov.f32	s15, s0
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002a66:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a6a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a72:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a7a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002b1c <svm+0x164>
 8002a7e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002a82:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a8a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a92:	eddf 0a23 	vldr	s1, [pc, #140]	; 8002b20 <svm+0x168>
 8002a96:	eeb0 0a67 	vmov.f32	s0, s15
 8002a9a:	f002 f8d0 	bl	8004c3e <fast_fmaxf>
 8002a9e:	eef0 7a40 	vmov.f32	s15, s0
 8002aa2:	eddf 0a20 	vldr	s1, [pc, #128]	; 8002b24 <svm+0x16c>
 8002aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8002aaa:	f002 f8e4 	bl	8004c76 <fast_fminf>
 8002aae:	eef0 7a40 	vmov.f32	s15, s0
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002ab8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002abc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ac0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ac4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ac8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002acc:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002b1c <svm+0x164>
 8002ad0:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002ad4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ad8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002adc:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ae4:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8002b20 <svm+0x168>
 8002ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8002aec:	f002 f8a7 	bl	8004c3e <fast_fmaxf>
 8002af0:	eef0 7a40 	vmov.f32	s15, s0
 8002af4:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002b24 <svm+0x16c>
 8002af8:	eeb0 0a67 	vmov.f32	s0, s15
 8002afc:	f002 f8bb 	bl	8004c76 <fast_fminf>
 8002b00:	eef0 7a40 	vmov.f32	s15, s0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	edc3 7a00 	vstr	s15, [r3]

    }
 8002b0a:	bf00      	nop
 8002b0c:	3728      	adds	r7, #40	; 0x28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	ecbd 8b02 	vpop	{d8}
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	3ef0a3d7 	.word	0x3ef0a3d7
 8002b1c:	3f933333 	.word	0x3f933333
 8002b20:	00000000 	.word	0x00000000
 8002b24:	3f70a3d7 	.word	0x3f70a3d7

08002b28 <zero_current>:

void zero_current(ControllerStruct *controller){
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
    int adc_b_offset = 0;
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]
    int n = 1000;
 8002b38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b3c:	60bb      	str	r3, [r7, #8]
    controller->dtc_u = 0.f;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	65da      	str	r2, [r3, #92]	; 0x5c
    controller->dtc_v = 0.f;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	661a      	str	r2, [r3, #96]	; 0x60
    controller->dtc_w = 0.f;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	665a      	str	r2, [r3, #100]	; 0x64
    set_dtc(controller);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7ff fcf6 	bl	8002548 <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	e00f      	b.n	8002b82 <zero_current+0x5a>
    	analog_sample(controller);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff fd94 	bl	8002690 <analog_sample>
    	adc_a_offset +=  controller->adc_a_raw;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	4413      	add	r3, r2
 8002b70:	617b      	str	r3, [r7, #20]
    	adc_b_offset += controller->adc_b_raw;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4413      	add	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
    for (int i = 0; i<n; i++){               // Average n samples
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	dbeb      	blt.n	8002b62 <zero_current+0x3a>
     }
    controller->adc_a_offset = adc_a_offset/n;
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	fb92 f2f3 	sdiv	r2, r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    controller->adc_b_offset = adc_b_offset/n;
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	fb92 f2f3 	sdiv	r2, r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

    }
 8002ba6:	bf00      	nop
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a53      	ldr	r2, [pc, #332]	; (8002d08 <init_controller_params+0x158>)
 8002bbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    controller->ki_q = KI_Q;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a51      	ldr	r2, [pc, #324]	; (8002d08 <init_controller_params+0x158>)
 8002bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    controller->k_d = K_SCALE*I_BW;
 8002bc8:	4b50      	ldr	r3, [pc, #320]	; (8002d0c <init_controller_params+0x15c>)
 8002bca:	edd3 7a02 	vldr	s15, [r3, #8]
 8002bce:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8002d10 <init_controller_params+0x160>
 8002bd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
    controller->k_q = K_SCALE*I_BW;
 8002bdc:	4b4b      	ldr	r3, [pc, #300]	; (8002d0c <init_controller_params+0x15c>)
 8002bde:	edd3 7a02 	vldr	s15, [r3, #8]
 8002be2:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002d10 <init_controller_params+0x160>
 8002be6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8002bf0:	4b46      	ldr	r3, [pc, #280]	; (8002d0c <init_controller_params+0x15c>)
 8002bf2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002bf6:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002d14 <init_controller_params+0x164>
 8002bfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bfe:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002d18 <init_controller_params+0x168>
 8002c02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
    controller->ki_fw = .1f*controller->ki_d;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002c2a:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002d1c <init_controller_params+0x16c>
 8002c2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
    controller->phase_order = PHASE_ORDER;
 8002c38:	4b39      	ldr	r3, [pc, #228]	; (8002d20 <init_controller_params+0x170>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    controller->flux_linkage = KT/(1.5f*PPAIRS);
 8002c42:	4b32      	ldr	r3, [pc, #200]	; (8002d0c <init_controller_params+0x15c>)
 8002c44:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002c48:	4b30      	ldr	r3, [pc, #192]	; (8002d0c <init_controller_params+0x15c>)
 8002c4a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002c4e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002c52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
    if(I_MAX <= 40.0f){controller->i_scale = I_SCALE;}
 8002c60:	4b2a      	ldr	r3, [pc, #168]	; (8002d0c <init_controller_params+0x15c>)
 8002c62:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c66:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002d24 <init_controller_params+0x174>
 8002c6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c72:	d803      	bhi.n	8002c7c <init_controller_params+0xcc>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a2c      	ldr	r2, [pc, #176]	; (8002d28 <init_controller_params+0x178>)
 8002c78:	675a      	str	r2, [r3, #116]	; 0x74
 8002c7a:	e002      	b.n	8002c82 <init_controller_params+0xd2>
    else{controller->i_scale = 2.0f*I_SCALE;}
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a2b      	ldr	r2, [pc, #172]	; (8002d2c <init_controller_params+0x17c>)
 8002c80:	675a      	str	r2, [r3, #116]	; 0x74
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	e037      	b.n	8002cf8 <init_controller_params+0x148>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	ee07 3a90 	vmov	s15, r3
 8002c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c92:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002d30 <init_controller_params+0x180>
 8002c96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c9a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002d34 <init_controller_params+0x184>
 8002c9e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ca2:	ee16 0a90 	vmov	r0, s13
 8002ca6:	f7fd fc6f 	bl	8000588 <__aeabi_f2d>
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	ec43 2b10 	vmov	d0, r2, r3
 8002cb2:	f008 fa7d 	bl	800b1b0 <exp>
 8002cb6:	ec51 0b10 	vmov	r0, r1, d0
 8002cba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cbe:	4b1e      	ldr	r3, [pc, #120]	; (8002d38 <init_controller_params+0x188>)
 8002cc0:	f7fd fcba 	bl	8000638 <__aeabi_dmul>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4610      	mov	r0, r2
 8002cca:	4619      	mov	r1, r3
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <init_controller_params+0x18c>)
 8002cd2:	f7fd fafb 	bl	80002cc <__adddf3>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4610      	mov	r0, r2
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f7fd ffa3 	bl	8000c28 <__aeabi_d2f>
 8002ce2:	4601      	mov	r1, r0
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	3340      	adds	r3, #64	; 0x40
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	3304      	adds	r3, #4
 8002cf0:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2b7f      	cmp	r3, #127	; 0x7f
 8002cfc:	ddc4      	ble.n	8002c88 <init_controller_params+0xd8>
    }

    }
 8002cfe:	bf00      	nop
 8002d00:	bf00      	nop
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	3cd0e560 	.word	0x3cd0e560
 8002d0c:	20000650 	.word	0x20000650
 8002d10:	38fba882 	.word	0x38fba882
 8002d14:	37d1b717 	.word	0x37d1b717
 8002d18:	40c90fdb 	.word	0x40c90fdb
 8002d1c:	3dcccccd 	.word	0x3dcccccd
 8002d20:	20008f64 	.word	0x20008f64
 8002d24:	42200000 	.word	0x42200000
 8002d28:	3ca4ffff 	.word	0x3ca4ffff
 8002d2c:	3d24ffff 	.word	0x3d24ffff
 8002d30:	bc000000 	.word	0xbc000000
 8002d34:	3d03126f 	.word	0x3d03126f
 8002d38:	3ff33333 	.word	0x3ff33333
 8002d3c:	3ff00000 	.word	0x3ff00000

08002d40 <reset_foc>:

void reset_foc(ControllerStruct *controller){
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]

	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002d48:	4b36      	ldr	r3, [pc, #216]	; (8002e24 <reset_foc+0xe4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4e:	ee07 3a90 	vmov	s15, r3
 8002d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d56:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d5e:	4b31      	ldr	r3, [pc, #196]	; (8002e24 <reset_foc+0xe4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d66:	ee17 2a90 	vmov	r2, s15
 8002d6a:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002d6c:	4b2d      	ldr	r3, [pc, #180]	; (8002e24 <reset_foc+0xe4>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	ee07 3a90 	vmov	s15, r3
 8002d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d82:	4b28      	ldr	r3, [pc, #160]	; (8002e24 <reset_foc+0xe4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d8a:	ee17 2a90 	vmov	r2, s15
 8002d8e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002d90:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <reset_foc+0xe4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d96:	ee07 3a90 	vmov	s15, r3
 8002d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002da2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002da6:	4b1f      	ldr	r3, [pc, #124]	; (8002e24 <reset_foc+0xe4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dae:	ee17 2a90 	vmov	r2, s15
 8002db2:	639a      	str	r2, [r3, #56]	; 0x38
    controller->i_d_des = 0;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    controller->i_q_des = 0;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    controller->i_d = 0;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	63da      	str	r2, [r3, #60]	; 0x3c
    controller->i_q = 0;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40
    controller->i_q_filt = 0;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	645a      	str	r2, [r3, #68]	; 0x44
    controller->q_int = 0;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    controller->d_int = 0;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    controller->v_q = 0;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	659a      	str	r2, [r3, #88]	; 0x58
    controller->v_d = 0;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	655a      	str	r2, [r3, #84]	; 0x54
    controller->fw_int = 0;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    controller->otw_flag = 0;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

    }
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	200094b8 	.word	0x200094b8

08002e28 <field_weaken>:
    float val2 = controller->inverter_tab[index+1];
    return val1 + (val2 - val1)*(duty*128.0f - (float)index);
}

void field_weaken(ControllerStruct *controller)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
       /// Field Weakening ///

       controller->fw_int += controller->ki_fw*(controller->v_max - 1.0f - controller->v_ref);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	ed93 7a3d 	vldr	s14, [r3, #244]	; 0xf4
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8002e42:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002e46:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8002e50:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002e54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
       controller->fw_int = fast_fmaxf(fast_fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8002e68:	eddf 0a40 	vldr	s1, [pc, #256]	; 8002f6c <field_weaken+0x144>
 8002e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e70:	f001 ff01 	bl	8004c76 <fast_fminf>
 8002e74:	eeb0 7a40 	vmov.f32	s14, s0
 8002e78:	4b3d      	ldr	r3, [pc, #244]	; (8002f70 <field_weaken+0x148>)
 8002e7a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e7e:	eef1 7a67 	vneg.f32	s15, s15
 8002e82:	eef0 0a67 	vmov.f32	s1, s15
 8002e86:	eeb0 0a47 	vmov.f32	s0, s14
 8002e8a:	f001 fed8 	bl	8004c3e <fast_fmaxf>
 8002e8e:	eef0 7a40 	vmov.f32	s15, s0
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
       controller->i_q_des = controller->i_q_des + (controller->i_q_des > 0)*controller->fw_int + (controller->i_q_des < 0)*controller->fw_int;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002ea4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eac:	dd02      	ble.n	8002eb4 <field_weaken+0x8c>
 8002eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002eb2:	e001      	b.n	8002eb8 <field_weaken+0x90>
 8002eb4:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8002f6c <field_weaken+0x144>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8002ebe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ec2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002ecc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed4:	d502      	bpl.n	8002edc <field_weaken+0xb4>
 8002ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002eda:	e001      	b.n	8002ee0 <field_weaken+0xb8>
 8002edc:	eddf 6a23 	vldr	s13, [pc, #140]	; 8002f6c <field_weaken+0x144>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8002ee6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
       controller->i_d_des = controller->fw_int;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	ed93 7a40 	vldr	s14, [r3, #256]	; 0x100
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 8002f0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	edd3 6a2b 	vldr	s13, [r3, #172]	; 0xac
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8002f1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f24:	eeb0 0a67 	vmov.f32	s0, s15
 8002f28:	f008 f9bc 	bl	800b2a4 <sqrtf>
 8002f2c:	ed87 0a03 	vstr	s0, [r7, #12]
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002f36:	edd7 0a03 	vldr	s1, [r7, #12]
 8002f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f3e:	f001 fe9a 	bl	8004c76 <fast_fminf>
 8002f42:	eeb0 7a40 	vmov.f32	s14, s0
 8002f46:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f4a:	eef1 7a67 	vneg.f32	s15, s15
 8002f4e:	eef0 0a67 	vmov.f32	s1, s15
 8002f52:	eeb0 0a47 	vmov.f32	s0, s14
 8002f56:	f001 fe72 	bl	8004c3e <fast_fmaxf>
 8002f5a:	eef0 7a40 	vmov.f32	s15, s0
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0


}
 8002f64:	bf00      	nop
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	00000000 	.word	0x00000000
 8002f70:	20000650 	.word	0x20000650

08002f74 <commutate>:
void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b088      	sub	sp, #32
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	62da      	str	r2, [r3, #44]	; 0x2c
		controller->dtheta_elec = encoder->elec_velocity;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	635a      	str	r2, [r3, #52]	; 0x34
		controller->dtheta_mech = encoder->velocity/GR;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8002f94:	4b5e      	ldr	r3, [pc, #376]	; (8003110 <commutate+0x19c>)
 8002f96:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002f9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	edd3 6a03 	vldr	s13, [r3, #12]
 8002faa:	4b59      	ldr	r3, [pc, #356]	; (8003110 <commutate+0x19c>)
 8002fac:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	ed93 7a05 	vldr	s14, [r3, #20]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	edd3 6a06 	vldr	s13, [r3, #24]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	ed93 6a07 	vldr	s12, [r3, #28]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3340      	adds	r3, #64	; 0x40
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4610      	mov	r0, r2
 8002fe0:	eef0 1a46 	vmov.f32	s3, s12
 8002fe4:	eeb0 1a66 	vmov.f32	s2, s13
 8002fe8:	eef0 0a47 	vmov.f32	s1, s14
 8002fec:	eeb0 0a67 	vmov.f32	s0, s15
 8002ff0:	f7ff fc52 	bl	8002898 <dq0>

       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002ffa:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8003114 <commutate+0x1a0>
 8002ffe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003008:	eddf 6a43 	vldr	s13, [pc, #268]	; 8003118 <commutate+0x1a4>
 800300c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003020:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003114 <commutate+0x1a0>
 8003024:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800302e:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8003118 <commutate+0x1a4>
 8003032:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003046:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003114 <commutate+0x1a0>
 800304a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	edd3 7a08 	vldr	s15, [r3, #32]
 8003054:	eddf 6a30 	vldr	s13, [pc, #192]	; 8003118 <commutate+0x1a4>
 8003058:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800305c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800306c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800311c <commutate+0x1a8>
 8003070:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003074:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003120 <commutate+0x1ac>
 8003078:	ee67 7a87 	vmul.f32	s15, s15, s14
 800307c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003124 <commutate+0x1b0>
 8003080:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
       controller->v_margin = controller->v_max - controller->v_ref;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8003096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 80030a0:	4b1b      	ldr	r3, [pc, #108]	; (8003110 <commutate+0x19c>)
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 80030bc:	eeb0 0a67 	vmov.f32	s0, s15
 80030c0:	4610      	mov	r0, r2
 80030c2:	f001 fe5c 	bl	8004d7e <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80030d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030d6:	edc7 7a07 	vstr	s15, [r7, #28]
       float i_q_error = controller->i_q_des - controller->i_q;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80030e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ea:	edc7 7a06 	vstr	s15, [r7, #24]

       if(controller->i_q > controller->i_mag_max){
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80030fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003102:	dd13      	ble.n	800312c <commutate+0x1b8>
    	   controller->i_mag_max = controller->i_q;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	651a      	str	r2, [r3, #80]	; 0x50
 800310c:	e00e      	b.n	800312c <commutate+0x1b8>
 800310e:	bf00      	nop
 8003110:	20000650 	.word	0x20000650
 8003114:	3f666666 	.word	0x3f666666
 8003118:	3dcccccd 	.word	0x3dcccccd
 800311c:	3f933333 	.word	0x3f933333
 8003120:	3f70a3d7 	.word	0x3f70a3d7
 8003124:	3f13cd3a 	.word	0x3f13cd3a
 8003128:	381d4951 	.word	0x381d4951
       }


       // Calculate decoupling feed-forward voltages //

       float v_d_ff = 0.0f;//-SQRT3*controller->dtheta_elec*L_Q*controller->i_q;
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
       float v_q_ff = 0.0f;//SQRT3*controller->dtheta_elec*(0.0f*L_D*controller->i_d + controller->flux_linkage);
 8003132:	f04f 0300 	mov.w	r3, #0
 8003136:	613b      	str	r3, [r7, #16]

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800313e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003142:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800314c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003150:	edd7 7a05 	vldr	s15, [r7, #20]
 8003154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
 800316a:	eef0 0a47 	vmov.f32	s1, s14
 800316e:	eeb0 0a67 	vmov.f32	s0, s15
 8003172:	f001 fd80 	bl	8004c76 <fast_fminf>
 8003176:	eeb0 7a40 	vmov.f32	s14, s0
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8003180:	eef1 7a67 	vneg.f32	s15, s15
 8003184:	eef0 0a67 	vmov.f32	s1, s15
 8003188:	eeb0 0a47 	vmov.f32	s0, s14
 800318c:	f001 fd57 	bl	8004c3e <fast_fmaxf>
 8003190:	eef0 7a40 	vmov.f32	s15, s0
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80031ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80031b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
 80031ce:	eef0 0a47 	vmov.f32	s1, s14
 80031d2:	eeb0 0a67 	vmov.f32	s0, s15
 80031d6:	f001 fd4e 	bl	8004c76 <fast_fminf>
 80031da:	eeb0 7a40 	vmov.f32	s14, s0
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 80031e4:	eef1 7a67 	vneg.f32	s15, s15
 80031e8:	eef0 0a67 	vmov.f32	s1, s15
 80031ec:	eeb0 0a47 	vmov.f32	s0, s14
 80031f0:	f001 fd25 	bl	8004c3e <fast_fmaxf>
 80031f4:	eef0 7a40 	vmov.f32	s15, s0
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
       float vq_max = controller->v_max;//sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003204:	60fb      	str	r3, [r7, #12]

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 800320c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003210:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800321a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800321e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800323e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003242:	edd7 7a06 	vldr	s15, [r7, #24]
 8003246:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800324a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
 8003260:	eef0 0a47 	vmov.f32	s1, s14
 8003264:	eeb0 0a67 	vmov.f32	s0, s15
 8003268:	f001 fd05 	bl	8004c76 <fast_fminf>
 800326c:	eeb0 7a40 	vmov.f32	s14, s0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8003276:	eef1 7a67 	vneg.f32	s15, s15
 800327a:	eef0 0a67 	vmov.f32	s1, s15
 800327e:	eeb0 0a47 	vmov.f32	s0, s14
 8003282:	f001 fcdc 	bl	8004c3e <fast_fmaxf>
 8003286:	eef0 7a40 	vmov.f32	s15, s0
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800329c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80032ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b4:	eeb0 0a67 	vmov.f32	s0, s15
 80032b8:	f007 fff4 	bl	800b2a4 <sqrtf>
 80032bc:	eef0 7a40 	vmov.f32	s15, s0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80032cc:	edd7 0a03 	vldr	s1, [r7, #12]
 80032d0:	eeb0 0a67 	vmov.f32	s0, s15
 80032d4:	f001 fccf 	bl	8004c76 <fast_fminf>
 80032d8:	eeb0 7a40 	vmov.f32	s14, s0
 80032dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80032e0:	eef1 7a67 	vneg.f32	s15, s15
 80032e4:	eef0 0a67 	vmov.f32	s1, s15
 80032e8:	eeb0 0a47 	vmov.f32	s0, s14
 80032ec:	f001 fca7 	bl	8004c3e <fast_fmaxf>
 80032f0:	eef0 7a40 	vmov.f32	s15, s0
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 800330c:	eeb0 0a67 	vmov.f32	s0, s15
 8003310:	4610      	mov	r0, r2
 8003312:	f001 fd34 	bl	8004d7e <limit_norm>

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003322:	ed5f 6a7f 	vldr	s13, [pc, #-508]	; 8003128 <commutate+0x1b4>
 8003326:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800332a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3370      	adds	r3, #112	; 0x70
 800334a:	461a      	mov	r2, r3
 800334c:	eeb0 1a66 	vmov.f32	s2, s13
 8003350:	eef0 0a47 	vmov.f32	s1, s14
 8003354:	eeb0 0a67 	vmov.f32	s0, s15
 8003358:	f7ff fa1a 	bl	8002790 <abc>
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	ed93 6a1c 	vldr	s12, [r3, #112]	; 0x70
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3364      	adds	r3, #100	; 0x64
 8003384:	461a      	mov	r2, r3
 8003386:	eef0 1a46 	vmov.f32	s3, s12
 800338a:	eeb0 1a66 	vmov.f32	s2, s13
 800338e:	eef0 0a47 	vmov.f32	s1, s14
 8003392:	eeb0 0a67 	vmov.f32	s0, s15
 8003396:	f7ff fb0f 	bl	80029b8 <svm>

       set_dtc(controller);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff f8d4 	bl	8002548 <set_dtc>

    }
 80033a0:	bf00      	nop
 80033a2:	3720      	adds	r7, #32
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <torque_control>:


void torque_control(ControllerStruct *controller){
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
	controller->t_ff_filt = 0.9f*controller->t_ff_filt + 0.1f*controller->t_ff;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 80033b6:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800349c <torque_control+0xf4>
 80033ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 80033c4:	eddf 6a36 	vldr	s13, [pc, #216]	; 80034a0 <torque_control+0xf8>
 80033c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff_filt + controller->kd*(controller->v_des - controller->dtheta_mech);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80033e8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80033ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 80033f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	edd3 6a39 	vldr	s13, [r3, #228]	; 0xe4
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	ed93 6a37 	vldr	s12, [r3, #220]	; 0xdc
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800340c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003410:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003418:	edc7 7a03 	vstr	s15, [r7, #12]
    controller->i_q_des = fast_fmaxf(fast_fminf(torque_des/(KT*GR), controller->i_max), -controller->i_max);
 800341c:	4b21      	ldr	r3, [pc, #132]	; (80034a4 <torque_control+0xfc>)
 800341e:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8003422:	4b20      	ldr	r3, [pc, #128]	; (80034a4 <torque_control+0xfc>)
 8003424:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800342c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003430:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 800343a:	eef0 0a67 	vmov.f32	s1, s15
 800343e:	eeb0 0a66 	vmov.f32	s0, s13
 8003442:	f001 fc18 	bl	8004c76 <fast_fminf>
 8003446:	eeb0 7a40 	vmov.f32	s14, s0
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 8003450:	eef1 7a67 	vneg.f32	s15, s15
 8003454:	eef0 0a67 	vmov.f32	s1, s15
 8003458:	eeb0 0a47 	vmov.f32	s0, s14
 800345c:	f001 fbef 	bl	8004c3e <fast_fmaxf>
 8003460:	eef0 7a40 	vmov.f32	s15, s0
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
    if(controller->v_bus > V_BUS_MAX){controller->i_q_des = 0;}
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	edd3 7a08 	vldr	s15, [r3, #32]
 8003470:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80034a8 <torque_control+0x100>
 8003474:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347c:	dd04      	ble.n	8003488 <torque_control+0xe0>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    controller->i_d_des = 0.0f;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

    }
 8003492:	bf00      	nop
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	3f666666 	.word	0x3f666666
 80034a0:	3dcccccd 	.word	0x3dcccccd
 80034a4:	20000650 	.word	0x20000650
 80034a8:	42400000 	.word	0x42400000

080034ac <zero_commands>:



void zero_commands(ControllerStruct * controller){
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
	controller->t_ff = 0;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	controller->kp = 0;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	controller->kd = 0;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	controller->p_des = 0;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	controller->v_des = 0;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f04f 0200 	mov.w	r2, #0
 80034e2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	controller->i_q_des = 0;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <run_fsm>:
#include "foc.h"
#include "math_ops.h"
#include "position_sensor.h"
#include "drv8323.h"

 void run_fsm(FSMStruct * fsmstate){
 80034fc:	b590      	push	{r4, r7, lr}
 80034fe:	b085      	sub	sp, #20
 8003500:	af02      	add	r7, sp, #8
 8003502:	6078      	str	r0, [r7, #4]
	 /* run_fsm is run every commutation interrupt cycle */

	 /* state transition management */
	 if(fsmstate->next_state != fsmstate->state){
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	785a      	ldrb	r2, [r3, #1]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d00d      	beq.n	800352c <run_fsm+0x30>
		 fsm_exit_state(fsmstate);		// safely exit the old state
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f945 	bl	80037a0 <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	78db      	ldrb	r3, [r3, #3]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d006      	beq.n	800352c <run_fsm+0x30>
			 fsmstate->state = fsmstate->next_state;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	785a      	ldrb	r2, [r3, #1]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	701a      	strb	r2, [r3, #0]
			 fsm_enter_state(fsmstate);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f8d2 	bl	80036d0 <fsm_enter_state>
		 }
	 }

	 switch(fsmstate->state){
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b06      	cmp	r3, #6
 8003532:	f200 80b9 	bhi.w	80036a8 <run_fsm+0x1ac>
 8003536:	a201      	add	r2, pc, #4	; (adr r2, 800353c <run_fsm+0x40>)
 8003538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353c:	080036a7 	.word	0x080036a7
 8003540:	080036a7 	.word	0x080036a7
 8003544:	0800365d 	.word	0x0800365d
 8003548:	080036a9 	.word	0x080036a9
 800354c:	080036a7 	.word	0x080036a7
 8003550:	08003559 	.word	0x08003559
 8003554:	0800369d 	.word	0x0800369d
		 case MENU_MODE:
			 break;

		 case ENCODER_CALIBRATE:
			 if(!comm_encoder_cal.done_ordering){
 8003558:	4b55      	ldr	r3, [pc, #340]	; (80036b0 <run_fsm+0x1b4>)
 800355a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800355e:	2b00      	cmp	r3, #0
 8003560:	d108      	bne.n	8003574 <run_fsm+0x78>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8003562:	4b54      	ldr	r3, [pc, #336]	; (80036b4 <run_fsm+0x1b8>)
 8003564:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003568:	4a51      	ldr	r2, [pc, #324]	; (80036b0 <run_fsm+0x1b4>)
 800356a:	4952      	ldr	r1, [pc, #328]	; (80036b4 <run_fsm+0x1b8>)
 800356c:	4852      	ldr	r0, [pc, #328]	; (80036b8 <run_fsm+0x1bc>)
 800356e:	f7fd ff01 	bl	8001374 <order_phases>
				 preference_writer_close(&prefs);
				 preference_writer_load(prefs);
				 update_fsm(fsmstate, 27);
			 }

			 break;
 8003572:	e099      	b.n	80036a8 <run_fsm+0x1ac>
			 else if(!comm_encoder_cal.done_cal){
 8003574:	4b4e      	ldr	r3, [pc, #312]	; (80036b0 <run_fsm+0x1b4>)
 8003576:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800357a:	2b00      	cmp	r3, #0
 800357c:	d108      	bne.n	8003590 <run_fsm+0x94>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 800357e:	4b4d      	ldr	r3, [pc, #308]	; (80036b4 <run_fsm+0x1b8>)
 8003580:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003584:	4a4a      	ldr	r2, [pc, #296]	; (80036b0 <run_fsm+0x1b4>)
 8003586:	494b      	ldr	r1, [pc, #300]	; (80036b4 <run_fsm+0x1b8>)
 8003588:	484b      	ldr	r0, [pc, #300]	; (80036b8 <run_fsm+0x1bc>)
 800358a:	f7fd fffb 	bl	8001584 <calibrate_encoder>
			 break;
 800358e:	e08b      	b.n	80036a8 <run_fsm+0x1ac>
				 E_ZERO = comm_encoder_cal.ezero;
 8003590:	4b47      	ldr	r3, [pc, #284]	; (80036b0 <run_fsm+0x1b4>)
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	4a49      	ldr	r2, [pc, #292]	; (80036bc <run_fsm+0x1c0>)
 8003596:	6153      	str	r3, [r2, #20]
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 8003598:	4b48      	ldr	r3, [pc, #288]	; (80036bc <run_fsm+0x1c0>)
 800359a:	695c      	ldr	r4, [r3, #20]
 800359c:	4b46      	ldr	r3, [pc, #280]	; (80036b8 <run_fsm+0x1bc>)
 800359e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80035a2:	4b46      	ldr	r3, [pc, #280]	; (80036bc <run_fsm+0x1c0>)
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	425b      	negs	r3, r3
 80035a8:	ee07 3a90 	vmov	s15, r3
 80035ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b4:	eddf 6a42 	vldr	s13, [pc, #264]	; 80036c0 <run_fsm+0x1c4>
 80035b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80035bc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80035c0:	eeb0 0a47 	vmov.f32	s0, s14
 80035c4:	f007 fe42 	bl	800b24c <fmodf>
 80035c8:	eef0 7a40 	vmov.f32	s15, s0
 80035cc:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80036c4 <run_fsm+0x1c8>
 80035d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035d4:	ee17 0a90 	vmov	r0, s15
 80035d8:	f7fc ffd6 	bl	8000588 <__aeabi_f2d>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4621      	mov	r1, r4
 80035e2:	4839      	ldr	r0, [pc, #228]	; (80036c8 <run_fsm+0x1cc>)
 80035e4:	f008 fd40 	bl	800c068 <iprintf>
				 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 80035e8:	4a33      	ldr	r2, [pc, #204]	; (80036b8 <run_fsm+0x1bc>)
 80035ea:	4b31      	ldr	r3, [pc, #196]	; (80036b0 <run_fsm+0x1b4>)
 80035ec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80035f0:	332c      	adds	r3, #44	; 0x2c
 80035f2:	f102 00dc 	add.w	r0, r2, #220	; 0xdc
 80035f6:	4619      	mov	r1, r3
 80035f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035fc:	461a      	mov	r2, r3
 80035fe:	f008 f8b3 	bl	800b768 <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 8003602:	4a2e      	ldr	r2, [pc, #184]	; (80036bc <run_fsm+0x1c0>)
 8003604:	4b2a      	ldr	r3, [pc, #168]	; (80036b0 <run_fsm+0x1b4>)
 8003606:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800360a:	332c      	adds	r3, #44	; 0x2c
 800360c:	f102 0018 	add.w	r0, r2, #24
 8003610:	4619      	mov	r1, r3
 8003612:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003616:	461a      	mov	r2, r3
 8003618:	f008 f8a6 	bl	800b768 <memcpy>
				 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 800361c:	4b2b      	ldr	r3, [pc, #172]	; (80036cc <run_fsm+0x1d0>)
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	9200      	str	r2, [sp, #0]
 8003622:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003624:	f001 fede 	bl	80053e4 <preference_writer_ready>
 8003628:	4603      	mov	r3, r0
 800362a:	f083 0301 	eor.w	r3, r3, #1
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <run_fsm+0x13e>
 8003634:	4825      	ldr	r0, [pc, #148]	; (80036cc <run_fsm+0x1d0>)
 8003636:	f001 fec6 	bl	80053c6 <preference_writer_open>
				 preference_writer_flush(&prefs);
 800363a:	4824      	ldr	r0, [pc, #144]	; (80036cc <run_fsm+0x1d0>)
 800363c:	f001 fee0 	bl	8005400 <preference_writer_flush>
				 preference_writer_close(&prefs);
 8003640:	4822      	ldr	r0, [pc, #136]	; (80036cc <run_fsm+0x1d0>)
 8003642:	f001 ff5b 	bl	80054fc <preference_writer_close>
				 preference_writer_load(prefs);
 8003646:	4b21      	ldr	r3, [pc, #132]	; (80036cc <run_fsm+0x1d0>)
 8003648:	691a      	ldr	r2, [r3, #16]
 800364a:	9200      	str	r2, [sp, #0]
 800364c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800364e:	f001 ff13 	bl	8005478 <preference_writer_load>
				 update_fsm(fsmstate, 27);
 8003652:	211b      	movs	r1, #27
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f8ff 	bl	8003858 <update_fsm>
			 break;
 800365a:	e025      	b.n	80036a8 <run_fsm+0x1ac>

		 case MOTOR_MODE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 800365c:	4b17      	ldr	r3, [pc, #92]	; (80036bc <run_fsm+0x1c0>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	dd09      	ble.n	8003678 <run_fsm+0x17c>
 8003664:	4b13      	ldr	r3, [pc, #76]	; (80036b4 <run_fsm+0x1b8>)
 8003666:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800366a:	4b14      	ldr	r3, [pc, #80]	; (80036bc <run_fsm+0x1c0>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	429a      	cmp	r2, r3
 8003670:	dd02      	ble.n	8003678 <run_fsm+0x17c>
				 zero_commands(&controller);
 8003672:	4810      	ldr	r0, [pc, #64]	; (80036b4 <run_fsm+0x1b8>)
 8003674:	f7ff ff1a 	bl	80034ac <zero_commands>
			 }
			 /* Otherwise, commutate */

			 torque_control(&controller);
 8003678:	480e      	ldr	r0, [pc, #56]	; (80036b4 <run_fsm+0x1b8>)
 800367a:	f7ff fe95 	bl	80033a8 <torque_control>
			 field_weaken(&controller);
 800367e:	480d      	ldr	r0, [pc, #52]	; (80036b4 <run_fsm+0x1b8>)
 8003680:	f7ff fbd2 	bl	8002e28 <field_weaken>
			 commutate(&controller, &comm_encoder);
 8003684:	490c      	ldr	r1, [pc, #48]	; (80036b8 <run_fsm+0x1bc>)
 8003686:	480b      	ldr	r0, [pc, #44]	; (80036b4 <run_fsm+0x1b8>)
 8003688:	f7ff fc74 	bl	8002f74 <commutate>

			 controller.timeout ++;
 800368c:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <run_fsm+0x1b8>)
 800368e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003692:	3301      	adds	r3, #1
 8003694:	4a07      	ldr	r2, [pc, #28]	; (80036b4 <run_fsm+0x1b8>)
 8003696:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
			 break;
 800369a:	e005      	b.n	80036a8 <run_fsm+0x1ac>

		 case SETUP_MODE:
			 break;

		 case ENCODER_MODE:
			 ps_print(&comm_encoder, 100);
 800369c:	2164      	movs	r1, #100	; 0x64
 800369e:	4806      	ldr	r0, [pc, #24]	; (80036b8 <run_fsm+0x1bc>)
 80036a0:	f001 fe3a 	bl	8005318 <ps_print>
			 break;
 80036a4:	e000      	b.n	80036a8 <run_fsm+0x1ac>
			 break;
 80036a6:	bf00      	nop

		 case HALL_CALIBRATE:
			 break;
	 }

 }
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd90      	pop	{r4, r7, pc}
 80036b0:	20000a58 	.word	0x20000a58
 80036b4:	20000750 	.word	0x20000750
 80036b8:	20000348 	.word	0x20000348
 80036bc:	20008f64 	.word	0x20008f64
 80036c0:	47800000 	.word	0x47800000
 80036c4:	40c90fdb 	.word	0x40c90fdb
 80036c8:	0800fb10 	.word	0x0800fb10
 80036cc:	2000063c 	.word	0x2000063c

080036d0 <fsm_enter_state>:

 void fsm_enter_state(FSMStruct * fsmstate){
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
	 /* Called when entering a new state
	  * Do necessary setup   */

		switch(fsmstate->state){
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b06      	cmp	r3, #6
 80036de:	d84f      	bhi.n	8003780 <fsm_enter_state+0xb0>
 80036e0:	a201      	add	r2, pc, #4	; (adr r2, 80036e8 <fsm_enter_state+0x18>)
 80036e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e6:	bf00      	nop
 80036e8:	08003705 	.word	0x08003705
 80036ec:	0800377f 	.word	0x0800377f
 80036f0:	08003711 	.word	0x08003711
 80036f4:	08003781 	.word	0x08003781
 80036f8:	0800370b 	.word	0x0800370b
 80036fc:	0800373b 	.word	0x0800373b
 8003700:	0800377f 	.word	0x0800377f
				case MENU_MODE:
				//printf("Entering Main Menu\r\n");
				enter_menu_state();
 8003704:	f000 f980 	bl	8003a08 <enter_menu_state>
				break;
 8003708:	e03a      	b.n	8003780 <fsm_enter_state+0xb0>
			case SETUP_MODE:
				//printf("Entering Setup\r\n");
				enter_setup_state();
 800370a:	f000 f9a9 	bl	8003a60 <enter_setup_state>
				break;
 800370e:	e037      	b.n	8003780 <fsm_enter_state+0xb0>
				//printf("Entering Encoder Mode\r\n");
				break;
			case MOTOR_MODE:

				//printf("Entering Motor Mode\r\n");
				HAL_GPIO_WritePin(LED, GPIO_PIN_SET );
 8003710:	2201      	movs	r2, #1
 8003712:	2120      	movs	r1, #32
 8003714:	481c      	ldr	r0, [pc, #112]	; (8003788 <fsm_enter_state+0xb8>)
 8003716:	f004 fcef 	bl	80080f8 <HAL_GPIO_WritePin>
				reset_foc(&controller);
 800371a:	481c      	ldr	r0, [pc, #112]	; (800378c <fsm_enter_state+0xbc>)
 800371c:	f7ff fb10 	bl	8002d40 <reset_foc>
				drv_enable_gd(drv);
 8003720:	4b1b      	ldr	r3, [pc, #108]	; (8003790 <fsm_enter_state+0xc0>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	2100      	movs	r1, #0
 8003726:	4611      	mov	r1, r2
 8003728:	889a      	ldrh	r2, [r3, #4]
 800372a:	2300      	movs	r3, #0
 800372c:	f362 030f 	bfi	r3, r2, #0, #16
 8003730:	4608      	mov	r0, r1
 8003732:	4619      	mov	r1, r3
 8003734:	f7fe fd39 	bl	80021aa <drv_enable_gd>
				break;
 8003738:	e022      	b.n	8003780 <fsm_enter_state+0xb0>
			case ENCODER_CALIBRATE:
				//printf("Entering Calibration Mode\r\n");
				/* zero out all calibrations before starting */

				comm_encoder_cal.done_cal = 0;
 800373a:	4b16      	ldr	r3, [pc, #88]	; (8003794 <fsm_enter_state+0xc4>)
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 8003742:	4b14      	ldr	r3, [pc, #80]	; (8003794 <fsm_enter_state+0xc4>)
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				comm_encoder_cal.started = 0;
 800374a:	4b12      	ldr	r3, [pc, #72]	; (8003794 <fsm_enter_state+0xc4>)
 800374c:	2200      	movs	r2, #0
 800374e:	741a      	strb	r2, [r3, #16]
				comm_encoder.e_zero = 0;
 8003750:	4b11      	ldr	r3, [pc, #68]	; (8003798 <fsm_enter_state+0xc8>)
 8003752:	2200      	movs	r2, #0
 8003754:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 8003758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800375c:	2100      	movs	r1, #0
 800375e:	480f      	ldr	r0, [pc, #60]	; (800379c <fsm_enter_state+0xcc>)
 8003760:	f008 f810 	bl	800b784 <memset>
				drv_enable_gd(drv);
 8003764:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <fsm_enter_state+0xc0>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	2100      	movs	r1, #0
 800376a:	4611      	mov	r1, r2
 800376c:	889a      	ldrh	r2, [r3, #4]
 800376e:	2300      	movs	r3, #0
 8003770:	f362 030f 	bfi	r3, r2, #0, #16
 8003774:	4608      	mov	r0, r1
 8003776:	4619      	mov	r1, r3
 8003778:	f7fe fd17 	bl	80021aa <drv_enable_gd>
				break;
 800377c:	e000      	b.n	8003780 <fsm_enter_state+0xb0>
			case HALL_CALIBRATE:
				break;
 800377e:	bf00      	nop

		}
 }
 8003780:	bf00      	nop
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40020800 	.word	0x40020800
 800378c:	20000750 	.word	0x20000750
 8003790:	20009384 	.word	0x20009384
 8003794:	20000a58 	.word	0x20000a58
 8003798:	20000348 	.word	0x20000348
 800379c:	20000424 	.word	0x20000424

080037a0 <fsm_exit_state>:

 void fsm_exit_state(FSMStruct * fsmstate){
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
	 /* Called when exiting the current state
	  * Do necessary cleanup  */

		switch(fsmstate->state){
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b06      	cmp	r3, #6
 80037ae:	d849      	bhi.n	8003844 <fsm_exit_state+0xa4>
 80037b0:	a201      	add	r2, pc, #4	; (adr r2, 80037b8 <fsm_exit_state+0x18>)
 80037b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b6:	bf00      	nop
 80037b8:	080037d5 	.word	0x080037d5
 80037bc:	08003843 	.word	0x08003843
 80037c0:	080037ed 	.word	0x080037ed
 80037c4:	08003845 	.word	0x08003845
 80037c8:	080037dd 	.word	0x080037dd
 80037cc:	08003823 	.word	0x08003823
 80037d0:	080037e5 	.word	0x080037e5
			case MENU_MODE:
				//printf("Leaving Main Menu\r\n");
				fsmstate->ready = 1;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	70da      	strb	r2, [r3, #3]
				break;
 80037da:	e033      	b.n	8003844 <fsm_exit_state+0xa4>
			case SETUP_MODE:
				//printf("Leaving Setup Menu\r\n");
				fsmstate->ready = 1;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	70da      	strb	r2, [r3, #3]
				break;
 80037e2:	e02f      	b.n	8003844 <fsm_exit_state+0xa4>
			case ENCODER_MODE:
				//printf("Leaving Encoder Mode\r\n");
				fsmstate->ready = 1;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	70da      	strb	r2, [r3, #3]
				break;
 80037ea:	e02b      	b.n	8003844 <fsm_exit_state+0xa4>
			case MOTOR_MODE:
				/* Don't stop commutating if there are high currents or FW happening */
				//if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
					fsmstate->ready = 1;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	70da      	strb	r2, [r3, #3]
					drv_disable_gd(drv);
 80037f2:	4b16      	ldr	r3, [pc, #88]	; (800384c <fsm_exit_state+0xac>)
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	2100      	movs	r1, #0
 80037f8:	4611      	mov	r1, r2
 80037fa:	889a      	ldrh	r2, [r3, #4]
 80037fc:	2300      	movs	r3, #0
 80037fe:	f362 030f 	bfi	r3, r2, #0, #16
 8003802:	4608      	mov	r0, r1
 8003804:	4619      	mov	r1, r3
 8003806:	f7fe fcea 	bl	80021de <drv_disable_gd>
					reset_foc(&controller);
 800380a:	4811      	ldr	r0, [pc, #68]	; (8003850 <fsm_exit_state+0xb0>)
 800380c:	f7ff fa98 	bl	8002d40 <reset_foc>
					//printf("Leaving Motor Mode\r\n");
					HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
 8003810:	2200      	movs	r2, #0
 8003812:	2120      	movs	r1, #32
 8003814:	480f      	ldr	r0, [pc, #60]	; (8003854 <fsm_exit_state+0xb4>)
 8003816:	f004 fc6f 	bl	80080f8 <HAL_GPIO_WritePin>
				//}
				zero_commands(&controller);		// Set commands to zero
 800381a:	480d      	ldr	r0, [pc, #52]	; (8003850 <fsm_exit_state+0xb0>)
 800381c:	f7ff fe46 	bl	80034ac <zero_commands>
				break;
 8003820:	e010      	b.n	8003844 <fsm_exit_state+0xa4>
			case ENCODER_CALIBRATE:
				//printf("Exiting Calibration Mode\r\n");
				drv_disable_gd(drv);
 8003822:	4b0a      	ldr	r3, [pc, #40]	; (800384c <fsm_exit_state+0xac>)
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	2100      	movs	r1, #0
 8003828:	4611      	mov	r1, r2
 800382a:	889a      	ldrh	r2, [r3, #4]
 800382c:	2300      	movs	r3, #0
 800382e:	f362 030f 	bfi	r3, r2, #0, #16
 8003832:	4608      	mov	r0, r1
 8003834:	4619      	mov	r1, r3
 8003836:	f7fe fcd2 	bl	80021de <drv_disable_gd>
				//free(error_array);
				//free(lut_array);

				fsmstate->ready = 1;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	70da      	strb	r2, [r3, #3]
				break;
 8003840:	e000      	b.n	8003844 <fsm_exit_state+0xa4>
			case HALL_CALIBRATE:
				break;
 8003842:	bf00      	nop
		}

 }
 8003844:	bf00      	nop
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	20009384 	.word	0x20009384
 8003850:	20000750 	.word	0x20000750
 8003854:	40020800 	.word	0x40020800

08003858 <update_fsm>:

 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af02      	add	r7, sp, #8
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
	if(fsm_input == MENU_CMD){	// escape to exit to rest mode
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	2b1b      	cmp	r3, #27
 8003868:	d106      	bne.n	8003878 <update_fsm+0x20>
		fsmstate->next_state = MENU_MODE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	705a      	strb	r2, [r3, #1]
		fsmstate->ready = 0;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	70da      	strb	r2, [r3, #3]
		return;
 8003876:	e0ba      	b.n	80039ee <update_fsm+0x196>
	}
	switch(fsmstate->state){
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b06      	cmp	r3, #6
 800387e:	f200 80b6 	bhi.w	80039ee <update_fsm+0x196>
 8003882:	a201      	add	r2, pc, #4	; (adr r2, 8003888 <update_fsm+0x30>)
 8003884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003888:	080038a5 	.word	0x080038a5
 800388c:	080039ef 	.word	0x080039ef
 8003890:	080039ef 	.word	0x080039ef
 8003894:	080039ef 	.word	0x080039ef
 8003898:	080039b3 	.word	0x080039b3
 800389c:	080039ef 	.word	0x080039ef
 80038a0:	080039ef 	.word	0x080039ef
		case MENU_MODE:
			switch (fsm_input){
 80038a4:	78fb      	ldrb	r3, [r7, #3]
 80038a6:	3b63      	subs	r3, #99	; 0x63
 80038a8:	2b17      	cmp	r3, #23
 80038aa:	f200 809f 	bhi.w	80039ec <update_fsm+0x194>
 80038ae:	a201      	add	r2, pc, #4	; (adr r2, 80038b4 <update_fsm+0x5c>)
 80038b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b4:	08003915 	.word	0x08003915
 80038b8:	080039ed 	.word	0x080039ed
 80038bc:	08003931 	.word	0x08003931
 80038c0:	080039ed 	.word	0x080039ed
 80038c4:	080039ed 	.word	0x080039ed
 80038c8:	080039af 	.word	0x080039af
 80038cc:	080039ed 	.word	0x080039ed
 80038d0:	080039ed 	.word	0x080039ed
 80038d4:	080039ed 	.word	0x080039ed
 80038d8:	080039ed 	.word	0x080039ed
 80038dc:	08003923 	.word	0x08003923
 80038e0:	080039ed 	.word	0x080039ed
 80038e4:	080039ed 	.word	0x080039ed
 80038e8:	080039ed 	.word	0x080039ed
 80038ec:	080039ed 	.word	0x080039ed
 80038f0:	080039ed 	.word	0x080039ed
 80038f4:	0800393f 	.word	0x0800393f
 80038f8:	080039ed 	.word	0x080039ed
 80038fc:	080039ed 	.word	0x080039ed
 8003900:	080039ed 	.word	0x080039ed
 8003904:	080039ed 	.word	0x080039ed
 8003908:	080039ed 	.word	0x080039ed
 800390c:	080039ed 	.word	0x080039ed
 8003910:	0800394d 	.word	0x0800394d
				case ENCODER_CAL_CMD:
					fsmstate->next_state = ENCODER_CALIBRATE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2205      	movs	r2, #5
 8003918:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	70da      	strb	r2, [r3, #3]
					break;
 8003920:	e046      	b.n	80039b0 <update_fsm+0x158>
				case MOTOR_CMD:
					fsmstate->next_state = MOTOR_MODE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2202      	movs	r2, #2
 8003926:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	70da      	strb	r2, [r3, #3]
					break;
 800392e:	e03f      	b.n	80039b0 <update_fsm+0x158>
				case ENCODER_CMD:
					fsmstate->next_state = ENCODER_MODE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2206      	movs	r2, #6
 8003934:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	70da      	strb	r2, [r3, #3]
					break;
 800393c:	e038      	b.n	80039b0 <update_fsm+0x158>
				case SETUP_CMD:
					fsmstate->next_state = SETUP_MODE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2204      	movs	r2, #4
 8003942:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	70da      	strb	r2, [r3, #3]
					break;
 800394a:	e031      	b.n	80039b0 <update_fsm+0x158>
				case ZERO_CMD:
					comm_encoder.m_zero = 0;
 800394c:	4b29      	ldr	r3, [pc, #164]	; (80039f4 <update_fsm+0x19c>)
 800394e:	2200      	movs	r2, #0
 8003950:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
					ps_sample(&comm_encoder, DT);
 8003954:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80039f8 <update_fsm+0x1a0>
 8003958:	4826      	ldr	r0, [pc, #152]	; (80039f4 <update_fsm+0x19c>)
 800395a:	f001 fb49 	bl	8004ff0 <ps_sample>
					int zero_count = comm_encoder.count;
 800395e:	4b25      	ldr	r3, [pc, #148]	; (80039f4 <update_fsm+0x19c>)
 8003960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003962:	60fb      	str	r3, [r7, #12]
					M_ZERO = zero_count;
 8003964:	4a25      	ldr	r2, [pc, #148]	; (80039fc <update_fsm+0x1a4>)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6113      	str	r3, [r2, #16]
					if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 800396a:	4b25      	ldr	r3, [pc, #148]	; (8003a00 <update_fsm+0x1a8>)
 800396c:	691a      	ldr	r2, [r3, #16]
 800396e:	9200      	str	r2, [sp, #0]
 8003970:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003972:	f001 fd37 	bl	80053e4 <preference_writer_ready>
 8003976:	4603      	mov	r3, r0
 8003978:	f083 0301 	eor.w	r3, r3, #1
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <update_fsm+0x130>
 8003982:	481f      	ldr	r0, [pc, #124]	; (8003a00 <update_fsm+0x1a8>)
 8003984:	f001 fd1f 	bl	80053c6 <preference_writer_open>
					preference_writer_flush(&prefs);
 8003988:	481d      	ldr	r0, [pc, #116]	; (8003a00 <update_fsm+0x1a8>)
 800398a:	f001 fd39 	bl	8005400 <preference_writer_flush>
					preference_writer_close(&prefs);
 800398e:	481c      	ldr	r0, [pc, #112]	; (8003a00 <update_fsm+0x1a8>)
 8003990:	f001 fdb4 	bl	80054fc <preference_writer_close>
					preference_writer_load(prefs);
 8003994:	4b1a      	ldr	r3, [pc, #104]	; (8003a00 <update_fsm+0x1a8>)
 8003996:	691a      	ldr	r2, [r3, #16]
 8003998:	9200      	str	r2, [sp, #0]
 800399a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800399c:	f001 fd6c 	bl	8005478 <preference_writer_load>
					printf("\n\r  Saved new zero position:  %d\n\r\n\r", M_ZERO);
 80039a0:	4b16      	ldr	r3, [pc, #88]	; (80039fc <update_fsm+0x1a4>)
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	4619      	mov	r1, r3
 80039a6:	4817      	ldr	r0, [pc, #92]	; (8003a04 <update_fsm+0x1ac>)
 80039a8:	f008 fb5e 	bl	800c068 <iprintf>
					break;
 80039ac:	e000      	b.n	80039b0 <update_fsm+0x158>
				case HALL_CAL_CMD:
					break;
 80039ae:	bf00      	nop
				}
			break;
 80039b0:	e01c      	b.n	80039ec <update_fsm+0x194>
		case SETUP_MODE:
			if(fsm_input == ENTER_CMD){
 80039b2:	78fb      	ldrb	r3, [r7, #3]
 80039b4:	2b0d      	cmp	r3, #13
 80039b6:	d103      	bne.n	80039c0 <update_fsm+0x168>
				process_user_input(fsmstate);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 fa1f 	bl	8003dfc <process_user_input>
				break;
 80039be:	e016      	b.n	80039ee <update_fsm+0x196>
			}
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	7b1b      	ldrb	r3, [r3, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d103      	bne.n	80039d0 <update_fsm+0x178>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	78fa      	ldrb	r2, [r7, #3]
 80039cc:	735a      	strb	r2, [r3, #13]
 80039ce:	e006      	b.n	80039de <update_fsm+0x186>
			else{
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	7b1b      	ldrb	r3, [r3, #12]
 80039d4:	3b01      	subs	r3, #1
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	4413      	add	r3, r2
 80039da:	78fa      	ldrb	r2, [r7, #3]
 80039dc:	711a      	strb	r2, [r3, #4]
				//fsmstate->bytecount = fsmstate->bytecount%(sizeof(fsmstate->cmd_buff)/sizeof(fsmstate->cmd_buff[0])); // reset when buffer is full
			}
			fsmstate->bytecount++;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	7b1b      	ldrb	r3, [r3, #12]
 80039e2:	3301      	adds	r3, #1
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	731a      	strb	r2, [r3, #12]
			/* If enter is typed, process user input */

			break;
 80039ea:	e000      	b.n	80039ee <update_fsm+0x196>
			break;
 80039ec:	bf00      	nop
			break;
		case MOTOR_MODE:
			break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	20000348 	.word	0x20000348
 80039f8:	37d1b717 	.word	0x37d1b717
 80039fc:	20008f64 	.word	0x20008f64
 8003a00:	2000063c 	.word	0x2000063c
 8003a04:	0800fb24 	.word	0x0800fb24

08003a08 <enter_menu_state>:


 void enter_menu_state(void){
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r\n\r");
 8003a0c:	480c      	ldr	r0, [pc, #48]	; (8003a40 <enter_menu_state+0x38>)
 8003a0e:	f008 fb2b 	bl	800c068 <iprintf>
	    printf(" Commands:\n\r");
 8003a12:	480c      	ldr	r0, [pc, #48]	; (8003a44 <enter_menu_state+0x3c>)
 8003a14:	f008 fb28 	bl	800c068 <iprintf>
	    printf(" m - Motor Mode\n\r");
 8003a18:	480b      	ldr	r0, [pc, #44]	; (8003a48 <enter_menu_state+0x40>)
 8003a1a:	f008 fb25 	bl	800c068 <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 8003a1e:	480b      	ldr	r0, [pc, #44]	; (8003a4c <enter_menu_state+0x44>)
 8003a20:	f008 fb22 	bl	800c068 <iprintf>
	    printf(" s - Setup\n\r");
 8003a24:	480a      	ldr	r0, [pc, #40]	; (8003a50 <enter_menu_state+0x48>)
 8003a26:	f008 fb1f 	bl	800c068 <iprintf>
	    printf(" e - Display Encoder\n\r");
 8003a2a:	480a      	ldr	r0, [pc, #40]	; (8003a54 <enter_menu_state+0x4c>)
 8003a2c:	f008 fb1c 	bl	800c068 <iprintf>
	    printf(" z - Set Zero Position\n\r");
 8003a30:	4809      	ldr	r0, [pc, #36]	; (8003a58 <enter_menu_state+0x50>)
 8003a32:	f008 fb19 	bl	800c068 <iprintf>
	    printf(" esc - Exit to Menu\n\r");
 8003a36:	4809      	ldr	r0, [pc, #36]	; (8003a5c <enter_menu_state+0x54>)
 8003a38:	f008 fb16 	bl	800c068 <iprintf>

	    //gpio.led->write(0);
 }
 8003a3c:	bf00      	nop
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	0800fb4c 	.word	0x0800fb4c
 8003a44:	0800fb54 	.word	0x0800fb54
 8003a48:	0800fb64 	.word	0x0800fb64
 8003a4c:	0800fb78 	.word	0x0800fb78
 8003a50:	0800fb94 	.word	0x0800fb94
 8003a54:	0800fba4 	.word	0x0800fba4
 8003a58:	0800fbbc 	.word	0x0800fbbc
 8003a5c:	0800fbd8 	.word	0x0800fbd8

08003a60 <enter_setup_state>:

 void enter_setup_state(void){
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af04      	add	r7, sp, #16
	    printf("\r\n Configuration Options \n\r");
 8003a66:	4898      	ldr	r0, [pc, #608]	; (8003cc8 <enter_setup_state+0x268>)
 8003a68:	f008 fafe 	bl	800c068 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 8003a6c:	4b97      	ldr	r3, [pc, #604]	; (8003ccc <enter_setup_state+0x26c>)
 8003a6e:	9301      	str	r3, [sp, #4]
 8003a70:	4b97      	ldr	r3, [pc, #604]	; (8003cd0 <enter_setup_state+0x270>)
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	4b97      	ldr	r3, [pc, #604]	; (8003cd4 <enter_setup_state+0x274>)
 8003a76:	4a98      	ldr	r2, [pc, #608]	; (8003cd8 <enter_setup_state+0x278>)
 8003a78:	4998      	ldr	r1, [pc, #608]	; (8003cdc <enter_setup_state+0x27c>)
 8003a7a:	4899      	ldr	r0, [pc, #612]	; (8003ce0 <enter_setup_state+0x280>)
 8003a7c:	f008 faf4 	bl	800c068 <iprintf>
	    printf("\r\n Motor:\r\n");
 8003a80:	4898      	ldr	r0, [pc, #608]	; (8003ce4 <enter_setup_state+0x284>)
 8003a82:	f008 fb77 	bl	800c174 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio",                                "0",   "-",      GR);
 8003a86:	4b98      	ldr	r3, [pc, #608]	; (8003ce8 <enter_setup_state+0x288>)
 8003a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fc fd7c 	bl	8000588 <__aeabi_f2d>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003a98:	4b94      	ldr	r3, [pc, #592]	; (8003cec <enter_setup_state+0x28c>)
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	4b94      	ldr	r3, [pc, #592]	; (8003cf0 <enter_setup_state+0x290>)
 8003a9e:	4a95      	ldr	r2, [pc, #596]	; (8003cf4 <enter_setup_state+0x294>)
 8003aa0:	4995      	ldr	r1, [pc, #596]	; (8003cf8 <enter_setup_state+0x298>)
 8003aa2:	4896      	ldr	r0, [pc, #600]	; (8003cfc <enter_setup_state+0x29c>)
 8003aa4:	f008 fae0 	bl	800c068 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "t", "Torque Constant (N-m/A)",                   "0",   "-",      KT);
 8003aa8:	4b8f      	ldr	r3, [pc, #572]	; (8003ce8 <enter_setup_state+0x288>)
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fc fd6b 	bl	8000588 <__aeabi_f2d>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003aba:	4b8c      	ldr	r3, [pc, #560]	; (8003cec <enter_setup_state+0x28c>)
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	4b8c      	ldr	r3, [pc, #560]	; (8003cf0 <enter_setup_state+0x290>)
 8003ac0:	4a8f      	ldr	r2, [pc, #572]	; (8003d00 <enter_setup_state+0x2a0>)
 8003ac2:	4990      	ldr	r1, [pc, #576]	; (8003d04 <enter_setup_state+0x2a4>)
 8003ac4:	4890      	ldr	r0, [pc, #576]	; (8003d08 <enter_setup_state+0x2a8>)
 8003ac6:	f008 facf 	bl	800c068 <iprintf>
	    printf("\r\n Control:\r\n");
 8003aca:	4890      	ldr	r0, [pc, #576]	; (8003d0c <enter_setup_state+0x2ac>)
 8003acc:	f008 fb52 	bl	800c174 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "b", "Current Bandwidth (Hz)",                    "100", "2000",   I_BW);
 8003ad0:	4b85      	ldr	r3, [pc, #532]	; (8003ce8 <enter_setup_state+0x288>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fc fd57 	bl	8000588 <__aeabi_f2d>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ae2:	4b8b      	ldr	r3, [pc, #556]	; (8003d10 <enter_setup_state+0x2b0>)
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	4b8b      	ldr	r3, [pc, #556]	; (8003d14 <enter_setup_state+0x2b4>)
 8003ae8:	4a8b      	ldr	r2, [pc, #556]	; (8003d18 <enter_setup_state+0x2b8>)
 8003aea:	498c      	ldr	r1, [pc, #560]	; (8003d1c <enter_setup_state+0x2bc>)
 8003aec:	4883      	ldr	r0, [pc, #524]	; (8003cfc <enter_setup_state+0x29c>)
 8003aee:	f008 fabb 	bl	800c068 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "l", "Current Limit (A)",                         "0.0", "75.0",   I_MAX);
 8003af2:	4b7d      	ldr	r3, [pc, #500]	; (8003ce8 <enter_setup_state+0x288>)
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fc fd46 	bl	8000588 <__aeabi_f2d>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b04:	4b86      	ldr	r3, [pc, #536]	; (8003d20 <enter_setup_state+0x2c0>)
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	4b86      	ldr	r3, [pc, #536]	; (8003d24 <enter_setup_state+0x2c4>)
 8003b0a:	4a87      	ldr	r2, [pc, #540]	; (8003d28 <enter_setup_state+0x2c8>)
 8003b0c:	4987      	ldr	r1, [pc, #540]	; (8003d2c <enter_setup_state+0x2cc>)
 8003b0e:	487b      	ldr	r0, [pc, #492]	; (8003cfc <enter_setup_state+0x29c>)
 8003b10:	f008 faaa 	bl	800c068 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "p", "Max Position Setpoint (rad)",               "-",   "-",      P_MAX);
 8003b14:	4b74      	ldr	r3, [pc, #464]	; (8003ce8 <enter_setup_state+0x288>)
 8003b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fc fd35 	bl	8000588 <__aeabi_f2d>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b26:	4b71      	ldr	r3, [pc, #452]	; (8003cec <enter_setup_state+0x28c>)
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	4b70      	ldr	r3, [pc, #448]	; (8003cec <enter_setup_state+0x28c>)
 8003b2c:	4a80      	ldr	r2, [pc, #512]	; (8003d30 <enter_setup_state+0x2d0>)
 8003b2e:	4981      	ldr	r1, [pc, #516]	; (8003d34 <enter_setup_state+0x2d4>)
 8003b30:	4872      	ldr	r0, [pc, #456]	; (8003cfc <enter_setup_state+0x29c>)
 8003b32:	f008 fa99 	bl	800c068 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "v", "Max Velocity Setpoint (rad)/s",             "-",   "-",      V_MAX);
 8003b36:	4b6c      	ldr	r3, [pc, #432]	; (8003ce8 <enter_setup_state+0x288>)
 8003b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fc fd24 	bl	8000588 <__aeabi_f2d>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b48:	4b68      	ldr	r3, [pc, #416]	; (8003cec <enter_setup_state+0x28c>)
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	4b67      	ldr	r3, [pc, #412]	; (8003cec <enter_setup_state+0x28c>)
 8003b4e:	4a7a      	ldr	r2, [pc, #488]	; (8003d38 <enter_setup_state+0x2d8>)
 8003b50:	497a      	ldr	r1, [pc, #488]	; (8003d3c <enter_setup_state+0x2dc>)
 8003b52:	486a      	ldr	r0, [pc, #424]	; (8003cfc <enter_setup_state+0x29c>)
 8003b54:	f008 fa88 	bl	800c068 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "k", "Max Gain for Position (N-m/rad)",               "0.0", "1000.0", KP_MAX);
 8003b58:	4b63      	ldr	r3, [pc, #396]	; (8003ce8 <enter_setup_state+0x288>)
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fc fd13 	bl	8000588 <__aeabi_f2d>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b6a:	4b75      	ldr	r3, [pc, #468]	; (8003d40 <enter_setup_state+0x2e0>)
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	4b6d      	ldr	r3, [pc, #436]	; (8003d24 <enter_setup_state+0x2c4>)
 8003b70:	4a74      	ldr	r2, [pc, #464]	; (8003d44 <enter_setup_state+0x2e4>)
 8003b72:	4975      	ldr	r1, [pc, #468]	; (8003d48 <enter_setup_state+0x2e8>)
 8003b74:	4861      	ldr	r0, [pc, #388]	; (8003cfc <enter_setup_state+0x29c>)
 8003b76:	f008 fa77 	bl	800c068 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "i", "Max Integral Gain for Position (N-m*s/rad)", "0.0", "10.0",   KI_MAX);
 8003b7a:	4b5b      	ldr	r3, [pc, #364]	; (8003ce8 <enter_setup_state+0x288>)
 8003b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fc fd02 	bl	8000588 <__aeabi_f2d>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b8c:	4b6f      	ldr	r3, [pc, #444]	; (8003d4c <enter_setup_state+0x2ec>)
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	4b64      	ldr	r3, [pc, #400]	; (8003d24 <enter_setup_state+0x2c4>)
 8003b92:	4a6f      	ldr	r2, [pc, #444]	; (8003d50 <enter_setup_state+0x2f0>)
 8003b94:	496f      	ldr	r1, [pc, #444]	; (8003d54 <enter_setup_state+0x2f4>)
 8003b96:	4859      	ldr	r0, [pc, #356]	; (8003cfc <enter_setup_state+0x29c>)
 8003b98:	f008 fa66 	bl	800c068 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "d", "Max Gain for Velocity (N-m/rad/s)",             "0.0", "5.0",    KD_MAX);
 8003b9c:	4b52      	ldr	r3, [pc, #328]	; (8003ce8 <enter_setup_state+0x288>)
 8003b9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fc fcf1 	bl	8000588 <__aeabi_f2d>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003bae:	4b6a      	ldr	r3, [pc, #424]	; (8003d58 <enter_setup_state+0x2f8>)
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	4b5c      	ldr	r3, [pc, #368]	; (8003d24 <enter_setup_state+0x2c4>)
 8003bb4:	4a69      	ldr	r2, [pc, #420]	; (8003d5c <enter_setup_state+0x2fc>)
 8003bb6:	496a      	ldr	r1, [pc, #424]	; (8003d60 <enter_setup_state+0x300>)
 8003bb8:	4850      	ldr	r0, [pc, #320]	; (8003cfc <enter_setup_state+0x29c>)
 8003bba:	f008 fa55 	bl	800c068 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "f", "FW Current Limit (A)",                      "0.0", "33.0",   I_FW_MAX);
 8003bbe:	4b4a      	ldr	r3, [pc, #296]	; (8003ce8 <enter_setup_state+0x288>)
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fc fce0 	bl	8000588 <__aeabi_f2d>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003bd0:	4b64      	ldr	r3, [pc, #400]	; (8003d64 <enter_setup_state+0x304>)
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	4b53      	ldr	r3, [pc, #332]	; (8003d24 <enter_setup_state+0x2c4>)
 8003bd6:	4a64      	ldr	r2, [pc, #400]	; (8003d68 <enter_setup_state+0x308>)
 8003bd8:	4964      	ldr	r1, [pc, #400]	; (8003d6c <enter_setup_state+0x30c>)
 8003bda:	4848      	ldr	r0, [pc, #288]	; (8003cfc <enter_setup_state+0x29c>)
 8003bdc:	f008 fa44 	bl	800c068 <iprintf>
//	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)",                "0",   "150",    TEMP_MAX);
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "c", "Continuous Current (A)",                    "0.0", "40.0",   I_MAX_CONT);
 8003be0:	4b41      	ldr	r3, [pc, #260]	; (8003ce8 <enter_setup_state+0x288>)
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fc fccf 	bl	8000588 <__aeabi_f2d>
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003bf2:	4b5f      	ldr	r3, [pc, #380]	; (8003d70 <enter_setup_state+0x310>)
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	4b4b      	ldr	r3, [pc, #300]	; (8003d24 <enter_setup_state+0x2c4>)
 8003bf8:	4a5e      	ldr	r2, [pc, #376]	; (8003d74 <enter_setup_state+0x314>)
 8003bfa:	495f      	ldr	r1, [pc, #380]	; (8003d78 <enter_setup_state+0x318>)
 8003bfc:	483f      	ldr	r0, [pc, #252]	; (8003cfc <enter_setup_state+0x29c>)
 8003bfe:	f008 fa33 	bl	800c068 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "a", "Calibration Current (A)",                   "0.0", "20.0",   I_CAL);
 8003c02:	4b39      	ldr	r3, [pc, #228]	; (8003ce8 <enter_setup_state+0x288>)
 8003c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fc fcbe 	bl	8000588 <__aeabi_f2d>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c14:	4b59      	ldr	r3, [pc, #356]	; (8003d7c <enter_setup_state+0x31c>)
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	4b42      	ldr	r3, [pc, #264]	; (8003d24 <enter_setup_state+0x2c4>)
 8003c1a:	4a59      	ldr	r2, [pc, #356]	; (8003d80 <enter_setup_state+0x320>)
 8003c1c:	4959      	ldr	r1, [pc, #356]	; (8003d84 <enter_setup_state+0x324>)
 8003c1e:	4837      	ldr	r0, [pc, #220]	; (8003cfc <enter_setup_state+0x29c>)
 8003c20:	f008 fa22 	bl	800c068 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %d\n\r",   "r", "Hall Calibration Direction",                "-1",  "1",      HALL_CAL_DIR);
 8003c24:	4b58      	ldr	r3, [pc, #352]	; (8003d88 <enter_setup_state+0x328>)
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	9301      	str	r3, [sp, #4]
 8003c2a:	4b58      	ldr	r3, [pc, #352]	; (8003d8c <enter_setup_state+0x32c>)
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	4b58      	ldr	r3, [pc, #352]	; (8003d90 <enter_setup_state+0x330>)
 8003c30:	4a58      	ldr	r2, [pc, #352]	; (8003d94 <enter_setup_state+0x334>)
 8003c32:	4959      	ldr	r1, [pc, #356]	; (8003d98 <enter_setup_state+0x338>)
 8003c34:	4859      	ldr	r0, [pc, #356]	; (8003d9c <enter_setup_state+0x33c>)
 8003c36:	f008 fa17 	bl	800c068 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "e", "Hall Calibration offset",                   "0.0", "143.0",  HALL_CAL_OFFSET);
 8003c3a:	4b2b      	ldr	r3, [pc, #172]	; (8003ce8 <enter_setup_state+0x288>)
 8003c3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fc fca2 	bl	8000588 <__aeabi_f2d>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c4c:	4b54      	ldr	r3, [pc, #336]	; (8003da0 <enter_setup_state+0x340>)
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	4b34      	ldr	r3, [pc, #208]	; (8003d24 <enter_setup_state+0x2c4>)
 8003c52:	4a54      	ldr	r2, [pc, #336]	; (8003da4 <enter_setup_state+0x344>)
 8003c54:	4954      	ldr	r1, [pc, #336]	; (8003da8 <enter_setup_state+0x348>)
 8003c56:	4855      	ldr	r0, [pc, #340]	; (8003dac <enter_setup_state+0x34c>)
 8003c58:	f008 fa06 	bl	800c068 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "s", "Hall Calibration Speed",                    "0.0", "10.0",   HALL_CAL_SPEED);
 8003c5c:	4b22      	ldr	r3, [pc, #136]	; (8003ce8 <enter_setup_state+0x288>)
 8003c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fc fc91 	bl	8000588 <__aeabi_f2d>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c6e:	4b37      	ldr	r3, [pc, #220]	; (8003d4c <enter_setup_state+0x2ec>)
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	4b2c      	ldr	r3, [pc, #176]	; (8003d24 <enter_setup_state+0x2c4>)
 8003c74:	4a4e      	ldr	r2, [pc, #312]	; (8003db0 <enter_setup_state+0x350>)
 8003c76:	494f      	ldr	r1, [pc, #316]	; (8003db4 <enter_setup_state+0x354>)
 8003c78:	484c      	ldr	r0, [pc, #304]	; (8003dac <enter_setup_state+0x34c>)
 8003c7a:	f008 f9f5 	bl	800c068 <iprintf>
	    printf("\r\n CAN:\r\n");
 8003c7e:	484e      	ldr	r0, [pc, #312]	; (8003db8 <enter_setup_state+0x358>)
 8003c80:	f008 fa78 	bl	800c174 <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "n", "CAN ID",                                    "0",   "127",    CAN_ID);
 8003c84:	4b40      	ldr	r3, [pc, #256]	; (8003d88 <enter_setup_state+0x328>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	9301      	str	r3, [sp, #4]
 8003c8a:	4b4c      	ldr	r3, [pc, #304]	; (8003dbc <enter_setup_state+0x35c>)
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	4b18      	ldr	r3, [pc, #96]	; (8003cf0 <enter_setup_state+0x290>)
 8003c90:	4a4b      	ldr	r2, [pc, #300]	; (8003dc0 <enter_setup_state+0x360>)
 8003c92:	494c      	ldr	r1, [pc, #304]	; (8003dc4 <enter_setup_state+0x364>)
 8003c94:	484c      	ldr	r0, [pc, #304]	; (8003dc8 <enter_setup_state+0x368>)
 8003c96:	f008 f9e7 	bl	800c068 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN TX ID",                                 "0",   "127",    CAN_MASTER);
 8003c9a:	4b3b      	ldr	r3, [pc, #236]	; (8003d88 <enter_setup_state+0x328>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	9301      	str	r3, [sp, #4]
 8003ca0:	4b46      	ldr	r3, [pc, #280]	; (8003dbc <enter_setup_state+0x35c>)
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <enter_setup_state+0x290>)
 8003ca6:	4a49      	ldr	r2, [pc, #292]	; (8003dcc <enter_setup_state+0x36c>)
 8003ca8:	4949      	ldr	r1, [pc, #292]	; (8003dd0 <enter_setup_state+0x370>)
 8003caa:	4847      	ldr	r0, [pc, #284]	; (8003dc8 <enter_setup_state+0x368>)
 8003cac:	f008 f9dc 	bl	800c068 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r",   "o", "CAN Timeout (cycles)(0 = none)",            "0",   "100000", CAN_TIMEOUT);
 8003cb0:	4b35      	ldr	r3, [pc, #212]	; (8003d88 <enter_setup_state+0x328>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	9301      	str	r3, [sp, #4]
 8003cb6:	4b47      	ldr	r3, [pc, #284]	; (8003dd4 <enter_setup_state+0x374>)
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <enter_setup_state+0x290>)
 8003cbc:	4a46      	ldr	r2, [pc, #280]	; (8003dd8 <enter_setup_state+0x378>)
 8003cbe:	4947      	ldr	r1, [pc, #284]	; (8003ddc <enter_setup_state+0x37c>)
 8003cc0:	4836      	ldr	r0, [pc, #216]	; (8003d9c <enter_setup_state+0x33c>)
 8003cc2:	f008 f9d1 	bl	800c068 <iprintf>
 8003cc6:	e08b      	b.n	8003de0 <enter_setup_state+0x380>
 8003cc8:	0800fbf0 	.word	0x0800fbf0
 8003ccc:	0800fc44 	.word	0x0800fc44
 8003cd0:	0800fc54 	.word	0x0800fc54
 8003cd4:	0800fc0c 	.word	0x0800fc0c
 8003cd8:	0800fc10 	.word	0x0800fc10
 8003cdc:	0800fc1c 	.word	0x0800fc1c
 8003ce0:	0800fc24 	.word	0x0800fc24
 8003ce4:	0800fc58 	.word	0x0800fc58
 8003ce8:	20000650 	.word	0x20000650
 8003cec:	0800fc98 	.word	0x0800fc98
 8003cf0:	0800fc64 	.word	0x0800fc64
 8003cf4:	0800fc68 	.word	0x0800fc68
 8003cf8:	0800fc74 	.word	0x0800fc74
 8003cfc:	0800fc78 	.word	0x0800fc78
 8003d00:	0800fc9c 	.word	0x0800fc9c
 8003d04:	0800fcb4 	.word	0x0800fcb4
 8003d08:	0800fcb8 	.word	0x0800fcb8
 8003d0c:	0800fcd8 	.word	0x0800fcd8
 8003d10:	0800fd08 	.word	0x0800fd08
 8003d14:	0800fce8 	.word	0x0800fce8
 8003d18:	0800fcec 	.word	0x0800fcec
 8003d1c:	0800fd04 	.word	0x0800fd04
 8003d20:	0800fd2c 	.word	0x0800fd2c
 8003d24:	0800fd10 	.word	0x0800fd10
 8003d28:	0800fd14 	.word	0x0800fd14
 8003d2c:	0800fd28 	.word	0x0800fd28
 8003d30:	0800fd34 	.word	0x0800fd34
 8003d34:	0800fd50 	.word	0x0800fd50
 8003d38:	0800fd54 	.word	0x0800fd54
 8003d3c:	0800fd74 	.word	0x0800fd74
 8003d40:	0800fd9c 	.word	0x0800fd9c
 8003d44:	0800fd78 	.word	0x0800fd78
 8003d48:	0800fd98 	.word	0x0800fd98
 8003d4c:	0800fdd4 	.word	0x0800fdd4
 8003d50:	0800fda4 	.word	0x0800fda4
 8003d54:	0800fdd0 	.word	0x0800fdd0
 8003d58:	0800fe04 	.word	0x0800fe04
 8003d5c:	0800fddc 	.word	0x0800fddc
 8003d60:	0800fe00 	.word	0x0800fe00
 8003d64:	0800fe24 	.word	0x0800fe24
 8003d68:	0800fe08 	.word	0x0800fe08
 8003d6c:	0800fe20 	.word	0x0800fe20
 8003d70:	0800fe48 	.word	0x0800fe48
 8003d74:	0800fe2c 	.word	0x0800fe2c
 8003d78:	0800fe44 	.word	0x0800fe44
 8003d7c:	0800fe6c 	.word	0x0800fe6c
 8003d80:	0800fe50 	.word	0x0800fe50
 8003d84:	0800fe68 	.word	0x0800fe68
 8003d88:	20008f64 	.word	0x20008f64
 8003d8c:	0800feb4 	.word	0x0800feb4
 8003d90:	0800fe74 	.word	0x0800fe74
 8003d94:	0800fe78 	.word	0x0800fe78
 8003d98:	0800fe94 	.word	0x0800fe94
 8003d9c:	0800fe98 	.word	0x0800fe98
 8003da0:	0800fef4 	.word	0x0800fef4
 8003da4:	0800feb8 	.word	0x0800feb8
 8003da8:	0800fed0 	.word	0x0800fed0
 8003dac:	0800fed4 	.word	0x0800fed4
 8003db0:	0800fefc 	.word	0x0800fefc
 8003db4:	0800ff14 	.word	0x0800ff14
 8003db8:	0800ff18 	.word	0x0800ff18
 8003dbc:	0800ff50 	.word	0x0800ff50
 8003dc0:	0800ff24 	.word	0x0800ff24
 8003dc4:	0800ff2c 	.word	0x0800ff2c
 8003dc8:	0800ff30 	.word	0x0800ff30
 8003dcc:	0800ff54 	.word	0x0800ff54
 8003dd0:	0800ff60 	.word	0x0800ff60
 8003dd4:	0800ff88 	.word	0x0800ff88
 8003dd8:	0800ff64 	.word	0x0800ff64
 8003ddc:	0800ff84 	.word	0x0800ff84
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 8003de0:	4804      	ldr	r0, [pc, #16]	; (8003df4 <enter_setup_state+0x394>)
 8003de2:	f008 f941 	bl	800c068 <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 8003de6:	4804      	ldr	r0, [pc, #16]	; (8003df8 <enter_setup_state+0x398>)
 8003de8:	f008 f93e 	bl	800c068 <iprintf>
 }
 8003dec:	bf00      	nop
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	0800ff90 	.word	0x0800ff90
 8003df8:	0800ffdc 	.word	0x0800ffdc

08003dfc <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	6078      	str	r0, [r7, #4]
	 /* Collects user input from serial (maybe eventually CAN) and updates settings */

	 switch (fsmstate->cmd_id){
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	7b5b      	ldrb	r3, [r3, #13]
 8003e08:	3b61      	subs	r3, #97	; 0x61
 8003e0a:	2b15      	cmp	r3, #21
 8003e0c:	f200 82ce 	bhi.w	80043ac <process_user_input+0x5b0>
 8003e10:	a201      	add	r2, pc, #4	; (adr r2, 8003e18 <process_user_input+0x1c>)
 8003e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e16:	bf00      	nop
 8003e18:	08004205 	.word	0x08004205
 8003e1c:	08003ef9 	.word	0x08003ef9
 8003e20:	08004161 	.word	0x08004161
 8003e24:	080040c9 	.word	0x080040c9
 8003e28:	080042ab 	.word	0x080042ab
 8003e2c:	0800410d 	.word	0x0800410d
 8003e30:	08003e71 	.word	0x08003e71
 8003e34:	080043ad 	.word	0x080043ad
 8003e38:	08004085 	.word	0x08004085
 8003e3c:	080043ad 	.word	0x080043ad
 8003e40:	08004041 	.word	0x08004041
 8003e44:	08003f4d 	.word	0x08003f4d
 8003e48:	08004371 	.word	0x08004371
 8003e4c:	08004353 	.word	0x08004353
 8003e50:	0800438f 	.word	0x0800438f
 8003e54:	08003fa1 	.word	0x08003fa1
 8003e58:	080043ad 	.word	0x080043ad
 8003e5c:	08004259 	.word	0x08004259
 8003e60:	080042ff 	.word	0x080042ff
 8003e64:	08003eb5 	.word	0x08003eb5
 8003e68:	080043ad 	.word	0x080043ad
 8003e6c:	08003fed 	.word	0x08003fed
		 case 'g':
			 GR = fmaxf(atof(fsmstate->cmd_buff), .001f);	// Limit prevents divide by zero if user tries to enter zero
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3304      	adds	r3, #4
 8003e74:	4618      	mov	r0, r3
 8003e76:	f007 fc45 	bl	800b704 <atof>
 8003e7a:	ec53 2b10 	vmov	r2, r3, d0
 8003e7e:	4610      	mov	r0, r2
 8003e80:	4619      	mov	r1, r3
 8003e82:	f7fc fed1 	bl	8000c28 <__aeabi_d2f>
 8003e86:	4603      	mov	r3, r0
 8003e88:	eddf 0aca 	vldr	s1, [pc, #808]	; 80041b4 <process_user_input+0x3b8>
 8003e8c:	ee00 3a10 	vmov	s0, r3
 8003e90:	f007 f93a 	bl	800b108 <fmaxf>
 8003e94:	eef0 7a40 	vmov.f32	s15, s0
 8003e98:	4bc7      	ldr	r3, [pc, #796]	; (80041b8 <process_user_input+0x3bc>)
 8003e9a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			 printf("GR set to %f\r\n", GR);
 8003e9e:	4bc6      	ldr	r3, [pc, #792]	; (80041b8 <process_user_input+0x3bc>)
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fc fb70 	bl	8000588 <__aeabi_f2d>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	48c3      	ldr	r0, [pc, #780]	; (80041bc <process_user_input+0x3c0>)
 8003eae:	f008 f8db 	bl	800c068 <iprintf>
			 break;
 8003eb2:	e282      	b.n	80043ba <process_user_input+0x5be>
		 case 't':
			 KT = fmaxf(atof(fsmstate->cmd_buff), 0.0001f);	// Limit prevents divide by zero.  Seems like a reasonable LB?
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f007 fc23 	bl	800b704 <atof>
 8003ebe:	ec53 2b10 	vmov	r2, r3, d0
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	f7fc feaf 	bl	8000c28 <__aeabi_d2f>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	eddf 0abc 	vldr	s1, [pc, #752]	; 80041c0 <process_user_input+0x3c4>
 8003ed0:	ee00 3a10 	vmov	s0, r3
 8003ed4:	f007 f918 	bl	800b108 <fmaxf>
 8003ed8:	eef0 7a40 	vmov.f32	s15, s0
 8003edc:	4bb6      	ldr	r3, [pc, #728]	; (80041b8 <process_user_input+0x3bc>)
 8003ede:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			 printf("KT set to %f\r\n", KT);
 8003ee2:	4bb5      	ldr	r3, [pc, #724]	; (80041b8 <process_user_input+0x3bc>)
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fc fb4e 	bl	8000588 <__aeabi_f2d>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	48b4      	ldr	r0, [pc, #720]	; (80041c4 <process_user_input+0x3c8>)
 8003ef2:	f008 f8b9 	bl	800c068 <iprintf>
			 break;
 8003ef6:	e260      	b.n	80043ba <process_user_input+0x5be>
		 case 'b':
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3304      	adds	r3, #4
 8003efc:	4618      	mov	r0, r3
 8003efe:	f007 fc01 	bl	800b704 <atof>
 8003f02:	ec53 2b10 	vmov	r2, r3, d0
 8003f06:	4610      	mov	r0, r2
 8003f08:	4619      	mov	r1, r3
 8003f0a:	f7fc fe8d 	bl	8000c28 <__aeabi_d2f>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	eddf 0aad 	vldr	s1, [pc, #692]	; 80041c8 <process_user_input+0x3cc>
 8003f14:	ee00 3a10 	vmov	s0, r3
 8003f18:	f007 f911 	bl	800b13e <fminf>
 8003f1c:	eef0 7a40 	vmov.f32	s15, s0
 8003f20:	eddf 0aaa 	vldr	s1, [pc, #680]	; 80041cc <process_user_input+0x3d0>
 8003f24:	eeb0 0a67 	vmov.f32	s0, s15
 8003f28:	f007 f8ee 	bl	800b108 <fmaxf>
 8003f2c:	eef0 7a40 	vmov.f32	s15, s0
 8003f30:	4ba1      	ldr	r3, [pc, #644]	; (80041b8 <process_user_input+0x3bc>)
 8003f32:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 8003f36:	4ba0      	ldr	r3, [pc, #640]	; (80041b8 <process_user_input+0x3bc>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fc fb24 	bl	8000588 <__aeabi_f2d>
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	48a2      	ldr	r0, [pc, #648]	; (80041d0 <process_user_input+0x3d4>)
 8003f46:	f008 f88f 	bl	800c068 <iprintf>
			 break;
 8003f4a:	e236      	b.n	80043ba <process_user_input+0x5be>
		 case 'l':
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 75.0f), 0.0f);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3304      	adds	r3, #4
 8003f50:	4618      	mov	r0, r3
 8003f52:	f007 fbd7 	bl	800b704 <atof>
 8003f56:	ec53 2b10 	vmov	r2, r3, d0
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	f7fc fe63 	bl	8000c28 <__aeabi_d2f>
 8003f62:	4603      	mov	r3, r0
 8003f64:	eddf 0a9b 	vldr	s1, [pc, #620]	; 80041d4 <process_user_input+0x3d8>
 8003f68:	ee00 3a10 	vmov	s0, r3
 8003f6c:	f007 f8e7 	bl	800b13e <fminf>
 8003f70:	eef0 7a40 	vmov.f32	s15, s0
 8003f74:	eddf 0aa2 	vldr	s1, [pc, #648]	; 8004200 <process_user_input+0x404>
 8003f78:	eeb0 0a67 	vmov.f32	s0, s15
 8003f7c:	f007 f8c4 	bl	800b108 <fmaxf>
 8003f80:	eef0 7a40 	vmov.f32	s15, s0
 8003f84:	4b8c      	ldr	r3, [pc, #560]	; (80041b8 <process_user_input+0x3bc>)
 8003f86:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 8003f8a:	4b8b      	ldr	r3, [pc, #556]	; (80041b8 <process_user_input+0x3bc>)
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fc fafa 	bl	8000588 <__aeabi_f2d>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	488f      	ldr	r0, [pc, #572]	; (80041d8 <process_user_input+0x3dc>)
 8003f9a:	f008 f865 	bl	800c068 <iprintf>
			 break;
 8003f9e:	e20c      	b.n	80043ba <process_user_input+0x5be>
		 case 'p':
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f007 fbad 	bl	800b704 <atof>
 8003faa:	ec53 2b10 	vmov	r2, r3, d0
 8003fae:	4610      	mov	r0, r2
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	f7fc fe39 	bl	8000c28 <__aeabi_d2f>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	eddf 0a91 	vldr	s1, [pc, #580]	; 8004200 <process_user_input+0x404>
 8003fbc:	ee00 3a10 	vmov	s0, r3
 8003fc0:	f007 f8a2 	bl	800b108 <fmaxf>
 8003fc4:	eef0 7a40 	vmov.f32	s15, s0
 8003fc8:	4b7b      	ldr	r3, [pc, #492]	; (80041b8 <process_user_input+0x3bc>)
 8003fca:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			 P_MIN = 0;
 8003fce:	4b7a      	ldr	r3, [pc, #488]	; (80041b8 <process_user_input+0x3bc>)
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	64da      	str	r2, [r3, #76]	; 0x4c
			 printf("P_MAX set to %f\r\n", P_MAX);
 8003fd6:	4b78      	ldr	r3, [pc, #480]	; (80041b8 <process_user_input+0x3bc>)
 8003fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fc fad4 	bl	8000588 <__aeabi_f2d>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	487d      	ldr	r0, [pc, #500]	; (80041dc <process_user_input+0x3e0>)
 8003fe6:	f008 f83f 	bl	800c068 <iprintf>
			 break;
 8003fea:	e1e6      	b.n	80043ba <process_user_input+0x5be>
		 case 'v':
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f007 fb87 	bl	800b704 <atof>
 8003ff6:	ec53 2b10 	vmov	r2, r3, d0
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	f7fc fe13 	bl	8000c28 <__aeabi_d2f>
 8004002:	4603      	mov	r3, r0
 8004004:	eddf 0a7e 	vldr	s1, [pc, #504]	; 8004200 <process_user_input+0x404>
 8004008:	ee00 3a10 	vmov	s0, r3
 800400c:	f007 f87c 	bl	800b108 <fmaxf>
 8004010:	eef0 7a40 	vmov.f32	s15, s0
 8004014:	4b68      	ldr	r3, [pc, #416]	; (80041b8 <process_user_input+0x3bc>)
 8004016:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			 V_MIN = -V_MAX;
 800401a:	4b67      	ldr	r3, [pc, #412]	; (80041b8 <process_user_input+0x3bc>)
 800401c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004020:	eef1 7a67 	vneg.f32	s15, s15
 8004024:	4b64      	ldr	r3, [pc, #400]	; (80041b8 <process_user_input+0x3bc>)
 8004026:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			 printf("V_MAX set to %f\r\n", V_MAX);
 800402a:	4b63      	ldr	r3, [pc, #396]	; (80041b8 <process_user_input+0x3bc>)
 800402c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402e:	4618      	mov	r0, r3
 8004030:	f7fc faaa 	bl	8000588 <__aeabi_f2d>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4869      	ldr	r0, [pc, #420]	; (80041e0 <process_user_input+0x3e4>)
 800403a:	f008 f815 	bl	800c068 <iprintf>
			 break;
 800403e:	e1bc      	b.n	80043ba <process_user_input+0x5be>
		 case 'k':
			 KP_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3304      	adds	r3, #4
 8004044:	4618      	mov	r0, r3
 8004046:	f007 fb5d 	bl	800b704 <atof>
 800404a:	ec53 2b10 	vmov	r2, r3, d0
 800404e:	4610      	mov	r0, r2
 8004050:	4619      	mov	r1, r3
 8004052:	f7fc fde9 	bl	8000c28 <__aeabi_d2f>
 8004056:	4603      	mov	r3, r0
 8004058:	eddf 0a69 	vldr	s1, [pc, #420]	; 8004200 <process_user_input+0x404>
 800405c:	ee00 3a10 	vmov	s0, r3
 8004060:	f007 f852 	bl	800b108 <fmaxf>
 8004064:	eef0 7a40 	vmov.f32	s15, s0
 8004068:	4b53      	ldr	r3, [pc, #332]	; (80041b8 <process_user_input+0x3bc>)
 800406a:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 printf("KP_MAX set to %f\r\n", KP_MAX);
 800406e:	4b52      	ldr	r3, [pc, #328]	; (80041b8 <process_user_input+0x3bc>)
 8004070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004072:	4618      	mov	r0, r3
 8004074:	f7fc fa88 	bl	8000588 <__aeabi_f2d>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4859      	ldr	r0, [pc, #356]	; (80041e4 <process_user_input+0x3e8>)
 800407e:	f007 fff3 	bl	800c068 <iprintf>
			 break;
 8004082:	e19a      	b.n	80043ba <process_user_input+0x5be>
		 case 'i':
			 KI_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3304      	adds	r3, #4
 8004088:	4618      	mov	r0, r3
 800408a:	f007 fb3b 	bl	800b704 <atof>
 800408e:	ec53 2b10 	vmov	r2, r3, d0
 8004092:	4610      	mov	r0, r2
 8004094:	4619      	mov	r1, r3
 8004096:	f7fc fdc7 	bl	8000c28 <__aeabi_d2f>
 800409a:	4603      	mov	r3, r0
 800409c:	eddf 0a58 	vldr	s1, [pc, #352]	; 8004200 <process_user_input+0x404>
 80040a0:	ee00 3a10 	vmov	s0, r3
 80040a4:	f007 f830 	bl	800b108 <fmaxf>
 80040a8:	eef0 7a40 	vmov.f32	s15, s0
 80040ac:	4b42      	ldr	r3, [pc, #264]	; (80041b8 <process_user_input+0x3bc>)
 80040ae:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			 printf("KI_MAX set to %f\r\n", KI_MAX);
 80040b2:	4b41      	ldr	r3, [pc, #260]	; (80041b8 <process_user_input+0x3bc>)
 80040b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fc fa66 	bl	8000588 <__aeabi_f2d>
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	4849      	ldr	r0, [pc, #292]	; (80041e8 <process_user_input+0x3ec>)
 80040c2:	f007 ffd1 	bl	800c068 <iprintf>
			 break;
 80040c6:	e178      	b.n	80043ba <process_user_input+0x5be>
		 case 'd':
			 KD_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3304      	adds	r3, #4
 80040cc:	4618      	mov	r0, r3
 80040ce:	f007 fb19 	bl	800b704 <atof>
 80040d2:	ec53 2b10 	vmov	r2, r3, d0
 80040d6:	4610      	mov	r0, r2
 80040d8:	4619      	mov	r1, r3
 80040da:	f7fc fda5 	bl	8000c28 <__aeabi_d2f>
 80040de:	4603      	mov	r3, r0
 80040e0:	eddf 0a47 	vldr	s1, [pc, #284]	; 8004200 <process_user_input+0x404>
 80040e4:	ee00 3a10 	vmov	s0, r3
 80040e8:	f007 f80e 	bl	800b108 <fmaxf>
 80040ec:	eef0 7a40 	vmov.f32	s15, s0
 80040f0:	4b31      	ldr	r3, [pc, #196]	; (80041b8 <process_user_input+0x3bc>)
 80040f2:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			 printf("KD_MAX set to %f\r\n", KD_MAX);
 80040f6:	4b30      	ldr	r3, [pc, #192]	; (80041b8 <process_user_input+0x3bc>)
 80040f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fc fa44 	bl	8000588 <__aeabi_f2d>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4839      	ldr	r0, [pc, #228]	; (80041ec <process_user_input+0x3f0>)
 8004106:	f007 ffaf 	bl	800c068 <iprintf>
			 break;
 800410a:	e156      	b.n	80043ba <process_user_input+0x5be>
		 case 'f':
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3304      	adds	r3, #4
 8004110:	4618      	mov	r0, r3
 8004112:	f007 faf7 	bl	800b704 <atof>
 8004116:	ec53 2b10 	vmov	r2, r3, d0
 800411a:	4610      	mov	r0, r2
 800411c:	4619      	mov	r1, r3
 800411e:	f7fc fd83 	bl	8000c28 <__aeabi_d2f>
 8004122:	4603      	mov	r3, r0
 8004124:	eddf 0a32 	vldr	s1, [pc, #200]	; 80041f0 <process_user_input+0x3f4>
 8004128:	ee00 3a10 	vmov	s0, r3
 800412c:	f007 f807 	bl	800b13e <fminf>
 8004130:	eef0 7a40 	vmov.f32	s15, s0
 8004134:	eddf 0a32 	vldr	s1, [pc, #200]	; 8004200 <process_user_input+0x404>
 8004138:	eeb0 0a67 	vmov.f32	s0, s15
 800413c:	f006 ffe4 	bl	800b108 <fmaxf>
 8004140:	eef0 7a40 	vmov.f32	s15, s0
 8004144:	4b1c      	ldr	r3, [pc, #112]	; (80041b8 <process_user_input+0x3bc>)
 8004146:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 800414a:	4b1b      	ldr	r3, [pc, #108]	; (80041b8 <process_user_input+0x3bc>)
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	4618      	mov	r0, r3
 8004150:	f7fc fa1a 	bl	8000588 <__aeabi_f2d>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4826      	ldr	r0, [pc, #152]	; (80041f4 <process_user_input+0x3f8>)
 800415a:	f007 ff85 	bl	800c068 <iprintf>
			 break;
 800415e:	e12c      	b.n	80043ba <process_user_input+0x5be>
		 case 'c':
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3304      	adds	r3, #4
 8004164:	4618      	mov	r0, r3
 8004166:	f007 facd 	bl	800b704 <atof>
 800416a:	ec53 2b10 	vmov	r2, r3, d0
 800416e:	4610      	mov	r0, r2
 8004170:	4619      	mov	r1, r3
 8004172:	f7fc fd59 	bl	8000c28 <__aeabi_d2f>
 8004176:	4603      	mov	r3, r0
 8004178:	eddf 0a1f 	vldr	s1, [pc, #124]	; 80041f8 <process_user_input+0x3fc>
 800417c:	ee00 3a10 	vmov	s0, r3
 8004180:	f006 ffdd 	bl	800b13e <fminf>
 8004184:	eef0 7a40 	vmov.f32	s15, s0
 8004188:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8004200 <process_user_input+0x404>
 800418c:	eeb0 0a67 	vmov.f32	s0, s15
 8004190:	f006 ffba 	bl	800b108 <fmaxf>
 8004194:	eef0 7a40 	vmov.f32	s15, s0
 8004198:	4b07      	ldr	r3, [pc, #28]	; (80041b8 <process_user_input+0x3bc>)
 800419a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 800419e:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <process_user_input+0x3bc>)
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fc f9f0 	bl	8000588 <__aeabi_f2d>
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4813      	ldr	r0, [pc, #76]	; (80041fc <process_user_input+0x400>)
 80041ae:	f007 ff5b 	bl	800c068 <iprintf>
			 break;
 80041b2:	e102      	b.n	80043ba <process_user_input+0x5be>
 80041b4:	3a83126f 	.word	0x3a83126f
 80041b8:	20000650 	.word	0x20000650
 80041bc:	08010008 	.word	0x08010008
 80041c0:	38d1b717 	.word	0x38d1b717
 80041c4:	08010018 	.word	0x08010018
 80041c8:	44fa0000 	.word	0x44fa0000
 80041cc:	42c80000 	.word	0x42c80000
 80041d0:	08010028 	.word	0x08010028
 80041d4:	42960000 	.word	0x42960000
 80041d8:	0801003c 	.word	0x0801003c
 80041dc:	08010050 	.word	0x08010050
 80041e0:	08010064 	.word	0x08010064
 80041e4:	08010078 	.word	0x08010078
 80041e8:	0801008c 	.word	0x0801008c
 80041ec:	080100a0 	.word	0x080100a0
 80041f0:	42040000 	.word	0x42040000
 80041f4:	080100b4 	.word	0x080100b4
 80041f8:	42200000 	.word	0x42200000
 80041fc:	080100cc 	.word	0x080100cc
 8004200:	00000000 	.word	0x00000000
		 case 'a':
			 I_CAL = fmaxf(fminf(atof(fsmstate->cmd_buff), 20.0f), 0.0f);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3304      	adds	r3, #4
 8004208:	4618      	mov	r0, r3
 800420a:	f007 fa7b 	bl	800b704 <atof>
 800420e:	ec53 2b10 	vmov	r2, r3, d0
 8004212:	4610      	mov	r0, r2
 8004214:	4619      	mov	r1, r3
 8004216:	f7fc fd07 	bl	8000c28 <__aeabi_d2f>
 800421a:	4603      	mov	r3, r0
 800421c:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8004220:	ee00 3a10 	vmov	s0, r3
 8004224:	f006 ff8b 	bl	800b13e <fminf>
 8004228:	eef0 7a40 	vmov.f32	s15, s0
 800422c:	ed5f 0a0c 	vldr	s1, [pc, #-48]	; 8004200 <process_user_input+0x404>
 8004230:	eeb0 0a67 	vmov.f32	s0, s15
 8004234:	f006 ff68 	bl	800b108 <fmaxf>
 8004238:	eef0 7a40 	vmov.f32	s15, s0
 800423c:	4b76      	ldr	r3, [pc, #472]	; (8004418 <process_user_input+0x61c>)
 800423e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			 printf("I_CAL set to %f\r\n", I_CAL);
 8004242:	4b75      	ldr	r3, [pc, #468]	; (8004418 <process_user_input+0x61c>)
 8004244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004246:	4618      	mov	r0, r3
 8004248:	f7fc f99e 	bl	8000588 <__aeabi_f2d>
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4872      	ldr	r0, [pc, #456]	; (800441c <process_user_input+0x620>)
 8004252:	f007 ff09 	bl	800c068 <iprintf>
			 break;
 8004256:	e0b0      	b.n	80043ba <process_user_input+0x5be>
		 case 'r':
			 HALL_CAL_DIR = fmaxf(fminf(atof(fsmstate->cmd_buff), 1.0f), -1.0f);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3304      	adds	r3, #4
 800425c:	4618      	mov	r0, r3
 800425e:	f007 fa51 	bl	800b704 <atof>
 8004262:	ec53 2b10 	vmov	r2, r3, d0
 8004266:	4610      	mov	r0, r2
 8004268:	4619      	mov	r1, r3
 800426a:	f7fc fcdd 	bl	8000c28 <__aeabi_d2f>
 800426e:	4603      	mov	r3, r0
 8004270:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004274:	ee00 3a10 	vmov	s0, r3
 8004278:	f006 ff61 	bl	800b13e <fminf>
 800427c:	eef0 7a40 	vmov.f32	s15, s0
 8004280:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8004284:	eeb0 0a67 	vmov.f32	s0, s15
 8004288:	f006 ff3e 	bl	800b108 <fmaxf>
 800428c:	eef0 7a40 	vmov.f32	s15, s0
 8004290:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004294:	ee17 2a90 	vmov	r2, s15
 8004298:	4b61      	ldr	r3, [pc, #388]	; (8004420 <process_user_input+0x624>)
 800429a:	61da      	str	r2, [r3, #28]
			 printf("HALL_CAL_DIR set to %d\r\n", HALL_CAL_DIR);
 800429c:	4b60      	ldr	r3, [pc, #384]	; (8004420 <process_user_input+0x624>)
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	4619      	mov	r1, r3
 80042a2:	4860      	ldr	r0, [pc, #384]	; (8004424 <process_user_input+0x628>)
 80042a4:	f007 fee0 	bl	800c068 <iprintf>
			 break;
 80042a8:	e087      	b.n	80043ba <process_user_input+0x5be>
		 case 'e':
			 HALL_CAL_OFFSET = fmaxf(fminf(atof(fsmstate->cmd_buff), 143.0f), 0.0f);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3304      	adds	r3, #4
 80042ae:	4618      	mov	r0, r3
 80042b0:	f007 fa28 	bl	800b704 <atof>
 80042b4:	ec53 2b10 	vmov	r2, r3, d0
 80042b8:	4610      	mov	r0, r2
 80042ba:	4619      	mov	r1, r3
 80042bc:	f7fc fcb4 	bl	8000c28 <__aeabi_d2f>
 80042c0:	4603      	mov	r3, r0
 80042c2:	eddf 0a59 	vldr	s1, [pc, #356]	; 8004428 <process_user_input+0x62c>
 80042c6:	ee00 3a10 	vmov	s0, r3
 80042ca:	f006 ff38 	bl	800b13e <fminf>
 80042ce:	eef0 7a40 	vmov.f32	s15, s0
 80042d2:	eddf 0a56 	vldr	s1, [pc, #344]	; 800442c <process_user_input+0x630>
 80042d6:	eeb0 0a67 	vmov.f32	s0, s15
 80042da:	f006 ff15 	bl	800b108 <fmaxf>
 80042de:	eef0 7a40 	vmov.f32	s15, s0
 80042e2:	4b4d      	ldr	r3, [pc, #308]	; (8004418 <process_user_input+0x61c>)
 80042e4:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			 printf("HALL_CAL_OFFSET set to %f\r\n", HALL_CAL_OFFSET);
 80042e8:	4b4b      	ldr	r3, [pc, #300]	; (8004418 <process_user_input+0x61c>)
 80042ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fc f94b 	bl	8000588 <__aeabi_f2d>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	484e      	ldr	r0, [pc, #312]	; (8004430 <process_user_input+0x634>)
 80042f8:	f007 feb6 	bl	800c068 <iprintf>
			 break;
 80042fc:	e05d      	b.n	80043ba <process_user_input+0x5be>
		 case 's':
			 HALL_CAL_SPEED = fmaxf(fminf(atof(fsmstate->cmd_buff), 10.0f), 0.0f);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3304      	adds	r3, #4
 8004302:	4618      	mov	r0, r3
 8004304:	f007 f9fe 	bl	800b704 <atof>
 8004308:	ec53 2b10 	vmov	r2, r3, d0
 800430c:	4610      	mov	r0, r2
 800430e:	4619      	mov	r1, r3
 8004310:	f7fc fc8a 	bl	8000c28 <__aeabi_d2f>
 8004314:	4603      	mov	r3, r0
 8004316:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 800431a:	ee00 3a10 	vmov	s0, r3
 800431e:	f006 ff0e 	bl	800b13e <fminf>
 8004322:	eef0 7a40 	vmov.f32	s15, s0
 8004326:	eddf 0a41 	vldr	s1, [pc, #260]	; 800442c <process_user_input+0x630>
 800432a:	eeb0 0a67 	vmov.f32	s0, s15
 800432e:	f006 feeb 	bl	800b108 <fmaxf>
 8004332:	eef0 7a40 	vmov.f32	s15, s0
 8004336:	4b38      	ldr	r3, [pc, #224]	; (8004418 <process_user_input+0x61c>)
 8004338:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			 printf("HALL_CAL_SPEED set to %f\r\n", HALL_CAL_SPEED);
 800433c:	4b36      	ldr	r3, [pc, #216]	; (8004418 <process_user_input+0x61c>)
 800433e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004340:	4618      	mov	r0, r3
 8004342:	f7fc f921 	bl	8000588 <__aeabi_f2d>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	483a      	ldr	r0, [pc, #232]	; (8004434 <process_user_input+0x638>)
 800434c:	f007 fe8c 	bl	800c068 <iprintf>
			 break;
 8004350:	e033      	b.n	80043ba <process_user_input+0x5be>
		 case 'n':
			 CAN_ID = atoi(fsmstate->cmd_buff);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	3304      	adds	r3, #4
 8004356:	4618      	mov	r0, r3
 8004358:	f007 f9d7 	bl	800b70a <atoi>
 800435c:	4603      	mov	r3, r0
 800435e:	4a30      	ldr	r2, [pc, #192]	; (8004420 <process_user_input+0x624>)
 8004360:	6053      	str	r3, [r2, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 8004362:	4b2f      	ldr	r3, [pc, #188]	; (8004420 <process_user_input+0x624>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	4619      	mov	r1, r3
 8004368:	4833      	ldr	r0, [pc, #204]	; (8004438 <process_user_input+0x63c>)
 800436a:	f007 fe7d 	bl	800c068 <iprintf>
			 break;
 800436e:	e024      	b.n	80043ba <process_user_input+0x5be>
		 case 'm':
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3304      	adds	r3, #4
 8004374:	4618      	mov	r0, r3
 8004376:	f007 f9c8 	bl	800b70a <atoi>
 800437a:	4603      	mov	r3, r0
 800437c:	4a28      	ldr	r2, [pc, #160]	; (8004420 <process_user_input+0x624>)
 800437e:	6093      	str	r3, [r2, #8]
			 printf("CAN_TX_ID set to %d\r\n", CAN_MASTER);
 8004380:	4b27      	ldr	r3, [pc, #156]	; (8004420 <process_user_input+0x624>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	4619      	mov	r1, r3
 8004386:	482d      	ldr	r0, [pc, #180]	; (800443c <process_user_input+0x640>)
 8004388:	f007 fe6e 	bl	800c068 <iprintf>
			 break;
 800438c:	e015      	b.n	80043ba <process_user_input+0x5be>
		 case 'o':
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3304      	adds	r3, #4
 8004392:	4618      	mov	r0, r3
 8004394:	f007 f9b9 	bl	800b70a <atoi>
 8004398:	4603      	mov	r3, r0
 800439a:	4a21      	ldr	r2, [pc, #132]	; (8004420 <process_user_input+0x624>)
 800439c:	60d3      	str	r3, [r2, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 800439e:	4b20      	ldr	r3, [pc, #128]	; (8004420 <process_user_input+0x624>)
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	4619      	mov	r1, r3
 80043a4:	4826      	ldr	r0, [pc, #152]	; (8004440 <process_user_input+0x644>)
 80043a6:	f007 fe5f 	bl	800c068 <iprintf>
			 break;
 80043aa:	e006      	b.n	80043ba <process_user_input+0x5be>
//		 case 'h':
//			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
//			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
//			 break;
		 default:
			 printf("\n\r '%c' Not a valid command prefix\n\r\n\r", fsmstate->cmd_buff);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3304      	adds	r3, #4
 80043b0:	4619      	mov	r1, r3
 80043b2:	4824      	ldr	r0, [pc, #144]	; (8004444 <process_user_input+0x648>)
 80043b4:	f007 fe58 	bl	800c068 <iprintf>
			 break;
 80043b8:	bf00      	nop

		 }

	 /* Write new settings to flash */

	 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 80043ba:	4b23      	ldr	r3, [pc, #140]	; (8004448 <process_user_input+0x64c>)
 80043bc:	691a      	ldr	r2, [r3, #16]
 80043be:	9200      	str	r2, [sp, #0]
 80043c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043c2:	f001 f80f 	bl	80053e4 <preference_writer_ready>
 80043c6:	4603      	mov	r3, r0
 80043c8:	f083 0301 	eor.w	r3, r3, #1
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <process_user_input+0x5dc>
 80043d2:	481d      	ldr	r0, [pc, #116]	; (8004448 <process_user_input+0x64c>)
 80043d4:	f000 fff7 	bl	80053c6 <preference_writer_open>
	 preference_writer_flush(&prefs);
 80043d8:	481b      	ldr	r0, [pc, #108]	; (8004448 <process_user_input+0x64c>)
 80043da:	f001 f811 	bl	8005400 <preference_writer_flush>
	 preference_writer_close(&prefs);
 80043de:	481a      	ldr	r0, [pc, #104]	; (8004448 <process_user_input+0x64c>)
 80043e0:	f001 f88c 	bl	80054fc <preference_writer_close>
	 preference_writer_load(prefs);
 80043e4:	4b18      	ldr	r3, [pc, #96]	; (8004448 <process_user_input+0x64c>)
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	9200      	str	r2, [sp, #0]
 80043ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043ec:	f001 f844 	bl	8005478 <preference_writer_load>

	 enter_setup_state();
 80043f0:	f7ff fb36 	bl	8003a60 <enter_setup_state>

	 fsmstate->bytecount = 0;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	731a      	strb	r2, [r3, #12]
	 fsmstate->cmd_id = 0;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	735a      	strb	r2, [r3, #13]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3304      	adds	r3, #4
 8004404:	2208      	movs	r2, #8
 8004406:	2100      	movs	r1, #0
 8004408:	4618      	mov	r0, r3
 800440a:	f007 f9bb 	bl	800b784 <memset>
 }
 800440e:	bf00      	nop
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	20000650 	.word	0x20000650
 800441c:	080100e4 	.word	0x080100e4
 8004420:	20008f64 	.word	0x20008f64
 8004424:	080100f8 	.word	0x080100f8
 8004428:	430f0000 	.word	0x430f0000
 800442c:	00000000 	.word	0x00000000
 8004430:	08010114 	.word	0x08010114
 8004434:	08010130 	.word	0x08010130
 8004438:	0801014c 	.word	0x0801014c
 800443c:	08010160 	.word	0x08010160
 8004440:	08010178 	.word	0x08010178
 8004444:	08010190 	.word	0x08010190
 8004448:	2000063c 	.word	0x2000063c

0800444c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b08a      	sub	sp, #40	; 0x28
 8004450:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004452:	f107 0314 	add.w	r3, r7, #20
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	605a      	str	r2, [r3, #4]
 800445c:	609a      	str	r2, [r3, #8]
 800445e:	60da      	str	r2, [r3, #12]
 8004460:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	613b      	str	r3, [r7, #16]
 8004466:	4b3d      	ldr	r3, [pc, #244]	; (800455c <MX_GPIO_Init+0x110>)
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	4a3c      	ldr	r2, [pc, #240]	; (800455c <MX_GPIO_Init+0x110>)
 800446c:	f043 0304 	orr.w	r3, r3, #4
 8004470:	6313      	str	r3, [r2, #48]	; 0x30
 8004472:	4b3a      	ldr	r3, [pc, #232]	; (800455c <MX_GPIO_Init+0x110>)
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800447e:	2300      	movs	r3, #0
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	4b36      	ldr	r3, [pc, #216]	; (800455c <MX_GPIO_Init+0x110>)
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	4a35      	ldr	r2, [pc, #212]	; (800455c <MX_GPIO_Init+0x110>)
 8004488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800448c:	6313      	str	r3, [r2, #48]	; 0x30
 800448e:	4b33      	ldr	r3, [pc, #204]	; (800455c <MX_GPIO_Init+0x110>)
 8004490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800449a:	2300      	movs	r3, #0
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	4b2f      	ldr	r3, [pc, #188]	; (800455c <MX_GPIO_Init+0x110>)
 80044a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a2:	4a2e      	ldr	r2, [pc, #184]	; (800455c <MX_GPIO_Init+0x110>)
 80044a4:	f043 0301 	orr.w	r3, r3, #1
 80044a8:	6313      	str	r3, [r2, #48]	; 0x30
 80044aa:	4b2c      	ldr	r3, [pc, #176]	; (800455c <MX_GPIO_Init+0x110>)
 80044ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	60bb      	str	r3, [r7, #8]
 80044b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044b6:	2300      	movs	r3, #0
 80044b8:	607b      	str	r3, [r7, #4]
 80044ba:	4b28      	ldr	r3, [pc, #160]	; (800455c <MX_GPIO_Init+0x110>)
 80044bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044be:	4a27      	ldr	r2, [pc, #156]	; (800455c <MX_GPIO_Init+0x110>)
 80044c0:	f043 0302 	orr.w	r3, r3, #2
 80044c4:	6313      	str	r3, [r2, #48]	; 0x30
 80044c6:	4b25      	ldr	r3, [pc, #148]	; (800455c <MX_GPIO_Init+0x110>)
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	607b      	str	r3, [r7, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 80044d2:	2200      	movs	r2, #0
 80044d4:	f648 0110 	movw	r1, #34832	; 0x8810
 80044d8:	4821      	ldr	r0, [pc, #132]	; (8004560 <MX_GPIO_Init+0x114>)
 80044da:	f003 fe0d 	bl	80080f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80044de:	2200      	movs	r2, #0
 80044e0:	2120      	movs	r1, #32
 80044e2:	4820      	ldr	r0, [pc, #128]	; (8004564 <MX_GPIO_Init+0x118>)
 80044e4:	f003 fe08 	bl	80080f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80044e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80044ee:	4b1e      	ldr	r3, [pc, #120]	; (8004568 <MX_GPIO_Init+0x11c>)
 80044f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f2:	2300      	movs	r3, #0
 80044f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80044f6:	f107 0314 	add.w	r3, r7, #20
 80044fa:	4619      	mov	r1, r3
 80044fc:	4819      	ldr	r0, [pc, #100]	; (8004564 <MX_GPIO_Init+0x118>)
 80044fe:	f003 fc67 	bl	8007dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15;
 8004502:	f648 0310 	movw	r3, #34832	; 0x8810
 8004506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004508:	2301      	movs	r3, #1
 800450a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450c:	2300      	movs	r3, #0
 800450e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004510:	2303      	movs	r3, #3
 8004512:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004514:	f107 0314 	add.w	r3, r7, #20
 8004518:	4619      	mov	r1, r3
 800451a:	4811      	ldr	r0, [pc, #68]	; (8004560 <MX_GPIO_Init+0x114>)
 800451c:	f003 fc58 	bl	8007dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004520:	2320      	movs	r3, #32
 8004522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004524:	2301      	movs	r3, #1
 8004526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004528:	2300      	movs	r3, #0
 800452a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800452c:	2303      	movs	r3, #3
 800452e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004530:	f107 0314 	add.w	r3, r7, #20
 8004534:	4619      	mov	r1, r3
 8004536:	480b      	ldr	r0, [pc, #44]	; (8004564 <MX_GPIO_Init+0x118>)
 8004538:	f003 fc4a 	bl	8007dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800453c:	2340      	movs	r3, #64	; 0x40
 800453e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004540:	2300      	movs	r3, #0
 8004542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004544:	2300      	movs	r3, #0
 8004546:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004548:	f107 0314 	add.w	r3, r7, #20
 800454c:	4619      	mov	r1, r3
 800454e:	4805      	ldr	r0, [pc, #20]	; (8004564 <MX_GPIO_Init+0x118>)
 8004550:	f003 fc3e 	bl	8007dd0 <HAL_GPIO_Init>

}
 8004554:	bf00      	nop
 8004556:	3728      	adds	r7, #40	; 0x28
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40023800 	.word	0x40023800
 8004560:	40020000 	.word	0x40020000
 8004564:	40020800 	.word	0x40020800
 8004568:	10210000 	.word	0x10210000

0800456c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b08a      	sub	sp, #40	; 0x28
 8004570:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004572:	f001 ff8b 	bl	800648c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004576:	f000 fae9 	bl	8004b4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800457a:	f7ff ff67 	bl	800444c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800457e:	f001 febd 	bl	80062fc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8004582:	f001 fda1 	bl	80060c8 <MX_TIM1_Init>
  MX_CAN1_Init();
 8004586:	f7fd fac1 	bl	8001b0c <MX_CAN1_Init>
  MX_SPI1_Init();
 800458a:	f000 ffc7 	bl	800551c <MX_SPI1_Init>
  MX_SPI3_Init();
 800458e:	f000 fffd 	bl	800558c <MX_SPI3_Init>
  MX_ADC1_Init();
 8004592:	f7fc fd4b 	bl	800102c <MX_ADC1_Init>
  MX_ADC2_Init();
 8004596:	f7fc fdb3 	bl	8001100 <MX_ADC2_Init>
  MX_ADC3_Init();
 800459a:	f7fc fdfb 	bl	8001194 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  /* Load settings from flash */
  preference_writer_init(&prefs, 6);
 800459e:	2106      	movs	r1, #6
 80045a0:	48b7      	ldr	r0, [pc, #732]	; (8004880 <main+0x314>)
 80045a2:	f000 feff 	bl	80053a4 <preference_writer_init>
  preference_writer_load(prefs);
 80045a6:	4bb6      	ldr	r3, [pc, #728]	; (8004880 <main+0x314>)
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	9200      	str	r2, [sp, #0]
 80045ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045ae:	f000 ff63 	bl	8005478 <preference_writer_load>

  /* Sanitize configs in case flash is empty*/
  if(E_ZERO==-1){E_ZERO = 0;}
 80045b2:	4bb4      	ldr	r3, [pc, #720]	; (8004884 <main+0x318>)
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ba:	d102      	bne.n	80045c2 <main+0x56>
 80045bc:	4bb1      	ldr	r3, [pc, #708]	; (8004884 <main+0x318>)
 80045be:	2200      	movs	r2, #0
 80045c0:	615a      	str	r2, [r3, #20]
  if(M_ZERO==-1){M_ZERO = 0;}
 80045c2:	4bb0      	ldr	r3, [pc, #704]	; (8004884 <main+0x318>)
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ca:	d102      	bne.n	80045d2 <main+0x66>
 80045cc:	4bad      	ldr	r3, [pc, #692]	; (8004884 <main+0x318>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	611a      	str	r2, [r3, #16]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 80045d2:	4bad      	ldr	r3, [pc, #692]	; (8004888 <main+0x31c>)
 80045d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80045d8:	eef4 7a67 	vcmp.f32	s15, s15
 80045dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e0:	d609      	bvs.n	80045f6 <main+0x8a>
 80045e2:	4ba9      	ldr	r3, [pc, #676]	; (8004888 <main+0x31c>)
 80045e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80045e8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80045ec:	eef4 7a47 	vcmp.f32	s15, s14
 80045f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f4:	d102      	bne.n	80045fc <main+0x90>
 80045f6:	4ba4      	ldr	r3, [pc, #656]	; (8004888 <main+0x31c>)
 80045f8:	4aa4      	ldr	r2, [pc, #656]	; (800488c <main+0x320>)
 80045fa:	609a      	str	r2, [r3, #8]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 80045fc:	4ba2      	ldr	r3, [pc, #648]	; (8004888 <main+0x31c>)
 80045fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8004602:	eef4 7a67 	vcmp.f32	s15, s15
 8004606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800460a:	d609      	bvs.n	8004620 <main+0xb4>
 800460c:	4b9e      	ldr	r3, [pc, #632]	; (8004888 <main+0x31c>)
 800460e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004612:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004616:	eef4 7a47 	vcmp.f32	s15, s14
 800461a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800461e:	d102      	bne.n	8004626 <main+0xba>
 8004620:	4b99      	ldr	r3, [pc, #612]	; (8004888 <main+0x31c>)
 8004622:	4a9b      	ldr	r2, [pc, #620]	; (8004890 <main+0x324>)
 8004624:	60da      	str	r2, [r3, #12]
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 8004626:	4b98      	ldr	r3, [pc, #608]	; (8004888 <main+0x31c>)
 8004628:	edd3 7a06 	vldr	s15, [r3, #24]
 800462c:	eef4 7a67 	vcmp.f32	s15, s15
 8004630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004634:	d609      	bvs.n	800464a <main+0xde>
 8004636:	4b94      	ldr	r3, [pc, #592]	; (8004888 <main+0x31c>)
 8004638:	edd3 7a06 	vldr	s15, [r3, #24]
 800463c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004640:	eef4 7a47 	vcmp.f32	s15, s14
 8004644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004648:	d103      	bne.n	8004652 <main+0xe6>
 800464a:	4b8f      	ldr	r3, [pc, #572]	; (8004888 <main+0x31c>)
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	619a      	str	r2, [r3, #24]
  if(CAN_ID==-1){CAN_ID = 1;}
 8004652:	4b8c      	ldr	r3, [pc, #560]	; (8004884 <main+0x318>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465a:	d102      	bne.n	8004662 <main+0xf6>
 800465c:	4b89      	ldr	r3, [pc, #548]	; (8004884 <main+0x318>)
 800465e:	2201      	movs	r2, #1
 8004660:	605a      	str	r2, [r3, #4]
  if(CAN_MASTER==-1){CAN_MASTER = 0;}
 8004662:	4b88      	ldr	r3, [pc, #544]	; (8004884 <main+0x318>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466a:	d102      	bne.n	8004672 <main+0x106>
 800466c:	4b85      	ldr	r3, [pc, #532]	; (8004884 <main+0x318>)
 800466e:	2200      	movs	r2, #0
 8004670:	609a      	str	r2, [r3, #8]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 8004672:	4b84      	ldr	r3, [pc, #528]	; (8004884 <main+0x318>)
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467a:	d103      	bne.n	8004684 <main+0x118>
 800467c:	4b81      	ldr	r3, [pc, #516]	; (8004884 <main+0x318>)
 800467e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004682:	60da      	str	r2, [r3, #12]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 8004684:	4b80      	ldr	r3, [pc, #512]	; (8004888 <main+0x31c>)
 8004686:	edd3 7a07 	vldr	s15, [r3, #28]
 800468a:	eef4 7a67 	vcmp.f32	s15, s15
 800468e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004692:	d609      	bvs.n	80046a8 <main+0x13c>
 8004694:	4b7c      	ldr	r3, [pc, #496]	; (8004888 <main+0x31c>)
 8004696:	edd3 7a07 	vldr	s15, [r3, #28]
 800469a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800469e:	eef4 7a47 	vcmp.f32	s15, s14
 80046a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a6:	d103      	bne.n	80046b0 <main+0x144>
 80046a8:	4b77      	ldr	r3, [pc, #476]	; (8004888 <main+0x31c>)
 80046aa:	f04f 0200 	mov.w	r2, #0
 80046ae:	61da      	str	r2, [r3, #28]
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 80046b0:	4b75      	ldr	r3, [pc, #468]	; (8004888 <main+0x31c>)
 80046b2:	edd3 7a08 	vldr	s15, [r3, #32]
 80046b6:	eef4 7a67 	vcmp.f32	s15, s15
 80046ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046be:	d609      	bvs.n	80046d4 <main+0x168>
 80046c0:	4b71      	ldr	r3, [pc, #452]	; (8004888 <main+0x31c>)
 80046c2:	edd3 7a08 	vldr	s15, [r3, #32]
 80046c6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80046ca:	eef4 7a47 	vcmp.f32	s15, s14
 80046ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d2:	d102      	bne.n	80046da <main+0x16e>
 80046d4:	4b6c      	ldr	r3, [pc, #432]	; (8004888 <main+0x31c>)
 80046d6:	4a6f      	ldr	r2, [pc, #444]	; (8004894 <main+0x328>)
 80046d8:	621a      	str	r2, [r3, #32]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 80046da:	4b6b      	ldr	r3, [pc, #428]	; (8004888 <main+0x31c>)
 80046dc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80046e0:	eef4 7a67 	vcmp.f32	s15, s15
 80046e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e8:	d609      	bvs.n	80046fe <main+0x192>
 80046ea:	4b67      	ldr	r3, [pc, #412]	; (8004888 <main+0x31c>)
 80046ec:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80046f0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80046f4:	eef4 7a47 	vcmp.f32	s15, s14
 80046f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046fc:	d102      	bne.n	8004704 <main+0x198>
 80046fe:	4b62      	ldr	r3, [pc, #392]	; (8004888 <main+0x31c>)
 8004700:	4a65      	ldr	r2, [pc, #404]	; (8004898 <main+0x32c>)
 8004702:	625a      	str	r2, [r3, #36]	; 0x24
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 8004704:	4b60      	ldr	r3, [pc, #384]	; (8004888 <main+0x31c>)
 8004706:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800470a:	eef4 7a67 	vcmp.f32	s15, s15
 800470e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004712:	d609      	bvs.n	8004728 <main+0x1bc>
 8004714:	4b5c      	ldr	r3, [pc, #368]	; (8004888 <main+0x31c>)
 8004716:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800471a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800471e:	eef4 7a47 	vcmp.f32	s15, s14
 8004722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004726:	d102      	bne.n	800472e <main+0x1c2>
 8004728:	4b57      	ldr	r3, [pc, #348]	; (8004888 <main+0x31c>)
 800472a:	4a5c      	ldr	r2, [pc, #368]	; (800489c <main+0x330>)
 800472c:	649a      	str	r2, [r3, #72]	; 0x48
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 800472e:	4b56      	ldr	r3, [pc, #344]	; (8004888 <main+0x31c>)
 8004730:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004734:	eef4 7a67 	vcmp.f32	s15, s15
 8004738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800473c:	d609      	bvs.n	8004752 <main+0x1e6>
 800473e:	4b52      	ldr	r3, [pc, #328]	; (8004888 <main+0x31c>)
 8004740:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004744:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004748:	eef4 7a47 	vcmp.f32	s15, s14
 800474c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004750:	d102      	bne.n	8004758 <main+0x1ec>
 8004752:	4b4d      	ldr	r3, [pc, #308]	; (8004888 <main+0x31c>)
 8004754:	4a52      	ldr	r2, [pc, #328]	; (80048a0 <main+0x334>)
 8004756:	629a      	str	r2, [r3, #40]	; 0x28
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 8004758:	4b4b      	ldr	r3, [pc, #300]	; (8004888 <main+0x31c>)
 800475a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800475e:	eef4 7a67 	vcmp.f32	s15, s15
 8004762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004766:	d609      	bvs.n	800477c <main+0x210>
 8004768:	4b47      	ldr	r3, [pc, #284]	; (8004888 <main+0x31c>)
 800476a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800476e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004772:	eef4 7a47 	vcmp.f32	s15, s14
 8004776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800477a:	d103      	bne.n	8004784 <main+0x218>
 800477c:	4b42      	ldr	r3, [pc, #264]	; (8004888 <main+0x31c>)
 800477e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004782:	645a      	str	r2, [r3, #68]	; 0x44
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 8004784:	4b40      	ldr	r3, [pc, #256]	; (8004888 <main+0x31c>)
 8004786:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800478a:	eef4 7a67 	vcmp.f32	s15, s15
 800478e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004792:	d609      	bvs.n	80047a8 <main+0x23c>
 8004794:	4b3c      	ldr	r3, [pc, #240]	; (8004888 <main+0x31c>)
 8004796:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800479a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800479e:	eef4 7a47 	vcmp.f32	s15, s14
 80047a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a6:	d103      	bne.n	80047b0 <main+0x244>
 80047a8:	4b37      	ldr	r3, [pc, #220]	; (8004888 <main+0x31c>)
 80047aa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047ae:	639a      	str	r2, [r3, #56]	; 0x38
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 80047b0:	4b35      	ldr	r3, [pc, #212]	; (8004888 <main+0x31c>)
 80047b2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80047b6:	eef4 7a67 	vcmp.f32	s15, s15
 80047ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047be:	d609      	bvs.n	80047d4 <main+0x268>
 80047c0:	4b31      	ldr	r3, [pc, #196]	; (8004888 <main+0x31c>)
 80047c2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80047c6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80047ca:	eef4 7a47 	vcmp.f32	s15, s14
 80047ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d2:	d102      	bne.n	80047da <main+0x26e>
 80047d4:	4b2c      	ldr	r3, [pc, #176]	; (8004888 <main+0x31c>)
 80047d6:	4a33      	ldr	r2, [pc, #204]	; (80048a4 <main+0x338>)
 80047d8:	65da      	str	r2, [r3, #92]	; 0x5c
  if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 5.0f;}
 80047da:	4b2b      	ldr	r3, [pc, #172]	; (8004888 <main+0x31c>)
 80047dc:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80047e0:	eef4 7a67 	vcmp.f32	s15, s15
 80047e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e8:	d609      	bvs.n	80047fe <main+0x292>
 80047ea:	4b27      	ldr	r3, [pc, #156]	; (8004888 <main+0x31c>)
 80047ec:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80047f0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80047f4:	eef4 7a47 	vcmp.f32	s15, s14
 80047f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047fc:	d102      	bne.n	8004804 <main+0x298>
 80047fe:	4b22      	ldr	r3, [pc, #136]	; (8004888 <main+0x31c>)
 8004800:	4a26      	ldr	r2, [pc, #152]	; (800489c <main+0x330>)
 8004802:	665a      	str	r2, [r3, #100]	; 0x64
  if(isnan(P_MAX)){P_MAX = 12.5f;}
 8004804:	4b20      	ldr	r3, [pc, #128]	; (8004888 <main+0x31c>)
 8004806:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800480a:	eef4 7a67 	vcmp.f32	s15, s15
 800480e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004812:	d702      	bvc.n	800481a <main+0x2ae>
 8004814:	4b1c      	ldr	r3, [pc, #112]	; (8004888 <main+0x31c>)
 8004816:	4a24      	ldr	r2, [pc, #144]	; (80048a8 <main+0x33c>)
 8004818:	651a      	str	r2, [r3, #80]	; 0x50
  if(isnan(P_MIN)){P_MIN = -12.5f;}
 800481a:	4b1b      	ldr	r3, [pc, #108]	; (8004888 <main+0x31c>)
 800481c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004820:	eef4 7a67 	vcmp.f32	s15, s15
 8004824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004828:	d702      	bvc.n	8004830 <main+0x2c4>
 800482a:	4b17      	ldr	r3, [pc, #92]	; (8004888 <main+0x31c>)
 800482c:	4a1f      	ldr	r2, [pc, #124]	; (80048ac <main+0x340>)
 800482e:	64da      	str	r2, [r3, #76]	; 0x4c
  if(isnan(V_MAX)){V_MAX = 65.0f;}
 8004830:	4b15      	ldr	r3, [pc, #84]	; (8004888 <main+0x31c>)
 8004832:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004836:	eef4 7a67 	vcmp.f32	s15, s15
 800483a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800483e:	d702      	bvc.n	8004846 <main+0x2da>
 8004840:	4b11      	ldr	r3, [pc, #68]	; (8004888 <main+0x31c>)
 8004842:	4a1b      	ldr	r2, [pc, #108]	; (80048b0 <main+0x344>)
 8004844:	659a      	str	r2, [r3, #88]	; 0x58
  if(isnan(V_MIN)){V_MIN = -65.0f;}
 8004846:	4b10      	ldr	r3, [pc, #64]	; (8004888 <main+0x31c>)
 8004848:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800484c:	eef4 7a67 	vcmp.f32	s15, s15
 8004850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004854:	d702      	bvc.n	800485c <main+0x2f0>
 8004856:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <main+0x31c>)
 8004858:	4a16      	ldr	r2, [pc, #88]	; (80048b4 <main+0x348>)
 800485a:	655a      	str	r2, [r3, #84]	; 0x54

//  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
  printf("\nFirmware Version:  %s\n", FIRMWARE_VERSION);
 800485c:	4916      	ldr	r1, [pc, #88]	; (80048b8 <main+0x34c>)
 800485e:	4817      	ldr	r0, [pc, #92]	; (80048bc <main+0x350>)
 8004860:	f007 fc02 	bl	800c068 <iprintf>
  printf("\nBuild Date:  %s\n", FIRMWARE_DATE);
 8004864:	4916      	ldr	r1, [pc, #88]	; (80048c0 <main+0x354>)
 8004866:	4817      	ldr	r0, [pc, #92]	; (80048c4 <main+0x358>)
 8004868:	f007 fbfe 	bl	800c068 <iprintf>
  printf("Build Time:  %s\n", FIRMWARE_TIME);
 800486c:	4916      	ldr	r1, [pc, #88]	; (80048c8 <main+0x35c>)
 800486e:	4817      	ldr	r0, [pc, #92]	; (80048cc <main+0x360>)
 8004870:	f007 fbfa 	bl	800c068 <iprintf>
  printf("\nAuthor:  %s\n", AUTHOR_NAME);
 8004874:	4916      	ldr	r1, [pc, #88]	; (80048d0 <main+0x364>)
 8004876:	4817      	ldr	r0, [pc, #92]	; (80048d4 <main+0x368>)
 8004878:	f007 fbf6 	bl	800c068 <iprintf>
  printf("\nModification Info:  %s\n", MODIFICATION_INFO);
 800487c:	4916      	ldr	r1, [pc, #88]	; (80048d8 <main+0x36c>)
 800487e:	e02d      	b.n	80048dc <main+0x370>
 8004880:	2000063c 	.word	0x2000063c
 8004884:	20008f64 	.word	0x20008f64
 8004888:	20000650 	.word	0x20000650
 800488c:	447a0000 	.word	0x447a0000
 8004890:	42200000 	.word	0x42200000
 8004894:	42fa0000 	.word	0x42fa0000
 8004898:	41600000 	.word	0x41600000
 800489c:	40a00000 	.word	0x40a00000
 80048a0:	41a80000 	.word	0x41a80000
 80048a4:	43fa0000 	.word	0x43fa0000
 80048a8:	41480000 	.word	0x41480000
 80048ac:	c1480000 	.word	0xc1480000
 80048b0:	42820000 	.word	0x42820000
 80048b4:	c2820000 	.word	0xc2820000
 80048b8:	080101b8 	.word	0x080101b8
 80048bc:	080101c0 	.word	0x080101c0
 80048c0:	080101d8 	.word	0x080101d8
 80048c4:	080101e4 	.word	0x080101e4
 80048c8:	080101f8 	.word	0x080101f8
 80048cc:	08010204 	.word	0x08010204
 80048d0:	08010218 	.word	0x08010218
 80048d4:	08010234 	.word	0x08010234
 80048d8:	08010244 	.word	0x08010244
 80048dc:	4888      	ldr	r0, [pc, #544]	; (8004b00 <main+0x594>)
 80048de:	f007 fbc3 	bl	800c068 <iprintf>
  }
  else{

  }

  init_controller_params(&controller);
 80048e2:	4888      	ldr	r0, [pc, #544]	; (8004b04 <main+0x598>)
 80048e4:	f7fe f964 	bl	8002bb0 <init_controller_params>

  /* calibration "encoder" zeroing */
  memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 80048e8:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80048ec:	2100      	movs	r1, #0
 80048ee:	4886      	ldr	r0, [pc, #536]	; (8004b08 <main+0x59c>)
 80048f0:	f006 ff48 	bl	800b784 <memset>

  /* commutation encoder setup */
  comm_encoder.m_zero = M_ZERO;
 80048f4:	4b85      	ldr	r3, [pc, #532]	; (8004b0c <main+0x5a0>)
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	4a85      	ldr	r2, [pc, #532]	; (8004b10 <main+0x5a4>)
 80048fa:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  comm_encoder.e_zero = E_ZERO;
 80048fe:	4b83      	ldr	r3, [pc, #524]	; (8004b0c <main+0x5a0>)
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	4a83      	ldr	r2, [pc, #524]	; (8004b10 <main+0x5a4>)
 8004904:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  comm_encoder.ppairs = PPAIRS;
 8004908:	4b82      	ldr	r3, [pc, #520]	; (8004b14 <main+0x5a8>)
 800490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490c:	4a80      	ldr	r2, [pc, #512]	; (8004b10 <main+0x5a4>)
 800490e:	6693      	str	r3, [r2, #104]	; 0x68

  if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
 8004910:	4b7f      	ldr	r3, [pc, #508]	; (8004b10 <main+0x5a4>)
 8004912:	4a7e      	ldr	r2, [pc, #504]	; (8004b0c <main+0x5a0>)
 8004914:	33dc      	adds	r3, #220	; 0xdc
 8004916:	f102 0118 	add.w	r1, r2, #24
 800491a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800491e:	4618      	mov	r0, r3
 8004920:	f006 ff22 	bl	800b768 <memcpy>
  else{memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));}
  ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 8004924:	2164      	movs	r1, #100	; 0x64
 8004926:	487a      	ldr	r0, [pc, #488]	; (8004b10 <main+0x5a4>)
 8004928:	f000 fb2a 	bl	8004f80 <ps_warmup>

  //for(int i = 0; i<128; i++){printf("%d\r\n", comm_encoder.offset_lut[i]);}

  /* Turn on ADCs */
  HAL_ADC_Start(&hadc1);
 800492c:	487a      	ldr	r0, [pc, #488]	; (8004b18 <main+0x5ac>)
 800492e:	f001 fe87 	bl	8006640 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8004932:	487a      	ldr	r0, [pc, #488]	; (8004b1c <main+0x5b0>)
 8004934:	f001 fe84 	bl	8006640 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 8004938:	4879      	ldr	r0, [pc, #484]	; (8004b20 <main+0x5b4>)
 800493a:	f001 fe81 	bl	8006640 <HAL_ADC_Start>

  /* DRV8323 setup */
  HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 800493e:	2201      	movs	r2, #1
 8004940:	2110      	movs	r1, #16
 8004942:	4878      	ldr	r0, [pc, #480]	; (8004b24 <main+0x5b8>)
 8004944:	f003 fbd8 	bl	80080f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_PIN, GPIO_PIN_SET );
 8004948:	2201      	movs	r2, #1
 800494a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800494e:	4875      	ldr	r0, [pc, #468]	; (8004b24 <main+0x5b8>)
 8004950:	f003 fbd2 	bl	80080f8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8004954:	2001      	movs	r0, #1
 8004956:	f001 fe0b 	bl	8006570 <HAL_Delay>
  //drv_calibrate(drv);
  HAL_Delay(1);
 800495a:	2001      	movs	r0, #1
 800495c:	f001 fe08 	bl	8006570 <HAL_Delay>
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 8004960:	4b71      	ldr	r3, [pc, #452]	; (8004b28 <main+0x5bc>)
 8004962:	2201      	movs	r2, #1
 8004964:	9206      	str	r2, [sp, #24]
 8004966:	2200      	movs	r2, #0
 8004968:	9205      	str	r2, [sp, #20]
 800496a:	2200      	movs	r2, #0
 800496c:	9204      	str	r2, [sp, #16]
 800496e:	2200      	movs	r2, #0
 8004970:	9203      	str	r2, [sp, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	9202      	str	r2, [sp, #8]
 8004976:	2201      	movs	r2, #1
 8004978:	9201      	str	r2, [sp, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	9200      	str	r2, [sp, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	2000      	movs	r0, #0
 8004982:	4610      	mov	r0, r2
 8004984:	889b      	ldrh	r3, [r3, #4]
 8004986:	2100      	movs	r1, #0
 8004988:	f363 010f 	bfi	r1, r3, #0, #16
 800498c:	2300      	movs	r3, #0
 800498e:	2200      	movs	r2, #0
 8004990:	f7fd fb59 	bl	8002046 <drv_write_DCR>
  HAL_Delay(1);
 8004994:	2001      	movs	r0, #1
 8004996:	f001 fdeb 	bl	8006570 <HAL_Delay>
  int CSA_GAIN;
  if(I_MAX <= 40.0f){CSA_GAIN = CSA_GAIN_40;}	// Up to 40A use 40X amplifier gain
 800499a:	4b5e      	ldr	r3, [pc, #376]	; (8004b14 <main+0x5a8>)
 800499c:	edd3 7a03 	vldr	s15, [r3, #12]
 80049a0:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8004b2c <main+0x5c0>
 80049a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ac:	d802      	bhi.n	80049b4 <main+0x448>
 80049ae:	2303      	movs	r3, #3
 80049b0:	607b      	str	r3, [r7, #4]
 80049b2:	e001      	b.n	80049b8 <main+0x44c>
  else{CSA_GAIN = CSA_GAIN_20;}					// From 40-60A use 20X amplifier gain.  (Make this generic in the future)
 80049b4:	2302      	movs	r3, #2
 80049b6:	607b      	str	r3, [r7, #4]
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1, SEN_LVL_0_25);
 80049b8:	4b5b      	ldr	r3, [pc, #364]	; (8004b28 <main+0x5bc>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	9206      	str	r2, [sp, #24]
 80049be:	2201      	movs	r2, #1
 80049c0:	9205      	str	r2, [sp, #20]
 80049c2:	2201      	movs	r2, #1
 80049c4:	9204      	str	r2, [sp, #16]
 80049c6:	2201      	movs	r2, #1
 80049c8:	9203      	str	r2, [sp, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	9202      	str	r2, [sp, #8]
 80049ce:	2203      	movs	r2, #3
 80049d0:	9201      	str	r2, [sp, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	9200      	str	r2, [sp, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	2000      	movs	r0, #0
 80049da:	4610      	mov	r0, r2
 80049dc:	889b      	ldrh	r3, [r3, #4]
 80049de:	2100      	movs	r1, #0
 80049e0:	f363 010f 	bfi	r1, r3, #0, #16
 80049e4:	2301      	movs	r3, #1
 80049e6:	2200      	movs	r2, #0
 80049e8:	f7fd fb9d 	bl	8002126 <drv_write_CSACR>
  HAL_Delay(1);
 80049ec:	2001      	movs	r0, #1
 80049ee:	f001 fdbf 	bl	8006570 <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN, 0x1, 0x0, 0x0, 0x0, SEN_LVL_0_25);
 80049f2:	4b4d      	ldr	r3, [pc, #308]	; (8004b28 <main+0x5bc>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	9206      	str	r2, [sp, #24]
 80049f8:	2200      	movs	r2, #0
 80049fa:	9205      	str	r2, [sp, #20]
 80049fc:	2200      	movs	r2, #0
 80049fe:	9204      	str	r2, [sp, #16]
 8004a00:	2200      	movs	r2, #0
 8004a02:	9203      	str	r2, [sp, #12]
 8004a04:	2201      	movs	r2, #1
 8004a06:	9202      	str	r2, [sp, #8]
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	9201      	str	r2, [sp, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	9200      	str	r2, [sp, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	2000      	movs	r0, #0
 8004a14:	4610      	mov	r0, r2
 8004a16:	889b      	ldrh	r3, [r3, #4]
 8004a18:	2100      	movs	r1, #0
 8004a1a:	f363 010f 	bfi	r1, r3, #0, #16
 8004a1e:	2301      	movs	r3, #1
 8004a20:	2200      	movs	r2, #0
 8004a22:	f7fd fb80 	bl	8002126 <drv_write_CSACR>
  HAL_Delay(1);
 8004a26:	2001      	movs	r0, #1
 8004a28:	f001 fda2 	bl	8006570 <HAL_Delay>
  zero_current(&controller);
 8004a2c:	4835      	ldr	r0, [pc, #212]	; (8004b04 <main+0x598>)
 8004a2e:	f7fe f87b 	bl	8002b28 <zero_current>
  HAL_Delay(1);
 8004a32:	2001      	movs	r0, #1
 8004a34:	f001 fd9c 	bl	8006570 <HAL_Delay>
  drv_write_OCPCR(drv, TRETRY_50US, DEADTIME_50NS, OCP_RETRY, OCP_DEG_8US, VDS_LVL_0_45);
 8004a38:	4b3b      	ldr	r3, [pc, #236]	; (8004b28 <main+0x5bc>)
 8004a3a:	2205      	movs	r2, #5
 8004a3c:	9202      	str	r2, [sp, #8]
 8004a3e:	2203      	movs	r2, #3
 8004a40:	9201      	str	r2, [sp, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	9200      	str	r2, [sp, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	2000      	movs	r0, #0
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	889b      	ldrh	r3, [r3, #4]
 8004a4e:	2100      	movs	r1, #0
 8004a50:	f363 010f 	bfi	r1, r3, #0, #16
 8004a54:	2300      	movs	r3, #0
 8004a56:	2201      	movs	r2, #1
 8004a58:	f7fd fb37 	bl	80020ca <drv_write_OCPCR>
  HAL_Delay(1);
 8004a5c:	2001      	movs	r0, #1
 8004a5e:	f001 fd87 	bl	8006570 <HAL_Delay>
  drv_disable_gd(drv);
 8004a62:	4b31      	ldr	r3, [pc, #196]	; (8004b28 <main+0x5bc>)
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	2100      	movs	r1, #0
 8004a68:	4611      	mov	r1, r2
 8004a6a:	889a      	ldrh	r2, [r3, #4]
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f362 030f 	bfi	r3, r2, #0, #16
 8004a72:	4608      	mov	r0, r1
 8004a74:	4619      	mov	r1, r3
 8004a76:	f7fd fbb2 	bl	80021de <drv_disable_gd>
  HAL_Delay(1);
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	f001 fd78 	bl	8006570 <HAL_Delay>
  //drv_enable_gd(drv);   */
//  printf("ADC A OFFSET: %d     ADC B OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset);

  /* Turn on PWM */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004a80:	2100      	movs	r1, #0
 8004a82:	482b      	ldr	r0, [pc, #172]	; (8004b30 <main+0x5c4>)
 8004a84:	f004 fd1c 	bl	80094c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8004a88:	2104      	movs	r1, #4
 8004a8a:	4829      	ldr	r0, [pc, #164]	; (8004b30 <main+0x5c4>)
 8004a8c:	f004 fd18 	bl	80094c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8004a90:	2108      	movs	r1, #8
 8004a92:	4827      	ldr	r0, [pc, #156]	; (8004b30 <main+0x5c4>)
 8004a94:	f004 fd14 	bl	80094c0 <HAL_TIM_PWM_Start>

  /* CAN setup */
  can_rx_init(&can_rx);
 8004a98:	4826      	ldr	r0, [pc, #152]	; (8004b34 <main+0x5c8>)
 8004a9a:	f7fd f8bd 	bl	8001c18 <can_rx_init>
  can_tx_init(&can_tx);
 8004a9e:	4826      	ldr	r0, [pc, #152]	; (8004b38 <main+0x5cc>)
 8004aa0:	f7fd f8e8 	bl	8001c74 <can_tx_init>
  HAL_CAN_Start(&CAN_H); //start CAN
 8004aa4:	4825      	ldr	r0, [pc, #148]	; (8004b3c <main+0x5d0>)
 8004aa6:	f002 fb85 	bl	80071b4 <HAL_CAN_Start>
  //__HAL_CAN_ENABLE_IT(&CAN_H, CAN_IT_RX_FIFO0_MSG_PENDING); // Start can interrupt

  /* Set Interrupt Priorities */
  HAL_NVIC_SetPriority(PWM_ISR, 0x0,0x0); // commutation > communication
 8004aaa:	2200      	movs	r2, #0
 8004aac:	2100      	movs	r1, #0
 8004aae:	2019      	movs	r0, #25
 8004ab0:	f003 f8c5 	bl	8007c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(CAN_ISR, 0x01, 0x01);
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	2014      	movs	r0, #20
 8004aba:	f003 f8c0 	bl	8007c3e <HAL_NVIC_SetPriority>

  /* Start the FSM */
  state.state = MENU_MODE;
 8004abe:	4b20      	ldr	r3, [pc, #128]	; (8004b40 <main+0x5d4>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	701a      	strb	r2, [r3, #0]
  state.next_state = MENU_MODE;
 8004ac4:	4b1e      	ldr	r3, [pc, #120]	; (8004b40 <main+0x5d4>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	705a      	strb	r2, [r3, #1]
  state.ready = 1;
 8004aca:	4b1d      	ldr	r3, [pc, #116]	; (8004b40 <main+0x5d4>)
 8004acc:	2201      	movs	r2, #1
 8004ace:	70da      	strb	r2, [r3, #3]


  /* Turn on interrupts */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	491c      	ldr	r1, [pc, #112]	; (8004b44 <main+0x5d8>)
 8004ad4:	481c      	ldr	r0, [pc, #112]	; (8004b48 <main+0x5dc>)
 8004ad6:	f005 fd48 	bl	800a56a <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8004ada:	4815      	ldr	r0, [pc, #84]	; (8004b30 <main+0x5c4>)
 8004adc:	f004 fc26 	bl	800932c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(100);
 8004ae0:	2064      	movs	r0, #100	; 0x64
 8004ae2:	f001 fd45 	bl	8006570 <HAL_Delay>
	  drv_print_faults(drv);
 8004ae6:	4b10      	ldr	r3, [pc, #64]	; (8004b28 <main+0x5bc>)
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	2100      	movs	r1, #0
 8004aec:	4611      	mov	r1, r2
 8004aee:	889a      	ldrh	r2, [r3, #4]
 8004af0:	2300      	movs	r3, #0
 8004af2:	f362 030f 	bfi	r3, r2, #0, #16
 8004af6:	4608      	mov	r0, r1
 8004af8:	4619      	mov	r1, r3
 8004afa:	f7fd fb8b 	bl	8002214 <drv_print_faults>
	  HAL_Delay(100);
 8004afe:	e7ef      	b.n	8004ae0 <main+0x574>
 8004b00:	0801026c 	.word	0x0801026c
 8004b04:	20000750 	.word	0x20000750
 8004b08:	20008c84 	.word	0x20008c84
 8004b0c:	20008f64 	.word	0x20008f64
 8004b10:	20000348 	.word	0x20000348
 8004b14:	20000650 	.word	0x20000650
 8004b18:	20000290 	.word	0x20000290
 8004b1c:	20000248 	.word	0x20000248
 8004b20:	200002d8 	.word	0x200002d8
 8004b24:	40020000 	.word	0x40020000
 8004b28:	20009384 	.word	0x20009384
 8004b2c:	42200000 	.word	0x42200000
 8004b30:	200094b8 	.word	0x200094b8
 8004b34:	2000938c 	.word	0x2000938c
 8004b38:	20009364 	.word	0x20009364
 8004b3c:	20000320 	.word	0x20000320
 8004b40:	2000062c 	.word	0x2000062c
 8004b44:	20000628 	.word	0x20000628
 8004b48:	20009500 	.word	0x20009500

08004b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b094      	sub	sp, #80	; 0x50
 8004b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b52:	f107 031c 	add.w	r3, r7, #28
 8004b56:	2234      	movs	r2, #52	; 0x34
 8004b58:	2100      	movs	r1, #0
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f006 fe12 	bl	800b784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b60:	f107 0308 	add.w	r3, r7, #8
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	605a      	str	r2, [r3, #4]
 8004b6a:	609a      	str	r2, [r3, #8]
 8004b6c:	60da      	str	r2, [r3, #12]
 8004b6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b70:	2300      	movs	r3, #0
 8004b72:	607b      	str	r3, [r7, #4]
 8004b74:	4b2c      	ldr	r3, [pc, #176]	; (8004c28 <SystemClock_Config+0xdc>)
 8004b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b78:	4a2b      	ldr	r2, [pc, #172]	; (8004c28 <SystemClock_Config+0xdc>)
 8004b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8004b80:	4b29      	ldr	r3, [pc, #164]	; (8004c28 <SystemClock_Config+0xdc>)
 8004b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b88:	607b      	str	r3, [r7, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	603b      	str	r3, [r7, #0]
 8004b90:	4b26      	ldr	r3, [pc, #152]	; (8004c2c <SystemClock_Config+0xe0>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a25      	ldr	r2, [pc, #148]	; (8004c2c <SystemClock_Config+0xe0>)
 8004b96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	4b23      	ldr	r3, [pc, #140]	; (8004c2c <SystemClock_Config+0xe0>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ba4:	603b      	str	r3, [r7, #0]
 8004ba6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004bac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bb0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004bb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004bba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004bbc:	2304      	movs	r3, #4
 8004bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8004bc0:	23b4      	movs	r3, #180	; 0xb4
 8004bc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004bc8:	2302      	movs	r3, #2
 8004bca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004bcc:	2302      	movs	r3, #2
 8004bce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004bd0:	f107 031c 	add.w	r3, r7, #28
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f003 fdc5 	bl	8008764 <HAL_RCC_OscConfig>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004be0:	f000 f826 	bl	8004c30 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004be4:	f003 faa2 	bl	800812c <HAL_PWREx_EnableOverDrive>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8004bee:	f000 f81f 	bl	8004c30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004bf2:	230f      	movs	r3, #15
 8004bf4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004bfe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004c02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c08:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004c0a:	f107 0308 	add.w	r3, r7, #8
 8004c0e:	2105      	movs	r1, #5
 8004c10:	4618      	mov	r0, r3
 8004c12:	f003 fadb 	bl	80081cc <HAL_RCC_ClockConfig>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8004c1c:	f000 f808 	bl	8004c30 <Error_Handler>
  }
}
 8004c20:	bf00      	nop
 8004c22:	3750      	adds	r7, #80	; 0x50
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	40007000 	.word	0x40007000

08004c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004c34:	bf00      	nop
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <fast_fmaxf>:

#include "math_ops.h"
#include "lookup.h"


float fast_fmaxf(float x, float y){
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	ed87 0a01 	vstr	s0, [r7, #4]
 8004c48:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8004c4c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004c50:	edd7 7a00 	vldr	s15, [r7]
 8004c54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c5c:	dd01      	ble.n	8004c62 <fast_fmaxf+0x24>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	e000      	b.n	8004c64 <fast_fmaxf+0x26>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	ee07 3a90 	vmov	s15, r3
    }
 8004c68:	eeb0 0a67 	vmov.f32	s0, s15
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <fast_fminf>:

float fast_fminf(float x, float y){
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	ed87 0a01 	vstr	s0, [r7, #4]
 8004c80:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 8004c84:	ed97 7a01 	vldr	s14, [r7, #4]
 8004c88:	edd7 7a00 	vldr	s15, [r7]
 8004c8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c94:	d501      	bpl.n	8004c9a <fast_fminf+0x24>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	e000      	b.n	8004c9c <fast_fminf+0x26>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	ee07 3a90 	vmov	s15, r3
    }
 8004ca0:	eeb0 0a67 	vmov.f32	s0, s15
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <fmaxf3>:

float fmaxf3(float x, float y, float z){
 8004cae:	b480      	push	{r7}
 8004cb0:	b085      	sub	sp, #20
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	ed87 0a03 	vstr	s0, [r7, #12]
 8004cb8:	edc7 0a02 	vstr	s1, [r7, #8]
 8004cbc:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 8004cc0:	ed97 7a03 	vldr	s14, [r7, #12]
 8004cc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8004cc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd0:	dd0c      	ble.n	8004cec <fmaxf3+0x3e>
 8004cd2:	ed97 7a03 	vldr	s14, [r7, #12]
 8004cd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce2:	dd01      	ble.n	8004ce8 <fmaxf3+0x3a>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	e00d      	b.n	8004d04 <fmaxf3+0x56>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	e00b      	b.n	8004d04 <fmaxf3+0x56>
 8004cec:	ed97 7a02 	vldr	s14, [r7, #8]
 8004cf0:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cf4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cfc:	dd01      	ble.n	8004d02 <fmaxf3+0x54>
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	e000      	b.n	8004d04 <fmaxf3+0x56>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	ee07 3a90 	vmov	s15, r3
    }
 8004d08:	eeb0 0a67 	vmov.f32	s0, s15
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <fminf3>:

float fminf3(float x, float y, float z){
 8004d16:	b480      	push	{r7}
 8004d18:	b085      	sub	sp, #20
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	ed87 0a03 	vstr	s0, [r7, #12]
 8004d20:	edc7 0a02 	vstr	s1, [r7, #8]
 8004d24:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 8004d28:	ed97 7a03 	vldr	s14, [r7, #12]
 8004d2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d38:	d50c      	bpl.n	8004d54 <fminf3+0x3e>
 8004d3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8004d3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d4a:	d501      	bpl.n	8004d50 <fminf3+0x3a>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	e00d      	b.n	8004d6c <fminf3+0x56>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	e00b      	b.n	8004d6c <fminf3+0x56>
 8004d54:	ed97 7a02 	vldr	s14, [r7, #8]
 8004d58:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d64:	d501      	bpl.n	8004d6a <fminf3+0x54>
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	e000      	b.n	8004d6c <fminf3+0x56>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	ee07 3a90 	vmov	s15, r3
    }
 8004d70:	eeb0 0a67 	vmov.f32	s0, s15
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <limit_norm>:
float roundf(float x){
    /// Returns nearest integer ///
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b086      	sub	sp, #24
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	ed87 0a01 	vstr	s0, [r7, #4]
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	ed93 7a00 	vldr	s14, [r3]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	edd3 7a00 	vldr	s15, [r3]
 8004d98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	edd3 6a00 	vldr	s13, [r3]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	edd3 7a00 	vldr	s15, [r3]
 8004da8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004db0:	eeb0 0a67 	vmov.f32	s0, s15
 8004db4:	f006 fa76 	bl	800b2a4 <sqrtf>
 8004db8:	ed87 0a05 	vstr	s0, [r7, #20]
    if(norm > limit){
 8004dbc:	ed97 7a05 	vldr	s14, [r7, #20]
 8004dc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8004dc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dcc:	dc00      	bgt.n	8004dd0 <limit_norm+0x52>
        *x = *x * limit/norm;
        *y = *y * limit/norm;
        }
    }
 8004dce:	e01b      	b.n	8004e08 <limit_norm+0x8a>
        *x = *x * limit/norm;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	ed93 7a00 	vldr	s14, [r3]
 8004dd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004dda:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004dde:	ed97 7a05 	vldr	s14, [r7, #20]
 8004de2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	edc3 7a00 	vstr	s15, [r3]
        *y = *y * limit/norm;
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	ed93 7a00 	vldr	s14, [r3]
 8004df2:	edd7 7a01 	vldr	s15, [r7, #4]
 8004df6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004dfa:	ed97 7a05 	vldr	s14, [r7, #20]
 8004dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	edc3 7a00 	vstr	s15, [r3]
    }
 8004e08:	bf00      	nop
 8004e0a:	3718      	adds	r7, #24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <float_to_uint>:
    
void limit(float *x, float min, float max){
    *x = fast_fmaxf(fast_fminf(*x, max), min);
    }

int float_to_uint(float x, float x_min, float x_max, int bits){
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	ed87 0a03 	vstr	s0, [r7, #12]
 8004e1a:	edc7 0a02 	vstr	s1, [r7, #8]
 8004e1e:	ed87 1a01 	vstr	s2, [r7, #4]
 8004e22:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 8004e24:	ed97 7a01 	vldr	s14, [r7, #4]
 8004e28:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e30:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 8004e38:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004e44:	2201      	movs	r2, #1
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	ee07 3a90 	vmov	s15, r3
 8004e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e56:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004e5a:	ed97 7a05 	vldr	s14, [r7, #20]
 8004e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e66:	ee17 3a90 	vmov	r3, s15
    }
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	371c      	adds	r7, #28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <uint_to_float>:
    
    
float uint_to_float(int x_int, float x_min, float x_max, int bits){
 8004e76:	b480      	push	{r7}
 8004e78:	b087      	sub	sp, #28
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	60f8      	str	r0, [r7, #12]
 8004e7e:	ed87 0a02 	vstr	s0, [r7, #8]
 8004e82:	edc7 0a01 	vstr	s1, [r7, #4]
 8004e86:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 8004e88:	ed97 7a01 	vldr	s14, [r7, #4]
 8004e8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e94:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	ee07 3a90 	vmov	s15, r3
 8004ea2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ea6:	edd7 7a05 	vldr	s15, [r7, #20]
 8004eaa:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004eae:	2201      	movs	r2, #1
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	ee07 3a90 	vmov	s15, r3
 8004ebc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ec0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ec4:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 8004ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8004ed0:	371c      	adds	r7, #28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
	...

08004edc <sin_lut>:

float sin_lut(float theta){
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWO_PI_F);
 8004ee6:	eddf 0a17 	vldr	s1, [pc, #92]	; 8004f44 <sin_lut+0x68>
 8004eea:	ed97 0a01 	vldr	s0, [r7, #4]
 8004eee:	f006 f9ad 	bl	800b24c <fmodf>
 8004ef2:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = theta<0 ? theta + TWO_PI_F : theta;
 8004ef6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004efa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f02:	d506      	bpl.n	8004f12 <sin_lut+0x36>
 8004f04:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f08:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004f44 <sin_lut+0x68>
 8004f0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f10:	e001      	b.n	8004f16 <sin_lut+0x3a>
 8004f12:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f16:	edc7 7a01 	vstr	s15, [r7, #4]

	return sin_tab[(int) (LUT_MULT*theta)];
 8004f1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f1e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004f48 <sin_lut+0x6c>
 8004f22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f2a:	ee17 3a90 	vmov	r3, s15
 8004f2e:	4a07      	ldr	r2, [pc, #28]	; (8004f4c <sin_lut+0x70>)
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	ee07 3a90 	vmov	s15, r3
}
 8004f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40c90fdb 	.word	0x40c90fdb
 8004f48:	42a2f983 	.word	0x42a2f983
 8004f4c:	080102f4 	.word	0x080102f4

08004f50 <cos_lut>:

float cos_lut(float theta){
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lut(PI_OVER_2_F - theta);
 8004f5a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004f7c <cos_lut+0x2c>
 8004f5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f66:	eeb0 0a67 	vmov.f32	s0, s15
 8004f6a:	f7ff ffb7 	bl	8004edc <sin_lut>
 8004f6e:	eef0 7a40 	vmov.f32	s15, s0
}
 8004f72:	eeb0 0a67 	vmov.f32	s0, s15
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	3fc90fdb 	.word	0x3fc90fdb

08004f80 <ps_warmup>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void ps_warmup(EncoderStruct * encoder, int n){
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af02      	add	r7, sp, #8
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
	for(int i = 0; i<n; i++){
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	e021      	b.n	8004fd4 <ps_warmup+0x54>
		encoder->spi_tx_word = 0x0000;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 8004f96:	2200      	movs	r2, #0
 8004f98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f9c:	4812      	ldr	r0, [pc, #72]	; (8004fe8 <ps_warmup+0x68>)
 8004f9e:	f003 f8ab 	bl	80080f8 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 8004fa2:	6879      	ldr	r1, [r7, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	1c9a      	adds	r2, r3, #2
 8004fa8:	2364      	movs	r3, #100	; 0x64
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	2301      	movs	r3, #1
 8004fae:	480f      	ldr	r0, [pc, #60]	; (8004fec <ps_warmup+0x6c>)
 8004fb0:	f003 feff 	bl	8008db2 <HAL_SPI_TransmitReceive>
		while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8004fb4:	bf00      	nop
 8004fb6:	4b0d      	ldr	r3, [pc, #52]	; (8004fec <ps_warmup+0x6c>)
 8004fb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d0f9      	beq.n	8004fb6 <ps_warmup+0x36>
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fc8:	4807      	ldr	r0, [pc, #28]	; (8004fe8 <ps_warmup+0x68>)
 8004fca:	f003 f895 	bl	80080f8 <HAL_GPIO_WritePin>
	for(int i = 0; i<n; i++){
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	dbd9      	blt.n	8004f90 <ps_warmup+0x10>
	}
}
 8004fdc:	bf00      	nop
 8004fde:	bf00      	nop
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	40020000 	.word	0x40020000
 8004fec:	20009408 	.word	0x20009408

08004ff0 <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08c      	sub	sp, #48	; 0x30
 8004ff4:	af02      	add	r7, sp, #8
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	ed87 0a00 	vstr	s0, [r7]
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	609a      	str	r2, [r3, #8]
	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
 8005004:	2313      	movs	r3, #19
 8005006:	627b      	str	r3, [r7, #36]	; 0x24
 8005008:	e011      	b.n	800502e <ps_sample+0x3e>
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	3b01      	subs	r3, #1
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	3302      	adds	r3, #2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	3304      	adds	r3, #4
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	3302      	adds	r3, #2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	440b      	add	r3, r1
 8005024:	3304      	adds	r3, #4
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502a:	3b01      	subs	r3, #1
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	2b00      	cmp	r3, #0
 8005032:	dcea      	bgt.n	800500a <ps_sample+0x1a>
	//for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->count_buff[i] = encoder->count_buff[i-1];}
	//memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float)); // this is much slower for some reason

	/* SPI read/write */
	encoder->spi_tx_word = ENC_READ_WORD;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 800503a:	2200      	movs	r2, #0
 800503c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005040:	48ac      	ldr	r0, [pc, #688]	; (80052f4 <ps_sample+0x304>)
 8005042:	f003 f859 	bl	80080f8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	1c9a      	adds	r2, r3, #2
 800504c:	2364      	movs	r3, #100	; 0x64
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	2301      	movs	r3, #1
 8005052:	48a9      	ldr	r0, [pc, #676]	; (80052f8 <ps_sample+0x308>)
 8005054:	f003 fead 	bl	8008db2 <HAL_SPI_TransmitReceive>
	while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8005058:	bf00      	nop
 800505a:	4ba7      	ldr	r3, [pc, #668]	; (80052f8 <ps_sample+0x308>)
 800505c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d0f9      	beq.n	800505a <ps_sample+0x6a>
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 8005066:	2201      	movs	r2, #1
 8005068:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800506c:	48a1      	ldr	r0, [pc, #644]	; (80052f4 <ps_sample+0x304>)
 800506e:	f003 f843 	bl	80080f8 <HAL_GPIO_WritePin>
	encoder->raw = encoder ->spi_rx_word;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	885b      	ldrh	r3, [r3, #2]
 8005076:	461a      	mov	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	675a      	str	r2, [r3, #116]	; 0x74

	/* Linearization */
	int off_1 = encoder->offset_lut[(encoder->raw)>>9];				// lookup table lower entry
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005080:	125b      	asrs	r3, r3, #9
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	3336      	adds	r3, #54	; 0x36
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	61fb      	str	r3, [r7, #28]
	int off_2 = encoder->offset_lut[((encoder->raw>>9)+1)%128];		// lookup table higher entry
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005092:	125b      	asrs	r3, r3, #9
 8005094:	3301      	adds	r3, #1
 8005096:	425a      	negs	r2, r3
 8005098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800509c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050a0:	bf58      	it	pl
 80050a2:	4253      	negpl	r3, r2
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	3336      	adds	r3, #54	; 0x36
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	61bb      	str	r3, [r7, #24]
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>9)<<9))>>9);     // Interpolate between lookup table entries
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80050ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050be:	fb02 f303 	mul.w	r3, r2, r3
 80050c2:	125b      	asrs	r3, r3, #9
 80050c4:	69fa      	ldr	r2, [r7, #28]
 80050c6:	4413      	add	r3, r2
 80050c8:	617b      	str	r3, [r7, #20]
	encoder->count = encoder->raw + off_interp;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	441a      	add	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	679a      	str	r2, [r3, #120]	; 0x78


	/* Real angles in radians */
	encoder->angle_singleturn = ((float)(encoder->count-M_ZERO))/((float)ENC_CPR);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80050da:	4b88      	ldr	r3, [pc, #544]	; (80052fc <ps_sample+0x30c>)
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	ee07 3a90 	vmov	s15, r3
 80050e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050e8:	eddf 6a85 	vldr	s13, [pc, #532]	; 8005300 <ps_sample+0x310>
 80050ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	edc3 7a01 	vstr	s15, [r3, #4]
	int int_angle = encoder->angle_singleturn;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80050fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005100:	ee17 3a90 	vmov	r3, s15
 8005104:	613b      	str	r3, [r7, #16]
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	ed93 7a01 	vldr	s14, [r3, #4]
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005116:	ee77 7a67 	vsub.f32	s15, s14, s15
 800511a:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8005304 <ps_sample+0x314>
 800511e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	edc3 7a01 	vstr	s15, [r3, #4]
	//encoder->angle_singleturn = TWO_PI_F*fmodf(((float)(encoder->count-M_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	edd3 7a01 	vldr	s15, [r3, #4]
 800512e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005136:	d507      	bpl.n	8005148 <ps_sample+0x158>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	edd3 7a01 	vldr	s15, [r3, #4]
 800513e:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8005304 <ps_sample+0x314>
 8005142:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005146:	e002      	b.n	800514e <ps_sample+0x15e>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	edd3 7a01 	vldr	s15, [r3, #4]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	edc3 7a01 	vstr	s15, [r3, #4]

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800515e:	4b67      	ldr	r3, [pc, #412]	; (80052fc <ps_sample+0x30c>)
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	ee07 3a90 	vmov	s15, r3
 8005168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800516c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005170:	eddf 6a63 	vldr	s13, [pc, #396]	; 8005300 <ps_sample+0x310>
 8005174:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	int_angle = (int)encoder->elec_angle;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8005184:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005188:	ee17 3a90 	vmov	r3, s15
 800518c:	613b      	str	r3, [r7, #16]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800519e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051a2:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8005304 <ps_sample+0x314>
 80051a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	//encoder->elec_angle = TWO_PI_F*fmodf((encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80051b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051be:	d507      	bpl.n	80051d0 <ps_sample+0x1e0>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80051c6:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8005304 <ps_sample+0x314>
 80051ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051ce:	e002      	b.n	80051d6 <ps_sample+0x1e6>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	/* Rollover */
	int rollover = 0;
 80051dc:	2300      	movs	r3, #0
 80051de:	623b      	str	r3, [r7, #32]
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80051ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051f0:	edc7 7a03 	vstr	s15, [r7, #12]
	if(angle_diff > PI_F){rollover = -1;}
 80051f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80051f8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8005308 <ps_sample+0x318>
 80051fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005204:	dd03      	ble.n	800520e <ps_sample+0x21e>
 8005206:	f04f 33ff 	mov.w	r3, #4294967295
 800520a:	623b      	str	r3, [r7, #32]
 800520c:	e00a      	b.n	8005224 <ps_sample+0x234>
	else if(angle_diff < -PI_F){rollover = 1;}
 800520e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005212:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800530c <ps_sample+0x31c>
 8005216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800521a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800521e:	d501      	bpl.n	8005224 <ps_sample+0x234>
 8005220:	2301      	movs	r3, #1
 8005222:	623b      	str	r3, [r7, #32]
	encoder->turns += rollover;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800522a:	6a3b      	ldr	r3, [r7, #32]
 800522c:	441a      	add	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if(!encoder->first_sample){
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 32dc 	ldrb.w	r3, [r3, #732]	; 0x2dc
 800523a:	2b00      	cmp	r3, #0
 800523c:	d125      	bne.n	800528a <ps_sample+0x29a>
		encoder->turns = 0;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		if(encoder->angle_singleturn > PI_OVER_2_F){encoder->turns = -1;}
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	edd3 7a01 	vldr	s15, [r3, #4]
 800524c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005310 <ps_sample+0x320>
 8005250:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005258:	dd05      	ble.n	8005266 <ps_sample+0x276>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f04f 32ff 	mov.w	r2, #4294967295
 8005260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005264:	e00d      	b.n	8005282 <ps_sample+0x292>
		else if(encoder->angle_singleturn < -PI_OVER_2_F){encoder->turns = 1;}
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	edd3 7a01 	vldr	s15, [r3, #4]
 800526c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8005314 <ps_sample+0x324>
 8005270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005278:	d503      	bpl.n	8005282 <ps_sample+0x292>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		encoder->first_sample = 1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 22dc 	strb.w	r2, [r3, #732]	; 0x2dc
	}



	/* Multi-turn position */
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	ed93 7a01 	vldr	s14, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005296:	ee07 3a90 	vmov	s15, r3
 800529a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800529e:	eddf 6a19 	vldr	s13, [pc, #100]	; 8005304 <ps_sample+0x314>
 80052a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80052a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	edc3 7a03 	vstr	s15, [r3, #12]
			c1 += encoder->angle_multiturn[i]*q*(i - ibar);
		}
		encoder->vel2 = -c1/dt;
*/
	//encoder->velocity = vel2
	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	ed93 7a03 	vldr	s14, [r3, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80052bc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80052c0:	edd7 7a00 	vldr	s15, [r7]
 80052c4:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80052c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80052cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80052e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

}
 80052ec:	bf00      	nop
 80052ee:	3728      	adds	r7, #40	; 0x28
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	40020000 	.word	0x40020000
 80052f8:	20009408 	.word	0x20009408
 80052fc:	20008f64 	.word	0x20008f64
 8005300:	47800000 	.word	0x47800000
 8005304:	40c90fdb 	.word	0x40c90fdb
 8005308:	40490fdb 	.word	0x40490fdb
 800530c:	c0490fdb 	.word	0xc0490fdb
 8005310:	3fc90fdb 	.word	0x3fc90fdb
 8005314:	bfc90fdb 	.word	0xbfc90fdb

08005318 <ps_print>:

void ps_print(EncoderStruct * encoder, int dt_ms){
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
	printf("Raw: %d", encoder->raw);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005326:	4619      	mov	r1, r3
 8005328:	4818      	ldr	r0, [pc, #96]	; (800538c <ps_print+0x74>)
 800532a:	f006 fe9d 	bl	800c068 <iprintf>
	printf("   Linearized Count: %d", encoder->count);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005332:	4619      	mov	r1, r3
 8005334:	4816      	ldr	r0, [pc, #88]	; (8005390 <ps_print+0x78>)
 8005336:	f006 fe97 	bl	800c068 <iprintf>
	printf("   Single Turn: %f", encoder->angle_singleturn);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	4618      	mov	r0, r3
 8005340:	f7fb f922 	bl	8000588 <__aeabi_f2d>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	4812      	ldr	r0, [pc, #72]	; (8005394 <ps_print+0x7c>)
 800534a:	f006 fe8d 	bl	800c068 <iprintf>
	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	4618      	mov	r0, r3
 8005354:	f7fb f918 	bl	8000588 <__aeabi_f2d>
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	480e      	ldr	r0, [pc, #56]	; (8005398 <ps_print+0x80>)
 800535e:	f006 fe83 	bl	800c068 <iprintf>
	printf("   Electrical: %f", encoder->elec_angle);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005366:	4618      	mov	r0, r3
 8005368:	f7fb f90e 	bl	8000588 <__aeabi_f2d>
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	480a      	ldr	r0, [pc, #40]	; (800539c <ps_print+0x84>)
 8005372:	f006 fe79 	bl	800c068 <iprintf>
	printf("   Turns:  %d\r\n", encoder->turns);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800537c:	4619      	mov	r1, r3
 800537e:	4808      	ldr	r0, [pc, #32]	; (80053a0 <ps_print+0x88>)
 8005380:	f006 fe72 	bl	800c068 <iprintf>
	//HAL_Delay(dt_ms);
}
 8005384:	bf00      	nop
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	08010288 	.word	0x08010288
 8005390:	08010290 	.word	0x08010290
 8005394:	080102a8 	.word	0x080102a8
 8005398:	080102bc 	.word	0x080102bc
 800539c:	080102d0 	.word	0x080102d0
 80053a0:	080102e4 	.word	0x080102e4

080053a4 <preference_writer_init>:
    __sector = sector;
    __ready = false;
}
*/

void preference_writer_init(PreferenceWriter * pr, uint32_t sector){
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
	flash_writer_init(&pr->fw, sector);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6839      	ldr	r1, [r7, #0]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fd f822 	bl	80023fc <flash_writer_init>
	pr->sector = sector;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	60da      	str	r2, [r3, #12]
}
 80053be:	bf00      	nop
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <preference_writer_open>:


void preference_writer_open(PreferenceWriter * pr) {
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b082      	sub	sp, #8
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
    flash_writer_open(&pr->fw);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fd f831 	bl	8002438 <flash_writer_open>
    pr->ready = true;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	741a      	strb	r2, [r3, #16]
}
 80053dc:	bf00      	nop
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <preference_writer_ready>:

bool  preference_writer_ready(PreferenceWriter pr) {
 80053e4:	b084      	sub	sp, #16
 80053e6:	b490      	push	{r4, r7}
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	f107 0408 	add.w	r4, r7, #8
 80053ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return pr.ready;
 80053f2:	7e3b      	ldrb	r3, [r7, #24]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bc90      	pop	{r4, r7}
 80053fa:	b004      	add	sp, #16
 80053fc:	4770      	bx	lr
	...

08005400 <preference_writer_flush>:

void preference_writer_write_float(float x, int index) {
    __float_reg[index] = x;
}

void preference_writer_flush(PreferenceWriter * pr) {
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af02      	add	r7, sp, #8
 8005406:	6078      	str	r0, [r7, #4]
    int offs;
    for (offs = 0; offs < 256; offs++) {
 8005408:	2300      	movs	r3, #0
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	e00d      	b.n	800542a <preference_writer_flush+0x2a>
        flash_writer_write_int(pr->fw, offs, __int_reg[offs]);
 800540e:	68f9      	ldr	r1, [r7, #12]
 8005410:	4a17      	ldr	r2, [pc, #92]	; (8005470 <preference_writer_flush+0x70>)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	460b      	mov	r3, r1
 800541e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005420:	f7fd f826 	bl	8002470 <flash_writer_write_int>
    for (offs = 0; offs < 256; offs++) {
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	3301      	adds	r3, #1
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2bff      	cmp	r3, #255	; 0xff
 800542e:	ddee      	ble.n	800540e <preference_writer_flush+0xe>
    }
    for (; offs < 320; offs++) {
 8005430:	e012      	b.n	8005458 <preference_writer_flush+0x58>
        flash_writer_write_float(pr->fw, offs, __float_reg[offs - 256]);
 8005432:	68f9      	ldr	r1, [r7, #12]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800543a:	4a0e      	ldr	r2, [pc, #56]	; (8005474 <preference_writer_flush+0x74>)
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	edd3 7a00 	vldr	s15, [r3]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	eeb0 0a67 	vmov.f32	s0, s15
 800544a:	460b      	mov	r3, r1
 800544c:	ca07      	ldmia	r2, {r0, r1, r2}
 800544e:	f7fd f825 	bl	800249c <flash_writer_write_float>
    for (; offs < 320; offs++) {
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3301      	adds	r3, #1
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800545e:	dbe8      	blt.n	8005432 <preference_writer_flush+0x32>
    }
    pr->ready = false;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	741a      	strb	r2, [r3, #16]
}
 8005466:	bf00      	nop
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	20008f64 	.word	0x20008f64
 8005474:	20000650 	.word	0x20000650

08005478 <preference_writer_load>:

void preference_writer_load(PreferenceWriter pr) {
 8005478:	b084      	sub	sp, #16
 800547a:	b590      	push	{r4, r7, lr}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	f107 0418 	add.w	r4, r7, #24
 8005484:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int offs;
    for (offs = 0; offs < 256; offs++) {
 8005488:	2300      	movs	r3, #0
 800548a:	607b      	str	r3, [r7, #4]
 800548c:	e00d      	b.n	80054aa <preference_writer_load+0x32>
        __int_reg[offs] = flash_read_int(pr.fw, offs);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f107 0218 	add.w	r2, r7, #24
 8005494:	ca07      	ldmia	r2, {r0, r1, r2}
 8005496:	f7fd f827 	bl	80024e8 <flash_read_int>
 800549a:	4602      	mov	r2, r0
 800549c:	4915      	ldr	r1, [pc, #84]	; (80054f4 <preference_writer_load+0x7c>)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (offs = 0; offs < 256; offs++) {
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3301      	adds	r3, #1
 80054a8:	607b      	str	r3, [r7, #4]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2bff      	cmp	r3, #255	; 0xff
 80054ae:	ddee      	ble.n	800548e <preference_writer_load+0x16>
    }
    for(; offs < 320; offs++) {
 80054b0:	e013      	b.n	80054da <preference_writer_load+0x62>
        __float_reg[offs - 256] = flash_read_float(pr.fw, offs);
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f5a3 7480 	sub.w	r4, r3, #256	; 0x100
 80054ba:	4613      	mov	r3, r2
 80054bc:	f107 0218 	add.w	r2, r7, #24
 80054c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80054c2:	f7fd f827 	bl	8002514 <flash_read_float>
 80054c6:	eef0 7a40 	vmov.f32	s15, s0
 80054ca:	4a0b      	ldr	r2, [pc, #44]	; (80054f8 <preference_writer_load+0x80>)
 80054cc:	00a3      	lsls	r3, r4, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	edc3 7a00 	vstr	s15, [r3]
    for(; offs < 320; offs++) {
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3301      	adds	r3, #1
 80054d8:	607b      	str	r3, [r7, #4]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80054e0:	dbe7      	blt.n	80054b2 <preference_writer_load+0x3a>
    }
}
 80054e2:	bf00      	nop
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80054ee:	b004      	add	sp, #16
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	20008f64 	.word	0x20008f64
 80054f8:	20000650 	.word	0x20000650

080054fc <preference_writer_close>:

void preference_writer_close(PreferenceWriter *pr) {
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
    pr->ready = false;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	741a      	strb	r2, [r3, #16]
    flash_writer_close(&pr->fw);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4618      	mov	r0, r3
 800550e:	f7fc ffde 	bl	80024ce <flash_writer_close>
}
 8005512:	bf00      	nop
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
	...

0800551c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005520:	4b18      	ldr	r3, [pc, #96]	; (8005584 <MX_SPI1_Init+0x68>)
 8005522:	4a19      	ldr	r2, [pc, #100]	; (8005588 <MX_SPI1_Init+0x6c>)
 8005524:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005526:	4b17      	ldr	r3, [pc, #92]	; (8005584 <MX_SPI1_Init+0x68>)
 8005528:	f44f 7282 	mov.w	r2, #260	; 0x104
 800552c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800552e:	4b15      	ldr	r3, [pc, #84]	; (8005584 <MX_SPI1_Init+0x68>)
 8005530:	2200      	movs	r2, #0
 8005532:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8005534:	4b13      	ldr	r3, [pc, #76]	; (8005584 <MX_SPI1_Init+0x68>)
 8005536:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800553a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800553c:	4b11      	ldr	r3, [pc, #68]	; (8005584 <MX_SPI1_Init+0x68>)
 800553e:	2200      	movs	r2, #0
 8005540:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005542:	4b10      	ldr	r3, [pc, #64]	; (8005584 <MX_SPI1_Init+0x68>)
 8005544:	2201      	movs	r2, #1
 8005546:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005548:	4b0e      	ldr	r3, [pc, #56]	; (8005584 <MX_SPI1_Init+0x68>)
 800554a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800554e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005550:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <MX_SPI1_Init+0x68>)
 8005552:	2228      	movs	r2, #40	; 0x28
 8005554:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005556:	4b0b      	ldr	r3, [pc, #44]	; (8005584 <MX_SPI1_Init+0x68>)
 8005558:	2200      	movs	r2, #0
 800555a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800555c:	4b09      	ldr	r3, [pc, #36]	; (8005584 <MX_SPI1_Init+0x68>)
 800555e:	2200      	movs	r2, #0
 8005560:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005562:	4b08      	ldr	r3, [pc, #32]	; (8005584 <MX_SPI1_Init+0x68>)
 8005564:	2200      	movs	r2, #0
 8005566:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005568:	4b06      	ldr	r3, [pc, #24]	; (8005584 <MX_SPI1_Init+0x68>)
 800556a:	220a      	movs	r2, #10
 800556c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800556e:	4805      	ldr	r0, [pc, #20]	; (8005584 <MX_SPI1_Init+0x68>)
 8005570:	f003 fb96 	bl	8008ca0 <HAL_SPI_Init>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800557a:	f7ff fb59 	bl	8004c30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800557e:	bf00      	nop
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	20009460 	.word	0x20009460
 8005588:	40013000 	.word	0x40013000

0800558c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8005590:	4b18      	ldr	r3, [pc, #96]	; (80055f4 <MX_SPI3_Init+0x68>)
 8005592:	4a19      	ldr	r2, [pc, #100]	; (80055f8 <MX_SPI3_Init+0x6c>)
 8005594:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005596:	4b17      	ldr	r3, [pc, #92]	; (80055f4 <MX_SPI3_Init+0x68>)
 8005598:	f44f 7282 	mov.w	r2, #260	; 0x104
 800559c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800559e:	4b15      	ldr	r3, [pc, #84]	; (80055f4 <MX_SPI3_Init+0x68>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80055a4:	4b13      	ldr	r3, [pc, #76]	; (80055f4 <MX_SPI3_Init+0x68>)
 80055a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055aa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80055ac:	4b11      	ldr	r3, [pc, #68]	; (80055f4 <MX_SPI3_Init+0x68>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80055b2:	4b10      	ldr	r3, [pc, #64]	; (80055f4 <MX_SPI3_Init+0x68>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80055b8:	4b0e      	ldr	r3, [pc, #56]	; (80055f4 <MX_SPI3_Init+0x68>)
 80055ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055be:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055c0:	4b0c      	ldr	r3, [pc, #48]	; (80055f4 <MX_SPI3_Init+0x68>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80055c6:	4b0b      	ldr	r3, [pc, #44]	; (80055f4 <MX_SPI3_Init+0x68>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80055cc:	4b09      	ldr	r3, [pc, #36]	; (80055f4 <MX_SPI3_Init+0x68>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055d2:	4b08      	ldr	r3, [pc, #32]	; (80055f4 <MX_SPI3_Init+0x68>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80055d8:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <MX_SPI3_Init+0x68>)
 80055da:	220a      	movs	r2, #10
 80055dc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80055de:	4805      	ldr	r0, [pc, #20]	; (80055f4 <MX_SPI3_Init+0x68>)
 80055e0:	f003 fb5e 	bl	8008ca0 <HAL_SPI_Init>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 80055ea:	f7ff fb21 	bl	8004c30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80055ee:	bf00      	nop
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	20009408 	.word	0x20009408
 80055f8:	40003c00 	.word	0x40003c00

080055fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b08c      	sub	sp, #48	; 0x30
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005604:	f107 031c 	add.w	r3, r7, #28
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	605a      	str	r2, [r3, #4]
 800560e:	609a      	str	r2, [r3, #8]
 8005610:	60da      	str	r2, [r3, #12]
 8005612:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a32      	ldr	r2, [pc, #200]	; (80056e4 <HAL_SPI_MspInit+0xe8>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d12c      	bne.n	8005678 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800561e:	2300      	movs	r3, #0
 8005620:	61bb      	str	r3, [r7, #24]
 8005622:	4b31      	ldr	r3, [pc, #196]	; (80056e8 <HAL_SPI_MspInit+0xec>)
 8005624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005626:	4a30      	ldr	r2, [pc, #192]	; (80056e8 <HAL_SPI_MspInit+0xec>)
 8005628:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800562c:	6453      	str	r3, [r2, #68]	; 0x44
 800562e:	4b2e      	ldr	r3, [pc, #184]	; (80056e8 <HAL_SPI_MspInit+0xec>)
 8005630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005632:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005636:	61bb      	str	r3, [r7, #24]
 8005638:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800563a:	2300      	movs	r3, #0
 800563c:	617b      	str	r3, [r7, #20]
 800563e:	4b2a      	ldr	r3, [pc, #168]	; (80056e8 <HAL_SPI_MspInit+0xec>)
 8005640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005642:	4a29      	ldr	r2, [pc, #164]	; (80056e8 <HAL_SPI_MspInit+0xec>)
 8005644:	f043 0301 	orr.w	r3, r3, #1
 8005648:	6313      	str	r3, [r2, #48]	; 0x30
 800564a:	4b27      	ldr	r3, [pc, #156]	; (80056e8 <HAL_SPI_MspInit+0xec>)
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	617b      	str	r3, [r7, #20]
 8005654:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005656:	23e0      	movs	r3, #224	; 0xe0
 8005658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800565a:	2302      	movs	r3, #2
 800565c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800565e:	2300      	movs	r3, #0
 8005660:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005662:	2303      	movs	r3, #3
 8005664:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005666:	2305      	movs	r3, #5
 8005668:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800566a:	f107 031c 	add.w	r3, r7, #28
 800566e:	4619      	mov	r1, r3
 8005670:	481e      	ldr	r0, [pc, #120]	; (80056ec <HAL_SPI_MspInit+0xf0>)
 8005672:	f002 fbad 	bl	8007dd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005676:	e031      	b.n	80056dc <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI3)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a1c      	ldr	r2, [pc, #112]	; (80056f0 <HAL_SPI_MspInit+0xf4>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d12c      	bne.n	80056dc <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005682:	2300      	movs	r3, #0
 8005684:	613b      	str	r3, [r7, #16]
 8005686:	4b18      	ldr	r3, [pc, #96]	; (80056e8 <HAL_SPI_MspInit+0xec>)
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	4a17      	ldr	r2, [pc, #92]	; (80056e8 <HAL_SPI_MspInit+0xec>)
 800568c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005690:	6413      	str	r3, [r2, #64]	; 0x40
 8005692:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <HAL_SPI_MspInit+0xec>)
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800569a:	613b      	str	r3, [r7, #16]
 800569c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800569e:	2300      	movs	r3, #0
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	4b11      	ldr	r3, [pc, #68]	; (80056e8 <HAL_SPI_MspInit+0xec>)
 80056a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a6:	4a10      	ldr	r2, [pc, #64]	; (80056e8 <HAL_SPI_MspInit+0xec>)
 80056a8:	f043 0304 	orr.w	r3, r3, #4
 80056ac:	6313      	str	r3, [r2, #48]	; 0x30
 80056ae:	4b0e      	ldr	r3, [pc, #56]	; (80056e8 <HAL_SPI_MspInit+0xec>)
 80056b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b2:	f003 0304 	and.w	r3, r3, #4
 80056b6:	60fb      	str	r3, [r7, #12]
 80056b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80056ba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80056be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056c0:	2302      	movs	r3, #2
 80056c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056c4:	2300      	movs	r3, #0
 80056c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056c8:	2303      	movs	r3, #3
 80056ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80056cc:	2306      	movs	r3, #6
 80056ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056d0:	f107 031c 	add.w	r3, r7, #28
 80056d4:	4619      	mov	r1, r3
 80056d6:	4807      	ldr	r0, [pc, #28]	; (80056f4 <HAL_SPI_MspInit+0xf8>)
 80056d8:	f002 fb7a 	bl	8007dd0 <HAL_GPIO_Init>
}
 80056dc:	bf00      	nop
 80056de:	3730      	adds	r7, #48	; 0x30
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	40013000 	.word	0x40013000
 80056e8:	40023800 	.word	0x40023800
 80056ec:	40020000 	.word	0x40020000
 80056f0:	40003c00 	.word	0x40003c00
 80056f4:	40020800 	.word	0x40020800

080056f8 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 80056fc:	4b07      	ldr	r3, [pc, #28]	; (800571c <FLASH_Unlock+0x24>)
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	da05      	bge.n	8005710 <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8005704:	4b05      	ldr	r3, [pc, #20]	; (800571c <FLASH_Unlock+0x24>)
 8005706:	4a06      	ldr	r2, [pc, #24]	; (8005720 <FLASH_Unlock+0x28>)
 8005708:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 800570a:	4b04      	ldr	r3, [pc, #16]	; (800571c <FLASH_Unlock+0x24>)
 800570c:	4a05      	ldr	r2, [pc, #20]	; (8005724 <FLASH_Unlock+0x2c>)
 800570e:	605a      	str	r2, [r3, #4]
  }  
}
 8005710:	bf00      	nop
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	40023c00 	.word	0x40023c00
 8005720:	45670123 	.word	0x45670123
 8005724:	cdef89ab 	.word	0xcdef89ab

08005728 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800572c:	4b05      	ldr	r3, [pc, #20]	; (8005744 <FLASH_Lock+0x1c>)
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	4a04      	ldr	r2, [pc, #16]	; (8005744 <FLASH_Lock+0x1c>)
 8005732:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005736:	6113      	str	r3, [r2, #16]
}
 8005738:	bf00      	nop
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40023c00 	.word	0x40023c00

08005748 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	460b      	mov	r3, r1
 8005752:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE2;
 8005758:	2309      	movs	r3, #9
 800575a:	72fb      	strb	r3, [r7, #11]
 
  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 800575c:	78fb      	ldrb	r3, [r7, #3]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d102      	bne.n	8005768 <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8005762:	2300      	movs	r3, #0
 8005764:	60fb      	str	r3, [r7, #12]
 8005766:	e010      	b.n	800578a <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 8005768:	78fb      	ldrb	r3, [r7, #3]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d103      	bne.n	8005776 <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800576e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	e009      	b.n	800578a <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 8005776:	78fb      	ldrb	r3, [r7, #3]
 8005778:	2b02      	cmp	r3, #2
 800577a:	d103      	bne.n	8005784 <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800577c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	e002      	b.n	800578a <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005784:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005788:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation2();
 800578a:	f000 f8bf 	bl	800590c <FLASH_WaitForLastOperation2>
 800578e:	4603      	mov	r3, r0
 8005790:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE2)
 8005792:	7afb      	ldrb	r3, [r7, #11]
 8005794:	2b09      	cmp	r3, #9
 8005796:	d12f      	bne.n	80057f8 <FLASH_EraseSector+0xb0>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 8005798:	4b1a      	ldr	r3, [pc, #104]	; (8005804 <FLASH_EraseSector+0xbc>)
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	4a19      	ldr	r2, [pc, #100]	; (8005804 <FLASH_EraseSector+0xbc>)
 800579e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a2:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 80057a4:	4b17      	ldr	r3, [pc, #92]	; (8005804 <FLASH_EraseSector+0xbc>)
 80057a6:	691a      	ldr	r2, [r3, #16]
 80057a8:	4916      	ldr	r1, [pc, #88]	; (8005804 <FLASH_EraseSector+0xbc>)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	610b      	str	r3, [r1, #16]
    FLASH->CR &= SECTOR_MASK;
 80057b0:	4b14      	ldr	r3, [pc, #80]	; (8005804 <FLASH_EraseSector+0xbc>)
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	4a13      	ldr	r2, [pc, #76]	; (8005804 <FLASH_EraseSector+0xbc>)
 80057b6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80057ba:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 80057bc:	4b11      	ldr	r3, [pc, #68]	; (8005804 <FLASH_EraseSector+0xbc>)
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	4a0f      	ldr	r2, [pc, #60]	; (8005804 <FLASH_EraseSector+0xbc>)
 80057c6:	f043 0302 	orr.w	r3, r3, #2
 80057ca:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 80057cc:	4b0d      	ldr	r3, [pc, #52]	; (8005804 <FLASH_EraseSector+0xbc>)
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	4a0c      	ldr	r2, [pc, #48]	; (8005804 <FLASH_EraseSector+0xbc>)
 80057d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057d6:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation2();
 80057d8:	f000 f898 	bl	800590c <FLASH_WaitForLastOperation2>
 80057dc:	4603      	mov	r3, r0
 80057de:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 80057e0:	4b08      	ldr	r3, [pc, #32]	; (8005804 <FLASH_EraseSector+0xbc>)
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	4a07      	ldr	r2, [pc, #28]	; (8005804 <FLASH_EraseSector+0xbc>)
 80057e6:	f023 0302 	bic.w	r3, r3, #2
 80057ea:	6113      	str	r3, [r2, #16]
    FLASH->CR &= SECTOR_MASK; 
 80057ec:	4b05      	ldr	r3, [pc, #20]	; (8005804 <FLASH_EraseSector+0xbc>)
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	4a04      	ldr	r2, [pc, #16]	; (8005804 <FLASH_EraseSector+0xbc>)
 80057f2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80057f6:	6113      	str	r3, [r2, #16]
  }
  /* Return the Erase Status */
  return status;
 80057f8:	7afb      	ldrb	r3, [r7, #11]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	40023c00 	.word	0x40023c00

08005808 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE2;
 8005812:	2309      	movs	r3, #9
 8005814:	73fb      	strb	r3, [r7, #15]
 
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation2();
 8005816:	f000 f879 	bl	800590c <FLASH_WaitForLastOperation2>
 800581a:	4603      	mov	r3, r0
 800581c:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE2)
 800581e:	7bfb      	ldrb	r3, [r7, #15]
 8005820:	2b09      	cmp	r3, #9
 8005822:	d11e      	bne.n	8005862 <FLASH_ProgramWord+0x5a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8005824:	4b11      	ldr	r3, [pc, #68]	; (800586c <FLASH_ProgramWord+0x64>)
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	4a10      	ldr	r2, [pc, #64]	; (800586c <FLASH_ProgramWord+0x64>)
 800582a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800582e:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 8005830:	4b0e      	ldr	r3, [pc, #56]	; (800586c <FLASH_ProgramWord+0x64>)
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	4a0d      	ldr	r2, [pc, #52]	; (800586c <FLASH_ProgramWord+0x64>)
 8005836:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800583a:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 800583c:	4b0b      	ldr	r3, [pc, #44]	; (800586c <FLASH_ProgramWord+0x64>)
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	4a0a      	ldr	r2, [pc, #40]	; (800586c <FLASH_ProgramWord+0x64>)
 8005842:	f043 0301 	orr.w	r3, r3, #1
 8005846:	6113      	str	r3, [r2, #16]
  
    *(__IO uint32_t*)Address = Data;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation2();
 800584e:	f000 f85d 	bl	800590c <FLASH_WaitForLastOperation2>
 8005852:	4603      	mov	r3, r0
 8005854:	73fb      	strb	r3, [r7, #15]
 
    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8005856:	4b05      	ldr	r3, [pc, #20]	; (800586c <FLASH_ProgramWord+0x64>)
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	4a04      	ldr	r2, [pc, #16]	; (800586c <FLASH_ProgramWord+0x64>)
 800585c:	f023 0301 	bic.w	r3, r3, #1
 8005860:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 8005862:	7bfb      	ldrb	r3, [r7, #15]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	40023c00 	.word	0x40023c00

08005870 <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42xx/43xxx and STM32F401xx/411xE devices)   
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8005878:	4a04      	ldr	r2, [pc, #16]	; (800588c <FLASH_ClearFlag+0x1c>)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	60d3      	str	r3, [r2, #12]
}
 800587e:	bf00      	nop
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	40023c00 	.word	0x40023c00

08005890 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_RD2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE2;
 8005896:	2309      	movs	r3, #9
 8005898:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 800589a:	4b1b      	ldr	r3, [pc, #108]	; (8005908 <FLASH_GetStatus+0x78>)
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058a6:	d102      	bne.n	80058ae <FLASH_GetStatus+0x1e>
  {
    flashstatus = FLASH_BUSY2;
 80058a8:	2301      	movs	r3, #1
 80058aa:	71fb      	strb	r3, [r7, #7]
 80058ac:	e025      	b.n	80058fa <FLASH_GetStatus+0x6a>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 80058ae:	4b16      	ldr	r3, [pc, #88]	; (8005908 <FLASH_GetStatus+0x78>)
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f003 0310 	and.w	r3, r3, #16
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <FLASH_GetStatus+0x30>
    { 
      flashstatus = FLASH_ERROR_WRP2;
 80058ba:	2306      	movs	r3, #6
 80058bc:	71fb      	strb	r3, [r7, #7]
 80058be:	e01c      	b.n	80058fa <FLASH_GetStatus+0x6a>
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 80058c0:	4b11      	ldr	r3, [pc, #68]	; (8005908 <FLASH_GetStatus+0x78>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d002      	beq.n	80058d2 <FLASH_GetStatus+0x42>
      { 
        flashstatus = FLASH_ERROR_RD2;
 80058cc:	2302      	movs	r3, #2
 80058ce:	71fb      	strb	r3, [r7, #7]
 80058d0:	e013      	b.n	80058fa <FLASH_GetStatus+0x6a>
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
 80058d2:	4b0d      	ldr	r3, [pc, #52]	; (8005908 <FLASH_GetStatus+0x78>)
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <FLASH_GetStatus+0x54>
        {
          flashstatus = FLASH_ERROR_PROGRAM2; 
 80058de:	2307      	movs	r3, #7
 80058e0:	71fb      	strb	r3, [r7, #7]
 80058e2:	e00a      	b.n	80058fa <FLASH_GetStatus+0x6a>
        }
        else
        {
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 80058e4:	4b08      	ldr	r3, [pc, #32]	; (8005908 <FLASH_GetStatus+0x78>)
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <FLASH_GetStatus+0x66>
          {
            flashstatus = FLASH_ERROR_OPERATION2;
 80058f0:	2308      	movs	r3, #8
 80058f2:	71fb      	strb	r3, [r7, #7]
 80058f4:	e001      	b.n	80058fa <FLASH_GetStatus+0x6a>
          }
          else
          {
            flashstatus = FLASH_COMPLETE2;
 80058f6:	2309      	movs	r3, #9
 80058f8:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 80058fa:	79fb      	ldrb	r3, [r7, #7]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	40023c00 	.word	0x40023c00

0800590c <FLASH_WaitForLastOperation2>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_WaitForLastOperation2(void)
{ 
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE2;
 8005912:	2309      	movs	r3, #9
 8005914:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 8005916:	f7ff ffbb 	bl	8005890 <FLASH_GetStatus>
 800591a:	4603      	mov	r3, r0
 800591c:	71fb      	strb	r3, [r7, #7]
 
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY2)
 800591e:	e003      	b.n	8005928 <FLASH_WaitForLastOperation2+0x1c>
  {
    status = FLASH_GetStatus();
 8005920:	f7ff ffb6 	bl	8005890 <FLASH_GetStatus>
 8005924:	4603      	mov	r3, r0
 8005926:	71fb      	strb	r3, [r7, #7]
  while(status == FLASH_BUSY2)
 8005928:	79fb      	ldrb	r3, [r7, #7]
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b01      	cmp	r3, #1
 800592e:	d0f7      	beq.n	8005920 <FLASH_WaitForLastOperation2+0x14>
  }
  /* Return the operation status */
  return status;
 8005930:	79fb      	ldrb	r3, [r7, #7]
 8005932:	b2db      	uxtb	r3, r3
}
 8005934:	4618      	mov	r0, r3
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005942:	2300      	movs	r3, #0
 8005944:	607b      	str	r3, [r7, #4]
 8005946:	4b10      	ldr	r3, [pc, #64]	; (8005988 <HAL_MspInit+0x4c>)
 8005948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594a:	4a0f      	ldr	r2, [pc, #60]	; (8005988 <HAL_MspInit+0x4c>)
 800594c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005950:	6453      	str	r3, [r2, #68]	; 0x44
 8005952:	4b0d      	ldr	r3, [pc, #52]	; (8005988 <HAL_MspInit+0x4c>)
 8005954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800595a:	607b      	str	r3, [r7, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800595e:	2300      	movs	r3, #0
 8005960:	603b      	str	r3, [r7, #0]
 8005962:	4b09      	ldr	r3, [pc, #36]	; (8005988 <HAL_MspInit+0x4c>)
 8005964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005966:	4a08      	ldr	r2, [pc, #32]	; (8005988 <HAL_MspInit+0x4c>)
 8005968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800596c:	6413      	str	r3, [r2, #64]	; 0x40
 800596e:	4b06      	ldr	r3, [pc, #24]	; (8005988 <HAL_MspInit+0x4c>)
 8005970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005976:	603b      	str	r3, [r7, #0]
 8005978:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800597a:	2007      	movs	r0, #7
 800597c:	f002 f954 	bl	8007c28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005980:	bf00      	nop
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	40023800 	.word	0x40023800

0800598c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800598c:	b480      	push	{r7}
 800598e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005990:	bf00      	nop
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800599a:	b480      	push	{r7}
 800599c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800599e:	e7fe      	b.n	800599e <HardFault_Handler+0x4>

080059a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80059a4:	e7fe      	b.n	80059a4 <MemManage_Handler+0x4>

080059a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80059a6:	b480      	push	{r7}
 80059a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80059aa:	e7fe      	b.n	80059aa <BusFault_Handler+0x4>

080059ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80059ac:	b480      	push	{r7}
 80059ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80059b0:	e7fe      	b.n	80059b0 <UsageFault_Handler+0x4>

080059b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80059b2:	b480      	push	{r7}
 80059b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80059b6:	bf00      	nop
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80059c0:	b480      	push	{r7}
 80059c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80059c4:	bf00      	nop
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80059ce:	b480      	push	{r7}
 80059d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80059d2:	bf00      	nop
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80059e0:	f000 fda6 	bl	8006530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80059e4:	bf00      	nop
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80059e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ea:	b095      	sub	sp, #84	; 0x54
 80059ec:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80059ee:	4885      	ldr	r0, [pc, #532]	; (8005c04 <CAN1_RX0_IRQHandler+0x21c>)
 80059f0:	f001 fe11 	bl	8007616 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  HAL_CAN_GetRxMessage(&CAN_H, CAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Read CAN
 80059f4:	4b84      	ldr	r3, [pc, #528]	; (8005c08 <CAN1_RX0_IRQHandler+0x220>)
 80059f6:	4a85      	ldr	r2, [pc, #532]	; (8005c0c <CAN1_RX0_IRQHandler+0x224>)
 80059f8:	2100      	movs	r1, #0
 80059fa:	4882      	ldr	r0, [pc, #520]	; (8005c04 <CAN1_RX0_IRQHandler+0x21c>)
 80059fc:	f001 fcf9 	bl	80073f2 <HAL_CAN_GetRxMessage>
  uint32_t TxMailbox;
  pack_reply(&can_tx, CAN_ID,  comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, controller.v_bus_filt);	// Pack response
 8005a00:	4b83      	ldr	r3, [pc, #524]	; (8005c10 <CAN1_RX0_IRQHandler+0x228>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	4a83      	ldr	r2, [pc, #524]	; (8005c14 <CAN1_RX0_IRQHandler+0x22c>)
 8005a08:	ed92 7a03 	vldr	s14, [r2, #12]
 8005a0c:	4a82      	ldr	r2, [pc, #520]	; (8005c18 <CAN1_RX0_IRQHandler+0x230>)
 8005a0e:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 8005a12:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005a16:	4a7f      	ldr	r2, [pc, #508]	; (8005c14 <CAN1_RX0_IRQHandler+0x22c>)
 8005a18:	ed92 7a18 	vldr	s14, [r2, #96]	; 0x60
 8005a1c:	4a7e      	ldr	r2, [pc, #504]	; (8005c18 <CAN1_RX0_IRQHandler+0x230>)
 8005a1e:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 8005a22:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8005a26:	4a7d      	ldr	r2, [pc, #500]	; (8005c1c <CAN1_RX0_IRQHandler+0x234>)
 8005a28:	ed92 7a11 	vldr	s14, [r2, #68]	; 0x44
 8005a2c:	4a7a      	ldr	r2, [pc, #488]	; (8005c18 <CAN1_RX0_IRQHandler+0x230>)
 8005a2e:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8005a32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a36:	4a78      	ldr	r2, [pc, #480]	; (8005c18 <CAN1_RX0_IRQHandler+0x230>)
 8005a38:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 8005a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a40:	4a76      	ldr	r2, [pc, #472]	; (8005c1c <CAN1_RX0_IRQHandler+0x234>)
 8005a42:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
 8005a46:	eef0 1a47 	vmov.f32	s3, s14
 8005a4a:	eeb0 1a67 	vmov.f32	s2, s15
 8005a4e:	eef0 0a46 	vmov.f32	s1, s12
 8005a52:	eeb0 0a66 	vmov.f32	s0, s13
 8005a56:	4619      	mov	r1, r3
 8005a58:	4871      	ldr	r0, [pc, #452]	; (8005c20 <CAN1_RX0_IRQHandler+0x238>)
 8005a5a:	f7fc f925 	bl	8001ca8 <pack_reply>
  HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 8005a5e:	1d3b      	adds	r3, r7, #4
 8005a60:	4a70      	ldr	r2, [pc, #448]	; (8005c24 <CAN1_RX0_IRQHandler+0x23c>)
 8005a62:	4971      	ldr	r1, [pc, #452]	; (8005c28 <CAN1_RX0_IRQHandler+0x240>)
 8005a64:	4867      	ldr	r0, [pc, #412]	; (8005c04 <CAN1_RX0_IRQHandler+0x21c>)
 8005a66:	f001 fbe9 	bl	800723c <HAL_CAN_AddTxMessage>

  /* Check for special Commands */
  if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 8005a6a:	4b70      	ldr	r3, [pc, #448]	; (8005c2c <CAN1_RX0_IRQHandler+0x244>)
 8005a6c:	785a      	ldrb	r2, [r3, #1]
 8005a6e:	4b6f      	ldr	r3, [pc, #444]	; (8005c2c <CAN1_RX0_IRQHandler+0x244>)
 8005a70:	789b      	ldrb	r3, [r3, #2]
 8005a72:	4013      	ands	r3, r2
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	4b6d      	ldr	r3, [pc, #436]	; (8005c2c <CAN1_RX0_IRQHandler+0x244>)
 8005a78:	78db      	ldrb	r3, [r3, #3]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	4b6b      	ldr	r3, [pc, #428]	; (8005c2c <CAN1_RX0_IRQHandler+0x244>)
 8005a80:	791b      	ldrb	r3, [r3, #4]
 8005a82:	4013      	ands	r3, r2
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	4b69      	ldr	r3, [pc, #420]	; (8005c2c <CAN1_RX0_IRQHandler+0x244>)
 8005a88:	795b      	ldrb	r3, [r3, #5]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	4b67      	ldr	r3, [pc, #412]	; (8005c2c <CAN1_RX0_IRQHandler+0x244>)
 8005a90:	799b      	ldrb	r3, [r3, #6]
 8005a92:	4013      	ands	r3, r2
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	4b65      	ldr	r3, [pc, #404]	; (8005c2c <CAN1_RX0_IRQHandler+0x244>)
 8005a98:	79db      	ldrb	r3, [r3, #7]
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2bff      	cmp	r3, #255	; 0xff
 8005aa0:	bf0c      	ite	eq
 8005aa2:	2301      	moveq	r3, #1
 8005aa4:	2300      	movne	r3, #0
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	4b60      	ldr	r3, [pc, #384]	; (8005c2c <CAN1_RX0_IRQHandler+0x244>)
 8005aaa:	7a1b      	ldrb	r3, [r3, #8]
 8005aac:	2bfc      	cmp	r3, #252	; 0xfc
 8005aae:	bf0c      	ite	eq
 8005ab0:	2301      	moveq	r3, #1
 8005ab2:	2300      	movne	r3, #0
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d004      	beq.n	8005ac8 <CAN1_RX0_IRQHandler+0xe0>
	  update_fsm(&state, MOTOR_CMD);
 8005abe:	216d      	movs	r1, #109	; 0x6d
 8005ac0:	485b      	ldr	r0, [pc, #364]	; (8005c30 <CAN1_RX0_IRQHandler+0x248>)
 8005ac2:	f7fd fec9 	bl	8003858 <update_fsm>
	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
	  controller.timeout = 0;					// Reset timeout counter
  }

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8005ac6:	e099      	b.n	8005bfc <CAN1_RX0_IRQHandler+0x214>
  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFD))){
 8005ac8:	4b58      	ldr	r3, [pc, #352]	; (8005c2c <CAN1_RX0_IRQHandler+0x244>)
 8005aca:	785a      	ldrb	r2, [r3, #1]
 8005acc:	4b57      	ldr	r3, [pc, #348]	; (8005c2c <CAN1_RX0_IRQHandler+0x244>)
 8005ace:	789b      	ldrb	r3, [r3, #2]
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	b2da      	uxtb	r2, r3
 8005ad4:	4b55      	ldr	r3, [pc, #340]	; (8005c2c <CAN1_RX0_IRQHandler+0x244>)
 8005ad6:	78db      	ldrb	r3, [r3, #3]
 8005ad8:	4013      	ands	r3, r2
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2bff      	cmp	r3, #255	; 0xff
 8005ade:	bf0c      	ite	eq
 8005ae0:	2301      	moveq	r3, #1
 8005ae2:	2300      	movne	r3, #0
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	4b50      	ldr	r3, [pc, #320]	; (8005c2c <CAN1_RX0_IRQHandler+0x244>)
 8005aea:	791b      	ldrb	r3, [r3, #4]
 8005aec:	2bff      	cmp	r3, #255	; 0xff
 8005aee:	bf0c      	ite	eq
 8005af0:	2301      	moveq	r3, #1
 8005af2:	2300      	movne	r3, #0
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	4619      	mov	r1, r3
 8005af8:	4b4c      	ldr	r3, [pc, #304]	; (8005c2c <CAN1_RX0_IRQHandler+0x244>)
 8005afa:	795b      	ldrb	r3, [r3, #5]
 8005afc:	2bff      	cmp	r3, #255	; 0xff
 8005afe:	bf0c      	ite	eq
 8005b00:	2301      	moveq	r3, #1
 8005b02:	2300      	movne	r3, #0
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	fb03 f301 	mul.w	r3, r3, r1
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	4a47      	ldr	r2, [pc, #284]	; (8005c2c <CAN1_RX0_IRQHandler+0x244>)
 8005b0e:	7992      	ldrb	r2, [r2, #6]
 8005b10:	2aff      	cmp	r2, #255	; 0xff
 8005b12:	bf0c      	ite	eq
 8005b14:	2201      	moveq	r2, #1
 8005b16:	2200      	movne	r2, #0
 8005b18:	b2d2      	uxtb	r2, r2
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	4a43      	ldr	r2, [pc, #268]	; (8005c2c <CAN1_RX0_IRQHandler+0x244>)
 8005b1e:	79d2      	ldrb	r2, [r2, #7]
 8005b20:	2aff      	cmp	r2, #255	; 0xff
 8005b22:	bf0c      	ite	eq
 8005b24:	2201      	moveq	r2, #1
 8005b26:	2200      	movne	r2, #0
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	4a3f      	ldr	r2, [pc, #252]	; (8005c2c <CAN1_RX0_IRQHandler+0x244>)
 8005b2e:	7a12      	ldrb	r2, [r2, #8]
 8005b30:	2afd      	cmp	r2, #253	; 0xfd
 8005b32:	bf0c      	ite	eq
 8005b34:	2201      	moveq	r2, #1
 8005b36:	2200      	movne	r2, #0
 8005b38:	b2d2      	uxtb	r2, r2
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d004      	beq.n	8005b4a <CAN1_RX0_IRQHandler+0x162>
      update_fsm(&state, MENU_CMD);
 8005b40:	211b      	movs	r1, #27
 8005b42:	483b      	ldr	r0, [pc, #236]	; (8005c30 <CAN1_RX0_IRQHandler+0x248>)
 8005b44:	f7fd fe88 	bl	8003858 <update_fsm>
}
 8005b48:	e058      	b.n	8005bfc <CAN1_RX0_IRQHandler+0x214>
  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFE))){
 8005b4a:	4b38      	ldr	r3, [pc, #224]	; (8005c2c <CAN1_RX0_IRQHandler+0x244>)
 8005b4c:	785a      	ldrb	r2, [r3, #1]
 8005b4e:	4b37      	ldr	r3, [pc, #220]	; (8005c2c <CAN1_RX0_IRQHandler+0x244>)
 8005b50:	789b      	ldrb	r3, [r3, #2]
 8005b52:	4013      	ands	r3, r2
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	4b35      	ldr	r3, [pc, #212]	; (8005c2c <CAN1_RX0_IRQHandler+0x244>)
 8005b58:	78db      	ldrb	r3, [r3, #3]
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2bff      	cmp	r3, #255	; 0xff
 8005b60:	bf0c      	ite	eq
 8005b62:	2301      	moveq	r3, #1
 8005b64:	2300      	movne	r3, #0
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	461a      	mov	r2, r3
 8005b6a:	4b30      	ldr	r3, [pc, #192]	; (8005c2c <CAN1_RX0_IRQHandler+0x244>)
 8005b6c:	791b      	ldrb	r3, [r3, #4]
 8005b6e:	2bff      	cmp	r3, #255	; 0xff
 8005b70:	bf0c      	ite	eq
 8005b72:	2301      	moveq	r3, #1
 8005b74:	2300      	movne	r3, #0
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4b2c      	ldr	r3, [pc, #176]	; (8005c2c <CAN1_RX0_IRQHandler+0x244>)
 8005b7c:	795b      	ldrb	r3, [r3, #5]
 8005b7e:	2bff      	cmp	r3, #255	; 0xff
 8005b80:	bf0c      	ite	eq
 8005b82:	2301      	moveq	r3, #1
 8005b84:	2300      	movne	r3, #0
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	fb03 f301 	mul.w	r3, r3, r1
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	4a27      	ldr	r2, [pc, #156]	; (8005c2c <CAN1_RX0_IRQHandler+0x244>)
 8005b90:	7992      	ldrb	r2, [r2, #6]
 8005b92:	2aff      	cmp	r2, #255	; 0xff
 8005b94:	bf0c      	ite	eq
 8005b96:	2201      	moveq	r2, #1
 8005b98:	2200      	movne	r2, #0
 8005b9a:	b2d2      	uxtb	r2, r2
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	4a23      	ldr	r2, [pc, #140]	; (8005c2c <CAN1_RX0_IRQHandler+0x244>)
 8005ba0:	79d2      	ldrb	r2, [r2, #7]
 8005ba2:	2aff      	cmp	r2, #255	; 0xff
 8005ba4:	bf0c      	ite	eq
 8005ba6:	2201      	moveq	r2, #1
 8005ba8:	2200      	movne	r2, #0
 8005baa:	b2d2      	uxtb	r2, r2
 8005bac:	4013      	ands	r3, r2
 8005bae:	4a1f      	ldr	r2, [pc, #124]	; (8005c2c <CAN1_RX0_IRQHandler+0x244>)
 8005bb0:	7a12      	ldrb	r2, [r2, #8]
 8005bb2:	2afe      	cmp	r2, #254	; 0xfe
 8005bb4:	bf0c      	ite	eq
 8005bb6:	2201      	moveq	r2, #1
 8005bb8:	2200      	movne	r2, #0
 8005bba:	b2d2      	uxtb	r2, r2
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d004      	beq.n	8005bcc <CAN1_RX0_IRQHandler+0x1e4>
	  update_fsm(&state, ZERO_CMD);
 8005bc2:	217a      	movs	r1, #122	; 0x7a
 8005bc4:	481a      	ldr	r0, [pc, #104]	; (8005c30 <CAN1_RX0_IRQHandler+0x248>)
 8005bc6:	f7fd fe47 	bl	8003858 <update_fsm>
}
 8005bca:	e017      	b.n	8005bfc <CAN1_RX0_IRQHandler+0x214>
	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
 8005bcc:	4e17      	ldr	r6, [pc, #92]	; (8005c2c <CAN1_RX0_IRQHandler+0x244>)
 8005bce:	4b19      	ldr	r3, [pc, #100]	; (8005c34 <CAN1_RX0_IRQHandler+0x24c>)
 8005bd0:	9310      	str	r3, [sp, #64]	; 0x40
 8005bd2:	466d      	mov	r5, sp
 8005bd4:	f106 0410 	add.w	r4, r6, #16
 8005bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005bdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005be0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005be2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005be4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005be8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005bec:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005bf0:	f7fc f8ee 	bl	8001dd0 <unpack_cmd>
	  controller.timeout = 0;					// Reset timeout counter
 8005bf4:	4b09      	ldr	r3, [pc, #36]	; (8005c1c <CAN1_RX0_IRQHandler+0x234>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c04:	20000320 	.word	0x20000320
 8005c08:	2000938d 	.word	0x2000938d
 8005c0c:	20009398 	.word	0x20009398
 8005c10:	20008f64 	.word	0x20008f64
 8005c14:	20000348 	.word	0x20000348
 8005c18:	20000650 	.word	0x20000650
 8005c1c:	20000750 	.word	0x20000750
 8005c20:	20009364 	.word	0x20009364
 8005c24:	20009365 	.word	0x20009365
 8005c28:	2000936c 	.word	0x2000936c
 8005c2c:	2000938c 	.word	0x2000938c
 8005c30:	2000062c 	.word	0x2000062c
 8005c34:	20000828 	.word	0x20000828

08005c38 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	//HAL_GPIO_WritePin(LED, GPIO_PIN_SET );	// Useful for timing

	/* Sample ADCs */
	analog_sample(&controller);
 8005c3c:	480c      	ldr	r0, [pc, #48]	; (8005c70 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8005c3e:	f7fc fd27 	bl	8002690 <analog_sample>

	/* Sample position sensor */
	ps_sample(&comm_encoder, DT);
 8005c42:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8005c74 <TIM1_UP_TIM10_IRQHandler+0x3c>
 8005c46:	480c      	ldr	r0, [pc, #48]	; (8005c78 <TIM1_UP_TIM10_IRQHandler+0x40>)
 8005c48:	f7ff f9d2 	bl	8004ff0 <ps_sample>

	/* Run Finite State Machine */
	run_fsm(&state);
 8005c4c:	480b      	ldr	r0, [pc, #44]	; (8005c7c <TIM1_UP_TIM10_IRQHandler+0x44>)
 8005c4e:	f7fd fc55 	bl	80034fc <run_fsm>

	/* Check for CAN messages */
	can_tx_rx();
 8005c52:	f000 f833 	bl	8005cbc <can_tx_rx>

	/* increment loop count */
	controller.loop_count++;
 8005c56:	4b06      	ldr	r3, [pc, #24]	; (8005c70 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8005c58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	4a04      	ldr	r2, [pc, #16]	; (8005c70 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8005c60:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	//HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005c64:	4806      	ldr	r0, [pc, #24]	; (8005c80 <TIM1_UP_TIM10_IRQHandler+0x48>)
 8005c66:	f003 fcf3 	bl	8009650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005c6a:	bf00      	nop
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	20000750 	.word	0x20000750
 8005c74:	37d1b717 	.word	0x37d1b717
 8005c78:	20000348 	.word	0x20000348
 8005c7c:	2000062c 	.word	0x2000062c
 8005c80:	200094b8 	.word	0x200094b8

08005c84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8005c8a:	4809      	ldr	r0, [pc, #36]	; (8005cb0 <USART2_IRQHandler+0x2c>)
 8005c8c:	f004 fc9e 	bl	800a5cc <HAL_UART_IRQHandler>

	char c = Serial2RxBuffer[0];
 8005c90:	4b08      	ldr	r3, [pc, #32]	; (8005cb4 <USART2_IRQHandler+0x30>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	71fb      	strb	r3, [r7, #7]
	update_fsm(&state, c);
 8005c96:	79fb      	ldrb	r3, [r7, #7]
 8005c98:	4619      	mov	r1, r3
 8005c9a:	4807      	ldr	r0, [pc, #28]	; (8005cb8 <USART2_IRQHandler+0x34>)
 8005c9c:	f7fd fddc 	bl	8003858 <update_fsm>

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005ca0:	4803      	ldr	r0, [pc, #12]	; (8005cb0 <USART2_IRQHandler+0x2c>)
 8005ca2:	f004 fc93 	bl	800a5cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8005ca6:	bf00      	nop
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	20009500 	.word	0x20009500
 8005cb4:	20000628 	.word	0x20000628
 8005cb8:	2000062c 	.word	0x2000062c

08005cbc <can_tx_rx>:

/* USER CODE BEGIN 1 */

void can_tx_rx(void){
 8005cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cbe:	b095      	sub	sp, #84	; 0x54
 8005cc0:	af12      	add	r7, sp, #72	; 0x48

	int no_mesage = HAL_CAN_GetRxMessage(&CAN_H, CAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Read CAN
 8005cc2:	4b8b      	ldr	r3, [pc, #556]	; (8005ef0 <can_tx_rx+0x234>)
 8005cc4:	4a8b      	ldr	r2, [pc, #556]	; (8005ef4 <can_tx_rx+0x238>)
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	488b      	ldr	r0, [pc, #556]	; (8005ef8 <can_tx_rx+0x23c>)
 8005cca:	f001 fb92 	bl	80073f2 <HAL_CAN_GetRxMessage>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	607b      	str	r3, [r7, #4]
	if(!no_mesage){
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f040 8107 	bne.w	8005ee8 <can_tx_rx+0x22c>
		uint32_t TxMailbox;
		pack_reply(&can_tx, CAN_ID,  comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_mag_max*KT*GR, controller.v_max-controller.v_ref);	// Pack response
 8005cda:	4b88      	ldr	r3, [pc, #544]	; (8005efc <can_tx_rx+0x240>)
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	4a87      	ldr	r2, [pc, #540]	; (8005f00 <can_tx_rx+0x244>)
 8005ce2:	ed92 7a03 	vldr	s14, [r2, #12]
 8005ce6:	4a87      	ldr	r2, [pc, #540]	; (8005f04 <can_tx_rx+0x248>)
 8005ce8:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 8005cec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005cf0:	4a83      	ldr	r2, [pc, #524]	; (8005f00 <can_tx_rx+0x244>)
 8005cf2:	ed92 7a18 	vldr	s14, [r2, #96]	; 0x60
 8005cf6:	4a83      	ldr	r2, [pc, #524]	; (8005f04 <can_tx_rx+0x248>)
 8005cf8:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 8005cfc:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8005d00:	4a81      	ldr	r2, [pc, #516]	; (8005f08 <can_tx_rx+0x24c>)
 8005d02:	ed92 7a14 	vldr	s14, [r2, #80]	; 0x50
 8005d06:	4a7f      	ldr	r2, [pc, #508]	; (8005f04 <can_tx_rx+0x248>)
 8005d08:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8005d0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d10:	4a7c      	ldr	r2, [pc, #496]	; (8005f04 <can_tx_rx+0x248>)
 8005d12:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 8005d16:	ee67 5a27 	vmul.f32	s11, s14, s15
 8005d1a:	4a7b      	ldr	r2, [pc, #492]	; (8005f08 <can_tx_rx+0x24c>)
 8005d1c:	ed92 7a3b 	vldr	s14, [r2, #236]	; 0xec
 8005d20:	4a79      	ldr	r2, [pc, #484]	; (8005f08 <can_tx_rx+0x24c>)
 8005d22:	edd2 7a3c 	vldr	s15, [r2, #240]	; 0xf0
 8005d26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d2a:	eef0 1a67 	vmov.f32	s3, s15
 8005d2e:	eeb0 1a65 	vmov.f32	s2, s11
 8005d32:	eef0 0a46 	vmov.f32	s1, s12
 8005d36:	eeb0 0a66 	vmov.f32	s0, s13
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	4873      	ldr	r0, [pc, #460]	; (8005f0c <can_tx_rx+0x250>)
 8005d3e:	f7fb ffb3 	bl	8001ca8 <pack_reply>
		HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 8005d42:	463b      	mov	r3, r7
 8005d44:	4a72      	ldr	r2, [pc, #456]	; (8005f10 <can_tx_rx+0x254>)
 8005d46:	4973      	ldr	r1, [pc, #460]	; (8005f14 <can_tx_rx+0x258>)
 8005d48:	486b      	ldr	r0, [pc, #428]	; (8005ef8 <can_tx_rx+0x23c>)
 8005d4a:	f001 fa77 	bl	800723c <HAL_CAN_AddTxMessage>

		/* Check for special Commands */
		if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 8005d4e:	4b72      	ldr	r3, [pc, #456]	; (8005f18 <can_tx_rx+0x25c>)
 8005d50:	785a      	ldrb	r2, [r3, #1]
 8005d52:	4b71      	ldr	r3, [pc, #452]	; (8005f18 <can_tx_rx+0x25c>)
 8005d54:	789b      	ldrb	r3, [r3, #2]
 8005d56:	4013      	ands	r3, r2
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	4b6f      	ldr	r3, [pc, #444]	; (8005f18 <can_tx_rx+0x25c>)
 8005d5c:	78db      	ldrb	r3, [r3, #3]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	b2da      	uxtb	r2, r3
 8005d62:	4b6d      	ldr	r3, [pc, #436]	; (8005f18 <can_tx_rx+0x25c>)
 8005d64:	791b      	ldrb	r3, [r3, #4]
 8005d66:	4013      	ands	r3, r2
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	4b6b      	ldr	r3, [pc, #428]	; (8005f18 <can_tx_rx+0x25c>)
 8005d6c:	795b      	ldrb	r3, [r3, #5]
 8005d6e:	4013      	ands	r3, r2
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	4b69      	ldr	r3, [pc, #420]	; (8005f18 <can_tx_rx+0x25c>)
 8005d74:	799b      	ldrb	r3, [r3, #6]
 8005d76:	4013      	ands	r3, r2
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	4b67      	ldr	r3, [pc, #412]	; (8005f18 <can_tx_rx+0x25c>)
 8005d7c:	79db      	ldrb	r3, [r3, #7]
 8005d7e:	4013      	ands	r3, r2
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2bff      	cmp	r3, #255	; 0xff
 8005d84:	bf0c      	ite	eq
 8005d86:	2301      	moveq	r3, #1
 8005d88:	2300      	movne	r3, #0
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	4b62      	ldr	r3, [pc, #392]	; (8005f18 <can_tx_rx+0x25c>)
 8005d8e:	7a1b      	ldrb	r3, [r3, #8]
 8005d90:	2bfc      	cmp	r3, #252	; 0xfc
 8005d92:	bf0c      	ite	eq
 8005d94:	2301      	moveq	r3, #1
 8005d96:	2300      	movne	r3, #0
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d004      	beq.n	8005dac <can_tx_rx+0xf0>
			  update_fsm(&state, MOTOR_CMD);
 8005da2:	216d      	movs	r1, #109	; 0x6d
 8005da4:	485d      	ldr	r0, [pc, #372]	; (8005f1c <can_tx_rx+0x260>)
 8005da6:	f7fd fd57 	bl	8003858 <update_fsm>
			  controller.timeout = 0;					// Reset timeout counter
		controller.i_mag_max = controller.i_q;
		}
	}

}
 8005daa:	e09d      	b.n	8005ee8 <can_tx_rx+0x22c>
		else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFD))){
 8005dac:	4b5a      	ldr	r3, [pc, #360]	; (8005f18 <can_tx_rx+0x25c>)
 8005dae:	785a      	ldrb	r2, [r3, #1]
 8005db0:	4b59      	ldr	r3, [pc, #356]	; (8005f18 <can_tx_rx+0x25c>)
 8005db2:	789b      	ldrb	r3, [r3, #2]
 8005db4:	4013      	ands	r3, r2
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	4b57      	ldr	r3, [pc, #348]	; (8005f18 <can_tx_rx+0x25c>)
 8005dba:	78db      	ldrb	r3, [r3, #3]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2bff      	cmp	r3, #255	; 0xff
 8005dc2:	bf0c      	ite	eq
 8005dc4:	2301      	moveq	r3, #1
 8005dc6:	2300      	movne	r3, #0
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	461a      	mov	r2, r3
 8005dcc:	4b52      	ldr	r3, [pc, #328]	; (8005f18 <can_tx_rx+0x25c>)
 8005dce:	791b      	ldrb	r3, [r3, #4]
 8005dd0:	2bff      	cmp	r3, #255	; 0xff
 8005dd2:	bf0c      	ite	eq
 8005dd4:	2301      	moveq	r3, #1
 8005dd6:	2300      	movne	r3, #0
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	4619      	mov	r1, r3
 8005ddc:	4b4e      	ldr	r3, [pc, #312]	; (8005f18 <can_tx_rx+0x25c>)
 8005dde:	795b      	ldrb	r3, [r3, #5]
 8005de0:	2bff      	cmp	r3, #255	; 0xff
 8005de2:	bf0c      	ite	eq
 8005de4:	2301      	moveq	r3, #1
 8005de6:	2300      	movne	r3, #0
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	fb03 f301 	mul.w	r3, r3, r1
 8005dee:	4013      	ands	r3, r2
 8005df0:	4a49      	ldr	r2, [pc, #292]	; (8005f18 <can_tx_rx+0x25c>)
 8005df2:	7992      	ldrb	r2, [r2, #6]
 8005df4:	2aff      	cmp	r2, #255	; 0xff
 8005df6:	bf0c      	ite	eq
 8005df8:	2201      	moveq	r2, #1
 8005dfa:	2200      	movne	r2, #0
 8005dfc:	b2d2      	uxtb	r2, r2
 8005dfe:	4013      	ands	r3, r2
 8005e00:	4a45      	ldr	r2, [pc, #276]	; (8005f18 <can_tx_rx+0x25c>)
 8005e02:	79d2      	ldrb	r2, [r2, #7]
 8005e04:	2aff      	cmp	r2, #255	; 0xff
 8005e06:	bf0c      	ite	eq
 8005e08:	2201      	moveq	r2, #1
 8005e0a:	2200      	movne	r2, #0
 8005e0c:	b2d2      	uxtb	r2, r2
 8005e0e:	4013      	ands	r3, r2
 8005e10:	4a41      	ldr	r2, [pc, #260]	; (8005f18 <can_tx_rx+0x25c>)
 8005e12:	7a12      	ldrb	r2, [r2, #8]
 8005e14:	2afd      	cmp	r2, #253	; 0xfd
 8005e16:	bf0c      	ite	eq
 8005e18:	2201      	moveq	r2, #1
 8005e1a:	2200      	movne	r2, #0
 8005e1c:	b2d2      	uxtb	r2, r2
 8005e1e:	4013      	ands	r3, r2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d004      	beq.n	8005e2e <can_tx_rx+0x172>
			update_fsm(&state, MENU_CMD);
 8005e24:	211b      	movs	r1, #27
 8005e26:	483d      	ldr	r0, [pc, #244]	; (8005f1c <can_tx_rx+0x260>)
 8005e28:	f7fd fd16 	bl	8003858 <update_fsm>
}
 8005e2c:	e05c      	b.n	8005ee8 <can_tx_rx+0x22c>
		else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFE))){
 8005e2e:	4b3a      	ldr	r3, [pc, #232]	; (8005f18 <can_tx_rx+0x25c>)
 8005e30:	785a      	ldrb	r2, [r3, #1]
 8005e32:	4b39      	ldr	r3, [pc, #228]	; (8005f18 <can_tx_rx+0x25c>)
 8005e34:	789b      	ldrb	r3, [r3, #2]
 8005e36:	4013      	ands	r3, r2
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	4b37      	ldr	r3, [pc, #220]	; (8005f18 <can_tx_rx+0x25c>)
 8005e3c:	78db      	ldrb	r3, [r3, #3]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2bff      	cmp	r3, #255	; 0xff
 8005e44:	bf0c      	ite	eq
 8005e46:	2301      	moveq	r3, #1
 8005e48:	2300      	movne	r3, #0
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	4b32      	ldr	r3, [pc, #200]	; (8005f18 <can_tx_rx+0x25c>)
 8005e50:	791b      	ldrb	r3, [r3, #4]
 8005e52:	2bff      	cmp	r3, #255	; 0xff
 8005e54:	bf0c      	ite	eq
 8005e56:	2301      	moveq	r3, #1
 8005e58:	2300      	movne	r3, #0
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4b2e      	ldr	r3, [pc, #184]	; (8005f18 <can_tx_rx+0x25c>)
 8005e60:	795b      	ldrb	r3, [r3, #5]
 8005e62:	2bff      	cmp	r3, #255	; 0xff
 8005e64:	bf0c      	ite	eq
 8005e66:	2301      	moveq	r3, #1
 8005e68:	2300      	movne	r3, #0
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	fb03 f301 	mul.w	r3, r3, r1
 8005e70:	4013      	ands	r3, r2
 8005e72:	4a29      	ldr	r2, [pc, #164]	; (8005f18 <can_tx_rx+0x25c>)
 8005e74:	7992      	ldrb	r2, [r2, #6]
 8005e76:	2aff      	cmp	r2, #255	; 0xff
 8005e78:	bf0c      	ite	eq
 8005e7a:	2201      	moveq	r2, #1
 8005e7c:	2200      	movne	r2, #0
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	4013      	ands	r3, r2
 8005e82:	4a25      	ldr	r2, [pc, #148]	; (8005f18 <can_tx_rx+0x25c>)
 8005e84:	79d2      	ldrb	r2, [r2, #7]
 8005e86:	2aff      	cmp	r2, #255	; 0xff
 8005e88:	bf0c      	ite	eq
 8005e8a:	2201      	moveq	r2, #1
 8005e8c:	2200      	movne	r2, #0
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	4013      	ands	r3, r2
 8005e92:	4a21      	ldr	r2, [pc, #132]	; (8005f18 <can_tx_rx+0x25c>)
 8005e94:	7a12      	ldrb	r2, [r2, #8]
 8005e96:	2afe      	cmp	r2, #254	; 0xfe
 8005e98:	bf0c      	ite	eq
 8005e9a:	2201      	moveq	r2, #1
 8005e9c:	2200      	movne	r2, #0
 8005e9e:	b2d2      	uxtb	r2, r2
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d004      	beq.n	8005eb0 <can_tx_rx+0x1f4>
			  update_fsm(&state, ZERO_CMD);
 8005ea6:	217a      	movs	r1, #122	; 0x7a
 8005ea8:	481c      	ldr	r0, [pc, #112]	; (8005f1c <can_tx_rx+0x260>)
 8005eaa:	f7fd fcd5 	bl	8003858 <update_fsm>
}
 8005eae:	e01b      	b.n	8005ee8 <can_tx_rx+0x22c>
			  unpack_cmd(can_rx, controller.commands);	// Unpack commands
 8005eb0:	4e19      	ldr	r6, [pc, #100]	; (8005f18 <can_tx_rx+0x25c>)
 8005eb2:	4b1b      	ldr	r3, [pc, #108]	; (8005f20 <can_tx_rx+0x264>)
 8005eb4:	9310      	str	r3, [sp, #64]	; 0x40
 8005eb6:	466d      	mov	r5, sp
 8005eb8:	f106 0410 	add.w	r4, r6, #16
 8005ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ec2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ec4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ec6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ec8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005ecc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005ed0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005ed4:	f7fb ff7c 	bl	8001dd0 <unpack_cmd>
			  controller.timeout = 0;					// Reset timeout counter
 8005ed8:	4b0b      	ldr	r3, [pc, #44]	; (8005f08 <can_tx_rx+0x24c>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		controller.i_mag_max = controller.i_q;
 8005ee0:	4b09      	ldr	r3, [pc, #36]	; (8005f08 <can_tx_rx+0x24c>)
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee4:	4a08      	ldr	r2, [pc, #32]	; (8005f08 <can_tx_rx+0x24c>)
 8005ee6:	6513      	str	r3, [r2, #80]	; 0x50
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ef0:	2000938d 	.word	0x2000938d
 8005ef4:	20009398 	.word	0x20009398
 8005ef8:	20000320 	.word	0x20000320
 8005efc:	20008f64 	.word	0x20008f64
 8005f00:	20000348 	.word	0x20000348
 8005f04:	20000650 	.word	0x20000650
 8005f08:	20000750 	.word	0x20000750
 8005f0c:	20009364 	.word	0x20009364
 8005f10:	20009365 	.word	0x20009365
 8005f14:	2000936c 	.word	0x2000936c
 8005f18:	2000938c 	.word	0x2000938c
 8005f1c:	2000062c 	.word	0x2000062c
 8005f20:	20000828 	.word	0x20000828

08005f24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005f24:	b480      	push	{r7}
 8005f26:	af00      	add	r7, sp, #0
	return 1;
 8005f28:	2301      	movs	r3, #1
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <_kill>:

int _kill(int pid, int sig)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005f3e:	f005 fbe9 	bl	800b714 <__errno>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2216      	movs	r2, #22
 8005f46:	601a      	str	r2, [r3, #0]
	return -1;
 8005f48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3708      	adds	r7, #8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <_exit>:

void _exit (int status)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f7ff ffe7 	bl	8005f34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005f66:	e7fe      	b.n	8005f66 <_exit+0x12>

08005f68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f74:	2300      	movs	r3, #0
 8005f76:	617b      	str	r3, [r7, #20]
 8005f78:	e00a      	b.n	8005f90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005f7a:	f3af 8000 	nop.w
 8005f7e:	4601      	mov	r1, r0
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	60ba      	str	r2, [r7, #8]
 8005f86:	b2ca      	uxtb	r2, r1
 8005f88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	617b      	str	r3, [r7, #20]
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	dbf0      	blt.n	8005f7a <_read+0x12>
	}

return len;
 8005f98:	687b      	ldr	r3, [r7, #4]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3718      	adds	r7, #24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b086      	sub	sp, #24
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	60f8      	str	r0, [r7, #12]
 8005faa:	60b9      	str	r1, [r7, #8]
 8005fac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005fae:	2300      	movs	r3, #0
 8005fb0:	617b      	str	r3, [r7, #20]
 8005fb2:	e009      	b.n	8005fc8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	1c5a      	adds	r2, r3, #1
 8005fb8:	60ba      	str	r2, [r7, #8]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f000 fa17 	bl	80063f0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	617b      	str	r3, [r7, #20]
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	dbf1      	blt.n	8005fb4 <_write+0x12>
	}
	return len;
 8005fd0:	687b      	ldr	r3, [r7, #4]
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3718      	adds	r7, #24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <_close>:

int _close(int file)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b083      	sub	sp, #12
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
	return -1;
 8005fe2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006002:	605a      	str	r2, [r3, #4]
	return 0;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <_isatty>:

int _isatty(int file)
{
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
	return 1;
 800601a:	2301      	movs	r3, #1
}
 800601c:	4618      	mov	r0, r3
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
	return 0;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3714      	adds	r7, #20
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
	...

08006044 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800604c:	4b11      	ldr	r3, [pc, #68]	; (8006094 <_sbrk+0x50>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d102      	bne.n	800605a <_sbrk+0x16>
		heap_end = &end;
 8006054:	4b0f      	ldr	r3, [pc, #60]	; (8006094 <_sbrk+0x50>)
 8006056:	4a10      	ldr	r2, [pc, #64]	; (8006098 <_sbrk+0x54>)
 8006058:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800605a:	4b0e      	ldr	r3, [pc, #56]	; (8006094 <_sbrk+0x50>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006060:	4b0c      	ldr	r3, [pc, #48]	; (8006094 <_sbrk+0x50>)
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4413      	add	r3, r2
 8006068:	466a      	mov	r2, sp
 800606a:	4293      	cmp	r3, r2
 800606c:	d907      	bls.n	800607e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800606e:	f005 fb51 	bl	800b714 <__errno>
 8006072:	4603      	mov	r3, r0
 8006074:	220c      	movs	r2, #12
 8006076:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8006078:	f04f 33ff 	mov.w	r3, #4294967295
 800607c:	e006      	b.n	800608c <_sbrk+0x48>
	}

	heap_end += incr;
 800607e:	4b05      	ldr	r3, [pc, #20]	; (8006094 <_sbrk+0x50>)
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4413      	add	r3, r2
 8006086:	4a03      	ldr	r2, [pc, #12]	; (8006094 <_sbrk+0x50>)
 8006088:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800608a:	68fb      	ldr	r3, [r7, #12]
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	2000023c 	.word	0x2000023c
 8006098:	20009558 	.word	0x20009558

0800609c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800609c:	b480      	push	{r7}
 800609e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80060a0:	4b08      	ldr	r3, [pc, #32]	; (80060c4 <SystemInit+0x28>)
 80060a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a6:	4a07      	ldr	r2, [pc, #28]	; (80060c4 <SystemInit+0x28>)
 80060a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80060ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80060b0:	4b04      	ldr	r3, [pc, #16]	; (80060c4 <SystemInit+0x28>)
 80060b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80060b6:	609a      	str	r2, [r3, #8]
#endif
}
 80060b8:	bf00      	nop
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	e000ed00 	.word	0xe000ed00

080060c8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b096      	sub	sp, #88	; 0x58
 80060cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80060ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80060d2:	2200      	movs	r2, #0
 80060d4:	601a      	str	r2, [r3, #0]
 80060d6:	605a      	str	r2, [r3, #4]
 80060d8:	609a      	str	r2, [r3, #8]
 80060da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80060dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80060e0:	2200      	movs	r2, #0
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80060e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060ea:	2200      	movs	r2, #0
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	605a      	str	r2, [r3, #4]
 80060f0:	609a      	str	r2, [r3, #8]
 80060f2:	60da      	str	r2, [r3, #12]
 80060f4:	611a      	str	r2, [r3, #16]
 80060f6:	615a      	str	r2, [r3, #20]
 80060f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80060fa:	1d3b      	adds	r3, r7, #4
 80060fc:	2220      	movs	r2, #32
 80060fe:	2100      	movs	r1, #0
 8006100:	4618      	mov	r0, r3
 8006102:	f005 fb3f 	bl	800b784 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006106:	4b4a      	ldr	r3, [pc, #296]	; (8006230 <MX_TIM1_Init+0x168>)
 8006108:	4a4a      	ldr	r2, [pc, #296]	; (8006234 <MX_TIM1_Init+0x16c>)
 800610a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800610c:	4b48      	ldr	r3, [pc, #288]	; (8006230 <MX_TIM1_Init+0x168>)
 800610e:	2200      	movs	r2, #0
 8006110:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8006112:	4b47      	ldr	r3, [pc, #284]	; (8006230 <MX_TIM1_Init+0x168>)
 8006114:	2220      	movs	r2, #32
 8006116:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0x8CA;
 8006118:	4b45      	ldr	r3, [pc, #276]	; (8006230 <MX_TIM1_Init+0x168>)
 800611a:	f640 02ca 	movw	r2, #2250	; 0x8ca
 800611e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006120:	4b43      	ldr	r3, [pc, #268]	; (8006230 <MX_TIM1_Init+0x168>)
 8006122:	2200      	movs	r2, #0
 8006124:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8006126:	4b42      	ldr	r3, [pc, #264]	; (8006230 <MX_TIM1_Init+0x168>)
 8006128:	2201      	movs	r2, #1
 800612a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800612c:	4b40      	ldr	r3, [pc, #256]	; (8006230 <MX_TIM1_Init+0x168>)
 800612e:	2280      	movs	r2, #128	; 0x80
 8006130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006132:	483f      	ldr	r0, [pc, #252]	; (8006230 <MX_TIM1_Init+0x168>)
 8006134:	f003 f8aa 	bl	800928c <HAL_TIM_Base_Init>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800613e:	f7fe fd77 	bl	8004c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006146:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006148:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800614c:	4619      	mov	r1, r3
 800614e:	4838      	ldr	r0, [pc, #224]	; (8006230 <MX_TIM1_Init+0x168>)
 8006150:	f003 fc44 	bl	80099dc <HAL_TIM_ConfigClockSource>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800615a:	f7fe fd69 	bl	8004c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800615e:	4834      	ldr	r0, [pc, #208]	; (8006230 <MX_TIM1_Init+0x168>)
 8006160:	f003 f954 	bl	800940c <HAL_TIM_PWM_Init>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800616a:	f7fe fd61 	bl	8004c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800616e:	2300      	movs	r3, #0
 8006170:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006172:	2300      	movs	r3, #0
 8006174:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006176:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800617a:	4619      	mov	r1, r3
 800617c:	482c      	ldr	r0, [pc, #176]	; (8006230 <MX_TIM1_Init+0x168>)
 800617e:	f004 f833 	bl	800a1e8 <HAL_TIMEx_MasterConfigSynchronization>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8006188:	f7fe fd52 	bl	8004c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800618c:	2360      	movs	r3, #96	; 0x60
 800618e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8006190:	2300      	movs	r3, #0
 8006192:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8006194:	2302      	movs	r3, #2
 8006196:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006198:	2300      	movs	r3, #0
 800619a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800619c:	2304      	movs	r3, #4
 800619e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80061a0:	2300      	movs	r3, #0
 80061a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80061a4:	2300      	movs	r3, #0
 80061a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80061a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061ac:	2200      	movs	r2, #0
 80061ae:	4619      	mov	r1, r3
 80061b0:	481f      	ldr	r0, [pc, #124]	; (8006230 <MX_TIM1_Init+0x168>)
 80061b2:	f003 fb55 	bl	8009860 <HAL_TIM_PWM_ConfigChannel>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d001      	beq.n	80061c0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80061bc:	f7fe fd38 	bl	8004c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80061c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061c4:	2204      	movs	r2, #4
 80061c6:	4619      	mov	r1, r3
 80061c8:	4819      	ldr	r0, [pc, #100]	; (8006230 <MX_TIM1_Init+0x168>)
 80061ca:	f003 fb49 	bl	8009860 <HAL_TIM_PWM_ConfigChannel>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80061d4:	f7fe fd2c 	bl	8004c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80061d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061dc:	2208      	movs	r2, #8
 80061de:	4619      	mov	r1, r3
 80061e0:	4813      	ldr	r0, [pc, #76]	; (8006230 <MX_TIM1_Init+0x168>)
 80061e2:	f003 fb3d 	bl	8009860 <HAL_TIM_PWM_ConfigChannel>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80061ec:	f7fe fd20 	bl	8004c30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80061f0:	2300      	movs	r3, #0
 80061f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80061f4:	2300      	movs	r3, #0
 80061f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80061fc:	2300      	movs	r3, #0
 80061fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006200:	2300      	movs	r3, #0
 8006202:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006204:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006208:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800620a:	2300      	movs	r3, #0
 800620c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800620e:	1d3b      	adds	r3, r7, #4
 8006210:	4619      	mov	r1, r3
 8006212:	4807      	ldr	r0, [pc, #28]	; (8006230 <MX_TIM1_Init+0x168>)
 8006214:	f004 f864 	bl	800a2e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800621e:	f7fe fd07 	bl	8004c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006222:	4803      	ldr	r0, [pc, #12]	; (8006230 <MX_TIM1_Init+0x168>)
 8006224:	f000 f830 	bl	8006288 <HAL_TIM_MspPostInit>

}
 8006228:	bf00      	nop
 800622a:	3758      	adds	r7, #88	; 0x58
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	200094b8 	.word	0x200094b8
 8006234:	40010000 	.word	0x40010000

08006238 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a0e      	ldr	r2, [pc, #56]	; (8006280 <HAL_TIM_Base_MspInit+0x48>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d115      	bne.n	8006276 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800624a:	2300      	movs	r3, #0
 800624c:	60fb      	str	r3, [r7, #12]
 800624e:	4b0d      	ldr	r3, [pc, #52]	; (8006284 <HAL_TIM_Base_MspInit+0x4c>)
 8006250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006252:	4a0c      	ldr	r2, [pc, #48]	; (8006284 <HAL_TIM_Base_MspInit+0x4c>)
 8006254:	f043 0301 	orr.w	r3, r3, #1
 8006258:	6453      	str	r3, [r2, #68]	; 0x44
 800625a:	4b0a      	ldr	r3, [pc, #40]	; (8006284 <HAL_TIM_Base_MspInit+0x4c>)
 800625c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8006266:	2200      	movs	r2, #0
 8006268:	2100      	movs	r1, #0
 800626a:	2019      	movs	r0, #25
 800626c:	f001 fce7 	bl	8007c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006270:	2019      	movs	r0, #25
 8006272:	f001 fd00 	bl	8007c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8006276:	bf00      	nop
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	40010000 	.word	0x40010000
 8006284:	40023800 	.word	0x40023800

08006288 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b088      	sub	sp, #32
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006290:	f107 030c 	add.w	r3, r7, #12
 8006294:	2200      	movs	r2, #0
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	605a      	str	r2, [r3, #4]
 800629a:	609a      	str	r2, [r3, #8]
 800629c:	60da      	str	r2, [r3, #12]
 800629e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a12      	ldr	r2, [pc, #72]	; (80062f0 <HAL_TIM_MspPostInit+0x68>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d11e      	bne.n	80062e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062aa:	2300      	movs	r3, #0
 80062ac:	60bb      	str	r3, [r7, #8]
 80062ae:	4b11      	ldr	r3, [pc, #68]	; (80062f4 <HAL_TIM_MspPostInit+0x6c>)
 80062b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b2:	4a10      	ldr	r2, [pc, #64]	; (80062f4 <HAL_TIM_MspPostInit+0x6c>)
 80062b4:	f043 0301 	orr.w	r3, r3, #1
 80062b8:	6313      	str	r3, [r2, #48]	; 0x30
 80062ba:	4b0e      	ldr	r3, [pc, #56]	; (80062f4 <HAL_TIM_MspPostInit+0x6c>)
 80062bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062be:	f003 0301 	and.w	r3, r3, #1
 80062c2:	60bb      	str	r3, [r7, #8]
 80062c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80062c6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80062ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062cc:	2302      	movs	r3, #2
 80062ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062d0:	2300      	movs	r3, #0
 80062d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062d4:	2303      	movs	r3, #3
 80062d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80062d8:	2301      	movs	r3, #1
 80062da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062dc:	f107 030c 	add.w	r3, r7, #12
 80062e0:	4619      	mov	r1, r3
 80062e2:	4805      	ldr	r0, [pc, #20]	; (80062f8 <HAL_TIM_MspPostInit+0x70>)
 80062e4:	f001 fd74 	bl	8007dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80062e8:	bf00      	nop
 80062ea:	3720      	adds	r7, #32
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	40010000 	.word	0x40010000
 80062f4:	40023800 	.word	0x40023800
 80062f8:	40020000 	.word	0x40020000

080062fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006300:	4b11      	ldr	r3, [pc, #68]	; (8006348 <MX_USART2_UART_Init+0x4c>)
 8006302:	4a12      	ldr	r2, [pc, #72]	; (800634c <MX_USART2_UART_Init+0x50>)
 8006304:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006306:	4b10      	ldr	r3, [pc, #64]	; (8006348 <MX_USART2_UART_Init+0x4c>)
 8006308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800630c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800630e:	4b0e      	ldr	r3, [pc, #56]	; (8006348 <MX_USART2_UART_Init+0x4c>)
 8006310:	2200      	movs	r2, #0
 8006312:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006314:	4b0c      	ldr	r3, [pc, #48]	; (8006348 <MX_USART2_UART_Init+0x4c>)
 8006316:	2200      	movs	r2, #0
 8006318:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800631a:	4b0b      	ldr	r3, [pc, #44]	; (8006348 <MX_USART2_UART_Init+0x4c>)
 800631c:	2200      	movs	r2, #0
 800631e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006320:	4b09      	ldr	r3, [pc, #36]	; (8006348 <MX_USART2_UART_Init+0x4c>)
 8006322:	220c      	movs	r2, #12
 8006324:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006326:	4b08      	ldr	r3, [pc, #32]	; (8006348 <MX_USART2_UART_Init+0x4c>)
 8006328:	2200      	movs	r2, #0
 800632a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800632c:	4b06      	ldr	r3, [pc, #24]	; (8006348 <MX_USART2_UART_Init+0x4c>)
 800632e:	2200      	movs	r2, #0
 8006330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006332:	4805      	ldr	r0, [pc, #20]	; (8006348 <MX_USART2_UART_Init+0x4c>)
 8006334:	f004 f83a 	bl	800a3ac <HAL_UART_Init>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800633e:	f7fe fc77 	bl	8004c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006342:	bf00      	nop
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20009500 	.word	0x20009500
 800634c:	40004400 	.word	0x40004400

08006350 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b08a      	sub	sp, #40	; 0x28
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006358:	f107 0314 	add.w	r3, r7, #20
 800635c:	2200      	movs	r2, #0
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	605a      	str	r2, [r3, #4]
 8006362:	609a      	str	r2, [r3, #8]
 8006364:	60da      	str	r2, [r3, #12]
 8006366:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a1d      	ldr	r2, [pc, #116]	; (80063e4 <HAL_UART_MspInit+0x94>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d133      	bne.n	80063da <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006372:	2300      	movs	r3, #0
 8006374:	613b      	str	r3, [r7, #16]
 8006376:	4b1c      	ldr	r3, [pc, #112]	; (80063e8 <HAL_UART_MspInit+0x98>)
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	4a1b      	ldr	r2, [pc, #108]	; (80063e8 <HAL_UART_MspInit+0x98>)
 800637c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006380:	6413      	str	r3, [r2, #64]	; 0x40
 8006382:	4b19      	ldr	r3, [pc, #100]	; (80063e8 <HAL_UART_MspInit+0x98>)
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800638a:	613b      	str	r3, [r7, #16]
 800638c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800638e:	2300      	movs	r3, #0
 8006390:	60fb      	str	r3, [r7, #12]
 8006392:	4b15      	ldr	r3, [pc, #84]	; (80063e8 <HAL_UART_MspInit+0x98>)
 8006394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006396:	4a14      	ldr	r2, [pc, #80]	; (80063e8 <HAL_UART_MspInit+0x98>)
 8006398:	f043 0301 	orr.w	r3, r3, #1
 800639c:	6313      	str	r3, [r2, #48]	; 0x30
 800639e:	4b12      	ldr	r3, [pc, #72]	; (80063e8 <HAL_UART_MspInit+0x98>)
 80063a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	60fb      	str	r3, [r7, #12]
 80063a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80063aa:	230c      	movs	r3, #12
 80063ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063ae:	2302      	movs	r3, #2
 80063b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063b2:	2300      	movs	r3, #0
 80063b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063b6:	2303      	movs	r3, #3
 80063b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80063ba:	2307      	movs	r3, #7
 80063bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063be:	f107 0314 	add.w	r3, r7, #20
 80063c2:	4619      	mov	r1, r3
 80063c4:	4809      	ldr	r0, [pc, #36]	; (80063ec <HAL_UART_MspInit+0x9c>)
 80063c6:	f001 fd03 	bl	8007dd0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80063ca:	2200      	movs	r2, #0
 80063cc:	2100      	movs	r1, #0
 80063ce:	2026      	movs	r0, #38	; 0x26
 80063d0:	f001 fc35 	bl	8007c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80063d4:	2026      	movs	r0, #38	; 0x26
 80063d6:	f001 fc4e 	bl	8007c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80063da:	bf00      	nop
 80063dc:	3728      	adds	r7, #40	; 0x28
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	40004400 	.word	0x40004400
 80063e8:	40023800 	.word	0x40023800
 80063ec:	40020000 	.word	0x40020000

080063f0 <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 80063f8:	1d39      	adds	r1, r7, #4
 80063fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80063fe:	2201      	movs	r2, #1
 8006400:	4803      	ldr	r0, [pc, #12]	; (8006410 <__io_putchar+0x20>)
 8006402:	f004 f820 	bl	800a446 <HAL_UART_Transmit>
return 0;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	20009500 	.word	0x20009500

08006414 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 800641c:	2201      	movs	r2, #1
 800641e:	4904      	ldr	r1, [pc, #16]	; (8006430 <HAL_UART_RxCpltCallback+0x1c>)
 8006420:	4804      	ldr	r0, [pc, #16]	; (8006434 <HAL_UART_RxCpltCallback+0x20>)
 8006422:	f004 f8a2 	bl	800a56a <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006426:	bf00      	nop
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	20000628 	.word	0x20000628
 8006434:	20009500 	.word	0x20009500

08006438 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006438:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006470 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800643c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800643e:	e003      	b.n	8006448 <LoopCopyDataInit>

08006440 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006440:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006442:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006444:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006446:	3104      	adds	r1, #4

08006448 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006448:	480b      	ldr	r0, [pc, #44]	; (8006478 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800644a:	4b0c      	ldr	r3, [pc, #48]	; (800647c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800644c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800644e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006450:	d3f6      	bcc.n	8006440 <CopyDataInit>
  ldr  r2, =_sbss
 8006452:	4a0b      	ldr	r2, [pc, #44]	; (8006480 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006454:	e002      	b.n	800645c <LoopFillZerobss>

08006456 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006456:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006458:	f842 3b04 	str.w	r3, [r2], #4

0800645c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800645c:	4b09      	ldr	r3, [pc, #36]	; (8006484 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800645e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006460:	d3f9      	bcc.n	8006456 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006462:	f7ff fe1b 	bl	800609c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006466:	f005 f95b 	bl	800b720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800646a:	f7fe f87f 	bl	800456c <main>
  bx  lr    
 800646e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006470:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006474:	08011004 	.word	0x08011004
  ldr  r0, =_sdata
 8006478:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800647c:	20000220 	.word	0x20000220
  ldr  r2, =_sbss
 8006480:	20000220 	.word	0x20000220
  ldr  r3, = _ebss
 8006484:	20009558 	.word	0x20009558

08006488 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006488:	e7fe      	b.n	8006488 <ADC_IRQHandler>
	...

0800648c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006490:	4b0e      	ldr	r3, [pc, #56]	; (80064cc <HAL_Init+0x40>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a0d      	ldr	r2, [pc, #52]	; (80064cc <HAL_Init+0x40>)
 8006496:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800649a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800649c:	4b0b      	ldr	r3, [pc, #44]	; (80064cc <HAL_Init+0x40>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a0a      	ldr	r2, [pc, #40]	; (80064cc <HAL_Init+0x40>)
 80064a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80064a8:	4b08      	ldr	r3, [pc, #32]	; (80064cc <HAL_Init+0x40>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a07      	ldr	r2, [pc, #28]	; (80064cc <HAL_Init+0x40>)
 80064ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064b4:	2003      	movs	r0, #3
 80064b6:	f001 fbb7 	bl	8007c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80064ba:	2000      	movs	r0, #0
 80064bc:	f000 f808 	bl	80064d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80064c0:	f7ff fa3c 	bl	800593c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	40023c00 	.word	0x40023c00

080064d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80064d8:	4b12      	ldr	r3, [pc, #72]	; (8006524 <HAL_InitTick+0x54>)
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	4b12      	ldr	r3, [pc, #72]	; (8006528 <HAL_InitTick+0x58>)
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	4619      	mov	r1, r3
 80064e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80064ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ee:	4618      	mov	r0, r3
 80064f0:	f001 fbcf 	bl	8007c92 <HAL_SYSTICK_Config>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e00e      	b.n	800651c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2b0f      	cmp	r3, #15
 8006502:	d80a      	bhi.n	800651a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006504:	2200      	movs	r2, #0
 8006506:	6879      	ldr	r1, [r7, #4]
 8006508:	f04f 30ff 	mov.w	r0, #4294967295
 800650c:	f001 fb97 	bl	8007c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006510:	4a06      	ldr	r2, [pc, #24]	; (800652c <HAL_InitTick+0x5c>)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	e000      	b.n	800651c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
}
 800651c:	4618      	mov	r0, r3
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	20000040 	.word	0x20000040
 8006528:	20000048 	.word	0x20000048
 800652c:	20000044 	.word	0x20000044

08006530 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006530:	b480      	push	{r7}
 8006532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006534:	4b06      	ldr	r3, [pc, #24]	; (8006550 <HAL_IncTick+0x20>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	461a      	mov	r2, r3
 800653a:	4b06      	ldr	r3, [pc, #24]	; (8006554 <HAL_IncTick+0x24>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4413      	add	r3, r2
 8006540:	4a04      	ldr	r2, [pc, #16]	; (8006554 <HAL_IncTick+0x24>)
 8006542:	6013      	str	r3, [r2, #0]
}
 8006544:	bf00      	nop
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	20000048 	.word	0x20000048
 8006554:	20009544 	.word	0x20009544

08006558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006558:	b480      	push	{r7}
 800655a:	af00      	add	r7, sp, #0
  return uwTick;
 800655c:	4b03      	ldr	r3, [pc, #12]	; (800656c <HAL_GetTick+0x14>)
 800655e:	681b      	ldr	r3, [r3, #0]
}
 8006560:	4618      	mov	r0, r3
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	20009544 	.word	0x20009544

08006570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006578:	f7ff ffee 	bl	8006558 <HAL_GetTick>
 800657c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006588:	d005      	beq.n	8006596 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800658a:	4b0a      	ldr	r3, [pc, #40]	; (80065b4 <HAL_Delay+0x44>)
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	4413      	add	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006596:	bf00      	nop
 8006598:	f7ff ffde 	bl	8006558 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d8f7      	bhi.n	8006598 <HAL_Delay+0x28>
  {
  }
}
 80065a8:	bf00      	nop
 80065aa:	bf00      	nop
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	20000048 	.word	0x20000048

080065b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80065c0:	2300      	movs	r3, #0
 80065c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e033      	b.n	8006636 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d109      	bne.n	80065ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7fa fe26 	bl	8001228 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	f003 0310 	and.w	r3, r3, #16
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d118      	bne.n	8006628 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80065fe:	f023 0302 	bic.w	r3, r3, #2
 8006602:	f043 0202 	orr.w	r2, r3, #2
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fab4 	bl	8006b78 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	f023 0303 	bic.w	r3, r3, #3
 800661e:	f043 0201 	orr.w	r2, r3, #1
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	641a      	str	r2, [r3, #64]	; 0x40
 8006626:	e001      	b.n	800662c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006634:	7bfb      	ldrb	r3, [r7, #15]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
	...

08006640 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006648:	2300      	movs	r3, #0
 800664a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006652:	2b01      	cmp	r3, #1
 8006654:	d101      	bne.n	800665a <HAL_ADC_Start+0x1a>
 8006656:	2302      	movs	r3, #2
 8006658:	e0b2      	b.n	80067c0 <HAL_ADC_Start+0x180>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	2b01      	cmp	r3, #1
 800666e:	d018      	beq.n	80066a2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689a      	ldr	r2, [r3, #8]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f042 0201 	orr.w	r2, r2, #1
 800667e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006680:	4b52      	ldr	r3, [pc, #328]	; (80067cc <HAL_ADC_Start+0x18c>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a52      	ldr	r2, [pc, #328]	; (80067d0 <HAL_ADC_Start+0x190>)
 8006686:	fba2 2303 	umull	r2, r3, r2, r3
 800668a:	0c9a      	lsrs	r2, r3, #18
 800668c:	4613      	mov	r3, r2
 800668e:	005b      	lsls	r3, r3, #1
 8006690:	4413      	add	r3, r2
 8006692:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006694:	e002      	b.n	800669c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	3b01      	subs	r3, #1
 800669a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1f9      	bne.n	8006696 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	f003 0301 	and.w	r3, r3, #1
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d17a      	bne.n	80067a6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80066b8:	f023 0301 	bic.w	r3, r3, #1
 80066bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d007      	beq.n	80066e2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80066da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ee:	d106      	bne.n	80066fe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f4:	f023 0206 	bic.w	r2, r3, #6
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	645a      	str	r2, [r3, #68]	; 0x44
 80066fc:	e002      	b.n	8006704 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800670c:	4b31      	ldr	r3, [pc, #196]	; (80067d4 <HAL_ADC_Start+0x194>)
 800670e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006718:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f003 031f 	and.w	r3, r3, #31
 8006722:	2b00      	cmp	r3, #0
 8006724:	d12a      	bne.n	800677c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a2b      	ldr	r2, [pc, #172]	; (80067d8 <HAL_ADC_Start+0x198>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d015      	beq.n	800675c <HAL_ADC_Start+0x11c>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a29      	ldr	r2, [pc, #164]	; (80067dc <HAL_ADC_Start+0x19c>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d105      	bne.n	8006746 <HAL_ADC_Start+0x106>
 800673a:	4b26      	ldr	r3, [pc, #152]	; (80067d4 <HAL_ADC_Start+0x194>)
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f003 031f 	and.w	r3, r3, #31
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00a      	beq.n	800675c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a25      	ldr	r2, [pc, #148]	; (80067e0 <HAL_ADC_Start+0x1a0>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d136      	bne.n	80067be <HAL_ADC_Start+0x17e>
 8006750:	4b20      	ldr	r3, [pc, #128]	; (80067d4 <HAL_ADC_Start+0x194>)
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f003 0310 	and.w	r3, r3, #16
 8006758:	2b00      	cmp	r3, #0
 800675a:	d130      	bne.n	80067be <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d129      	bne.n	80067be <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	689a      	ldr	r2, [r3, #8]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006778:	609a      	str	r2, [r3, #8]
 800677a:	e020      	b.n	80067be <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a15      	ldr	r2, [pc, #84]	; (80067d8 <HAL_ADC_Start+0x198>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d11b      	bne.n	80067be <HAL_ADC_Start+0x17e>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d114      	bne.n	80067be <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689a      	ldr	r2, [r3, #8]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80067a2:	609a      	str	r2, [r3, #8]
 80067a4:	e00b      	b.n	80067be <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067aa:	f043 0210 	orr.w	r2, r3, #16
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b6:	f043 0201 	orr.w	r2, r3, #1
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3714      	adds	r7, #20
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr
 80067cc:	20000040 	.word	0x20000040
 80067d0:	431bde83 	.word	0x431bde83
 80067d4:	40012300 	.word	0x40012300
 80067d8:	40012000 	.word	0x40012000
 80067dc:	40012100 	.word	0x40012100
 80067e0:	40012200 	.word	0x40012200

080067e4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80067ee:	2300      	movs	r3, #0
 80067f0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006800:	d113      	bne.n	800682a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800680c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006810:	d10b      	bne.n	800682a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	f043 0220 	orr.w	r2, r3, #32
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e063      	b.n	80068f2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800682a:	f7ff fe95 	bl	8006558 <HAL_GetTick>
 800682e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006830:	e021      	b.n	8006876 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006838:	d01d      	beq.n	8006876 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d007      	beq.n	8006850 <HAL_ADC_PollForConversion+0x6c>
 8006840:	f7ff fe8a 	bl	8006558 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	429a      	cmp	r2, r3
 800684e:	d212      	bcs.n	8006876 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0302 	and.w	r3, r3, #2
 800685a:	2b02      	cmp	r3, #2
 800685c:	d00b      	beq.n	8006876 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006862:	f043 0204 	orr.w	r2, r3, #4
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e03d      	b.n	80068f2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b02      	cmp	r3, #2
 8006882:	d1d6      	bne.n	8006832 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f06f 0212 	mvn.w	r2, #18
 800688c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006892:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d123      	bne.n	80068f0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d11f      	bne.n	80068f0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d006      	beq.n	80068cc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d111      	bne.n	80068f0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d105      	bne.n	80068f0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e8:	f043 0201 	orr.w	r2, r3, #1
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80068fa:	b480      	push	{r7}
 80068fc:	b083      	sub	sp, #12
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006908:	4618      	mov	r0, r3
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800691e:	2300      	movs	r3, #0
 8006920:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006928:	2b01      	cmp	r3, #1
 800692a:	d101      	bne.n	8006930 <HAL_ADC_ConfigChannel+0x1c>
 800692c:	2302      	movs	r3, #2
 800692e:	e113      	b.n	8006b58 <HAL_ADC_ConfigChannel+0x244>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b09      	cmp	r3, #9
 800693e:	d925      	bls.n	800698c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68d9      	ldr	r1, [r3, #12]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	b29b      	uxth	r3, r3
 800694c:	461a      	mov	r2, r3
 800694e:	4613      	mov	r3, r2
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	4413      	add	r3, r2
 8006954:	3b1e      	subs	r3, #30
 8006956:	2207      	movs	r2, #7
 8006958:	fa02 f303 	lsl.w	r3, r2, r3
 800695c:	43da      	mvns	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	400a      	ands	r2, r1
 8006964:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68d9      	ldr	r1, [r3, #12]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	689a      	ldr	r2, [r3, #8]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	b29b      	uxth	r3, r3
 8006976:	4618      	mov	r0, r3
 8006978:	4603      	mov	r3, r0
 800697a:	005b      	lsls	r3, r3, #1
 800697c:	4403      	add	r3, r0
 800697e:	3b1e      	subs	r3, #30
 8006980:	409a      	lsls	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	430a      	orrs	r2, r1
 8006988:	60da      	str	r2, [r3, #12]
 800698a:	e022      	b.n	80069d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6919      	ldr	r1, [r3, #16]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	b29b      	uxth	r3, r3
 8006998:	461a      	mov	r2, r3
 800699a:	4613      	mov	r3, r2
 800699c:	005b      	lsls	r3, r3, #1
 800699e:	4413      	add	r3, r2
 80069a0:	2207      	movs	r2, #7
 80069a2:	fa02 f303 	lsl.w	r3, r2, r3
 80069a6:	43da      	mvns	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	400a      	ands	r2, r1
 80069ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6919      	ldr	r1, [r3, #16]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	689a      	ldr	r2, [r3, #8]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	b29b      	uxth	r3, r3
 80069c0:	4618      	mov	r0, r3
 80069c2:	4603      	mov	r3, r0
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	4403      	add	r3, r0
 80069c8:	409a      	lsls	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	430a      	orrs	r2, r1
 80069d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	2b06      	cmp	r3, #6
 80069d8:	d824      	bhi.n	8006a24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	4613      	mov	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	3b05      	subs	r3, #5
 80069ec:	221f      	movs	r2, #31
 80069ee:	fa02 f303 	lsl.w	r3, r2, r3
 80069f2:	43da      	mvns	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	400a      	ands	r2, r1
 80069fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	4618      	mov	r0, r3
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	3b05      	subs	r3, #5
 8006a16:	fa00 f203 	lsl.w	r2, r0, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	635a      	str	r2, [r3, #52]	; 0x34
 8006a22:	e04c      	b.n	8006abe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	2b0c      	cmp	r3, #12
 8006a2a:	d824      	bhi.n	8006a76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	4613      	mov	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	3b23      	subs	r3, #35	; 0x23
 8006a3e:	221f      	movs	r2, #31
 8006a40:	fa02 f303 	lsl.w	r3, r2, r3
 8006a44:	43da      	mvns	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	400a      	ands	r2, r1
 8006a4c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	4613      	mov	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	3b23      	subs	r3, #35	; 0x23
 8006a68:	fa00 f203 	lsl.w	r2, r0, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	430a      	orrs	r2, r1
 8006a72:	631a      	str	r2, [r3, #48]	; 0x30
 8006a74:	e023      	b.n	8006abe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	4613      	mov	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	3b41      	subs	r3, #65	; 0x41
 8006a88:	221f      	movs	r2, #31
 8006a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8e:	43da      	mvns	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	400a      	ands	r2, r1
 8006a96:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	3b41      	subs	r3, #65	; 0x41
 8006ab2:	fa00 f203 	lsl.w	r2, r0, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006abe:	4b29      	ldr	r3, [pc, #164]	; (8006b64 <HAL_ADC_ConfigChannel+0x250>)
 8006ac0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a28      	ldr	r2, [pc, #160]	; (8006b68 <HAL_ADC_ConfigChannel+0x254>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d10f      	bne.n	8006aec <HAL_ADC_ConfigChannel+0x1d8>
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b12      	cmp	r3, #18
 8006ad2:	d10b      	bne.n	8006aec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a1d      	ldr	r2, [pc, #116]	; (8006b68 <HAL_ADC_ConfigChannel+0x254>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d12b      	bne.n	8006b4e <HAL_ADC_ConfigChannel+0x23a>
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a1c      	ldr	r2, [pc, #112]	; (8006b6c <HAL_ADC_ConfigChannel+0x258>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d003      	beq.n	8006b08 <HAL_ADC_ConfigChannel+0x1f4>
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2b11      	cmp	r3, #17
 8006b06:	d122      	bne.n	8006b4e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a11      	ldr	r2, [pc, #68]	; (8006b6c <HAL_ADC_ConfigChannel+0x258>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d111      	bne.n	8006b4e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006b2a:	4b11      	ldr	r3, [pc, #68]	; (8006b70 <HAL_ADC_ConfigChannel+0x25c>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a11      	ldr	r2, [pc, #68]	; (8006b74 <HAL_ADC_ConfigChannel+0x260>)
 8006b30:	fba2 2303 	umull	r2, r3, r2, r3
 8006b34:	0c9a      	lsrs	r2, r3, #18
 8006b36:	4613      	mov	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	005b      	lsls	r3, r3, #1
 8006b3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006b40:	e002      	b.n	8006b48 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	3b01      	subs	r3, #1
 8006b46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1f9      	bne.n	8006b42 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3714      	adds	r7, #20
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	40012300 	.word	0x40012300
 8006b68:	40012000 	.word	0x40012000
 8006b6c:	10000012 	.word	0x10000012
 8006b70:	20000040 	.word	0x20000040
 8006b74:	431bde83 	.word	0x431bde83

08006b78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006b80:	4b79      	ldr	r3, [pc, #484]	; (8006d68 <ADC_Init+0x1f0>)
 8006b82:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	6859      	ldr	r1, [r3, #4]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	021a      	lsls	r2, r3, #8
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	685a      	ldr	r2, [r3, #4]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006bd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6859      	ldr	r1, [r3, #4]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689a      	ldr	r2, [r3, #8]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	430a      	orrs	r2, r1
 8006be2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689a      	ldr	r2, [r3, #8]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6899      	ldr	r1, [r3, #8]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68da      	ldr	r2, [r3, #12]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0a:	4a58      	ldr	r2, [pc, #352]	; (8006d6c <ADC_Init+0x1f4>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d022      	beq.n	8006c56 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6899      	ldr	r1, [r3, #8]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006c40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6899      	ldr	r1, [r3, #8]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	609a      	str	r2, [r3, #8]
 8006c54:	e00f      	b.n	8006c76 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689a      	ldr	r2, [r3, #8]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689a      	ldr	r2, [r3, #8]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006c74:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689a      	ldr	r2, [r3, #8]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f022 0202 	bic.w	r2, r2, #2
 8006c84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	6899      	ldr	r1, [r3, #8]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	7e1b      	ldrb	r3, [r3, #24]
 8006c90:	005a      	lsls	r2, r3, #1
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d01b      	beq.n	8006cdc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	685a      	ldr	r2, [r3, #4]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cb2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006cc2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6859      	ldr	r1, [r3, #4]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	035a      	lsls	r2, r3, #13
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	605a      	str	r2, [r3, #4]
 8006cda:	e007      	b.n	8006cec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006cfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	3b01      	subs	r3, #1
 8006d08:	051a      	lsls	r2, r3, #20
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006d20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6899      	ldr	r1, [r3, #8]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d2e:	025a      	lsls	r2, r3, #9
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689a      	ldr	r2, [r3, #8]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6899      	ldr	r1, [r3, #8]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	029a      	lsls	r2, r3, #10
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	430a      	orrs	r2, r1
 8006d5a:	609a      	str	r2, [r3, #8]
}
 8006d5c:	bf00      	nop
 8006d5e:	3714      	adds	r7, #20
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	40012300 	.word	0x40012300
 8006d6c:	0f000001 	.word	0x0f000001

08006d70 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d101      	bne.n	8006d88 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8006d84:	2302      	movs	r3, #2
 8006d86:	e031      	b.n	8006dec <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006d90:	4b19      	ldr	r3, [pc, #100]	; (8006df8 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f023 021f 	bic.w	r2, r3, #31
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	431a      	orrs	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	685a      	ldr	r2, [r3, #4]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	431a      	orrs	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	685a      	ldr	r2, [r3, #4]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	431a      	orrs	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3714      	adds	r7, #20
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr
 8006df8:	40012300 	.word	0x40012300

08006dfc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d101      	bne.n	8006e0e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e0ed      	b.n	8006fea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d102      	bne.n	8006e20 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7fa feac 	bl	8001b78 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 0202 	bic.w	r2, r2, #2
 8006e2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e30:	f7ff fb92 	bl	8006558 <HAL_GetTick>
 8006e34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006e36:	e012      	b.n	8006e5e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006e38:	f7ff fb8e 	bl	8006558 <HAL_GetTick>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	2b0a      	cmp	r3, #10
 8006e44:	d90b      	bls.n	8006e5e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2205      	movs	r2, #5
 8006e56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e0c5      	b.n	8006fea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f003 0302 	and.w	r3, r3, #2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1e5      	bne.n	8006e38 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f042 0201 	orr.w	r2, r2, #1
 8006e7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e7c:	f7ff fb6c 	bl	8006558 <HAL_GetTick>
 8006e80:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006e82:	e012      	b.n	8006eaa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006e84:	f7ff fb68 	bl	8006558 <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	2b0a      	cmp	r3, #10
 8006e90:	d90b      	bls.n	8006eaa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2205      	movs	r2, #5
 8006ea2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e09f      	b.n	8006fea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d0e5      	beq.n	8006e84 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	7e1b      	ldrb	r3, [r3, #24]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d108      	bne.n	8006ed2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	e007      	b.n	8006ee2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ee0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	7e5b      	ldrb	r3, [r3, #25]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d108      	bne.n	8006efc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	e007      	b.n	8006f0c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	7e9b      	ldrb	r3, [r3, #26]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d108      	bne.n	8006f26 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f042 0220 	orr.w	r2, r2, #32
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	e007      	b.n	8006f36 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f022 0220 	bic.w	r2, r2, #32
 8006f34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	7edb      	ldrb	r3, [r3, #27]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d108      	bne.n	8006f50 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f022 0210 	bic.w	r2, r2, #16
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	e007      	b.n	8006f60 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f042 0210 	orr.w	r2, r2, #16
 8006f5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	7f1b      	ldrb	r3, [r3, #28]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d108      	bne.n	8006f7a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f042 0208 	orr.w	r2, r2, #8
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	e007      	b.n	8006f8a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f022 0208 	bic.w	r2, r2, #8
 8006f88:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	7f5b      	ldrb	r3, [r3, #29]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d108      	bne.n	8006fa4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f042 0204 	orr.w	r2, r2, #4
 8006fa0:	601a      	str	r2, [r3, #0]
 8006fa2:	e007      	b.n	8006fb4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 0204 	bic.w	r2, r2, #4
 8006fb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	689a      	ldr	r2, [r3, #8]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	431a      	orrs	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	ea42 0103 	orr.w	r1, r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	1e5a      	subs	r2, r3, #1
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
	...

08006ff4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b087      	sub	sp, #28
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 3020 	ldrb.w	r3, [r3, #32]
 800700a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800700c:	7cfb      	ldrb	r3, [r7, #19]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d003      	beq.n	800701a <HAL_CAN_ConfigFilter+0x26>
 8007012:	7cfb      	ldrb	r3, [r7, #19]
 8007014:	2b02      	cmp	r3, #2
 8007016:	f040 80be 	bne.w	8007196 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800701a:	4b65      	ldr	r3, [pc, #404]	; (80071b0 <HAL_CAN_ConfigFilter+0x1bc>)
 800701c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007024:	f043 0201 	orr.w	r2, r3, #1
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007034:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007048:	021b      	lsls	r3, r3, #8
 800704a:	431a      	orrs	r2, r3
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	f003 031f 	and.w	r3, r3, #31
 800705a:	2201      	movs	r2, #1
 800705c:	fa02 f303 	lsl.w	r3, r2, r3
 8007060:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	43db      	mvns	r3, r3
 800706c:	401a      	ands	r2, r3
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	69db      	ldr	r3, [r3, #28]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d123      	bne.n	80070c4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	43db      	mvns	r3, r3
 8007086:	401a      	ands	r2, r3
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800709e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	3248      	adds	r2, #72	; 0x48
 80070a4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80070b8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80070ba:	6979      	ldr	r1, [r7, #20]
 80070bc:	3348      	adds	r3, #72	; 0x48
 80070be:	00db      	lsls	r3, r3, #3
 80070c0:	440b      	add	r3, r1
 80070c2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	69db      	ldr	r3, [r3, #28]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d122      	bne.n	8007112 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	431a      	orrs	r2, r3
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80070ec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	3248      	adds	r2, #72	; 0x48
 80070f2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007106:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007108:	6979      	ldr	r1, [r7, #20]
 800710a:	3348      	adds	r3, #72	; 0x48
 800710c:	00db      	lsls	r3, r3, #3
 800710e:	440b      	add	r3, r1
 8007110:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d109      	bne.n	800712e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	43db      	mvns	r3, r3
 8007124:	401a      	ands	r2, r3
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800712c:	e007      	b.n	800713e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	431a      	orrs	r2, r3
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d109      	bne.n	800715a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	43db      	mvns	r3, r3
 8007150:	401a      	ands	r2, r3
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007158:	e007      	b.n	800716a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	431a      	orrs	r2, r3
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d107      	bne.n	8007182 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	431a      	orrs	r2, r3
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007188:	f023 0201 	bic.w	r2, r3, #1
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	e006      	b.n	80071a4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
  }
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	371c      	adds	r7, #28
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr
 80071b0:	40006400 	.word	0x40006400

080071b4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d12e      	bne.n	8007226 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2202      	movs	r2, #2
 80071cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f022 0201 	bic.w	r2, r2, #1
 80071de:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071e0:	f7ff f9ba 	bl	8006558 <HAL_GetTick>
 80071e4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80071e6:	e012      	b.n	800720e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80071e8:	f7ff f9b6 	bl	8006558 <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	2b0a      	cmp	r3, #10
 80071f4:	d90b      	bls.n	800720e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2205      	movs	r2, #5
 8007206:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e012      	b.n	8007234 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	f003 0301 	and.w	r3, r3, #1
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1e5      	bne.n	80071e8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	e006      	b.n	8007234 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
  }
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800723c:	b480      	push	{r7}
 800723e:	b089      	sub	sp, #36	; 0x24
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]
 8007248:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007250:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800725a:	7ffb      	ldrb	r3, [r7, #31]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d003      	beq.n	8007268 <HAL_CAN_AddTxMessage+0x2c>
 8007260:	7ffb      	ldrb	r3, [r7, #31]
 8007262:	2b02      	cmp	r3, #2
 8007264:	f040 80b8 	bne.w	80073d8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10a      	bne.n	8007288 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007278:	2b00      	cmp	r3, #0
 800727a:	d105      	bne.n	8007288 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 80a0 	beq.w	80073c8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	0e1b      	lsrs	r3, r3, #24
 800728c:	f003 0303 	and.w	r3, r3, #3
 8007290:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	2b02      	cmp	r3, #2
 8007296:	d907      	bls.n	80072a8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e09e      	b.n	80073e6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80072a8:	2201      	movs	r2, #1
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	409a      	lsls	r2, r3
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10d      	bne.n	80072d6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80072c4:	68f9      	ldr	r1, [r7, #12]
 80072c6:	6809      	ldr	r1, [r1, #0]
 80072c8:	431a      	orrs	r2, r3
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	3318      	adds	r3, #24
 80072ce:	011b      	lsls	r3, r3, #4
 80072d0:	440b      	add	r3, r1
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	e00f      	b.n	80072f6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80072e0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80072e6:	68f9      	ldr	r1, [r7, #12]
 80072e8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80072ea:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	3318      	adds	r3, #24
 80072f0:	011b      	lsls	r3, r3, #4
 80072f2:	440b      	add	r3, r1
 80072f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6819      	ldr	r1, [r3, #0]
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	691a      	ldr	r2, [r3, #16]
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	3318      	adds	r3, #24
 8007302:	011b      	lsls	r3, r3, #4
 8007304:	440b      	add	r3, r1
 8007306:	3304      	adds	r3, #4
 8007308:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	7d1b      	ldrb	r3, [r3, #20]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d111      	bne.n	8007336 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	3318      	adds	r3, #24
 800731a:	011b      	lsls	r3, r3, #4
 800731c:	4413      	add	r3, r2
 800731e:	3304      	adds	r3, #4
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	6811      	ldr	r1, [r2, #0]
 8007326:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	3318      	adds	r3, #24
 800732e:	011b      	lsls	r3, r3, #4
 8007330:	440b      	add	r3, r1
 8007332:	3304      	adds	r3, #4
 8007334:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	3307      	adds	r3, #7
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	061a      	lsls	r2, r3, #24
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	3306      	adds	r3, #6
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	041b      	lsls	r3, r3, #16
 8007346:	431a      	orrs	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	3305      	adds	r3, #5
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	021b      	lsls	r3, r3, #8
 8007350:	4313      	orrs	r3, r2
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	3204      	adds	r2, #4
 8007356:	7812      	ldrb	r2, [r2, #0]
 8007358:	4610      	mov	r0, r2
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	6811      	ldr	r1, [r2, #0]
 800735e:	ea43 0200 	orr.w	r2, r3, r0
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	011b      	lsls	r3, r3, #4
 8007366:	440b      	add	r3, r1
 8007368:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800736c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	3303      	adds	r3, #3
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	061a      	lsls	r2, r3, #24
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	3302      	adds	r3, #2
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	041b      	lsls	r3, r3, #16
 800737e:	431a      	orrs	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	3301      	adds	r3, #1
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	021b      	lsls	r3, r3, #8
 8007388:	4313      	orrs	r3, r2
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	7812      	ldrb	r2, [r2, #0]
 800738e:	4610      	mov	r0, r2
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	6811      	ldr	r1, [r2, #0]
 8007394:	ea43 0200 	orr.w	r2, r3, r0
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	011b      	lsls	r3, r3, #4
 800739c:	440b      	add	r3, r1
 800739e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80073a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	3318      	adds	r3, #24
 80073ac:	011b      	lsls	r3, r3, #4
 80073ae:	4413      	add	r3, r2
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	6811      	ldr	r1, [r2, #0]
 80073b6:	f043 0201 	orr.w	r2, r3, #1
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	3318      	adds	r3, #24
 80073be:	011b      	lsls	r3, r3, #4
 80073c0:	440b      	add	r3, r1
 80073c2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80073c4:	2300      	movs	r3, #0
 80073c6:	e00e      	b.n	80073e6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e006      	b.n	80073e6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
  }
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3724      	adds	r7, #36	; 0x24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80073f2:	b480      	push	{r7}
 80073f4:	b087      	sub	sp, #28
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	60f8      	str	r0, [r7, #12]
 80073fa:	60b9      	str	r1, [r7, #8]
 80073fc:	607a      	str	r2, [r7, #4]
 80073fe:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007406:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007408:	7dfb      	ldrb	r3, [r7, #23]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d003      	beq.n	8007416 <HAL_CAN_GetRxMessage+0x24>
 800740e:	7dfb      	ldrb	r3, [r7, #23]
 8007410:	2b02      	cmp	r3, #2
 8007412:	f040 80f3 	bne.w	80075fc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10e      	bne.n	800743a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	f003 0303 	and.w	r3, r3, #3
 8007426:	2b00      	cmp	r3, #0
 8007428:	d116      	bne.n	8007458 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e0e7      	b.n	800760a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	f003 0303 	and.w	r3, r3, #3
 8007444:	2b00      	cmp	r3, #0
 8007446:	d107      	bne.n	8007458 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e0d8      	b.n	800760a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	331b      	adds	r3, #27
 8007460:	011b      	lsls	r3, r3, #4
 8007462:	4413      	add	r3, r2
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0204 	and.w	r2, r3, #4
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10c      	bne.n	8007490 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	331b      	adds	r3, #27
 800747e:	011b      	lsls	r3, r3, #4
 8007480:	4413      	add	r3, r2
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	0d5b      	lsrs	r3, r3, #21
 8007486:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	e00b      	b.n	80074a8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	331b      	adds	r3, #27
 8007498:	011b      	lsls	r3, r3, #4
 800749a:	4413      	add	r3, r2
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	08db      	lsrs	r3, r3, #3
 80074a0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	331b      	adds	r3, #27
 80074b0:	011b      	lsls	r3, r3, #4
 80074b2:	4413      	add	r3, r2
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 0202 	and.w	r2, r3, #2
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	331b      	adds	r3, #27
 80074c6:	011b      	lsls	r3, r3, #4
 80074c8:	4413      	add	r3, r2
 80074ca:	3304      	adds	r3, #4
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 020f 	and.w	r2, r3, #15
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	331b      	adds	r3, #27
 80074de:	011b      	lsls	r3, r3, #4
 80074e0:	4413      	add	r3, r2
 80074e2:	3304      	adds	r3, #4
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	0a1b      	lsrs	r3, r3, #8
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	331b      	adds	r3, #27
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	4413      	add	r3, r2
 80074fa:	3304      	adds	r3, #4
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	0c1b      	lsrs	r3, r3, #16
 8007500:	b29a      	uxth	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	011b      	lsls	r3, r3, #4
 800750e:	4413      	add	r3, r2
 8007510:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	b2da      	uxtb	r2, r3
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	011b      	lsls	r3, r3, #4
 8007524:	4413      	add	r3, r2
 8007526:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	0a1a      	lsrs	r2, r3, #8
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	3301      	adds	r3, #1
 8007532:	b2d2      	uxtb	r2, r2
 8007534:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	011b      	lsls	r3, r3, #4
 800753e:	4413      	add	r3, r2
 8007540:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	0c1a      	lsrs	r2, r3, #16
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	3302      	adds	r3, #2
 800754c:	b2d2      	uxtb	r2, r2
 800754e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	011b      	lsls	r3, r3, #4
 8007558:	4413      	add	r3, r2
 800755a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	0e1a      	lsrs	r2, r3, #24
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	3303      	adds	r3, #3
 8007566:	b2d2      	uxtb	r2, r2
 8007568:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	011b      	lsls	r3, r3, #4
 8007572:	4413      	add	r3, r2
 8007574:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	3304      	adds	r3, #4
 800757e:	b2d2      	uxtb	r2, r2
 8007580:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	011b      	lsls	r3, r3, #4
 800758a:	4413      	add	r3, r2
 800758c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	0a1a      	lsrs	r2, r3, #8
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	3305      	adds	r3, #5
 8007598:	b2d2      	uxtb	r2, r2
 800759a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	011b      	lsls	r3, r3, #4
 80075a4:	4413      	add	r3, r2
 80075a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	0c1a      	lsrs	r2, r3, #16
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	3306      	adds	r3, #6
 80075b2:	b2d2      	uxtb	r2, r2
 80075b4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	011b      	lsls	r3, r3, #4
 80075be:	4413      	add	r3, r2
 80075c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	0e1a      	lsrs	r2, r3, #24
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	3307      	adds	r3, #7
 80075cc:	b2d2      	uxtb	r2, r2
 80075ce:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d108      	bne.n	80075e8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68da      	ldr	r2, [r3, #12]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f042 0220 	orr.w	r2, r2, #32
 80075e4:	60da      	str	r2, [r3, #12]
 80075e6:	e007      	b.n	80075f8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	691a      	ldr	r2, [r3, #16]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f042 0220 	orr.w	r2, r2, #32
 80075f6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	e006      	b.n	800760a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007600:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
  }
}
 800760a:	4618      	mov	r0, r3
 800760c:	371c      	adds	r7, #28
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b08a      	sub	sp, #40	; 0x28
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800761e:	2300      	movs	r3, #0
 8007620:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	695b      	ldr	r3, [r3, #20]
 8007628:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	699b      	ldr	r3, [r3, #24]
 8007650:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	f003 0301 	and.w	r3, r3, #1
 8007658:	2b00      	cmp	r3, #0
 800765a:	d07c      	beq.n	8007756 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	2b00      	cmp	r3, #0
 8007664:	d023      	beq.n	80076ae <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2201      	movs	r2, #1
 800766c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	f003 0302 	and.w	r3, r3, #2
 8007674:	2b00      	cmp	r3, #0
 8007676:	d003      	beq.n	8007680 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f983 	bl	8007984 <HAL_CAN_TxMailbox0CompleteCallback>
 800767e:	e016      	b.n	80076ae <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	f003 0304 	and.w	r3, r3, #4
 8007686:	2b00      	cmp	r3, #0
 8007688:	d004      	beq.n	8007694 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800768a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007690:	627b      	str	r3, [r7, #36]	; 0x24
 8007692:	e00c      	b.n	80076ae <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	f003 0308 	and.w	r3, r3, #8
 800769a:	2b00      	cmp	r3, #0
 800769c:	d004      	beq.n	80076a8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80076a4:	627b      	str	r3, [r7, #36]	; 0x24
 80076a6:	e002      	b.n	80076ae <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 f989 	bl	80079c0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d024      	beq.n	8007702 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d003      	beq.n	80076d4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 f963 	bl	8007998 <HAL_CAN_TxMailbox1CompleteCallback>
 80076d2:	e016      	b.n	8007702 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d004      	beq.n	80076e8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80076e4:	627b      	str	r3, [r7, #36]	; 0x24
 80076e6:	e00c      	b.n	8007702 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d004      	beq.n	80076fc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80076f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076f8:	627b      	str	r3, [r7, #36]	; 0x24
 80076fa:	e002      	b.n	8007702 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f969 	bl	80079d4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d024      	beq.n	8007756 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007714:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d003      	beq.n	8007728 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 f943 	bl	80079ac <HAL_CAN_TxMailbox2CompleteCallback>
 8007726:	e016      	b.n	8007756 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d004      	beq.n	800773c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007738:	627b      	str	r3, [r7, #36]	; 0x24
 800773a:	e00c      	b.n	8007756 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d004      	beq.n	8007750 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800774c:	627b      	str	r3, [r7, #36]	; 0x24
 800774e:	e002      	b.n	8007756 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f949 	bl	80079e8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	f003 0308 	and.w	r3, r3, #8
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00c      	beq.n	800777a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	f003 0310 	and.w	r3, r3, #16
 8007766:	2b00      	cmp	r3, #0
 8007768:	d007      	beq.n	800777a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007770:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2210      	movs	r2, #16
 8007778:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	f003 0304 	and.w	r3, r3, #4
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00b      	beq.n	800779c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	f003 0308 	and.w	r3, r3, #8
 800778a:	2b00      	cmp	r3, #0
 800778c:	d006      	beq.n	800779c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2208      	movs	r2, #8
 8007794:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f93a 	bl	8007a10 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800779c:	6a3b      	ldr	r3, [r7, #32]
 800779e:	f003 0302 	and.w	r3, r3, #2
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d009      	beq.n	80077ba <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	f003 0303 	and.w	r3, r3, #3
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d002      	beq.n	80077ba <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 f921 	bl	80079fc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80077ba:	6a3b      	ldr	r3, [r7, #32]
 80077bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00c      	beq.n	80077de <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	f003 0310 	and.w	r3, r3, #16
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d007      	beq.n	80077de <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80077ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80077d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2210      	movs	r2, #16
 80077dc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80077de:	6a3b      	ldr	r3, [r7, #32]
 80077e0:	f003 0320 	and.w	r3, r3, #32
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00b      	beq.n	8007800 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	f003 0308 	and.w	r3, r3, #8
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d006      	beq.n	8007800 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2208      	movs	r2, #8
 80077f8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f91c 	bl	8007a38 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007800:	6a3b      	ldr	r3, [r7, #32]
 8007802:	f003 0310 	and.w	r3, r3, #16
 8007806:	2b00      	cmp	r3, #0
 8007808:	d009      	beq.n	800781e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	f003 0303 	and.w	r3, r3, #3
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f903 	bl	8007a24 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800781e:	6a3b      	ldr	r3, [r7, #32]
 8007820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00b      	beq.n	8007840 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	f003 0310 	and.w	r3, r3, #16
 800782e:	2b00      	cmp	r3, #0
 8007830:	d006      	beq.n	8007840 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2210      	movs	r2, #16
 8007838:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f906 	bl	8007a4c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007840:	6a3b      	ldr	r3, [r7, #32]
 8007842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00b      	beq.n	8007862 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	f003 0308 	and.w	r3, r3, #8
 8007850:	2b00      	cmp	r3, #0
 8007852:	d006      	beq.n	8007862 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2208      	movs	r2, #8
 800785a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f8ff 	bl	8007a60 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007868:	2b00      	cmp	r3, #0
 800786a:	d07b      	beq.n	8007964 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	f003 0304 	and.w	r3, r3, #4
 8007872:	2b00      	cmp	r3, #0
 8007874:	d072      	beq.n	800795c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800787c:	2b00      	cmp	r3, #0
 800787e:	d008      	beq.n	8007892 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	f043 0301 	orr.w	r3, r3, #1
 8007890:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007898:	2b00      	cmp	r3, #0
 800789a:	d008      	beq.n	80078ae <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d003      	beq.n	80078ae <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80078a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a8:	f043 0302 	orr.w	r3, r3, #2
 80078ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80078ae:	6a3b      	ldr	r3, [r7, #32]
 80078b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d008      	beq.n	80078ca <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d003      	beq.n	80078ca <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80078c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c4:	f043 0304 	orr.w	r3, r3, #4
 80078c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80078ca:	6a3b      	ldr	r3, [r7, #32]
 80078cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d043      	beq.n	800795c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d03e      	beq.n	800795c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078e4:	2b60      	cmp	r3, #96	; 0x60
 80078e6:	d02b      	beq.n	8007940 <HAL_CAN_IRQHandler+0x32a>
 80078e8:	2b60      	cmp	r3, #96	; 0x60
 80078ea:	d82e      	bhi.n	800794a <HAL_CAN_IRQHandler+0x334>
 80078ec:	2b50      	cmp	r3, #80	; 0x50
 80078ee:	d022      	beq.n	8007936 <HAL_CAN_IRQHandler+0x320>
 80078f0:	2b50      	cmp	r3, #80	; 0x50
 80078f2:	d82a      	bhi.n	800794a <HAL_CAN_IRQHandler+0x334>
 80078f4:	2b40      	cmp	r3, #64	; 0x40
 80078f6:	d019      	beq.n	800792c <HAL_CAN_IRQHandler+0x316>
 80078f8:	2b40      	cmp	r3, #64	; 0x40
 80078fa:	d826      	bhi.n	800794a <HAL_CAN_IRQHandler+0x334>
 80078fc:	2b30      	cmp	r3, #48	; 0x30
 80078fe:	d010      	beq.n	8007922 <HAL_CAN_IRQHandler+0x30c>
 8007900:	2b30      	cmp	r3, #48	; 0x30
 8007902:	d822      	bhi.n	800794a <HAL_CAN_IRQHandler+0x334>
 8007904:	2b10      	cmp	r3, #16
 8007906:	d002      	beq.n	800790e <HAL_CAN_IRQHandler+0x2f8>
 8007908:	2b20      	cmp	r3, #32
 800790a:	d005      	beq.n	8007918 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800790c:	e01d      	b.n	800794a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800790e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007910:	f043 0308 	orr.w	r3, r3, #8
 8007914:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007916:	e019      	b.n	800794c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791a:	f043 0310 	orr.w	r3, r3, #16
 800791e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007920:	e014      	b.n	800794c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007924:	f043 0320 	orr.w	r3, r3, #32
 8007928:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800792a:	e00f      	b.n	800794c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800792c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007932:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007934:	e00a      	b.n	800794c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800793c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800793e:	e005      	b.n	800794c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007946:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007948:	e000      	b.n	800794c <HAL_CAN_IRQHandler+0x336>
            break;
 800794a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	699a      	ldr	r2, [r3, #24]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800795a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2204      	movs	r2, #4
 8007962:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007966:	2b00      	cmp	r3, #0
 8007968:	d008      	beq.n	800797c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	431a      	orrs	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f87c 	bl	8007a74 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800797c:	bf00      	nop
 800797e:	3728      	adds	r7, #40	; 0x28
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80079b4:	bf00      	nop
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80079c8:	bf00      	nop
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007a2c:	bf00      	nop
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007a54:	bf00      	nop
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f003 0307 	and.w	r3, r3, #7
 8007a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007a98:	4b0c      	ldr	r3, [pc, #48]	; (8007acc <__NVIC_SetPriorityGrouping+0x44>)
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007a9e:	68ba      	ldr	r2, [r7, #8]
 8007aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007ab0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007aba:	4a04      	ldr	r2, [pc, #16]	; (8007acc <__NVIC_SetPriorityGrouping+0x44>)
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	60d3      	str	r3, [r2, #12]
}
 8007ac0:	bf00      	nop
 8007ac2:	3714      	adds	r7, #20
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr
 8007acc:	e000ed00 	.word	0xe000ed00

08007ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ad4:	4b04      	ldr	r3, [pc, #16]	; (8007ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	0a1b      	lsrs	r3, r3, #8
 8007ada:	f003 0307 	and.w	r3, r3, #7
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	e000ed00 	.word	0xe000ed00

08007aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	4603      	mov	r3, r0
 8007af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	db0b      	blt.n	8007b16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007afe:	79fb      	ldrb	r3, [r7, #7]
 8007b00:	f003 021f 	and.w	r2, r3, #31
 8007b04:	4907      	ldr	r1, [pc, #28]	; (8007b24 <__NVIC_EnableIRQ+0x38>)
 8007b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b0a:	095b      	lsrs	r3, r3, #5
 8007b0c:	2001      	movs	r0, #1
 8007b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8007b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007b16:	bf00      	nop
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	e000e100 	.word	0xe000e100

08007b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	4603      	mov	r3, r0
 8007b30:	6039      	str	r1, [r7, #0]
 8007b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	db0a      	blt.n	8007b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	b2da      	uxtb	r2, r3
 8007b40:	490c      	ldr	r1, [pc, #48]	; (8007b74 <__NVIC_SetPriority+0x4c>)
 8007b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b46:	0112      	lsls	r2, r2, #4
 8007b48:	b2d2      	uxtb	r2, r2
 8007b4a:	440b      	add	r3, r1
 8007b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007b50:	e00a      	b.n	8007b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	b2da      	uxtb	r2, r3
 8007b56:	4908      	ldr	r1, [pc, #32]	; (8007b78 <__NVIC_SetPriority+0x50>)
 8007b58:	79fb      	ldrb	r3, [r7, #7]
 8007b5a:	f003 030f 	and.w	r3, r3, #15
 8007b5e:	3b04      	subs	r3, #4
 8007b60:	0112      	lsls	r2, r2, #4
 8007b62:	b2d2      	uxtb	r2, r2
 8007b64:	440b      	add	r3, r1
 8007b66:	761a      	strb	r2, [r3, #24]
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	e000e100 	.word	0xe000e100
 8007b78:	e000ed00 	.word	0xe000ed00

08007b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b089      	sub	sp, #36	; 0x24
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f003 0307 	and.w	r3, r3, #7
 8007b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	f1c3 0307 	rsb	r3, r3, #7
 8007b96:	2b04      	cmp	r3, #4
 8007b98:	bf28      	it	cs
 8007b9a:	2304      	movcs	r3, #4
 8007b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	3304      	adds	r3, #4
 8007ba2:	2b06      	cmp	r3, #6
 8007ba4:	d902      	bls.n	8007bac <NVIC_EncodePriority+0x30>
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	3b03      	subs	r3, #3
 8007baa:	e000      	b.n	8007bae <NVIC_EncodePriority+0x32>
 8007bac:	2300      	movs	r3, #0
 8007bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bba:	43da      	mvns	r2, r3
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	401a      	ands	r2, r3
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	fa01 f303 	lsl.w	r3, r1, r3
 8007bce:	43d9      	mvns	r1, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bd4:	4313      	orrs	r3, r2
         );
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3724      	adds	r7, #36	; 0x24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
	...

08007be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007bf4:	d301      	bcc.n	8007bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e00f      	b.n	8007c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007bfa:	4a0a      	ldr	r2, [pc, #40]	; (8007c24 <SysTick_Config+0x40>)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007c02:	210f      	movs	r1, #15
 8007c04:	f04f 30ff 	mov.w	r0, #4294967295
 8007c08:	f7ff ff8e 	bl	8007b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007c0c:	4b05      	ldr	r3, [pc, #20]	; (8007c24 <SysTick_Config+0x40>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007c12:	4b04      	ldr	r3, [pc, #16]	; (8007c24 <SysTick_Config+0x40>)
 8007c14:	2207      	movs	r2, #7
 8007c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	e000e010 	.word	0xe000e010

08007c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f7ff ff29 	bl	8007a88 <__NVIC_SetPriorityGrouping>
}
 8007c36:	bf00      	nop
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b086      	sub	sp, #24
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	4603      	mov	r3, r0
 8007c46:	60b9      	str	r1, [r7, #8]
 8007c48:	607a      	str	r2, [r7, #4]
 8007c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007c50:	f7ff ff3e 	bl	8007ad0 <__NVIC_GetPriorityGrouping>
 8007c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	68b9      	ldr	r1, [r7, #8]
 8007c5a:	6978      	ldr	r0, [r7, #20]
 8007c5c:	f7ff ff8e 	bl	8007b7c <NVIC_EncodePriority>
 8007c60:	4602      	mov	r2, r0
 8007c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c66:	4611      	mov	r1, r2
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7ff ff5d 	bl	8007b28 <__NVIC_SetPriority>
}
 8007c6e:	bf00      	nop
 8007c70:	3718      	adds	r7, #24
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b082      	sub	sp, #8
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7ff ff31 	bl	8007aec <__NVIC_EnableIRQ>
}
 8007c8a:	bf00      	nop
 8007c8c:	3708      	adds	r7, #8
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b082      	sub	sp, #8
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7ff ffa2 	bl	8007be4 <SysTick_Config>
 8007ca0:	4603      	mov	r3, r0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b084      	sub	sp, #16
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cb6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007cb8:	f7fe fc4e 	bl	8006558 <HAL_GetTick>
 8007cbc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d008      	beq.n	8007cdc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2280      	movs	r2, #128	; 0x80
 8007cce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e052      	b.n	8007d82 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f022 0216 	bic.w	r2, r2, #22
 8007cea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	695a      	ldr	r2, [r3, #20]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cfa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d103      	bne.n	8007d0c <HAL_DMA_Abort+0x62>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d007      	beq.n	8007d1c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f022 0208 	bic.w	r2, r2, #8
 8007d1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f022 0201 	bic.w	r2, r2, #1
 8007d2a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d2c:	e013      	b.n	8007d56 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007d2e:	f7fe fc13 	bl	8006558 <HAL_GetTick>
 8007d32:	4602      	mov	r2, r0
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	1ad3      	subs	r3, r2, r3
 8007d38:	2b05      	cmp	r3, #5
 8007d3a:	d90c      	bls.n	8007d56 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2220      	movs	r2, #32
 8007d40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2203      	movs	r2, #3
 8007d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e015      	b.n	8007d82 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 0301 	and.w	r3, r3, #1
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1e4      	bne.n	8007d2e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d68:	223f      	movs	r2, #63	; 0x3f
 8007d6a:	409a      	lsls	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b083      	sub	sp, #12
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d004      	beq.n	8007da8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2280      	movs	r2, #128	; 0x80
 8007da2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e00c      	b.n	8007dc2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2205      	movs	r2, #5
 8007dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f022 0201 	bic.w	r2, r2, #1
 8007dbe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	370c      	adds	r7, #12
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
	...

08007dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b089      	sub	sp, #36	; 0x24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007dde:	2300      	movs	r3, #0
 8007de0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007de2:	2300      	movs	r3, #0
 8007de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007de6:	2300      	movs	r3, #0
 8007de8:	61fb      	str	r3, [r7, #28]
 8007dea:	e165      	b.n	80080b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007dec:	2201      	movs	r2, #1
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	fa02 f303 	lsl.w	r3, r2, r3
 8007df4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007e00:	693a      	ldr	r2, [r7, #16]
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	f040 8154 	bne.w	80080b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f003 0303 	and.w	r3, r3, #3
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d005      	beq.n	8007e22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d130      	bne.n	8007e84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	005b      	lsls	r3, r3, #1
 8007e2c:	2203      	movs	r2, #3
 8007e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e32:	43db      	mvns	r3, r3
 8007e34:	69ba      	ldr	r2, [r7, #24]
 8007e36:	4013      	ands	r3, r2
 8007e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	68da      	ldr	r2, [r3, #12]
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	005b      	lsls	r3, r3, #1
 8007e42:	fa02 f303 	lsl.w	r3, r2, r3
 8007e46:	69ba      	ldr	r2, [r7, #24]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	69ba      	ldr	r2, [r7, #24]
 8007e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007e58:	2201      	movs	r2, #1
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e60:	43db      	mvns	r3, r3
 8007e62:	69ba      	ldr	r2, [r7, #24]
 8007e64:	4013      	ands	r3, r2
 8007e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	091b      	lsrs	r3, r3, #4
 8007e6e:	f003 0201 	and.w	r2, r3, #1
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	fa02 f303 	lsl.w	r3, r2, r3
 8007e78:	69ba      	ldr	r2, [r7, #24]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	69ba      	ldr	r2, [r7, #24]
 8007e82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	f003 0303 	and.w	r3, r3, #3
 8007e8c:	2b03      	cmp	r3, #3
 8007e8e:	d017      	beq.n	8007ec0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	005b      	lsls	r3, r3, #1
 8007e9a:	2203      	movs	r2, #3
 8007e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea0:	43db      	mvns	r3, r3
 8007ea2:	69ba      	ldr	r2, [r7, #24]
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	689a      	ldr	r2, [r3, #8]
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	005b      	lsls	r3, r3, #1
 8007eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb4:	69ba      	ldr	r2, [r7, #24]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	69ba      	ldr	r2, [r7, #24]
 8007ebe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	f003 0303 	and.w	r3, r3, #3
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d123      	bne.n	8007f14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	08da      	lsrs	r2, r3, #3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	3208      	adds	r2, #8
 8007ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	f003 0307 	and.w	r3, r3, #7
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	220f      	movs	r2, #15
 8007ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee8:	43db      	mvns	r3, r3
 8007eea:	69ba      	ldr	r2, [r7, #24]
 8007eec:	4013      	ands	r3, r2
 8007eee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	691a      	ldr	r2, [r3, #16]
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	f003 0307 	and.w	r3, r3, #7
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	fa02 f303 	lsl.w	r3, r2, r3
 8007f00:	69ba      	ldr	r2, [r7, #24]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	08da      	lsrs	r2, r3, #3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	3208      	adds	r2, #8
 8007f0e:	69b9      	ldr	r1, [r7, #24]
 8007f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	005b      	lsls	r3, r3, #1
 8007f1e:	2203      	movs	r2, #3
 8007f20:	fa02 f303 	lsl.w	r3, r2, r3
 8007f24:	43db      	mvns	r3, r3
 8007f26:	69ba      	ldr	r2, [r7, #24]
 8007f28:	4013      	ands	r3, r2
 8007f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	f003 0203 	and.w	r2, r3, #3
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	005b      	lsls	r3, r3, #1
 8007f38:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	69ba      	ldr	r2, [r7, #24]
 8007f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f000 80ae 	beq.w	80080b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f56:	2300      	movs	r3, #0
 8007f58:	60fb      	str	r3, [r7, #12]
 8007f5a:	4b5d      	ldr	r3, [pc, #372]	; (80080d0 <HAL_GPIO_Init+0x300>)
 8007f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f5e:	4a5c      	ldr	r2, [pc, #368]	; (80080d0 <HAL_GPIO_Init+0x300>)
 8007f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f64:	6453      	str	r3, [r2, #68]	; 0x44
 8007f66:	4b5a      	ldr	r3, [pc, #360]	; (80080d0 <HAL_GPIO_Init+0x300>)
 8007f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f6e:	60fb      	str	r3, [r7, #12]
 8007f70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007f72:	4a58      	ldr	r2, [pc, #352]	; (80080d4 <HAL_GPIO_Init+0x304>)
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	089b      	lsrs	r3, r3, #2
 8007f78:	3302      	adds	r3, #2
 8007f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	f003 0303 	and.w	r3, r3, #3
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	220f      	movs	r2, #15
 8007f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f8e:	43db      	mvns	r3, r3
 8007f90:	69ba      	ldr	r2, [r7, #24]
 8007f92:	4013      	ands	r3, r2
 8007f94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a4f      	ldr	r2, [pc, #316]	; (80080d8 <HAL_GPIO_Init+0x308>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d025      	beq.n	8007fea <HAL_GPIO_Init+0x21a>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a4e      	ldr	r2, [pc, #312]	; (80080dc <HAL_GPIO_Init+0x30c>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d01f      	beq.n	8007fe6 <HAL_GPIO_Init+0x216>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a4d      	ldr	r2, [pc, #308]	; (80080e0 <HAL_GPIO_Init+0x310>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d019      	beq.n	8007fe2 <HAL_GPIO_Init+0x212>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a4c      	ldr	r2, [pc, #304]	; (80080e4 <HAL_GPIO_Init+0x314>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d013      	beq.n	8007fde <HAL_GPIO_Init+0x20e>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a4b      	ldr	r2, [pc, #300]	; (80080e8 <HAL_GPIO_Init+0x318>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d00d      	beq.n	8007fda <HAL_GPIO_Init+0x20a>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a4a      	ldr	r2, [pc, #296]	; (80080ec <HAL_GPIO_Init+0x31c>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d007      	beq.n	8007fd6 <HAL_GPIO_Init+0x206>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a49      	ldr	r2, [pc, #292]	; (80080f0 <HAL_GPIO_Init+0x320>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d101      	bne.n	8007fd2 <HAL_GPIO_Init+0x202>
 8007fce:	2306      	movs	r3, #6
 8007fd0:	e00c      	b.n	8007fec <HAL_GPIO_Init+0x21c>
 8007fd2:	2307      	movs	r3, #7
 8007fd4:	e00a      	b.n	8007fec <HAL_GPIO_Init+0x21c>
 8007fd6:	2305      	movs	r3, #5
 8007fd8:	e008      	b.n	8007fec <HAL_GPIO_Init+0x21c>
 8007fda:	2304      	movs	r3, #4
 8007fdc:	e006      	b.n	8007fec <HAL_GPIO_Init+0x21c>
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e004      	b.n	8007fec <HAL_GPIO_Init+0x21c>
 8007fe2:	2302      	movs	r3, #2
 8007fe4:	e002      	b.n	8007fec <HAL_GPIO_Init+0x21c>
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e000      	b.n	8007fec <HAL_GPIO_Init+0x21c>
 8007fea:	2300      	movs	r3, #0
 8007fec:	69fa      	ldr	r2, [r7, #28]
 8007fee:	f002 0203 	and.w	r2, r2, #3
 8007ff2:	0092      	lsls	r2, r2, #2
 8007ff4:	4093      	lsls	r3, r2
 8007ff6:	69ba      	ldr	r2, [r7, #24]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ffc:	4935      	ldr	r1, [pc, #212]	; (80080d4 <HAL_GPIO_Init+0x304>)
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	089b      	lsrs	r3, r3, #2
 8008002:	3302      	adds	r3, #2
 8008004:	69ba      	ldr	r2, [r7, #24]
 8008006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800800a:	4b3a      	ldr	r3, [pc, #232]	; (80080f4 <HAL_GPIO_Init+0x324>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	43db      	mvns	r3, r3
 8008014:	69ba      	ldr	r2, [r7, #24]
 8008016:	4013      	ands	r3, r2
 8008018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d003      	beq.n	800802e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008026:	69ba      	ldr	r2, [r7, #24]
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	4313      	orrs	r3, r2
 800802c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800802e:	4a31      	ldr	r2, [pc, #196]	; (80080f4 <HAL_GPIO_Init+0x324>)
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008034:	4b2f      	ldr	r3, [pc, #188]	; (80080f4 <HAL_GPIO_Init+0x324>)
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	43db      	mvns	r3, r3
 800803e:	69ba      	ldr	r2, [r7, #24]
 8008040:	4013      	ands	r3, r2
 8008042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800804c:	2b00      	cmp	r3, #0
 800804e:	d003      	beq.n	8008058 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008050:	69ba      	ldr	r2, [r7, #24]
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	4313      	orrs	r3, r2
 8008056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008058:	4a26      	ldr	r2, [pc, #152]	; (80080f4 <HAL_GPIO_Init+0x324>)
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800805e:	4b25      	ldr	r3, [pc, #148]	; (80080f4 <HAL_GPIO_Init+0x324>)
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	43db      	mvns	r3, r3
 8008068:	69ba      	ldr	r2, [r7, #24]
 800806a:	4013      	ands	r3, r2
 800806c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800807a:	69ba      	ldr	r2, [r7, #24]
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	4313      	orrs	r3, r2
 8008080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008082:	4a1c      	ldr	r2, [pc, #112]	; (80080f4 <HAL_GPIO_Init+0x324>)
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008088:	4b1a      	ldr	r3, [pc, #104]	; (80080f4 <HAL_GPIO_Init+0x324>)
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	43db      	mvns	r3, r3
 8008092:	69ba      	ldr	r2, [r7, #24]
 8008094:	4013      	ands	r3, r2
 8008096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d003      	beq.n	80080ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80080a4:	69ba      	ldr	r2, [r7, #24]
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80080ac:	4a11      	ldr	r2, [pc, #68]	; (80080f4 <HAL_GPIO_Init+0x324>)
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	3301      	adds	r3, #1
 80080b6:	61fb      	str	r3, [r7, #28]
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	2b0f      	cmp	r3, #15
 80080bc:	f67f ae96 	bls.w	8007dec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80080c0:	bf00      	nop
 80080c2:	bf00      	nop
 80080c4:	3724      	adds	r7, #36	; 0x24
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	40023800 	.word	0x40023800
 80080d4:	40013800 	.word	0x40013800
 80080d8:	40020000 	.word	0x40020000
 80080dc:	40020400 	.word	0x40020400
 80080e0:	40020800 	.word	0x40020800
 80080e4:	40020c00 	.word	0x40020c00
 80080e8:	40021000 	.word	0x40021000
 80080ec:	40021400 	.word	0x40021400
 80080f0:	40021800 	.word	0x40021800
 80080f4:	40013c00 	.word	0x40013c00

080080f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	460b      	mov	r3, r1
 8008102:	807b      	strh	r3, [r7, #2]
 8008104:	4613      	mov	r3, r2
 8008106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008108:	787b      	ldrb	r3, [r7, #1]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d003      	beq.n	8008116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800810e:	887a      	ldrh	r2, [r7, #2]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008114:	e003      	b.n	800811e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008116:	887b      	ldrh	r3, [r7, #2]
 8008118:	041a      	lsls	r2, r3, #16
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	619a      	str	r2, [r3, #24]
}
 800811e:	bf00      	nop
 8008120:	370c      	adds	r7, #12
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
	...

0800812c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008132:	2300      	movs	r3, #0
 8008134:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008136:	2300      	movs	r3, #0
 8008138:	603b      	str	r3, [r7, #0]
 800813a:	4b20      	ldr	r3, [pc, #128]	; (80081bc <HAL_PWREx_EnableOverDrive+0x90>)
 800813c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813e:	4a1f      	ldr	r2, [pc, #124]	; (80081bc <HAL_PWREx_EnableOverDrive+0x90>)
 8008140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008144:	6413      	str	r3, [r2, #64]	; 0x40
 8008146:	4b1d      	ldr	r3, [pc, #116]	; (80081bc <HAL_PWREx_EnableOverDrive+0x90>)
 8008148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800814e:	603b      	str	r3, [r7, #0]
 8008150:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008152:	4b1b      	ldr	r3, [pc, #108]	; (80081c0 <HAL_PWREx_EnableOverDrive+0x94>)
 8008154:	2201      	movs	r2, #1
 8008156:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008158:	f7fe f9fe 	bl	8006558 <HAL_GetTick>
 800815c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800815e:	e009      	b.n	8008174 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008160:	f7fe f9fa 	bl	8006558 <HAL_GetTick>
 8008164:	4602      	mov	r2, r0
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800816e:	d901      	bls.n	8008174 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008170:	2303      	movs	r3, #3
 8008172:	e01f      	b.n	80081b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008174:	4b13      	ldr	r3, [pc, #76]	; (80081c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800817c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008180:	d1ee      	bne.n	8008160 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008182:	4b11      	ldr	r3, [pc, #68]	; (80081c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008184:	2201      	movs	r2, #1
 8008186:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008188:	f7fe f9e6 	bl	8006558 <HAL_GetTick>
 800818c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800818e:	e009      	b.n	80081a4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008190:	f7fe f9e2 	bl	8006558 <HAL_GetTick>
 8008194:	4602      	mov	r2, r0
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800819e:	d901      	bls.n	80081a4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e007      	b.n	80081b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80081a4:	4b07      	ldr	r3, [pc, #28]	; (80081c4 <HAL_PWREx_EnableOverDrive+0x98>)
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081b0:	d1ee      	bne.n	8008190 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	40023800 	.word	0x40023800
 80081c0:	420e0040 	.word	0x420e0040
 80081c4:	40007000 	.word	0x40007000
 80081c8:	420e0044 	.word	0x420e0044

080081cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d101      	bne.n	80081e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	e0cc      	b.n	800837a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80081e0:	4b68      	ldr	r3, [pc, #416]	; (8008384 <HAL_RCC_ClockConfig+0x1b8>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 030f 	and.w	r3, r3, #15
 80081e8:	683a      	ldr	r2, [r7, #0]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d90c      	bls.n	8008208 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081ee:	4b65      	ldr	r3, [pc, #404]	; (8008384 <HAL_RCC_ClockConfig+0x1b8>)
 80081f0:	683a      	ldr	r2, [r7, #0]
 80081f2:	b2d2      	uxtb	r2, r2
 80081f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081f6:	4b63      	ldr	r3, [pc, #396]	; (8008384 <HAL_RCC_ClockConfig+0x1b8>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 030f 	and.w	r3, r3, #15
 80081fe:	683a      	ldr	r2, [r7, #0]
 8008200:	429a      	cmp	r2, r3
 8008202:	d001      	beq.n	8008208 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	e0b8      	b.n	800837a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 0302 	and.w	r3, r3, #2
 8008210:	2b00      	cmp	r3, #0
 8008212:	d020      	beq.n	8008256 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0304 	and.w	r3, r3, #4
 800821c:	2b00      	cmp	r3, #0
 800821e:	d005      	beq.n	800822c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008220:	4b59      	ldr	r3, [pc, #356]	; (8008388 <HAL_RCC_ClockConfig+0x1bc>)
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	4a58      	ldr	r2, [pc, #352]	; (8008388 <HAL_RCC_ClockConfig+0x1bc>)
 8008226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800822a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0308 	and.w	r3, r3, #8
 8008234:	2b00      	cmp	r3, #0
 8008236:	d005      	beq.n	8008244 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008238:	4b53      	ldr	r3, [pc, #332]	; (8008388 <HAL_RCC_ClockConfig+0x1bc>)
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	4a52      	ldr	r2, [pc, #328]	; (8008388 <HAL_RCC_ClockConfig+0x1bc>)
 800823e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008242:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008244:	4b50      	ldr	r3, [pc, #320]	; (8008388 <HAL_RCC_ClockConfig+0x1bc>)
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	494d      	ldr	r1, [pc, #308]	; (8008388 <HAL_RCC_ClockConfig+0x1bc>)
 8008252:	4313      	orrs	r3, r2
 8008254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	2b00      	cmp	r3, #0
 8008260:	d044      	beq.n	80082ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d107      	bne.n	800827a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800826a:	4b47      	ldr	r3, [pc, #284]	; (8008388 <HAL_RCC_ClockConfig+0x1bc>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008272:	2b00      	cmp	r3, #0
 8008274:	d119      	bne.n	80082aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e07f      	b.n	800837a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	2b02      	cmp	r3, #2
 8008280:	d003      	beq.n	800828a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008286:	2b03      	cmp	r3, #3
 8008288:	d107      	bne.n	800829a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800828a:	4b3f      	ldr	r3, [pc, #252]	; (8008388 <HAL_RCC_ClockConfig+0x1bc>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008292:	2b00      	cmp	r3, #0
 8008294:	d109      	bne.n	80082aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e06f      	b.n	800837a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800829a:	4b3b      	ldr	r3, [pc, #236]	; (8008388 <HAL_RCC_ClockConfig+0x1bc>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 0302 	and.w	r3, r3, #2
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d101      	bne.n	80082aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e067      	b.n	800837a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80082aa:	4b37      	ldr	r3, [pc, #220]	; (8008388 <HAL_RCC_ClockConfig+0x1bc>)
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	f023 0203 	bic.w	r2, r3, #3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	4934      	ldr	r1, [pc, #208]	; (8008388 <HAL_RCC_ClockConfig+0x1bc>)
 80082b8:	4313      	orrs	r3, r2
 80082ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80082bc:	f7fe f94c 	bl	8006558 <HAL_GetTick>
 80082c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082c2:	e00a      	b.n	80082da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082c4:	f7fe f948 	bl	8006558 <HAL_GetTick>
 80082c8:	4602      	mov	r2, r0
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d901      	bls.n	80082da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e04f      	b.n	800837a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082da:	4b2b      	ldr	r3, [pc, #172]	; (8008388 <HAL_RCC_ClockConfig+0x1bc>)
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	f003 020c 	and.w	r2, r3, #12
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d1eb      	bne.n	80082c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80082ec:	4b25      	ldr	r3, [pc, #148]	; (8008384 <HAL_RCC_ClockConfig+0x1b8>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 030f 	and.w	r3, r3, #15
 80082f4:	683a      	ldr	r2, [r7, #0]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d20c      	bcs.n	8008314 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082fa:	4b22      	ldr	r3, [pc, #136]	; (8008384 <HAL_RCC_ClockConfig+0x1b8>)
 80082fc:	683a      	ldr	r2, [r7, #0]
 80082fe:	b2d2      	uxtb	r2, r2
 8008300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008302:	4b20      	ldr	r3, [pc, #128]	; (8008384 <HAL_RCC_ClockConfig+0x1b8>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f003 030f 	and.w	r3, r3, #15
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	429a      	cmp	r2, r3
 800830e:	d001      	beq.n	8008314 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e032      	b.n	800837a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0304 	and.w	r3, r3, #4
 800831c:	2b00      	cmp	r3, #0
 800831e:	d008      	beq.n	8008332 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008320:	4b19      	ldr	r3, [pc, #100]	; (8008388 <HAL_RCC_ClockConfig+0x1bc>)
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	4916      	ldr	r1, [pc, #88]	; (8008388 <HAL_RCC_ClockConfig+0x1bc>)
 800832e:	4313      	orrs	r3, r2
 8008330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 0308 	and.w	r3, r3, #8
 800833a:	2b00      	cmp	r3, #0
 800833c:	d009      	beq.n	8008352 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800833e:	4b12      	ldr	r3, [pc, #72]	; (8008388 <HAL_RCC_ClockConfig+0x1bc>)
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	00db      	lsls	r3, r3, #3
 800834c:	490e      	ldr	r1, [pc, #56]	; (8008388 <HAL_RCC_ClockConfig+0x1bc>)
 800834e:	4313      	orrs	r3, r2
 8008350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008352:	f000 f855 	bl	8008400 <HAL_RCC_GetSysClockFreq>
 8008356:	4602      	mov	r2, r0
 8008358:	4b0b      	ldr	r3, [pc, #44]	; (8008388 <HAL_RCC_ClockConfig+0x1bc>)
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	091b      	lsrs	r3, r3, #4
 800835e:	f003 030f 	and.w	r3, r3, #15
 8008362:	490a      	ldr	r1, [pc, #40]	; (800838c <HAL_RCC_ClockConfig+0x1c0>)
 8008364:	5ccb      	ldrb	r3, [r1, r3]
 8008366:	fa22 f303 	lsr.w	r3, r2, r3
 800836a:	4a09      	ldr	r2, [pc, #36]	; (8008390 <HAL_RCC_ClockConfig+0x1c4>)
 800836c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800836e:	4b09      	ldr	r3, [pc, #36]	; (8008394 <HAL_RCC_ClockConfig+0x1c8>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4618      	mov	r0, r3
 8008374:	f7fe f8ac 	bl	80064d0 <HAL_InitTick>

  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	40023c00 	.word	0x40023c00
 8008388:	40023800 	.word	0x40023800
 800838c:	08010af4 	.word	0x08010af4
 8008390:	20000040 	.word	0x20000040
 8008394:	20000044 	.word	0x20000044

08008398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008398:	b480      	push	{r7}
 800839a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800839c:	4b03      	ldr	r3, [pc, #12]	; (80083ac <HAL_RCC_GetHCLKFreq+0x14>)
 800839e:	681b      	ldr	r3, [r3, #0]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	20000040 	.word	0x20000040

080083b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80083b4:	f7ff fff0 	bl	8008398 <HAL_RCC_GetHCLKFreq>
 80083b8:	4602      	mov	r2, r0
 80083ba:	4b05      	ldr	r3, [pc, #20]	; (80083d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	0a9b      	lsrs	r3, r3, #10
 80083c0:	f003 0307 	and.w	r3, r3, #7
 80083c4:	4903      	ldr	r1, [pc, #12]	; (80083d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80083c6:	5ccb      	ldrb	r3, [r1, r3]
 80083c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	40023800 	.word	0x40023800
 80083d4:	08010b04 	.word	0x08010b04

080083d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80083dc:	f7ff ffdc 	bl	8008398 <HAL_RCC_GetHCLKFreq>
 80083e0:	4602      	mov	r2, r0
 80083e2:	4b05      	ldr	r3, [pc, #20]	; (80083f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	0b5b      	lsrs	r3, r3, #13
 80083e8:	f003 0307 	and.w	r3, r3, #7
 80083ec:	4903      	ldr	r1, [pc, #12]	; (80083fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80083ee:	5ccb      	ldrb	r3, [r1, r3]
 80083f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	40023800 	.word	0x40023800
 80083fc:	08010b04 	.word	0x08010b04

08008400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008404:	b088      	sub	sp, #32
 8008406:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008408:	2300      	movs	r3, #0
 800840a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800840c:	2300      	movs	r3, #0
 800840e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8008410:	2300      	movs	r3, #0
 8008412:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8008414:	2300      	movs	r3, #0
 8008416:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8008418:	2300      	movs	r3, #0
 800841a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800841c:	4bce      	ldr	r3, [pc, #824]	; (8008758 <HAL_RCC_GetSysClockFreq+0x358>)
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f003 030c 	and.w	r3, r3, #12
 8008424:	2b0c      	cmp	r3, #12
 8008426:	f200 818d 	bhi.w	8008744 <HAL_RCC_GetSysClockFreq+0x344>
 800842a:	a201      	add	r2, pc, #4	; (adr r2, 8008430 <HAL_RCC_GetSysClockFreq+0x30>)
 800842c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008430:	08008465 	.word	0x08008465
 8008434:	08008745 	.word	0x08008745
 8008438:	08008745 	.word	0x08008745
 800843c:	08008745 	.word	0x08008745
 8008440:	0800846b 	.word	0x0800846b
 8008444:	08008745 	.word	0x08008745
 8008448:	08008745 	.word	0x08008745
 800844c:	08008745 	.word	0x08008745
 8008450:	08008471 	.word	0x08008471
 8008454:	08008745 	.word	0x08008745
 8008458:	08008745 	.word	0x08008745
 800845c:	08008745 	.word	0x08008745
 8008460:	080085e5 	.word	0x080085e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008464:	4bbd      	ldr	r3, [pc, #756]	; (800875c <HAL_RCC_GetSysClockFreq+0x35c>)
 8008466:	61bb      	str	r3, [r7, #24]
       break;
 8008468:	e16f      	b.n	800874a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800846a:	4bbd      	ldr	r3, [pc, #756]	; (8008760 <HAL_RCC_GetSysClockFreq+0x360>)
 800846c:	61bb      	str	r3, [r7, #24]
      break;
 800846e:	e16c      	b.n	800874a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008470:	4bb9      	ldr	r3, [pc, #740]	; (8008758 <HAL_RCC_GetSysClockFreq+0x358>)
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008478:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800847a:	4bb7      	ldr	r3, [pc, #732]	; (8008758 <HAL_RCC_GetSysClockFreq+0x358>)
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d053      	beq.n	800852e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008486:	4bb4      	ldr	r3, [pc, #720]	; (8008758 <HAL_RCC_GetSysClockFreq+0x358>)
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	099b      	lsrs	r3, r3, #6
 800848c:	461a      	mov	r2, r3
 800848e:	f04f 0300 	mov.w	r3, #0
 8008492:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008496:	f04f 0100 	mov.w	r1, #0
 800849a:	ea02 0400 	and.w	r4, r2, r0
 800849e:	603c      	str	r4, [r7, #0]
 80084a0:	400b      	ands	r3, r1
 80084a2:	607b      	str	r3, [r7, #4]
 80084a4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80084a8:	4620      	mov	r0, r4
 80084aa:	4629      	mov	r1, r5
 80084ac:	f04f 0200 	mov.w	r2, #0
 80084b0:	f04f 0300 	mov.w	r3, #0
 80084b4:	014b      	lsls	r3, r1, #5
 80084b6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80084ba:	0142      	lsls	r2, r0, #5
 80084bc:	4610      	mov	r0, r2
 80084be:	4619      	mov	r1, r3
 80084c0:	4623      	mov	r3, r4
 80084c2:	1ac0      	subs	r0, r0, r3
 80084c4:	462b      	mov	r3, r5
 80084c6:	eb61 0103 	sbc.w	r1, r1, r3
 80084ca:	f04f 0200 	mov.w	r2, #0
 80084ce:	f04f 0300 	mov.w	r3, #0
 80084d2:	018b      	lsls	r3, r1, #6
 80084d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80084d8:	0182      	lsls	r2, r0, #6
 80084da:	1a12      	subs	r2, r2, r0
 80084dc:	eb63 0301 	sbc.w	r3, r3, r1
 80084e0:	f04f 0000 	mov.w	r0, #0
 80084e4:	f04f 0100 	mov.w	r1, #0
 80084e8:	00d9      	lsls	r1, r3, #3
 80084ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80084ee:	00d0      	lsls	r0, r2, #3
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	4621      	mov	r1, r4
 80084f6:	1852      	adds	r2, r2, r1
 80084f8:	4629      	mov	r1, r5
 80084fa:	eb43 0101 	adc.w	r1, r3, r1
 80084fe:	460b      	mov	r3, r1
 8008500:	f04f 0000 	mov.w	r0, #0
 8008504:	f04f 0100 	mov.w	r1, #0
 8008508:	0259      	lsls	r1, r3, #9
 800850a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800850e:	0250      	lsls	r0, r2, #9
 8008510:	4602      	mov	r2, r0
 8008512:	460b      	mov	r3, r1
 8008514:	4610      	mov	r0, r2
 8008516:	4619      	mov	r1, r3
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	461a      	mov	r2, r3
 800851c:	f04f 0300 	mov.w	r3, #0
 8008520:	f7f8 fbd2 	bl	8000cc8 <__aeabi_uldivmod>
 8008524:	4602      	mov	r2, r0
 8008526:	460b      	mov	r3, r1
 8008528:	4613      	mov	r3, r2
 800852a:	61fb      	str	r3, [r7, #28]
 800852c:	e04c      	b.n	80085c8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800852e:	4b8a      	ldr	r3, [pc, #552]	; (8008758 <HAL_RCC_GetSysClockFreq+0x358>)
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	099b      	lsrs	r3, r3, #6
 8008534:	461a      	mov	r2, r3
 8008536:	f04f 0300 	mov.w	r3, #0
 800853a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800853e:	f04f 0100 	mov.w	r1, #0
 8008542:	ea02 0a00 	and.w	sl, r2, r0
 8008546:	ea03 0b01 	and.w	fp, r3, r1
 800854a:	4650      	mov	r0, sl
 800854c:	4659      	mov	r1, fp
 800854e:	f04f 0200 	mov.w	r2, #0
 8008552:	f04f 0300 	mov.w	r3, #0
 8008556:	014b      	lsls	r3, r1, #5
 8008558:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800855c:	0142      	lsls	r2, r0, #5
 800855e:	4610      	mov	r0, r2
 8008560:	4619      	mov	r1, r3
 8008562:	ebb0 000a 	subs.w	r0, r0, sl
 8008566:	eb61 010b 	sbc.w	r1, r1, fp
 800856a:	f04f 0200 	mov.w	r2, #0
 800856e:	f04f 0300 	mov.w	r3, #0
 8008572:	018b      	lsls	r3, r1, #6
 8008574:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008578:	0182      	lsls	r2, r0, #6
 800857a:	1a12      	subs	r2, r2, r0
 800857c:	eb63 0301 	sbc.w	r3, r3, r1
 8008580:	f04f 0000 	mov.w	r0, #0
 8008584:	f04f 0100 	mov.w	r1, #0
 8008588:	00d9      	lsls	r1, r3, #3
 800858a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800858e:	00d0      	lsls	r0, r2, #3
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	eb12 020a 	adds.w	r2, r2, sl
 8008598:	eb43 030b 	adc.w	r3, r3, fp
 800859c:	f04f 0000 	mov.w	r0, #0
 80085a0:	f04f 0100 	mov.w	r1, #0
 80085a4:	0299      	lsls	r1, r3, #10
 80085a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80085aa:	0290      	lsls	r0, r2, #10
 80085ac:	4602      	mov	r2, r0
 80085ae:	460b      	mov	r3, r1
 80085b0:	4610      	mov	r0, r2
 80085b2:	4619      	mov	r1, r3
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	461a      	mov	r2, r3
 80085b8:	f04f 0300 	mov.w	r3, #0
 80085bc:	f7f8 fb84 	bl	8000cc8 <__aeabi_uldivmod>
 80085c0:	4602      	mov	r2, r0
 80085c2:	460b      	mov	r3, r1
 80085c4:	4613      	mov	r3, r2
 80085c6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80085c8:	4b63      	ldr	r3, [pc, #396]	; (8008758 <HAL_RCC_GetSysClockFreq+0x358>)
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	0c1b      	lsrs	r3, r3, #16
 80085ce:	f003 0303 	and.w	r3, r3, #3
 80085d2:	3301      	adds	r3, #1
 80085d4:	005b      	lsls	r3, r3, #1
 80085d6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80085d8:	69fa      	ldr	r2, [r7, #28]
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80085e0:	61bb      	str	r3, [r7, #24]
      break;
 80085e2:	e0b2      	b.n	800874a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80085e4:	4b5c      	ldr	r3, [pc, #368]	; (8008758 <HAL_RCC_GetSysClockFreq+0x358>)
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085ec:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80085ee:	4b5a      	ldr	r3, [pc, #360]	; (8008758 <HAL_RCC_GetSysClockFreq+0x358>)
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d04d      	beq.n	8008696 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085fa:	4b57      	ldr	r3, [pc, #348]	; (8008758 <HAL_RCC_GetSysClockFreq+0x358>)
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	099b      	lsrs	r3, r3, #6
 8008600:	461a      	mov	r2, r3
 8008602:	f04f 0300 	mov.w	r3, #0
 8008606:	f240 10ff 	movw	r0, #511	; 0x1ff
 800860a:	f04f 0100 	mov.w	r1, #0
 800860e:	ea02 0800 	and.w	r8, r2, r0
 8008612:	ea03 0901 	and.w	r9, r3, r1
 8008616:	4640      	mov	r0, r8
 8008618:	4649      	mov	r1, r9
 800861a:	f04f 0200 	mov.w	r2, #0
 800861e:	f04f 0300 	mov.w	r3, #0
 8008622:	014b      	lsls	r3, r1, #5
 8008624:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008628:	0142      	lsls	r2, r0, #5
 800862a:	4610      	mov	r0, r2
 800862c:	4619      	mov	r1, r3
 800862e:	ebb0 0008 	subs.w	r0, r0, r8
 8008632:	eb61 0109 	sbc.w	r1, r1, r9
 8008636:	f04f 0200 	mov.w	r2, #0
 800863a:	f04f 0300 	mov.w	r3, #0
 800863e:	018b      	lsls	r3, r1, #6
 8008640:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008644:	0182      	lsls	r2, r0, #6
 8008646:	1a12      	subs	r2, r2, r0
 8008648:	eb63 0301 	sbc.w	r3, r3, r1
 800864c:	f04f 0000 	mov.w	r0, #0
 8008650:	f04f 0100 	mov.w	r1, #0
 8008654:	00d9      	lsls	r1, r3, #3
 8008656:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800865a:	00d0      	lsls	r0, r2, #3
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	eb12 0208 	adds.w	r2, r2, r8
 8008664:	eb43 0309 	adc.w	r3, r3, r9
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	f04f 0100 	mov.w	r1, #0
 8008670:	0259      	lsls	r1, r3, #9
 8008672:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008676:	0250      	lsls	r0, r2, #9
 8008678:	4602      	mov	r2, r0
 800867a:	460b      	mov	r3, r1
 800867c:	4610      	mov	r0, r2
 800867e:	4619      	mov	r1, r3
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	461a      	mov	r2, r3
 8008684:	f04f 0300 	mov.w	r3, #0
 8008688:	f7f8 fb1e 	bl	8000cc8 <__aeabi_uldivmod>
 800868c:	4602      	mov	r2, r0
 800868e:	460b      	mov	r3, r1
 8008690:	4613      	mov	r3, r2
 8008692:	61fb      	str	r3, [r7, #28]
 8008694:	e04a      	b.n	800872c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008696:	4b30      	ldr	r3, [pc, #192]	; (8008758 <HAL_RCC_GetSysClockFreq+0x358>)
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	099b      	lsrs	r3, r3, #6
 800869c:	461a      	mov	r2, r3
 800869e:	f04f 0300 	mov.w	r3, #0
 80086a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80086a6:	f04f 0100 	mov.w	r1, #0
 80086aa:	ea02 0400 	and.w	r4, r2, r0
 80086ae:	ea03 0501 	and.w	r5, r3, r1
 80086b2:	4620      	mov	r0, r4
 80086b4:	4629      	mov	r1, r5
 80086b6:	f04f 0200 	mov.w	r2, #0
 80086ba:	f04f 0300 	mov.w	r3, #0
 80086be:	014b      	lsls	r3, r1, #5
 80086c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80086c4:	0142      	lsls	r2, r0, #5
 80086c6:	4610      	mov	r0, r2
 80086c8:	4619      	mov	r1, r3
 80086ca:	1b00      	subs	r0, r0, r4
 80086cc:	eb61 0105 	sbc.w	r1, r1, r5
 80086d0:	f04f 0200 	mov.w	r2, #0
 80086d4:	f04f 0300 	mov.w	r3, #0
 80086d8:	018b      	lsls	r3, r1, #6
 80086da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80086de:	0182      	lsls	r2, r0, #6
 80086e0:	1a12      	subs	r2, r2, r0
 80086e2:	eb63 0301 	sbc.w	r3, r3, r1
 80086e6:	f04f 0000 	mov.w	r0, #0
 80086ea:	f04f 0100 	mov.w	r1, #0
 80086ee:	00d9      	lsls	r1, r3, #3
 80086f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80086f4:	00d0      	lsls	r0, r2, #3
 80086f6:	4602      	mov	r2, r0
 80086f8:	460b      	mov	r3, r1
 80086fa:	1912      	adds	r2, r2, r4
 80086fc:	eb45 0303 	adc.w	r3, r5, r3
 8008700:	f04f 0000 	mov.w	r0, #0
 8008704:	f04f 0100 	mov.w	r1, #0
 8008708:	0299      	lsls	r1, r3, #10
 800870a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800870e:	0290      	lsls	r0, r2, #10
 8008710:	4602      	mov	r2, r0
 8008712:	460b      	mov	r3, r1
 8008714:	4610      	mov	r0, r2
 8008716:	4619      	mov	r1, r3
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	461a      	mov	r2, r3
 800871c:	f04f 0300 	mov.w	r3, #0
 8008720:	f7f8 fad2 	bl	8000cc8 <__aeabi_uldivmod>
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	4613      	mov	r3, r2
 800872a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800872c:	4b0a      	ldr	r3, [pc, #40]	; (8008758 <HAL_RCC_GetSysClockFreq+0x358>)
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	0f1b      	lsrs	r3, r3, #28
 8008732:	f003 0307 	and.w	r3, r3, #7
 8008736:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8008738:	69fa      	ldr	r2, [r7, #28]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008740:	61bb      	str	r3, [r7, #24]
      break;
 8008742:	e002      	b.n	800874a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008744:	4b05      	ldr	r3, [pc, #20]	; (800875c <HAL_RCC_GetSysClockFreq+0x35c>)
 8008746:	61bb      	str	r3, [r7, #24]
      break;
 8008748:	bf00      	nop
    }
  }
  return sysclockfreq;
 800874a:	69bb      	ldr	r3, [r7, #24]
}
 800874c:	4618      	mov	r0, r3
 800874e:	3720      	adds	r7, #32
 8008750:	46bd      	mov	sp, r7
 8008752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008756:	bf00      	nop
 8008758:	40023800 	.word	0x40023800
 800875c:	00f42400 	.word	0x00f42400
 8008760:	007a1200 	.word	0x007a1200

08008764 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b086      	sub	sp, #24
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d101      	bne.n	8008776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e28d      	b.n	8008c92 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 0301 	and.w	r3, r3, #1
 800877e:	2b00      	cmp	r3, #0
 8008780:	f000 8083 	beq.w	800888a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008784:	4b94      	ldr	r3, [pc, #592]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	f003 030c 	and.w	r3, r3, #12
 800878c:	2b04      	cmp	r3, #4
 800878e:	d019      	beq.n	80087c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008790:	4b91      	ldr	r3, [pc, #580]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008798:	2b08      	cmp	r3, #8
 800879a:	d106      	bne.n	80087aa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800879c:	4b8e      	ldr	r3, [pc, #568]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087a8:	d00c      	beq.n	80087c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087aa:	4b8b      	ldr	r3, [pc, #556]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80087b2:	2b0c      	cmp	r3, #12
 80087b4:	d112      	bne.n	80087dc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087b6:	4b88      	ldr	r3, [pc, #544]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087c2:	d10b      	bne.n	80087dc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087c4:	4b84      	ldr	r3, [pc, #528]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d05b      	beq.n	8008888 <HAL_RCC_OscConfig+0x124>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d157      	bne.n	8008888 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	e25a      	b.n	8008c92 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087e4:	d106      	bne.n	80087f4 <HAL_RCC_OscConfig+0x90>
 80087e6:	4b7c      	ldr	r3, [pc, #496]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a7b      	ldr	r2, [pc, #492]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 80087ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087f0:	6013      	str	r3, [r2, #0]
 80087f2:	e01d      	b.n	8008830 <HAL_RCC_OscConfig+0xcc>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087fc:	d10c      	bne.n	8008818 <HAL_RCC_OscConfig+0xb4>
 80087fe:	4b76      	ldr	r3, [pc, #472]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a75      	ldr	r2, [pc, #468]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 8008804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008808:	6013      	str	r3, [r2, #0]
 800880a:	4b73      	ldr	r3, [pc, #460]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a72      	ldr	r2, [pc, #456]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 8008810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008814:	6013      	str	r3, [r2, #0]
 8008816:	e00b      	b.n	8008830 <HAL_RCC_OscConfig+0xcc>
 8008818:	4b6f      	ldr	r3, [pc, #444]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a6e      	ldr	r2, [pc, #440]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 800881e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008822:	6013      	str	r3, [r2, #0]
 8008824:	4b6c      	ldr	r3, [pc, #432]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a6b      	ldr	r2, [pc, #428]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 800882a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800882e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d013      	beq.n	8008860 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008838:	f7fd fe8e 	bl	8006558 <HAL_GetTick>
 800883c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800883e:	e008      	b.n	8008852 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008840:	f7fd fe8a 	bl	8006558 <HAL_GetTick>
 8008844:	4602      	mov	r2, r0
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	1ad3      	subs	r3, r2, r3
 800884a:	2b64      	cmp	r3, #100	; 0x64
 800884c:	d901      	bls.n	8008852 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800884e:	2303      	movs	r3, #3
 8008850:	e21f      	b.n	8008c92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008852:	4b61      	ldr	r3, [pc, #388]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800885a:	2b00      	cmp	r3, #0
 800885c:	d0f0      	beq.n	8008840 <HAL_RCC_OscConfig+0xdc>
 800885e:	e014      	b.n	800888a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008860:	f7fd fe7a 	bl	8006558 <HAL_GetTick>
 8008864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008866:	e008      	b.n	800887a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008868:	f7fd fe76 	bl	8006558 <HAL_GetTick>
 800886c:	4602      	mov	r2, r0
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	2b64      	cmp	r3, #100	; 0x64
 8008874:	d901      	bls.n	800887a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008876:	2303      	movs	r3, #3
 8008878:	e20b      	b.n	8008c92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800887a:	4b57      	ldr	r3, [pc, #348]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008882:	2b00      	cmp	r3, #0
 8008884:	d1f0      	bne.n	8008868 <HAL_RCC_OscConfig+0x104>
 8008886:	e000      	b.n	800888a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 0302 	and.w	r3, r3, #2
 8008892:	2b00      	cmp	r3, #0
 8008894:	d06f      	beq.n	8008976 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008896:	4b50      	ldr	r3, [pc, #320]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	f003 030c 	and.w	r3, r3, #12
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d017      	beq.n	80088d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80088a2:	4b4d      	ldr	r3, [pc, #308]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80088aa:	2b08      	cmp	r3, #8
 80088ac:	d105      	bne.n	80088ba <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80088ae:	4b4a      	ldr	r3, [pc, #296]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00b      	beq.n	80088d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088ba:	4b47      	ldr	r3, [pc, #284]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80088c2:	2b0c      	cmp	r3, #12
 80088c4:	d11c      	bne.n	8008900 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088c6:	4b44      	ldr	r3, [pc, #272]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d116      	bne.n	8008900 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088d2:	4b41      	ldr	r3, [pc, #260]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0302 	and.w	r3, r3, #2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d005      	beq.n	80088ea <HAL_RCC_OscConfig+0x186>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d001      	beq.n	80088ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e1d3      	b.n	8008c92 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088ea:	4b3b      	ldr	r3, [pc, #236]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	00db      	lsls	r3, r3, #3
 80088f8:	4937      	ldr	r1, [pc, #220]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 80088fa:	4313      	orrs	r3, r2
 80088fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088fe:	e03a      	b.n	8008976 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d020      	beq.n	800894a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008908:	4b34      	ldr	r3, [pc, #208]	; (80089dc <HAL_RCC_OscConfig+0x278>)
 800890a:	2201      	movs	r2, #1
 800890c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800890e:	f7fd fe23 	bl	8006558 <HAL_GetTick>
 8008912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008914:	e008      	b.n	8008928 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008916:	f7fd fe1f 	bl	8006558 <HAL_GetTick>
 800891a:	4602      	mov	r2, r0
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	2b02      	cmp	r3, #2
 8008922:	d901      	bls.n	8008928 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008924:	2303      	movs	r3, #3
 8008926:	e1b4      	b.n	8008c92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008928:	4b2b      	ldr	r3, [pc, #172]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 0302 	and.w	r3, r3, #2
 8008930:	2b00      	cmp	r3, #0
 8008932:	d0f0      	beq.n	8008916 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008934:	4b28      	ldr	r3, [pc, #160]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	00db      	lsls	r3, r3, #3
 8008942:	4925      	ldr	r1, [pc, #148]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 8008944:	4313      	orrs	r3, r2
 8008946:	600b      	str	r3, [r1, #0]
 8008948:	e015      	b.n	8008976 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800894a:	4b24      	ldr	r3, [pc, #144]	; (80089dc <HAL_RCC_OscConfig+0x278>)
 800894c:	2200      	movs	r2, #0
 800894e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008950:	f7fd fe02 	bl	8006558 <HAL_GetTick>
 8008954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008956:	e008      	b.n	800896a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008958:	f7fd fdfe 	bl	8006558 <HAL_GetTick>
 800895c:	4602      	mov	r2, r0
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	2b02      	cmp	r3, #2
 8008964:	d901      	bls.n	800896a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008966:	2303      	movs	r3, #3
 8008968:	e193      	b.n	8008c92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800896a:	4b1b      	ldr	r3, [pc, #108]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f003 0302 	and.w	r3, r3, #2
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1f0      	bne.n	8008958 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f003 0308 	and.w	r3, r3, #8
 800897e:	2b00      	cmp	r3, #0
 8008980:	d036      	beq.n	80089f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	695b      	ldr	r3, [r3, #20]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d016      	beq.n	80089b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800898a:	4b15      	ldr	r3, [pc, #84]	; (80089e0 <HAL_RCC_OscConfig+0x27c>)
 800898c:	2201      	movs	r2, #1
 800898e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008990:	f7fd fde2 	bl	8006558 <HAL_GetTick>
 8008994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008996:	e008      	b.n	80089aa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008998:	f7fd fdde 	bl	8006558 <HAL_GetTick>
 800899c:	4602      	mov	r2, r0
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	d901      	bls.n	80089aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80089a6:	2303      	movs	r3, #3
 80089a8:	e173      	b.n	8008c92 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089aa:	4b0b      	ldr	r3, [pc, #44]	; (80089d8 <HAL_RCC_OscConfig+0x274>)
 80089ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089ae:	f003 0302 	and.w	r3, r3, #2
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d0f0      	beq.n	8008998 <HAL_RCC_OscConfig+0x234>
 80089b6:	e01b      	b.n	80089f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089b8:	4b09      	ldr	r3, [pc, #36]	; (80089e0 <HAL_RCC_OscConfig+0x27c>)
 80089ba:	2200      	movs	r2, #0
 80089bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089be:	f7fd fdcb 	bl	8006558 <HAL_GetTick>
 80089c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089c4:	e00e      	b.n	80089e4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089c6:	f7fd fdc7 	bl	8006558 <HAL_GetTick>
 80089ca:	4602      	mov	r2, r0
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	1ad3      	subs	r3, r2, r3
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d907      	bls.n	80089e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80089d4:	2303      	movs	r3, #3
 80089d6:	e15c      	b.n	8008c92 <HAL_RCC_OscConfig+0x52e>
 80089d8:	40023800 	.word	0x40023800
 80089dc:	42470000 	.word	0x42470000
 80089e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089e4:	4b8a      	ldr	r3, [pc, #552]	; (8008c10 <HAL_RCC_OscConfig+0x4ac>)
 80089e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089e8:	f003 0302 	and.w	r3, r3, #2
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1ea      	bne.n	80089c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 0304 	and.w	r3, r3, #4
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f000 8097 	beq.w	8008b2c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80089fe:	2300      	movs	r3, #0
 8008a00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a02:	4b83      	ldr	r3, [pc, #524]	; (8008c10 <HAL_RCC_OscConfig+0x4ac>)
 8008a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d10f      	bne.n	8008a2e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a0e:	2300      	movs	r3, #0
 8008a10:	60bb      	str	r3, [r7, #8]
 8008a12:	4b7f      	ldr	r3, [pc, #508]	; (8008c10 <HAL_RCC_OscConfig+0x4ac>)
 8008a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a16:	4a7e      	ldr	r2, [pc, #504]	; (8008c10 <HAL_RCC_OscConfig+0x4ac>)
 8008a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8008a1e:	4b7c      	ldr	r3, [pc, #496]	; (8008c10 <HAL_RCC_OscConfig+0x4ac>)
 8008a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a26:	60bb      	str	r3, [r7, #8]
 8008a28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a2e:	4b79      	ldr	r3, [pc, #484]	; (8008c14 <HAL_RCC_OscConfig+0x4b0>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d118      	bne.n	8008a6c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a3a:	4b76      	ldr	r3, [pc, #472]	; (8008c14 <HAL_RCC_OscConfig+0x4b0>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a75      	ldr	r2, [pc, #468]	; (8008c14 <HAL_RCC_OscConfig+0x4b0>)
 8008a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a46:	f7fd fd87 	bl	8006558 <HAL_GetTick>
 8008a4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a4c:	e008      	b.n	8008a60 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a4e:	f7fd fd83 	bl	8006558 <HAL_GetTick>
 8008a52:	4602      	mov	r2, r0
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d901      	bls.n	8008a60 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	e118      	b.n	8008c92 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a60:	4b6c      	ldr	r3, [pc, #432]	; (8008c14 <HAL_RCC_OscConfig+0x4b0>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d0f0      	beq.n	8008a4e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d106      	bne.n	8008a82 <HAL_RCC_OscConfig+0x31e>
 8008a74:	4b66      	ldr	r3, [pc, #408]	; (8008c10 <HAL_RCC_OscConfig+0x4ac>)
 8008a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a78:	4a65      	ldr	r2, [pc, #404]	; (8008c10 <HAL_RCC_OscConfig+0x4ac>)
 8008a7a:	f043 0301 	orr.w	r3, r3, #1
 8008a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8008a80:	e01c      	b.n	8008abc <HAL_RCC_OscConfig+0x358>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	2b05      	cmp	r3, #5
 8008a88:	d10c      	bne.n	8008aa4 <HAL_RCC_OscConfig+0x340>
 8008a8a:	4b61      	ldr	r3, [pc, #388]	; (8008c10 <HAL_RCC_OscConfig+0x4ac>)
 8008a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a8e:	4a60      	ldr	r2, [pc, #384]	; (8008c10 <HAL_RCC_OscConfig+0x4ac>)
 8008a90:	f043 0304 	orr.w	r3, r3, #4
 8008a94:	6713      	str	r3, [r2, #112]	; 0x70
 8008a96:	4b5e      	ldr	r3, [pc, #376]	; (8008c10 <HAL_RCC_OscConfig+0x4ac>)
 8008a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a9a:	4a5d      	ldr	r2, [pc, #372]	; (8008c10 <HAL_RCC_OscConfig+0x4ac>)
 8008a9c:	f043 0301 	orr.w	r3, r3, #1
 8008aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8008aa2:	e00b      	b.n	8008abc <HAL_RCC_OscConfig+0x358>
 8008aa4:	4b5a      	ldr	r3, [pc, #360]	; (8008c10 <HAL_RCC_OscConfig+0x4ac>)
 8008aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aa8:	4a59      	ldr	r2, [pc, #356]	; (8008c10 <HAL_RCC_OscConfig+0x4ac>)
 8008aaa:	f023 0301 	bic.w	r3, r3, #1
 8008aae:	6713      	str	r3, [r2, #112]	; 0x70
 8008ab0:	4b57      	ldr	r3, [pc, #348]	; (8008c10 <HAL_RCC_OscConfig+0x4ac>)
 8008ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ab4:	4a56      	ldr	r2, [pc, #344]	; (8008c10 <HAL_RCC_OscConfig+0x4ac>)
 8008ab6:	f023 0304 	bic.w	r3, r3, #4
 8008aba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d015      	beq.n	8008af0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ac4:	f7fd fd48 	bl	8006558 <HAL_GetTick>
 8008ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008aca:	e00a      	b.n	8008ae2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008acc:	f7fd fd44 	bl	8006558 <HAL_GetTick>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d901      	bls.n	8008ae2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	e0d7      	b.n	8008c92 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ae2:	4b4b      	ldr	r3, [pc, #300]	; (8008c10 <HAL_RCC_OscConfig+0x4ac>)
 8008ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ae6:	f003 0302 	and.w	r3, r3, #2
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d0ee      	beq.n	8008acc <HAL_RCC_OscConfig+0x368>
 8008aee:	e014      	b.n	8008b1a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008af0:	f7fd fd32 	bl	8006558 <HAL_GetTick>
 8008af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008af6:	e00a      	b.n	8008b0e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008af8:	f7fd fd2e 	bl	8006558 <HAL_GetTick>
 8008afc:	4602      	mov	r2, r0
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d901      	bls.n	8008b0e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	e0c1      	b.n	8008c92 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b0e:	4b40      	ldr	r3, [pc, #256]	; (8008c10 <HAL_RCC_OscConfig+0x4ac>)
 8008b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b12:	f003 0302 	and.w	r3, r3, #2
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1ee      	bne.n	8008af8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008b1a:	7dfb      	ldrb	r3, [r7, #23]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d105      	bne.n	8008b2c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b20:	4b3b      	ldr	r3, [pc, #236]	; (8008c10 <HAL_RCC_OscConfig+0x4ac>)
 8008b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b24:	4a3a      	ldr	r2, [pc, #232]	; (8008c10 <HAL_RCC_OscConfig+0x4ac>)
 8008b26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	699b      	ldr	r3, [r3, #24]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f000 80ad 	beq.w	8008c90 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008b36:	4b36      	ldr	r3, [pc, #216]	; (8008c10 <HAL_RCC_OscConfig+0x4ac>)
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	f003 030c 	and.w	r3, r3, #12
 8008b3e:	2b08      	cmp	r3, #8
 8008b40:	d060      	beq.n	8008c04 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d145      	bne.n	8008bd6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b4a:	4b33      	ldr	r3, [pc, #204]	; (8008c18 <HAL_RCC_OscConfig+0x4b4>)
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b50:	f7fd fd02 	bl	8006558 <HAL_GetTick>
 8008b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b56:	e008      	b.n	8008b6a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b58:	f7fd fcfe 	bl	8006558 <HAL_GetTick>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d901      	bls.n	8008b6a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008b66:	2303      	movs	r3, #3
 8008b68:	e093      	b.n	8008c92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b6a:	4b29      	ldr	r3, [pc, #164]	; (8008c10 <HAL_RCC_OscConfig+0x4ac>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1f0      	bne.n	8008b58 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	69da      	ldr	r2, [r3, #28]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
 8008b7e:	431a      	orrs	r2, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b84:	019b      	lsls	r3, r3, #6
 8008b86:	431a      	orrs	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b8c:	085b      	lsrs	r3, r3, #1
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	041b      	lsls	r3, r3, #16
 8008b92:	431a      	orrs	r2, r3
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b98:	061b      	lsls	r3, r3, #24
 8008b9a:	431a      	orrs	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba0:	071b      	lsls	r3, r3, #28
 8008ba2:	491b      	ldr	r1, [pc, #108]	; (8008c10 <HAL_RCC_OscConfig+0x4ac>)
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ba8:	4b1b      	ldr	r3, [pc, #108]	; (8008c18 <HAL_RCC_OscConfig+0x4b4>)
 8008baa:	2201      	movs	r2, #1
 8008bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bae:	f7fd fcd3 	bl	8006558 <HAL_GetTick>
 8008bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bb4:	e008      	b.n	8008bc8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bb6:	f7fd fccf 	bl	8006558 <HAL_GetTick>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d901      	bls.n	8008bc8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	e064      	b.n	8008c92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bc8:	4b11      	ldr	r3, [pc, #68]	; (8008c10 <HAL_RCC_OscConfig+0x4ac>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d0f0      	beq.n	8008bb6 <HAL_RCC_OscConfig+0x452>
 8008bd4:	e05c      	b.n	8008c90 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bd6:	4b10      	ldr	r3, [pc, #64]	; (8008c18 <HAL_RCC_OscConfig+0x4b4>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bdc:	f7fd fcbc 	bl	8006558 <HAL_GetTick>
 8008be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008be2:	e008      	b.n	8008bf6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008be4:	f7fd fcb8 	bl	8006558 <HAL_GetTick>
 8008be8:	4602      	mov	r2, r0
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d901      	bls.n	8008bf6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e04d      	b.n	8008c92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bf6:	4b06      	ldr	r3, [pc, #24]	; (8008c10 <HAL_RCC_OscConfig+0x4ac>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1f0      	bne.n	8008be4 <HAL_RCC_OscConfig+0x480>
 8008c02:	e045      	b.n	8008c90 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d107      	bne.n	8008c1c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e040      	b.n	8008c92 <HAL_RCC_OscConfig+0x52e>
 8008c10:	40023800 	.word	0x40023800
 8008c14:	40007000 	.word	0x40007000
 8008c18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008c1c:	4b1f      	ldr	r3, [pc, #124]	; (8008c9c <HAL_RCC_OscConfig+0x538>)
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	699b      	ldr	r3, [r3, #24]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d030      	beq.n	8008c8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d129      	bne.n	8008c8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d122      	bne.n	8008c8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008c4c:	4013      	ands	r3, r2
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008c52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d119      	bne.n	8008c8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c62:	085b      	lsrs	r3, r3, #1
 8008c64:	3b01      	subs	r3, #1
 8008c66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d10f      	bne.n	8008c8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d107      	bne.n	8008c8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c86:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d001      	beq.n	8008c90 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e000      	b.n	8008c92 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3718      	adds	r7, #24
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	40023800 	.word	0x40023800

08008ca0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d101      	bne.n	8008cb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e07b      	b.n	8008daa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d108      	bne.n	8008ccc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008cc2:	d009      	beq.n	8008cd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	61da      	str	r2, [r3, #28]
 8008cca:	e005      	b.n	8008cd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d106      	bne.n	8008cf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f7fc fc82 	bl	80055fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2202      	movs	r2, #2
 8008cfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008d20:	431a      	orrs	r2, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d2a:	431a      	orrs	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	f003 0302 	and.w	r3, r3, #2
 8008d34:	431a      	orrs	r2, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	695b      	ldr	r3, [r3, #20]
 8008d3a:	f003 0301 	and.w	r3, r3, #1
 8008d3e:	431a      	orrs	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	699b      	ldr	r3, [r3, #24]
 8008d44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d48:	431a      	orrs	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	69db      	ldr	r3, [r3, #28]
 8008d4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d52:	431a      	orrs	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a1b      	ldr	r3, [r3, #32]
 8008d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d5c:	ea42 0103 	orr.w	r1, r2, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	430a      	orrs	r2, r1
 8008d6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	699b      	ldr	r3, [r3, #24]
 8008d74:	0c1b      	lsrs	r3, r3, #16
 8008d76:	f003 0104 	and.w	r1, r3, #4
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7e:	f003 0210 	and.w	r2, r3, #16
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	430a      	orrs	r2, r1
 8008d88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	69da      	ldr	r2, [r3, #28]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b08c      	sub	sp, #48	; 0x30
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	60f8      	str	r0, [r7, #12]
 8008dba:	60b9      	str	r1, [r7, #8]
 8008dbc:	607a      	str	r2, [r7, #4]
 8008dbe:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d101      	bne.n	8008dd8 <HAL_SPI_TransmitReceive+0x26>
 8008dd4:	2302      	movs	r3, #2
 8008dd6:	e18a      	b.n	80090ee <HAL_SPI_TransmitReceive+0x33c>
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008de0:	f7fd fbba 	bl	8006558 <HAL_GetTick>
 8008de4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008dec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008df6:	887b      	ldrh	r3, [r7, #2]
 8008df8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008dfa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d00f      	beq.n	8008e22 <HAL_SPI_TransmitReceive+0x70>
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e08:	d107      	bne.n	8008e1a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d103      	bne.n	8008e1a <HAL_SPI_TransmitReceive+0x68>
 8008e12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e16:	2b04      	cmp	r3, #4
 8008e18:	d003      	beq.n	8008e22 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008e1a:	2302      	movs	r3, #2
 8008e1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008e20:	e15b      	b.n	80090da <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d005      	beq.n	8008e34 <HAL_SPI_TransmitReceive+0x82>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d002      	beq.n	8008e34 <HAL_SPI_TransmitReceive+0x82>
 8008e2e:	887b      	ldrh	r3, [r7, #2]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d103      	bne.n	8008e3c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008e3a:	e14e      	b.n	80090da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	2b04      	cmp	r3, #4
 8008e46:	d003      	beq.n	8008e50 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2205      	movs	r2, #5
 8008e4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2200      	movs	r2, #0
 8008e54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	887a      	ldrh	r2, [r7, #2]
 8008e60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	887a      	ldrh	r2, [r7, #2]
 8008e66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	68ba      	ldr	r2, [r7, #8]
 8008e6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	887a      	ldrh	r2, [r7, #2]
 8008e72:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	887a      	ldrh	r2, [r7, #2]
 8008e78:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2200      	movs	r2, #0
 8008e84:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e90:	2b40      	cmp	r3, #64	; 0x40
 8008e92:	d007      	beq.n	8008ea4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ea2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008eac:	d178      	bne.n	8008fa0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d002      	beq.n	8008ebc <HAL_SPI_TransmitReceive+0x10a>
 8008eb6:	8b7b      	ldrh	r3, [r7, #26]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d166      	bne.n	8008f8a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec0:	881a      	ldrh	r2, [r3, #0]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ecc:	1c9a      	adds	r2, r3, #2
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ee0:	e053      	b.n	8008f8a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	f003 0302 	and.w	r3, r3, #2
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	d11b      	bne.n	8008f28 <HAL_SPI_TransmitReceive+0x176>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d016      	beq.n	8008f28 <HAL_SPI_TransmitReceive+0x176>
 8008efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d113      	bne.n	8008f28 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f04:	881a      	ldrh	r2, [r3, #0]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f10:	1c9a      	adds	r2, r3, #2
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f24:	2300      	movs	r3, #0
 8008f26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	f003 0301 	and.w	r3, r3, #1
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d119      	bne.n	8008f6a <HAL_SPI_TransmitReceive+0x1b8>
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d014      	beq.n	8008f6a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	68da      	ldr	r2, [r3, #12]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4a:	b292      	uxth	r2, r2
 8008f4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f52:	1c9a      	adds	r2, r3, #2
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	b29a      	uxth	r2, r3
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f66:	2301      	movs	r3, #1
 8008f68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008f6a:	f7fd faf5 	bl	8006558 <HAL_GetTick>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d807      	bhi.n	8008f8a <HAL_SPI_TransmitReceive+0x1d8>
 8008f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f80:	d003      	beq.n	8008f8a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008f82:	2303      	movs	r3, #3
 8008f84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008f88:	e0a7      	b.n	80090da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d1a6      	bne.n	8008ee2 <HAL_SPI_TransmitReceive+0x130>
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1a1      	bne.n	8008ee2 <HAL_SPI_TransmitReceive+0x130>
 8008f9e:	e07c      	b.n	800909a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d002      	beq.n	8008fae <HAL_SPI_TransmitReceive+0x1fc>
 8008fa8:	8b7b      	ldrh	r3, [r7, #26]
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d16b      	bne.n	8009086 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	330c      	adds	r3, #12
 8008fb8:	7812      	ldrb	r2, [r2, #0]
 8008fba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc0:	1c5a      	adds	r2, r3, #1
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008fd4:	e057      	b.n	8009086 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	f003 0302 	and.w	r3, r3, #2
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d11c      	bne.n	800901e <HAL_SPI_TransmitReceive+0x26c>
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d017      	beq.n	800901e <HAL_SPI_TransmitReceive+0x26c>
 8008fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d114      	bne.n	800901e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	330c      	adds	r3, #12
 8008ffe:	7812      	ldrb	r2, [r2, #0]
 8009000:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009006:	1c5a      	adds	r2, r3, #1
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009010:	b29b      	uxth	r3, r3
 8009012:	3b01      	subs	r3, #1
 8009014:	b29a      	uxth	r2, r3
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800901a:	2300      	movs	r3, #0
 800901c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	f003 0301 	and.w	r3, r3, #1
 8009028:	2b01      	cmp	r3, #1
 800902a:	d119      	bne.n	8009060 <HAL_SPI_TransmitReceive+0x2ae>
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009030:	b29b      	uxth	r3, r3
 8009032:	2b00      	cmp	r3, #0
 8009034:	d014      	beq.n	8009060 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	68da      	ldr	r2, [r3, #12]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009040:	b2d2      	uxtb	r2, r2
 8009042:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009048:	1c5a      	adds	r2, r3, #1
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009052:	b29b      	uxth	r3, r3
 8009054:	3b01      	subs	r3, #1
 8009056:	b29a      	uxth	r2, r3
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800905c:	2301      	movs	r3, #1
 800905e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009060:	f7fd fa7a 	bl	8006558 <HAL_GetTick>
 8009064:	4602      	mov	r2, r0
 8009066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800906c:	429a      	cmp	r2, r3
 800906e:	d803      	bhi.n	8009078 <HAL_SPI_TransmitReceive+0x2c6>
 8009070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009076:	d102      	bne.n	800907e <HAL_SPI_TransmitReceive+0x2cc>
 8009078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907a:	2b00      	cmp	r3, #0
 800907c:	d103      	bne.n	8009086 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800907e:	2303      	movs	r3, #3
 8009080:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009084:	e029      	b.n	80090da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800908a:	b29b      	uxth	r3, r3
 800908c:	2b00      	cmp	r3, #0
 800908e:	d1a2      	bne.n	8008fd6 <HAL_SPI_TransmitReceive+0x224>
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009094:	b29b      	uxth	r3, r3
 8009096:	2b00      	cmp	r3, #0
 8009098:	d19d      	bne.n	8008fd6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800909a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800909c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800909e:	68f8      	ldr	r0, [r7, #12]
 80090a0:	f000 f8b2 	bl	8009208 <SPI_EndRxTxTransaction>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d006      	beq.n	80090b8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2220      	movs	r2, #32
 80090b4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80090b6:	e010      	b.n	80090da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d10b      	bne.n	80090d8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80090c0:	2300      	movs	r3, #0
 80090c2:	617b      	str	r3, [r7, #20]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	617b      	str	r3, [r7, #20]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	617b      	str	r3, [r7, #20]
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	e000      	b.n	80090da <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80090d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2201      	movs	r2, #1
 80090de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80090ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3730      	adds	r7, #48	; 0x30
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
	...

080090f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b088      	sub	sp, #32
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	603b      	str	r3, [r7, #0]
 8009104:	4613      	mov	r3, r2
 8009106:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009108:	f7fd fa26 	bl	8006558 <HAL_GetTick>
 800910c:	4602      	mov	r2, r0
 800910e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009110:	1a9b      	subs	r3, r3, r2
 8009112:	683a      	ldr	r2, [r7, #0]
 8009114:	4413      	add	r3, r2
 8009116:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009118:	f7fd fa1e 	bl	8006558 <HAL_GetTick>
 800911c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800911e:	4b39      	ldr	r3, [pc, #228]	; (8009204 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	015b      	lsls	r3, r3, #5
 8009124:	0d1b      	lsrs	r3, r3, #20
 8009126:	69fa      	ldr	r2, [r7, #28]
 8009128:	fb02 f303 	mul.w	r3, r2, r3
 800912c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800912e:	e054      	b.n	80091da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009136:	d050      	beq.n	80091da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009138:	f7fd fa0e 	bl	8006558 <HAL_GetTick>
 800913c:	4602      	mov	r2, r0
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	69fa      	ldr	r2, [r7, #28]
 8009144:	429a      	cmp	r2, r3
 8009146:	d902      	bls.n	800914e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d13d      	bne.n	80091ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	685a      	ldr	r2, [r3, #4]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800915c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009166:	d111      	bne.n	800918c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009170:	d004      	beq.n	800917c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800917a:	d107      	bne.n	800918c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800918a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009194:	d10f      	bne.n	80091b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091a4:	601a      	str	r2, [r3, #0]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2201      	movs	r2, #1
 80091ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2200      	movs	r2, #0
 80091c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e017      	b.n	80091fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d101      	bne.n	80091d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80091d0:	2300      	movs	r3, #0
 80091d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	3b01      	subs	r3, #1
 80091d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	689a      	ldr	r2, [r3, #8]
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	4013      	ands	r3, r2
 80091e4:	68ba      	ldr	r2, [r7, #8]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	bf0c      	ite	eq
 80091ea:	2301      	moveq	r3, #1
 80091ec:	2300      	movne	r3, #0
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	461a      	mov	r2, r3
 80091f2:	79fb      	ldrb	r3, [r7, #7]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d19b      	bne.n	8009130 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3720      	adds	r7, #32
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	20000040 	.word	0x20000040

08009208 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b088      	sub	sp, #32
 800920c:	af02      	add	r7, sp, #8
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009214:	4b1b      	ldr	r3, [pc, #108]	; (8009284 <SPI_EndRxTxTransaction+0x7c>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a1b      	ldr	r2, [pc, #108]	; (8009288 <SPI_EndRxTxTransaction+0x80>)
 800921a:	fba2 2303 	umull	r2, r3, r2, r3
 800921e:	0d5b      	lsrs	r3, r3, #21
 8009220:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009224:	fb02 f303 	mul.w	r3, r2, r3
 8009228:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009232:	d112      	bne.n	800925a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	2200      	movs	r2, #0
 800923c:	2180      	movs	r1, #128	; 0x80
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f7ff ff5a 	bl	80090f8 <SPI_WaitFlagStateUntilTimeout>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d016      	beq.n	8009278 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800924e:	f043 0220 	orr.w	r2, r3, #32
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009256:	2303      	movs	r3, #3
 8009258:	e00f      	b.n	800927a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00a      	beq.n	8009276 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	3b01      	subs	r3, #1
 8009264:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009270:	2b80      	cmp	r3, #128	; 0x80
 8009272:	d0f2      	beq.n	800925a <SPI_EndRxTxTransaction+0x52>
 8009274:	e000      	b.n	8009278 <SPI_EndRxTxTransaction+0x70>
        break;
 8009276:	bf00      	nop
  }

  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3718      	adds	r7, #24
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	20000040 	.word	0x20000040
 8009288:	165e9f81 	.word	0x165e9f81

0800928c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d101      	bne.n	800929e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	e041      	b.n	8009322 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d106      	bne.n	80092b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f7fc ffc0 	bl	8006238 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2202      	movs	r2, #2
 80092bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	3304      	adds	r3, #4
 80092c8:	4619      	mov	r1, r3
 80092ca:	4610      	mov	r0, r2
 80092cc:	f000 fc7c 	bl	8009bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3708      	adds	r7, #8
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
	...

0800932c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800933a:	b2db      	uxtb	r3, r3
 800933c:	2b01      	cmp	r3, #1
 800933e:	d001      	beq.n	8009344 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009340:	2301      	movs	r3, #1
 8009342:	e04e      	b.n	80093e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2202      	movs	r2, #2
 8009348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	68da      	ldr	r2, [r3, #12]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f042 0201 	orr.w	r2, r2, #1
 800935a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a23      	ldr	r2, [pc, #140]	; (80093f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d022      	beq.n	80093ac <HAL_TIM_Base_Start_IT+0x80>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800936e:	d01d      	beq.n	80093ac <HAL_TIM_Base_Start_IT+0x80>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a1f      	ldr	r2, [pc, #124]	; (80093f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d018      	beq.n	80093ac <HAL_TIM_Base_Start_IT+0x80>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a1e      	ldr	r2, [pc, #120]	; (80093f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d013      	beq.n	80093ac <HAL_TIM_Base_Start_IT+0x80>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a1c      	ldr	r2, [pc, #112]	; (80093fc <HAL_TIM_Base_Start_IT+0xd0>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d00e      	beq.n	80093ac <HAL_TIM_Base_Start_IT+0x80>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a1b      	ldr	r2, [pc, #108]	; (8009400 <HAL_TIM_Base_Start_IT+0xd4>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d009      	beq.n	80093ac <HAL_TIM_Base_Start_IT+0x80>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a19      	ldr	r2, [pc, #100]	; (8009404 <HAL_TIM_Base_Start_IT+0xd8>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d004      	beq.n	80093ac <HAL_TIM_Base_Start_IT+0x80>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a18      	ldr	r2, [pc, #96]	; (8009408 <HAL_TIM_Base_Start_IT+0xdc>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d111      	bne.n	80093d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	f003 0307 	and.w	r3, r3, #7
 80093b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2b06      	cmp	r3, #6
 80093bc:	d010      	beq.n	80093e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f042 0201 	orr.w	r2, r2, #1
 80093cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093ce:	e007      	b.n	80093e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f042 0201 	orr.w	r2, r2, #1
 80093de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3714      	adds	r7, #20
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	40010000 	.word	0x40010000
 80093f4:	40000400 	.word	0x40000400
 80093f8:	40000800 	.word	0x40000800
 80093fc:	40000c00 	.word	0x40000c00
 8009400:	40010400 	.word	0x40010400
 8009404:	40014000 	.word	0x40014000
 8009408:	40001800 	.word	0x40001800

0800940c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d101      	bne.n	800941e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	e041      	b.n	80094a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009424:	b2db      	uxtb	r3, r3
 8009426:	2b00      	cmp	r3, #0
 8009428:	d106      	bne.n	8009438 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 f839 	bl	80094aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2202      	movs	r2, #2
 800943c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	3304      	adds	r3, #4
 8009448:	4619      	mov	r1, r3
 800944a:	4610      	mov	r0, r2
 800944c:	f000 fbbc 	bl	8009bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2201      	movs	r2, #1
 800946c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2201      	movs	r2, #1
 8009484:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3708      	adds	r7, #8
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80094aa:	b480      	push	{r7}
 80094ac:	b083      	sub	sp, #12
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80094b2:	bf00      	nop
 80094b4:	370c      	adds	r7, #12
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
	...

080094c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d109      	bne.n	80094e4 <HAL_TIM_PWM_Start+0x24>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	2b01      	cmp	r3, #1
 80094da:	bf14      	ite	ne
 80094dc:	2301      	movne	r3, #1
 80094de:	2300      	moveq	r3, #0
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	e022      	b.n	800952a <HAL_TIM_PWM_Start+0x6a>
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	2b04      	cmp	r3, #4
 80094e8:	d109      	bne.n	80094fe <HAL_TIM_PWM_Start+0x3e>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	bf14      	ite	ne
 80094f6:	2301      	movne	r3, #1
 80094f8:	2300      	moveq	r3, #0
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	e015      	b.n	800952a <HAL_TIM_PWM_Start+0x6a>
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	2b08      	cmp	r3, #8
 8009502:	d109      	bne.n	8009518 <HAL_TIM_PWM_Start+0x58>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800950a:	b2db      	uxtb	r3, r3
 800950c:	2b01      	cmp	r3, #1
 800950e:	bf14      	ite	ne
 8009510:	2301      	movne	r3, #1
 8009512:	2300      	moveq	r3, #0
 8009514:	b2db      	uxtb	r3, r3
 8009516:	e008      	b.n	800952a <HAL_TIM_PWM_Start+0x6a>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800951e:	b2db      	uxtb	r3, r3
 8009520:	2b01      	cmp	r3, #1
 8009522:	bf14      	ite	ne
 8009524:	2301      	movne	r3, #1
 8009526:	2300      	moveq	r3, #0
 8009528:	b2db      	uxtb	r3, r3
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e07c      	b.n	800962c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d104      	bne.n	8009542 <HAL_TIM_PWM_Start+0x82>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2202      	movs	r2, #2
 800953c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009540:	e013      	b.n	800956a <HAL_TIM_PWM_Start+0xaa>
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	2b04      	cmp	r3, #4
 8009546:	d104      	bne.n	8009552 <HAL_TIM_PWM_Start+0x92>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2202      	movs	r2, #2
 800954c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009550:	e00b      	b.n	800956a <HAL_TIM_PWM_Start+0xaa>
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	2b08      	cmp	r3, #8
 8009556:	d104      	bne.n	8009562 <HAL_TIM_PWM_Start+0xa2>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2202      	movs	r2, #2
 800955c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009560:	e003      	b.n	800956a <HAL_TIM_PWM_Start+0xaa>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2202      	movs	r2, #2
 8009566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2201      	movs	r2, #1
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	4618      	mov	r0, r3
 8009574:	f000 fe12 	bl	800a19c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a2d      	ldr	r2, [pc, #180]	; (8009634 <HAL_TIM_PWM_Start+0x174>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d004      	beq.n	800958c <HAL_TIM_PWM_Start+0xcc>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a2c      	ldr	r2, [pc, #176]	; (8009638 <HAL_TIM_PWM_Start+0x178>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d101      	bne.n	8009590 <HAL_TIM_PWM_Start+0xd0>
 800958c:	2301      	movs	r3, #1
 800958e:	e000      	b.n	8009592 <HAL_TIM_PWM_Start+0xd2>
 8009590:	2300      	movs	r3, #0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d007      	beq.n	80095a6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80095a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a22      	ldr	r2, [pc, #136]	; (8009634 <HAL_TIM_PWM_Start+0x174>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d022      	beq.n	80095f6 <HAL_TIM_PWM_Start+0x136>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095b8:	d01d      	beq.n	80095f6 <HAL_TIM_PWM_Start+0x136>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a1f      	ldr	r2, [pc, #124]	; (800963c <HAL_TIM_PWM_Start+0x17c>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d018      	beq.n	80095f6 <HAL_TIM_PWM_Start+0x136>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a1d      	ldr	r2, [pc, #116]	; (8009640 <HAL_TIM_PWM_Start+0x180>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d013      	beq.n	80095f6 <HAL_TIM_PWM_Start+0x136>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a1c      	ldr	r2, [pc, #112]	; (8009644 <HAL_TIM_PWM_Start+0x184>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d00e      	beq.n	80095f6 <HAL_TIM_PWM_Start+0x136>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a16      	ldr	r2, [pc, #88]	; (8009638 <HAL_TIM_PWM_Start+0x178>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d009      	beq.n	80095f6 <HAL_TIM_PWM_Start+0x136>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a18      	ldr	r2, [pc, #96]	; (8009648 <HAL_TIM_PWM_Start+0x188>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d004      	beq.n	80095f6 <HAL_TIM_PWM_Start+0x136>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a16      	ldr	r2, [pc, #88]	; (800964c <HAL_TIM_PWM_Start+0x18c>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d111      	bne.n	800961a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	f003 0307 	and.w	r3, r3, #7
 8009600:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2b06      	cmp	r3, #6
 8009606:	d010      	beq.n	800962a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f042 0201 	orr.w	r2, r2, #1
 8009616:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009618:	e007      	b.n	800962a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f042 0201 	orr.w	r2, r2, #1
 8009628:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3710      	adds	r7, #16
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	40010000 	.word	0x40010000
 8009638:	40010400 	.word	0x40010400
 800963c:	40000400 	.word	0x40000400
 8009640:	40000800 	.word	0x40000800
 8009644:	40000c00 	.word	0x40000c00
 8009648:	40014000 	.word	0x40014000
 800964c:	40001800 	.word	0x40001800

08009650 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	f003 0302 	and.w	r3, r3, #2
 8009662:	2b02      	cmp	r3, #2
 8009664:	d122      	bne.n	80096ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	f003 0302 	and.w	r3, r3, #2
 8009670:	2b02      	cmp	r3, #2
 8009672:	d11b      	bne.n	80096ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f06f 0202 	mvn.w	r2, #2
 800967c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2201      	movs	r2, #1
 8009682:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	699b      	ldr	r3, [r3, #24]
 800968a:	f003 0303 	and.w	r3, r3, #3
 800968e:	2b00      	cmp	r3, #0
 8009690:	d003      	beq.n	800969a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 fa7a 	bl	8009b8c <HAL_TIM_IC_CaptureCallback>
 8009698:	e005      	b.n	80096a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 fa6c 	bl	8009b78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 fa7d 	bl	8009ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	f003 0304 	and.w	r3, r3, #4
 80096b6:	2b04      	cmp	r3, #4
 80096b8:	d122      	bne.n	8009700 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	f003 0304 	and.w	r3, r3, #4
 80096c4:	2b04      	cmp	r3, #4
 80096c6:	d11b      	bne.n	8009700 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f06f 0204 	mvn.w	r2, #4
 80096d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2202      	movs	r2, #2
 80096d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d003      	beq.n	80096ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 fa50 	bl	8009b8c <HAL_TIM_IC_CaptureCallback>
 80096ec:	e005      	b.n	80096fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 fa42 	bl	8009b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 fa53 	bl	8009ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	f003 0308 	and.w	r3, r3, #8
 800970a:	2b08      	cmp	r3, #8
 800970c:	d122      	bne.n	8009754 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	f003 0308 	and.w	r3, r3, #8
 8009718:	2b08      	cmp	r3, #8
 800971a:	d11b      	bne.n	8009754 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f06f 0208 	mvn.w	r2, #8
 8009724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2204      	movs	r2, #4
 800972a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	69db      	ldr	r3, [r3, #28]
 8009732:	f003 0303 	and.w	r3, r3, #3
 8009736:	2b00      	cmp	r3, #0
 8009738:	d003      	beq.n	8009742 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 fa26 	bl	8009b8c <HAL_TIM_IC_CaptureCallback>
 8009740:	e005      	b.n	800974e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 fa18 	bl	8009b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 fa29 	bl	8009ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	691b      	ldr	r3, [r3, #16]
 800975a:	f003 0310 	and.w	r3, r3, #16
 800975e:	2b10      	cmp	r3, #16
 8009760:	d122      	bne.n	80097a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	f003 0310 	and.w	r3, r3, #16
 800976c:	2b10      	cmp	r3, #16
 800976e:	d11b      	bne.n	80097a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f06f 0210 	mvn.w	r2, #16
 8009778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2208      	movs	r2, #8
 800977e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	69db      	ldr	r3, [r3, #28]
 8009786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800978a:	2b00      	cmp	r3, #0
 800978c:	d003      	beq.n	8009796 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f9fc 	bl	8009b8c <HAL_TIM_IC_CaptureCallback>
 8009794:	e005      	b.n	80097a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f9ee 	bl	8009b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 f9ff 	bl	8009ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	f003 0301 	and.w	r3, r3, #1
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d10e      	bne.n	80097d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	f003 0301 	and.w	r3, r3, #1
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d107      	bne.n	80097d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f06f 0201 	mvn.w	r2, #1
 80097cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 f9c8 	bl	8009b64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	691b      	ldr	r3, [r3, #16]
 80097da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097de:	2b80      	cmp	r3, #128	; 0x80
 80097e0:	d10e      	bne.n	8009800 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ec:	2b80      	cmp	r3, #128	; 0x80
 80097ee:	d107      	bne.n	8009800 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80097f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fdcc 	bl	800a398 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	691b      	ldr	r3, [r3, #16]
 8009806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800980a:	2b40      	cmp	r3, #64	; 0x40
 800980c:	d10e      	bne.n	800982c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009818:	2b40      	cmp	r3, #64	; 0x40
 800981a:	d107      	bne.n	800982c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f9c4 	bl	8009bb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	f003 0320 	and.w	r3, r3, #32
 8009836:	2b20      	cmp	r3, #32
 8009838:	d10e      	bne.n	8009858 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	f003 0320 	and.w	r3, r3, #32
 8009844:	2b20      	cmp	r3, #32
 8009846:	d107      	bne.n	8009858 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f06f 0220 	mvn.w	r2, #32
 8009850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 fd96 	bl	800a384 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009858:	bf00      	nop
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009872:	2b01      	cmp	r3, #1
 8009874:	d101      	bne.n	800987a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009876:	2302      	movs	r3, #2
 8009878:	e0ac      	b.n	80099d4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2201      	movs	r2, #1
 800987e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2b0c      	cmp	r3, #12
 8009886:	f200 809f 	bhi.w	80099c8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800988a:	a201      	add	r2, pc, #4	; (adr r2, 8009890 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800988c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009890:	080098c5 	.word	0x080098c5
 8009894:	080099c9 	.word	0x080099c9
 8009898:	080099c9 	.word	0x080099c9
 800989c:	080099c9 	.word	0x080099c9
 80098a0:	08009905 	.word	0x08009905
 80098a4:	080099c9 	.word	0x080099c9
 80098a8:	080099c9 	.word	0x080099c9
 80098ac:	080099c9 	.word	0x080099c9
 80098b0:	08009947 	.word	0x08009947
 80098b4:	080099c9 	.word	0x080099c9
 80098b8:	080099c9 	.word	0x080099c9
 80098bc:	080099c9 	.word	0x080099c9
 80098c0:	08009987 	.word	0x08009987
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	68b9      	ldr	r1, [r7, #8]
 80098ca:	4618      	mov	r0, r3
 80098cc:	f000 fa1c 	bl	8009d08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	699a      	ldr	r2, [r3, #24]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f042 0208 	orr.w	r2, r2, #8
 80098de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	699a      	ldr	r2, [r3, #24]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f022 0204 	bic.w	r2, r2, #4
 80098ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	6999      	ldr	r1, [r3, #24]
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	691a      	ldr	r2, [r3, #16]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	430a      	orrs	r2, r1
 8009900:	619a      	str	r2, [r3, #24]
      break;
 8009902:	e062      	b.n	80099ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	68b9      	ldr	r1, [r7, #8]
 800990a:	4618      	mov	r0, r3
 800990c:	f000 fa6c 	bl	8009de8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	699a      	ldr	r2, [r3, #24]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800991e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	699a      	ldr	r2, [r3, #24]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800992e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	6999      	ldr	r1, [r3, #24]
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	691b      	ldr	r3, [r3, #16]
 800993a:	021a      	lsls	r2, r3, #8
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	430a      	orrs	r2, r1
 8009942:	619a      	str	r2, [r3, #24]
      break;
 8009944:	e041      	b.n	80099ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	68b9      	ldr	r1, [r7, #8]
 800994c:	4618      	mov	r0, r3
 800994e:	f000 fac1 	bl	8009ed4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	69da      	ldr	r2, [r3, #28]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f042 0208 	orr.w	r2, r2, #8
 8009960:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	69da      	ldr	r2, [r3, #28]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f022 0204 	bic.w	r2, r2, #4
 8009970:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	69d9      	ldr	r1, [r3, #28]
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	691a      	ldr	r2, [r3, #16]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	430a      	orrs	r2, r1
 8009982:	61da      	str	r2, [r3, #28]
      break;
 8009984:	e021      	b.n	80099ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	68b9      	ldr	r1, [r7, #8]
 800998c:	4618      	mov	r0, r3
 800998e:	f000 fb15 	bl	8009fbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	69da      	ldr	r2, [r3, #28]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	69da      	ldr	r2, [r3, #28]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	69d9      	ldr	r1, [r3, #28]
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	691b      	ldr	r3, [r3, #16]
 80099bc:	021a      	lsls	r2, r3, #8
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	430a      	orrs	r2, r1
 80099c4:	61da      	str	r2, [r3, #28]
      break;
 80099c6:	e000      	b.n	80099ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80099c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d101      	bne.n	80099f4 <HAL_TIM_ConfigClockSource+0x18>
 80099f0:	2302      	movs	r3, #2
 80099f2:	e0b3      	b.n	8009b5c <HAL_TIM_ConfigClockSource+0x180>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2202      	movs	r2, #2
 8009a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009a12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a2c:	d03e      	beq.n	8009aac <HAL_TIM_ConfigClockSource+0xd0>
 8009a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a32:	f200 8087 	bhi.w	8009b44 <HAL_TIM_ConfigClockSource+0x168>
 8009a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a3a:	f000 8085 	beq.w	8009b48 <HAL_TIM_ConfigClockSource+0x16c>
 8009a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a42:	d87f      	bhi.n	8009b44 <HAL_TIM_ConfigClockSource+0x168>
 8009a44:	2b70      	cmp	r3, #112	; 0x70
 8009a46:	d01a      	beq.n	8009a7e <HAL_TIM_ConfigClockSource+0xa2>
 8009a48:	2b70      	cmp	r3, #112	; 0x70
 8009a4a:	d87b      	bhi.n	8009b44 <HAL_TIM_ConfigClockSource+0x168>
 8009a4c:	2b60      	cmp	r3, #96	; 0x60
 8009a4e:	d050      	beq.n	8009af2 <HAL_TIM_ConfigClockSource+0x116>
 8009a50:	2b60      	cmp	r3, #96	; 0x60
 8009a52:	d877      	bhi.n	8009b44 <HAL_TIM_ConfigClockSource+0x168>
 8009a54:	2b50      	cmp	r3, #80	; 0x50
 8009a56:	d03c      	beq.n	8009ad2 <HAL_TIM_ConfigClockSource+0xf6>
 8009a58:	2b50      	cmp	r3, #80	; 0x50
 8009a5a:	d873      	bhi.n	8009b44 <HAL_TIM_ConfigClockSource+0x168>
 8009a5c:	2b40      	cmp	r3, #64	; 0x40
 8009a5e:	d058      	beq.n	8009b12 <HAL_TIM_ConfigClockSource+0x136>
 8009a60:	2b40      	cmp	r3, #64	; 0x40
 8009a62:	d86f      	bhi.n	8009b44 <HAL_TIM_ConfigClockSource+0x168>
 8009a64:	2b30      	cmp	r3, #48	; 0x30
 8009a66:	d064      	beq.n	8009b32 <HAL_TIM_ConfigClockSource+0x156>
 8009a68:	2b30      	cmp	r3, #48	; 0x30
 8009a6a:	d86b      	bhi.n	8009b44 <HAL_TIM_ConfigClockSource+0x168>
 8009a6c:	2b20      	cmp	r3, #32
 8009a6e:	d060      	beq.n	8009b32 <HAL_TIM_ConfigClockSource+0x156>
 8009a70:	2b20      	cmp	r3, #32
 8009a72:	d867      	bhi.n	8009b44 <HAL_TIM_ConfigClockSource+0x168>
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d05c      	beq.n	8009b32 <HAL_TIM_ConfigClockSource+0x156>
 8009a78:	2b10      	cmp	r3, #16
 8009a7a:	d05a      	beq.n	8009b32 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009a7c:	e062      	b.n	8009b44 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6818      	ldr	r0, [r3, #0]
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	6899      	ldr	r1, [r3, #8]
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	685a      	ldr	r2, [r3, #4]
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	f000 fb65 	bl	800a15c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009aa0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	68fa      	ldr	r2, [r7, #12]
 8009aa8:	609a      	str	r2, [r3, #8]
      break;
 8009aaa:	e04e      	b.n	8009b4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6818      	ldr	r0, [r3, #0]
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	6899      	ldr	r1, [r3, #8]
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	685a      	ldr	r2, [r3, #4]
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	f000 fb4e 	bl	800a15c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	689a      	ldr	r2, [r3, #8]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ace:	609a      	str	r2, [r3, #8]
      break;
 8009ad0:	e03b      	b.n	8009b4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6818      	ldr	r0, [r3, #0]
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	6859      	ldr	r1, [r3, #4]
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	461a      	mov	r2, r3
 8009ae0:	f000 fac2 	bl	800a068 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2150      	movs	r1, #80	; 0x50
 8009aea:	4618      	mov	r0, r3
 8009aec:	f000 fb1b 	bl	800a126 <TIM_ITRx_SetConfig>
      break;
 8009af0:	e02b      	b.n	8009b4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6818      	ldr	r0, [r3, #0]
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	6859      	ldr	r1, [r3, #4]
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	461a      	mov	r2, r3
 8009b00:	f000 fae1 	bl	800a0c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2160      	movs	r1, #96	; 0x60
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f000 fb0b 	bl	800a126 <TIM_ITRx_SetConfig>
      break;
 8009b10:	e01b      	b.n	8009b4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6818      	ldr	r0, [r3, #0]
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	6859      	ldr	r1, [r3, #4]
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	461a      	mov	r2, r3
 8009b20:	f000 faa2 	bl	800a068 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2140      	movs	r1, #64	; 0x40
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f000 fafb 	bl	800a126 <TIM_ITRx_SetConfig>
      break;
 8009b30:	e00b      	b.n	8009b4a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	4610      	mov	r0, r2
 8009b3e:	f000 faf2 	bl	800a126 <TIM_ITRx_SetConfig>
        break;
 8009b42:	e002      	b.n	8009b4a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009b44:	bf00      	nop
 8009b46:	e000      	b.n	8009b4a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009b48:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2200      	movs	r2, #0
 8009b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3710      	adds	r7, #16
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009b6c:	bf00      	nop
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b80:	bf00      	nop
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b94:	bf00      	nop
 8009b96:	370c      	adds	r7, #12
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b083      	sub	sp, #12
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ba8:	bf00      	nop
 8009baa:	370c      	adds	r7, #12
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009bbc:	bf00      	nop
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	4a40      	ldr	r2, [pc, #256]	; (8009cdc <TIM_Base_SetConfig+0x114>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d013      	beq.n	8009c08 <TIM_Base_SetConfig+0x40>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009be6:	d00f      	beq.n	8009c08 <TIM_Base_SetConfig+0x40>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	4a3d      	ldr	r2, [pc, #244]	; (8009ce0 <TIM_Base_SetConfig+0x118>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d00b      	beq.n	8009c08 <TIM_Base_SetConfig+0x40>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	4a3c      	ldr	r2, [pc, #240]	; (8009ce4 <TIM_Base_SetConfig+0x11c>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d007      	beq.n	8009c08 <TIM_Base_SetConfig+0x40>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4a3b      	ldr	r2, [pc, #236]	; (8009ce8 <TIM_Base_SetConfig+0x120>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d003      	beq.n	8009c08 <TIM_Base_SetConfig+0x40>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a3a      	ldr	r2, [pc, #232]	; (8009cec <TIM_Base_SetConfig+0x124>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d108      	bne.n	8009c1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4a2f      	ldr	r2, [pc, #188]	; (8009cdc <TIM_Base_SetConfig+0x114>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d02b      	beq.n	8009c7a <TIM_Base_SetConfig+0xb2>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c28:	d027      	beq.n	8009c7a <TIM_Base_SetConfig+0xb2>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4a2c      	ldr	r2, [pc, #176]	; (8009ce0 <TIM_Base_SetConfig+0x118>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d023      	beq.n	8009c7a <TIM_Base_SetConfig+0xb2>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	4a2b      	ldr	r2, [pc, #172]	; (8009ce4 <TIM_Base_SetConfig+0x11c>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d01f      	beq.n	8009c7a <TIM_Base_SetConfig+0xb2>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	4a2a      	ldr	r2, [pc, #168]	; (8009ce8 <TIM_Base_SetConfig+0x120>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d01b      	beq.n	8009c7a <TIM_Base_SetConfig+0xb2>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4a29      	ldr	r2, [pc, #164]	; (8009cec <TIM_Base_SetConfig+0x124>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d017      	beq.n	8009c7a <TIM_Base_SetConfig+0xb2>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4a28      	ldr	r2, [pc, #160]	; (8009cf0 <TIM_Base_SetConfig+0x128>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d013      	beq.n	8009c7a <TIM_Base_SetConfig+0xb2>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4a27      	ldr	r2, [pc, #156]	; (8009cf4 <TIM_Base_SetConfig+0x12c>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d00f      	beq.n	8009c7a <TIM_Base_SetConfig+0xb2>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4a26      	ldr	r2, [pc, #152]	; (8009cf8 <TIM_Base_SetConfig+0x130>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d00b      	beq.n	8009c7a <TIM_Base_SetConfig+0xb2>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4a25      	ldr	r2, [pc, #148]	; (8009cfc <TIM_Base_SetConfig+0x134>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d007      	beq.n	8009c7a <TIM_Base_SetConfig+0xb2>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4a24      	ldr	r2, [pc, #144]	; (8009d00 <TIM_Base_SetConfig+0x138>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d003      	beq.n	8009c7a <TIM_Base_SetConfig+0xb2>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	4a23      	ldr	r2, [pc, #140]	; (8009d04 <TIM_Base_SetConfig+0x13c>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d108      	bne.n	8009c8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	68fa      	ldr	r2, [r7, #12]
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	695b      	ldr	r3, [r3, #20]
 8009c96:	4313      	orrs	r3, r2
 8009c98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	689a      	ldr	r2, [r3, #8]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	4a0a      	ldr	r2, [pc, #40]	; (8009cdc <TIM_Base_SetConfig+0x114>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d003      	beq.n	8009cc0 <TIM_Base_SetConfig+0xf8>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	4a0c      	ldr	r2, [pc, #48]	; (8009cec <TIM_Base_SetConfig+0x124>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d103      	bne.n	8009cc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	691a      	ldr	r2, [r3, #16]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	615a      	str	r2, [r3, #20]
}
 8009cce:	bf00      	nop
 8009cd0:	3714      	adds	r7, #20
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	40010000 	.word	0x40010000
 8009ce0:	40000400 	.word	0x40000400
 8009ce4:	40000800 	.word	0x40000800
 8009ce8:	40000c00 	.word	0x40000c00
 8009cec:	40010400 	.word	0x40010400
 8009cf0:	40014000 	.word	0x40014000
 8009cf4:	40014400 	.word	0x40014400
 8009cf8:	40014800 	.word	0x40014800
 8009cfc:	40001800 	.word	0x40001800
 8009d00:	40001c00 	.word	0x40001c00
 8009d04:	40002000 	.word	0x40002000

08009d08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b087      	sub	sp, #28
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a1b      	ldr	r3, [r3, #32]
 8009d16:	f023 0201 	bic.w	r2, r3, #1
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a1b      	ldr	r3, [r3, #32]
 8009d22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	699b      	ldr	r3, [r3, #24]
 8009d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f023 0303 	bic.w	r3, r3, #3
 8009d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	4313      	orrs	r3, r2
 8009d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	f023 0302 	bic.w	r3, r3, #2
 8009d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	689b      	ldr	r3, [r3, #8]
 8009d56:	697a      	ldr	r2, [r7, #20]
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4a20      	ldr	r2, [pc, #128]	; (8009de0 <TIM_OC1_SetConfig+0xd8>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d003      	beq.n	8009d6c <TIM_OC1_SetConfig+0x64>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	4a1f      	ldr	r2, [pc, #124]	; (8009de4 <TIM_OC1_SetConfig+0xdc>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d10c      	bne.n	8009d86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	f023 0308 	bic.w	r3, r3, #8
 8009d72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	697a      	ldr	r2, [r7, #20]
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	f023 0304 	bic.w	r3, r3, #4
 8009d84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4a15      	ldr	r2, [pc, #84]	; (8009de0 <TIM_OC1_SetConfig+0xd8>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d003      	beq.n	8009d96 <TIM_OC1_SetConfig+0x8e>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4a14      	ldr	r2, [pc, #80]	; (8009de4 <TIM_OC1_SetConfig+0xdc>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d111      	bne.n	8009dba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	695b      	ldr	r3, [r3, #20]
 8009daa:	693a      	ldr	r2, [r7, #16]
 8009dac:	4313      	orrs	r3, r2
 8009dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	699b      	ldr	r3, [r3, #24]
 8009db4:	693a      	ldr	r2, [r7, #16]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	693a      	ldr	r2, [r7, #16]
 8009dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	685a      	ldr	r2, [r3, #4]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	697a      	ldr	r2, [r7, #20]
 8009dd2:	621a      	str	r2, [r3, #32]
}
 8009dd4:	bf00      	nop
 8009dd6:	371c      	adds	r7, #28
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr
 8009de0:	40010000 	.word	0x40010000
 8009de4:	40010400 	.word	0x40010400

08009de8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b087      	sub	sp, #28
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a1b      	ldr	r3, [r3, #32]
 8009df6:	f023 0210 	bic.w	r2, r3, #16
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6a1b      	ldr	r3, [r3, #32]
 8009e02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	699b      	ldr	r3, [r3, #24]
 8009e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	021b      	lsls	r3, r3, #8
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	f023 0320 	bic.w	r3, r3, #32
 8009e32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	689b      	ldr	r3, [r3, #8]
 8009e38:	011b      	lsls	r3, r3, #4
 8009e3a:	697a      	ldr	r2, [r7, #20]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4a22      	ldr	r2, [pc, #136]	; (8009ecc <TIM_OC2_SetConfig+0xe4>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d003      	beq.n	8009e50 <TIM_OC2_SetConfig+0x68>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4a21      	ldr	r2, [pc, #132]	; (8009ed0 <TIM_OC2_SetConfig+0xe8>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d10d      	bne.n	8009e6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	011b      	lsls	r3, r3, #4
 8009e5e:	697a      	ldr	r2, [r7, #20]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4a17      	ldr	r2, [pc, #92]	; (8009ecc <TIM_OC2_SetConfig+0xe4>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d003      	beq.n	8009e7c <TIM_OC2_SetConfig+0x94>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a16      	ldr	r2, [pc, #88]	; (8009ed0 <TIM_OC2_SetConfig+0xe8>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d113      	bne.n	8009ea4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	695b      	ldr	r3, [r3, #20]
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	693a      	ldr	r2, [r7, #16]
 8009e94:	4313      	orrs	r3, r2
 8009e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	699b      	ldr	r3, [r3, #24]
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	693a      	ldr	r2, [r7, #16]
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	693a      	ldr	r2, [r7, #16]
 8009ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	68fa      	ldr	r2, [r7, #12]
 8009eae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	685a      	ldr	r2, [r3, #4]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	697a      	ldr	r2, [r7, #20]
 8009ebc:	621a      	str	r2, [r3, #32]
}
 8009ebe:	bf00      	nop
 8009ec0:	371c      	adds	r7, #28
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
 8009eca:	bf00      	nop
 8009ecc:	40010000 	.word	0x40010000
 8009ed0:	40010400 	.word	0x40010400

08009ed4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b087      	sub	sp, #28
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6a1b      	ldr	r3, [r3, #32]
 8009ee2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a1b      	ldr	r3, [r3, #32]
 8009eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	69db      	ldr	r3, [r3, #28]
 8009efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f023 0303 	bic.w	r3, r3, #3
 8009f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	4313      	orrs	r3, r2
 8009f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	021b      	lsls	r3, r3, #8
 8009f24:	697a      	ldr	r2, [r7, #20]
 8009f26:	4313      	orrs	r3, r2
 8009f28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4a21      	ldr	r2, [pc, #132]	; (8009fb4 <TIM_OC3_SetConfig+0xe0>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d003      	beq.n	8009f3a <TIM_OC3_SetConfig+0x66>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4a20      	ldr	r2, [pc, #128]	; (8009fb8 <TIM_OC3_SetConfig+0xe4>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d10d      	bne.n	8009f56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	021b      	lsls	r3, r3, #8
 8009f48:	697a      	ldr	r2, [r7, #20]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	4a16      	ldr	r2, [pc, #88]	; (8009fb4 <TIM_OC3_SetConfig+0xe0>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d003      	beq.n	8009f66 <TIM_OC3_SetConfig+0x92>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	4a15      	ldr	r2, [pc, #84]	; (8009fb8 <TIM_OC3_SetConfig+0xe4>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d113      	bne.n	8009f8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	695b      	ldr	r3, [r3, #20]
 8009f7a:	011b      	lsls	r3, r3, #4
 8009f7c:	693a      	ldr	r2, [r7, #16]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	699b      	ldr	r3, [r3, #24]
 8009f86:	011b      	lsls	r3, r3, #4
 8009f88:	693a      	ldr	r2, [r7, #16]
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	693a      	ldr	r2, [r7, #16]
 8009f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	68fa      	ldr	r2, [r7, #12]
 8009f98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	685a      	ldr	r2, [r3, #4]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	697a      	ldr	r2, [r7, #20]
 8009fa6:	621a      	str	r2, [r3, #32]
}
 8009fa8:	bf00      	nop
 8009faa:	371c      	adds	r7, #28
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr
 8009fb4:	40010000 	.word	0x40010000
 8009fb8:	40010400 	.word	0x40010400

08009fbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b087      	sub	sp, #28
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a1b      	ldr	r3, [r3, #32]
 8009fca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6a1b      	ldr	r3, [r3, #32]
 8009fd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	69db      	ldr	r3, [r3, #28]
 8009fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	021b      	lsls	r3, r3, #8
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a006:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	031b      	lsls	r3, r3, #12
 800a00e:	693a      	ldr	r2, [r7, #16]
 800a010:	4313      	orrs	r3, r2
 800a012:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a12      	ldr	r2, [pc, #72]	; (800a060 <TIM_OC4_SetConfig+0xa4>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d003      	beq.n	800a024 <TIM_OC4_SetConfig+0x68>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a11      	ldr	r2, [pc, #68]	; (800a064 <TIM_OC4_SetConfig+0xa8>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d109      	bne.n	800a038 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a02a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	695b      	ldr	r3, [r3, #20]
 800a030:	019b      	lsls	r3, r3, #6
 800a032:	697a      	ldr	r2, [r7, #20]
 800a034:	4313      	orrs	r3, r2
 800a036:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	697a      	ldr	r2, [r7, #20]
 800a03c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	68fa      	ldr	r2, [r7, #12]
 800a042:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	685a      	ldr	r2, [r3, #4]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	693a      	ldr	r2, [r7, #16]
 800a050:	621a      	str	r2, [r3, #32]
}
 800a052:	bf00      	nop
 800a054:	371c      	adds	r7, #28
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	40010000 	.word	0x40010000
 800a064:	40010400 	.word	0x40010400

0800a068 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a068:	b480      	push	{r7}
 800a06a:	b087      	sub	sp, #28
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6a1b      	ldr	r3, [r3, #32]
 800a078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6a1b      	ldr	r3, [r3, #32]
 800a07e:	f023 0201 	bic.w	r2, r3, #1
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	699b      	ldr	r3, [r3, #24]
 800a08a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	011b      	lsls	r3, r3, #4
 800a098:	693a      	ldr	r2, [r7, #16]
 800a09a:	4313      	orrs	r3, r2
 800a09c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	f023 030a 	bic.w	r3, r3, #10
 800a0a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a0a6:	697a      	ldr	r2, [r7, #20]
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	693a      	ldr	r2, [r7, #16]
 800a0b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	697a      	ldr	r2, [r7, #20]
 800a0b8:	621a      	str	r2, [r3, #32]
}
 800a0ba:	bf00      	nop
 800a0bc:	371c      	adds	r7, #28
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr

0800a0c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0c6:	b480      	push	{r7}
 800a0c8:	b087      	sub	sp, #28
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	60f8      	str	r0, [r7, #12]
 800a0ce:	60b9      	str	r1, [r7, #8]
 800a0d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6a1b      	ldr	r3, [r3, #32]
 800a0d6:	f023 0210 	bic.w	r2, r3, #16
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	699b      	ldr	r3, [r3, #24]
 800a0e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6a1b      	ldr	r3, [r3, #32]
 800a0e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a0f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	031b      	lsls	r3, r3, #12
 800a0f6:	697a      	ldr	r2, [r7, #20]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a102:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	011b      	lsls	r3, r3, #4
 800a108:	693a      	ldr	r2, [r7, #16]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	697a      	ldr	r2, [r7, #20]
 800a112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	693a      	ldr	r2, [r7, #16]
 800a118:	621a      	str	r2, [r3, #32]
}
 800a11a:	bf00      	nop
 800a11c:	371c      	adds	r7, #28
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr

0800a126 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a126:	b480      	push	{r7}
 800a128:	b085      	sub	sp, #20
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
 800a12e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a13c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a13e:	683a      	ldr	r2, [r7, #0]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	4313      	orrs	r3, r2
 800a144:	f043 0307 	orr.w	r3, r3, #7
 800a148:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	609a      	str	r2, [r3, #8]
}
 800a150:	bf00      	nop
 800a152:	3714      	adds	r7, #20
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b087      	sub	sp, #28
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
 800a168:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a176:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	021a      	lsls	r2, r3, #8
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	431a      	orrs	r2, r3
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	4313      	orrs	r3, r2
 800a184:	697a      	ldr	r2, [r7, #20]
 800a186:	4313      	orrs	r3, r2
 800a188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	697a      	ldr	r2, [r7, #20]
 800a18e:	609a      	str	r2, [r3, #8]
}
 800a190:	bf00      	nop
 800a192:	371c      	adds	r7, #28
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b087      	sub	sp, #28
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	f003 031f 	and.w	r3, r3, #31
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	6a1a      	ldr	r2, [r3, #32]
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	43db      	mvns	r3, r3
 800a1be:	401a      	ands	r2, r3
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6a1a      	ldr	r2, [r3, #32]
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	f003 031f 	and.w	r3, r3, #31
 800a1ce:	6879      	ldr	r1, [r7, #4]
 800a1d0:	fa01 f303 	lsl.w	r3, r1, r3
 800a1d4:	431a      	orrs	r2, r3
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	621a      	str	r2, [r3, #32]
}
 800a1da:	bf00      	nop
 800a1dc:	371c      	adds	r7, #28
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr
	...

0800a1e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d101      	bne.n	800a200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a1fc:	2302      	movs	r3, #2
 800a1fe:	e05a      	b.n	800a2b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2201      	movs	r2, #1
 800a204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2202      	movs	r2, #2
 800a20c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a226:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	4313      	orrs	r3, r2
 800a230:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	68fa      	ldr	r2, [r7, #12]
 800a238:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a21      	ldr	r2, [pc, #132]	; (800a2c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d022      	beq.n	800a28a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a24c:	d01d      	beq.n	800a28a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a1d      	ldr	r2, [pc, #116]	; (800a2c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d018      	beq.n	800a28a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a1b      	ldr	r2, [pc, #108]	; (800a2cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d013      	beq.n	800a28a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a1a      	ldr	r2, [pc, #104]	; (800a2d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d00e      	beq.n	800a28a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a18      	ldr	r2, [pc, #96]	; (800a2d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d009      	beq.n	800a28a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a17      	ldr	r2, [pc, #92]	; (800a2d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d004      	beq.n	800a28a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a15      	ldr	r2, [pc, #84]	; (800a2dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d10c      	bne.n	800a2a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a290:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	68ba      	ldr	r2, [r7, #8]
 800a298:	4313      	orrs	r3, r2
 800a29a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	68ba      	ldr	r2, [r7, #8]
 800a2a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3714      	adds	r7, #20
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop
 800a2c4:	40010000 	.word	0x40010000
 800a2c8:	40000400 	.word	0x40000400
 800a2cc:	40000800 	.word	0x40000800
 800a2d0:	40000c00 	.word	0x40000c00
 800a2d4:	40010400 	.word	0x40010400
 800a2d8:	40014000 	.word	0x40014000
 800a2dc:	40001800 	.word	0x40001800

0800a2e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b085      	sub	sp, #20
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d101      	bne.n	800a2fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a2f8:	2302      	movs	r3, #2
 800a2fa:	e03d      	b.n	800a378 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	4313      	orrs	r3, r2
 800a310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	4313      	orrs	r3, r2
 800a31e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4313      	orrs	r3, r2
 800a33a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	691b      	ldr	r3, [r3, #16]
 800a346:	4313      	orrs	r3, r2
 800a348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	695b      	ldr	r3, [r3, #20]
 800a354:	4313      	orrs	r3, r2
 800a356:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	69db      	ldr	r3, [r3, #28]
 800a362:	4313      	orrs	r3, r2
 800a364:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	68fa      	ldr	r2, [r7, #12]
 800a36c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3714      	adds	r7, #20
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr

0800a384 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a38c:	bf00      	nop
 800a38e:	370c      	adds	r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a3a0:	bf00      	nop
 800a3a2:	370c      	adds	r7, #12
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d101      	bne.n	800a3be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e03f      	b.n	800a43e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d106      	bne.n	800a3d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f7fb ffbc 	bl	8006350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2224      	movs	r2, #36	; 0x24
 800a3dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	68da      	ldr	r2, [r3, #12]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a3ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 fc7b 	bl	800acec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	691a      	ldr	r2, [r3, #16]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a404:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	695a      	ldr	r2, [r3, #20]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a414:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	68da      	ldr	r2, [r3, #12]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a424:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2200      	movs	r2, #0
 800a42a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2220      	movs	r2, #32
 800a430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2220      	movs	r2, #32
 800a438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a43c:	2300      	movs	r3, #0
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3708      	adds	r7, #8
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a446:	b580      	push	{r7, lr}
 800a448:	b08a      	sub	sp, #40	; 0x28
 800a44a:	af02      	add	r7, sp, #8
 800a44c:	60f8      	str	r0, [r7, #12]
 800a44e:	60b9      	str	r1, [r7, #8]
 800a450:	603b      	str	r3, [r7, #0]
 800a452:	4613      	mov	r3, r2
 800a454:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a456:	2300      	movs	r3, #0
 800a458:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a460:	b2db      	uxtb	r3, r3
 800a462:	2b20      	cmp	r3, #32
 800a464:	d17c      	bne.n	800a560 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d002      	beq.n	800a472 <HAL_UART_Transmit+0x2c>
 800a46c:	88fb      	ldrh	r3, [r7, #6]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d101      	bne.n	800a476 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a472:	2301      	movs	r3, #1
 800a474:	e075      	b.n	800a562 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d101      	bne.n	800a484 <HAL_UART_Transmit+0x3e>
 800a480:	2302      	movs	r3, #2
 800a482:	e06e      	b.n	800a562 <HAL_UART_Transmit+0x11c>
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2200      	movs	r2, #0
 800a490:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2221      	movs	r2, #33	; 0x21
 800a496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a49a:	f7fc f85d 	bl	8006558 <HAL_GetTick>
 800a49e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	88fa      	ldrh	r2, [r7, #6]
 800a4a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	88fa      	ldrh	r2, [r7, #6]
 800a4aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4b4:	d108      	bne.n	800a4c8 <HAL_UART_Transmit+0x82>
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	691b      	ldr	r3, [r3, #16]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d104      	bne.n	800a4c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	61bb      	str	r3, [r7, #24]
 800a4c6:	e003      	b.n	800a4d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a4d8:	e02a      	b.n	800a530 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	9300      	str	r3, [sp, #0]
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	2180      	movs	r1, #128	; 0x80
 800a4e4:	68f8      	ldr	r0, [r7, #12]
 800a4e6:	f000 fa3d 	bl	800a964 <UART_WaitOnFlagUntilTimeout>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d001      	beq.n	800a4f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a4f0:	2303      	movs	r3, #3
 800a4f2:	e036      	b.n	800a562 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a4f4:	69fb      	ldr	r3, [r7, #28]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d10b      	bne.n	800a512 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	881b      	ldrh	r3, [r3, #0]
 800a4fe:	461a      	mov	r2, r3
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a508:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a50a:	69bb      	ldr	r3, [r7, #24]
 800a50c:	3302      	adds	r3, #2
 800a50e:	61bb      	str	r3, [r7, #24]
 800a510:	e007      	b.n	800a522 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a512:	69fb      	ldr	r3, [r7, #28]
 800a514:	781a      	ldrb	r2, [r3, #0]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	3301      	adds	r3, #1
 800a520:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a526:	b29b      	uxth	r3, r3
 800a528:	3b01      	subs	r3, #1
 800a52a:	b29a      	uxth	r2, r3
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a534:	b29b      	uxth	r3, r3
 800a536:	2b00      	cmp	r3, #0
 800a538:	d1cf      	bne.n	800a4da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	9300      	str	r3, [sp, #0]
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	2200      	movs	r2, #0
 800a542:	2140      	movs	r1, #64	; 0x40
 800a544:	68f8      	ldr	r0, [r7, #12]
 800a546:	f000 fa0d 	bl	800a964 <UART_WaitOnFlagUntilTimeout>
 800a54a:	4603      	mov	r3, r0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d001      	beq.n	800a554 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a550:	2303      	movs	r3, #3
 800a552:	e006      	b.n	800a562 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2220      	movs	r2, #32
 800a558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a55c:	2300      	movs	r3, #0
 800a55e:	e000      	b.n	800a562 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a560:	2302      	movs	r3, #2
  }
}
 800a562:	4618      	mov	r0, r3
 800a564:	3720      	adds	r7, #32
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b084      	sub	sp, #16
 800a56e:	af00      	add	r7, sp, #0
 800a570:	60f8      	str	r0, [r7, #12]
 800a572:	60b9      	str	r1, [r7, #8]
 800a574:	4613      	mov	r3, r2
 800a576:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	2b20      	cmp	r3, #32
 800a582:	d11d      	bne.n	800a5c0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d002      	beq.n	800a590 <HAL_UART_Receive_IT+0x26>
 800a58a:	88fb      	ldrh	r3, [r7, #6]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d101      	bne.n	800a594 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a590:	2301      	movs	r3, #1
 800a592:	e016      	b.n	800a5c2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d101      	bne.n	800a5a2 <HAL_UART_Receive_IT+0x38>
 800a59e:	2302      	movs	r3, #2
 800a5a0:	e00f      	b.n	800a5c2 <HAL_UART_Receive_IT+0x58>
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800a5b0:	88fb      	ldrh	r3, [r7, #6]
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	68b9      	ldr	r1, [r7, #8]
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f000 fa1e 	bl	800a9f8 <UART_Start_Receive_IT>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	e000      	b.n	800a5c2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a5c0:	2302      	movs	r3, #2
  }
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3710      	adds	r7, #16
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
	...

0800a5cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b08a      	sub	sp, #40	; 0x28
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	695b      	ldr	r3, [r3, #20]
 800a5ea:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f6:	f003 030f 	and.w	r3, r3, #15
 800a5fa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10d      	bne.n	800a61e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a604:	f003 0320 	and.w	r3, r3, #32
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d008      	beq.n	800a61e <HAL_UART_IRQHandler+0x52>
 800a60c:	6a3b      	ldr	r3, [r7, #32]
 800a60e:	f003 0320 	and.w	r3, r3, #32
 800a612:	2b00      	cmp	r3, #0
 800a614:	d003      	beq.n	800a61e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f000 fad1 	bl	800abbe <UART_Receive_IT>
      return;
 800a61c:	e17c      	b.n	800a918 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a61e:	69bb      	ldr	r3, [r7, #24]
 800a620:	2b00      	cmp	r3, #0
 800a622:	f000 80b1 	beq.w	800a788 <HAL_UART_IRQHandler+0x1bc>
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	f003 0301 	and.w	r3, r3, #1
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d105      	bne.n	800a63c <HAL_UART_IRQHandler+0x70>
 800a630:	6a3b      	ldr	r3, [r7, #32]
 800a632:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a636:	2b00      	cmp	r3, #0
 800a638:	f000 80a6 	beq.w	800a788 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63e:	f003 0301 	and.w	r3, r3, #1
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00a      	beq.n	800a65c <HAL_UART_IRQHandler+0x90>
 800a646:	6a3b      	ldr	r3, [r7, #32]
 800a648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d005      	beq.n	800a65c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a654:	f043 0201 	orr.w	r2, r3, #1
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65e:	f003 0304 	and.w	r3, r3, #4
 800a662:	2b00      	cmp	r3, #0
 800a664:	d00a      	beq.n	800a67c <HAL_UART_IRQHandler+0xb0>
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	f003 0301 	and.w	r3, r3, #1
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d005      	beq.n	800a67c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a674:	f043 0202 	orr.w	r2, r3, #2
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67e:	f003 0302 	and.w	r3, r3, #2
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00a      	beq.n	800a69c <HAL_UART_IRQHandler+0xd0>
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	f003 0301 	and.w	r3, r3, #1
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d005      	beq.n	800a69c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a694:	f043 0204 	orr.w	r2, r3, #4
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69e:	f003 0308 	and.w	r3, r3, #8
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d00f      	beq.n	800a6c6 <HAL_UART_IRQHandler+0xfa>
 800a6a6:	6a3b      	ldr	r3, [r7, #32]
 800a6a8:	f003 0320 	and.w	r3, r3, #32
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d104      	bne.n	800a6ba <HAL_UART_IRQHandler+0xee>
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	f003 0301 	and.w	r3, r3, #1
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d005      	beq.n	800a6c6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6be:	f043 0208 	orr.w	r2, r3, #8
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	f000 811f 	beq.w	800a90e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d2:	f003 0320 	and.w	r3, r3, #32
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d007      	beq.n	800a6ea <HAL_UART_IRQHandler+0x11e>
 800a6da:	6a3b      	ldr	r3, [r7, #32]
 800a6dc:	f003 0320 	and.w	r3, r3, #32
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d002      	beq.n	800a6ea <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 fa6a 	bl	800abbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	695b      	ldr	r3, [r3, #20]
 800a6f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6f4:	2b40      	cmp	r3, #64	; 0x40
 800a6f6:	bf0c      	ite	eq
 800a6f8:	2301      	moveq	r3, #1
 800a6fa:	2300      	movne	r3, #0
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a704:	f003 0308 	and.w	r3, r3, #8
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d102      	bne.n	800a712 <HAL_UART_IRQHandler+0x146>
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d031      	beq.n	800a776 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 f9aa 	bl	800aa6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	695b      	ldr	r3, [r3, #20]
 800a71e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a722:	2b40      	cmp	r3, #64	; 0x40
 800a724:	d123      	bne.n	800a76e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	695a      	ldr	r2, [r3, #20]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a734:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d013      	beq.n	800a766 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a742:	4a77      	ldr	r2, [pc, #476]	; (800a920 <HAL_UART_IRQHandler+0x354>)
 800a744:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7fd fb1d 	bl	8007d8a <HAL_DMA_Abort_IT>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d016      	beq.n	800a784 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a75a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a760:	4610      	mov	r0, r2
 800a762:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a764:	e00e      	b.n	800a784 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 f8e6 	bl	800a938 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a76c:	e00a      	b.n	800a784 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 f8e2 	bl	800a938 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a774:	e006      	b.n	800a784 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 f8de 	bl	800a938 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a782:	e0c4      	b.n	800a90e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a784:	bf00      	nop
    return;
 800a786:	e0c2      	b.n	800a90e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	f040 80a2 	bne.w	800a8d6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800a792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a794:	f003 0310 	and.w	r3, r3, #16
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f000 809c 	beq.w	800a8d6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800a79e:	6a3b      	ldr	r3, [r7, #32]
 800a7a0:	f003 0310 	and.w	r3, r3, #16
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	f000 8096 	beq.w	800a8d6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	60fb      	str	r3, [r7, #12]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	60fb      	str	r3, [r7, #12]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	60fb      	str	r3, [r7, #12]
 800a7be:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	695b      	ldr	r3, [r3, #20]
 800a7c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ca:	2b40      	cmp	r3, #64	; 0x40
 800a7cc:	d14f      	bne.n	800a86e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800a7d8:	8a3b      	ldrh	r3, [r7, #16]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	f000 8099 	beq.w	800a912 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a7e4:	8a3a      	ldrh	r2, [r7, #16]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	f080 8093 	bcs.w	800a912 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	8a3a      	ldrh	r2, [r7, #16]
 800a7f0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f6:	69db      	ldr	r3, [r3, #28]
 800a7f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7fc:	d02b      	beq.n	800a856 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	68da      	ldr	r2, [r3, #12]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a80c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	695a      	ldr	r2, [r3, #20]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f022 0201 	bic.w	r2, r2, #1
 800a81c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	695a      	ldr	r2, [r3, #20]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a82c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2220      	movs	r2, #32
 800a832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	68da      	ldr	r2, [r3, #12]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f022 0210 	bic.w	r2, r2, #16
 800a84a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a850:	4618      	mov	r0, r3
 800a852:	f7fd fa2a 	bl	8007caa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a85e:	b29b      	uxth	r3, r3
 800a860:	1ad3      	subs	r3, r2, r3
 800a862:	b29b      	uxth	r3, r3
 800a864:	4619      	mov	r1, r3
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 f870 	bl	800a94c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a86c:	e051      	b.n	800a912 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a876:	b29b      	uxth	r3, r3
 800a878:	1ad3      	subs	r3, r2, r3
 800a87a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a880:	b29b      	uxth	r3, r3
 800a882:	2b00      	cmp	r3, #0
 800a884:	d047      	beq.n	800a916 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800a886:	8a7b      	ldrh	r3, [r7, #18]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d044      	beq.n	800a916 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	68da      	ldr	r2, [r3, #12]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a89a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	695a      	ldr	r2, [r3, #20]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f022 0201 	bic.w	r2, r2, #1
 800a8aa:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2220      	movs	r2, #32
 800a8b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	68da      	ldr	r2, [r3, #12]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f022 0210 	bic.w	r2, r2, #16
 800a8c8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a8ca:	8a7b      	ldrh	r3, [r7, #18]
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 f83c 	bl	800a94c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a8d4:	e01f      	b.n	800a916 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d008      	beq.n	800a8f2 <HAL_UART_IRQHandler+0x326>
 800a8e0:	6a3b      	ldr	r3, [r7, #32]
 800a8e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d003      	beq.n	800a8f2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 f8ff 	bl	800aaee <UART_Transmit_IT>
    return;
 800a8f0:	e012      	b.n	800a918 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d00d      	beq.n	800a918 <HAL_UART_IRQHandler+0x34c>
 800a8fc:	6a3b      	ldr	r3, [r7, #32]
 800a8fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a902:	2b00      	cmp	r3, #0
 800a904:	d008      	beq.n	800a918 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 f941 	bl	800ab8e <UART_EndTransmit_IT>
    return;
 800a90c:	e004      	b.n	800a918 <HAL_UART_IRQHandler+0x34c>
    return;
 800a90e:	bf00      	nop
 800a910:	e002      	b.n	800a918 <HAL_UART_IRQHandler+0x34c>
      return;
 800a912:	bf00      	nop
 800a914:	e000      	b.n	800a918 <HAL_UART_IRQHandler+0x34c>
      return;
 800a916:	bf00      	nop
  }
}
 800a918:	3728      	adds	r7, #40	; 0x28
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	0800aac7 	.word	0x0800aac7

0800a924 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a92c:	bf00      	nop
 800a92e:	370c      	adds	r7, #12
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr

0800a938 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a938:	b480      	push	{r7}
 800a93a:	b083      	sub	sp, #12
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a940:	bf00      	nop
 800a942:	370c      	adds	r7, #12
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	460b      	mov	r3, r1
 800a956:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a958:	bf00      	nop
 800a95a:	370c      	adds	r7, #12
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	60b9      	str	r1, [r7, #8]
 800a96e:	603b      	str	r3, [r7, #0]
 800a970:	4613      	mov	r3, r2
 800a972:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a974:	e02c      	b.n	800a9d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a97c:	d028      	beq.n	800a9d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a97e:	69bb      	ldr	r3, [r7, #24]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d007      	beq.n	800a994 <UART_WaitOnFlagUntilTimeout+0x30>
 800a984:	f7fb fde8 	bl	8006558 <HAL_GetTick>
 800a988:	4602      	mov	r2, r0
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	1ad3      	subs	r3, r2, r3
 800a98e:	69ba      	ldr	r2, [r7, #24]
 800a990:	429a      	cmp	r2, r3
 800a992:	d21d      	bcs.n	800a9d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	68da      	ldr	r2, [r3, #12]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a9a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	695a      	ldr	r2, [r3, #20]
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f022 0201 	bic.w	r2, r2, #1
 800a9b2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2220      	movs	r2, #32
 800a9b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2220      	movs	r2, #32
 800a9c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a9cc:	2303      	movs	r3, #3
 800a9ce:	e00f      	b.n	800a9f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	4013      	ands	r3, r2
 800a9da:	68ba      	ldr	r2, [r7, #8]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	bf0c      	ite	eq
 800a9e0:	2301      	moveq	r3, #1
 800a9e2:	2300      	movne	r3, #0
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	79fb      	ldrb	r3, [r7, #7]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d0c3      	beq.n	800a976 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3710      	adds	r7, #16
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	4613      	mov	r3, r2
 800aa04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	68ba      	ldr	r2, [r7, #8]
 800aa0a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	88fa      	ldrh	r2, [r7, #6]
 800aa10:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	88fa      	ldrh	r2, [r7, #6]
 800aa16:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2222      	movs	r2, #34	; 0x22
 800aa22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	68da      	ldr	r2, [r3, #12]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa3c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	695a      	ldr	r2, [r3, #20]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f042 0201 	orr.w	r2, r2, #1
 800aa4c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	68da      	ldr	r2, [r3, #12]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f042 0220 	orr.w	r2, r2, #32
 800aa5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800aa5e:	2300      	movs	r3, #0
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3714      	adds	r7, #20
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	68da      	ldr	r2, [r3, #12]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800aa82:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	695a      	ldr	r2, [r3, #20]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f022 0201 	bic.w	r2, r2, #1
 800aa92:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d107      	bne.n	800aaac <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	68da      	ldr	r2, [r3, #12]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f022 0210 	bic.w	r2, r2, #16
 800aaaa:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2220      	movs	r2, #32
 800aab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2200      	movs	r2, #0
 800aab8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800aaba:	bf00      	nop
 800aabc:	370c      	adds	r7, #12
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr

0800aac6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b084      	sub	sp, #16
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2200      	movs	r2, #0
 800aad8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2200      	movs	r2, #0
 800aade:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aae0:	68f8      	ldr	r0, [r7, #12]
 800aae2:	f7ff ff29 	bl	800a938 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aae6:	bf00      	nop
 800aae8:	3710      	adds	r7, #16
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}

0800aaee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800aaee:	b480      	push	{r7}
 800aaf0:	b085      	sub	sp, #20
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	2b21      	cmp	r3, #33	; 0x21
 800ab00:	d13e      	bne.n	800ab80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab0a:	d114      	bne.n	800ab36 <UART_Transmit_IT+0x48>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	691b      	ldr	r3, [r3, #16]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d110      	bne.n	800ab36 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6a1b      	ldr	r3, [r3, #32]
 800ab18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	881b      	ldrh	r3, [r3, #0]
 800ab1e:	461a      	mov	r2, r3
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a1b      	ldr	r3, [r3, #32]
 800ab2e:	1c9a      	adds	r2, r3, #2
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	621a      	str	r2, [r3, #32]
 800ab34:	e008      	b.n	800ab48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6a1b      	ldr	r3, [r3, #32]
 800ab3a:	1c59      	adds	r1, r3, #1
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	6211      	str	r1, [r2, #32]
 800ab40:	781a      	ldrb	r2, [r3, #0]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	3b01      	subs	r3, #1
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	4619      	mov	r1, r3
 800ab56:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d10f      	bne.n	800ab7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	68da      	ldr	r2, [r3, #12]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	68da      	ldr	r2, [r3, #12]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	e000      	b.n	800ab82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ab80:	2302      	movs	r3, #2
  }
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3714      	adds	r7, #20
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr

0800ab8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ab8e:	b580      	push	{r7, lr}
 800ab90:	b082      	sub	sp, #8
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	68da      	ldr	r2, [r3, #12]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aba4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2220      	movs	r2, #32
 800abaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f7ff feb8 	bl	800a924 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3708      	adds	r7, #8
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b084      	sub	sp, #16
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	2b22      	cmp	r3, #34	; 0x22
 800abd0:	f040 8087 	bne.w	800ace2 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abdc:	d117      	bne.n	800ac0e <UART_Receive_IT+0x50>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	691b      	ldr	r3, [r3, #16]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d113      	bne.n	800ac0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800abe6:	2300      	movs	r3, #0
 800abe8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abee:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abfc:	b29a      	uxth	r2, r3
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac06:	1c9a      	adds	r2, r3, #2
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	629a      	str	r2, [r3, #40]	; 0x28
 800ac0c:	e026      	b.n	800ac5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac12:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800ac14:	2300      	movs	r3, #0
 800ac16:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac20:	d007      	beq.n	800ac32 <UART_Receive_IT+0x74>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d10a      	bne.n	800ac40 <UART_Receive_IT+0x82>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	691b      	ldr	r3, [r3, #16]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d106      	bne.n	800ac40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	b2da      	uxtb	r2, r3
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	701a      	strb	r2, [r3, #0]
 800ac3e:	e008      	b.n	800ac52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	b2db      	uxtb	r3, r3
 800ac48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac4c:	b2da      	uxtb	r2, r3
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac56:	1c5a      	adds	r2, r3, #1
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	3b01      	subs	r3, #1
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	4619      	mov	r1, r3
 800ac6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d136      	bne.n	800acde <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	68da      	ldr	r2, [r3, #12]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f022 0220 	bic.w	r2, r2, #32
 800ac7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	68da      	ldr	r2, [r3, #12]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ac8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	695a      	ldr	r2, [r3, #20]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f022 0201 	bic.w	r2, r2, #1
 800ac9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2220      	movs	r2, #32
 800aca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acac:	2b01      	cmp	r3, #1
 800acae:	d10e      	bne.n	800acce <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	68da      	ldr	r2, [r3, #12]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f022 0210 	bic.w	r2, r2, #16
 800acbe:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800acc4:	4619      	mov	r1, r3
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f7ff fe40 	bl	800a94c <HAL_UARTEx_RxEventCallback>
 800accc:	e002      	b.n	800acd4 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f7fb fba0 	bl	8006414 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800acda:	2300      	movs	r3, #0
 800acdc:	e002      	b.n	800ace4 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800acde:	2300      	movs	r3, #0
 800ace0:	e000      	b.n	800ace4 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800ace2:	2302      	movs	r3, #2
  }
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3710      	adds	r7, #16
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800acec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf0:	b09f      	sub	sp, #124	; 0x7c
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	691b      	ldr	r3, [r3, #16]
 800acfc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ad00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad02:	68d9      	ldr	r1, [r3, #12]
 800ad04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	ea40 0301 	orr.w	r3, r0, r1
 800ad0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ad0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad10:	689a      	ldr	r2, [r3, #8]
 800ad12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad14:	691b      	ldr	r3, [r3, #16]
 800ad16:	431a      	orrs	r2, r3
 800ad18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad1a:	695b      	ldr	r3, [r3, #20]
 800ad1c:	431a      	orrs	r2, r3
 800ad1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad20:	69db      	ldr	r3, [r3, #28]
 800ad22:	4313      	orrs	r3, r2
 800ad24:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800ad26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	68db      	ldr	r3, [r3, #12]
 800ad2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ad30:	f021 010c 	bic.w	r1, r1, #12
 800ad34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad36:	681a      	ldr	r2, [r3, #0]
 800ad38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad3a:	430b      	orrs	r3, r1
 800ad3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ad3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	695b      	ldr	r3, [r3, #20]
 800ad44:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ad48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad4a:	6999      	ldr	r1, [r3, #24]
 800ad4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad4e:	681a      	ldr	r2, [r3, #0]
 800ad50:	ea40 0301 	orr.w	r3, r0, r1
 800ad54:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ad56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	4bc5      	ldr	r3, [pc, #788]	; (800b070 <UART_SetConfig+0x384>)
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d004      	beq.n	800ad6a <UART_SetConfig+0x7e>
 800ad60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	4bc3      	ldr	r3, [pc, #780]	; (800b074 <UART_SetConfig+0x388>)
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d103      	bne.n	800ad72 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ad6a:	f7fd fb35 	bl	80083d8 <HAL_RCC_GetPCLK2Freq>
 800ad6e:	6778      	str	r0, [r7, #116]	; 0x74
 800ad70:	e002      	b.n	800ad78 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ad72:	f7fd fb1d 	bl	80083b0 <HAL_RCC_GetPCLK1Freq>
 800ad76:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad7a:	69db      	ldr	r3, [r3, #28]
 800ad7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad80:	f040 80b6 	bne.w	800aef0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ad84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad86:	461c      	mov	r4, r3
 800ad88:	f04f 0500 	mov.w	r5, #0
 800ad8c:	4622      	mov	r2, r4
 800ad8e:	462b      	mov	r3, r5
 800ad90:	1891      	adds	r1, r2, r2
 800ad92:	6439      	str	r1, [r7, #64]	; 0x40
 800ad94:	415b      	adcs	r3, r3
 800ad96:	647b      	str	r3, [r7, #68]	; 0x44
 800ad98:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ad9c:	1912      	adds	r2, r2, r4
 800ad9e:	eb45 0303 	adc.w	r3, r5, r3
 800ada2:	f04f 0000 	mov.w	r0, #0
 800ada6:	f04f 0100 	mov.w	r1, #0
 800adaa:	00d9      	lsls	r1, r3, #3
 800adac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800adb0:	00d0      	lsls	r0, r2, #3
 800adb2:	4602      	mov	r2, r0
 800adb4:	460b      	mov	r3, r1
 800adb6:	1911      	adds	r1, r2, r4
 800adb8:	6639      	str	r1, [r7, #96]	; 0x60
 800adba:	416b      	adcs	r3, r5
 800adbc:	667b      	str	r3, [r7, #100]	; 0x64
 800adbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	461a      	mov	r2, r3
 800adc4:	f04f 0300 	mov.w	r3, #0
 800adc8:	1891      	adds	r1, r2, r2
 800adca:	63b9      	str	r1, [r7, #56]	; 0x38
 800adcc:	415b      	adcs	r3, r3
 800adce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800add0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800add4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800add8:	f7f5 ff76 	bl	8000cc8 <__aeabi_uldivmod>
 800addc:	4602      	mov	r2, r0
 800adde:	460b      	mov	r3, r1
 800ade0:	4ba5      	ldr	r3, [pc, #660]	; (800b078 <UART_SetConfig+0x38c>)
 800ade2:	fba3 2302 	umull	r2, r3, r3, r2
 800ade6:	095b      	lsrs	r3, r3, #5
 800ade8:	011e      	lsls	r6, r3, #4
 800adea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800adec:	461c      	mov	r4, r3
 800adee:	f04f 0500 	mov.w	r5, #0
 800adf2:	4622      	mov	r2, r4
 800adf4:	462b      	mov	r3, r5
 800adf6:	1891      	adds	r1, r2, r2
 800adf8:	6339      	str	r1, [r7, #48]	; 0x30
 800adfa:	415b      	adcs	r3, r3
 800adfc:	637b      	str	r3, [r7, #52]	; 0x34
 800adfe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ae02:	1912      	adds	r2, r2, r4
 800ae04:	eb45 0303 	adc.w	r3, r5, r3
 800ae08:	f04f 0000 	mov.w	r0, #0
 800ae0c:	f04f 0100 	mov.w	r1, #0
 800ae10:	00d9      	lsls	r1, r3, #3
 800ae12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ae16:	00d0      	lsls	r0, r2, #3
 800ae18:	4602      	mov	r2, r0
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	1911      	adds	r1, r2, r4
 800ae1e:	65b9      	str	r1, [r7, #88]	; 0x58
 800ae20:	416b      	adcs	r3, r5
 800ae22:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	461a      	mov	r2, r3
 800ae2a:	f04f 0300 	mov.w	r3, #0
 800ae2e:	1891      	adds	r1, r2, r2
 800ae30:	62b9      	str	r1, [r7, #40]	; 0x28
 800ae32:	415b      	adcs	r3, r3
 800ae34:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ae3a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800ae3e:	f7f5 ff43 	bl	8000cc8 <__aeabi_uldivmod>
 800ae42:	4602      	mov	r2, r0
 800ae44:	460b      	mov	r3, r1
 800ae46:	4b8c      	ldr	r3, [pc, #560]	; (800b078 <UART_SetConfig+0x38c>)
 800ae48:	fba3 1302 	umull	r1, r3, r3, r2
 800ae4c:	095b      	lsrs	r3, r3, #5
 800ae4e:	2164      	movs	r1, #100	; 0x64
 800ae50:	fb01 f303 	mul.w	r3, r1, r3
 800ae54:	1ad3      	subs	r3, r2, r3
 800ae56:	00db      	lsls	r3, r3, #3
 800ae58:	3332      	adds	r3, #50	; 0x32
 800ae5a:	4a87      	ldr	r2, [pc, #540]	; (800b078 <UART_SetConfig+0x38c>)
 800ae5c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae60:	095b      	lsrs	r3, r3, #5
 800ae62:	005b      	lsls	r3, r3, #1
 800ae64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ae68:	441e      	add	r6, r3
 800ae6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f04f 0100 	mov.w	r1, #0
 800ae72:	4602      	mov	r2, r0
 800ae74:	460b      	mov	r3, r1
 800ae76:	1894      	adds	r4, r2, r2
 800ae78:	623c      	str	r4, [r7, #32]
 800ae7a:	415b      	adcs	r3, r3
 800ae7c:	627b      	str	r3, [r7, #36]	; 0x24
 800ae7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ae82:	1812      	adds	r2, r2, r0
 800ae84:	eb41 0303 	adc.w	r3, r1, r3
 800ae88:	f04f 0400 	mov.w	r4, #0
 800ae8c:	f04f 0500 	mov.w	r5, #0
 800ae90:	00dd      	lsls	r5, r3, #3
 800ae92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ae96:	00d4      	lsls	r4, r2, #3
 800ae98:	4622      	mov	r2, r4
 800ae9a:	462b      	mov	r3, r5
 800ae9c:	1814      	adds	r4, r2, r0
 800ae9e:	653c      	str	r4, [r7, #80]	; 0x50
 800aea0:	414b      	adcs	r3, r1
 800aea2:	657b      	str	r3, [r7, #84]	; 0x54
 800aea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	461a      	mov	r2, r3
 800aeaa:	f04f 0300 	mov.w	r3, #0
 800aeae:	1891      	adds	r1, r2, r2
 800aeb0:	61b9      	str	r1, [r7, #24]
 800aeb2:	415b      	adcs	r3, r3
 800aeb4:	61fb      	str	r3, [r7, #28]
 800aeb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aeba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800aebe:	f7f5 ff03 	bl	8000cc8 <__aeabi_uldivmod>
 800aec2:	4602      	mov	r2, r0
 800aec4:	460b      	mov	r3, r1
 800aec6:	4b6c      	ldr	r3, [pc, #432]	; (800b078 <UART_SetConfig+0x38c>)
 800aec8:	fba3 1302 	umull	r1, r3, r3, r2
 800aecc:	095b      	lsrs	r3, r3, #5
 800aece:	2164      	movs	r1, #100	; 0x64
 800aed0:	fb01 f303 	mul.w	r3, r1, r3
 800aed4:	1ad3      	subs	r3, r2, r3
 800aed6:	00db      	lsls	r3, r3, #3
 800aed8:	3332      	adds	r3, #50	; 0x32
 800aeda:	4a67      	ldr	r2, [pc, #412]	; (800b078 <UART_SetConfig+0x38c>)
 800aedc:	fba2 2303 	umull	r2, r3, r2, r3
 800aee0:	095b      	lsrs	r3, r3, #5
 800aee2:	f003 0207 	and.w	r2, r3, #7
 800aee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4432      	add	r2, r6
 800aeec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800aeee:	e0b9      	b.n	800b064 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aef0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aef2:	461c      	mov	r4, r3
 800aef4:	f04f 0500 	mov.w	r5, #0
 800aef8:	4622      	mov	r2, r4
 800aefa:	462b      	mov	r3, r5
 800aefc:	1891      	adds	r1, r2, r2
 800aefe:	6139      	str	r1, [r7, #16]
 800af00:	415b      	adcs	r3, r3
 800af02:	617b      	str	r3, [r7, #20]
 800af04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800af08:	1912      	adds	r2, r2, r4
 800af0a:	eb45 0303 	adc.w	r3, r5, r3
 800af0e:	f04f 0000 	mov.w	r0, #0
 800af12:	f04f 0100 	mov.w	r1, #0
 800af16:	00d9      	lsls	r1, r3, #3
 800af18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800af1c:	00d0      	lsls	r0, r2, #3
 800af1e:	4602      	mov	r2, r0
 800af20:	460b      	mov	r3, r1
 800af22:	eb12 0804 	adds.w	r8, r2, r4
 800af26:	eb43 0905 	adc.w	r9, r3, r5
 800af2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	4618      	mov	r0, r3
 800af30:	f04f 0100 	mov.w	r1, #0
 800af34:	f04f 0200 	mov.w	r2, #0
 800af38:	f04f 0300 	mov.w	r3, #0
 800af3c:	008b      	lsls	r3, r1, #2
 800af3e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800af42:	0082      	lsls	r2, r0, #2
 800af44:	4640      	mov	r0, r8
 800af46:	4649      	mov	r1, r9
 800af48:	f7f5 febe 	bl	8000cc8 <__aeabi_uldivmod>
 800af4c:	4602      	mov	r2, r0
 800af4e:	460b      	mov	r3, r1
 800af50:	4b49      	ldr	r3, [pc, #292]	; (800b078 <UART_SetConfig+0x38c>)
 800af52:	fba3 2302 	umull	r2, r3, r3, r2
 800af56:	095b      	lsrs	r3, r3, #5
 800af58:	011e      	lsls	r6, r3, #4
 800af5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af5c:	4618      	mov	r0, r3
 800af5e:	f04f 0100 	mov.w	r1, #0
 800af62:	4602      	mov	r2, r0
 800af64:	460b      	mov	r3, r1
 800af66:	1894      	adds	r4, r2, r2
 800af68:	60bc      	str	r4, [r7, #8]
 800af6a:	415b      	adcs	r3, r3
 800af6c:	60fb      	str	r3, [r7, #12]
 800af6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800af72:	1812      	adds	r2, r2, r0
 800af74:	eb41 0303 	adc.w	r3, r1, r3
 800af78:	f04f 0400 	mov.w	r4, #0
 800af7c:	f04f 0500 	mov.w	r5, #0
 800af80:	00dd      	lsls	r5, r3, #3
 800af82:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800af86:	00d4      	lsls	r4, r2, #3
 800af88:	4622      	mov	r2, r4
 800af8a:	462b      	mov	r3, r5
 800af8c:	1814      	adds	r4, r2, r0
 800af8e:	64bc      	str	r4, [r7, #72]	; 0x48
 800af90:	414b      	adcs	r3, r1
 800af92:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	4618      	mov	r0, r3
 800af9a:	f04f 0100 	mov.w	r1, #0
 800af9e:	f04f 0200 	mov.w	r2, #0
 800afa2:	f04f 0300 	mov.w	r3, #0
 800afa6:	008b      	lsls	r3, r1, #2
 800afa8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800afac:	0082      	lsls	r2, r0, #2
 800afae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800afb2:	f7f5 fe89 	bl	8000cc8 <__aeabi_uldivmod>
 800afb6:	4602      	mov	r2, r0
 800afb8:	460b      	mov	r3, r1
 800afba:	4b2f      	ldr	r3, [pc, #188]	; (800b078 <UART_SetConfig+0x38c>)
 800afbc:	fba3 1302 	umull	r1, r3, r3, r2
 800afc0:	095b      	lsrs	r3, r3, #5
 800afc2:	2164      	movs	r1, #100	; 0x64
 800afc4:	fb01 f303 	mul.w	r3, r1, r3
 800afc8:	1ad3      	subs	r3, r2, r3
 800afca:	011b      	lsls	r3, r3, #4
 800afcc:	3332      	adds	r3, #50	; 0x32
 800afce:	4a2a      	ldr	r2, [pc, #168]	; (800b078 <UART_SetConfig+0x38c>)
 800afd0:	fba2 2303 	umull	r2, r3, r2, r3
 800afd4:	095b      	lsrs	r3, r3, #5
 800afd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800afda:	441e      	add	r6, r3
 800afdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afde:	4618      	mov	r0, r3
 800afe0:	f04f 0100 	mov.w	r1, #0
 800afe4:	4602      	mov	r2, r0
 800afe6:	460b      	mov	r3, r1
 800afe8:	1894      	adds	r4, r2, r2
 800afea:	603c      	str	r4, [r7, #0]
 800afec:	415b      	adcs	r3, r3
 800afee:	607b      	str	r3, [r7, #4]
 800aff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aff4:	1812      	adds	r2, r2, r0
 800aff6:	eb41 0303 	adc.w	r3, r1, r3
 800affa:	f04f 0400 	mov.w	r4, #0
 800affe:	f04f 0500 	mov.w	r5, #0
 800b002:	00dd      	lsls	r5, r3, #3
 800b004:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b008:	00d4      	lsls	r4, r2, #3
 800b00a:	4622      	mov	r2, r4
 800b00c:	462b      	mov	r3, r5
 800b00e:	eb12 0a00 	adds.w	sl, r2, r0
 800b012:	eb43 0b01 	adc.w	fp, r3, r1
 800b016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	4618      	mov	r0, r3
 800b01c:	f04f 0100 	mov.w	r1, #0
 800b020:	f04f 0200 	mov.w	r2, #0
 800b024:	f04f 0300 	mov.w	r3, #0
 800b028:	008b      	lsls	r3, r1, #2
 800b02a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b02e:	0082      	lsls	r2, r0, #2
 800b030:	4650      	mov	r0, sl
 800b032:	4659      	mov	r1, fp
 800b034:	f7f5 fe48 	bl	8000cc8 <__aeabi_uldivmod>
 800b038:	4602      	mov	r2, r0
 800b03a:	460b      	mov	r3, r1
 800b03c:	4b0e      	ldr	r3, [pc, #56]	; (800b078 <UART_SetConfig+0x38c>)
 800b03e:	fba3 1302 	umull	r1, r3, r3, r2
 800b042:	095b      	lsrs	r3, r3, #5
 800b044:	2164      	movs	r1, #100	; 0x64
 800b046:	fb01 f303 	mul.w	r3, r1, r3
 800b04a:	1ad3      	subs	r3, r2, r3
 800b04c:	011b      	lsls	r3, r3, #4
 800b04e:	3332      	adds	r3, #50	; 0x32
 800b050:	4a09      	ldr	r2, [pc, #36]	; (800b078 <UART_SetConfig+0x38c>)
 800b052:	fba2 2303 	umull	r2, r3, r2, r3
 800b056:	095b      	lsrs	r3, r3, #5
 800b058:	f003 020f 	and.w	r2, r3, #15
 800b05c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4432      	add	r2, r6
 800b062:	609a      	str	r2, [r3, #8]
}
 800b064:	bf00      	nop
 800b066:	377c      	adds	r7, #124	; 0x7c
 800b068:	46bd      	mov	sp, r7
 800b06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b06e:	bf00      	nop
 800b070:	40011000 	.word	0x40011000
 800b074:	40011400 	.word	0x40011400
 800b078:	51eb851f 	.word	0x51eb851f

0800b07c <round>:
 800b07c:	ec51 0b10 	vmov	r0, r1, d0
 800b080:	b570      	push	{r4, r5, r6, lr}
 800b082:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800b086:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800b08a:	2c13      	cmp	r4, #19
 800b08c:	ee10 2a10 	vmov	r2, s0
 800b090:	460b      	mov	r3, r1
 800b092:	dc19      	bgt.n	800b0c8 <round+0x4c>
 800b094:	2c00      	cmp	r4, #0
 800b096:	da09      	bge.n	800b0ac <round+0x30>
 800b098:	3401      	adds	r4, #1
 800b09a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800b09e:	d103      	bne.n	800b0a8 <round+0x2c>
 800b0a0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b0a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b0a8:	2100      	movs	r1, #0
 800b0aa:	e028      	b.n	800b0fe <round+0x82>
 800b0ac:	4d15      	ldr	r5, [pc, #84]	; (800b104 <round+0x88>)
 800b0ae:	4125      	asrs	r5, r4
 800b0b0:	ea01 0605 	and.w	r6, r1, r5
 800b0b4:	4332      	orrs	r2, r6
 800b0b6:	d00e      	beq.n	800b0d6 <round+0x5a>
 800b0b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b0bc:	fa42 f404 	asr.w	r4, r2, r4
 800b0c0:	4423      	add	r3, r4
 800b0c2:	ea23 0305 	bic.w	r3, r3, r5
 800b0c6:	e7ef      	b.n	800b0a8 <round+0x2c>
 800b0c8:	2c33      	cmp	r4, #51	; 0x33
 800b0ca:	dd07      	ble.n	800b0dc <round+0x60>
 800b0cc:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800b0d0:	d101      	bne.n	800b0d6 <round+0x5a>
 800b0d2:	f7f5 f8fb 	bl	80002cc <__adddf3>
 800b0d6:	ec41 0b10 	vmov	d0, r0, r1
 800b0da:	bd70      	pop	{r4, r5, r6, pc}
 800b0dc:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800b0e0:	f04f 35ff 	mov.w	r5, #4294967295
 800b0e4:	40f5      	lsrs	r5, r6
 800b0e6:	4228      	tst	r0, r5
 800b0e8:	d0f5      	beq.n	800b0d6 <round+0x5a>
 800b0ea:	2101      	movs	r1, #1
 800b0ec:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800b0f0:	fa01 f404 	lsl.w	r4, r1, r4
 800b0f4:	1912      	adds	r2, r2, r4
 800b0f6:	bf28      	it	cs
 800b0f8:	185b      	addcs	r3, r3, r1
 800b0fa:	ea22 0105 	bic.w	r1, r2, r5
 800b0fe:	4608      	mov	r0, r1
 800b100:	4619      	mov	r1, r3
 800b102:	e7e8      	b.n	800b0d6 <round+0x5a>
 800b104:	000fffff 	.word	0x000fffff

0800b108 <fmaxf>:
 800b108:	b508      	push	{r3, lr}
 800b10a:	ed2d 8b02 	vpush	{d8}
 800b10e:	eeb0 8a40 	vmov.f32	s16, s0
 800b112:	eef0 8a60 	vmov.f32	s17, s1
 800b116:	f000 f82d 	bl	800b174 <__fpclassifyf>
 800b11a:	b148      	cbz	r0, 800b130 <fmaxf+0x28>
 800b11c:	eeb0 0a68 	vmov.f32	s0, s17
 800b120:	f000 f828 	bl	800b174 <__fpclassifyf>
 800b124:	b130      	cbz	r0, 800b134 <fmaxf+0x2c>
 800b126:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b12a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b12e:	dc01      	bgt.n	800b134 <fmaxf+0x2c>
 800b130:	eeb0 8a68 	vmov.f32	s16, s17
 800b134:	eeb0 0a48 	vmov.f32	s0, s16
 800b138:	ecbd 8b02 	vpop	{d8}
 800b13c:	bd08      	pop	{r3, pc}

0800b13e <fminf>:
 800b13e:	b508      	push	{r3, lr}
 800b140:	ed2d 8b02 	vpush	{d8}
 800b144:	eeb0 8a40 	vmov.f32	s16, s0
 800b148:	eef0 8a60 	vmov.f32	s17, s1
 800b14c:	f000 f812 	bl	800b174 <__fpclassifyf>
 800b150:	b148      	cbz	r0, 800b166 <fminf+0x28>
 800b152:	eeb0 0a68 	vmov.f32	s0, s17
 800b156:	f000 f80d 	bl	800b174 <__fpclassifyf>
 800b15a:	b130      	cbz	r0, 800b16a <fminf+0x2c>
 800b15c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b164:	d401      	bmi.n	800b16a <fminf+0x2c>
 800b166:	eeb0 8a68 	vmov.f32	s16, s17
 800b16a:	eeb0 0a48 	vmov.f32	s0, s16
 800b16e:	ecbd 8b02 	vpop	{d8}
 800b172:	bd08      	pop	{r3, pc}

0800b174 <__fpclassifyf>:
 800b174:	ee10 3a10 	vmov	r3, s0
 800b178:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800b17c:	d00d      	beq.n	800b19a <__fpclassifyf+0x26>
 800b17e:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800b182:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800b186:	d30a      	bcc.n	800b19e <__fpclassifyf+0x2a>
 800b188:	4b07      	ldr	r3, [pc, #28]	; (800b1a8 <__fpclassifyf+0x34>)
 800b18a:	1e42      	subs	r2, r0, #1
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d908      	bls.n	800b1a2 <__fpclassifyf+0x2e>
 800b190:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800b194:	4258      	negs	r0, r3
 800b196:	4158      	adcs	r0, r3
 800b198:	4770      	bx	lr
 800b19a:	2002      	movs	r0, #2
 800b19c:	4770      	bx	lr
 800b19e:	2004      	movs	r0, #4
 800b1a0:	4770      	bx	lr
 800b1a2:	2003      	movs	r0, #3
 800b1a4:	4770      	bx	lr
 800b1a6:	bf00      	nop
 800b1a8:	007ffffe 	.word	0x007ffffe
 800b1ac:	00000000 	.word	0x00000000

0800b1b0 <exp>:
 800b1b0:	b538      	push	{r3, r4, r5, lr}
 800b1b2:	ed2d 8b02 	vpush	{d8}
 800b1b6:	ec55 4b10 	vmov	r4, r5, d0
 800b1ba:	f000 f899 	bl	800b2f0 <__ieee754_exp>
 800b1be:	4b22      	ldr	r3, [pc, #136]	; (800b248 <exp+0x98>)
 800b1c0:	eeb0 8a40 	vmov.f32	s16, s0
 800b1c4:	eef0 8a60 	vmov.f32	s17, s1
 800b1c8:	f993 3000 	ldrsb.w	r3, [r3]
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	d012      	beq.n	800b1f6 <exp+0x46>
 800b1d0:	ec45 4b10 	vmov	d0, r4, r5
 800b1d4:	f000 fa8b 	bl	800b6ee <finite>
 800b1d8:	b168      	cbz	r0, 800b1f6 <exp+0x46>
 800b1da:	a313      	add	r3, pc, #76	; (adr r3, 800b228 <exp+0x78>)
 800b1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	4629      	mov	r1, r5
 800b1e4:	f7f5 fcb8 	bl	8000b58 <__aeabi_dcmpgt>
 800b1e8:	b160      	cbz	r0, 800b204 <exp+0x54>
 800b1ea:	f000 fa93 	bl	800b714 <__errno>
 800b1ee:	ed9f 8b10 	vldr	d8, [pc, #64]	; 800b230 <exp+0x80>
 800b1f2:	2322      	movs	r3, #34	; 0x22
 800b1f4:	6003      	str	r3, [r0, #0]
 800b1f6:	eeb0 0a48 	vmov.f32	s0, s16
 800b1fa:	eef0 0a68 	vmov.f32	s1, s17
 800b1fe:	ecbd 8b02 	vpop	{d8}
 800b202:	bd38      	pop	{r3, r4, r5, pc}
 800b204:	a30c      	add	r3, pc, #48	; (adr r3, 800b238 <exp+0x88>)
 800b206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20a:	4620      	mov	r0, r4
 800b20c:	4629      	mov	r1, r5
 800b20e:	f7f5 fc85 	bl	8000b1c <__aeabi_dcmplt>
 800b212:	2800      	cmp	r0, #0
 800b214:	d0ef      	beq.n	800b1f6 <exp+0x46>
 800b216:	f000 fa7d 	bl	800b714 <__errno>
 800b21a:	2322      	movs	r3, #34	; 0x22
 800b21c:	ed9f 8b08 	vldr	d8, [pc, #32]	; 800b240 <exp+0x90>
 800b220:	6003      	str	r3, [r0, #0]
 800b222:	e7e8      	b.n	800b1f6 <exp+0x46>
 800b224:	f3af 8000 	nop.w
 800b228:	fefa39ef 	.word	0xfefa39ef
 800b22c:	40862e42 	.word	0x40862e42
 800b230:	00000000 	.word	0x00000000
 800b234:	7ff00000 	.word	0x7ff00000
 800b238:	d52d3051 	.word	0xd52d3051
 800b23c:	c0874910 	.word	0xc0874910
	...
 800b248:	20000049 	.word	0x20000049

0800b24c <fmodf>:
 800b24c:	b508      	push	{r3, lr}
 800b24e:	ed2d 8b02 	vpush	{d8}
 800b252:	eef0 8a40 	vmov.f32	s17, s0
 800b256:	eeb0 8a60 	vmov.f32	s16, s1
 800b25a:	f000 f9c3 	bl	800b5e4 <__ieee754_fmodf>
 800b25e:	4b0f      	ldr	r3, [pc, #60]	; (800b29c <fmodf+0x50>)
 800b260:	f993 3000 	ldrsb.w	r3, [r3]
 800b264:	3301      	adds	r3, #1
 800b266:	d016      	beq.n	800b296 <fmodf+0x4a>
 800b268:	eeb4 8a48 	vcmp.f32	s16, s16
 800b26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b270:	d611      	bvs.n	800b296 <fmodf+0x4a>
 800b272:	eef4 8a68 	vcmp.f32	s17, s17
 800b276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b27a:	d60c      	bvs.n	800b296 <fmodf+0x4a>
 800b27c:	eddf 8a08 	vldr	s17, [pc, #32]	; 800b2a0 <fmodf+0x54>
 800b280:	eeb4 8a68 	vcmp.f32	s16, s17
 800b284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b288:	d105      	bne.n	800b296 <fmodf+0x4a>
 800b28a:	f000 fa43 	bl	800b714 <__errno>
 800b28e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b292:	2321      	movs	r3, #33	; 0x21
 800b294:	6003      	str	r3, [r0, #0]
 800b296:	ecbd 8b02 	vpop	{d8}
 800b29a:	bd08      	pop	{r3, pc}
 800b29c:	20000049 	.word	0x20000049
 800b2a0:	00000000 	.word	0x00000000

0800b2a4 <sqrtf>:
 800b2a4:	b508      	push	{r3, lr}
 800b2a6:	ed2d 8b02 	vpush	{d8}
 800b2aa:	eeb0 8a40 	vmov.f32	s16, s0
 800b2ae:	f000 fa1b 	bl	800b6e8 <__ieee754_sqrtf>
 800b2b2:	4b0d      	ldr	r3, [pc, #52]	; (800b2e8 <sqrtf+0x44>)
 800b2b4:	f993 3000 	ldrsb.w	r3, [r3]
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	d011      	beq.n	800b2e0 <sqrtf+0x3c>
 800b2bc:	eeb4 8a48 	vcmp.f32	s16, s16
 800b2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2c4:	d60c      	bvs.n	800b2e0 <sqrtf+0x3c>
 800b2c6:	eddf 8a09 	vldr	s17, [pc, #36]	; 800b2ec <sqrtf+0x48>
 800b2ca:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2d2:	d505      	bpl.n	800b2e0 <sqrtf+0x3c>
 800b2d4:	f000 fa1e 	bl	800b714 <__errno>
 800b2d8:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b2dc:	2321      	movs	r3, #33	; 0x21
 800b2de:	6003      	str	r3, [r0, #0]
 800b2e0:	ecbd 8b02 	vpop	{d8}
 800b2e4:	bd08      	pop	{r3, pc}
 800b2e6:	bf00      	nop
 800b2e8:	20000049 	.word	0x20000049
 800b2ec:	00000000 	.word	0x00000000

0800b2f0 <__ieee754_exp>:
 800b2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2f4:	ec55 4b10 	vmov	r4, r5, d0
 800b2f8:	49b1      	ldr	r1, [pc, #708]	; (800b5c0 <__ieee754_exp+0x2d0>)
 800b2fa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b2fe:	428b      	cmp	r3, r1
 800b300:	ed2d 8b04 	vpush	{d8-d9}
 800b304:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800b308:	d937      	bls.n	800b37a <__ieee754_exp+0x8a>
 800b30a:	49ae      	ldr	r1, [pc, #696]	; (800b5c4 <__ieee754_exp+0x2d4>)
 800b30c:	428b      	cmp	r3, r1
 800b30e:	d916      	bls.n	800b33e <__ieee754_exp+0x4e>
 800b310:	ee10 3a10 	vmov	r3, s0
 800b314:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800b318:	4313      	orrs	r3, r2
 800b31a:	d009      	beq.n	800b330 <__ieee754_exp+0x40>
 800b31c:	ee10 2a10 	vmov	r2, s0
 800b320:	462b      	mov	r3, r5
 800b322:	4620      	mov	r0, r4
 800b324:	4629      	mov	r1, r5
 800b326:	f7f4 ffd1 	bl	80002cc <__adddf3>
 800b32a:	4604      	mov	r4, r0
 800b32c:	460d      	mov	r5, r1
 800b32e:	e000      	b.n	800b332 <__ieee754_exp+0x42>
 800b330:	bb06      	cbnz	r6, 800b374 <__ieee754_exp+0x84>
 800b332:	ecbd 8b04 	vpop	{d8-d9}
 800b336:	ec45 4b10 	vmov	d0, r4, r5
 800b33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b33e:	a38a      	add	r3, pc, #552	; (adr r3, 800b568 <__ieee754_exp+0x278>)
 800b340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b344:	ee10 0a10 	vmov	r0, s0
 800b348:	4629      	mov	r1, r5
 800b34a:	f7f5 fc05 	bl	8000b58 <__aeabi_dcmpgt>
 800b34e:	b138      	cbz	r0, 800b360 <__ieee754_exp+0x70>
 800b350:	a387      	add	r3, pc, #540	; (adr r3, 800b570 <__ieee754_exp+0x280>)
 800b352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b356:	4610      	mov	r0, r2
 800b358:	4619      	mov	r1, r3
 800b35a:	f7f5 f96d 	bl	8000638 <__aeabi_dmul>
 800b35e:	e7e4      	b.n	800b32a <__ieee754_exp+0x3a>
 800b360:	a385      	add	r3, pc, #532	; (adr r3, 800b578 <__ieee754_exp+0x288>)
 800b362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b366:	4620      	mov	r0, r4
 800b368:	4629      	mov	r1, r5
 800b36a:	f7f5 fbd7 	bl	8000b1c <__aeabi_dcmplt>
 800b36e:	2800      	cmp	r0, #0
 800b370:	f000 8087 	beq.w	800b482 <__ieee754_exp+0x192>
 800b374:	2400      	movs	r4, #0
 800b376:	2500      	movs	r5, #0
 800b378:	e7db      	b.n	800b332 <__ieee754_exp+0x42>
 800b37a:	4a93      	ldr	r2, [pc, #588]	; (800b5c8 <__ieee754_exp+0x2d8>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	f240 80ac 	bls.w	800b4da <__ieee754_exp+0x1ea>
 800b382:	4a92      	ldr	r2, [pc, #584]	; (800b5cc <__ieee754_exp+0x2dc>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d87c      	bhi.n	800b482 <__ieee754_exp+0x192>
 800b388:	4b91      	ldr	r3, [pc, #580]	; (800b5d0 <__ieee754_exp+0x2e0>)
 800b38a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b392:	ee10 0a10 	vmov	r0, s0
 800b396:	4629      	mov	r1, r5
 800b398:	f7f4 ff96 	bl	80002c8 <__aeabi_dsub>
 800b39c:	4b8d      	ldr	r3, [pc, #564]	; (800b5d4 <__ieee754_exp+0x2e4>)
 800b39e:	00f7      	lsls	r7, r6, #3
 800b3a0:	443b      	add	r3, r7
 800b3a2:	ed93 7b00 	vldr	d7, [r3]
 800b3a6:	f1c6 0a01 	rsb	sl, r6, #1
 800b3aa:	4680      	mov	r8, r0
 800b3ac:	4689      	mov	r9, r1
 800b3ae:	ebaa 0a06 	sub.w	sl, sl, r6
 800b3b2:	eeb0 8a47 	vmov.f32	s16, s14
 800b3b6:	eef0 8a67 	vmov.f32	s17, s15
 800b3ba:	ec53 2b18 	vmov	r2, r3, d8
 800b3be:	4640      	mov	r0, r8
 800b3c0:	4649      	mov	r1, r9
 800b3c2:	f7f4 ff81 	bl	80002c8 <__aeabi_dsub>
 800b3c6:	4604      	mov	r4, r0
 800b3c8:	460d      	mov	r5, r1
 800b3ca:	4622      	mov	r2, r4
 800b3cc:	462b      	mov	r3, r5
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	4629      	mov	r1, r5
 800b3d2:	f7f5 f931 	bl	8000638 <__aeabi_dmul>
 800b3d6:	a36a      	add	r3, pc, #424	; (adr r3, 800b580 <__ieee754_exp+0x290>)
 800b3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3dc:	4606      	mov	r6, r0
 800b3de:	460f      	mov	r7, r1
 800b3e0:	f7f5 f92a 	bl	8000638 <__aeabi_dmul>
 800b3e4:	a368      	add	r3, pc, #416	; (adr r3, 800b588 <__ieee754_exp+0x298>)
 800b3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ea:	f7f4 ff6d 	bl	80002c8 <__aeabi_dsub>
 800b3ee:	4632      	mov	r2, r6
 800b3f0:	463b      	mov	r3, r7
 800b3f2:	f7f5 f921 	bl	8000638 <__aeabi_dmul>
 800b3f6:	a366      	add	r3, pc, #408	; (adr r3, 800b590 <__ieee754_exp+0x2a0>)
 800b3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fc:	f7f4 ff66 	bl	80002cc <__adddf3>
 800b400:	4632      	mov	r2, r6
 800b402:	463b      	mov	r3, r7
 800b404:	f7f5 f918 	bl	8000638 <__aeabi_dmul>
 800b408:	a363      	add	r3, pc, #396	; (adr r3, 800b598 <__ieee754_exp+0x2a8>)
 800b40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40e:	f7f4 ff5b 	bl	80002c8 <__aeabi_dsub>
 800b412:	4632      	mov	r2, r6
 800b414:	463b      	mov	r3, r7
 800b416:	f7f5 f90f 	bl	8000638 <__aeabi_dmul>
 800b41a:	a361      	add	r3, pc, #388	; (adr r3, 800b5a0 <__ieee754_exp+0x2b0>)
 800b41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b420:	f7f4 ff54 	bl	80002cc <__adddf3>
 800b424:	4632      	mov	r2, r6
 800b426:	463b      	mov	r3, r7
 800b428:	f7f5 f906 	bl	8000638 <__aeabi_dmul>
 800b42c:	4602      	mov	r2, r0
 800b42e:	460b      	mov	r3, r1
 800b430:	4620      	mov	r0, r4
 800b432:	4629      	mov	r1, r5
 800b434:	f7f4 ff48 	bl	80002c8 <__aeabi_dsub>
 800b438:	4602      	mov	r2, r0
 800b43a:	460b      	mov	r3, r1
 800b43c:	4606      	mov	r6, r0
 800b43e:	460f      	mov	r7, r1
 800b440:	4620      	mov	r0, r4
 800b442:	4629      	mov	r1, r5
 800b444:	f7f5 f8f8 	bl	8000638 <__aeabi_dmul>
 800b448:	ec41 0b19 	vmov	d9, r0, r1
 800b44c:	f1ba 0f00 	cmp.w	sl, #0
 800b450:	d15d      	bne.n	800b50e <__ieee754_exp+0x21e>
 800b452:	2200      	movs	r2, #0
 800b454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b458:	4630      	mov	r0, r6
 800b45a:	4639      	mov	r1, r7
 800b45c:	f7f4 ff34 	bl	80002c8 <__aeabi_dsub>
 800b460:	4602      	mov	r2, r0
 800b462:	460b      	mov	r3, r1
 800b464:	ec51 0b19 	vmov	r0, r1, d9
 800b468:	f7f5 fa10 	bl	800088c <__aeabi_ddiv>
 800b46c:	4622      	mov	r2, r4
 800b46e:	462b      	mov	r3, r5
 800b470:	f7f4 ff2a 	bl	80002c8 <__aeabi_dsub>
 800b474:	4602      	mov	r2, r0
 800b476:	460b      	mov	r3, r1
 800b478:	2000      	movs	r0, #0
 800b47a:	4957      	ldr	r1, [pc, #348]	; (800b5d8 <__ieee754_exp+0x2e8>)
 800b47c:	f7f4 ff24 	bl	80002c8 <__aeabi_dsub>
 800b480:	e753      	b.n	800b32a <__ieee754_exp+0x3a>
 800b482:	4856      	ldr	r0, [pc, #344]	; (800b5dc <__ieee754_exp+0x2ec>)
 800b484:	a348      	add	r3, pc, #288	; (adr r3, 800b5a8 <__ieee754_exp+0x2b8>)
 800b486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48a:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800b48e:	4629      	mov	r1, r5
 800b490:	4620      	mov	r0, r4
 800b492:	f7f5 f8d1 	bl	8000638 <__aeabi_dmul>
 800b496:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b49a:	f7f4 ff17 	bl	80002cc <__adddf3>
 800b49e:	f7f5 fb7b 	bl	8000b98 <__aeabi_d2iz>
 800b4a2:	4682      	mov	sl, r0
 800b4a4:	f7f5 f85e 	bl	8000564 <__aeabi_i2d>
 800b4a8:	a341      	add	r3, pc, #260	; (adr r3, 800b5b0 <__ieee754_exp+0x2c0>)
 800b4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ae:	4606      	mov	r6, r0
 800b4b0:	460f      	mov	r7, r1
 800b4b2:	f7f5 f8c1 	bl	8000638 <__aeabi_dmul>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	460b      	mov	r3, r1
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	4629      	mov	r1, r5
 800b4be:	f7f4 ff03 	bl	80002c8 <__aeabi_dsub>
 800b4c2:	a33d      	add	r3, pc, #244	; (adr r3, 800b5b8 <__ieee754_exp+0x2c8>)
 800b4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c8:	4680      	mov	r8, r0
 800b4ca:	4689      	mov	r9, r1
 800b4cc:	4630      	mov	r0, r6
 800b4ce:	4639      	mov	r1, r7
 800b4d0:	f7f5 f8b2 	bl	8000638 <__aeabi_dmul>
 800b4d4:	ec41 0b18 	vmov	d8, r0, r1
 800b4d8:	e76f      	b.n	800b3ba <__ieee754_exp+0xca>
 800b4da:	4a41      	ldr	r2, [pc, #260]	; (800b5e0 <__ieee754_exp+0x2f0>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d811      	bhi.n	800b504 <__ieee754_exp+0x214>
 800b4e0:	a323      	add	r3, pc, #140	; (adr r3, 800b570 <__ieee754_exp+0x280>)
 800b4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e6:	ee10 0a10 	vmov	r0, s0
 800b4ea:	4629      	mov	r1, r5
 800b4ec:	f7f4 feee 	bl	80002cc <__adddf3>
 800b4f0:	4b39      	ldr	r3, [pc, #228]	; (800b5d8 <__ieee754_exp+0x2e8>)
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	f7f5 fb30 	bl	8000b58 <__aeabi_dcmpgt>
 800b4f8:	b138      	cbz	r0, 800b50a <__ieee754_exp+0x21a>
 800b4fa:	4b37      	ldr	r3, [pc, #220]	; (800b5d8 <__ieee754_exp+0x2e8>)
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	4620      	mov	r0, r4
 800b500:	4629      	mov	r1, r5
 800b502:	e710      	b.n	800b326 <__ieee754_exp+0x36>
 800b504:	f04f 0a00 	mov.w	sl, #0
 800b508:	e75f      	b.n	800b3ca <__ieee754_exp+0xda>
 800b50a:	4682      	mov	sl, r0
 800b50c:	e75d      	b.n	800b3ca <__ieee754_exp+0xda>
 800b50e:	4632      	mov	r2, r6
 800b510:	463b      	mov	r3, r7
 800b512:	2000      	movs	r0, #0
 800b514:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b518:	f7f4 fed6 	bl	80002c8 <__aeabi_dsub>
 800b51c:	4602      	mov	r2, r0
 800b51e:	460b      	mov	r3, r1
 800b520:	ec51 0b19 	vmov	r0, r1, d9
 800b524:	f7f5 f9b2 	bl	800088c <__aeabi_ddiv>
 800b528:	4602      	mov	r2, r0
 800b52a:	460b      	mov	r3, r1
 800b52c:	ec51 0b18 	vmov	r0, r1, d8
 800b530:	f7f4 feca 	bl	80002c8 <__aeabi_dsub>
 800b534:	4642      	mov	r2, r8
 800b536:	464b      	mov	r3, r9
 800b538:	f7f4 fec6 	bl	80002c8 <__aeabi_dsub>
 800b53c:	4602      	mov	r2, r0
 800b53e:	460b      	mov	r3, r1
 800b540:	2000      	movs	r0, #0
 800b542:	4925      	ldr	r1, [pc, #148]	; (800b5d8 <__ieee754_exp+0x2e8>)
 800b544:	f7f4 fec0 	bl	80002c8 <__aeabi_dsub>
 800b548:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800b54c:	4592      	cmp	sl, r2
 800b54e:	db02      	blt.n	800b556 <__ieee754_exp+0x266>
 800b550:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800b554:	e6e9      	b.n	800b32a <__ieee754_exp+0x3a>
 800b556:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800b55a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800b55e:	2200      	movs	r2, #0
 800b560:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800b564:	e6f9      	b.n	800b35a <__ieee754_exp+0x6a>
 800b566:	bf00      	nop
 800b568:	fefa39ef 	.word	0xfefa39ef
 800b56c:	40862e42 	.word	0x40862e42
 800b570:	8800759c 	.word	0x8800759c
 800b574:	7e37e43c 	.word	0x7e37e43c
 800b578:	d52d3051 	.word	0xd52d3051
 800b57c:	c0874910 	.word	0xc0874910
 800b580:	72bea4d0 	.word	0x72bea4d0
 800b584:	3e663769 	.word	0x3e663769
 800b588:	c5d26bf1 	.word	0xc5d26bf1
 800b58c:	3ebbbd41 	.word	0x3ebbbd41
 800b590:	af25de2c 	.word	0xaf25de2c
 800b594:	3f11566a 	.word	0x3f11566a
 800b598:	16bebd93 	.word	0x16bebd93
 800b59c:	3f66c16c 	.word	0x3f66c16c
 800b5a0:	5555553e 	.word	0x5555553e
 800b5a4:	3fc55555 	.word	0x3fc55555
 800b5a8:	652b82fe 	.word	0x652b82fe
 800b5ac:	3ff71547 	.word	0x3ff71547
 800b5b0:	fee00000 	.word	0xfee00000
 800b5b4:	3fe62e42 	.word	0x3fe62e42
 800b5b8:	35793c76 	.word	0x35793c76
 800b5bc:	3dea39ef 	.word	0x3dea39ef
 800b5c0:	40862e41 	.word	0x40862e41
 800b5c4:	7fefffff 	.word	0x7fefffff
 800b5c8:	3fd62e42 	.word	0x3fd62e42
 800b5cc:	3ff0a2b1 	.word	0x3ff0a2b1
 800b5d0:	08010b20 	.word	0x08010b20
 800b5d4:	08010b30 	.word	0x08010b30
 800b5d8:	3ff00000 	.word	0x3ff00000
 800b5dc:	08010b10 	.word	0x08010b10
 800b5e0:	3e2fffff 	.word	0x3e2fffff

0800b5e4 <__ieee754_fmodf>:
 800b5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5e6:	ee10 6a90 	vmov	r6, s1
 800b5ea:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 800b5ee:	d009      	beq.n	800b604 <__ieee754_fmodf+0x20>
 800b5f0:	ee10 2a10 	vmov	r2, s0
 800b5f4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800b5f8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b5fc:	da02      	bge.n	800b604 <__ieee754_fmodf+0x20>
 800b5fe:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b602:	dd04      	ble.n	800b60e <__ieee754_fmodf+0x2a>
 800b604:	ee60 0a20 	vmul.f32	s1, s0, s1
 800b608:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800b60c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b60e:	42ab      	cmp	r3, r5
 800b610:	dbfc      	blt.n	800b60c <__ieee754_fmodf+0x28>
 800b612:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 800b616:	d106      	bne.n	800b626 <__ieee754_fmodf+0x42>
 800b618:	4a32      	ldr	r2, [pc, #200]	; (800b6e4 <__ieee754_fmodf+0x100>)
 800b61a:	0fe3      	lsrs	r3, r4, #31
 800b61c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b620:	ed93 0a00 	vldr	s0, [r3]
 800b624:	e7f2      	b.n	800b60c <__ieee754_fmodf+0x28>
 800b626:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800b62a:	d13f      	bne.n	800b6ac <__ieee754_fmodf+0xc8>
 800b62c:	0219      	lsls	r1, r3, #8
 800b62e:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800b632:	2900      	cmp	r1, #0
 800b634:	dc37      	bgt.n	800b6a6 <__ieee754_fmodf+0xc2>
 800b636:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800b63a:	d13d      	bne.n	800b6b8 <__ieee754_fmodf+0xd4>
 800b63c:	022f      	lsls	r7, r5, #8
 800b63e:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800b642:	2f00      	cmp	r7, #0
 800b644:	da35      	bge.n	800b6b2 <__ieee754_fmodf+0xce>
 800b646:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800b64a:	bfbb      	ittet	lt
 800b64c:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800b650:	1a12      	sublt	r2, r2, r0
 800b652:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800b656:	4093      	lsllt	r3, r2
 800b658:	bfa8      	it	ge
 800b65a:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800b65e:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800b662:	bfb5      	itete	lt
 800b664:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800b668:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 800b66c:	1a52      	sublt	r2, r2, r1
 800b66e:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 800b672:	bfb8      	it	lt
 800b674:	4095      	lsllt	r5, r2
 800b676:	1a40      	subs	r0, r0, r1
 800b678:	1b5a      	subs	r2, r3, r5
 800b67a:	bb00      	cbnz	r0, 800b6be <__ieee754_fmodf+0xda>
 800b67c:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800b680:	bf38      	it	cc
 800b682:	4613      	movcc	r3, r2
 800b684:	2b00      	cmp	r3, #0
 800b686:	d0c7      	beq.n	800b618 <__ieee754_fmodf+0x34>
 800b688:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b68c:	db1f      	blt.n	800b6ce <__ieee754_fmodf+0xea>
 800b68e:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800b692:	db1f      	blt.n	800b6d4 <__ieee754_fmodf+0xf0>
 800b694:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800b698:	317f      	adds	r1, #127	; 0x7f
 800b69a:	4323      	orrs	r3, r4
 800b69c:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800b6a0:	ee00 3a10 	vmov	s0, r3
 800b6a4:	e7b2      	b.n	800b60c <__ieee754_fmodf+0x28>
 800b6a6:	3801      	subs	r0, #1
 800b6a8:	0049      	lsls	r1, r1, #1
 800b6aa:	e7c2      	b.n	800b632 <__ieee754_fmodf+0x4e>
 800b6ac:	15d8      	asrs	r0, r3, #23
 800b6ae:	387f      	subs	r0, #127	; 0x7f
 800b6b0:	e7c1      	b.n	800b636 <__ieee754_fmodf+0x52>
 800b6b2:	3901      	subs	r1, #1
 800b6b4:	007f      	lsls	r7, r7, #1
 800b6b6:	e7c4      	b.n	800b642 <__ieee754_fmodf+0x5e>
 800b6b8:	15e9      	asrs	r1, r5, #23
 800b6ba:	397f      	subs	r1, #127	; 0x7f
 800b6bc:	e7c3      	b.n	800b646 <__ieee754_fmodf+0x62>
 800b6be:	2a00      	cmp	r2, #0
 800b6c0:	da02      	bge.n	800b6c8 <__ieee754_fmodf+0xe4>
 800b6c2:	005b      	lsls	r3, r3, #1
 800b6c4:	3801      	subs	r0, #1
 800b6c6:	e7d7      	b.n	800b678 <__ieee754_fmodf+0x94>
 800b6c8:	d0a6      	beq.n	800b618 <__ieee754_fmodf+0x34>
 800b6ca:	0053      	lsls	r3, r2, #1
 800b6cc:	e7fa      	b.n	800b6c4 <__ieee754_fmodf+0xe0>
 800b6ce:	005b      	lsls	r3, r3, #1
 800b6d0:	3901      	subs	r1, #1
 800b6d2:	e7d9      	b.n	800b688 <__ieee754_fmodf+0xa4>
 800b6d4:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800b6d8:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800b6dc:	3182      	adds	r1, #130	; 0x82
 800b6de:	410b      	asrs	r3, r1
 800b6e0:	4323      	orrs	r3, r4
 800b6e2:	e7dd      	b.n	800b6a0 <__ieee754_fmodf+0xbc>
 800b6e4:	08010b40 	.word	0x08010b40

0800b6e8 <__ieee754_sqrtf>:
 800b6e8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b6ec:	4770      	bx	lr

0800b6ee <finite>:
 800b6ee:	b082      	sub	sp, #8
 800b6f0:	ed8d 0b00 	vstr	d0, [sp]
 800b6f4:	9801      	ldr	r0, [sp, #4]
 800b6f6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b6fa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b6fe:	0fc0      	lsrs	r0, r0, #31
 800b700:	b002      	add	sp, #8
 800b702:	4770      	bx	lr

0800b704 <atof>:
 800b704:	2100      	movs	r1, #0
 800b706:	f001 bb65 	b.w	800cdd4 <strtod>

0800b70a <atoi>:
 800b70a:	220a      	movs	r2, #10
 800b70c:	2100      	movs	r1, #0
 800b70e:	f001 bbf1 	b.w	800cef4 <strtol>
	...

0800b714 <__errno>:
 800b714:	4b01      	ldr	r3, [pc, #4]	; (800b71c <__errno+0x8>)
 800b716:	6818      	ldr	r0, [r3, #0]
 800b718:	4770      	bx	lr
 800b71a:	bf00      	nop
 800b71c:	2000004c 	.word	0x2000004c

0800b720 <__libc_init_array>:
 800b720:	b570      	push	{r4, r5, r6, lr}
 800b722:	4d0d      	ldr	r5, [pc, #52]	; (800b758 <__libc_init_array+0x38>)
 800b724:	4c0d      	ldr	r4, [pc, #52]	; (800b75c <__libc_init_array+0x3c>)
 800b726:	1b64      	subs	r4, r4, r5
 800b728:	10a4      	asrs	r4, r4, #2
 800b72a:	2600      	movs	r6, #0
 800b72c:	42a6      	cmp	r6, r4
 800b72e:	d109      	bne.n	800b744 <__libc_init_array+0x24>
 800b730:	4d0b      	ldr	r5, [pc, #44]	; (800b760 <__libc_init_array+0x40>)
 800b732:	4c0c      	ldr	r4, [pc, #48]	; (800b764 <__libc_init_array+0x44>)
 800b734:	f004 f906 	bl	800f944 <_init>
 800b738:	1b64      	subs	r4, r4, r5
 800b73a:	10a4      	asrs	r4, r4, #2
 800b73c:	2600      	movs	r6, #0
 800b73e:	42a6      	cmp	r6, r4
 800b740:	d105      	bne.n	800b74e <__libc_init_array+0x2e>
 800b742:	bd70      	pop	{r4, r5, r6, pc}
 800b744:	f855 3b04 	ldr.w	r3, [r5], #4
 800b748:	4798      	blx	r3
 800b74a:	3601      	adds	r6, #1
 800b74c:	e7ee      	b.n	800b72c <__libc_init_array+0xc>
 800b74e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b752:	4798      	blx	r3
 800b754:	3601      	adds	r6, #1
 800b756:	e7f2      	b.n	800b73e <__libc_init_array+0x1e>
 800b758:	08010ffc 	.word	0x08010ffc
 800b75c:	08010ffc 	.word	0x08010ffc
 800b760:	08010ffc 	.word	0x08010ffc
 800b764:	08011000 	.word	0x08011000

0800b768 <memcpy>:
 800b768:	440a      	add	r2, r1
 800b76a:	4291      	cmp	r1, r2
 800b76c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b770:	d100      	bne.n	800b774 <memcpy+0xc>
 800b772:	4770      	bx	lr
 800b774:	b510      	push	{r4, lr}
 800b776:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b77a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b77e:	4291      	cmp	r1, r2
 800b780:	d1f9      	bne.n	800b776 <memcpy+0xe>
 800b782:	bd10      	pop	{r4, pc}

0800b784 <memset>:
 800b784:	4402      	add	r2, r0
 800b786:	4603      	mov	r3, r0
 800b788:	4293      	cmp	r3, r2
 800b78a:	d100      	bne.n	800b78e <memset+0xa>
 800b78c:	4770      	bx	lr
 800b78e:	f803 1b01 	strb.w	r1, [r3], #1
 800b792:	e7f9      	b.n	800b788 <memset+0x4>

0800b794 <__cvt>:
 800b794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b798:	ec55 4b10 	vmov	r4, r5, d0
 800b79c:	2d00      	cmp	r5, #0
 800b79e:	460e      	mov	r6, r1
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	462b      	mov	r3, r5
 800b7a4:	bfbb      	ittet	lt
 800b7a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b7aa:	461d      	movlt	r5, r3
 800b7ac:	2300      	movge	r3, #0
 800b7ae:	232d      	movlt	r3, #45	; 0x2d
 800b7b0:	700b      	strb	r3, [r1, #0]
 800b7b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b7b8:	4691      	mov	r9, r2
 800b7ba:	f023 0820 	bic.w	r8, r3, #32
 800b7be:	bfbc      	itt	lt
 800b7c0:	4622      	movlt	r2, r4
 800b7c2:	4614      	movlt	r4, r2
 800b7c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b7c8:	d005      	beq.n	800b7d6 <__cvt+0x42>
 800b7ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b7ce:	d100      	bne.n	800b7d2 <__cvt+0x3e>
 800b7d0:	3601      	adds	r6, #1
 800b7d2:	2102      	movs	r1, #2
 800b7d4:	e000      	b.n	800b7d8 <__cvt+0x44>
 800b7d6:	2103      	movs	r1, #3
 800b7d8:	ab03      	add	r3, sp, #12
 800b7da:	9301      	str	r3, [sp, #4]
 800b7dc:	ab02      	add	r3, sp, #8
 800b7de:	9300      	str	r3, [sp, #0]
 800b7e0:	ec45 4b10 	vmov	d0, r4, r5
 800b7e4:	4653      	mov	r3, sl
 800b7e6:	4632      	mov	r2, r6
 800b7e8:	f001 fcda 	bl	800d1a0 <_dtoa_r>
 800b7ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b7f0:	4607      	mov	r7, r0
 800b7f2:	d102      	bne.n	800b7fa <__cvt+0x66>
 800b7f4:	f019 0f01 	tst.w	r9, #1
 800b7f8:	d022      	beq.n	800b840 <__cvt+0xac>
 800b7fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b7fe:	eb07 0906 	add.w	r9, r7, r6
 800b802:	d110      	bne.n	800b826 <__cvt+0x92>
 800b804:	783b      	ldrb	r3, [r7, #0]
 800b806:	2b30      	cmp	r3, #48	; 0x30
 800b808:	d10a      	bne.n	800b820 <__cvt+0x8c>
 800b80a:	2200      	movs	r2, #0
 800b80c:	2300      	movs	r3, #0
 800b80e:	4620      	mov	r0, r4
 800b810:	4629      	mov	r1, r5
 800b812:	f7f5 f979 	bl	8000b08 <__aeabi_dcmpeq>
 800b816:	b918      	cbnz	r0, 800b820 <__cvt+0x8c>
 800b818:	f1c6 0601 	rsb	r6, r6, #1
 800b81c:	f8ca 6000 	str.w	r6, [sl]
 800b820:	f8da 3000 	ldr.w	r3, [sl]
 800b824:	4499      	add	r9, r3
 800b826:	2200      	movs	r2, #0
 800b828:	2300      	movs	r3, #0
 800b82a:	4620      	mov	r0, r4
 800b82c:	4629      	mov	r1, r5
 800b82e:	f7f5 f96b 	bl	8000b08 <__aeabi_dcmpeq>
 800b832:	b108      	cbz	r0, 800b838 <__cvt+0xa4>
 800b834:	f8cd 900c 	str.w	r9, [sp, #12]
 800b838:	2230      	movs	r2, #48	; 0x30
 800b83a:	9b03      	ldr	r3, [sp, #12]
 800b83c:	454b      	cmp	r3, r9
 800b83e:	d307      	bcc.n	800b850 <__cvt+0xbc>
 800b840:	9b03      	ldr	r3, [sp, #12]
 800b842:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b844:	1bdb      	subs	r3, r3, r7
 800b846:	4638      	mov	r0, r7
 800b848:	6013      	str	r3, [r2, #0]
 800b84a:	b004      	add	sp, #16
 800b84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b850:	1c59      	adds	r1, r3, #1
 800b852:	9103      	str	r1, [sp, #12]
 800b854:	701a      	strb	r2, [r3, #0]
 800b856:	e7f0      	b.n	800b83a <__cvt+0xa6>

0800b858 <__exponent>:
 800b858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b85a:	4603      	mov	r3, r0
 800b85c:	2900      	cmp	r1, #0
 800b85e:	bfb8      	it	lt
 800b860:	4249      	neglt	r1, r1
 800b862:	f803 2b02 	strb.w	r2, [r3], #2
 800b866:	bfb4      	ite	lt
 800b868:	222d      	movlt	r2, #45	; 0x2d
 800b86a:	222b      	movge	r2, #43	; 0x2b
 800b86c:	2909      	cmp	r1, #9
 800b86e:	7042      	strb	r2, [r0, #1]
 800b870:	dd2a      	ble.n	800b8c8 <__exponent+0x70>
 800b872:	f10d 0407 	add.w	r4, sp, #7
 800b876:	46a4      	mov	ip, r4
 800b878:	270a      	movs	r7, #10
 800b87a:	46a6      	mov	lr, r4
 800b87c:	460a      	mov	r2, r1
 800b87e:	fb91 f6f7 	sdiv	r6, r1, r7
 800b882:	fb07 1516 	mls	r5, r7, r6, r1
 800b886:	3530      	adds	r5, #48	; 0x30
 800b888:	2a63      	cmp	r2, #99	; 0x63
 800b88a:	f104 34ff 	add.w	r4, r4, #4294967295
 800b88e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b892:	4631      	mov	r1, r6
 800b894:	dcf1      	bgt.n	800b87a <__exponent+0x22>
 800b896:	3130      	adds	r1, #48	; 0x30
 800b898:	f1ae 0502 	sub.w	r5, lr, #2
 800b89c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b8a0:	1c44      	adds	r4, r0, #1
 800b8a2:	4629      	mov	r1, r5
 800b8a4:	4561      	cmp	r1, ip
 800b8a6:	d30a      	bcc.n	800b8be <__exponent+0x66>
 800b8a8:	f10d 0209 	add.w	r2, sp, #9
 800b8ac:	eba2 020e 	sub.w	r2, r2, lr
 800b8b0:	4565      	cmp	r5, ip
 800b8b2:	bf88      	it	hi
 800b8b4:	2200      	movhi	r2, #0
 800b8b6:	4413      	add	r3, r2
 800b8b8:	1a18      	subs	r0, r3, r0
 800b8ba:	b003      	add	sp, #12
 800b8bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b8c6:	e7ed      	b.n	800b8a4 <__exponent+0x4c>
 800b8c8:	2330      	movs	r3, #48	; 0x30
 800b8ca:	3130      	adds	r1, #48	; 0x30
 800b8cc:	7083      	strb	r3, [r0, #2]
 800b8ce:	70c1      	strb	r1, [r0, #3]
 800b8d0:	1d03      	adds	r3, r0, #4
 800b8d2:	e7f1      	b.n	800b8b8 <__exponent+0x60>

0800b8d4 <_printf_float>:
 800b8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d8:	ed2d 8b02 	vpush	{d8}
 800b8dc:	b08d      	sub	sp, #52	; 0x34
 800b8de:	460c      	mov	r4, r1
 800b8e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b8e4:	4616      	mov	r6, r2
 800b8e6:	461f      	mov	r7, r3
 800b8e8:	4605      	mov	r5, r0
 800b8ea:	f002 ff6b 	bl	800e7c4 <_localeconv_r>
 800b8ee:	f8d0 a000 	ldr.w	sl, [r0]
 800b8f2:	4650      	mov	r0, sl
 800b8f4:	f7f4 fc8c 	bl	8000210 <strlen>
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	930a      	str	r3, [sp, #40]	; 0x28
 800b8fc:	6823      	ldr	r3, [r4, #0]
 800b8fe:	9305      	str	r3, [sp, #20]
 800b900:	f8d8 3000 	ldr.w	r3, [r8]
 800b904:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b908:	3307      	adds	r3, #7
 800b90a:	f023 0307 	bic.w	r3, r3, #7
 800b90e:	f103 0208 	add.w	r2, r3, #8
 800b912:	f8c8 2000 	str.w	r2, [r8]
 800b916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b91e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b922:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b926:	9307      	str	r3, [sp, #28]
 800b928:	f8cd 8018 	str.w	r8, [sp, #24]
 800b92c:	ee08 0a10 	vmov	s16, r0
 800b930:	4b9f      	ldr	r3, [pc, #636]	; (800bbb0 <_printf_float+0x2dc>)
 800b932:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b936:	f04f 32ff 	mov.w	r2, #4294967295
 800b93a:	f7f5 f917 	bl	8000b6c <__aeabi_dcmpun>
 800b93e:	bb88      	cbnz	r0, 800b9a4 <_printf_float+0xd0>
 800b940:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b944:	4b9a      	ldr	r3, [pc, #616]	; (800bbb0 <_printf_float+0x2dc>)
 800b946:	f04f 32ff 	mov.w	r2, #4294967295
 800b94a:	f7f5 f8f1 	bl	8000b30 <__aeabi_dcmple>
 800b94e:	bb48      	cbnz	r0, 800b9a4 <_printf_float+0xd0>
 800b950:	2200      	movs	r2, #0
 800b952:	2300      	movs	r3, #0
 800b954:	4640      	mov	r0, r8
 800b956:	4649      	mov	r1, r9
 800b958:	f7f5 f8e0 	bl	8000b1c <__aeabi_dcmplt>
 800b95c:	b110      	cbz	r0, 800b964 <_printf_float+0x90>
 800b95e:	232d      	movs	r3, #45	; 0x2d
 800b960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b964:	4b93      	ldr	r3, [pc, #588]	; (800bbb4 <_printf_float+0x2e0>)
 800b966:	4894      	ldr	r0, [pc, #592]	; (800bbb8 <_printf_float+0x2e4>)
 800b968:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b96c:	bf94      	ite	ls
 800b96e:	4698      	movls	r8, r3
 800b970:	4680      	movhi	r8, r0
 800b972:	2303      	movs	r3, #3
 800b974:	6123      	str	r3, [r4, #16]
 800b976:	9b05      	ldr	r3, [sp, #20]
 800b978:	f023 0204 	bic.w	r2, r3, #4
 800b97c:	6022      	str	r2, [r4, #0]
 800b97e:	f04f 0900 	mov.w	r9, #0
 800b982:	9700      	str	r7, [sp, #0]
 800b984:	4633      	mov	r3, r6
 800b986:	aa0b      	add	r2, sp, #44	; 0x2c
 800b988:	4621      	mov	r1, r4
 800b98a:	4628      	mov	r0, r5
 800b98c:	f000 f9d8 	bl	800bd40 <_printf_common>
 800b990:	3001      	adds	r0, #1
 800b992:	f040 8090 	bne.w	800bab6 <_printf_float+0x1e2>
 800b996:	f04f 30ff 	mov.w	r0, #4294967295
 800b99a:	b00d      	add	sp, #52	; 0x34
 800b99c:	ecbd 8b02 	vpop	{d8}
 800b9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9a4:	4642      	mov	r2, r8
 800b9a6:	464b      	mov	r3, r9
 800b9a8:	4640      	mov	r0, r8
 800b9aa:	4649      	mov	r1, r9
 800b9ac:	f7f5 f8de 	bl	8000b6c <__aeabi_dcmpun>
 800b9b0:	b140      	cbz	r0, 800b9c4 <_printf_float+0xf0>
 800b9b2:	464b      	mov	r3, r9
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	bfbc      	itt	lt
 800b9b8:	232d      	movlt	r3, #45	; 0x2d
 800b9ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b9be:	487f      	ldr	r0, [pc, #508]	; (800bbbc <_printf_float+0x2e8>)
 800b9c0:	4b7f      	ldr	r3, [pc, #508]	; (800bbc0 <_printf_float+0x2ec>)
 800b9c2:	e7d1      	b.n	800b968 <_printf_float+0x94>
 800b9c4:	6863      	ldr	r3, [r4, #4]
 800b9c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b9ca:	9206      	str	r2, [sp, #24]
 800b9cc:	1c5a      	adds	r2, r3, #1
 800b9ce:	d13f      	bne.n	800ba50 <_printf_float+0x17c>
 800b9d0:	2306      	movs	r3, #6
 800b9d2:	6063      	str	r3, [r4, #4]
 800b9d4:	9b05      	ldr	r3, [sp, #20]
 800b9d6:	6861      	ldr	r1, [r4, #4]
 800b9d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b9dc:	2300      	movs	r3, #0
 800b9de:	9303      	str	r3, [sp, #12]
 800b9e0:	ab0a      	add	r3, sp, #40	; 0x28
 800b9e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b9e6:	ab09      	add	r3, sp, #36	; 0x24
 800b9e8:	ec49 8b10 	vmov	d0, r8, r9
 800b9ec:	9300      	str	r3, [sp, #0]
 800b9ee:	6022      	str	r2, [r4, #0]
 800b9f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b9f4:	4628      	mov	r0, r5
 800b9f6:	f7ff fecd 	bl	800b794 <__cvt>
 800b9fa:	9b06      	ldr	r3, [sp, #24]
 800b9fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9fe:	2b47      	cmp	r3, #71	; 0x47
 800ba00:	4680      	mov	r8, r0
 800ba02:	d108      	bne.n	800ba16 <_printf_float+0x142>
 800ba04:	1cc8      	adds	r0, r1, #3
 800ba06:	db02      	blt.n	800ba0e <_printf_float+0x13a>
 800ba08:	6863      	ldr	r3, [r4, #4]
 800ba0a:	4299      	cmp	r1, r3
 800ba0c:	dd41      	ble.n	800ba92 <_printf_float+0x1be>
 800ba0e:	f1ab 0b02 	sub.w	fp, fp, #2
 800ba12:	fa5f fb8b 	uxtb.w	fp, fp
 800ba16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ba1a:	d820      	bhi.n	800ba5e <_printf_float+0x18a>
 800ba1c:	3901      	subs	r1, #1
 800ba1e:	465a      	mov	r2, fp
 800ba20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ba24:	9109      	str	r1, [sp, #36]	; 0x24
 800ba26:	f7ff ff17 	bl	800b858 <__exponent>
 800ba2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba2c:	1813      	adds	r3, r2, r0
 800ba2e:	2a01      	cmp	r2, #1
 800ba30:	4681      	mov	r9, r0
 800ba32:	6123      	str	r3, [r4, #16]
 800ba34:	dc02      	bgt.n	800ba3c <_printf_float+0x168>
 800ba36:	6822      	ldr	r2, [r4, #0]
 800ba38:	07d2      	lsls	r2, r2, #31
 800ba3a:	d501      	bpl.n	800ba40 <_printf_float+0x16c>
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	6123      	str	r3, [r4, #16]
 800ba40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d09c      	beq.n	800b982 <_printf_float+0xae>
 800ba48:	232d      	movs	r3, #45	; 0x2d
 800ba4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba4e:	e798      	b.n	800b982 <_printf_float+0xae>
 800ba50:	9a06      	ldr	r2, [sp, #24]
 800ba52:	2a47      	cmp	r2, #71	; 0x47
 800ba54:	d1be      	bne.n	800b9d4 <_printf_float+0x100>
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d1bc      	bne.n	800b9d4 <_printf_float+0x100>
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e7b9      	b.n	800b9d2 <_printf_float+0xfe>
 800ba5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ba62:	d118      	bne.n	800ba96 <_printf_float+0x1c2>
 800ba64:	2900      	cmp	r1, #0
 800ba66:	6863      	ldr	r3, [r4, #4]
 800ba68:	dd0b      	ble.n	800ba82 <_printf_float+0x1ae>
 800ba6a:	6121      	str	r1, [r4, #16]
 800ba6c:	b913      	cbnz	r3, 800ba74 <_printf_float+0x1a0>
 800ba6e:	6822      	ldr	r2, [r4, #0]
 800ba70:	07d0      	lsls	r0, r2, #31
 800ba72:	d502      	bpl.n	800ba7a <_printf_float+0x1a6>
 800ba74:	3301      	adds	r3, #1
 800ba76:	440b      	add	r3, r1
 800ba78:	6123      	str	r3, [r4, #16]
 800ba7a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ba7c:	f04f 0900 	mov.w	r9, #0
 800ba80:	e7de      	b.n	800ba40 <_printf_float+0x16c>
 800ba82:	b913      	cbnz	r3, 800ba8a <_printf_float+0x1b6>
 800ba84:	6822      	ldr	r2, [r4, #0]
 800ba86:	07d2      	lsls	r2, r2, #31
 800ba88:	d501      	bpl.n	800ba8e <_printf_float+0x1ba>
 800ba8a:	3302      	adds	r3, #2
 800ba8c:	e7f4      	b.n	800ba78 <_printf_float+0x1a4>
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e7f2      	b.n	800ba78 <_printf_float+0x1a4>
 800ba92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ba96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba98:	4299      	cmp	r1, r3
 800ba9a:	db05      	blt.n	800baa8 <_printf_float+0x1d4>
 800ba9c:	6823      	ldr	r3, [r4, #0]
 800ba9e:	6121      	str	r1, [r4, #16]
 800baa0:	07d8      	lsls	r0, r3, #31
 800baa2:	d5ea      	bpl.n	800ba7a <_printf_float+0x1a6>
 800baa4:	1c4b      	adds	r3, r1, #1
 800baa6:	e7e7      	b.n	800ba78 <_printf_float+0x1a4>
 800baa8:	2900      	cmp	r1, #0
 800baaa:	bfd4      	ite	le
 800baac:	f1c1 0202 	rsble	r2, r1, #2
 800bab0:	2201      	movgt	r2, #1
 800bab2:	4413      	add	r3, r2
 800bab4:	e7e0      	b.n	800ba78 <_printf_float+0x1a4>
 800bab6:	6823      	ldr	r3, [r4, #0]
 800bab8:	055a      	lsls	r2, r3, #21
 800baba:	d407      	bmi.n	800bacc <_printf_float+0x1f8>
 800babc:	6923      	ldr	r3, [r4, #16]
 800babe:	4642      	mov	r2, r8
 800bac0:	4631      	mov	r1, r6
 800bac2:	4628      	mov	r0, r5
 800bac4:	47b8      	blx	r7
 800bac6:	3001      	adds	r0, #1
 800bac8:	d12c      	bne.n	800bb24 <_printf_float+0x250>
 800baca:	e764      	b.n	800b996 <_printf_float+0xc2>
 800bacc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bad0:	f240 80e0 	bls.w	800bc94 <_printf_float+0x3c0>
 800bad4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bad8:	2200      	movs	r2, #0
 800bada:	2300      	movs	r3, #0
 800badc:	f7f5 f814 	bl	8000b08 <__aeabi_dcmpeq>
 800bae0:	2800      	cmp	r0, #0
 800bae2:	d034      	beq.n	800bb4e <_printf_float+0x27a>
 800bae4:	4a37      	ldr	r2, [pc, #220]	; (800bbc4 <_printf_float+0x2f0>)
 800bae6:	2301      	movs	r3, #1
 800bae8:	4631      	mov	r1, r6
 800baea:	4628      	mov	r0, r5
 800baec:	47b8      	blx	r7
 800baee:	3001      	adds	r0, #1
 800baf0:	f43f af51 	beq.w	800b996 <_printf_float+0xc2>
 800baf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800baf8:	429a      	cmp	r2, r3
 800bafa:	db02      	blt.n	800bb02 <_printf_float+0x22e>
 800bafc:	6823      	ldr	r3, [r4, #0]
 800bafe:	07d8      	lsls	r0, r3, #31
 800bb00:	d510      	bpl.n	800bb24 <_printf_float+0x250>
 800bb02:	ee18 3a10 	vmov	r3, s16
 800bb06:	4652      	mov	r2, sl
 800bb08:	4631      	mov	r1, r6
 800bb0a:	4628      	mov	r0, r5
 800bb0c:	47b8      	blx	r7
 800bb0e:	3001      	adds	r0, #1
 800bb10:	f43f af41 	beq.w	800b996 <_printf_float+0xc2>
 800bb14:	f04f 0800 	mov.w	r8, #0
 800bb18:	f104 091a 	add.w	r9, r4, #26
 800bb1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb1e:	3b01      	subs	r3, #1
 800bb20:	4543      	cmp	r3, r8
 800bb22:	dc09      	bgt.n	800bb38 <_printf_float+0x264>
 800bb24:	6823      	ldr	r3, [r4, #0]
 800bb26:	079b      	lsls	r3, r3, #30
 800bb28:	f100 8105 	bmi.w	800bd36 <_printf_float+0x462>
 800bb2c:	68e0      	ldr	r0, [r4, #12]
 800bb2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb30:	4298      	cmp	r0, r3
 800bb32:	bfb8      	it	lt
 800bb34:	4618      	movlt	r0, r3
 800bb36:	e730      	b.n	800b99a <_printf_float+0xc6>
 800bb38:	2301      	movs	r3, #1
 800bb3a:	464a      	mov	r2, r9
 800bb3c:	4631      	mov	r1, r6
 800bb3e:	4628      	mov	r0, r5
 800bb40:	47b8      	blx	r7
 800bb42:	3001      	adds	r0, #1
 800bb44:	f43f af27 	beq.w	800b996 <_printf_float+0xc2>
 800bb48:	f108 0801 	add.w	r8, r8, #1
 800bb4c:	e7e6      	b.n	800bb1c <_printf_float+0x248>
 800bb4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	dc39      	bgt.n	800bbc8 <_printf_float+0x2f4>
 800bb54:	4a1b      	ldr	r2, [pc, #108]	; (800bbc4 <_printf_float+0x2f0>)
 800bb56:	2301      	movs	r3, #1
 800bb58:	4631      	mov	r1, r6
 800bb5a:	4628      	mov	r0, r5
 800bb5c:	47b8      	blx	r7
 800bb5e:	3001      	adds	r0, #1
 800bb60:	f43f af19 	beq.w	800b996 <_printf_float+0xc2>
 800bb64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	d102      	bne.n	800bb72 <_printf_float+0x29e>
 800bb6c:	6823      	ldr	r3, [r4, #0]
 800bb6e:	07d9      	lsls	r1, r3, #31
 800bb70:	d5d8      	bpl.n	800bb24 <_printf_float+0x250>
 800bb72:	ee18 3a10 	vmov	r3, s16
 800bb76:	4652      	mov	r2, sl
 800bb78:	4631      	mov	r1, r6
 800bb7a:	4628      	mov	r0, r5
 800bb7c:	47b8      	blx	r7
 800bb7e:	3001      	adds	r0, #1
 800bb80:	f43f af09 	beq.w	800b996 <_printf_float+0xc2>
 800bb84:	f04f 0900 	mov.w	r9, #0
 800bb88:	f104 0a1a 	add.w	sl, r4, #26
 800bb8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb8e:	425b      	negs	r3, r3
 800bb90:	454b      	cmp	r3, r9
 800bb92:	dc01      	bgt.n	800bb98 <_printf_float+0x2c4>
 800bb94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb96:	e792      	b.n	800babe <_printf_float+0x1ea>
 800bb98:	2301      	movs	r3, #1
 800bb9a:	4652      	mov	r2, sl
 800bb9c:	4631      	mov	r1, r6
 800bb9e:	4628      	mov	r0, r5
 800bba0:	47b8      	blx	r7
 800bba2:	3001      	adds	r0, #1
 800bba4:	f43f aef7 	beq.w	800b996 <_printf_float+0xc2>
 800bba8:	f109 0901 	add.w	r9, r9, #1
 800bbac:	e7ee      	b.n	800bb8c <_printf_float+0x2b8>
 800bbae:	bf00      	nop
 800bbb0:	7fefffff 	.word	0x7fefffff
 800bbb4:	08010b4c 	.word	0x08010b4c
 800bbb8:	08010b50 	.word	0x08010b50
 800bbbc:	08010b58 	.word	0x08010b58
 800bbc0:	08010b54 	.word	0x08010b54
 800bbc4:	08010b5c 	.word	0x08010b5c
 800bbc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	bfa8      	it	ge
 800bbd0:	461a      	movge	r2, r3
 800bbd2:	2a00      	cmp	r2, #0
 800bbd4:	4691      	mov	r9, r2
 800bbd6:	dc37      	bgt.n	800bc48 <_printf_float+0x374>
 800bbd8:	f04f 0b00 	mov.w	fp, #0
 800bbdc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bbe0:	f104 021a 	add.w	r2, r4, #26
 800bbe4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bbe6:	9305      	str	r3, [sp, #20]
 800bbe8:	eba3 0309 	sub.w	r3, r3, r9
 800bbec:	455b      	cmp	r3, fp
 800bbee:	dc33      	bgt.n	800bc58 <_printf_float+0x384>
 800bbf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	db3b      	blt.n	800bc70 <_printf_float+0x39c>
 800bbf8:	6823      	ldr	r3, [r4, #0]
 800bbfa:	07da      	lsls	r2, r3, #31
 800bbfc:	d438      	bmi.n	800bc70 <_printf_float+0x39c>
 800bbfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc00:	9b05      	ldr	r3, [sp, #20]
 800bc02:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc04:	1ad3      	subs	r3, r2, r3
 800bc06:	eba2 0901 	sub.w	r9, r2, r1
 800bc0a:	4599      	cmp	r9, r3
 800bc0c:	bfa8      	it	ge
 800bc0e:	4699      	movge	r9, r3
 800bc10:	f1b9 0f00 	cmp.w	r9, #0
 800bc14:	dc35      	bgt.n	800bc82 <_printf_float+0x3ae>
 800bc16:	f04f 0800 	mov.w	r8, #0
 800bc1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc1e:	f104 0a1a 	add.w	sl, r4, #26
 800bc22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc26:	1a9b      	subs	r3, r3, r2
 800bc28:	eba3 0309 	sub.w	r3, r3, r9
 800bc2c:	4543      	cmp	r3, r8
 800bc2e:	f77f af79 	ble.w	800bb24 <_printf_float+0x250>
 800bc32:	2301      	movs	r3, #1
 800bc34:	4652      	mov	r2, sl
 800bc36:	4631      	mov	r1, r6
 800bc38:	4628      	mov	r0, r5
 800bc3a:	47b8      	blx	r7
 800bc3c:	3001      	adds	r0, #1
 800bc3e:	f43f aeaa 	beq.w	800b996 <_printf_float+0xc2>
 800bc42:	f108 0801 	add.w	r8, r8, #1
 800bc46:	e7ec      	b.n	800bc22 <_printf_float+0x34e>
 800bc48:	4613      	mov	r3, r2
 800bc4a:	4631      	mov	r1, r6
 800bc4c:	4642      	mov	r2, r8
 800bc4e:	4628      	mov	r0, r5
 800bc50:	47b8      	blx	r7
 800bc52:	3001      	adds	r0, #1
 800bc54:	d1c0      	bne.n	800bbd8 <_printf_float+0x304>
 800bc56:	e69e      	b.n	800b996 <_printf_float+0xc2>
 800bc58:	2301      	movs	r3, #1
 800bc5a:	4631      	mov	r1, r6
 800bc5c:	4628      	mov	r0, r5
 800bc5e:	9205      	str	r2, [sp, #20]
 800bc60:	47b8      	blx	r7
 800bc62:	3001      	adds	r0, #1
 800bc64:	f43f ae97 	beq.w	800b996 <_printf_float+0xc2>
 800bc68:	9a05      	ldr	r2, [sp, #20]
 800bc6a:	f10b 0b01 	add.w	fp, fp, #1
 800bc6e:	e7b9      	b.n	800bbe4 <_printf_float+0x310>
 800bc70:	ee18 3a10 	vmov	r3, s16
 800bc74:	4652      	mov	r2, sl
 800bc76:	4631      	mov	r1, r6
 800bc78:	4628      	mov	r0, r5
 800bc7a:	47b8      	blx	r7
 800bc7c:	3001      	adds	r0, #1
 800bc7e:	d1be      	bne.n	800bbfe <_printf_float+0x32a>
 800bc80:	e689      	b.n	800b996 <_printf_float+0xc2>
 800bc82:	9a05      	ldr	r2, [sp, #20]
 800bc84:	464b      	mov	r3, r9
 800bc86:	4442      	add	r2, r8
 800bc88:	4631      	mov	r1, r6
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	47b8      	blx	r7
 800bc8e:	3001      	adds	r0, #1
 800bc90:	d1c1      	bne.n	800bc16 <_printf_float+0x342>
 800bc92:	e680      	b.n	800b996 <_printf_float+0xc2>
 800bc94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc96:	2a01      	cmp	r2, #1
 800bc98:	dc01      	bgt.n	800bc9e <_printf_float+0x3ca>
 800bc9a:	07db      	lsls	r3, r3, #31
 800bc9c:	d538      	bpl.n	800bd10 <_printf_float+0x43c>
 800bc9e:	2301      	movs	r3, #1
 800bca0:	4642      	mov	r2, r8
 800bca2:	4631      	mov	r1, r6
 800bca4:	4628      	mov	r0, r5
 800bca6:	47b8      	blx	r7
 800bca8:	3001      	adds	r0, #1
 800bcaa:	f43f ae74 	beq.w	800b996 <_printf_float+0xc2>
 800bcae:	ee18 3a10 	vmov	r3, s16
 800bcb2:	4652      	mov	r2, sl
 800bcb4:	4631      	mov	r1, r6
 800bcb6:	4628      	mov	r0, r5
 800bcb8:	47b8      	blx	r7
 800bcba:	3001      	adds	r0, #1
 800bcbc:	f43f ae6b 	beq.w	800b996 <_printf_float+0xc2>
 800bcc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	f7f4 ff1e 	bl	8000b08 <__aeabi_dcmpeq>
 800bccc:	b9d8      	cbnz	r0, 800bd06 <_printf_float+0x432>
 800bcce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcd0:	f108 0201 	add.w	r2, r8, #1
 800bcd4:	3b01      	subs	r3, #1
 800bcd6:	4631      	mov	r1, r6
 800bcd8:	4628      	mov	r0, r5
 800bcda:	47b8      	blx	r7
 800bcdc:	3001      	adds	r0, #1
 800bcde:	d10e      	bne.n	800bcfe <_printf_float+0x42a>
 800bce0:	e659      	b.n	800b996 <_printf_float+0xc2>
 800bce2:	2301      	movs	r3, #1
 800bce4:	4652      	mov	r2, sl
 800bce6:	4631      	mov	r1, r6
 800bce8:	4628      	mov	r0, r5
 800bcea:	47b8      	blx	r7
 800bcec:	3001      	adds	r0, #1
 800bcee:	f43f ae52 	beq.w	800b996 <_printf_float+0xc2>
 800bcf2:	f108 0801 	add.w	r8, r8, #1
 800bcf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcf8:	3b01      	subs	r3, #1
 800bcfa:	4543      	cmp	r3, r8
 800bcfc:	dcf1      	bgt.n	800bce2 <_printf_float+0x40e>
 800bcfe:	464b      	mov	r3, r9
 800bd00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bd04:	e6dc      	b.n	800bac0 <_printf_float+0x1ec>
 800bd06:	f04f 0800 	mov.w	r8, #0
 800bd0a:	f104 0a1a 	add.w	sl, r4, #26
 800bd0e:	e7f2      	b.n	800bcf6 <_printf_float+0x422>
 800bd10:	2301      	movs	r3, #1
 800bd12:	4642      	mov	r2, r8
 800bd14:	e7df      	b.n	800bcd6 <_printf_float+0x402>
 800bd16:	2301      	movs	r3, #1
 800bd18:	464a      	mov	r2, r9
 800bd1a:	4631      	mov	r1, r6
 800bd1c:	4628      	mov	r0, r5
 800bd1e:	47b8      	blx	r7
 800bd20:	3001      	adds	r0, #1
 800bd22:	f43f ae38 	beq.w	800b996 <_printf_float+0xc2>
 800bd26:	f108 0801 	add.w	r8, r8, #1
 800bd2a:	68e3      	ldr	r3, [r4, #12]
 800bd2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bd2e:	1a5b      	subs	r3, r3, r1
 800bd30:	4543      	cmp	r3, r8
 800bd32:	dcf0      	bgt.n	800bd16 <_printf_float+0x442>
 800bd34:	e6fa      	b.n	800bb2c <_printf_float+0x258>
 800bd36:	f04f 0800 	mov.w	r8, #0
 800bd3a:	f104 0919 	add.w	r9, r4, #25
 800bd3e:	e7f4      	b.n	800bd2a <_printf_float+0x456>

0800bd40 <_printf_common>:
 800bd40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd44:	4616      	mov	r6, r2
 800bd46:	4699      	mov	r9, r3
 800bd48:	688a      	ldr	r2, [r1, #8]
 800bd4a:	690b      	ldr	r3, [r1, #16]
 800bd4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd50:	4293      	cmp	r3, r2
 800bd52:	bfb8      	it	lt
 800bd54:	4613      	movlt	r3, r2
 800bd56:	6033      	str	r3, [r6, #0]
 800bd58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd5c:	4607      	mov	r7, r0
 800bd5e:	460c      	mov	r4, r1
 800bd60:	b10a      	cbz	r2, 800bd66 <_printf_common+0x26>
 800bd62:	3301      	adds	r3, #1
 800bd64:	6033      	str	r3, [r6, #0]
 800bd66:	6823      	ldr	r3, [r4, #0]
 800bd68:	0699      	lsls	r1, r3, #26
 800bd6a:	bf42      	ittt	mi
 800bd6c:	6833      	ldrmi	r3, [r6, #0]
 800bd6e:	3302      	addmi	r3, #2
 800bd70:	6033      	strmi	r3, [r6, #0]
 800bd72:	6825      	ldr	r5, [r4, #0]
 800bd74:	f015 0506 	ands.w	r5, r5, #6
 800bd78:	d106      	bne.n	800bd88 <_printf_common+0x48>
 800bd7a:	f104 0a19 	add.w	sl, r4, #25
 800bd7e:	68e3      	ldr	r3, [r4, #12]
 800bd80:	6832      	ldr	r2, [r6, #0]
 800bd82:	1a9b      	subs	r3, r3, r2
 800bd84:	42ab      	cmp	r3, r5
 800bd86:	dc26      	bgt.n	800bdd6 <_printf_common+0x96>
 800bd88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd8c:	1e13      	subs	r3, r2, #0
 800bd8e:	6822      	ldr	r2, [r4, #0]
 800bd90:	bf18      	it	ne
 800bd92:	2301      	movne	r3, #1
 800bd94:	0692      	lsls	r2, r2, #26
 800bd96:	d42b      	bmi.n	800bdf0 <_printf_common+0xb0>
 800bd98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd9c:	4649      	mov	r1, r9
 800bd9e:	4638      	mov	r0, r7
 800bda0:	47c0      	blx	r8
 800bda2:	3001      	adds	r0, #1
 800bda4:	d01e      	beq.n	800bde4 <_printf_common+0xa4>
 800bda6:	6823      	ldr	r3, [r4, #0]
 800bda8:	68e5      	ldr	r5, [r4, #12]
 800bdaa:	6832      	ldr	r2, [r6, #0]
 800bdac:	f003 0306 	and.w	r3, r3, #6
 800bdb0:	2b04      	cmp	r3, #4
 800bdb2:	bf08      	it	eq
 800bdb4:	1aad      	subeq	r5, r5, r2
 800bdb6:	68a3      	ldr	r3, [r4, #8]
 800bdb8:	6922      	ldr	r2, [r4, #16]
 800bdba:	bf0c      	ite	eq
 800bdbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bdc0:	2500      	movne	r5, #0
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	bfc4      	itt	gt
 800bdc6:	1a9b      	subgt	r3, r3, r2
 800bdc8:	18ed      	addgt	r5, r5, r3
 800bdca:	2600      	movs	r6, #0
 800bdcc:	341a      	adds	r4, #26
 800bdce:	42b5      	cmp	r5, r6
 800bdd0:	d11a      	bne.n	800be08 <_printf_common+0xc8>
 800bdd2:	2000      	movs	r0, #0
 800bdd4:	e008      	b.n	800bde8 <_printf_common+0xa8>
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	4652      	mov	r2, sl
 800bdda:	4649      	mov	r1, r9
 800bddc:	4638      	mov	r0, r7
 800bdde:	47c0      	blx	r8
 800bde0:	3001      	adds	r0, #1
 800bde2:	d103      	bne.n	800bdec <_printf_common+0xac>
 800bde4:	f04f 30ff 	mov.w	r0, #4294967295
 800bde8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdec:	3501      	adds	r5, #1
 800bdee:	e7c6      	b.n	800bd7e <_printf_common+0x3e>
 800bdf0:	18e1      	adds	r1, r4, r3
 800bdf2:	1c5a      	adds	r2, r3, #1
 800bdf4:	2030      	movs	r0, #48	; 0x30
 800bdf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bdfa:	4422      	add	r2, r4
 800bdfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be04:	3302      	adds	r3, #2
 800be06:	e7c7      	b.n	800bd98 <_printf_common+0x58>
 800be08:	2301      	movs	r3, #1
 800be0a:	4622      	mov	r2, r4
 800be0c:	4649      	mov	r1, r9
 800be0e:	4638      	mov	r0, r7
 800be10:	47c0      	blx	r8
 800be12:	3001      	adds	r0, #1
 800be14:	d0e6      	beq.n	800bde4 <_printf_common+0xa4>
 800be16:	3601      	adds	r6, #1
 800be18:	e7d9      	b.n	800bdce <_printf_common+0x8e>
	...

0800be1c <_printf_i>:
 800be1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be20:	460c      	mov	r4, r1
 800be22:	4691      	mov	r9, r2
 800be24:	7e27      	ldrb	r7, [r4, #24]
 800be26:	990c      	ldr	r1, [sp, #48]	; 0x30
 800be28:	2f78      	cmp	r7, #120	; 0x78
 800be2a:	4680      	mov	r8, r0
 800be2c:	469a      	mov	sl, r3
 800be2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be32:	d807      	bhi.n	800be44 <_printf_i+0x28>
 800be34:	2f62      	cmp	r7, #98	; 0x62
 800be36:	d80a      	bhi.n	800be4e <_printf_i+0x32>
 800be38:	2f00      	cmp	r7, #0
 800be3a:	f000 80d8 	beq.w	800bfee <_printf_i+0x1d2>
 800be3e:	2f58      	cmp	r7, #88	; 0x58
 800be40:	f000 80a3 	beq.w	800bf8a <_printf_i+0x16e>
 800be44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800be48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be4c:	e03a      	b.n	800bec4 <_printf_i+0xa8>
 800be4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be52:	2b15      	cmp	r3, #21
 800be54:	d8f6      	bhi.n	800be44 <_printf_i+0x28>
 800be56:	a001      	add	r0, pc, #4	; (adr r0, 800be5c <_printf_i+0x40>)
 800be58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800be5c:	0800beb5 	.word	0x0800beb5
 800be60:	0800bec9 	.word	0x0800bec9
 800be64:	0800be45 	.word	0x0800be45
 800be68:	0800be45 	.word	0x0800be45
 800be6c:	0800be45 	.word	0x0800be45
 800be70:	0800be45 	.word	0x0800be45
 800be74:	0800bec9 	.word	0x0800bec9
 800be78:	0800be45 	.word	0x0800be45
 800be7c:	0800be45 	.word	0x0800be45
 800be80:	0800be45 	.word	0x0800be45
 800be84:	0800be45 	.word	0x0800be45
 800be88:	0800bfd5 	.word	0x0800bfd5
 800be8c:	0800bef9 	.word	0x0800bef9
 800be90:	0800bfb7 	.word	0x0800bfb7
 800be94:	0800be45 	.word	0x0800be45
 800be98:	0800be45 	.word	0x0800be45
 800be9c:	0800bff7 	.word	0x0800bff7
 800bea0:	0800be45 	.word	0x0800be45
 800bea4:	0800bef9 	.word	0x0800bef9
 800bea8:	0800be45 	.word	0x0800be45
 800beac:	0800be45 	.word	0x0800be45
 800beb0:	0800bfbf 	.word	0x0800bfbf
 800beb4:	680b      	ldr	r3, [r1, #0]
 800beb6:	1d1a      	adds	r2, r3, #4
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	600a      	str	r2, [r1, #0]
 800bebc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bec0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bec4:	2301      	movs	r3, #1
 800bec6:	e0a3      	b.n	800c010 <_printf_i+0x1f4>
 800bec8:	6825      	ldr	r5, [r4, #0]
 800beca:	6808      	ldr	r0, [r1, #0]
 800becc:	062e      	lsls	r6, r5, #24
 800bece:	f100 0304 	add.w	r3, r0, #4
 800bed2:	d50a      	bpl.n	800beea <_printf_i+0xce>
 800bed4:	6805      	ldr	r5, [r0, #0]
 800bed6:	600b      	str	r3, [r1, #0]
 800bed8:	2d00      	cmp	r5, #0
 800beda:	da03      	bge.n	800bee4 <_printf_i+0xc8>
 800bedc:	232d      	movs	r3, #45	; 0x2d
 800bede:	426d      	negs	r5, r5
 800bee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bee4:	485e      	ldr	r0, [pc, #376]	; (800c060 <_printf_i+0x244>)
 800bee6:	230a      	movs	r3, #10
 800bee8:	e019      	b.n	800bf1e <_printf_i+0x102>
 800beea:	f015 0f40 	tst.w	r5, #64	; 0x40
 800beee:	6805      	ldr	r5, [r0, #0]
 800bef0:	600b      	str	r3, [r1, #0]
 800bef2:	bf18      	it	ne
 800bef4:	b22d      	sxthne	r5, r5
 800bef6:	e7ef      	b.n	800bed8 <_printf_i+0xbc>
 800bef8:	680b      	ldr	r3, [r1, #0]
 800befa:	6825      	ldr	r5, [r4, #0]
 800befc:	1d18      	adds	r0, r3, #4
 800befe:	6008      	str	r0, [r1, #0]
 800bf00:	0628      	lsls	r0, r5, #24
 800bf02:	d501      	bpl.n	800bf08 <_printf_i+0xec>
 800bf04:	681d      	ldr	r5, [r3, #0]
 800bf06:	e002      	b.n	800bf0e <_printf_i+0xf2>
 800bf08:	0669      	lsls	r1, r5, #25
 800bf0a:	d5fb      	bpl.n	800bf04 <_printf_i+0xe8>
 800bf0c:	881d      	ldrh	r5, [r3, #0]
 800bf0e:	4854      	ldr	r0, [pc, #336]	; (800c060 <_printf_i+0x244>)
 800bf10:	2f6f      	cmp	r7, #111	; 0x6f
 800bf12:	bf0c      	ite	eq
 800bf14:	2308      	moveq	r3, #8
 800bf16:	230a      	movne	r3, #10
 800bf18:	2100      	movs	r1, #0
 800bf1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf1e:	6866      	ldr	r6, [r4, #4]
 800bf20:	60a6      	str	r6, [r4, #8]
 800bf22:	2e00      	cmp	r6, #0
 800bf24:	bfa2      	ittt	ge
 800bf26:	6821      	ldrge	r1, [r4, #0]
 800bf28:	f021 0104 	bicge.w	r1, r1, #4
 800bf2c:	6021      	strge	r1, [r4, #0]
 800bf2e:	b90d      	cbnz	r5, 800bf34 <_printf_i+0x118>
 800bf30:	2e00      	cmp	r6, #0
 800bf32:	d04d      	beq.n	800bfd0 <_printf_i+0x1b4>
 800bf34:	4616      	mov	r6, r2
 800bf36:	fbb5 f1f3 	udiv	r1, r5, r3
 800bf3a:	fb03 5711 	mls	r7, r3, r1, r5
 800bf3e:	5dc7      	ldrb	r7, [r0, r7]
 800bf40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bf44:	462f      	mov	r7, r5
 800bf46:	42bb      	cmp	r3, r7
 800bf48:	460d      	mov	r5, r1
 800bf4a:	d9f4      	bls.n	800bf36 <_printf_i+0x11a>
 800bf4c:	2b08      	cmp	r3, #8
 800bf4e:	d10b      	bne.n	800bf68 <_printf_i+0x14c>
 800bf50:	6823      	ldr	r3, [r4, #0]
 800bf52:	07df      	lsls	r7, r3, #31
 800bf54:	d508      	bpl.n	800bf68 <_printf_i+0x14c>
 800bf56:	6923      	ldr	r3, [r4, #16]
 800bf58:	6861      	ldr	r1, [r4, #4]
 800bf5a:	4299      	cmp	r1, r3
 800bf5c:	bfde      	ittt	le
 800bf5e:	2330      	movle	r3, #48	; 0x30
 800bf60:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bf64:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bf68:	1b92      	subs	r2, r2, r6
 800bf6a:	6122      	str	r2, [r4, #16]
 800bf6c:	f8cd a000 	str.w	sl, [sp]
 800bf70:	464b      	mov	r3, r9
 800bf72:	aa03      	add	r2, sp, #12
 800bf74:	4621      	mov	r1, r4
 800bf76:	4640      	mov	r0, r8
 800bf78:	f7ff fee2 	bl	800bd40 <_printf_common>
 800bf7c:	3001      	adds	r0, #1
 800bf7e:	d14c      	bne.n	800c01a <_printf_i+0x1fe>
 800bf80:	f04f 30ff 	mov.w	r0, #4294967295
 800bf84:	b004      	add	sp, #16
 800bf86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf8a:	4835      	ldr	r0, [pc, #212]	; (800c060 <_printf_i+0x244>)
 800bf8c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bf90:	6823      	ldr	r3, [r4, #0]
 800bf92:	680e      	ldr	r6, [r1, #0]
 800bf94:	061f      	lsls	r7, r3, #24
 800bf96:	f856 5b04 	ldr.w	r5, [r6], #4
 800bf9a:	600e      	str	r6, [r1, #0]
 800bf9c:	d514      	bpl.n	800bfc8 <_printf_i+0x1ac>
 800bf9e:	07d9      	lsls	r1, r3, #31
 800bfa0:	bf44      	itt	mi
 800bfa2:	f043 0320 	orrmi.w	r3, r3, #32
 800bfa6:	6023      	strmi	r3, [r4, #0]
 800bfa8:	b91d      	cbnz	r5, 800bfb2 <_printf_i+0x196>
 800bfaa:	6823      	ldr	r3, [r4, #0]
 800bfac:	f023 0320 	bic.w	r3, r3, #32
 800bfb0:	6023      	str	r3, [r4, #0]
 800bfb2:	2310      	movs	r3, #16
 800bfb4:	e7b0      	b.n	800bf18 <_printf_i+0xfc>
 800bfb6:	6823      	ldr	r3, [r4, #0]
 800bfb8:	f043 0320 	orr.w	r3, r3, #32
 800bfbc:	6023      	str	r3, [r4, #0]
 800bfbe:	2378      	movs	r3, #120	; 0x78
 800bfc0:	4828      	ldr	r0, [pc, #160]	; (800c064 <_printf_i+0x248>)
 800bfc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bfc6:	e7e3      	b.n	800bf90 <_printf_i+0x174>
 800bfc8:	065e      	lsls	r6, r3, #25
 800bfca:	bf48      	it	mi
 800bfcc:	b2ad      	uxthmi	r5, r5
 800bfce:	e7e6      	b.n	800bf9e <_printf_i+0x182>
 800bfd0:	4616      	mov	r6, r2
 800bfd2:	e7bb      	b.n	800bf4c <_printf_i+0x130>
 800bfd4:	680b      	ldr	r3, [r1, #0]
 800bfd6:	6826      	ldr	r6, [r4, #0]
 800bfd8:	6960      	ldr	r0, [r4, #20]
 800bfda:	1d1d      	adds	r5, r3, #4
 800bfdc:	600d      	str	r5, [r1, #0]
 800bfde:	0635      	lsls	r5, r6, #24
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	d501      	bpl.n	800bfe8 <_printf_i+0x1cc>
 800bfe4:	6018      	str	r0, [r3, #0]
 800bfe6:	e002      	b.n	800bfee <_printf_i+0x1d2>
 800bfe8:	0671      	lsls	r1, r6, #25
 800bfea:	d5fb      	bpl.n	800bfe4 <_printf_i+0x1c8>
 800bfec:	8018      	strh	r0, [r3, #0]
 800bfee:	2300      	movs	r3, #0
 800bff0:	6123      	str	r3, [r4, #16]
 800bff2:	4616      	mov	r6, r2
 800bff4:	e7ba      	b.n	800bf6c <_printf_i+0x150>
 800bff6:	680b      	ldr	r3, [r1, #0]
 800bff8:	1d1a      	adds	r2, r3, #4
 800bffa:	600a      	str	r2, [r1, #0]
 800bffc:	681e      	ldr	r6, [r3, #0]
 800bffe:	6862      	ldr	r2, [r4, #4]
 800c000:	2100      	movs	r1, #0
 800c002:	4630      	mov	r0, r6
 800c004:	f7f4 f90c 	bl	8000220 <memchr>
 800c008:	b108      	cbz	r0, 800c00e <_printf_i+0x1f2>
 800c00a:	1b80      	subs	r0, r0, r6
 800c00c:	6060      	str	r0, [r4, #4]
 800c00e:	6863      	ldr	r3, [r4, #4]
 800c010:	6123      	str	r3, [r4, #16]
 800c012:	2300      	movs	r3, #0
 800c014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c018:	e7a8      	b.n	800bf6c <_printf_i+0x150>
 800c01a:	6923      	ldr	r3, [r4, #16]
 800c01c:	4632      	mov	r2, r6
 800c01e:	4649      	mov	r1, r9
 800c020:	4640      	mov	r0, r8
 800c022:	47d0      	blx	sl
 800c024:	3001      	adds	r0, #1
 800c026:	d0ab      	beq.n	800bf80 <_printf_i+0x164>
 800c028:	6823      	ldr	r3, [r4, #0]
 800c02a:	079b      	lsls	r3, r3, #30
 800c02c:	d413      	bmi.n	800c056 <_printf_i+0x23a>
 800c02e:	68e0      	ldr	r0, [r4, #12]
 800c030:	9b03      	ldr	r3, [sp, #12]
 800c032:	4298      	cmp	r0, r3
 800c034:	bfb8      	it	lt
 800c036:	4618      	movlt	r0, r3
 800c038:	e7a4      	b.n	800bf84 <_printf_i+0x168>
 800c03a:	2301      	movs	r3, #1
 800c03c:	4632      	mov	r2, r6
 800c03e:	4649      	mov	r1, r9
 800c040:	4640      	mov	r0, r8
 800c042:	47d0      	blx	sl
 800c044:	3001      	adds	r0, #1
 800c046:	d09b      	beq.n	800bf80 <_printf_i+0x164>
 800c048:	3501      	adds	r5, #1
 800c04a:	68e3      	ldr	r3, [r4, #12]
 800c04c:	9903      	ldr	r1, [sp, #12]
 800c04e:	1a5b      	subs	r3, r3, r1
 800c050:	42ab      	cmp	r3, r5
 800c052:	dcf2      	bgt.n	800c03a <_printf_i+0x21e>
 800c054:	e7eb      	b.n	800c02e <_printf_i+0x212>
 800c056:	2500      	movs	r5, #0
 800c058:	f104 0619 	add.w	r6, r4, #25
 800c05c:	e7f5      	b.n	800c04a <_printf_i+0x22e>
 800c05e:	bf00      	nop
 800c060:	08010b5e 	.word	0x08010b5e
 800c064:	08010b6f 	.word	0x08010b6f

0800c068 <iprintf>:
 800c068:	b40f      	push	{r0, r1, r2, r3}
 800c06a:	4b0a      	ldr	r3, [pc, #40]	; (800c094 <iprintf+0x2c>)
 800c06c:	b513      	push	{r0, r1, r4, lr}
 800c06e:	681c      	ldr	r4, [r3, #0]
 800c070:	b124      	cbz	r4, 800c07c <iprintf+0x14>
 800c072:	69a3      	ldr	r3, [r4, #24]
 800c074:	b913      	cbnz	r3, 800c07c <iprintf+0x14>
 800c076:	4620      	mov	r0, r4
 800c078:	f001 ff98 	bl	800dfac <__sinit>
 800c07c:	ab05      	add	r3, sp, #20
 800c07e:	9a04      	ldr	r2, [sp, #16]
 800c080:	68a1      	ldr	r1, [r4, #8]
 800c082:	9301      	str	r3, [sp, #4]
 800c084:	4620      	mov	r0, r4
 800c086:	f003 f9c1 	bl	800f40c <_vfiprintf_r>
 800c08a:	b002      	add	sp, #8
 800c08c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c090:	b004      	add	sp, #16
 800c092:	4770      	bx	lr
 800c094:	2000004c 	.word	0x2000004c

0800c098 <_puts_r>:
 800c098:	b570      	push	{r4, r5, r6, lr}
 800c09a:	460e      	mov	r6, r1
 800c09c:	4605      	mov	r5, r0
 800c09e:	b118      	cbz	r0, 800c0a8 <_puts_r+0x10>
 800c0a0:	6983      	ldr	r3, [r0, #24]
 800c0a2:	b90b      	cbnz	r3, 800c0a8 <_puts_r+0x10>
 800c0a4:	f001 ff82 	bl	800dfac <__sinit>
 800c0a8:	69ab      	ldr	r3, [r5, #24]
 800c0aa:	68ac      	ldr	r4, [r5, #8]
 800c0ac:	b913      	cbnz	r3, 800c0b4 <_puts_r+0x1c>
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	f001 ff7c 	bl	800dfac <__sinit>
 800c0b4:	4b2c      	ldr	r3, [pc, #176]	; (800c168 <_puts_r+0xd0>)
 800c0b6:	429c      	cmp	r4, r3
 800c0b8:	d120      	bne.n	800c0fc <_puts_r+0x64>
 800c0ba:	686c      	ldr	r4, [r5, #4]
 800c0bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0be:	07db      	lsls	r3, r3, #31
 800c0c0:	d405      	bmi.n	800c0ce <_puts_r+0x36>
 800c0c2:	89a3      	ldrh	r3, [r4, #12]
 800c0c4:	0598      	lsls	r0, r3, #22
 800c0c6:	d402      	bmi.n	800c0ce <_puts_r+0x36>
 800c0c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0ca:	f002 fb80 	bl	800e7ce <__retarget_lock_acquire_recursive>
 800c0ce:	89a3      	ldrh	r3, [r4, #12]
 800c0d0:	0719      	lsls	r1, r3, #28
 800c0d2:	d51d      	bpl.n	800c110 <_puts_r+0x78>
 800c0d4:	6923      	ldr	r3, [r4, #16]
 800c0d6:	b1db      	cbz	r3, 800c110 <_puts_r+0x78>
 800c0d8:	3e01      	subs	r6, #1
 800c0da:	68a3      	ldr	r3, [r4, #8]
 800c0dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c0e0:	3b01      	subs	r3, #1
 800c0e2:	60a3      	str	r3, [r4, #8]
 800c0e4:	bb39      	cbnz	r1, 800c136 <_puts_r+0x9e>
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	da38      	bge.n	800c15c <_puts_r+0xc4>
 800c0ea:	4622      	mov	r2, r4
 800c0ec:	210a      	movs	r1, #10
 800c0ee:	4628      	mov	r0, r5
 800c0f0:	f000 ff0a 	bl	800cf08 <__swbuf_r>
 800c0f4:	3001      	adds	r0, #1
 800c0f6:	d011      	beq.n	800c11c <_puts_r+0x84>
 800c0f8:	250a      	movs	r5, #10
 800c0fa:	e011      	b.n	800c120 <_puts_r+0x88>
 800c0fc:	4b1b      	ldr	r3, [pc, #108]	; (800c16c <_puts_r+0xd4>)
 800c0fe:	429c      	cmp	r4, r3
 800c100:	d101      	bne.n	800c106 <_puts_r+0x6e>
 800c102:	68ac      	ldr	r4, [r5, #8]
 800c104:	e7da      	b.n	800c0bc <_puts_r+0x24>
 800c106:	4b1a      	ldr	r3, [pc, #104]	; (800c170 <_puts_r+0xd8>)
 800c108:	429c      	cmp	r4, r3
 800c10a:	bf08      	it	eq
 800c10c:	68ec      	ldreq	r4, [r5, #12]
 800c10e:	e7d5      	b.n	800c0bc <_puts_r+0x24>
 800c110:	4621      	mov	r1, r4
 800c112:	4628      	mov	r0, r5
 800c114:	f000 ff4a 	bl	800cfac <__swsetup_r>
 800c118:	2800      	cmp	r0, #0
 800c11a:	d0dd      	beq.n	800c0d8 <_puts_r+0x40>
 800c11c:	f04f 35ff 	mov.w	r5, #4294967295
 800c120:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c122:	07da      	lsls	r2, r3, #31
 800c124:	d405      	bmi.n	800c132 <_puts_r+0x9a>
 800c126:	89a3      	ldrh	r3, [r4, #12]
 800c128:	059b      	lsls	r3, r3, #22
 800c12a:	d402      	bmi.n	800c132 <_puts_r+0x9a>
 800c12c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c12e:	f002 fb4f 	bl	800e7d0 <__retarget_lock_release_recursive>
 800c132:	4628      	mov	r0, r5
 800c134:	bd70      	pop	{r4, r5, r6, pc}
 800c136:	2b00      	cmp	r3, #0
 800c138:	da04      	bge.n	800c144 <_puts_r+0xac>
 800c13a:	69a2      	ldr	r2, [r4, #24]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	dc06      	bgt.n	800c14e <_puts_r+0xb6>
 800c140:	290a      	cmp	r1, #10
 800c142:	d004      	beq.n	800c14e <_puts_r+0xb6>
 800c144:	6823      	ldr	r3, [r4, #0]
 800c146:	1c5a      	adds	r2, r3, #1
 800c148:	6022      	str	r2, [r4, #0]
 800c14a:	7019      	strb	r1, [r3, #0]
 800c14c:	e7c5      	b.n	800c0da <_puts_r+0x42>
 800c14e:	4622      	mov	r2, r4
 800c150:	4628      	mov	r0, r5
 800c152:	f000 fed9 	bl	800cf08 <__swbuf_r>
 800c156:	3001      	adds	r0, #1
 800c158:	d1bf      	bne.n	800c0da <_puts_r+0x42>
 800c15a:	e7df      	b.n	800c11c <_puts_r+0x84>
 800c15c:	6823      	ldr	r3, [r4, #0]
 800c15e:	250a      	movs	r5, #10
 800c160:	1c5a      	adds	r2, r3, #1
 800c162:	6022      	str	r2, [r4, #0]
 800c164:	701d      	strb	r5, [r3, #0]
 800c166:	e7db      	b.n	800c120 <_puts_r+0x88>
 800c168:	08010d88 	.word	0x08010d88
 800c16c:	08010da8 	.word	0x08010da8
 800c170:	08010d68 	.word	0x08010d68

0800c174 <puts>:
 800c174:	4b02      	ldr	r3, [pc, #8]	; (800c180 <puts+0xc>)
 800c176:	4601      	mov	r1, r0
 800c178:	6818      	ldr	r0, [r3, #0]
 800c17a:	f7ff bf8d 	b.w	800c098 <_puts_r>
 800c17e:	bf00      	nop
 800c180:	2000004c 	.word	0x2000004c

0800c184 <sulp>:
 800c184:	b570      	push	{r4, r5, r6, lr}
 800c186:	4604      	mov	r4, r0
 800c188:	460d      	mov	r5, r1
 800c18a:	ec45 4b10 	vmov	d0, r4, r5
 800c18e:	4616      	mov	r6, r2
 800c190:	f002 ff0a 	bl	800efa8 <__ulp>
 800c194:	ec51 0b10 	vmov	r0, r1, d0
 800c198:	b17e      	cbz	r6, 800c1ba <sulp+0x36>
 800c19a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c19e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	dd09      	ble.n	800c1ba <sulp+0x36>
 800c1a6:	051b      	lsls	r3, r3, #20
 800c1a8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c1ac:	2400      	movs	r4, #0
 800c1ae:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c1b2:	4622      	mov	r2, r4
 800c1b4:	462b      	mov	r3, r5
 800c1b6:	f7f4 fa3f 	bl	8000638 <__aeabi_dmul>
 800c1ba:	bd70      	pop	{r4, r5, r6, pc}
 800c1bc:	0000      	movs	r0, r0
	...

0800c1c0 <_strtod_l>:
 800c1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c4:	b0a3      	sub	sp, #140	; 0x8c
 800c1c6:	461f      	mov	r7, r3
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	931e      	str	r3, [sp, #120]	; 0x78
 800c1cc:	4ba4      	ldr	r3, [pc, #656]	; (800c460 <_strtod_l+0x2a0>)
 800c1ce:	9219      	str	r2, [sp, #100]	; 0x64
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	9307      	str	r3, [sp, #28]
 800c1d4:	4604      	mov	r4, r0
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	4688      	mov	r8, r1
 800c1da:	f7f4 f819 	bl	8000210 <strlen>
 800c1de:	f04f 0a00 	mov.w	sl, #0
 800c1e2:	4605      	mov	r5, r0
 800c1e4:	f04f 0b00 	mov.w	fp, #0
 800c1e8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800c1ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c1ee:	781a      	ldrb	r2, [r3, #0]
 800c1f0:	2a2b      	cmp	r2, #43	; 0x2b
 800c1f2:	d04c      	beq.n	800c28e <_strtod_l+0xce>
 800c1f4:	d839      	bhi.n	800c26a <_strtod_l+0xaa>
 800c1f6:	2a0d      	cmp	r2, #13
 800c1f8:	d832      	bhi.n	800c260 <_strtod_l+0xa0>
 800c1fa:	2a08      	cmp	r2, #8
 800c1fc:	d832      	bhi.n	800c264 <_strtod_l+0xa4>
 800c1fe:	2a00      	cmp	r2, #0
 800c200:	d03c      	beq.n	800c27c <_strtod_l+0xbc>
 800c202:	2300      	movs	r3, #0
 800c204:	930e      	str	r3, [sp, #56]	; 0x38
 800c206:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c208:	7833      	ldrb	r3, [r6, #0]
 800c20a:	2b30      	cmp	r3, #48	; 0x30
 800c20c:	f040 80b4 	bne.w	800c378 <_strtod_l+0x1b8>
 800c210:	7873      	ldrb	r3, [r6, #1]
 800c212:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c216:	2b58      	cmp	r3, #88	; 0x58
 800c218:	d16c      	bne.n	800c2f4 <_strtod_l+0x134>
 800c21a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c21c:	9301      	str	r3, [sp, #4]
 800c21e:	ab1e      	add	r3, sp, #120	; 0x78
 800c220:	9702      	str	r7, [sp, #8]
 800c222:	9300      	str	r3, [sp, #0]
 800c224:	4a8f      	ldr	r2, [pc, #572]	; (800c464 <_strtod_l+0x2a4>)
 800c226:	ab1f      	add	r3, sp, #124	; 0x7c
 800c228:	a91d      	add	r1, sp, #116	; 0x74
 800c22a:	4620      	mov	r0, r4
 800c22c:	f001 ffc2 	bl	800e1b4 <__gethex>
 800c230:	f010 0707 	ands.w	r7, r0, #7
 800c234:	4605      	mov	r5, r0
 800c236:	d005      	beq.n	800c244 <_strtod_l+0x84>
 800c238:	2f06      	cmp	r7, #6
 800c23a:	d12a      	bne.n	800c292 <_strtod_l+0xd2>
 800c23c:	3601      	adds	r6, #1
 800c23e:	2300      	movs	r3, #0
 800c240:	961d      	str	r6, [sp, #116]	; 0x74
 800c242:	930e      	str	r3, [sp, #56]	; 0x38
 800c244:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c246:	2b00      	cmp	r3, #0
 800c248:	f040 8596 	bne.w	800cd78 <_strtod_l+0xbb8>
 800c24c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c24e:	b1db      	cbz	r3, 800c288 <_strtod_l+0xc8>
 800c250:	4652      	mov	r2, sl
 800c252:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c256:	ec43 2b10 	vmov	d0, r2, r3
 800c25a:	b023      	add	sp, #140	; 0x8c
 800c25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c260:	2a20      	cmp	r2, #32
 800c262:	d1ce      	bne.n	800c202 <_strtod_l+0x42>
 800c264:	3301      	adds	r3, #1
 800c266:	931d      	str	r3, [sp, #116]	; 0x74
 800c268:	e7c0      	b.n	800c1ec <_strtod_l+0x2c>
 800c26a:	2a2d      	cmp	r2, #45	; 0x2d
 800c26c:	d1c9      	bne.n	800c202 <_strtod_l+0x42>
 800c26e:	2201      	movs	r2, #1
 800c270:	920e      	str	r2, [sp, #56]	; 0x38
 800c272:	1c5a      	adds	r2, r3, #1
 800c274:	921d      	str	r2, [sp, #116]	; 0x74
 800c276:	785b      	ldrb	r3, [r3, #1]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d1c4      	bne.n	800c206 <_strtod_l+0x46>
 800c27c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c27e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800c282:	2b00      	cmp	r3, #0
 800c284:	f040 8576 	bne.w	800cd74 <_strtod_l+0xbb4>
 800c288:	4652      	mov	r2, sl
 800c28a:	465b      	mov	r3, fp
 800c28c:	e7e3      	b.n	800c256 <_strtod_l+0x96>
 800c28e:	2200      	movs	r2, #0
 800c290:	e7ee      	b.n	800c270 <_strtod_l+0xb0>
 800c292:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c294:	b13a      	cbz	r2, 800c2a6 <_strtod_l+0xe6>
 800c296:	2135      	movs	r1, #53	; 0x35
 800c298:	a820      	add	r0, sp, #128	; 0x80
 800c29a:	f002 ff90 	bl	800f1be <__copybits>
 800c29e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c2a0:	4620      	mov	r0, r4
 800c2a2:	f002 fb55 	bl	800e950 <_Bfree>
 800c2a6:	3f01      	subs	r7, #1
 800c2a8:	2f05      	cmp	r7, #5
 800c2aa:	d807      	bhi.n	800c2bc <_strtod_l+0xfc>
 800c2ac:	e8df f007 	tbb	[pc, r7]
 800c2b0:	1d180b0e 	.word	0x1d180b0e
 800c2b4:	030e      	.short	0x030e
 800c2b6:	f04f 0b00 	mov.w	fp, #0
 800c2ba:	46da      	mov	sl, fp
 800c2bc:	0728      	lsls	r0, r5, #28
 800c2be:	d5c1      	bpl.n	800c244 <_strtod_l+0x84>
 800c2c0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c2c4:	e7be      	b.n	800c244 <_strtod_l+0x84>
 800c2c6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800c2ca:	e7f7      	b.n	800c2bc <_strtod_l+0xfc>
 800c2cc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800c2d0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c2d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c2d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c2da:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c2de:	e7ed      	b.n	800c2bc <_strtod_l+0xfc>
 800c2e0:	f8df b184 	ldr.w	fp, [pc, #388]	; 800c468 <_strtod_l+0x2a8>
 800c2e4:	f04f 0a00 	mov.w	sl, #0
 800c2e8:	e7e8      	b.n	800c2bc <_strtod_l+0xfc>
 800c2ea:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c2ee:	f04f 3aff 	mov.w	sl, #4294967295
 800c2f2:	e7e3      	b.n	800c2bc <_strtod_l+0xfc>
 800c2f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c2f6:	1c5a      	adds	r2, r3, #1
 800c2f8:	921d      	str	r2, [sp, #116]	; 0x74
 800c2fa:	785b      	ldrb	r3, [r3, #1]
 800c2fc:	2b30      	cmp	r3, #48	; 0x30
 800c2fe:	d0f9      	beq.n	800c2f4 <_strtod_l+0x134>
 800c300:	2b00      	cmp	r3, #0
 800c302:	d09f      	beq.n	800c244 <_strtod_l+0x84>
 800c304:	2301      	movs	r3, #1
 800c306:	f04f 0900 	mov.w	r9, #0
 800c30a:	9304      	str	r3, [sp, #16]
 800c30c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c30e:	930a      	str	r3, [sp, #40]	; 0x28
 800c310:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c314:	464f      	mov	r7, r9
 800c316:	220a      	movs	r2, #10
 800c318:	981d      	ldr	r0, [sp, #116]	; 0x74
 800c31a:	7806      	ldrb	r6, [r0, #0]
 800c31c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c320:	b2d9      	uxtb	r1, r3
 800c322:	2909      	cmp	r1, #9
 800c324:	d92a      	bls.n	800c37c <_strtod_l+0x1bc>
 800c326:	9907      	ldr	r1, [sp, #28]
 800c328:	462a      	mov	r2, r5
 800c32a:	f003 f9fc 	bl	800f726 <strncmp>
 800c32e:	b398      	cbz	r0, 800c398 <_strtod_l+0x1d8>
 800c330:	2000      	movs	r0, #0
 800c332:	4633      	mov	r3, r6
 800c334:	463d      	mov	r5, r7
 800c336:	9007      	str	r0, [sp, #28]
 800c338:	4602      	mov	r2, r0
 800c33a:	2b65      	cmp	r3, #101	; 0x65
 800c33c:	d001      	beq.n	800c342 <_strtod_l+0x182>
 800c33e:	2b45      	cmp	r3, #69	; 0x45
 800c340:	d118      	bne.n	800c374 <_strtod_l+0x1b4>
 800c342:	b91d      	cbnz	r5, 800c34c <_strtod_l+0x18c>
 800c344:	9b04      	ldr	r3, [sp, #16]
 800c346:	4303      	orrs	r3, r0
 800c348:	d098      	beq.n	800c27c <_strtod_l+0xbc>
 800c34a:	2500      	movs	r5, #0
 800c34c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800c350:	f108 0301 	add.w	r3, r8, #1
 800c354:	931d      	str	r3, [sp, #116]	; 0x74
 800c356:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c35a:	2b2b      	cmp	r3, #43	; 0x2b
 800c35c:	d075      	beq.n	800c44a <_strtod_l+0x28a>
 800c35e:	2b2d      	cmp	r3, #45	; 0x2d
 800c360:	d07b      	beq.n	800c45a <_strtod_l+0x29a>
 800c362:	f04f 0c00 	mov.w	ip, #0
 800c366:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c36a:	2909      	cmp	r1, #9
 800c36c:	f240 8082 	bls.w	800c474 <_strtod_l+0x2b4>
 800c370:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800c374:	2600      	movs	r6, #0
 800c376:	e09d      	b.n	800c4b4 <_strtod_l+0x2f4>
 800c378:	2300      	movs	r3, #0
 800c37a:	e7c4      	b.n	800c306 <_strtod_l+0x146>
 800c37c:	2f08      	cmp	r7, #8
 800c37e:	bfd8      	it	le
 800c380:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800c382:	f100 0001 	add.w	r0, r0, #1
 800c386:	bfda      	itte	le
 800c388:	fb02 3301 	mlale	r3, r2, r1, r3
 800c38c:	9309      	strle	r3, [sp, #36]	; 0x24
 800c38e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c392:	3701      	adds	r7, #1
 800c394:	901d      	str	r0, [sp, #116]	; 0x74
 800c396:	e7bf      	b.n	800c318 <_strtod_l+0x158>
 800c398:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c39a:	195a      	adds	r2, r3, r5
 800c39c:	921d      	str	r2, [sp, #116]	; 0x74
 800c39e:	5d5b      	ldrb	r3, [r3, r5]
 800c3a0:	2f00      	cmp	r7, #0
 800c3a2:	d037      	beq.n	800c414 <_strtod_l+0x254>
 800c3a4:	9007      	str	r0, [sp, #28]
 800c3a6:	463d      	mov	r5, r7
 800c3a8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800c3ac:	2a09      	cmp	r2, #9
 800c3ae:	d912      	bls.n	800c3d6 <_strtod_l+0x216>
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	e7c2      	b.n	800c33a <_strtod_l+0x17a>
 800c3b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c3b6:	1c5a      	adds	r2, r3, #1
 800c3b8:	921d      	str	r2, [sp, #116]	; 0x74
 800c3ba:	785b      	ldrb	r3, [r3, #1]
 800c3bc:	3001      	adds	r0, #1
 800c3be:	2b30      	cmp	r3, #48	; 0x30
 800c3c0:	d0f8      	beq.n	800c3b4 <_strtod_l+0x1f4>
 800c3c2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800c3c6:	2a08      	cmp	r2, #8
 800c3c8:	f200 84db 	bhi.w	800cd82 <_strtod_l+0xbc2>
 800c3cc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c3ce:	9007      	str	r0, [sp, #28]
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	920a      	str	r2, [sp, #40]	; 0x28
 800c3d4:	4605      	mov	r5, r0
 800c3d6:	3b30      	subs	r3, #48	; 0x30
 800c3d8:	f100 0201 	add.w	r2, r0, #1
 800c3dc:	d014      	beq.n	800c408 <_strtod_l+0x248>
 800c3de:	9907      	ldr	r1, [sp, #28]
 800c3e0:	4411      	add	r1, r2
 800c3e2:	9107      	str	r1, [sp, #28]
 800c3e4:	462a      	mov	r2, r5
 800c3e6:	eb00 0e05 	add.w	lr, r0, r5
 800c3ea:	210a      	movs	r1, #10
 800c3ec:	4572      	cmp	r2, lr
 800c3ee:	d113      	bne.n	800c418 <_strtod_l+0x258>
 800c3f0:	182a      	adds	r2, r5, r0
 800c3f2:	2a08      	cmp	r2, #8
 800c3f4:	f105 0501 	add.w	r5, r5, #1
 800c3f8:	4405      	add	r5, r0
 800c3fa:	dc1c      	bgt.n	800c436 <_strtod_l+0x276>
 800c3fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c3fe:	220a      	movs	r2, #10
 800c400:	fb02 3301 	mla	r3, r2, r1, r3
 800c404:	9309      	str	r3, [sp, #36]	; 0x24
 800c406:	2200      	movs	r2, #0
 800c408:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c40a:	1c59      	adds	r1, r3, #1
 800c40c:	911d      	str	r1, [sp, #116]	; 0x74
 800c40e:	785b      	ldrb	r3, [r3, #1]
 800c410:	4610      	mov	r0, r2
 800c412:	e7c9      	b.n	800c3a8 <_strtod_l+0x1e8>
 800c414:	4638      	mov	r0, r7
 800c416:	e7d2      	b.n	800c3be <_strtod_l+0x1fe>
 800c418:	2a08      	cmp	r2, #8
 800c41a:	dc04      	bgt.n	800c426 <_strtod_l+0x266>
 800c41c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c41e:	434e      	muls	r6, r1
 800c420:	9609      	str	r6, [sp, #36]	; 0x24
 800c422:	3201      	adds	r2, #1
 800c424:	e7e2      	b.n	800c3ec <_strtod_l+0x22c>
 800c426:	f102 0c01 	add.w	ip, r2, #1
 800c42a:	f1bc 0f10 	cmp.w	ip, #16
 800c42e:	bfd8      	it	le
 800c430:	fb01 f909 	mulle.w	r9, r1, r9
 800c434:	e7f5      	b.n	800c422 <_strtod_l+0x262>
 800c436:	2d10      	cmp	r5, #16
 800c438:	bfdc      	itt	le
 800c43a:	220a      	movle	r2, #10
 800c43c:	fb02 3909 	mlale	r9, r2, r9, r3
 800c440:	e7e1      	b.n	800c406 <_strtod_l+0x246>
 800c442:	2300      	movs	r3, #0
 800c444:	9307      	str	r3, [sp, #28]
 800c446:	2201      	movs	r2, #1
 800c448:	e77c      	b.n	800c344 <_strtod_l+0x184>
 800c44a:	f04f 0c00 	mov.w	ip, #0
 800c44e:	f108 0302 	add.w	r3, r8, #2
 800c452:	931d      	str	r3, [sp, #116]	; 0x74
 800c454:	f898 3002 	ldrb.w	r3, [r8, #2]
 800c458:	e785      	b.n	800c366 <_strtod_l+0x1a6>
 800c45a:	f04f 0c01 	mov.w	ip, #1
 800c45e:	e7f6      	b.n	800c44e <_strtod_l+0x28e>
 800c460:	08010e34 	.word	0x08010e34
 800c464:	08010b80 	.word	0x08010b80
 800c468:	7ff00000 	.word	0x7ff00000
 800c46c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c46e:	1c59      	adds	r1, r3, #1
 800c470:	911d      	str	r1, [sp, #116]	; 0x74
 800c472:	785b      	ldrb	r3, [r3, #1]
 800c474:	2b30      	cmp	r3, #48	; 0x30
 800c476:	d0f9      	beq.n	800c46c <_strtod_l+0x2ac>
 800c478:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800c47c:	2908      	cmp	r1, #8
 800c47e:	f63f af79 	bhi.w	800c374 <_strtod_l+0x1b4>
 800c482:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800c486:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c488:	9308      	str	r3, [sp, #32]
 800c48a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c48c:	1c59      	adds	r1, r3, #1
 800c48e:	911d      	str	r1, [sp, #116]	; 0x74
 800c490:	785b      	ldrb	r3, [r3, #1]
 800c492:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800c496:	2e09      	cmp	r6, #9
 800c498:	d937      	bls.n	800c50a <_strtod_l+0x34a>
 800c49a:	9e08      	ldr	r6, [sp, #32]
 800c49c:	1b89      	subs	r1, r1, r6
 800c49e:	2908      	cmp	r1, #8
 800c4a0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c4a4:	dc02      	bgt.n	800c4ac <_strtod_l+0x2ec>
 800c4a6:	4576      	cmp	r6, lr
 800c4a8:	bfa8      	it	ge
 800c4aa:	4676      	movge	r6, lr
 800c4ac:	f1bc 0f00 	cmp.w	ip, #0
 800c4b0:	d000      	beq.n	800c4b4 <_strtod_l+0x2f4>
 800c4b2:	4276      	negs	r6, r6
 800c4b4:	2d00      	cmp	r5, #0
 800c4b6:	d14f      	bne.n	800c558 <_strtod_l+0x398>
 800c4b8:	9904      	ldr	r1, [sp, #16]
 800c4ba:	4301      	orrs	r1, r0
 800c4bc:	f47f aec2 	bne.w	800c244 <_strtod_l+0x84>
 800c4c0:	2a00      	cmp	r2, #0
 800c4c2:	f47f aedb 	bne.w	800c27c <_strtod_l+0xbc>
 800c4c6:	2b69      	cmp	r3, #105	; 0x69
 800c4c8:	d027      	beq.n	800c51a <_strtod_l+0x35a>
 800c4ca:	dc24      	bgt.n	800c516 <_strtod_l+0x356>
 800c4cc:	2b49      	cmp	r3, #73	; 0x49
 800c4ce:	d024      	beq.n	800c51a <_strtod_l+0x35a>
 800c4d0:	2b4e      	cmp	r3, #78	; 0x4e
 800c4d2:	f47f aed3 	bne.w	800c27c <_strtod_l+0xbc>
 800c4d6:	499e      	ldr	r1, [pc, #632]	; (800c750 <_strtod_l+0x590>)
 800c4d8:	a81d      	add	r0, sp, #116	; 0x74
 800c4da:	f002 f8c3 	bl	800e664 <__match>
 800c4de:	2800      	cmp	r0, #0
 800c4e0:	f43f aecc 	beq.w	800c27c <_strtod_l+0xbc>
 800c4e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	2b28      	cmp	r3, #40	; 0x28
 800c4ea:	d12d      	bne.n	800c548 <_strtod_l+0x388>
 800c4ec:	4999      	ldr	r1, [pc, #612]	; (800c754 <_strtod_l+0x594>)
 800c4ee:	aa20      	add	r2, sp, #128	; 0x80
 800c4f0:	a81d      	add	r0, sp, #116	; 0x74
 800c4f2:	f002 f8cb 	bl	800e68c <__hexnan>
 800c4f6:	2805      	cmp	r0, #5
 800c4f8:	d126      	bne.n	800c548 <_strtod_l+0x388>
 800c4fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4fc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800c500:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c504:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c508:	e69c      	b.n	800c244 <_strtod_l+0x84>
 800c50a:	210a      	movs	r1, #10
 800c50c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800c510:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c514:	e7b9      	b.n	800c48a <_strtod_l+0x2ca>
 800c516:	2b6e      	cmp	r3, #110	; 0x6e
 800c518:	e7db      	b.n	800c4d2 <_strtod_l+0x312>
 800c51a:	498f      	ldr	r1, [pc, #572]	; (800c758 <_strtod_l+0x598>)
 800c51c:	a81d      	add	r0, sp, #116	; 0x74
 800c51e:	f002 f8a1 	bl	800e664 <__match>
 800c522:	2800      	cmp	r0, #0
 800c524:	f43f aeaa 	beq.w	800c27c <_strtod_l+0xbc>
 800c528:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c52a:	498c      	ldr	r1, [pc, #560]	; (800c75c <_strtod_l+0x59c>)
 800c52c:	3b01      	subs	r3, #1
 800c52e:	a81d      	add	r0, sp, #116	; 0x74
 800c530:	931d      	str	r3, [sp, #116]	; 0x74
 800c532:	f002 f897 	bl	800e664 <__match>
 800c536:	b910      	cbnz	r0, 800c53e <_strtod_l+0x37e>
 800c538:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c53a:	3301      	adds	r3, #1
 800c53c:	931d      	str	r3, [sp, #116]	; 0x74
 800c53e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800c76c <_strtod_l+0x5ac>
 800c542:	f04f 0a00 	mov.w	sl, #0
 800c546:	e67d      	b.n	800c244 <_strtod_l+0x84>
 800c548:	4885      	ldr	r0, [pc, #532]	; (800c760 <_strtod_l+0x5a0>)
 800c54a:	f003 f891 	bl	800f670 <nan>
 800c54e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c552:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800c556:	e675      	b.n	800c244 <_strtod_l+0x84>
 800c558:	9b07      	ldr	r3, [sp, #28]
 800c55a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c55c:	1af3      	subs	r3, r6, r3
 800c55e:	2f00      	cmp	r7, #0
 800c560:	bf08      	it	eq
 800c562:	462f      	moveq	r7, r5
 800c564:	2d10      	cmp	r5, #16
 800c566:	9308      	str	r3, [sp, #32]
 800c568:	46a8      	mov	r8, r5
 800c56a:	bfa8      	it	ge
 800c56c:	f04f 0810 	movge.w	r8, #16
 800c570:	f7f3 ffe8 	bl	8000544 <__aeabi_ui2d>
 800c574:	2d09      	cmp	r5, #9
 800c576:	4682      	mov	sl, r0
 800c578:	468b      	mov	fp, r1
 800c57a:	dd13      	ble.n	800c5a4 <_strtod_l+0x3e4>
 800c57c:	4b79      	ldr	r3, [pc, #484]	; (800c764 <_strtod_l+0x5a4>)
 800c57e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c582:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c586:	f7f4 f857 	bl	8000638 <__aeabi_dmul>
 800c58a:	4682      	mov	sl, r0
 800c58c:	4648      	mov	r0, r9
 800c58e:	468b      	mov	fp, r1
 800c590:	f7f3 ffd8 	bl	8000544 <__aeabi_ui2d>
 800c594:	4602      	mov	r2, r0
 800c596:	460b      	mov	r3, r1
 800c598:	4650      	mov	r0, sl
 800c59a:	4659      	mov	r1, fp
 800c59c:	f7f3 fe96 	bl	80002cc <__adddf3>
 800c5a0:	4682      	mov	sl, r0
 800c5a2:	468b      	mov	fp, r1
 800c5a4:	2d0f      	cmp	r5, #15
 800c5a6:	dc38      	bgt.n	800c61a <_strtod_l+0x45a>
 800c5a8:	9b08      	ldr	r3, [sp, #32]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	f43f ae4a 	beq.w	800c244 <_strtod_l+0x84>
 800c5b0:	dd24      	ble.n	800c5fc <_strtod_l+0x43c>
 800c5b2:	2b16      	cmp	r3, #22
 800c5b4:	dc0b      	bgt.n	800c5ce <_strtod_l+0x40e>
 800c5b6:	4d6b      	ldr	r5, [pc, #428]	; (800c764 <_strtod_l+0x5a4>)
 800c5b8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800c5bc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c5c0:	4652      	mov	r2, sl
 800c5c2:	465b      	mov	r3, fp
 800c5c4:	f7f4 f838 	bl	8000638 <__aeabi_dmul>
 800c5c8:	4682      	mov	sl, r0
 800c5ca:	468b      	mov	fp, r1
 800c5cc:	e63a      	b.n	800c244 <_strtod_l+0x84>
 800c5ce:	9a08      	ldr	r2, [sp, #32]
 800c5d0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	db20      	blt.n	800c61a <_strtod_l+0x45a>
 800c5d8:	4c62      	ldr	r4, [pc, #392]	; (800c764 <_strtod_l+0x5a4>)
 800c5da:	f1c5 050f 	rsb	r5, r5, #15
 800c5de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c5e2:	4652      	mov	r2, sl
 800c5e4:	465b      	mov	r3, fp
 800c5e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5ea:	f7f4 f825 	bl	8000638 <__aeabi_dmul>
 800c5ee:	9b08      	ldr	r3, [sp, #32]
 800c5f0:	1b5d      	subs	r5, r3, r5
 800c5f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c5f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c5fa:	e7e3      	b.n	800c5c4 <_strtod_l+0x404>
 800c5fc:	9b08      	ldr	r3, [sp, #32]
 800c5fe:	3316      	adds	r3, #22
 800c600:	db0b      	blt.n	800c61a <_strtod_l+0x45a>
 800c602:	9b07      	ldr	r3, [sp, #28]
 800c604:	4a57      	ldr	r2, [pc, #348]	; (800c764 <_strtod_l+0x5a4>)
 800c606:	1b9e      	subs	r6, r3, r6
 800c608:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800c60c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c610:	4650      	mov	r0, sl
 800c612:	4659      	mov	r1, fp
 800c614:	f7f4 f93a 	bl	800088c <__aeabi_ddiv>
 800c618:	e7d6      	b.n	800c5c8 <_strtod_l+0x408>
 800c61a:	9b08      	ldr	r3, [sp, #32]
 800c61c:	eba5 0808 	sub.w	r8, r5, r8
 800c620:	4498      	add	r8, r3
 800c622:	f1b8 0f00 	cmp.w	r8, #0
 800c626:	dd71      	ble.n	800c70c <_strtod_l+0x54c>
 800c628:	f018 030f 	ands.w	r3, r8, #15
 800c62c:	d00a      	beq.n	800c644 <_strtod_l+0x484>
 800c62e:	494d      	ldr	r1, [pc, #308]	; (800c764 <_strtod_l+0x5a4>)
 800c630:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c634:	4652      	mov	r2, sl
 800c636:	465b      	mov	r3, fp
 800c638:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c63c:	f7f3 fffc 	bl	8000638 <__aeabi_dmul>
 800c640:	4682      	mov	sl, r0
 800c642:	468b      	mov	fp, r1
 800c644:	f038 080f 	bics.w	r8, r8, #15
 800c648:	d04d      	beq.n	800c6e6 <_strtod_l+0x526>
 800c64a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c64e:	dd22      	ble.n	800c696 <_strtod_l+0x4d6>
 800c650:	2500      	movs	r5, #0
 800c652:	462e      	mov	r6, r5
 800c654:	9509      	str	r5, [sp, #36]	; 0x24
 800c656:	9507      	str	r5, [sp, #28]
 800c658:	2322      	movs	r3, #34	; 0x22
 800c65a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800c76c <_strtod_l+0x5ac>
 800c65e:	6023      	str	r3, [r4, #0]
 800c660:	f04f 0a00 	mov.w	sl, #0
 800c664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c666:	2b00      	cmp	r3, #0
 800c668:	f43f adec 	beq.w	800c244 <_strtod_l+0x84>
 800c66c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c66e:	4620      	mov	r0, r4
 800c670:	f002 f96e 	bl	800e950 <_Bfree>
 800c674:	9907      	ldr	r1, [sp, #28]
 800c676:	4620      	mov	r0, r4
 800c678:	f002 f96a 	bl	800e950 <_Bfree>
 800c67c:	4631      	mov	r1, r6
 800c67e:	4620      	mov	r0, r4
 800c680:	f002 f966 	bl	800e950 <_Bfree>
 800c684:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c686:	4620      	mov	r0, r4
 800c688:	f002 f962 	bl	800e950 <_Bfree>
 800c68c:	4629      	mov	r1, r5
 800c68e:	4620      	mov	r0, r4
 800c690:	f002 f95e 	bl	800e950 <_Bfree>
 800c694:	e5d6      	b.n	800c244 <_strtod_l+0x84>
 800c696:	2300      	movs	r3, #0
 800c698:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c69c:	4650      	mov	r0, sl
 800c69e:	4659      	mov	r1, fp
 800c6a0:	4699      	mov	r9, r3
 800c6a2:	f1b8 0f01 	cmp.w	r8, #1
 800c6a6:	dc21      	bgt.n	800c6ec <_strtod_l+0x52c>
 800c6a8:	b10b      	cbz	r3, 800c6ae <_strtod_l+0x4ee>
 800c6aa:	4682      	mov	sl, r0
 800c6ac:	468b      	mov	fp, r1
 800c6ae:	4b2e      	ldr	r3, [pc, #184]	; (800c768 <_strtod_l+0x5a8>)
 800c6b0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c6b4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c6b8:	4652      	mov	r2, sl
 800c6ba:	465b      	mov	r3, fp
 800c6bc:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c6c0:	f7f3 ffba 	bl	8000638 <__aeabi_dmul>
 800c6c4:	4b29      	ldr	r3, [pc, #164]	; (800c76c <_strtod_l+0x5ac>)
 800c6c6:	460a      	mov	r2, r1
 800c6c8:	400b      	ands	r3, r1
 800c6ca:	4929      	ldr	r1, [pc, #164]	; (800c770 <_strtod_l+0x5b0>)
 800c6cc:	428b      	cmp	r3, r1
 800c6ce:	4682      	mov	sl, r0
 800c6d0:	d8be      	bhi.n	800c650 <_strtod_l+0x490>
 800c6d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c6d6:	428b      	cmp	r3, r1
 800c6d8:	bf86      	itte	hi
 800c6da:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800c774 <_strtod_l+0x5b4>
 800c6de:	f04f 3aff 	movhi.w	sl, #4294967295
 800c6e2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	9304      	str	r3, [sp, #16]
 800c6ea:	e081      	b.n	800c7f0 <_strtod_l+0x630>
 800c6ec:	f018 0f01 	tst.w	r8, #1
 800c6f0:	d007      	beq.n	800c702 <_strtod_l+0x542>
 800c6f2:	4b1d      	ldr	r3, [pc, #116]	; (800c768 <_strtod_l+0x5a8>)
 800c6f4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800c6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fc:	f7f3 ff9c 	bl	8000638 <__aeabi_dmul>
 800c700:	2301      	movs	r3, #1
 800c702:	f109 0901 	add.w	r9, r9, #1
 800c706:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c70a:	e7ca      	b.n	800c6a2 <_strtod_l+0x4e2>
 800c70c:	d0eb      	beq.n	800c6e6 <_strtod_l+0x526>
 800c70e:	f1c8 0800 	rsb	r8, r8, #0
 800c712:	f018 020f 	ands.w	r2, r8, #15
 800c716:	d00a      	beq.n	800c72e <_strtod_l+0x56e>
 800c718:	4b12      	ldr	r3, [pc, #72]	; (800c764 <_strtod_l+0x5a4>)
 800c71a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c71e:	4650      	mov	r0, sl
 800c720:	4659      	mov	r1, fp
 800c722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c726:	f7f4 f8b1 	bl	800088c <__aeabi_ddiv>
 800c72a:	4682      	mov	sl, r0
 800c72c:	468b      	mov	fp, r1
 800c72e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c732:	d0d8      	beq.n	800c6e6 <_strtod_l+0x526>
 800c734:	f1b8 0f1f 	cmp.w	r8, #31
 800c738:	dd1e      	ble.n	800c778 <_strtod_l+0x5b8>
 800c73a:	2500      	movs	r5, #0
 800c73c:	462e      	mov	r6, r5
 800c73e:	9509      	str	r5, [sp, #36]	; 0x24
 800c740:	9507      	str	r5, [sp, #28]
 800c742:	2322      	movs	r3, #34	; 0x22
 800c744:	f04f 0a00 	mov.w	sl, #0
 800c748:	f04f 0b00 	mov.w	fp, #0
 800c74c:	6023      	str	r3, [r4, #0]
 800c74e:	e789      	b.n	800c664 <_strtod_l+0x4a4>
 800c750:	08010b59 	.word	0x08010b59
 800c754:	08010b94 	.word	0x08010b94
 800c758:	08010b51 	.word	0x08010b51
 800c75c:	08010cd4 	.word	0x08010cd4
 800c760:	08010ff0 	.word	0x08010ff0
 800c764:	08010ed0 	.word	0x08010ed0
 800c768:	08010ea8 	.word	0x08010ea8
 800c76c:	7ff00000 	.word	0x7ff00000
 800c770:	7ca00000 	.word	0x7ca00000
 800c774:	7fefffff 	.word	0x7fefffff
 800c778:	f018 0310 	ands.w	r3, r8, #16
 800c77c:	bf18      	it	ne
 800c77e:	236a      	movne	r3, #106	; 0x6a
 800c780:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800cb38 <_strtod_l+0x978>
 800c784:	9304      	str	r3, [sp, #16]
 800c786:	4650      	mov	r0, sl
 800c788:	4659      	mov	r1, fp
 800c78a:	2300      	movs	r3, #0
 800c78c:	f018 0f01 	tst.w	r8, #1
 800c790:	d004      	beq.n	800c79c <_strtod_l+0x5dc>
 800c792:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c796:	f7f3 ff4f 	bl	8000638 <__aeabi_dmul>
 800c79a:	2301      	movs	r3, #1
 800c79c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c7a0:	f109 0908 	add.w	r9, r9, #8
 800c7a4:	d1f2      	bne.n	800c78c <_strtod_l+0x5cc>
 800c7a6:	b10b      	cbz	r3, 800c7ac <_strtod_l+0x5ec>
 800c7a8:	4682      	mov	sl, r0
 800c7aa:	468b      	mov	fp, r1
 800c7ac:	9b04      	ldr	r3, [sp, #16]
 800c7ae:	b1bb      	cbz	r3, 800c7e0 <_strtod_l+0x620>
 800c7b0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800c7b4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	4659      	mov	r1, fp
 800c7bc:	dd10      	ble.n	800c7e0 <_strtod_l+0x620>
 800c7be:	2b1f      	cmp	r3, #31
 800c7c0:	f340 8128 	ble.w	800ca14 <_strtod_l+0x854>
 800c7c4:	2b34      	cmp	r3, #52	; 0x34
 800c7c6:	bfde      	ittt	le
 800c7c8:	3b20      	suble	r3, #32
 800c7ca:	f04f 32ff 	movle.w	r2, #4294967295
 800c7ce:	fa02 f303 	lslle.w	r3, r2, r3
 800c7d2:	f04f 0a00 	mov.w	sl, #0
 800c7d6:	bfcc      	ite	gt
 800c7d8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c7dc:	ea03 0b01 	andle.w	fp, r3, r1
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	4650      	mov	r0, sl
 800c7e6:	4659      	mov	r1, fp
 800c7e8:	f7f4 f98e 	bl	8000b08 <__aeabi_dcmpeq>
 800c7ec:	2800      	cmp	r0, #0
 800c7ee:	d1a4      	bne.n	800c73a <_strtod_l+0x57a>
 800c7f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7f2:	9300      	str	r3, [sp, #0]
 800c7f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c7f6:	462b      	mov	r3, r5
 800c7f8:	463a      	mov	r2, r7
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	f002 f914 	bl	800ea28 <__s2b>
 800c800:	9009      	str	r0, [sp, #36]	; 0x24
 800c802:	2800      	cmp	r0, #0
 800c804:	f43f af24 	beq.w	800c650 <_strtod_l+0x490>
 800c808:	9b07      	ldr	r3, [sp, #28]
 800c80a:	1b9e      	subs	r6, r3, r6
 800c80c:	9b08      	ldr	r3, [sp, #32]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	bfb4      	ite	lt
 800c812:	4633      	movlt	r3, r6
 800c814:	2300      	movge	r3, #0
 800c816:	9310      	str	r3, [sp, #64]	; 0x40
 800c818:	9b08      	ldr	r3, [sp, #32]
 800c81a:	2500      	movs	r5, #0
 800c81c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c820:	9318      	str	r3, [sp, #96]	; 0x60
 800c822:	462e      	mov	r6, r5
 800c824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c826:	4620      	mov	r0, r4
 800c828:	6859      	ldr	r1, [r3, #4]
 800c82a:	f002 f851 	bl	800e8d0 <_Balloc>
 800c82e:	9007      	str	r0, [sp, #28]
 800c830:	2800      	cmp	r0, #0
 800c832:	f43f af11 	beq.w	800c658 <_strtod_l+0x498>
 800c836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c838:	691a      	ldr	r2, [r3, #16]
 800c83a:	3202      	adds	r2, #2
 800c83c:	f103 010c 	add.w	r1, r3, #12
 800c840:	0092      	lsls	r2, r2, #2
 800c842:	300c      	adds	r0, #12
 800c844:	f7fe ff90 	bl	800b768 <memcpy>
 800c848:	ec4b ab10 	vmov	d0, sl, fp
 800c84c:	aa20      	add	r2, sp, #128	; 0x80
 800c84e:	a91f      	add	r1, sp, #124	; 0x7c
 800c850:	4620      	mov	r0, r4
 800c852:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800c856:	f002 fc23 	bl	800f0a0 <__d2b>
 800c85a:	901e      	str	r0, [sp, #120]	; 0x78
 800c85c:	2800      	cmp	r0, #0
 800c85e:	f43f aefb 	beq.w	800c658 <_strtod_l+0x498>
 800c862:	2101      	movs	r1, #1
 800c864:	4620      	mov	r0, r4
 800c866:	f002 f979 	bl	800eb5c <__i2b>
 800c86a:	4606      	mov	r6, r0
 800c86c:	2800      	cmp	r0, #0
 800c86e:	f43f aef3 	beq.w	800c658 <_strtod_l+0x498>
 800c872:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c874:	9904      	ldr	r1, [sp, #16]
 800c876:	2b00      	cmp	r3, #0
 800c878:	bfab      	itete	ge
 800c87a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800c87c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800c87e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800c880:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800c884:	bfac      	ite	ge
 800c886:	eb03 0902 	addge.w	r9, r3, r2
 800c88a:	1ad7      	sublt	r7, r2, r3
 800c88c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c88e:	eba3 0801 	sub.w	r8, r3, r1
 800c892:	4490      	add	r8, r2
 800c894:	4ba3      	ldr	r3, [pc, #652]	; (800cb24 <_strtod_l+0x964>)
 800c896:	f108 38ff 	add.w	r8, r8, #4294967295
 800c89a:	4598      	cmp	r8, r3
 800c89c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c8a0:	f280 80cc 	bge.w	800ca3c <_strtod_l+0x87c>
 800c8a4:	eba3 0308 	sub.w	r3, r3, r8
 800c8a8:	2b1f      	cmp	r3, #31
 800c8aa:	eba2 0203 	sub.w	r2, r2, r3
 800c8ae:	f04f 0101 	mov.w	r1, #1
 800c8b2:	f300 80b6 	bgt.w	800ca22 <_strtod_l+0x862>
 800c8b6:	fa01 f303 	lsl.w	r3, r1, r3
 800c8ba:	9311      	str	r3, [sp, #68]	; 0x44
 800c8bc:	2300      	movs	r3, #0
 800c8be:	930c      	str	r3, [sp, #48]	; 0x30
 800c8c0:	eb09 0802 	add.w	r8, r9, r2
 800c8c4:	9b04      	ldr	r3, [sp, #16]
 800c8c6:	45c1      	cmp	r9, r8
 800c8c8:	4417      	add	r7, r2
 800c8ca:	441f      	add	r7, r3
 800c8cc:	464b      	mov	r3, r9
 800c8ce:	bfa8      	it	ge
 800c8d0:	4643      	movge	r3, r8
 800c8d2:	42bb      	cmp	r3, r7
 800c8d4:	bfa8      	it	ge
 800c8d6:	463b      	movge	r3, r7
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	bfc2      	ittt	gt
 800c8dc:	eba8 0803 	subgt.w	r8, r8, r3
 800c8e0:	1aff      	subgt	r7, r7, r3
 800c8e2:	eba9 0903 	subgt.w	r9, r9, r3
 800c8e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	dd17      	ble.n	800c91c <_strtod_l+0x75c>
 800c8ec:	4631      	mov	r1, r6
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	f002 f9ef 	bl	800ecd4 <__pow5mult>
 800c8f6:	4606      	mov	r6, r0
 800c8f8:	2800      	cmp	r0, #0
 800c8fa:	f43f aead 	beq.w	800c658 <_strtod_l+0x498>
 800c8fe:	4601      	mov	r1, r0
 800c900:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c902:	4620      	mov	r0, r4
 800c904:	f002 f940 	bl	800eb88 <__multiply>
 800c908:	900f      	str	r0, [sp, #60]	; 0x3c
 800c90a:	2800      	cmp	r0, #0
 800c90c:	f43f aea4 	beq.w	800c658 <_strtod_l+0x498>
 800c910:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c912:	4620      	mov	r0, r4
 800c914:	f002 f81c 	bl	800e950 <_Bfree>
 800c918:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c91a:	931e      	str	r3, [sp, #120]	; 0x78
 800c91c:	f1b8 0f00 	cmp.w	r8, #0
 800c920:	f300 8091 	bgt.w	800ca46 <_strtod_l+0x886>
 800c924:	9b08      	ldr	r3, [sp, #32]
 800c926:	2b00      	cmp	r3, #0
 800c928:	dd08      	ble.n	800c93c <_strtod_l+0x77c>
 800c92a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c92c:	9907      	ldr	r1, [sp, #28]
 800c92e:	4620      	mov	r0, r4
 800c930:	f002 f9d0 	bl	800ecd4 <__pow5mult>
 800c934:	9007      	str	r0, [sp, #28]
 800c936:	2800      	cmp	r0, #0
 800c938:	f43f ae8e 	beq.w	800c658 <_strtod_l+0x498>
 800c93c:	2f00      	cmp	r7, #0
 800c93e:	dd08      	ble.n	800c952 <_strtod_l+0x792>
 800c940:	9907      	ldr	r1, [sp, #28]
 800c942:	463a      	mov	r2, r7
 800c944:	4620      	mov	r0, r4
 800c946:	f002 fa1f 	bl	800ed88 <__lshift>
 800c94a:	9007      	str	r0, [sp, #28]
 800c94c:	2800      	cmp	r0, #0
 800c94e:	f43f ae83 	beq.w	800c658 <_strtod_l+0x498>
 800c952:	f1b9 0f00 	cmp.w	r9, #0
 800c956:	dd08      	ble.n	800c96a <_strtod_l+0x7aa>
 800c958:	4631      	mov	r1, r6
 800c95a:	464a      	mov	r2, r9
 800c95c:	4620      	mov	r0, r4
 800c95e:	f002 fa13 	bl	800ed88 <__lshift>
 800c962:	4606      	mov	r6, r0
 800c964:	2800      	cmp	r0, #0
 800c966:	f43f ae77 	beq.w	800c658 <_strtod_l+0x498>
 800c96a:	9a07      	ldr	r2, [sp, #28]
 800c96c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c96e:	4620      	mov	r0, r4
 800c970:	f002 fa92 	bl	800ee98 <__mdiff>
 800c974:	4605      	mov	r5, r0
 800c976:	2800      	cmp	r0, #0
 800c978:	f43f ae6e 	beq.w	800c658 <_strtod_l+0x498>
 800c97c:	68c3      	ldr	r3, [r0, #12]
 800c97e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c980:	2300      	movs	r3, #0
 800c982:	60c3      	str	r3, [r0, #12]
 800c984:	4631      	mov	r1, r6
 800c986:	f002 fa6b 	bl	800ee60 <__mcmp>
 800c98a:	2800      	cmp	r0, #0
 800c98c:	da65      	bge.n	800ca5a <_strtod_l+0x89a>
 800c98e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c990:	ea53 030a 	orrs.w	r3, r3, sl
 800c994:	f040 8087 	bne.w	800caa6 <_strtod_l+0x8e6>
 800c998:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	f040 8082 	bne.w	800caa6 <_strtod_l+0x8e6>
 800c9a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c9a6:	0d1b      	lsrs	r3, r3, #20
 800c9a8:	051b      	lsls	r3, r3, #20
 800c9aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c9ae:	d97a      	bls.n	800caa6 <_strtod_l+0x8e6>
 800c9b0:	696b      	ldr	r3, [r5, #20]
 800c9b2:	b913      	cbnz	r3, 800c9ba <_strtod_l+0x7fa>
 800c9b4:	692b      	ldr	r3, [r5, #16]
 800c9b6:	2b01      	cmp	r3, #1
 800c9b8:	dd75      	ble.n	800caa6 <_strtod_l+0x8e6>
 800c9ba:	4629      	mov	r1, r5
 800c9bc:	2201      	movs	r2, #1
 800c9be:	4620      	mov	r0, r4
 800c9c0:	f002 f9e2 	bl	800ed88 <__lshift>
 800c9c4:	4631      	mov	r1, r6
 800c9c6:	4605      	mov	r5, r0
 800c9c8:	f002 fa4a 	bl	800ee60 <__mcmp>
 800c9cc:	2800      	cmp	r0, #0
 800c9ce:	dd6a      	ble.n	800caa6 <_strtod_l+0x8e6>
 800c9d0:	9904      	ldr	r1, [sp, #16]
 800c9d2:	4a55      	ldr	r2, [pc, #340]	; (800cb28 <_strtod_l+0x968>)
 800c9d4:	465b      	mov	r3, fp
 800c9d6:	2900      	cmp	r1, #0
 800c9d8:	f000 8085 	beq.w	800cae6 <_strtod_l+0x926>
 800c9dc:	ea02 010b 	and.w	r1, r2, fp
 800c9e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c9e4:	dc7f      	bgt.n	800cae6 <_strtod_l+0x926>
 800c9e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c9ea:	f77f aeaa 	ble.w	800c742 <_strtod_l+0x582>
 800c9ee:	4a4f      	ldr	r2, [pc, #316]	; (800cb2c <_strtod_l+0x96c>)
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800c9f6:	4650      	mov	r0, sl
 800c9f8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800c9fc:	4659      	mov	r1, fp
 800c9fe:	f7f3 fe1b 	bl	8000638 <__aeabi_dmul>
 800ca02:	460b      	mov	r3, r1
 800ca04:	4303      	orrs	r3, r0
 800ca06:	bf08      	it	eq
 800ca08:	2322      	moveq	r3, #34	; 0x22
 800ca0a:	4682      	mov	sl, r0
 800ca0c:	468b      	mov	fp, r1
 800ca0e:	bf08      	it	eq
 800ca10:	6023      	streq	r3, [r4, #0]
 800ca12:	e62b      	b.n	800c66c <_strtod_l+0x4ac>
 800ca14:	f04f 32ff 	mov.w	r2, #4294967295
 800ca18:	fa02 f303 	lsl.w	r3, r2, r3
 800ca1c:	ea03 0a0a 	and.w	sl, r3, sl
 800ca20:	e6de      	b.n	800c7e0 <_strtod_l+0x620>
 800ca22:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ca26:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ca2a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ca2e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ca32:	fa01 f308 	lsl.w	r3, r1, r8
 800ca36:	930c      	str	r3, [sp, #48]	; 0x30
 800ca38:	9111      	str	r1, [sp, #68]	; 0x44
 800ca3a:	e741      	b.n	800c8c0 <_strtod_l+0x700>
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	930c      	str	r3, [sp, #48]	; 0x30
 800ca40:	2301      	movs	r3, #1
 800ca42:	9311      	str	r3, [sp, #68]	; 0x44
 800ca44:	e73c      	b.n	800c8c0 <_strtod_l+0x700>
 800ca46:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ca48:	4642      	mov	r2, r8
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	f002 f99c 	bl	800ed88 <__lshift>
 800ca50:	901e      	str	r0, [sp, #120]	; 0x78
 800ca52:	2800      	cmp	r0, #0
 800ca54:	f47f af66 	bne.w	800c924 <_strtod_l+0x764>
 800ca58:	e5fe      	b.n	800c658 <_strtod_l+0x498>
 800ca5a:	465f      	mov	r7, fp
 800ca5c:	d16e      	bne.n	800cb3c <_strtod_l+0x97c>
 800ca5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ca60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca64:	b342      	cbz	r2, 800cab8 <_strtod_l+0x8f8>
 800ca66:	4a32      	ldr	r2, [pc, #200]	; (800cb30 <_strtod_l+0x970>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d128      	bne.n	800cabe <_strtod_l+0x8fe>
 800ca6c:	9b04      	ldr	r3, [sp, #16]
 800ca6e:	4650      	mov	r0, sl
 800ca70:	b1eb      	cbz	r3, 800caae <_strtod_l+0x8ee>
 800ca72:	4a2d      	ldr	r2, [pc, #180]	; (800cb28 <_strtod_l+0x968>)
 800ca74:	403a      	ands	r2, r7
 800ca76:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ca7a:	f04f 31ff 	mov.w	r1, #4294967295
 800ca7e:	d819      	bhi.n	800cab4 <_strtod_l+0x8f4>
 800ca80:	0d12      	lsrs	r2, r2, #20
 800ca82:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ca86:	fa01 f303 	lsl.w	r3, r1, r3
 800ca8a:	4298      	cmp	r0, r3
 800ca8c:	d117      	bne.n	800cabe <_strtod_l+0x8fe>
 800ca8e:	4b29      	ldr	r3, [pc, #164]	; (800cb34 <_strtod_l+0x974>)
 800ca90:	429f      	cmp	r7, r3
 800ca92:	d102      	bne.n	800ca9a <_strtod_l+0x8da>
 800ca94:	3001      	adds	r0, #1
 800ca96:	f43f addf 	beq.w	800c658 <_strtod_l+0x498>
 800ca9a:	4b23      	ldr	r3, [pc, #140]	; (800cb28 <_strtod_l+0x968>)
 800ca9c:	403b      	ands	r3, r7
 800ca9e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800caa2:	f04f 0a00 	mov.w	sl, #0
 800caa6:	9b04      	ldr	r3, [sp, #16]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d1a0      	bne.n	800c9ee <_strtod_l+0x82e>
 800caac:	e5de      	b.n	800c66c <_strtod_l+0x4ac>
 800caae:	f04f 33ff 	mov.w	r3, #4294967295
 800cab2:	e7ea      	b.n	800ca8a <_strtod_l+0x8ca>
 800cab4:	460b      	mov	r3, r1
 800cab6:	e7e8      	b.n	800ca8a <_strtod_l+0x8ca>
 800cab8:	ea53 030a 	orrs.w	r3, r3, sl
 800cabc:	d088      	beq.n	800c9d0 <_strtod_l+0x810>
 800cabe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cac0:	b1db      	cbz	r3, 800cafa <_strtod_l+0x93a>
 800cac2:	423b      	tst	r3, r7
 800cac4:	d0ef      	beq.n	800caa6 <_strtod_l+0x8e6>
 800cac6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cac8:	9a04      	ldr	r2, [sp, #16]
 800caca:	4650      	mov	r0, sl
 800cacc:	4659      	mov	r1, fp
 800cace:	b1c3      	cbz	r3, 800cb02 <_strtod_l+0x942>
 800cad0:	f7ff fb58 	bl	800c184 <sulp>
 800cad4:	4602      	mov	r2, r0
 800cad6:	460b      	mov	r3, r1
 800cad8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cadc:	f7f3 fbf6 	bl	80002cc <__adddf3>
 800cae0:	4682      	mov	sl, r0
 800cae2:	468b      	mov	fp, r1
 800cae4:	e7df      	b.n	800caa6 <_strtod_l+0x8e6>
 800cae6:	4013      	ands	r3, r2
 800cae8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800caec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800caf0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800caf4:	f04f 3aff 	mov.w	sl, #4294967295
 800caf8:	e7d5      	b.n	800caa6 <_strtod_l+0x8e6>
 800cafa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cafc:	ea13 0f0a 	tst.w	r3, sl
 800cb00:	e7e0      	b.n	800cac4 <_strtod_l+0x904>
 800cb02:	f7ff fb3f 	bl	800c184 <sulp>
 800cb06:	4602      	mov	r2, r0
 800cb08:	460b      	mov	r3, r1
 800cb0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cb0e:	f7f3 fbdb 	bl	80002c8 <__aeabi_dsub>
 800cb12:	2200      	movs	r2, #0
 800cb14:	2300      	movs	r3, #0
 800cb16:	4682      	mov	sl, r0
 800cb18:	468b      	mov	fp, r1
 800cb1a:	f7f3 fff5 	bl	8000b08 <__aeabi_dcmpeq>
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	d0c1      	beq.n	800caa6 <_strtod_l+0x8e6>
 800cb22:	e60e      	b.n	800c742 <_strtod_l+0x582>
 800cb24:	fffffc02 	.word	0xfffffc02
 800cb28:	7ff00000 	.word	0x7ff00000
 800cb2c:	39500000 	.word	0x39500000
 800cb30:	000fffff 	.word	0x000fffff
 800cb34:	7fefffff 	.word	0x7fefffff
 800cb38:	08010ba8 	.word	0x08010ba8
 800cb3c:	4631      	mov	r1, r6
 800cb3e:	4628      	mov	r0, r5
 800cb40:	f002 fb0a 	bl	800f158 <__ratio>
 800cb44:	ec59 8b10 	vmov	r8, r9, d0
 800cb48:	ee10 0a10 	vmov	r0, s0
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cb52:	4649      	mov	r1, r9
 800cb54:	f7f3 ffec 	bl	8000b30 <__aeabi_dcmple>
 800cb58:	2800      	cmp	r0, #0
 800cb5a:	d07c      	beq.n	800cc56 <_strtod_l+0xa96>
 800cb5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d04c      	beq.n	800cbfc <_strtod_l+0xa3c>
 800cb62:	4b95      	ldr	r3, [pc, #596]	; (800cdb8 <_strtod_l+0xbf8>)
 800cb64:	2200      	movs	r2, #0
 800cb66:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800cb6a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800cdb8 <_strtod_l+0xbf8>
 800cb6e:	f04f 0800 	mov.w	r8, #0
 800cb72:	4b92      	ldr	r3, [pc, #584]	; (800cdbc <_strtod_l+0xbfc>)
 800cb74:	403b      	ands	r3, r7
 800cb76:	9311      	str	r3, [sp, #68]	; 0x44
 800cb78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cb7a:	4b91      	ldr	r3, [pc, #580]	; (800cdc0 <_strtod_l+0xc00>)
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	f040 80b2 	bne.w	800cce6 <_strtod_l+0xb26>
 800cb82:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cb86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cb8a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800cb8e:	ec4b ab10 	vmov	d0, sl, fp
 800cb92:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800cb96:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cb9a:	f002 fa05 	bl	800efa8 <__ulp>
 800cb9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cba2:	ec53 2b10 	vmov	r2, r3, d0
 800cba6:	f7f3 fd47 	bl	8000638 <__aeabi_dmul>
 800cbaa:	4652      	mov	r2, sl
 800cbac:	465b      	mov	r3, fp
 800cbae:	f7f3 fb8d 	bl	80002cc <__adddf3>
 800cbb2:	460b      	mov	r3, r1
 800cbb4:	4981      	ldr	r1, [pc, #516]	; (800cdbc <_strtod_l+0xbfc>)
 800cbb6:	4a83      	ldr	r2, [pc, #524]	; (800cdc4 <_strtod_l+0xc04>)
 800cbb8:	4019      	ands	r1, r3
 800cbba:	4291      	cmp	r1, r2
 800cbbc:	4682      	mov	sl, r0
 800cbbe:	d95e      	bls.n	800cc7e <_strtod_l+0xabe>
 800cbc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbc2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d103      	bne.n	800cbd2 <_strtod_l+0xa12>
 800cbca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbcc:	3301      	adds	r3, #1
 800cbce:	f43f ad43 	beq.w	800c658 <_strtod_l+0x498>
 800cbd2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800cdd0 <_strtod_l+0xc10>
 800cbd6:	f04f 3aff 	mov.w	sl, #4294967295
 800cbda:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cbdc:	4620      	mov	r0, r4
 800cbde:	f001 feb7 	bl	800e950 <_Bfree>
 800cbe2:	9907      	ldr	r1, [sp, #28]
 800cbe4:	4620      	mov	r0, r4
 800cbe6:	f001 feb3 	bl	800e950 <_Bfree>
 800cbea:	4631      	mov	r1, r6
 800cbec:	4620      	mov	r0, r4
 800cbee:	f001 feaf 	bl	800e950 <_Bfree>
 800cbf2:	4629      	mov	r1, r5
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	f001 feab 	bl	800e950 <_Bfree>
 800cbfa:	e613      	b.n	800c824 <_strtod_l+0x664>
 800cbfc:	f1ba 0f00 	cmp.w	sl, #0
 800cc00:	d11b      	bne.n	800cc3a <_strtod_l+0xa7a>
 800cc02:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc06:	b9f3      	cbnz	r3, 800cc46 <_strtod_l+0xa86>
 800cc08:	4b6b      	ldr	r3, [pc, #428]	; (800cdb8 <_strtod_l+0xbf8>)
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	4640      	mov	r0, r8
 800cc0e:	4649      	mov	r1, r9
 800cc10:	f7f3 ff84 	bl	8000b1c <__aeabi_dcmplt>
 800cc14:	b9d0      	cbnz	r0, 800cc4c <_strtod_l+0xa8c>
 800cc16:	4640      	mov	r0, r8
 800cc18:	4649      	mov	r1, r9
 800cc1a:	4b6b      	ldr	r3, [pc, #428]	; (800cdc8 <_strtod_l+0xc08>)
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	f7f3 fd0b 	bl	8000638 <__aeabi_dmul>
 800cc22:	4680      	mov	r8, r0
 800cc24:	4689      	mov	r9, r1
 800cc26:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cc2a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800cc2e:	931b      	str	r3, [sp, #108]	; 0x6c
 800cc30:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800cc34:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800cc38:	e79b      	b.n	800cb72 <_strtod_l+0x9b2>
 800cc3a:	f1ba 0f01 	cmp.w	sl, #1
 800cc3e:	d102      	bne.n	800cc46 <_strtod_l+0xa86>
 800cc40:	2f00      	cmp	r7, #0
 800cc42:	f43f ad7e 	beq.w	800c742 <_strtod_l+0x582>
 800cc46:	4b61      	ldr	r3, [pc, #388]	; (800cdcc <_strtod_l+0xc0c>)
 800cc48:	2200      	movs	r2, #0
 800cc4a:	e78c      	b.n	800cb66 <_strtod_l+0x9a6>
 800cc4c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800cdc8 <_strtod_l+0xc08>
 800cc50:	f04f 0800 	mov.w	r8, #0
 800cc54:	e7e7      	b.n	800cc26 <_strtod_l+0xa66>
 800cc56:	4b5c      	ldr	r3, [pc, #368]	; (800cdc8 <_strtod_l+0xc08>)
 800cc58:	4640      	mov	r0, r8
 800cc5a:	4649      	mov	r1, r9
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	f7f3 fceb 	bl	8000638 <__aeabi_dmul>
 800cc62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc64:	4680      	mov	r8, r0
 800cc66:	4689      	mov	r9, r1
 800cc68:	b933      	cbnz	r3, 800cc78 <_strtod_l+0xab8>
 800cc6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc6e:	9012      	str	r0, [sp, #72]	; 0x48
 800cc70:	9313      	str	r3, [sp, #76]	; 0x4c
 800cc72:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800cc76:	e7dd      	b.n	800cc34 <_strtod_l+0xa74>
 800cc78:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800cc7c:	e7f9      	b.n	800cc72 <_strtod_l+0xab2>
 800cc7e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800cc82:	9b04      	ldr	r3, [sp, #16]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d1a8      	bne.n	800cbda <_strtod_l+0xa1a>
 800cc88:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cc8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cc8e:	0d1b      	lsrs	r3, r3, #20
 800cc90:	051b      	lsls	r3, r3, #20
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d1a1      	bne.n	800cbda <_strtod_l+0xa1a>
 800cc96:	4640      	mov	r0, r8
 800cc98:	4649      	mov	r1, r9
 800cc9a:	f7f4 f82d 	bl	8000cf8 <__aeabi_d2lz>
 800cc9e:	f7f3 fc9d 	bl	80005dc <__aeabi_l2d>
 800cca2:	4602      	mov	r2, r0
 800cca4:	460b      	mov	r3, r1
 800cca6:	4640      	mov	r0, r8
 800cca8:	4649      	mov	r1, r9
 800ccaa:	f7f3 fb0d 	bl	80002c8 <__aeabi_dsub>
 800ccae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ccb0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ccb4:	ea43 030a 	orr.w	r3, r3, sl
 800ccb8:	4313      	orrs	r3, r2
 800ccba:	4680      	mov	r8, r0
 800ccbc:	4689      	mov	r9, r1
 800ccbe:	d053      	beq.n	800cd68 <_strtod_l+0xba8>
 800ccc0:	a335      	add	r3, pc, #212	; (adr r3, 800cd98 <_strtod_l+0xbd8>)
 800ccc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc6:	f7f3 ff29 	bl	8000b1c <__aeabi_dcmplt>
 800ccca:	2800      	cmp	r0, #0
 800cccc:	f47f acce 	bne.w	800c66c <_strtod_l+0x4ac>
 800ccd0:	a333      	add	r3, pc, #204	; (adr r3, 800cda0 <_strtod_l+0xbe0>)
 800ccd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd6:	4640      	mov	r0, r8
 800ccd8:	4649      	mov	r1, r9
 800ccda:	f7f3 ff3d 	bl	8000b58 <__aeabi_dcmpgt>
 800ccde:	2800      	cmp	r0, #0
 800cce0:	f43f af7b 	beq.w	800cbda <_strtod_l+0xa1a>
 800cce4:	e4c2      	b.n	800c66c <_strtod_l+0x4ac>
 800cce6:	9b04      	ldr	r3, [sp, #16]
 800cce8:	b333      	cbz	r3, 800cd38 <_strtod_l+0xb78>
 800ccea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ccec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ccf0:	d822      	bhi.n	800cd38 <_strtod_l+0xb78>
 800ccf2:	a32d      	add	r3, pc, #180	; (adr r3, 800cda8 <_strtod_l+0xbe8>)
 800ccf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf8:	4640      	mov	r0, r8
 800ccfa:	4649      	mov	r1, r9
 800ccfc:	f7f3 ff18 	bl	8000b30 <__aeabi_dcmple>
 800cd00:	b1a0      	cbz	r0, 800cd2c <_strtod_l+0xb6c>
 800cd02:	4649      	mov	r1, r9
 800cd04:	4640      	mov	r0, r8
 800cd06:	f7f3 ff6f 	bl	8000be8 <__aeabi_d2uiz>
 800cd0a:	2801      	cmp	r0, #1
 800cd0c:	bf38      	it	cc
 800cd0e:	2001      	movcc	r0, #1
 800cd10:	f7f3 fc18 	bl	8000544 <__aeabi_ui2d>
 800cd14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd16:	4680      	mov	r8, r0
 800cd18:	4689      	mov	r9, r1
 800cd1a:	bb13      	cbnz	r3, 800cd62 <_strtod_l+0xba2>
 800cd1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd20:	9014      	str	r0, [sp, #80]	; 0x50
 800cd22:	9315      	str	r3, [sp, #84]	; 0x54
 800cd24:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800cd28:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800cd2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cd30:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800cd34:	1a9b      	subs	r3, r3, r2
 800cd36:	930d      	str	r3, [sp, #52]	; 0x34
 800cd38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cd3c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800cd40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cd44:	f002 f930 	bl	800efa8 <__ulp>
 800cd48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cd4c:	ec53 2b10 	vmov	r2, r3, d0
 800cd50:	f7f3 fc72 	bl	8000638 <__aeabi_dmul>
 800cd54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cd58:	f7f3 fab8 	bl	80002cc <__adddf3>
 800cd5c:	4682      	mov	sl, r0
 800cd5e:	468b      	mov	fp, r1
 800cd60:	e78f      	b.n	800cc82 <_strtod_l+0xac2>
 800cd62:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800cd66:	e7dd      	b.n	800cd24 <_strtod_l+0xb64>
 800cd68:	a311      	add	r3, pc, #68	; (adr r3, 800cdb0 <_strtod_l+0xbf0>)
 800cd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6e:	f7f3 fed5 	bl	8000b1c <__aeabi_dcmplt>
 800cd72:	e7b4      	b.n	800ccde <_strtod_l+0xb1e>
 800cd74:	2300      	movs	r3, #0
 800cd76:	930e      	str	r3, [sp, #56]	; 0x38
 800cd78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cd7a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cd7c:	6013      	str	r3, [r2, #0]
 800cd7e:	f7ff ba65 	b.w	800c24c <_strtod_l+0x8c>
 800cd82:	2b65      	cmp	r3, #101	; 0x65
 800cd84:	f43f ab5d 	beq.w	800c442 <_strtod_l+0x282>
 800cd88:	2b45      	cmp	r3, #69	; 0x45
 800cd8a:	f43f ab5a 	beq.w	800c442 <_strtod_l+0x282>
 800cd8e:	2201      	movs	r2, #1
 800cd90:	f7ff bb92 	b.w	800c4b8 <_strtod_l+0x2f8>
 800cd94:	f3af 8000 	nop.w
 800cd98:	94a03595 	.word	0x94a03595
 800cd9c:	3fdfffff 	.word	0x3fdfffff
 800cda0:	35afe535 	.word	0x35afe535
 800cda4:	3fe00000 	.word	0x3fe00000
 800cda8:	ffc00000 	.word	0xffc00000
 800cdac:	41dfffff 	.word	0x41dfffff
 800cdb0:	94a03595 	.word	0x94a03595
 800cdb4:	3fcfffff 	.word	0x3fcfffff
 800cdb8:	3ff00000 	.word	0x3ff00000
 800cdbc:	7ff00000 	.word	0x7ff00000
 800cdc0:	7fe00000 	.word	0x7fe00000
 800cdc4:	7c9fffff 	.word	0x7c9fffff
 800cdc8:	3fe00000 	.word	0x3fe00000
 800cdcc:	bff00000 	.word	0xbff00000
 800cdd0:	7fefffff 	.word	0x7fefffff

0800cdd4 <strtod>:
 800cdd4:	460a      	mov	r2, r1
 800cdd6:	4601      	mov	r1, r0
 800cdd8:	4802      	ldr	r0, [pc, #8]	; (800cde4 <strtod+0x10>)
 800cdda:	4b03      	ldr	r3, [pc, #12]	; (800cde8 <strtod+0x14>)
 800cddc:	6800      	ldr	r0, [r0, #0]
 800cdde:	f7ff b9ef 	b.w	800c1c0 <_strtod_l>
 800cde2:	bf00      	nop
 800cde4:	2000004c 	.word	0x2000004c
 800cde8:	200000b4 	.word	0x200000b4

0800cdec <_strtol_l.isra.0>:
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdf2:	d001      	beq.n	800cdf8 <_strtol_l.isra.0+0xc>
 800cdf4:	2b24      	cmp	r3, #36	; 0x24
 800cdf6:	d906      	bls.n	800ce06 <_strtol_l.isra.0+0x1a>
 800cdf8:	f7fe fc8c 	bl	800b714 <__errno>
 800cdfc:	2316      	movs	r3, #22
 800cdfe:	6003      	str	r3, [r0, #0]
 800ce00:	2000      	movs	r0, #0
 800ce02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce06:	4f3a      	ldr	r7, [pc, #232]	; (800cef0 <_strtol_l.isra.0+0x104>)
 800ce08:	468e      	mov	lr, r1
 800ce0a:	4676      	mov	r6, lr
 800ce0c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ce10:	5de5      	ldrb	r5, [r4, r7]
 800ce12:	f015 0508 	ands.w	r5, r5, #8
 800ce16:	d1f8      	bne.n	800ce0a <_strtol_l.isra.0+0x1e>
 800ce18:	2c2d      	cmp	r4, #45	; 0x2d
 800ce1a:	d134      	bne.n	800ce86 <_strtol_l.isra.0+0x9a>
 800ce1c:	f89e 4000 	ldrb.w	r4, [lr]
 800ce20:	f04f 0801 	mov.w	r8, #1
 800ce24:	f106 0e02 	add.w	lr, r6, #2
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d05c      	beq.n	800cee6 <_strtol_l.isra.0+0xfa>
 800ce2c:	2b10      	cmp	r3, #16
 800ce2e:	d10c      	bne.n	800ce4a <_strtol_l.isra.0+0x5e>
 800ce30:	2c30      	cmp	r4, #48	; 0x30
 800ce32:	d10a      	bne.n	800ce4a <_strtol_l.isra.0+0x5e>
 800ce34:	f89e 4000 	ldrb.w	r4, [lr]
 800ce38:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ce3c:	2c58      	cmp	r4, #88	; 0x58
 800ce3e:	d14d      	bne.n	800cedc <_strtol_l.isra.0+0xf0>
 800ce40:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800ce44:	2310      	movs	r3, #16
 800ce46:	f10e 0e02 	add.w	lr, lr, #2
 800ce4a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800ce4e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ce52:	2600      	movs	r6, #0
 800ce54:	fbbc f9f3 	udiv	r9, ip, r3
 800ce58:	4635      	mov	r5, r6
 800ce5a:	fb03 ca19 	mls	sl, r3, r9, ip
 800ce5e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800ce62:	2f09      	cmp	r7, #9
 800ce64:	d818      	bhi.n	800ce98 <_strtol_l.isra.0+0xac>
 800ce66:	463c      	mov	r4, r7
 800ce68:	42a3      	cmp	r3, r4
 800ce6a:	dd24      	ble.n	800ceb6 <_strtol_l.isra.0+0xca>
 800ce6c:	2e00      	cmp	r6, #0
 800ce6e:	db1f      	blt.n	800ceb0 <_strtol_l.isra.0+0xc4>
 800ce70:	45a9      	cmp	r9, r5
 800ce72:	d31d      	bcc.n	800ceb0 <_strtol_l.isra.0+0xc4>
 800ce74:	d101      	bne.n	800ce7a <_strtol_l.isra.0+0x8e>
 800ce76:	45a2      	cmp	sl, r4
 800ce78:	db1a      	blt.n	800ceb0 <_strtol_l.isra.0+0xc4>
 800ce7a:	fb05 4503 	mla	r5, r5, r3, r4
 800ce7e:	2601      	movs	r6, #1
 800ce80:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ce84:	e7eb      	b.n	800ce5e <_strtol_l.isra.0+0x72>
 800ce86:	2c2b      	cmp	r4, #43	; 0x2b
 800ce88:	bf08      	it	eq
 800ce8a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800ce8e:	46a8      	mov	r8, r5
 800ce90:	bf08      	it	eq
 800ce92:	f106 0e02 	addeq.w	lr, r6, #2
 800ce96:	e7c7      	b.n	800ce28 <_strtol_l.isra.0+0x3c>
 800ce98:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ce9c:	2f19      	cmp	r7, #25
 800ce9e:	d801      	bhi.n	800cea4 <_strtol_l.isra.0+0xb8>
 800cea0:	3c37      	subs	r4, #55	; 0x37
 800cea2:	e7e1      	b.n	800ce68 <_strtol_l.isra.0+0x7c>
 800cea4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800cea8:	2f19      	cmp	r7, #25
 800ceaa:	d804      	bhi.n	800ceb6 <_strtol_l.isra.0+0xca>
 800ceac:	3c57      	subs	r4, #87	; 0x57
 800ceae:	e7db      	b.n	800ce68 <_strtol_l.isra.0+0x7c>
 800ceb0:	f04f 36ff 	mov.w	r6, #4294967295
 800ceb4:	e7e4      	b.n	800ce80 <_strtol_l.isra.0+0x94>
 800ceb6:	2e00      	cmp	r6, #0
 800ceb8:	da05      	bge.n	800cec6 <_strtol_l.isra.0+0xda>
 800ceba:	2322      	movs	r3, #34	; 0x22
 800cebc:	6003      	str	r3, [r0, #0]
 800cebe:	4665      	mov	r5, ip
 800cec0:	b942      	cbnz	r2, 800ced4 <_strtol_l.isra.0+0xe8>
 800cec2:	4628      	mov	r0, r5
 800cec4:	e79d      	b.n	800ce02 <_strtol_l.isra.0+0x16>
 800cec6:	f1b8 0f00 	cmp.w	r8, #0
 800ceca:	d000      	beq.n	800cece <_strtol_l.isra.0+0xe2>
 800cecc:	426d      	negs	r5, r5
 800cece:	2a00      	cmp	r2, #0
 800ced0:	d0f7      	beq.n	800cec2 <_strtol_l.isra.0+0xd6>
 800ced2:	b10e      	cbz	r6, 800ced8 <_strtol_l.isra.0+0xec>
 800ced4:	f10e 31ff 	add.w	r1, lr, #4294967295
 800ced8:	6011      	str	r1, [r2, #0]
 800ceda:	e7f2      	b.n	800cec2 <_strtol_l.isra.0+0xd6>
 800cedc:	2430      	movs	r4, #48	; 0x30
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d1b3      	bne.n	800ce4a <_strtol_l.isra.0+0x5e>
 800cee2:	2308      	movs	r3, #8
 800cee4:	e7b1      	b.n	800ce4a <_strtol_l.isra.0+0x5e>
 800cee6:	2c30      	cmp	r4, #48	; 0x30
 800cee8:	d0a4      	beq.n	800ce34 <_strtol_l.isra.0+0x48>
 800ceea:	230a      	movs	r3, #10
 800ceec:	e7ad      	b.n	800ce4a <_strtol_l.isra.0+0x5e>
 800ceee:	bf00      	nop
 800cef0:	08010bd1 	.word	0x08010bd1

0800cef4 <strtol>:
 800cef4:	4613      	mov	r3, r2
 800cef6:	460a      	mov	r2, r1
 800cef8:	4601      	mov	r1, r0
 800cefa:	4802      	ldr	r0, [pc, #8]	; (800cf04 <strtol+0x10>)
 800cefc:	6800      	ldr	r0, [r0, #0]
 800cefe:	f7ff bf75 	b.w	800cdec <_strtol_l.isra.0>
 800cf02:	bf00      	nop
 800cf04:	2000004c 	.word	0x2000004c

0800cf08 <__swbuf_r>:
 800cf08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf0a:	460e      	mov	r6, r1
 800cf0c:	4614      	mov	r4, r2
 800cf0e:	4605      	mov	r5, r0
 800cf10:	b118      	cbz	r0, 800cf1a <__swbuf_r+0x12>
 800cf12:	6983      	ldr	r3, [r0, #24]
 800cf14:	b90b      	cbnz	r3, 800cf1a <__swbuf_r+0x12>
 800cf16:	f001 f849 	bl	800dfac <__sinit>
 800cf1a:	4b21      	ldr	r3, [pc, #132]	; (800cfa0 <__swbuf_r+0x98>)
 800cf1c:	429c      	cmp	r4, r3
 800cf1e:	d12b      	bne.n	800cf78 <__swbuf_r+0x70>
 800cf20:	686c      	ldr	r4, [r5, #4]
 800cf22:	69a3      	ldr	r3, [r4, #24]
 800cf24:	60a3      	str	r3, [r4, #8]
 800cf26:	89a3      	ldrh	r3, [r4, #12]
 800cf28:	071a      	lsls	r2, r3, #28
 800cf2a:	d52f      	bpl.n	800cf8c <__swbuf_r+0x84>
 800cf2c:	6923      	ldr	r3, [r4, #16]
 800cf2e:	b36b      	cbz	r3, 800cf8c <__swbuf_r+0x84>
 800cf30:	6923      	ldr	r3, [r4, #16]
 800cf32:	6820      	ldr	r0, [r4, #0]
 800cf34:	1ac0      	subs	r0, r0, r3
 800cf36:	6963      	ldr	r3, [r4, #20]
 800cf38:	b2f6      	uxtb	r6, r6
 800cf3a:	4283      	cmp	r3, r0
 800cf3c:	4637      	mov	r7, r6
 800cf3e:	dc04      	bgt.n	800cf4a <__swbuf_r+0x42>
 800cf40:	4621      	mov	r1, r4
 800cf42:	4628      	mov	r0, r5
 800cf44:	f000 ff9e 	bl	800de84 <_fflush_r>
 800cf48:	bb30      	cbnz	r0, 800cf98 <__swbuf_r+0x90>
 800cf4a:	68a3      	ldr	r3, [r4, #8]
 800cf4c:	3b01      	subs	r3, #1
 800cf4e:	60a3      	str	r3, [r4, #8]
 800cf50:	6823      	ldr	r3, [r4, #0]
 800cf52:	1c5a      	adds	r2, r3, #1
 800cf54:	6022      	str	r2, [r4, #0]
 800cf56:	701e      	strb	r6, [r3, #0]
 800cf58:	6963      	ldr	r3, [r4, #20]
 800cf5a:	3001      	adds	r0, #1
 800cf5c:	4283      	cmp	r3, r0
 800cf5e:	d004      	beq.n	800cf6a <__swbuf_r+0x62>
 800cf60:	89a3      	ldrh	r3, [r4, #12]
 800cf62:	07db      	lsls	r3, r3, #31
 800cf64:	d506      	bpl.n	800cf74 <__swbuf_r+0x6c>
 800cf66:	2e0a      	cmp	r6, #10
 800cf68:	d104      	bne.n	800cf74 <__swbuf_r+0x6c>
 800cf6a:	4621      	mov	r1, r4
 800cf6c:	4628      	mov	r0, r5
 800cf6e:	f000 ff89 	bl	800de84 <_fflush_r>
 800cf72:	b988      	cbnz	r0, 800cf98 <__swbuf_r+0x90>
 800cf74:	4638      	mov	r0, r7
 800cf76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf78:	4b0a      	ldr	r3, [pc, #40]	; (800cfa4 <__swbuf_r+0x9c>)
 800cf7a:	429c      	cmp	r4, r3
 800cf7c:	d101      	bne.n	800cf82 <__swbuf_r+0x7a>
 800cf7e:	68ac      	ldr	r4, [r5, #8]
 800cf80:	e7cf      	b.n	800cf22 <__swbuf_r+0x1a>
 800cf82:	4b09      	ldr	r3, [pc, #36]	; (800cfa8 <__swbuf_r+0xa0>)
 800cf84:	429c      	cmp	r4, r3
 800cf86:	bf08      	it	eq
 800cf88:	68ec      	ldreq	r4, [r5, #12]
 800cf8a:	e7ca      	b.n	800cf22 <__swbuf_r+0x1a>
 800cf8c:	4621      	mov	r1, r4
 800cf8e:	4628      	mov	r0, r5
 800cf90:	f000 f80c 	bl	800cfac <__swsetup_r>
 800cf94:	2800      	cmp	r0, #0
 800cf96:	d0cb      	beq.n	800cf30 <__swbuf_r+0x28>
 800cf98:	f04f 37ff 	mov.w	r7, #4294967295
 800cf9c:	e7ea      	b.n	800cf74 <__swbuf_r+0x6c>
 800cf9e:	bf00      	nop
 800cfa0:	08010d88 	.word	0x08010d88
 800cfa4:	08010da8 	.word	0x08010da8
 800cfa8:	08010d68 	.word	0x08010d68

0800cfac <__swsetup_r>:
 800cfac:	4b32      	ldr	r3, [pc, #200]	; (800d078 <__swsetup_r+0xcc>)
 800cfae:	b570      	push	{r4, r5, r6, lr}
 800cfb0:	681d      	ldr	r5, [r3, #0]
 800cfb2:	4606      	mov	r6, r0
 800cfb4:	460c      	mov	r4, r1
 800cfb6:	b125      	cbz	r5, 800cfc2 <__swsetup_r+0x16>
 800cfb8:	69ab      	ldr	r3, [r5, #24]
 800cfba:	b913      	cbnz	r3, 800cfc2 <__swsetup_r+0x16>
 800cfbc:	4628      	mov	r0, r5
 800cfbe:	f000 fff5 	bl	800dfac <__sinit>
 800cfc2:	4b2e      	ldr	r3, [pc, #184]	; (800d07c <__swsetup_r+0xd0>)
 800cfc4:	429c      	cmp	r4, r3
 800cfc6:	d10f      	bne.n	800cfe8 <__swsetup_r+0x3c>
 800cfc8:	686c      	ldr	r4, [r5, #4]
 800cfca:	89a3      	ldrh	r3, [r4, #12]
 800cfcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cfd0:	0719      	lsls	r1, r3, #28
 800cfd2:	d42c      	bmi.n	800d02e <__swsetup_r+0x82>
 800cfd4:	06dd      	lsls	r5, r3, #27
 800cfd6:	d411      	bmi.n	800cffc <__swsetup_r+0x50>
 800cfd8:	2309      	movs	r3, #9
 800cfda:	6033      	str	r3, [r6, #0]
 800cfdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cfe0:	81a3      	strh	r3, [r4, #12]
 800cfe2:	f04f 30ff 	mov.w	r0, #4294967295
 800cfe6:	e03e      	b.n	800d066 <__swsetup_r+0xba>
 800cfe8:	4b25      	ldr	r3, [pc, #148]	; (800d080 <__swsetup_r+0xd4>)
 800cfea:	429c      	cmp	r4, r3
 800cfec:	d101      	bne.n	800cff2 <__swsetup_r+0x46>
 800cfee:	68ac      	ldr	r4, [r5, #8]
 800cff0:	e7eb      	b.n	800cfca <__swsetup_r+0x1e>
 800cff2:	4b24      	ldr	r3, [pc, #144]	; (800d084 <__swsetup_r+0xd8>)
 800cff4:	429c      	cmp	r4, r3
 800cff6:	bf08      	it	eq
 800cff8:	68ec      	ldreq	r4, [r5, #12]
 800cffa:	e7e6      	b.n	800cfca <__swsetup_r+0x1e>
 800cffc:	0758      	lsls	r0, r3, #29
 800cffe:	d512      	bpl.n	800d026 <__swsetup_r+0x7a>
 800d000:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d002:	b141      	cbz	r1, 800d016 <__swsetup_r+0x6a>
 800d004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d008:	4299      	cmp	r1, r3
 800d00a:	d002      	beq.n	800d012 <__swsetup_r+0x66>
 800d00c:	4630      	mov	r0, r6
 800d00e:	f002 f929 	bl	800f264 <_free_r>
 800d012:	2300      	movs	r3, #0
 800d014:	6363      	str	r3, [r4, #52]	; 0x34
 800d016:	89a3      	ldrh	r3, [r4, #12]
 800d018:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d01c:	81a3      	strh	r3, [r4, #12]
 800d01e:	2300      	movs	r3, #0
 800d020:	6063      	str	r3, [r4, #4]
 800d022:	6923      	ldr	r3, [r4, #16]
 800d024:	6023      	str	r3, [r4, #0]
 800d026:	89a3      	ldrh	r3, [r4, #12]
 800d028:	f043 0308 	orr.w	r3, r3, #8
 800d02c:	81a3      	strh	r3, [r4, #12]
 800d02e:	6923      	ldr	r3, [r4, #16]
 800d030:	b94b      	cbnz	r3, 800d046 <__swsetup_r+0x9a>
 800d032:	89a3      	ldrh	r3, [r4, #12]
 800d034:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d03c:	d003      	beq.n	800d046 <__swsetup_r+0x9a>
 800d03e:	4621      	mov	r1, r4
 800d040:	4630      	mov	r0, r6
 800d042:	f001 fbeb 	bl	800e81c <__smakebuf_r>
 800d046:	89a0      	ldrh	r0, [r4, #12]
 800d048:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d04c:	f010 0301 	ands.w	r3, r0, #1
 800d050:	d00a      	beq.n	800d068 <__swsetup_r+0xbc>
 800d052:	2300      	movs	r3, #0
 800d054:	60a3      	str	r3, [r4, #8]
 800d056:	6963      	ldr	r3, [r4, #20]
 800d058:	425b      	negs	r3, r3
 800d05a:	61a3      	str	r3, [r4, #24]
 800d05c:	6923      	ldr	r3, [r4, #16]
 800d05e:	b943      	cbnz	r3, 800d072 <__swsetup_r+0xc6>
 800d060:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d064:	d1ba      	bne.n	800cfdc <__swsetup_r+0x30>
 800d066:	bd70      	pop	{r4, r5, r6, pc}
 800d068:	0781      	lsls	r1, r0, #30
 800d06a:	bf58      	it	pl
 800d06c:	6963      	ldrpl	r3, [r4, #20]
 800d06e:	60a3      	str	r3, [r4, #8]
 800d070:	e7f4      	b.n	800d05c <__swsetup_r+0xb0>
 800d072:	2000      	movs	r0, #0
 800d074:	e7f7      	b.n	800d066 <__swsetup_r+0xba>
 800d076:	bf00      	nop
 800d078:	2000004c 	.word	0x2000004c
 800d07c:	08010d88 	.word	0x08010d88
 800d080:	08010da8 	.word	0x08010da8
 800d084:	08010d68 	.word	0x08010d68

0800d088 <quorem>:
 800d088:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d08c:	6903      	ldr	r3, [r0, #16]
 800d08e:	690c      	ldr	r4, [r1, #16]
 800d090:	42a3      	cmp	r3, r4
 800d092:	4607      	mov	r7, r0
 800d094:	f2c0 8081 	blt.w	800d19a <quorem+0x112>
 800d098:	3c01      	subs	r4, #1
 800d09a:	f101 0814 	add.w	r8, r1, #20
 800d09e:	f100 0514 	add.w	r5, r0, #20
 800d0a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d0a6:	9301      	str	r3, [sp, #4]
 800d0a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d0ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d0b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d0bc:	fbb2 f6f3 	udiv	r6, r2, r3
 800d0c0:	d331      	bcc.n	800d126 <quorem+0x9e>
 800d0c2:	f04f 0e00 	mov.w	lr, #0
 800d0c6:	4640      	mov	r0, r8
 800d0c8:	46ac      	mov	ip, r5
 800d0ca:	46f2      	mov	sl, lr
 800d0cc:	f850 2b04 	ldr.w	r2, [r0], #4
 800d0d0:	b293      	uxth	r3, r2
 800d0d2:	fb06 e303 	mla	r3, r6, r3, lr
 800d0d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d0da:	b29b      	uxth	r3, r3
 800d0dc:	ebaa 0303 	sub.w	r3, sl, r3
 800d0e0:	0c12      	lsrs	r2, r2, #16
 800d0e2:	f8dc a000 	ldr.w	sl, [ip]
 800d0e6:	fb06 e202 	mla	r2, r6, r2, lr
 800d0ea:	fa13 f38a 	uxtah	r3, r3, sl
 800d0ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d0f2:	fa1f fa82 	uxth.w	sl, r2
 800d0f6:	f8dc 2000 	ldr.w	r2, [ip]
 800d0fa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d0fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d102:	b29b      	uxth	r3, r3
 800d104:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d108:	4581      	cmp	r9, r0
 800d10a:	f84c 3b04 	str.w	r3, [ip], #4
 800d10e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d112:	d2db      	bcs.n	800d0cc <quorem+0x44>
 800d114:	f855 300b 	ldr.w	r3, [r5, fp]
 800d118:	b92b      	cbnz	r3, 800d126 <quorem+0x9e>
 800d11a:	9b01      	ldr	r3, [sp, #4]
 800d11c:	3b04      	subs	r3, #4
 800d11e:	429d      	cmp	r5, r3
 800d120:	461a      	mov	r2, r3
 800d122:	d32e      	bcc.n	800d182 <quorem+0xfa>
 800d124:	613c      	str	r4, [r7, #16]
 800d126:	4638      	mov	r0, r7
 800d128:	f001 fe9a 	bl	800ee60 <__mcmp>
 800d12c:	2800      	cmp	r0, #0
 800d12e:	db24      	blt.n	800d17a <quorem+0xf2>
 800d130:	3601      	adds	r6, #1
 800d132:	4628      	mov	r0, r5
 800d134:	f04f 0c00 	mov.w	ip, #0
 800d138:	f858 2b04 	ldr.w	r2, [r8], #4
 800d13c:	f8d0 e000 	ldr.w	lr, [r0]
 800d140:	b293      	uxth	r3, r2
 800d142:	ebac 0303 	sub.w	r3, ip, r3
 800d146:	0c12      	lsrs	r2, r2, #16
 800d148:	fa13 f38e 	uxtah	r3, r3, lr
 800d14c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d150:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d154:	b29b      	uxth	r3, r3
 800d156:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d15a:	45c1      	cmp	r9, r8
 800d15c:	f840 3b04 	str.w	r3, [r0], #4
 800d160:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d164:	d2e8      	bcs.n	800d138 <quorem+0xb0>
 800d166:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d16a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d16e:	b922      	cbnz	r2, 800d17a <quorem+0xf2>
 800d170:	3b04      	subs	r3, #4
 800d172:	429d      	cmp	r5, r3
 800d174:	461a      	mov	r2, r3
 800d176:	d30a      	bcc.n	800d18e <quorem+0x106>
 800d178:	613c      	str	r4, [r7, #16]
 800d17a:	4630      	mov	r0, r6
 800d17c:	b003      	add	sp, #12
 800d17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d182:	6812      	ldr	r2, [r2, #0]
 800d184:	3b04      	subs	r3, #4
 800d186:	2a00      	cmp	r2, #0
 800d188:	d1cc      	bne.n	800d124 <quorem+0x9c>
 800d18a:	3c01      	subs	r4, #1
 800d18c:	e7c7      	b.n	800d11e <quorem+0x96>
 800d18e:	6812      	ldr	r2, [r2, #0]
 800d190:	3b04      	subs	r3, #4
 800d192:	2a00      	cmp	r2, #0
 800d194:	d1f0      	bne.n	800d178 <quorem+0xf0>
 800d196:	3c01      	subs	r4, #1
 800d198:	e7eb      	b.n	800d172 <quorem+0xea>
 800d19a:	2000      	movs	r0, #0
 800d19c:	e7ee      	b.n	800d17c <quorem+0xf4>
	...

0800d1a0 <_dtoa_r>:
 800d1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a4:	ed2d 8b02 	vpush	{d8}
 800d1a8:	ec57 6b10 	vmov	r6, r7, d0
 800d1ac:	b095      	sub	sp, #84	; 0x54
 800d1ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d1b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d1b4:	9105      	str	r1, [sp, #20]
 800d1b6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d1ba:	4604      	mov	r4, r0
 800d1bc:	9209      	str	r2, [sp, #36]	; 0x24
 800d1be:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1c0:	b975      	cbnz	r5, 800d1e0 <_dtoa_r+0x40>
 800d1c2:	2010      	movs	r0, #16
 800d1c4:	f001 fb6a 	bl	800e89c <malloc>
 800d1c8:	4602      	mov	r2, r0
 800d1ca:	6260      	str	r0, [r4, #36]	; 0x24
 800d1cc:	b920      	cbnz	r0, 800d1d8 <_dtoa_r+0x38>
 800d1ce:	4bb2      	ldr	r3, [pc, #712]	; (800d498 <_dtoa_r+0x2f8>)
 800d1d0:	21ea      	movs	r1, #234	; 0xea
 800d1d2:	48b2      	ldr	r0, [pc, #712]	; (800d49c <_dtoa_r+0x2fc>)
 800d1d4:	f002 fad8 	bl	800f788 <__assert_func>
 800d1d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d1dc:	6005      	str	r5, [r0, #0]
 800d1de:	60c5      	str	r5, [r0, #12]
 800d1e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1e2:	6819      	ldr	r1, [r3, #0]
 800d1e4:	b151      	cbz	r1, 800d1fc <_dtoa_r+0x5c>
 800d1e6:	685a      	ldr	r2, [r3, #4]
 800d1e8:	604a      	str	r2, [r1, #4]
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	4093      	lsls	r3, r2
 800d1ee:	608b      	str	r3, [r1, #8]
 800d1f0:	4620      	mov	r0, r4
 800d1f2:	f001 fbad 	bl	800e950 <_Bfree>
 800d1f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	601a      	str	r2, [r3, #0]
 800d1fc:	1e3b      	subs	r3, r7, #0
 800d1fe:	bfb9      	ittee	lt
 800d200:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d204:	9303      	strlt	r3, [sp, #12]
 800d206:	2300      	movge	r3, #0
 800d208:	f8c8 3000 	strge.w	r3, [r8]
 800d20c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d210:	4ba3      	ldr	r3, [pc, #652]	; (800d4a0 <_dtoa_r+0x300>)
 800d212:	bfbc      	itt	lt
 800d214:	2201      	movlt	r2, #1
 800d216:	f8c8 2000 	strlt.w	r2, [r8]
 800d21a:	ea33 0309 	bics.w	r3, r3, r9
 800d21e:	d11b      	bne.n	800d258 <_dtoa_r+0xb8>
 800d220:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d222:	f242 730f 	movw	r3, #9999	; 0x270f
 800d226:	6013      	str	r3, [r2, #0]
 800d228:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d22c:	4333      	orrs	r3, r6
 800d22e:	f000 857a 	beq.w	800dd26 <_dtoa_r+0xb86>
 800d232:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d234:	b963      	cbnz	r3, 800d250 <_dtoa_r+0xb0>
 800d236:	4b9b      	ldr	r3, [pc, #620]	; (800d4a4 <_dtoa_r+0x304>)
 800d238:	e024      	b.n	800d284 <_dtoa_r+0xe4>
 800d23a:	4b9b      	ldr	r3, [pc, #620]	; (800d4a8 <_dtoa_r+0x308>)
 800d23c:	9300      	str	r3, [sp, #0]
 800d23e:	3308      	adds	r3, #8
 800d240:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d242:	6013      	str	r3, [r2, #0]
 800d244:	9800      	ldr	r0, [sp, #0]
 800d246:	b015      	add	sp, #84	; 0x54
 800d248:	ecbd 8b02 	vpop	{d8}
 800d24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d250:	4b94      	ldr	r3, [pc, #592]	; (800d4a4 <_dtoa_r+0x304>)
 800d252:	9300      	str	r3, [sp, #0]
 800d254:	3303      	adds	r3, #3
 800d256:	e7f3      	b.n	800d240 <_dtoa_r+0xa0>
 800d258:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d25c:	2200      	movs	r2, #0
 800d25e:	ec51 0b17 	vmov	r0, r1, d7
 800d262:	2300      	movs	r3, #0
 800d264:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d268:	f7f3 fc4e 	bl	8000b08 <__aeabi_dcmpeq>
 800d26c:	4680      	mov	r8, r0
 800d26e:	b158      	cbz	r0, 800d288 <_dtoa_r+0xe8>
 800d270:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d272:	2301      	movs	r3, #1
 800d274:	6013      	str	r3, [r2, #0]
 800d276:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d278:	2b00      	cmp	r3, #0
 800d27a:	f000 8551 	beq.w	800dd20 <_dtoa_r+0xb80>
 800d27e:	488b      	ldr	r0, [pc, #556]	; (800d4ac <_dtoa_r+0x30c>)
 800d280:	6018      	str	r0, [r3, #0]
 800d282:	1e43      	subs	r3, r0, #1
 800d284:	9300      	str	r3, [sp, #0]
 800d286:	e7dd      	b.n	800d244 <_dtoa_r+0xa4>
 800d288:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d28c:	aa12      	add	r2, sp, #72	; 0x48
 800d28e:	a913      	add	r1, sp, #76	; 0x4c
 800d290:	4620      	mov	r0, r4
 800d292:	f001 ff05 	bl	800f0a0 <__d2b>
 800d296:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d29a:	4683      	mov	fp, r0
 800d29c:	2d00      	cmp	r5, #0
 800d29e:	d07c      	beq.n	800d39a <_dtoa_r+0x1fa>
 800d2a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2a2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800d2a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d2aa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800d2ae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d2b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d2b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d2ba:	4b7d      	ldr	r3, [pc, #500]	; (800d4b0 <_dtoa_r+0x310>)
 800d2bc:	2200      	movs	r2, #0
 800d2be:	4630      	mov	r0, r6
 800d2c0:	4639      	mov	r1, r7
 800d2c2:	f7f3 f801 	bl	80002c8 <__aeabi_dsub>
 800d2c6:	a36e      	add	r3, pc, #440	; (adr r3, 800d480 <_dtoa_r+0x2e0>)
 800d2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2cc:	f7f3 f9b4 	bl	8000638 <__aeabi_dmul>
 800d2d0:	a36d      	add	r3, pc, #436	; (adr r3, 800d488 <_dtoa_r+0x2e8>)
 800d2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d6:	f7f2 fff9 	bl	80002cc <__adddf3>
 800d2da:	4606      	mov	r6, r0
 800d2dc:	4628      	mov	r0, r5
 800d2de:	460f      	mov	r7, r1
 800d2e0:	f7f3 f940 	bl	8000564 <__aeabi_i2d>
 800d2e4:	a36a      	add	r3, pc, #424	; (adr r3, 800d490 <_dtoa_r+0x2f0>)
 800d2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ea:	f7f3 f9a5 	bl	8000638 <__aeabi_dmul>
 800d2ee:	4602      	mov	r2, r0
 800d2f0:	460b      	mov	r3, r1
 800d2f2:	4630      	mov	r0, r6
 800d2f4:	4639      	mov	r1, r7
 800d2f6:	f7f2 ffe9 	bl	80002cc <__adddf3>
 800d2fa:	4606      	mov	r6, r0
 800d2fc:	460f      	mov	r7, r1
 800d2fe:	f7f3 fc4b 	bl	8000b98 <__aeabi_d2iz>
 800d302:	2200      	movs	r2, #0
 800d304:	4682      	mov	sl, r0
 800d306:	2300      	movs	r3, #0
 800d308:	4630      	mov	r0, r6
 800d30a:	4639      	mov	r1, r7
 800d30c:	f7f3 fc06 	bl	8000b1c <__aeabi_dcmplt>
 800d310:	b148      	cbz	r0, 800d326 <_dtoa_r+0x186>
 800d312:	4650      	mov	r0, sl
 800d314:	f7f3 f926 	bl	8000564 <__aeabi_i2d>
 800d318:	4632      	mov	r2, r6
 800d31a:	463b      	mov	r3, r7
 800d31c:	f7f3 fbf4 	bl	8000b08 <__aeabi_dcmpeq>
 800d320:	b908      	cbnz	r0, 800d326 <_dtoa_r+0x186>
 800d322:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d326:	f1ba 0f16 	cmp.w	sl, #22
 800d32a:	d854      	bhi.n	800d3d6 <_dtoa_r+0x236>
 800d32c:	4b61      	ldr	r3, [pc, #388]	; (800d4b4 <_dtoa_r+0x314>)
 800d32e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d336:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d33a:	f7f3 fbef 	bl	8000b1c <__aeabi_dcmplt>
 800d33e:	2800      	cmp	r0, #0
 800d340:	d04b      	beq.n	800d3da <_dtoa_r+0x23a>
 800d342:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d346:	2300      	movs	r3, #0
 800d348:	930e      	str	r3, [sp, #56]	; 0x38
 800d34a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d34c:	1b5d      	subs	r5, r3, r5
 800d34e:	1e6b      	subs	r3, r5, #1
 800d350:	9304      	str	r3, [sp, #16]
 800d352:	bf43      	ittte	mi
 800d354:	2300      	movmi	r3, #0
 800d356:	f1c5 0801 	rsbmi	r8, r5, #1
 800d35a:	9304      	strmi	r3, [sp, #16]
 800d35c:	f04f 0800 	movpl.w	r8, #0
 800d360:	f1ba 0f00 	cmp.w	sl, #0
 800d364:	db3b      	blt.n	800d3de <_dtoa_r+0x23e>
 800d366:	9b04      	ldr	r3, [sp, #16]
 800d368:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800d36c:	4453      	add	r3, sl
 800d36e:	9304      	str	r3, [sp, #16]
 800d370:	2300      	movs	r3, #0
 800d372:	9306      	str	r3, [sp, #24]
 800d374:	9b05      	ldr	r3, [sp, #20]
 800d376:	2b09      	cmp	r3, #9
 800d378:	d869      	bhi.n	800d44e <_dtoa_r+0x2ae>
 800d37a:	2b05      	cmp	r3, #5
 800d37c:	bfc4      	itt	gt
 800d37e:	3b04      	subgt	r3, #4
 800d380:	9305      	strgt	r3, [sp, #20]
 800d382:	9b05      	ldr	r3, [sp, #20]
 800d384:	f1a3 0302 	sub.w	r3, r3, #2
 800d388:	bfcc      	ite	gt
 800d38a:	2500      	movgt	r5, #0
 800d38c:	2501      	movle	r5, #1
 800d38e:	2b03      	cmp	r3, #3
 800d390:	d869      	bhi.n	800d466 <_dtoa_r+0x2c6>
 800d392:	e8df f003 	tbb	[pc, r3]
 800d396:	4e2c      	.short	0x4e2c
 800d398:	5a4c      	.short	0x5a4c
 800d39a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800d39e:	441d      	add	r5, r3
 800d3a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d3a4:	2b20      	cmp	r3, #32
 800d3a6:	bfc1      	itttt	gt
 800d3a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d3ac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d3b0:	fa09 f303 	lslgt.w	r3, r9, r3
 800d3b4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d3b8:	bfda      	itte	le
 800d3ba:	f1c3 0320 	rsble	r3, r3, #32
 800d3be:	fa06 f003 	lslle.w	r0, r6, r3
 800d3c2:	4318      	orrgt	r0, r3
 800d3c4:	f7f3 f8be 	bl	8000544 <__aeabi_ui2d>
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	4606      	mov	r6, r0
 800d3cc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d3d0:	3d01      	subs	r5, #1
 800d3d2:	9310      	str	r3, [sp, #64]	; 0x40
 800d3d4:	e771      	b.n	800d2ba <_dtoa_r+0x11a>
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	e7b6      	b.n	800d348 <_dtoa_r+0x1a8>
 800d3da:	900e      	str	r0, [sp, #56]	; 0x38
 800d3dc:	e7b5      	b.n	800d34a <_dtoa_r+0x1aa>
 800d3de:	f1ca 0300 	rsb	r3, sl, #0
 800d3e2:	9306      	str	r3, [sp, #24]
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	eba8 080a 	sub.w	r8, r8, sl
 800d3ea:	930d      	str	r3, [sp, #52]	; 0x34
 800d3ec:	e7c2      	b.n	800d374 <_dtoa_r+0x1d4>
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	9308      	str	r3, [sp, #32]
 800d3f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	dc39      	bgt.n	800d46c <_dtoa_r+0x2cc>
 800d3f8:	f04f 0901 	mov.w	r9, #1
 800d3fc:	f8cd 9004 	str.w	r9, [sp, #4]
 800d400:	464b      	mov	r3, r9
 800d402:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d406:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d408:	2200      	movs	r2, #0
 800d40a:	6042      	str	r2, [r0, #4]
 800d40c:	2204      	movs	r2, #4
 800d40e:	f102 0614 	add.w	r6, r2, #20
 800d412:	429e      	cmp	r6, r3
 800d414:	6841      	ldr	r1, [r0, #4]
 800d416:	d92f      	bls.n	800d478 <_dtoa_r+0x2d8>
 800d418:	4620      	mov	r0, r4
 800d41a:	f001 fa59 	bl	800e8d0 <_Balloc>
 800d41e:	9000      	str	r0, [sp, #0]
 800d420:	2800      	cmp	r0, #0
 800d422:	d14b      	bne.n	800d4bc <_dtoa_r+0x31c>
 800d424:	4b24      	ldr	r3, [pc, #144]	; (800d4b8 <_dtoa_r+0x318>)
 800d426:	4602      	mov	r2, r0
 800d428:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d42c:	e6d1      	b.n	800d1d2 <_dtoa_r+0x32>
 800d42e:	2301      	movs	r3, #1
 800d430:	e7de      	b.n	800d3f0 <_dtoa_r+0x250>
 800d432:	2300      	movs	r3, #0
 800d434:	9308      	str	r3, [sp, #32]
 800d436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d438:	eb0a 0903 	add.w	r9, sl, r3
 800d43c:	f109 0301 	add.w	r3, r9, #1
 800d440:	2b01      	cmp	r3, #1
 800d442:	9301      	str	r3, [sp, #4]
 800d444:	bfb8      	it	lt
 800d446:	2301      	movlt	r3, #1
 800d448:	e7dd      	b.n	800d406 <_dtoa_r+0x266>
 800d44a:	2301      	movs	r3, #1
 800d44c:	e7f2      	b.n	800d434 <_dtoa_r+0x294>
 800d44e:	2501      	movs	r5, #1
 800d450:	2300      	movs	r3, #0
 800d452:	9305      	str	r3, [sp, #20]
 800d454:	9508      	str	r5, [sp, #32]
 800d456:	f04f 39ff 	mov.w	r9, #4294967295
 800d45a:	2200      	movs	r2, #0
 800d45c:	f8cd 9004 	str.w	r9, [sp, #4]
 800d460:	2312      	movs	r3, #18
 800d462:	9209      	str	r2, [sp, #36]	; 0x24
 800d464:	e7cf      	b.n	800d406 <_dtoa_r+0x266>
 800d466:	2301      	movs	r3, #1
 800d468:	9308      	str	r3, [sp, #32]
 800d46a:	e7f4      	b.n	800d456 <_dtoa_r+0x2b6>
 800d46c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d470:	f8cd 9004 	str.w	r9, [sp, #4]
 800d474:	464b      	mov	r3, r9
 800d476:	e7c6      	b.n	800d406 <_dtoa_r+0x266>
 800d478:	3101      	adds	r1, #1
 800d47a:	6041      	str	r1, [r0, #4]
 800d47c:	0052      	lsls	r2, r2, #1
 800d47e:	e7c6      	b.n	800d40e <_dtoa_r+0x26e>
 800d480:	636f4361 	.word	0x636f4361
 800d484:	3fd287a7 	.word	0x3fd287a7
 800d488:	8b60c8b3 	.word	0x8b60c8b3
 800d48c:	3fc68a28 	.word	0x3fc68a28
 800d490:	509f79fb 	.word	0x509f79fb
 800d494:	3fd34413 	.word	0x3fd34413
 800d498:	08010cde 	.word	0x08010cde
 800d49c:	08010cf5 	.word	0x08010cf5
 800d4a0:	7ff00000 	.word	0x7ff00000
 800d4a4:	08010cda 	.word	0x08010cda
 800d4a8:	08010cd1 	.word	0x08010cd1
 800d4ac:	08010b5d 	.word	0x08010b5d
 800d4b0:	3ff80000 	.word	0x3ff80000
 800d4b4:	08010ed0 	.word	0x08010ed0
 800d4b8:	08010d54 	.word	0x08010d54
 800d4bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4be:	9a00      	ldr	r2, [sp, #0]
 800d4c0:	601a      	str	r2, [r3, #0]
 800d4c2:	9b01      	ldr	r3, [sp, #4]
 800d4c4:	2b0e      	cmp	r3, #14
 800d4c6:	f200 80ad 	bhi.w	800d624 <_dtoa_r+0x484>
 800d4ca:	2d00      	cmp	r5, #0
 800d4cc:	f000 80aa 	beq.w	800d624 <_dtoa_r+0x484>
 800d4d0:	f1ba 0f00 	cmp.w	sl, #0
 800d4d4:	dd36      	ble.n	800d544 <_dtoa_r+0x3a4>
 800d4d6:	4ac3      	ldr	r2, [pc, #780]	; (800d7e4 <_dtoa_r+0x644>)
 800d4d8:	f00a 030f 	and.w	r3, sl, #15
 800d4dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d4e0:	ed93 7b00 	vldr	d7, [r3]
 800d4e4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800d4e8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800d4ec:	eeb0 8a47 	vmov.f32	s16, s14
 800d4f0:	eef0 8a67 	vmov.f32	s17, s15
 800d4f4:	d016      	beq.n	800d524 <_dtoa_r+0x384>
 800d4f6:	4bbc      	ldr	r3, [pc, #752]	; (800d7e8 <_dtoa_r+0x648>)
 800d4f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d4fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d500:	f7f3 f9c4 	bl	800088c <__aeabi_ddiv>
 800d504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d508:	f007 070f 	and.w	r7, r7, #15
 800d50c:	2503      	movs	r5, #3
 800d50e:	4eb6      	ldr	r6, [pc, #728]	; (800d7e8 <_dtoa_r+0x648>)
 800d510:	b957      	cbnz	r7, 800d528 <_dtoa_r+0x388>
 800d512:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d516:	ec53 2b18 	vmov	r2, r3, d8
 800d51a:	f7f3 f9b7 	bl	800088c <__aeabi_ddiv>
 800d51e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d522:	e029      	b.n	800d578 <_dtoa_r+0x3d8>
 800d524:	2502      	movs	r5, #2
 800d526:	e7f2      	b.n	800d50e <_dtoa_r+0x36e>
 800d528:	07f9      	lsls	r1, r7, #31
 800d52a:	d508      	bpl.n	800d53e <_dtoa_r+0x39e>
 800d52c:	ec51 0b18 	vmov	r0, r1, d8
 800d530:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d534:	f7f3 f880 	bl	8000638 <__aeabi_dmul>
 800d538:	ec41 0b18 	vmov	d8, r0, r1
 800d53c:	3501      	adds	r5, #1
 800d53e:	107f      	asrs	r7, r7, #1
 800d540:	3608      	adds	r6, #8
 800d542:	e7e5      	b.n	800d510 <_dtoa_r+0x370>
 800d544:	f000 80a6 	beq.w	800d694 <_dtoa_r+0x4f4>
 800d548:	f1ca 0600 	rsb	r6, sl, #0
 800d54c:	4ba5      	ldr	r3, [pc, #660]	; (800d7e4 <_dtoa_r+0x644>)
 800d54e:	4fa6      	ldr	r7, [pc, #664]	; (800d7e8 <_dtoa_r+0x648>)
 800d550:	f006 020f 	and.w	r2, r6, #15
 800d554:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d55c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d560:	f7f3 f86a 	bl	8000638 <__aeabi_dmul>
 800d564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d568:	1136      	asrs	r6, r6, #4
 800d56a:	2300      	movs	r3, #0
 800d56c:	2502      	movs	r5, #2
 800d56e:	2e00      	cmp	r6, #0
 800d570:	f040 8085 	bne.w	800d67e <_dtoa_r+0x4de>
 800d574:	2b00      	cmp	r3, #0
 800d576:	d1d2      	bne.n	800d51e <_dtoa_r+0x37e>
 800d578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	f000 808c 	beq.w	800d698 <_dtoa_r+0x4f8>
 800d580:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d584:	4b99      	ldr	r3, [pc, #612]	; (800d7ec <_dtoa_r+0x64c>)
 800d586:	2200      	movs	r2, #0
 800d588:	4630      	mov	r0, r6
 800d58a:	4639      	mov	r1, r7
 800d58c:	f7f3 fac6 	bl	8000b1c <__aeabi_dcmplt>
 800d590:	2800      	cmp	r0, #0
 800d592:	f000 8081 	beq.w	800d698 <_dtoa_r+0x4f8>
 800d596:	9b01      	ldr	r3, [sp, #4]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d07d      	beq.n	800d698 <_dtoa_r+0x4f8>
 800d59c:	f1b9 0f00 	cmp.w	r9, #0
 800d5a0:	dd3c      	ble.n	800d61c <_dtoa_r+0x47c>
 800d5a2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d5a6:	9307      	str	r3, [sp, #28]
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	4b91      	ldr	r3, [pc, #580]	; (800d7f0 <_dtoa_r+0x650>)
 800d5ac:	4630      	mov	r0, r6
 800d5ae:	4639      	mov	r1, r7
 800d5b0:	f7f3 f842 	bl	8000638 <__aeabi_dmul>
 800d5b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5b8:	3501      	adds	r5, #1
 800d5ba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800d5be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d5c2:	4628      	mov	r0, r5
 800d5c4:	f7f2 ffce 	bl	8000564 <__aeabi_i2d>
 800d5c8:	4632      	mov	r2, r6
 800d5ca:	463b      	mov	r3, r7
 800d5cc:	f7f3 f834 	bl	8000638 <__aeabi_dmul>
 800d5d0:	4b88      	ldr	r3, [pc, #544]	; (800d7f4 <_dtoa_r+0x654>)
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	f7f2 fe7a 	bl	80002cc <__adddf3>
 800d5d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d5dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5e0:	9303      	str	r3, [sp, #12]
 800d5e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d15c      	bne.n	800d6a2 <_dtoa_r+0x502>
 800d5e8:	4b83      	ldr	r3, [pc, #524]	; (800d7f8 <_dtoa_r+0x658>)
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	4630      	mov	r0, r6
 800d5ee:	4639      	mov	r1, r7
 800d5f0:	f7f2 fe6a 	bl	80002c8 <__aeabi_dsub>
 800d5f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d5f8:	4606      	mov	r6, r0
 800d5fa:	460f      	mov	r7, r1
 800d5fc:	f7f3 faac 	bl	8000b58 <__aeabi_dcmpgt>
 800d600:	2800      	cmp	r0, #0
 800d602:	f040 8296 	bne.w	800db32 <_dtoa_r+0x992>
 800d606:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d60a:	4630      	mov	r0, r6
 800d60c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d610:	4639      	mov	r1, r7
 800d612:	f7f3 fa83 	bl	8000b1c <__aeabi_dcmplt>
 800d616:	2800      	cmp	r0, #0
 800d618:	f040 8288 	bne.w	800db2c <_dtoa_r+0x98c>
 800d61c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d620:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d624:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d626:	2b00      	cmp	r3, #0
 800d628:	f2c0 8158 	blt.w	800d8dc <_dtoa_r+0x73c>
 800d62c:	f1ba 0f0e 	cmp.w	sl, #14
 800d630:	f300 8154 	bgt.w	800d8dc <_dtoa_r+0x73c>
 800d634:	4b6b      	ldr	r3, [pc, #428]	; (800d7e4 <_dtoa_r+0x644>)
 800d636:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d63a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d63e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d640:	2b00      	cmp	r3, #0
 800d642:	f280 80e3 	bge.w	800d80c <_dtoa_r+0x66c>
 800d646:	9b01      	ldr	r3, [sp, #4]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	f300 80df 	bgt.w	800d80c <_dtoa_r+0x66c>
 800d64e:	f040 826d 	bne.w	800db2c <_dtoa_r+0x98c>
 800d652:	4b69      	ldr	r3, [pc, #420]	; (800d7f8 <_dtoa_r+0x658>)
 800d654:	2200      	movs	r2, #0
 800d656:	4640      	mov	r0, r8
 800d658:	4649      	mov	r1, r9
 800d65a:	f7f2 ffed 	bl	8000638 <__aeabi_dmul>
 800d65e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d662:	f7f3 fa6f 	bl	8000b44 <__aeabi_dcmpge>
 800d666:	9e01      	ldr	r6, [sp, #4]
 800d668:	4637      	mov	r7, r6
 800d66a:	2800      	cmp	r0, #0
 800d66c:	f040 8243 	bne.w	800daf6 <_dtoa_r+0x956>
 800d670:	9d00      	ldr	r5, [sp, #0]
 800d672:	2331      	movs	r3, #49	; 0x31
 800d674:	f805 3b01 	strb.w	r3, [r5], #1
 800d678:	f10a 0a01 	add.w	sl, sl, #1
 800d67c:	e23f      	b.n	800dafe <_dtoa_r+0x95e>
 800d67e:	07f2      	lsls	r2, r6, #31
 800d680:	d505      	bpl.n	800d68e <_dtoa_r+0x4ee>
 800d682:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d686:	f7f2 ffd7 	bl	8000638 <__aeabi_dmul>
 800d68a:	3501      	adds	r5, #1
 800d68c:	2301      	movs	r3, #1
 800d68e:	1076      	asrs	r6, r6, #1
 800d690:	3708      	adds	r7, #8
 800d692:	e76c      	b.n	800d56e <_dtoa_r+0x3ce>
 800d694:	2502      	movs	r5, #2
 800d696:	e76f      	b.n	800d578 <_dtoa_r+0x3d8>
 800d698:	9b01      	ldr	r3, [sp, #4]
 800d69a:	f8cd a01c 	str.w	sl, [sp, #28]
 800d69e:	930c      	str	r3, [sp, #48]	; 0x30
 800d6a0:	e78d      	b.n	800d5be <_dtoa_r+0x41e>
 800d6a2:	9900      	ldr	r1, [sp, #0]
 800d6a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d6a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d6a8:	4b4e      	ldr	r3, [pc, #312]	; (800d7e4 <_dtoa_r+0x644>)
 800d6aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d6ae:	4401      	add	r1, r0
 800d6b0:	9102      	str	r1, [sp, #8]
 800d6b2:	9908      	ldr	r1, [sp, #32]
 800d6b4:	eeb0 8a47 	vmov.f32	s16, s14
 800d6b8:	eef0 8a67 	vmov.f32	s17, s15
 800d6bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d6c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d6c4:	2900      	cmp	r1, #0
 800d6c6:	d045      	beq.n	800d754 <_dtoa_r+0x5b4>
 800d6c8:	494c      	ldr	r1, [pc, #304]	; (800d7fc <_dtoa_r+0x65c>)
 800d6ca:	2000      	movs	r0, #0
 800d6cc:	f7f3 f8de 	bl	800088c <__aeabi_ddiv>
 800d6d0:	ec53 2b18 	vmov	r2, r3, d8
 800d6d4:	f7f2 fdf8 	bl	80002c8 <__aeabi_dsub>
 800d6d8:	9d00      	ldr	r5, [sp, #0]
 800d6da:	ec41 0b18 	vmov	d8, r0, r1
 800d6de:	4639      	mov	r1, r7
 800d6e0:	4630      	mov	r0, r6
 800d6e2:	f7f3 fa59 	bl	8000b98 <__aeabi_d2iz>
 800d6e6:	900c      	str	r0, [sp, #48]	; 0x30
 800d6e8:	f7f2 ff3c 	bl	8000564 <__aeabi_i2d>
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	460b      	mov	r3, r1
 800d6f0:	4630      	mov	r0, r6
 800d6f2:	4639      	mov	r1, r7
 800d6f4:	f7f2 fde8 	bl	80002c8 <__aeabi_dsub>
 800d6f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d6fa:	3330      	adds	r3, #48	; 0x30
 800d6fc:	f805 3b01 	strb.w	r3, [r5], #1
 800d700:	ec53 2b18 	vmov	r2, r3, d8
 800d704:	4606      	mov	r6, r0
 800d706:	460f      	mov	r7, r1
 800d708:	f7f3 fa08 	bl	8000b1c <__aeabi_dcmplt>
 800d70c:	2800      	cmp	r0, #0
 800d70e:	d165      	bne.n	800d7dc <_dtoa_r+0x63c>
 800d710:	4632      	mov	r2, r6
 800d712:	463b      	mov	r3, r7
 800d714:	4935      	ldr	r1, [pc, #212]	; (800d7ec <_dtoa_r+0x64c>)
 800d716:	2000      	movs	r0, #0
 800d718:	f7f2 fdd6 	bl	80002c8 <__aeabi_dsub>
 800d71c:	ec53 2b18 	vmov	r2, r3, d8
 800d720:	f7f3 f9fc 	bl	8000b1c <__aeabi_dcmplt>
 800d724:	2800      	cmp	r0, #0
 800d726:	f040 80b9 	bne.w	800d89c <_dtoa_r+0x6fc>
 800d72a:	9b02      	ldr	r3, [sp, #8]
 800d72c:	429d      	cmp	r5, r3
 800d72e:	f43f af75 	beq.w	800d61c <_dtoa_r+0x47c>
 800d732:	4b2f      	ldr	r3, [pc, #188]	; (800d7f0 <_dtoa_r+0x650>)
 800d734:	ec51 0b18 	vmov	r0, r1, d8
 800d738:	2200      	movs	r2, #0
 800d73a:	f7f2 ff7d 	bl	8000638 <__aeabi_dmul>
 800d73e:	4b2c      	ldr	r3, [pc, #176]	; (800d7f0 <_dtoa_r+0x650>)
 800d740:	ec41 0b18 	vmov	d8, r0, r1
 800d744:	2200      	movs	r2, #0
 800d746:	4630      	mov	r0, r6
 800d748:	4639      	mov	r1, r7
 800d74a:	f7f2 ff75 	bl	8000638 <__aeabi_dmul>
 800d74e:	4606      	mov	r6, r0
 800d750:	460f      	mov	r7, r1
 800d752:	e7c4      	b.n	800d6de <_dtoa_r+0x53e>
 800d754:	ec51 0b17 	vmov	r0, r1, d7
 800d758:	f7f2 ff6e 	bl	8000638 <__aeabi_dmul>
 800d75c:	9b02      	ldr	r3, [sp, #8]
 800d75e:	9d00      	ldr	r5, [sp, #0]
 800d760:	930c      	str	r3, [sp, #48]	; 0x30
 800d762:	ec41 0b18 	vmov	d8, r0, r1
 800d766:	4639      	mov	r1, r7
 800d768:	4630      	mov	r0, r6
 800d76a:	f7f3 fa15 	bl	8000b98 <__aeabi_d2iz>
 800d76e:	9011      	str	r0, [sp, #68]	; 0x44
 800d770:	f7f2 fef8 	bl	8000564 <__aeabi_i2d>
 800d774:	4602      	mov	r2, r0
 800d776:	460b      	mov	r3, r1
 800d778:	4630      	mov	r0, r6
 800d77a:	4639      	mov	r1, r7
 800d77c:	f7f2 fda4 	bl	80002c8 <__aeabi_dsub>
 800d780:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d782:	3330      	adds	r3, #48	; 0x30
 800d784:	f805 3b01 	strb.w	r3, [r5], #1
 800d788:	9b02      	ldr	r3, [sp, #8]
 800d78a:	429d      	cmp	r5, r3
 800d78c:	4606      	mov	r6, r0
 800d78e:	460f      	mov	r7, r1
 800d790:	f04f 0200 	mov.w	r2, #0
 800d794:	d134      	bne.n	800d800 <_dtoa_r+0x660>
 800d796:	4b19      	ldr	r3, [pc, #100]	; (800d7fc <_dtoa_r+0x65c>)
 800d798:	ec51 0b18 	vmov	r0, r1, d8
 800d79c:	f7f2 fd96 	bl	80002cc <__adddf3>
 800d7a0:	4602      	mov	r2, r0
 800d7a2:	460b      	mov	r3, r1
 800d7a4:	4630      	mov	r0, r6
 800d7a6:	4639      	mov	r1, r7
 800d7a8:	f7f3 f9d6 	bl	8000b58 <__aeabi_dcmpgt>
 800d7ac:	2800      	cmp	r0, #0
 800d7ae:	d175      	bne.n	800d89c <_dtoa_r+0x6fc>
 800d7b0:	ec53 2b18 	vmov	r2, r3, d8
 800d7b4:	4911      	ldr	r1, [pc, #68]	; (800d7fc <_dtoa_r+0x65c>)
 800d7b6:	2000      	movs	r0, #0
 800d7b8:	f7f2 fd86 	bl	80002c8 <__aeabi_dsub>
 800d7bc:	4602      	mov	r2, r0
 800d7be:	460b      	mov	r3, r1
 800d7c0:	4630      	mov	r0, r6
 800d7c2:	4639      	mov	r1, r7
 800d7c4:	f7f3 f9aa 	bl	8000b1c <__aeabi_dcmplt>
 800d7c8:	2800      	cmp	r0, #0
 800d7ca:	f43f af27 	beq.w	800d61c <_dtoa_r+0x47c>
 800d7ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d7d0:	1e6b      	subs	r3, r5, #1
 800d7d2:	930c      	str	r3, [sp, #48]	; 0x30
 800d7d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d7d8:	2b30      	cmp	r3, #48	; 0x30
 800d7da:	d0f8      	beq.n	800d7ce <_dtoa_r+0x62e>
 800d7dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d7e0:	e04a      	b.n	800d878 <_dtoa_r+0x6d8>
 800d7e2:	bf00      	nop
 800d7e4:	08010ed0 	.word	0x08010ed0
 800d7e8:	08010ea8 	.word	0x08010ea8
 800d7ec:	3ff00000 	.word	0x3ff00000
 800d7f0:	40240000 	.word	0x40240000
 800d7f4:	401c0000 	.word	0x401c0000
 800d7f8:	40140000 	.word	0x40140000
 800d7fc:	3fe00000 	.word	0x3fe00000
 800d800:	4baf      	ldr	r3, [pc, #700]	; (800dac0 <_dtoa_r+0x920>)
 800d802:	f7f2 ff19 	bl	8000638 <__aeabi_dmul>
 800d806:	4606      	mov	r6, r0
 800d808:	460f      	mov	r7, r1
 800d80a:	e7ac      	b.n	800d766 <_dtoa_r+0x5c6>
 800d80c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d810:	9d00      	ldr	r5, [sp, #0]
 800d812:	4642      	mov	r2, r8
 800d814:	464b      	mov	r3, r9
 800d816:	4630      	mov	r0, r6
 800d818:	4639      	mov	r1, r7
 800d81a:	f7f3 f837 	bl	800088c <__aeabi_ddiv>
 800d81e:	f7f3 f9bb 	bl	8000b98 <__aeabi_d2iz>
 800d822:	9002      	str	r0, [sp, #8]
 800d824:	f7f2 fe9e 	bl	8000564 <__aeabi_i2d>
 800d828:	4642      	mov	r2, r8
 800d82a:	464b      	mov	r3, r9
 800d82c:	f7f2 ff04 	bl	8000638 <__aeabi_dmul>
 800d830:	4602      	mov	r2, r0
 800d832:	460b      	mov	r3, r1
 800d834:	4630      	mov	r0, r6
 800d836:	4639      	mov	r1, r7
 800d838:	f7f2 fd46 	bl	80002c8 <__aeabi_dsub>
 800d83c:	9e02      	ldr	r6, [sp, #8]
 800d83e:	9f01      	ldr	r7, [sp, #4]
 800d840:	3630      	adds	r6, #48	; 0x30
 800d842:	f805 6b01 	strb.w	r6, [r5], #1
 800d846:	9e00      	ldr	r6, [sp, #0]
 800d848:	1bae      	subs	r6, r5, r6
 800d84a:	42b7      	cmp	r7, r6
 800d84c:	4602      	mov	r2, r0
 800d84e:	460b      	mov	r3, r1
 800d850:	d137      	bne.n	800d8c2 <_dtoa_r+0x722>
 800d852:	f7f2 fd3b 	bl	80002cc <__adddf3>
 800d856:	4642      	mov	r2, r8
 800d858:	464b      	mov	r3, r9
 800d85a:	4606      	mov	r6, r0
 800d85c:	460f      	mov	r7, r1
 800d85e:	f7f3 f97b 	bl	8000b58 <__aeabi_dcmpgt>
 800d862:	b9c8      	cbnz	r0, 800d898 <_dtoa_r+0x6f8>
 800d864:	4642      	mov	r2, r8
 800d866:	464b      	mov	r3, r9
 800d868:	4630      	mov	r0, r6
 800d86a:	4639      	mov	r1, r7
 800d86c:	f7f3 f94c 	bl	8000b08 <__aeabi_dcmpeq>
 800d870:	b110      	cbz	r0, 800d878 <_dtoa_r+0x6d8>
 800d872:	9b02      	ldr	r3, [sp, #8]
 800d874:	07d9      	lsls	r1, r3, #31
 800d876:	d40f      	bmi.n	800d898 <_dtoa_r+0x6f8>
 800d878:	4620      	mov	r0, r4
 800d87a:	4659      	mov	r1, fp
 800d87c:	f001 f868 	bl	800e950 <_Bfree>
 800d880:	2300      	movs	r3, #0
 800d882:	702b      	strb	r3, [r5, #0]
 800d884:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d886:	f10a 0001 	add.w	r0, sl, #1
 800d88a:	6018      	str	r0, [r3, #0]
 800d88c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d88e:	2b00      	cmp	r3, #0
 800d890:	f43f acd8 	beq.w	800d244 <_dtoa_r+0xa4>
 800d894:	601d      	str	r5, [r3, #0]
 800d896:	e4d5      	b.n	800d244 <_dtoa_r+0xa4>
 800d898:	f8cd a01c 	str.w	sl, [sp, #28]
 800d89c:	462b      	mov	r3, r5
 800d89e:	461d      	mov	r5, r3
 800d8a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d8a4:	2a39      	cmp	r2, #57	; 0x39
 800d8a6:	d108      	bne.n	800d8ba <_dtoa_r+0x71a>
 800d8a8:	9a00      	ldr	r2, [sp, #0]
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d1f7      	bne.n	800d89e <_dtoa_r+0x6fe>
 800d8ae:	9a07      	ldr	r2, [sp, #28]
 800d8b0:	9900      	ldr	r1, [sp, #0]
 800d8b2:	3201      	adds	r2, #1
 800d8b4:	9207      	str	r2, [sp, #28]
 800d8b6:	2230      	movs	r2, #48	; 0x30
 800d8b8:	700a      	strb	r2, [r1, #0]
 800d8ba:	781a      	ldrb	r2, [r3, #0]
 800d8bc:	3201      	adds	r2, #1
 800d8be:	701a      	strb	r2, [r3, #0]
 800d8c0:	e78c      	b.n	800d7dc <_dtoa_r+0x63c>
 800d8c2:	4b7f      	ldr	r3, [pc, #508]	; (800dac0 <_dtoa_r+0x920>)
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	f7f2 feb7 	bl	8000638 <__aeabi_dmul>
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	4606      	mov	r6, r0
 800d8d0:	460f      	mov	r7, r1
 800d8d2:	f7f3 f919 	bl	8000b08 <__aeabi_dcmpeq>
 800d8d6:	2800      	cmp	r0, #0
 800d8d8:	d09b      	beq.n	800d812 <_dtoa_r+0x672>
 800d8da:	e7cd      	b.n	800d878 <_dtoa_r+0x6d8>
 800d8dc:	9a08      	ldr	r2, [sp, #32]
 800d8de:	2a00      	cmp	r2, #0
 800d8e0:	f000 80c4 	beq.w	800da6c <_dtoa_r+0x8cc>
 800d8e4:	9a05      	ldr	r2, [sp, #20]
 800d8e6:	2a01      	cmp	r2, #1
 800d8e8:	f300 80a8 	bgt.w	800da3c <_dtoa_r+0x89c>
 800d8ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d8ee:	2a00      	cmp	r2, #0
 800d8f0:	f000 80a0 	beq.w	800da34 <_dtoa_r+0x894>
 800d8f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d8f8:	9e06      	ldr	r6, [sp, #24]
 800d8fa:	4645      	mov	r5, r8
 800d8fc:	9a04      	ldr	r2, [sp, #16]
 800d8fe:	2101      	movs	r1, #1
 800d900:	441a      	add	r2, r3
 800d902:	4620      	mov	r0, r4
 800d904:	4498      	add	r8, r3
 800d906:	9204      	str	r2, [sp, #16]
 800d908:	f001 f928 	bl	800eb5c <__i2b>
 800d90c:	4607      	mov	r7, r0
 800d90e:	2d00      	cmp	r5, #0
 800d910:	dd0b      	ble.n	800d92a <_dtoa_r+0x78a>
 800d912:	9b04      	ldr	r3, [sp, #16]
 800d914:	2b00      	cmp	r3, #0
 800d916:	dd08      	ble.n	800d92a <_dtoa_r+0x78a>
 800d918:	42ab      	cmp	r3, r5
 800d91a:	9a04      	ldr	r2, [sp, #16]
 800d91c:	bfa8      	it	ge
 800d91e:	462b      	movge	r3, r5
 800d920:	eba8 0803 	sub.w	r8, r8, r3
 800d924:	1aed      	subs	r5, r5, r3
 800d926:	1ad3      	subs	r3, r2, r3
 800d928:	9304      	str	r3, [sp, #16]
 800d92a:	9b06      	ldr	r3, [sp, #24]
 800d92c:	b1fb      	cbz	r3, 800d96e <_dtoa_r+0x7ce>
 800d92e:	9b08      	ldr	r3, [sp, #32]
 800d930:	2b00      	cmp	r3, #0
 800d932:	f000 809f 	beq.w	800da74 <_dtoa_r+0x8d4>
 800d936:	2e00      	cmp	r6, #0
 800d938:	dd11      	ble.n	800d95e <_dtoa_r+0x7be>
 800d93a:	4639      	mov	r1, r7
 800d93c:	4632      	mov	r2, r6
 800d93e:	4620      	mov	r0, r4
 800d940:	f001 f9c8 	bl	800ecd4 <__pow5mult>
 800d944:	465a      	mov	r2, fp
 800d946:	4601      	mov	r1, r0
 800d948:	4607      	mov	r7, r0
 800d94a:	4620      	mov	r0, r4
 800d94c:	f001 f91c 	bl	800eb88 <__multiply>
 800d950:	4659      	mov	r1, fp
 800d952:	9007      	str	r0, [sp, #28]
 800d954:	4620      	mov	r0, r4
 800d956:	f000 fffb 	bl	800e950 <_Bfree>
 800d95a:	9b07      	ldr	r3, [sp, #28]
 800d95c:	469b      	mov	fp, r3
 800d95e:	9b06      	ldr	r3, [sp, #24]
 800d960:	1b9a      	subs	r2, r3, r6
 800d962:	d004      	beq.n	800d96e <_dtoa_r+0x7ce>
 800d964:	4659      	mov	r1, fp
 800d966:	4620      	mov	r0, r4
 800d968:	f001 f9b4 	bl	800ecd4 <__pow5mult>
 800d96c:	4683      	mov	fp, r0
 800d96e:	2101      	movs	r1, #1
 800d970:	4620      	mov	r0, r4
 800d972:	f001 f8f3 	bl	800eb5c <__i2b>
 800d976:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d978:	2b00      	cmp	r3, #0
 800d97a:	4606      	mov	r6, r0
 800d97c:	dd7c      	ble.n	800da78 <_dtoa_r+0x8d8>
 800d97e:	461a      	mov	r2, r3
 800d980:	4601      	mov	r1, r0
 800d982:	4620      	mov	r0, r4
 800d984:	f001 f9a6 	bl	800ecd4 <__pow5mult>
 800d988:	9b05      	ldr	r3, [sp, #20]
 800d98a:	2b01      	cmp	r3, #1
 800d98c:	4606      	mov	r6, r0
 800d98e:	dd76      	ble.n	800da7e <_dtoa_r+0x8de>
 800d990:	2300      	movs	r3, #0
 800d992:	9306      	str	r3, [sp, #24]
 800d994:	6933      	ldr	r3, [r6, #16]
 800d996:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d99a:	6918      	ldr	r0, [r3, #16]
 800d99c:	f001 f88e 	bl	800eabc <__hi0bits>
 800d9a0:	f1c0 0020 	rsb	r0, r0, #32
 800d9a4:	9b04      	ldr	r3, [sp, #16]
 800d9a6:	4418      	add	r0, r3
 800d9a8:	f010 001f 	ands.w	r0, r0, #31
 800d9ac:	f000 8086 	beq.w	800dabc <_dtoa_r+0x91c>
 800d9b0:	f1c0 0320 	rsb	r3, r0, #32
 800d9b4:	2b04      	cmp	r3, #4
 800d9b6:	dd7f      	ble.n	800dab8 <_dtoa_r+0x918>
 800d9b8:	f1c0 001c 	rsb	r0, r0, #28
 800d9bc:	9b04      	ldr	r3, [sp, #16]
 800d9be:	4403      	add	r3, r0
 800d9c0:	4480      	add	r8, r0
 800d9c2:	4405      	add	r5, r0
 800d9c4:	9304      	str	r3, [sp, #16]
 800d9c6:	f1b8 0f00 	cmp.w	r8, #0
 800d9ca:	dd05      	ble.n	800d9d8 <_dtoa_r+0x838>
 800d9cc:	4659      	mov	r1, fp
 800d9ce:	4642      	mov	r2, r8
 800d9d0:	4620      	mov	r0, r4
 800d9d2:	f001 f9d9 	bl	800ed88 <__lshift>
 800d9d6:	4683      	mov	fp, r0
 800d9d8:	9b04      	ldr	r3, [sp, #16]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	dd05      	ble.n	800d9ea <_dtoa_r+0x84a>
 800d9de:	4631      	mov	r1, r6
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	f001 f9d0 	bl	800ed88 <__lshift>
 800d9e8:	4606      	mov	r6, r0
 800d9ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d069      	beq.n	800dac4 <_dtoa_r+0x924>
 800d9f0:	4631      	mov	r1, r6
 800d9f2:	4658      	mov	r0, fp
 800d9f4:	f001 fa34 	bl	800ee60 <__mcmp>
 800d9f8:	2800      	cmp	r0, #0
 800d9fa:	da63      	bge.n	800dac4 <_dtoa_r+0x924>
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	4659      	mov	r1, fp
 800da00:	220a      	movs	r2, #10
 800da02:	4620      	mov	r0, r4
 800da04:	f000 ffc6 	bl	800e994 <__multadd>
 800da08:	9b08      	ldr	r3, [sp, #32]
 800da0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da0e:	4683      	mov	fp, r0
 800da10:	2b00      	cmp	r3, #0
 800da12:	f000 818f 	beq.w	800dd34 <_dtoa_r+0xb94>
 800da16:	4639      	mov	r1, r7
 800da18:	2300      	movs	r3, #0
 800da1a:	220a      	movs	r2, #10
 800da1c:	4620      	mov	r0, r4
 800da1e:	f000 ffb9 	bl	800e994 <__multadd>
 800da22:	f1b9 0f00 	cmp.w	r9, #0
 800da26:	4607      	mov	r7, r0
 800da28:	f300 808e 	bgt.w	800db48 <_dtoa_r+0x9a8>
 800da2c:	9b05      	ldr	r3, [sp, #20]
 800da2e:	2b02      	cmp	r3, #2
 800da30:	dc50      	bgt.n	800dad4 <_dtoa_r+0x934>
 800da32:	e089      	b.n	800db48 <_dtoa_r+0x9a8>
 800da34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800da36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800da3a:	e75d      	b.n	800d8f8 <_dtoa_r+0x758>
 800da3c:	9b01      	ldr	r3, [sp, #4]
 800da3e:	1e5e      	subs	r6, r3, #1
 800da40:	9b06      	ldr	r3, [sp, #24]
 800da42:	42b3      	cmp	r3, r6
 800da44:	bfbf      	itttt	lt
 800da46:	9b06      	ldrlt	r3, [sp, #24]
 800da48:	9606      	strlt	r6, [sp, #24]
 800da4a:	1af2      	sublt	r2, r6, r3
 800da4c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800da4e:	bfb6      	itet	lt
 800da50:	189b      	addlt	r3, r3, r2
 800da52:	1b9e      	subge	r6, r3, r6
 800da54:	930d      	strlt	r3, [sp, #52]	; 0x34
 800da56:	9b01      	ldr	r3, [sp, #4]
 800da58:	bfb8      	it	lt
 800da5a:	2600      	movlt	r6, #0
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	bfb5      	itete	lt
 800da60:	eba8 0503 	sublt.w	r5, r8, r3
 800da64:	9b01      	ldrge	r3, [sp, #4]
 800da66:	2300      	movlt	r3, #0
 800da68:	4645      	movge	r5, r8
 800da6a:	e747      	b.n	800d8fc <_dtoa_r+0x75c>
 800da6c:	9e06      	ldr	r6, [sp, #24]
 800da6e:	9f08      	ldr	r7, [sp, #32]
 800da70:	4645      	mov	r5, r8
 800da72:	e74c      	b.n	800d90e <_dtoa_r+0x76e>
 800da74:	9a06      	ldr	r2, [sp, #24]
 800da76:	e775      	b.n	800d964 <_dtoa_r+0x7c4>
 800da78:	9b05      	ldr	r3, [sp, #20]
 800da7a:	2b01      	cmp	r3, #1
 800da7c:	dc18      	bgt.n	800dab0 <_dtoa_r+0x910>
 800da7e:	9b02      	ldr	r3, [sp, #8]
 800da80:	b9b3      	cbnz	r3, 800dab0 <_dtoa_r+0x910>
 800da82:	9b03      	ldr	r3, [sp, #12]
 800da84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da88:	b9a3      	cbnz	r3, 800dab4 <_dtoa_r+0x914>
 800da8a:	9b03      	ldr	r3, [sp, #12]
 800da8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800da90:	0d1b      	lsrs	r3, r3, #20
 800da92:	051b      	lsls	r3, r3, #20
 800da94:	b12b      	cbz	r3, 800daa2 <_dtoa_r+0x902>
 800da96:	9b04      	ldr	r3, [sp, #16]
 800da98:	3301      	adds	r3, #1
 800da9a:	9304      	str	r3, [sp, #16]
 800da9c:	f108 0801 	add.w	r8, r8, #1
 800daa0:	2301      	movs	r3, #1
 800daa2:	9306      	str	r3, [sp, #24]
 800daa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	f47f af74 	bne.w	800d994 <_dtoa_r+0x7f4>
 800daac:	2001      	movs	r0, #1
 800daae:	e779      	b.n	800d9a4 <_dtoa_r+0x804>
 800dab0:	2300      	movs	r3, #0
 800dab2:	e7f6      	b.n	800daa2 <_dtoa_r+0x902>
 800dab4:	9b02      	ldr	r3, [sp, #8]
 800dab6:	e7f4      	b.n	800daa2 <_dtoa_r+0x902>
 800dab8:	d085      	beq.n	800d9c6 <_dtoa_r+0x826>
 800daba:	4618      	mov	r0, r3
 800dabc:	301c      	adds	r0, #28
 800dabe:	e77d      	b.n	800d9bc <_dtoa_r+0x81c>
 800dac0:	40240000 	.word	0x40240000
 800dac4:	9b01      	ldr	r3, [sp, #4]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	dc38      	bgt.n	800db3c <_dtoa_r+0x99c>
 800daca:	9b05      	ldr	r3, [sp, #20]
 800dacc:	2b02      	cmp	r3, #2
 800dace:	dd35      	ble.n	800db3c <_dtoa_r+0x99c>
 800dad0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800dad4:	f1b9 0f00 	cmp.w	r9, #0
 800dad8:	d10d      	bne.n	800daf6 <_dtoa_r+0x956>
 800dada:	4631      	mov	r1, r6
 800dadc:	464b      	mov	r3, r9
 800dade:	2205      	movs	r2, #5
 800dae0:	4620      	mov	r0, r4
 800dae2:	f000 ff57 	bl	800e994 <__multadd>
 800dae6:	4601      	mov	r1, r0
 800dae8:	4606      	mov	r6, r0
 800daea:	4658      	mov	r0, fp
 800daec:	f001 f9b8 	bl	800ee60 <__mcmp>
 800daf0:	2800      	cmp	r0, #0
 800daf2:	f73f adbd 	bgt.w	800d670 <_dtoa_r+0x4d0>
 800daf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daf8:	9d00      	ldr	r5, [sp, #0]
 800dafa:	ea6f 0a03 	mvn.w	sl, r3
 800dafe:	f04f 0800 	mov.w	r8, #0
 800db02:	4631      	mov	r1, r6
 800db04:	4620      	mov	r0, r4
 800db06:	f000 ff23 	bl	800e950 <_Bfree>
 800db0a:	2f00      	cmp	r7, #0
 800db0c:	f43f aeb4 	beq.w	800d878 <_dtoa_r+0x6d8>
 800db10:	f1b8 0f00 	cmp.w	r8, #0
 800db14:	d005      	beq.n	800db22 <_dtoa_r+0x982>
 800db16:	45b8      	cmp	r8, r7
 800db18:	d003      	beq.n	800db22 <_dtoa_r+0x982>
 800db1a:	4641      	mov	r1, r8
 800db1c:	4620      	mov	r0, r4
 800db1e:	f000 ff17 	bl	800e950 <_Bfree>
 800db22:	4639      	mov	r1, r7
 800db24:	4620      	mov	r0, r4
 800db26:	f000 ff13 	bl	800e950 <_Bfree>
 800db2a:	e6a5      	b.n	800d878 <_dtoa_r+0x6d8>
 800db2c:	2600      	movs	r6, #0
 800db2e:	4637      	mov	r7, r6
 800db30:	e7e1      	b.n	800daf6 <_dtoa_r+0x956>
 800db32:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800db34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800db38:	4637      	mov	r7, r6
 800db3a:	e599      	b.n	800d670 <_dtoa_r+0x4d0>
 800db3c:	9b08      	ldr	r3, [sp, #32]
 800db3e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800db42:	2b00      	cmp	r3, #0
 800db44:	f000 80fd 	beq.w	800dd42 <_dtoa_r+0xba2>
 800db48:	2d00      	cmp	r5, #0
 800db4a:	dd05      	ble.n	800db58 <_dtoa_r+0x9b8>
 800db4c:	4639      	mov	r1, r7
 800db4e:	462a      	mov	r2, r5
 800db50:	4620      	mov	r0, r4
 800db52:	f001 f919 	bl	800ed88 <__lshift>
 800db56:	4607      	mov	r7, r0
 800db58:	9b06      	ldr	r3, [sp, #24]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d05c      	beq.n	800dc18 <_dtoa_r+0xa78>
 800db5e:	6879      	ldr	r1, [r7, #4]
 800db60:	4620      	mov	r0, r4
 800db62:	f000 feb5 	bl	800e8d0 <_Balloc>
 800db66:	4605      	mov	r5, r0
 800db68:	b928      	cbnz	r0, 800db76 <_dtoa_r+0x9d6>
 800db6a:	4b80      	ldr	r3, [pc, #512]	; (800dd6c <_dtoa_r+0xbcc>)
 800db6c:	4602      	mov	r2, r0
 800db6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800db72:	f7ff bb2e 	b.w	800d1d2 <_dtoa_r+0x32>
 800db76:	693a      	ldr	r2, [r7, #16]
 800db78:	3202      	adds	r2, #2
 800db7a:	0092      	lsls	r2, r2, #2
 800db7c:	f107 010c 	add.w	r1, r7, #12
 800db80:	300c      	adds	r0, #12
 800db82:	f7fd fdf1 	bl	800b768 <memcpy>
 800db86:	2201      	movs	r2, #1
 800db88:	4629      	mov	r1, r5
 800db8a:	4620      	mov	r0, r4
 800db8c:	f001 f8fc 	bl	800ed88 <__lshift>
 800db90:	9b00      	ldr	r3, [sp, #0]
 800db92:	3301      	adds	r3, #1
 800db94:	9301      	str	r3, [sp, #4]
 800db96:	9b00      	ldr	r3, [sp, #0]
 800db98:	444b      	add	r3, r9
 800db9a:	9307      	str	r3, [sp, #28]
 800db9c:	9b02      	ldr	r3, [sp, #8]
 800db9e:	f003 0301 	and.w	r3, r3, #1
 800dba2:	46b8      	mov	r8, r7
 800dba4:	9306      	str	r3, [sp, #24]
 800dba6:	4607      	mov	r7, r0
 800dba8:	9b01      	ldr	r3, [sp, #4]
 800dbaa:	4631      	mov	r1, r6
 800dbac:	3b01      	subs	r3, #1
 800dbae:	4658      	mov	r0, fp
 800dbb0:	9302      	str	r3, [sp, #8]
 800dbb2:	f7ff fa69 	bl	800d088 <quorem>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	3330      	adds	r3, #48	; 0x30
 800dbba:	9004      	str	r0, [sp, #16]
 800dbbc:	4641      	mov	r1, r8
 800dbbe:	4658      	mov	r0, fp
 800dbc0:	9308      	str	r3, [sp, #32]
 800dbc2:	f001 f94d 	bl	800ee60 <__mcmp>
 800dbc6:	463a      	mov	r2, r7
 800dbc8:	4681      	mov	r9, r0
 800dbca:	4631      	mov	r1, r6
 800dbcc:	4620      	mov	r0, r4
 800dbce:	f001 f963 	bl	800ee98 <__mdiff>
 800dbd2:	68c2      	ldr	r2, [r0, #12]
 800dbd4:	9b08      	ldr	r3, [sp, #32]
 800dbd6:	4605      	mov	r5, r0
 800dbd8:	bb02      	cbnz	r2, 800dc1c <_dtoa_r+0xa7c>
 800dbda:	4601      	mov	r1, r0
 800dbdc:	4658      	mov	r0, fp
 800dbde:	f001 f93f 	bl	800ee60 <__mcmp>
 800dbe2:	9b08      	ldr	r3, [sp, #32]
 800dbe4:	4602      	mov	r2, r0
 800dbe6:	4629      	mov	r1, r5
 800dbe8:	4620      	mov	r0, r4
 800dbea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800dbee:	f000 feaf 	bl	800e950 <_Bfree>
 800dbf2:	9b05      	ldr	r3, [sp, #20]
 800dbf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbf6:	9d01      	ldr	r5, [sp, #4]
 800dbf8:	ea43 0102 	orr.w	r1, r3, r2
 800dbfc:	9b06      	ldr	r3, [sp, #24]
 800dbfe:	430b      	orrs	r3, r1
 800dc00:	9b08      	ldr	r3, [sp, #32]
 800dc02:	d10d      	bne.n	800dc20 <_dtoa_r+0xa80>
 800dc04:	2b39      	cmp	r3, #57	; 0x39
 800dc06:	d029      	beq.n	800dc5c <_dtoa_r+0xabc>
 800dc08:	f1b9 0f00 	cmp.w	r9, #0
 800dc0c:	dd01      	ble.n	800dc12 <_dtoa_r+0xa72>
 800dc0e:	9b04      	ldr	r3, [sp, #16]
 800dc10:	3331      	adds	r3, #49	; 0x31
 800dc12:	9a02      	ldr	r2, [sp, #8]
 800dc14:	7013      	strb	r3, [r2, #0]
 800dc16:	e774      	b.n	800db02 <_dtoa_r+0x962>
 800dc18:	4638      	mov	r0, r7
 800dc1a:	e7b9      	b.n	800db90 <_dtoa_r+0x9f0>
 800dc1c:	2201      	movs	r2, #1
 800dc1e:	e7e2      	b.n	800dbe6 <_dtoa_r+0xa46>
 800dc20:	f1b9 0f00 	cmp.w	r9, #0
 800dc24:	db06      	blt.n	800dc34 <_dtoa_r+0xa94>
 800dc26:	9905      	ldr	r1, [sp, #20]
 800dc28:	ea41 0909 	orr.w	r9, r1, r9
 800dc2c:	9906      	ldr	r1, [sp, #24]
 800dc2e:	ea59 0101 	orrs.w	r1, r9, r1
 800dc32:	d120      	bne.n	800dc76 <_dtoa_r+0xad6>
 800dc34:	2a00      	cmp	r2, #0
 800dc36:	ddec      	ble.n	800dc12 <_dtoa_r+0xa72>
 800dc38:	4659      	mov	r1, fp
 800dc3a:	2201      	movs	r2, #1
 800dc3c:	4620      	mov	r0, r4
 800dc3e:	9301      	str	r3, [sp, #4]
 800dc40:	f001 f8a2 	bl	800ed88 <__lshift>
 800dc44:	4631      	mov	r1, r6
 800dc46:	4683      	mov	fp, r0
 800dc48:	f001 f90a 	bl	800ee60 <__mcmp>
 800dc4c:	2800      	cmp	r0, #0
 800dc4e:	9b01      	ldr	r3, [sp, #4]
 800dc50:	dc02      	bgt.n	800dc58 <_dtoa_r+0xab8>
 800dc52:	d1de      	bne.n	800dc12 <_dtoa_r+0xa72>
 800dc54:	07da      	lsls	r2, r3, #31
 800dc56:	d5dc      	bpl.n	800dc12 <_dtoa_r+0xa72>
 800dc58:	2b39      	cmp	r3, #57	; 0x39
 800dc5a:	d1d8      	bne.n	800dc0e <_dtoa_r+0xa6e>
 800dc5c:	9a02      	ldr	r2, [sp, #8]
 800dc5e:	2339      	movs	r3, #57	; 0x39
 800dc60:	7013      	strb	r3, [r2, #0]
 800dc62:	462b      	mov	r3, r5
 800dc64:	461d      	mov	r5, r3
 800dc66:	3b01      	subs	r3, #1
 800dc68:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dc6c:	2a39      	cmp	r2, #57	; 0x39
 800dc6e:	d050      	beq.n	800dd12 <_dtoa_r+0xb72>
 800dc70:	3201      	adds	r2, #1
 800dc72:	701a      	strb	r2, [r3, #0]
 800dc74:	e745      	b.n	800db02 <_dtoa_r+0x962>
 800dc76:	2a00      	cmp	r2, #0
 800dc78:	dd03      	ble.n	800dc82 <_dtoa_r+0xae2>
 800dc7a:	2b39      	cmp	r3, #57	; 0x39
 800dc7c:	d0ee      	beq.n	800dc5c <_dtoa_r+0xabc>
 800dc7e:	3301      	adds	r3, #1
 800dc80:	e7c7      	b.n	800dc12 <_dtoa_r+0xa72>
 800dc82:	9a01      	ldr	r2, [sp, #4]
 800dc84:	9907      	ldr	r1, [sp, #28]
 800dc86:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dc8a:	428a      	cmp	r2, r1
 800dc8c:	d02a      	beq.n	800dce4 <_dtoa_r+0xb44>
 800dc8e:	4659      	mov	r1, fp
 800dc90:	2300      	movs	r3, #0
 800dc92:	220a      	movs	r2, #10
 800dc94:	4620      	mov	r0, r4
 800dc96:	f000 fe7d 	bl	800e994 <__multadd>
 800dc9a:	45b8      	cmp	r8, r7
 800dc9c:	4683      	mov	fp, r0
 800dc9e:	f04f 0300 	mov.w	r3, #0
 800dca2:	f04f 020a 	mov.w	r2, #10
 800dca6:	4641      	mov	r1, r8
 800dca8:	4620      	mov	r0, r4
 800dcaa:	d107      	bne.n	800dcbc <_dtoa_r+0xb1c>
 800dcac:	f000 fe72 	bl	800e994 <__multadd>
 800dcb0:	4680      	mov	r8, r0
 800dcb2:	4607      	mov	r7, r0
 800dcb4:	9b01      	ldr	r3, [sp, #4]
 800dcb6:	3301      	adds	r3, #1
 800dcb8:	9301      	str	r3, [sp, #4]
 800dcba:	e775      	b.n	800dba8 <_dtoa_r+0xa08>
 800dcbc:	f000 fe6a 	bl	800e994 <__multadd>
 800dcc0:	4639      	mov	r1, r7
 800dcc2:	4680      	mov	r8, r0
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	220a      	movs	r2, #10
 800dcc8:	4620      	mov	r0, r4
 800dcca:	f000 fe63 	bl	800e994 <__multadd>
 800dcce:	4607      	mov	r7, r0
 800dcd0:	e7f0      	b.n	800dcb4 <_dtoa_r+0xb14>
 800dcd2:	f1b9 0f00 	cmp.w	r9, #0
 800dcd6:	9a00      	ldr	r2, [sp, #0]
 800dcd8:	bfcc      	ite	gt
 800dcda:	464d      	movgt	r5, r9
 800dcdc:	2501      	movle	r5, #1
 800dcde:	4415      	add	r5, r2
 800dce0:	f04f 0800 	mov.w	r8, #0
 800dce4:	4659      	mov	r1, fp
 800dce6:	2201      	movs	r2, #1
 800dce8:	4620      	mov	r0, r4
 800dcea:	9301      	str	r3, [sp, #4]
 800dcec:	f001 f84c 	bl	800ed88 <__lshift>
 800dcf0:	4631      	mov	r1, r6
 800dcf2:	4683      	mov	fp, r0
 800dcf4:	f001 f8b4 	bl	800ee60 <__mcmp>
 800dcf8:	2800      	cmp	r0, #0
 800dcfa:	dcb2      	bgt.n	800dc62 <_dtoa_r+0xac2>
 800dcfc:	d102      	bne.n	800dd04 <_dtoa_r+0xb64>
 800dcfe:	9b01      	ldr	r3, [sp, #4]
 800dd00:	07db      	lsls	r3, r3, #31
 800dd02:	d4ae      	bmi.n	800dc62 <_dtoa_r+0xac2>
 800dd04:	462b      	mov	r3, r5
 800dd06:	461d      	mov	r5, r3
 800dd08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dd0c:	2a30      	cmp	r2, #48	; 0x30
 800dd0e:	d0fa      	beq.n	800dd06 <_dtoa_r+0xb66>
 800dd10:	e6f7      	b.n	800db02 <_dtoa_r+0x962>
 800dd12:	9a00      	ldr	r2, [sp, #0]
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d1a5      	bne.n	800dc64 <_dtoa_r+0xac4>
 800dd18:	f10a 0a01 	add.w	sl, sl, #1
 800dd1c:	2331      	movs	r3, #49	; 0x31
 800dd1e:	e779      	b.n	800dc14 <_dtoa_r+0xa74>
 800dd20:	4b13      	ldr	r3, [pc, #76]	; (800dd70 <_dtoa_r+0xbd0>)
 800dd22:	f7ff baaf 	b.w	800d284 <_dtoa_r+0xe4>
 800dd26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	f47f aa86 	bne.w	800d23a <_dtoa_r+0x9a>
 800dd2e:	4b11      	ldr	r3, [pc, #68]	; (800dd74 <_dtoa_r+0xbd4>)
 800dd30:	f7ff baa8 	b.w	800d284 <_dtoa_r+0xe4>
 800dd34:	f1b9 0f00 	cmp.w	r9, #0
 800dd38:	dc03      	bgt.n	800dd42 <_dtoa_r+0xba2>
 800dd3a:	9b05      	ldr	r3, [sp, #20]
 800dd3c:	2b02      	cmp	r3, #2
 800dd3e:	f73f aec9 	bgt.w	800dad4 <_dtoa_r+0x934>
 800dd42:	9d00      	ldr	r5, [sp, #0]
 800dd44:	4631      	mov	r1, r6
 800dd46:	4658      	mov	r0, fp
 800dd48:	f7ff f99e 	bl	800d088 <quorem>
 800dd4c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800dd50:	f805 3b01 	strb.w	r3, [r5], #1
 800dd54:	9a00      	ldr	r2, [sp, #0]
 800dd56:	1aaa      	subs	r2, r5, r2
 800dd58:	4591      	cmp	r9, r2
 800dd5a:	ddba      	ble.n	800dcd2 <_dtoa_r+0xb32>
 800dd5c:	4659      	mov	r1, fp
 800dd5e:	2300      	movs	r3, #0
 800dd60:	220a      	movs	r2, #10
 800dd62:	4620      	mov	r0, r4
 800dd64:	f000 fe16 	bl	800e994 <__multadd>
 800dd68:	4683      	mov	fp, r0
 800dd6a:	e7eb      	b.n	800dd44 <_dtoa_r+0xba4>
 800dd6c:	08010d54 	.word	0x08010d54
 800dd70:	08010b5c 	.word	0x08010b5c
 800dd74:	08010cd1 	.word	0x08010cd1

0800dd78 <__sflush_r>:
 800dd78:	898a      	ldrh	r2, [r1, #12]
 800dd7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd7e:	4605      	mov	r5, r0
 800dd80:	0710      	lsls	r0, r2, #28
 800dd82:	460c      	mov	r4, r1
 800dd84:	d458      	bmi.n	800de38 <__sflush_r+0xc0>
 800dd86:	684b      	ldr	r3, [r1, #4]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	dc05      	bgt.n	800dd98 <__sflush_r+0x20>
 800dd8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	dc02      	bgt.n	800dd98 <__sflush_r+0x20>
 800dd92:	2000      	movs	r0, #0
 800dd94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd9a:	2e00      	cmp	r6, #0
 800dd9c:	d0f9      	beq.n	800dd92 <__sflush_r+0x1a>
 800dd9e:	2300      	movs	r3, #0
 800dda0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dda4:	682f      	ldr	r7, [r5, #0]
 800dda6:	602b      	str	r3, [r5, #0]
 800dda8:	d032      	beq.n	800de10 <__sflush_r+0x98>
 800ddaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ddac:	89a3      	ldrh	r3, [r4, #12]
 800ddae:	075a      	lsls	r2, r3, #29
 800ddb0:	d505      	bpl.n	800ddbe <__sflush_r+0x46>
 800ddb2:	6863      	ldr	r3, [r4, #4]
 800ddb4:	1ac0      	subs	r0, r0, r3
 800ddb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ddb8:	b10b      	cbz	r3, 800ddbe <__sflush_r+0x46>
 800ddba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ddbc:	1ac0      	subs	r0, r0, r3
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	4602      	mov	r2, r0
 800ddc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ddc4:	6a21      	ldr	r1, [r4, #32]
 800ddc6:	4628      	mov	r0, r5
 800ddc8:	47b0      	blx	r6
 800ddca:	1c43      	adds	r3, r0, #1
 800ddcc:	89a3      	ldrh	r3, [r4, #12]
 800ddce:	d106      	bne.n	800ddde <__sflush_r+0x66>
 800ddd0:	6829      	ldr	r1, [r5, #0]
 800ddd2:	291d      	cmp	r1, #29
 800ddd4:	d82c      	bhi.n	800de30 <__sflush_r+0xb8>
 800ddd6:	4a2a      	ldr	r2, [pc, #168]	; (800de80 <__sflush_r+0x108>)
 800ddd8:	40ca      	lsrs	r2, r1
 800ddda:	07d6      	lsls	r6, r2, #31
 800dddc:	d528      	bpl.n	800de30 <__sflush_r+0xb8>
 800ddde:	2200      	movs	r2, #0
 800dde0:	6062      	str	r2, [r4, #4]
 800dde2:	04d9      	lsls	r1, r3, #19
 800dde4:	6922      	ldr	r2, [r4, #16]
 800dde6:	6022      	str	r2, [r4, #0]
 800dde8:	d504      	bpl.n	800ddf4 <__sflush_r+0x7c>
 800ddea:	1c42      	adds	r2, r0, #1
 800ddec:	d101      	bne.n	800ddf2 <__sflush_r+0x7a>
 800ddee:	682b      	ldr	r3, [r5, #0]
 800ddf0:	b903      	cbnz	r3, 800ddf4 <__sflush_r+0x7c>
 800ddf2:	6560      	str	r0, [r4, #84]	; 0x54
 800ddf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddf6:	602f      	str	r7, [r5, #0]
 800ddf8:	2900      	cmp	r1, #0
 800ddfa:	d0ca      	beq.n	800dd92 <__sflush_r+0x1a>
 800ddfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de00:	4299      	cmp	r1, r3
 800de02:	d002      	beq.n	800de0a <__sflush_r+0x92>
 800de04:	4628      	mov	r0, r5
 800de06:	f001 fa2d 	bl	800f264 <_free_r>
 800de0a:	2000      	movs	r0, #0
 800de0c:	6360      	str	r0, [r4, #52]	; 0x34
 800de0e:	e7c1      	b.n	800dd94 <__sflush_r+0x1c>
 800de10:	6a21      	ldr	r1, [r4, #32]
 800de12:	2301      	movs	r3, #1
 800de14:	4628      	mov	r0, r5
 800de16:	47b0      	blx	r6
 800de18:	1c41      	adds	r1, r0, #1
 800de1a:	d1c7      	bne.n	800ddac <__sflush_r+0x34>
 800de1c:	682b      	ldr	r3, [r5, #0]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d0c4      	beq.n	800ddac <__sflush_r+0x34>
 800de22:	2b1d      	cmp	r3, #29
 800de24:	d001      	beq.n	800de2a <__sflush_r+0xb2>
 800de26:	2b16      	cmp	r3, #22
 800de28:	d101      	bne.n	800de2e <__sflush_r+0xb6>
 800de2a:	602f      	str	r7, [r5, #0]
 800de2c:	e7b1      	b.n	800dd92 <__sflush_r+0x1a>
 800de2e:	89a3      	ldrh	r3, [r4, #12]
 800de30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de34:	81a3      	strh	r3, [r4, #12]
 800de36:	e7ad      	b.n	800dd94 <__sflush_r+0x1c>
 800de38:	690f      	ldr	r7, [r1, #16]
 800de3a:	2f00      	cmp	r7, #0
 800de3c:	d0a9      	beq.n	800dd92 <__sflush_r+0x1a>
 800de3e:	0793      	lsls	r3, r2, #30
 800de40:	680e      	ldr	r6, [r1, #0]
 800de42:	bf08      	it	eq
 800de44:	694b      	ldreq	r3, [r1, #20]
 800de46:	600f      	str	r7, [r1, #0]
 800de48:	bf18      	it	ne
 800de4a:	2300      	movne	r3, #0
 800de4c:	eba6 0807 	sub.w	r8, r6, r7
 800de50:	608b      	str	r3, [r1, #8]
 800de52:	f1b8 0f00 	cmp.w	r8, #0
 800de56:	dd9c      	ble.n	800dd92 <__sflush_r+0x1a>
 800de58:	6a21      	ldr	r1, [r4, #32]
 800de5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800de5c:	4643      	mov	r3, r8
 800de5e:	463a      	mov	r2, r7
 800de60:	4628      	mov	r0, r5
 800de62:	47b0      	blx	r6
 800de64:	2800      	cmp	r0, #0
 800de66:	dc06      	bgt.n	800de76 <__sflush_r+0xfe>
 800de68:	89a3      	ldrh	r3, [r4, #12]
 800de6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de6e:	81a3      	strh	r3, [r4, #12]
 800de70:	f04f 30ff 	mov.w	r0, #4294967295
 800de74:	e78e      	b.n	800dd94 <__sflush_r+0x1c>
 800de76:	4407      	add	r7, r0
 800de78:	eba8 0800 	sub.w	r8, r8, r0
 800de7c:	e7e9      	b.n	800de52 <__sflush_r+0xda>
 800de7e:	bf00      	nop
 800de80:	20400001 	.word	0x20400001

0800de84 <_fflush_r>:
 800de84:	b538      	push	{r3, r4, r5, lr}
 800de86:	690b      	ldr	r3, [r1, #16]
 800de88:	4605      	mov	r5, r0
 800de8a:	460c      	mov	r4, r1
 800de8c:	b913      	cbnz	r3, 800de94 <_fflush_r+0x10>
 800de8e:	2500      	movs	r5, #0
 800de90:	4628      	mov	r0, r5
 800de92:	bd38      	pop	{r3, r4, r5, pc}
 800de94:	b118      	cbz	r0, 800de9e <_fflush_r+0x1a>
 800de96:	6983      	ldr	r3, [r0, #24]
 800de98:	b90b      	cbnz	r3, 800de9e <_fflush_r+0x1a>
 800de9a:	f000 f887 	bl	800dfac <__sinit>
 800de9e:	4b14      	ldr	r3, [pc, #80]	; (800def0 <_fflush_r+0x6c>)
 800dea0:	429c      	cmp	r4, r3
 800dea2:	d11b      	bne.n	800dedc <_fflush_r+0x58>
 800dea4:	686c      	ldr	r4, [r5, #4]
 800dea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d0ef      	beq.n	800de8e <_fflush_r+0xa>
 800deae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800deb0:	07d0      	lsls	r0, r2, #31
 800deb2:	d404      	bmi.n	800debe <_fflush_r+0x3a>
 800deb4:	0599      	lsls	r1, r3, #22
 800deb6:	d402      	bmi.n	800debe <_fflush_r+0x3a>
 800deb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800deba:	f000 fc88 	bl	800e7ce <__retarget_lock_acquire_recursive>
 800debe:	4628      	mov	r0, r5
 800dec0:	4621      	mov	r1, r4
 800dec2:	f7ff ff59 	bl	800dd78 <__sflush_r>
 800dec6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dec8:	07da      	lsls	r2, r3, #31
 800deca:	4605      	mov	r5, r0
 800decc:	d4e0      	bmi.n	800de90 <_fflush_r+0xc>
 800dece:	89a3      	ldrh	r3, [r4, #12]
 800ded0:	059b      	lsls	r3, r3, #22
 800ded2:	d4dd      	bmi.n	800de90 <_fflush_r+0xc>
 800ded4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ded6:	f000 fc7b 	bl	800e7d0 <__retarget_lock_release_recursive>
 800deda:	e7d9      	b.n	800de90 <_fflush_r+0xc>
 800dedc:	4b05      	ldr	r3, [pc, #20]	; (800def4 <_fflush_r+0x70>)
 800dede:	429c      	cmp	r4, r3
 800dee0:	d101      	bne.n	800dee6 <_fflush_r+0x62>
 800dee2:	68ac      	ldr	r4, [r5, #8]
 800dee4:	e7df      	b.n	800dea6 <_fflush_r+0x22>
 800dee6:	4b04      	ldr	r3, [pc, #16]	; (800def8 <_fflush_r+0x74>)
 800dee8:	429c      	cmp	r4, r3
 800deea:	bf08      	it	eq
 800deec:	68ec      	ldreq	r4, [r5, #12]
 800deee:	e7da      	b.n	800dea6 <_fflush_r+0x22>
 800def0:	08010d88 	.word	0x08010d88
 800def4:	08010da8 	.word	0x08010da8
 800def8:	08010d68 	.word	0x08010d68

0800defc <std>:
 800defc:	2300      	movs	r3, #0
 800defe:	b510      	push	{r4, lr}
 800df00:	4604      	mov	r4, r0
 800df02:	e9c0 3300 	strd	r3, r3, [r0]
 800df06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800df0a:	6083      	str	r3, [r0, #8]
 800df0c:	8181      	strh	r1, [r0, #12]
 800df0e:	6643      	str	r3, [r0, #100]	; 0x64
 800df10:	81c2      	strh	r2, [r0, #14]
 800df12:	6183      	str	r3, [r0, #24]
 800df14:	4619      	mov	r1, r3
 800df16:	2208      	movs	r2, #8
 800df18:	305c      	adds	r0, #92	; 0x5c
 800df1a:	f7fd fc33 	bl	800b784 <memset>
 800df1e:	4b05      	ldr	r3, [pc, #20]	; (800df34 <std+0x38>)
 800df20:	6263      	str	r3, [r4, #36]	; 0x24
 800df22:	4b05      	ldr	r3, [pc, #20]	; (800df38 <std+0x3c>)
 800df24:	62a3      	str	r3, [r4, #40]	; 0x28
 800df26:	4b05      	ldr	r3, [pc, #20]	; (800df3c <std+0x40>)
 800df28:	62e3      	str	r3, [r4, #44]	; 0x2c
 800df2a:	4b05      	ldr	r3, [pc, #20]	; (800df40 <std+0x44>)
 800df2c:	6224      	str	r4, [r4, #32]
 800df2e:	6323      	str	r3, [r4, #48]	; 0x30
 800df30:	bd10      	pop	{r4, pc}
 800df32:	bf00      	nop
 800df34:	0800f6a1 	.word	0x0800f6a1
 800df38:	0800f6c3 	.word	0x0800f6c3
 800df3c:	0800f6fb 	.word	0x0800f6fb
 800df40:	0800f71f 	.word	0x0800f71f

0800df44 <_cleanup_r>:
 800df44:	4901      	ldr	r1, [pc, #4]	; (800df4c <_cleanup_r+0x8>)
 800df46:	f000 b8af 	b.w	800e0a8 <_fwalk_reent>
 800df4a:	bf00      	nop
 800df4c:	0800de85 	.word	0x0800de85

0800df50 <__sfmoreglue>:
 800df50:	b570      	push	{r4, r5, r6, lr}
 800df52:	1e4a      	subs	r2, r1, #1
 800df54:	2568      	movs	r5, #104	; 0x68
 800df56:	4355      	muls	r5, r2
 800df58:	460e      	mov	r6, r1
 800df5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800df5e:	f001 f9d1 	bl	800f304 <_malloc_r>
 800df62:	4604      	mov	r4, r0
 800df64:	b140      	cbz	r0, 800df78 <__sfmoreglue+0x28>
 800df66:	2100      	movs	r1, #0
 800df68:	e9c0 1600 	strd	r1, r6, [r0]
 800df6c:	300c      	adds	r0, #12
 800df6e:	60a0      	str	r0, [r4, #8]
 800df70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800df74:	f7fd fc06 	bl	800b784 <memset>
 800df78:	4620      	mov	r0, r4
 800df7a:	bd70      	pop	{r4, r5, r6, pc}

0800df7c <__sfp_lock_acquire>:
 800df7c:	4801      	ldr	r0, [pc, #4]	; (800df84 <__sfp_lock_acquire+0x8>)
 800df7e:	f000 bc26 	b.w	800e7ce <__retarget_lock_acquire_recursive>
 800df82:	bf00      	nop
 800df84:	20009550 	.word	0x20009550

0800df88 <__sfp_lock_release>:
 800df88:	4801      	ldr	r0, [pc, #4]	; (800df90 <__sfp_lock_release+0x8>)
 800df8a:	f000 bc21 	b.w	800e7d0 <__retarget_lock_release_recursive>
 800df8e:	bf00      	nop
 800df90:	20009550 	.word	0x20009550

0800df94 <__sinit_lock_acquire>:
 800df94:	4801      	ldr	r0, [pc, #4]	; (800df9c <__sinit_lock_acquire+0x8>)
 800df96:	f000 bc1a 	b.w	800e7ce <__retarget_lock_acquire_recursive>
 800df9a:	bf00      	nop
 800df9c:	2000954b 	.word	0x2000954b

0800dfa0 <__sinit_lock_release>:
 800dfa0:	4801      	ldr	r0, [pc, #4]	; (800dfa8 <__sinit_lock_release+0x8>)
 800dfa2:	f000 bc15 	b.w	800e7d0 <__retarget_lock_release_recursive>
 800dfa6:	bf00      	nop
 800dfa8:	2000954b 	.word	0x2000954b

0800dfac <__sinit>:
 800dfac:	b510      	push	{r4, lr}
 800dfae:	4604      	mov	r4, r0
 800dfb0:	f7ff fff0 	bl	800df94 <__sinit_lock_acquire>
 800dfb4:	69a3      	ldr	r3, [r4, #24]
 800dfb6:	b11b      	cbz	r3, 800dfc0 <__sinit+0x14>
 800dfb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfbc:	f7ff bff0 	b.w	800dfa0 <__sinit_lock_release>
 800dfc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dfc4:	6523      	str	r3, [r4, #80]	; 0x50
 800dfc6:	4b13      	ldr	r3, [pc, #76]	; (800e014 <__sinit+0x68>)
 800dfc8:	4a13      	ldr	r2, [pc, #76]	; (800e018 <__sinit+0x6c>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	62a2      	str	r2, [r4, #40]	; 0x28
 800dfce:	42a3      	cmp	r3, r4
 800dfd0:	bf04      	itt	eq
 800dfd2:	2301      	moveq	r3, #1
 800dfd4:	61a3      	streq	r3, [r4, #24]
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	f000 f820 	bl	800e01c <__sfp>
 800dfdc:	6060      	str	r0, [r4, #4]
 800dfde:	4620      	mov	r0, r4
 800dfe0:	f000 f81c 	bl	800e01c <__sfp>
 800dfe4:	60a0      	str	r0, [r4, #8]
 800dfe6:	4620      	mov	r0, r4
 800dfe8:	f000 f818 	bl	800e01c <__sfp>
 800dfec:	2200      	movs	r2, #0
 800dfee:	60e0      	str	r0, [r4, #12]
 800dff0:	2104      	movs	r1, #4
 800dff2:	6860      	ldr	r0, [r4, #4]
 800dff4:	f7ff ff82 	bl	800defc <std>
 800dff8:	68a0      	ldr	r0, [r4, #8]
 800dffa:	2201      	movs	r2, #1
 800dffc:	2109      	movs	r1, #9
 800dffe:	f7ff ff7d 	bl	800defc <std>
 800e002:	68e0      	ldr	r0, [r4, #12]
 800e004:	2202      	movs	r2, #2
 800e006:	2112      	movs	r1, #18
 800e008:	f7ff ff78 	bl	800defc <std>
 800e00c:	2301      	movs	r3, #1
 800e00e:	61a3      	str	r3, [r4, #24]
 800e010:	e7d2      	b.n	800dfb8 <__sinit+0xc>
 800e012:	bf00      	nop
 800e014:	08010b48 	.word	0x08010b48
 800e018:	0800df45 	.word	0x0800df45

0800e01c <__sfp>:
 800e01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e01e:	4607      	mov	r7, r0
 800e020:	f7ff ffac 	bl	800df7c <__sfp_lock_acquire>
 800e024:	4b1e      	ldr	r3, [pc, #120]	; (800e0a0 <__sfp+0x84>)
 800e026:	681e      	ldr	r6, [r3, #0]
 800e028:	69b3      	ldr	r3, [r6, #24]
 800e02a:	b913      	cbnz	r3, 800e032 <__sfp+0x16>
 800e02c:	4630      	mov	r0, r6
 800e02e:	f7ff ffbd 	bl	800dfac <__sinit>
 800e032:	3648      	adds	r6, #72	; 0x48
 800e034:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e038:	3b01      	subs	r3, #1
 800e03a:	d503      	bpl.n	800e044 <__sfp+0x28>
 800e03c:	6833      	ldr	r3, [r6, #0]
 800e03e:	b30b      	cbz	r3, 800e084 <__sfp+0x68>
 800e040:	6836      	ldr	r6, [r6, #0]
 800e042:	e7f7      	b.n	800e034 <__sfp+0x18>
 800e044:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e048:	b9d5      	cbnz	r5, 800e080 <__sfp+0x64>
 800e04a:	4b16      	ldr	r3, [pc, #88]	; (800e0a4 <__sfp+0x88>)
 800e04c:	60e3      	str	r3, [r4, #12]
 800e04e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e052:	6665      	str	r5, [r4, #100]	; 0x64
 800e054:	f000 fbba 	bl	800e7cc <__retarget_lock_init_recursive>
 800e058:	f7ff ff96 	bl	800df88 <__sfp_lock_release>
 800e05c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e060:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e064:	6025      	str	r5, [r4, #0]
 800e066:	61a5      	str	r5, [r4, #24]
 800e068:	2208      	movs	r2, #8
 800e06a:	4629      	mov	r1, r5
 800e06c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e070:	f7fd fb88 	bl	800b784 <memset>
 800e074:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e078:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e07c:	4620      	mov	r0, r4
 800e07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e080:	3468      	adds	r4, #104	; 0x68
 800e082:	e7d9      	b.n	800e038 <__sfp+0x1c>
 800e084:	2104      	movs	r1, #4
 800e086:	4638      	mov	r0, r7
 800e088:	f7ff ff62 	bl	800df50 <__sfmoreglue>
 800e08c:	4604      	mov	r4, r0
 800e08e:	6030      	str	r0, [r6, #0]
 800e090:	2800      	cmp	r0, #0
 800e092:	d1d5      	bne.n	800e040 <__sfp+0x24>
 800e094:	f7ff ff78 	bl	800df88 <__sfp_lock_release>
 800e098:	230c      	movs	r3, #12
 800e09a:	603b      	str	r3, [r7, #0]
 800e09c:	e7ee      	b.n	800e07c <__sfp+0x60>
 800e09e:	bf00      	nop
 800e0a0:	08010b48 	.word	0x08010b48
 800e0a4:	ffff0001 	.word	0xffff0001

0800e0a8 <_fwalk_reent>:
 800e0a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0ac:	4606      	mov	r6, r0
 800e0ae:	4688      	mov	r8, r1
 800e0b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e0b4:	2700      	movs	r7, #0
 800e0b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e0ba:	f1b9 0901 	subs.w	r9, r9, #1
 800e0be:	d505      	bpl.n	800e0cc <_fwalk_reent+0x24>
 800e0c0:	6824      	ldr	r4, [r4, #0]
 800e0c2:	2c00      	cmp	r4, #0
 800e0c4:	d1f7      	bne.n	800e0b6 <_fwalk_reent+0xe>
 800e0c6:	4638      	mov	r0, r7
 800e0c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0cc:	89ab      	ldrh	r3, [r5, #12]
 800e0ce:	2b01      	cmp	r3, #1
 800e0d0:	d907      	bls.n	800e0e2 <_fwalk_reent+0x3a>
 800e0d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e0d6:	3301      	adds	r3, #1
 800e0d8:	d003      	beq.n	800e0e2 <_fwalk_reent+0x3a>
 800e0da:	4629      	mov	r1, r5
 800e0dc:	4630      	mov	r0, r6
 800e0de:	47c0      	blx	r8
 800e0e0:	4307      	orrs	r7, r0
 800e0e2:	3568      	adds	r5, #104	; 0x68
 800e0e4:	e7e9      	b.n	800e0ba <_fwalk_reent+0x12>

0800e0e6 <rshift>:
 800e0e6:	6903      	ldr	r3, [r0, #16]
 800e0e8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e0ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e0f0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e0f4:	f100 0414 	add.w	r4, r0, #20
 800e0f8:	dd45      	ble.n	800e186 <rshift+0xa0>
 800e0fa:	f011 011f 	ands.w	r1, r1, #31
 800e0fe:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e102:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e106:	d10c      	bne.n	800e122 <rshift+0x3c>
 800e108:	f100 0710 	add.w	r7, r0, #16
 800e10c:	4629      	mov	r1, r5
 800e10e:	42b1      	cmp	r1, r6
 800e110:	d334      	bcc.n	800e17c <rshift+0x96>
 800e112:	1a9b      	subs	r3, r3, r2
 800e114:	009b      	lsls	r3, r3, #2
 800e116:	1eea      	subs	r2, r5, #3
 800e118:	4296      	cmp	r6, r2
 800e11a:	bf38      	it	cc
 800e11c:	2300      	movcc	r3, #0
 800e11e:	4423      	add	r3, r4
 800e120:	e015      	b.n	800e14e <rshift+0x68>
 800e122:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e126:	f1c1 0820 	rsb	r8, r1, #32
 800e12a:	40cf      	lsrs	r7, r1
 800e12c:	f105 0e04 	add.w	lr, r5, #4
 800e130:	46a1      	mov	r9, r4
 800e132:	4576      	cmp	r6, lr
 800e134:	46f4      	mov	ip, lr
 800e136:	d815      	bhi.n	800e164 <rshift+0x7e>
 800e138:	1a9b      	subs	r3, r3, r2
 800e13a:	009a      	lsls	r2, r3, #2
 800e13c:	3a04      	subs	r2, #4
 800e13e:	3501      	adds	r5, #1
 800e140:	42ae      	cmp	r6, r5
 800e142:	bf38      	it	cc
 800e144:	2200      	movcc	r2, #0
 800e146:	18a3      	adds	r3, r4, r2
 800e148:	50a7      	str	r7, [r4, r2]
 800e14a:	b107      	cbz	r7, 800e14e <rshift+0x68>
 800e14c:	3304      	adds	r3, #4
 800e14e:	1b1a      	subs	r2, r3, r4
 800e150:	42a3      	cmp	r3, r4
 800e152:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e156:	bf08      	it	eq
 800e158:	2300      	moveq	r3, #0
 800e15a:	6102      	str	r2, [r0, #16]
 800e15c:	bf08      	it	eq
 800e15e:	6143      	streq	r3, [r0, #20]
 800e160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e164:	f8dc c000 	ldr.w	ip, [ip]
 800e168:	fa0c fc08 	lsl.w	ip, ip, r8
 800e16c:	ea4c 0707 	orr.w	r7, ip, r7
 800e170:	f849 7b04 	str.w	r7, [r9], #4
 800e174:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e178:	40cf      	lsrs	r7, r1
 800e17a:	e7da      	b.n	800e132 <rshift+0x4c>
 800e17c:	f851 cb04 	ldr.w	ip, [r1], #4
 800e180:	f847 cf04 	str.w	ip, [r7, #4]!
 800e184:	e7c3      	b.n	800e10e <rshift+0x28>
 800e186:	4623      	mov	r3, r4
 800e188:	e7e1      	b.n	800e14e <rshift+0x68>

0800e18a <__hexdig_fun>:
 800e18a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e18e:	2b09      	cmp	r3, #9
 800e190:	d802      	bhi.n	800e198 <__hexdig_fun+0xe>
 800e192:	3820      	subs	r0, #32
 800e194:	b2c0      	uxtb	r0, r0
 800e196:	4770      	bx	lr
 800e198:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e19c:	2b05      	cmp	r3, #5
 800e19e:	d801      	bhi.n	800e1a4 <__hexdig_fun+0x1a>
 800e1a0:	3847      	subs	r0, #71	; 0x47
 800e1a2:	e7f7      	b.n	800e194 <__hexdig_fun+0xa>
 800e1a4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e1a8:	2b05      	cmp	r3, #5
 800e1aa:	d801      	bhi.n	800e1b0 <__hexdig_fun+0x26>
 800e1ac:	3827      	subs	r0, #39	; 0x27
 800e1ae:	e7f1      	b.n	800e194 <__hexdig_fun+0xa>
 800e1b0:	2000      	movs	r0, #0
 800e1b2:	4770      	bx	lr

0800e1b4 <__gethex>:
 800e1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1b8:	ed2d 8b02 	vpush	{d8}
 800e1bc:	b089      	sub	sp, #36	; 0x24
 800e1be:	ee08 0a10 	vmov	s16, r0
 800e1c2:	9304      	str	r3, [sp, #16]
 800e1c4:	4bbc      	ldr	r3, [pc, #752]	; (800e4b8 <__gethex+0x304>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	9301      	str	r3, [sp, #4]
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	468b      	mov	fp, r1
 800e1ce:	4690      	mov	r8, r2
 800e1d0:	f7f2 f81e 	bl	8000210 <strlen>
 800e1d4:	9b01      	ldr	r3, [sp, #4]
 800e1d6:	f8db 2000 	ldr.w	r2, [fp]
 800e1da:	4403      	add	r3, r0
 800e1dc:	4682      	mov	sl, r0
 800e1de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e1e2:	9305      	str	r3, [sp, #20]
 800e1e4:	1c93      	adds	r3, r2, #2
 800e1e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e1ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e1ee:	32fe      	adds	r2, #254	; 0xfe
 800e1f0:	18d1      	adds	r1, r2, r3
 800e1f2:	461f      	mov	r7, r3
 800e1f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e1f8:	9100      	str	r1, [sp, #0]
 800e1fa:	2830      	cmp	r0, #48	; 0x30
 800e1fc:	d0f8      	beq.n	800e1f0 <__gethex+0x3c>
 800e1fe:	f7ff ffc4 	bl	800e18a <__hexdig_fun>
 800e202:	4604      	mov	r4, r0
 800e204:	2800      	cmp	r0, #0
 800e206:	d13a      	bne.n	800e27e <__gethex+0xca>
 800e208:	9901      	ldr	r1, [sp, #4]
 800e20a:	4652      	mov	r2, sl
 800e20c:	4638      	mov	r0, r7
 800e20e:	f001 fa8a 	bl	800f726 <strncmp>
 800e212:	4605      	mov	r5, r0
 800e214:	2800      	cmp	r0, #0
 800e216:	d168      	bne.n	800e2ea <__gethex+0x136>
 800e218:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e21c:	eb07 060a 	add.w	r6, r7, sl
 800e220:	f7ff ffb3 	bl	800e18a <__hexdig_fun>
 800e224:	2800      	cmp	r0, #0
 800e226:	d062      	beq.n	800e2ee <__gethex+0x13a>
 800e228:	4633      	mov	r3, r6
 800e22a:	7818      	ldrb	r0, [r3, #0]
 800e22c:	2830      	cmp	r0, #48	; 0x30
 800e22e:	461f      	mov	r7, r3
 800e230:	f103 0301 	add.w	r3, r3, #1
 800e234:	d0f9      	beq.n	800e22a <__gethex+0x76>
 800e236:	f7ff ffa8 	bl	800e18a <__hexdig_fun>
 800e23a:	2301      	movs	r3, #1
 800e23c:	fab0 f480 	clz	r4, r0
 800e240:	0964      	lsrs	r4, r4, #5
 800e242:	4635      	mov	r5, r6
 800e244:	9300      	str	r3, [sp, #0]
 800e246:	463a      	mov	r2, r7
 800e248:	4616      	mov	r6, r2
 800e24a:	3201      	adds	r2, #1
 800e24c:	7830      	ldrb	r0, [r6, #0]
 800e24e:	f7ff ff9c 	bl	800e18a <__hexdig_fun>
 800e252:	2800      	cmp	r0, #0
 800e254:	d1f8      	bne.n	800e248 <__gethex+0x94>
 800e256:	9901      	ldr	r1, [sp, #4]
 800e258:	4652      	mov	r2, sl
 800e25a:	4630      	mov	r0, r6
 800e25c:	f001 fa63 	bl	800f726 <strncmp>
 800e260:	b980      	cbnz	r0, 800e284 <__gethex+0xd0>
 800e262:	b94d      	cbnz	r5, 800e278 <__gethex+0xc4>
 800e264:	eb06 050a 	add.w	r5, r6, sl
 800e268:	462a      	mov	r2, r5
 800e26a:	4616      	mov	r6, r2
 800e26c:	3201      	adds	r2, #1
 800e26e:	7830      	ldrb	r0, [r6, #0]
 800e270:	f7ff ff8b 	bl	800e18a <__hexdig_fun>
 800e274:	2800      	cmp	r0, #0
 800e276:	d1f8      	bne.n	800e26a <__gethex+0xb6>
 800e278:	1bad      	subs	r5, r5, r6
 800e27a:	00ad      	lsls	r5, r5, #2
 800e27c:	e004      	b.n	800e288 <__gethex+0xd4>
 800e27e:	2400      	movs	r4, #0
 800e280:	4625      	mov	r5, r4
 800e282:	e7e0      	b.n	800e246 <__gethex+0x92>
 800e284:	2d00      	cmp	r5, #0
 800e286:	d1f7      	bne.n	800e278 <__gethex+0xc4>
 800e288:	7833      	ldrb	r3, [r6, #0]
 800e28a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e28e:	2b50      	cmp	r3, #80	; 0x50
 800e290:	d13b      	bne.n	800e30a <__gethex+0x156>
 800e292:	7873      	ldrb	r3, [r6, #1]
 800e294:	2b2b      	cmp	r3, #43	; 0x2b
 800e296:	d02c      	beq.n	800e2f2 <__gethex+0x13e>
 800e298:	2b2d      	cmp	r3, #45	; 0x2d
 800e29a:	d02e      	beq.n	800e2fa <__gethex+0x146>
 800e29c:	1c71      	adds	r1, r6, #1
 800e29e:	f04f 0900 	mov.w	r9, #0
 800e2a2:	7808      	ldrb	r0, [r1, #0]
 800e2a4:	f7ff ff71 	bl	800e18a <__hexdig_fun>
 800e2a8:	1e43      	subs	r3, r0, #1
 800e2aa:	b2db      	uxtb	r3, r3
 800e2ac:	2b18      	cmp	r3, #24
 800e2ae:	d82c      	bhi.n	800e30a <__gethex+0x156>
 800e2b0:	f1a0 0210 	sub.w	r2, r0, #16
 800e2b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e2b8:	f7ff ff67 	bl	800e18a <__hexdig_fun>
 800e2bc:	1e43      	subs	r3, r0, #1
 800e2be:	b2db      	uxtb	r3, r3
 800e2c0:	2b18      	cmp	r3, #24
 800e2c2:	d91d      	bls.n	800e300 <__gethex+0x14c>
 800e2c4:	f1b9 0f00 	cmp.w	r9, #0
 800e2c8:	d000      	beq.n	800e2cc <__gethex+0x118>
 800e2ca:	4252      	negs	r2, r2
 800e2cc:	4415      	add	r5, r2
 800e2ce:	f8cb 1000 	str.w	r1, [fp]
 800e2d2:	b1e4      	cbz	r4, 800e30e <__gethex+0x15a>
 800e2d4:	9b00      	ldr	r3, [sp, #0]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	bf14      	ite	ne
 800e2da:	2700      	movne	r7, #0
 800e2dc:	2706      	moveq	r7, #6
 800e2de:	4638      	mov	r0, r7
 800e2e0:	b009      	add	sp, #36	; 0x24
 800e2e2:	ecbd 8b02 	vpop	{d8}
 800e2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2ea:	463e      	mov	r6, r7
 800e2ec:	4625      	mov	r5, r4
 800e2ee:	2401      	movs	r4, #1
 800e2f0:	e7ca      	b.n	800e288 <__gethex+0xd4>
 800e2f2:	f04f 0900 	mov.w	r9, #0
 800e2f6:	1cb1      	adds	r1, r6, #2
 800e2f8:	e7d3      	b.n	800e2a2 <__gethex+0xee>
 800e2fa:	f04f 0901 	mov.w	r9, #1
 800e2fe:	e7fa      	b.n	800e2f6 <__gethex+0x142>
 800e300:	230a      	movs	r3, #10
 800e302:	fb03 0202 	mla	r2, r3, r2, r0
 800e306:	3a10      	subs	r2, #16
 800e308:	e7d4      	b.n	800e2b4 <__gethex+0x100>
 800e30a:	4631      	mov	r1, r6
 800e30c:	e7df      	b.n	800e2ce <__gethex+0x11a>
 800e30e:	1bf3      	subs	r3, r6, r7
 800e310:	3b01      	subs	r3, #1
 800e312:	4621      	mov	r1, r4
 800e314:	2b07      	cmp	r3, #7
 800e316:	dc0b      	bgt.n	800e330 <__gethex+0x17c>
 800e318:	ee18 0a10 	vmov	r0, s16
 800e31c:	f000 fad8 	bl	800e8d0 <_Balloc>
 800e320:	4604      	mov	r4, r0
 800e322:	b940      	cbnz	r0, 800e336 <__gethex+0x182>
 800e324:	4b65      	ldr	r3, [pc, #404]	; (800e4bc <__gethex+0x308>)
 800e326:	4602      	mov	r2, r0
 800e328:	21de      	movs	r1, #222	; 0xde
 800e32a:	4865      	ldr	r0, [pc, #404]	; (800e4c0 <__gethex+0x30c>)
 800e32c:	f001 fa2c 	bl	800f788 <__assert_func>
 800e330:	3101      	adds	r1, #1
 800e332:	105b      	asrs	r3, r3, #1
 800e334:	e7ee      	b.n	800e314 <__gethex+0x160>
 800e336:	f100 0914 	add.w	r9, r0, #20
 800e33a:	f04f 0b00 	mov.w	fp, #0
 800e33e:	f1ca 0301 	rsb	r3, sl, #1
 800e342:	f8cd 9008 	str.w	r9, [sp, #8]
 800e346:	f8cd b000 	str.w	fp, [sp]
 800e34a:	9306      	str	r3, [sp, #24]
 800e34c:	42b7      	cmp	r7, r6
 800e34e:	d340      	bcc.n	800e3d2 <__gethex+0x21e>
 800e350:	9802      	ldr	r0, [sp, #8]
 800e352:	9b00      	ldr	r3, [sp, #0]
 800e354:	f840 3b04 	str.w	r3, [r0], #4
 800e358:	eba0 0009 	sub.w	r0, r0, r9
 800e35c:	1080      	asrs	r0, r0, #2
 800e35e:	0146      	lsls	r6, r0, #5
 800e360:	6120      	str	r0, [r4, #16]
 800e362:	4618      	mov	r0, r3
 800e364:	f000 fbaa 	bl	800eabc <__hi0bits>
 800e368:	1a30      	subs	r0, r6, r0
 800e36a:	f8d8 6000 	ldr.w	r6, [r8]
 800e36e:	42b0      	cmp	r0, r6
 800e370:	dd63      	ble.n	800e43a <__gethex+0x286>
 800e372:	1b87      	subs	r7, r0, r6
 800e374:	4639      	mov	r1, r7
 800e376:	4620      	mov	r0, r4
 800e378:	f000 ff44 	bl	800f204 <__any_on>
 800e37c:	4682      	mov	sl, r0
 800e37e:	b1a8      	cbz	r0, 800e3ac <__gethex+0x1f8>
 800e380:	1e7b      	subs	r3, r7, #1
 800e382:	1159      	asrs	r1, r3, #5
 800e384:	f003 021f 	and.w	r2, r3, #31
 800e388:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e38c:	f04f 0a01 	mov.w	sl, #1
 800e390:	fa0a f202 	lsl.w	r2, sl, r2
 800e394:	420a      	tst	r2, r1
 800e396:	d009      	beq.n	800e3ac <__gethex+0x1f8>
 800e398:	4553      	cmp	r3, sl
 800e39a:	dd05      	ble.n	800e3a8 <__gethex+0x1f4>
 800e39c:	1eb9      	subs	r1, r7, #2
 800e39e:	4620      	mov	r0, r4
 800e3a0:	f000 ff30 	bl	800f204 <__any_on>
 800e3a4:	2800      	cmp	r0, #0
 800e3a6:	d145      	bne.n	800e434 <__gethex+0x280>
 800e3a8:	f04f 0a02 	mov.w	sl, #2
 800e3ac:	4639      	mov	r1, r7
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	f7ff fe99 	bl	800e0e6 <rshift>
 800e3b4:	443d      	add	r5, r7
 800e3b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e3ba:	42ab      	cmp	r3, r5
 800e3bc:	da4c      	bge.n	800e458 <__gethex+0x2a4>
 800e3be:	ee18 0a10 	vmov	r0, s16
 800e3c2:	4621      	mov	r1, r4
 800e3c4:	f000 fac4 	bl	800e950 <_Bfree>
 800e3c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	6013      	str	r3, [r2, #0]
 800e3ce:	27a3      	movs	r7, #163	; 0xa3
 800e3d0:	e785      	b.n	800e2de <__gethex+0x12a>
 800e3d2:	1e73      	subs	r3, r6, #1
 800e3d4:	9a05      	ldr	r2, [sp, #20]
 800e3d6:	9303      	str	r3, [sp, #12]
 800e3d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e3dc:	4293      	cmp	r3, r2
 800e3de:	d019      	beq.n	800e414 <__gethex+0x260>
 800e3e0:	f1bb 0f20 	cmp.w	fp, #32
 800e3e4:	d107      	bne.n	800e3f6 <__gethex+0x242>
 800e3e6:	9b02      	ldr	r3, [sp, #8]
 800e3e8:	9a00      	ldr	r2, [sp, #0]
 800e3ea:	f843 2b04 	str.w	r2, [r3], #4
 800e3ee:	9302      	str	r3, [sp, #8]
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	9300      	str	r3, [sp, #0]
 800e3f4:	469b      	mov	fp, r3
 800e3f6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e3fa:	f7ff fec6 	bl	800e18a <__hexdig_fun>
 800e3fe:	9b00      	ldr	r3, [sp, #0]
 800e400:	f000 000f 	and.w	r0, r0, #15
 800e404:	fa00 f00b 	lsl.w	r0, r0, fp
 800e408:	4303      	orrs	r3, r0
 800e40a:	9300      	str	r3, [sp, #0]
 800e40c:	f10b 0b04 	add.w	fp, fp, #4
 800e410:	9b03      	ldr	r3, [sp, #12]
 800e412:	e00d      	b.n	800e430 <__gethex+0x27c>
 800e414:	9b03      	ldr	r3, [sp, #12]
 800e416:	9a06      	ldr	r2, [sp, #24]
 800e418:	4413      	add	r3, r2
 800e41a:	42bb      	cmp	r3, r7
 800e41c:	d3e0      	bcc.n	800e3e0 <__gethex+0x22c>
 800e41e:	4618      	mov	r0, r3
 800e420:	9901      	ldr	r1, [sp, #4]
 800e422:	9307      	str	r3, [sp, #28]
 800e424:	4652      	mov	r2, sl
 800e426:	f001 f97e 	bl	800f726 <strncmp>
 800e42a:	9b07      	ldr	r3, [sp, #28]
 800e42c:	2800      	cmp	r0, #0
 800e42e:	d1d7      	bne.n	800e3e0 <__gethex+0x22c>
 800e430:	461e      	mov	r6, r3
 800e432:	e78b      	b.n	800e34c <__gethex+0x198>
 800e434:	f04f 0a03 	mov.w	sl, #3
 800e438:	e7b8      	b.n	800e3ac <__gethex+0x1f8>
 800e43a:	da0a      	bge.n	800e452 <__gethex+0x29e>
 800e43c:	1a37      	subs	r7, r6, r0
 800e43e:	4621      	mov	r1, r4
 800e440:	ee18 0a10 	vmov	r0, s16
 800e444:	463a      	mov	r2, r7
 800e446:	f000 fc9f 	bl	800ed88 <__lshift>
 800e44a:	1bed      	subs	r5, r5, r7
 800e44c:	4604      	mov	r4, r0
 800e44e:	f100 0914 	add.w	r9, r0, #20
 800e452:	f04f 0a00 	mov.w	sl, #0
 800e456:	e7ae      	b.n	800e3b6 <__gethex+0x202>
 800e458:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e45c:	42a8      	cmp	r0, r5
 800e45e:	dd72      	ble.n	800e546 <__gethex+0x392>
 800e460:	1b45      	subs	r5, r0, r5
 800e462:	42ae      	cmp	r6, r5
 800e464:	dc36      	bgt.n	800e4d4 <__gethex+0x320>
 800e466:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e46a:	2b02      	cmp	r3, #2
 800e46c:	d02a      	beq.n	800e4c4 <__gethex+0x310>
 800e46e:	2b03      	cmp	r3, #3
 800e470:	d02c      	beq.n	800e4cc <__gethex+0x318>
 800e472:	2b01      	cmp	r3, #1
 800e474:	d115      	bne.n	800e4a2 <__gethex+0x2ee>
 800e476:	42ae      	cmp	r6, r5
 800e478:	d113      	bne.n	800e4a2 <__gethex+0x2ee>
 800e47a:	2e01      	cmp	r6, #1
 800e47c:	d10b      	bne.n	800e496 <__gethex+0x2e2>
 800e47e:	9a04      	ldr	r2, [sp, #16]
 800e480:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e484:	6013      	str	r3, [r2, #0]
 800e486:	2301      	movs	r3, #1
 800e488:	6123      	str	r3, [r4, #16]
 800e48a:	f8c9 3000 	str.w	r3, [r9]
 800e48e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e490:	2762      	movs	r7, #98	; 0x62
 800e492:	601c      	str	r4, [r3, #0]
 800e494:	e723      	b.n	800e2de <__gethex+0x12a>
 800e496:	1e71      	subs	r1, r6, #1
 800e498:	4620      	mov	r0, r4
 800e49a:	f000 feb3 	bl	800f204 <__any_on>
 800e49e:	2800      	cmp	r0, #0
 800e4a0:	d1ed      	bne.n	800e47e <__gethex+0x2ca>
 800e4a2:	ee18 0a10 	vmov	r0, s16
 800e4a6:	4621      	mov	r1, r4
 800e4a8:	f000 fa52 	bl	800e950 <_Bfree>
 800e4ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	6013      	str	r3, [r2, #0]
 800e4b2:	2750      	movs	r7, #80	; 0x50
 800e4b4:	e713      	b.n	800e2de <__gethex+0x12a>
 800e4b6:	bf00      	nop
 800e4b8:	08010e34 	.word	0x08010e34
 800e4bc:	08010d54 	.word	0x08010d54
 800e4c0:	08010dc8 	.word	0x08010dc8
 800e4c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d1eb      	bne.n	800e4a2 <__gethex+0x2ee>
 800e4ca:	e7d8      	b.n	800e47e <__gethex+0x2ca>
 800e4cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d1d5      	bne.n	800e47e <__gethex+0x2ca>
 800e4d2:	e7e6      	b.n	800e4a2 <__gethex+0x2ee>
 800e4d4:	1e6f      	subs	r7, r5, #1
 800e4d6:	f1ba 0f00 	cmp.w	sl, #0
 800e4da:	d131      	bne.n	800e540 <__gethex+0x38c>
 800e4dc:	b127      	cbz	r7, 800e4e8 <__gethex+0x334>
 800e4de:	4639      	mov	r1, r7
 800e4e0:	4620      	mov	r0, r4
 800e4e2:	f000 fe8f 	bl	800f204 <__any_on>
 800e4e6:	4682      	mov	sl, r0
 800e4e8:	117b      	asrs	r3, r7, #5
 800e4ea:	2101      	movs	r1, #1
 800e4ec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e4f0:	f007 071f 	and.w	r7, r7, #31
 800e4f4:	fa01 f707 	lsl.w	r7, r1, r7
 800e4f8:	421f      	tst	r7, r3
 800e4fa:	4629      	mov	r1, r5
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	bf18      	it	ne
 800e500:	f04a 0a02 	orrne.w	sl, sl, #2
 800e504:	1b76      	subs	r6, r6, r5
 800e506:	f7ff fdee 	bl	800e0e6 <rshift>
 800e50a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e50e:	2702      	movs	r7, #2
 800e510:	f1ba 0f00 	cmp.w	sl, #0
 800e514:	d048      	beq.n	800e5a8 <__gethex+0x3f4>
 800e516:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e51a:	2b02      	cmp	r3, #2
 800e51c:	d015      	beq.n	800e54a <__gethex+0x396>
 800e51e:	2b03      	cmp	r3, #3
 800e520:	d017      	beq.n	800e552 <__gethex+0x39e>
 800e522:	2b01      	cmp	r3, #1
 800e524:	d109      	bne.n	800e53a <__gethex+0x386>
 800e526:	f01a 0f02 	tst.w	sl, #2
 800e52a:	d006      	beq.n	800e53a <__gethex+0x386>
 800e52c:	f8d9 0000 	ldr.w	r0, [r9]
 800e530:	ea4a 0a00 	orr.w	sl, sl, r0
 800e534:	f01a 0f01 	tst.w	sl, #1
 800e538:	d10e      	bne.n	800e558 <__gethex+0x3a4>
 800e53a:	f047 0710 	orr.w	r7, r7, #16
 800e53e:	e033      	b.n	800e5a8 <__gethex+0x3f4>
 800e540:	f04f 0a01 	mov.w	sl, #1
 800e544:	e7d0      	b.n	800e4e8 <__gethex+0x334>
 800e546:	2701      	movs	r7, #1
 800e548:	e7e2      	b.n	800e510 <__gethex+0x35c>
 800e54a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e54c:	f1c3 0301 	rsb	r3, r3, #1
 800e550:	9315      	str	r3, [sp, #84]	; 0x54
 800e552:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e554:	2b00      	cmp	r3, #0
 800e556:	d0f0      	beq.n	800e53a <__gethex+0x386>
 800e558:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e55c:	f104 0314 	add.w	r3, r4, #20
 800e560:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e564:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e568:	f04f 0c00 	mov.w	ip, #0
 800e56c:	4618      	mov	r0, r3
 800e56e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e572:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e576:	d01c      	beq.n	800e5b2 <__gethex+0x3fe>
 800e578:	3201      	adds	r2, #1
 800e57a:	6002      	str	r2, [r0, #0]
 800e57c:	2f02      	cmp	r7, #2
 800e57e:	f104 0314 	add.w	r3, r4, #20
 800e582:	d13f      	bne.n	800e604 <__gethex+0x450>
 800e584:	f8d8 2000 	ldr.w	r2, [r8]
 800e588:	3a01      	subs	r2, #1
 800e58a:	42b2      	cmp	r2, r6
 800e58c:	d10a      	bne.n	800e5a4 <__gethex+0x3f0>
 800e58e:	1171      	asrs	r1, r6, #5
 800e590:	2201      	movs	r2, #1
 800e592:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e596:	f006 061f 	and.w	r6, r6, #31
 800e59a:	fa02 f606 	lsl.w	r6, r2, r6
 800e59e:	421e      	tst	r6, r3
 800e5a0:	bf18      	it	ne
 800e5a2:	4617      	movne	r7, r2
 800e5a4:	f047 0720 	orr.w	r7, r7, #32
 800e5a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e5aa:	601c      	str	r4, [r3, #0]
 800e5ac:	9b04      	ldr	r3, [sp, #16]
 800e5ae:	601d      	str	r5, [r3, #0]
 800e5b0:	e695      	b.n	800e2de <__gethex+0x12a>
 800e5b2:	4299      	cmp	r1, r3
 800e5b4:	f843 cc04 	str.w	ip, [r3, #-4]
 800e5b8:	d8d8      	bhi.n	800e56c <__gethex+0x3b8>
 800e5ba:	68a3      	ldr	r3, [r4, #8]
 800e5bc:	459b      	cmp	fp, r3
 800e5be:	db19      	blt.n	800e5f4 <__gethex+0x440>
 800e5c0:	6861      	ldr	r1, [r4, #4]
 800e5c2:	ee18 0a10 	vmov	r0, s16
 800e5c6:	3101      	adds	r1, #1
 800e5c8:	f000 f982 	bl	800e8d0 <_Balloc>
 800e5cc:	4681      	mov	r9, r0
 800e5ce:	b918      	cbnz	r0, 800e5d8 <__gethex+0x424>
 800e5d0:	4b1a      	ldr	r3, [pc, #104]	; (800e63c <__gethex+0x488>)
 800e5d2:	4602      	mov	r2, r0
 800e5d4:	2184      	movs	r1, #132	; 0x84
 800e5d6:	e6a8      	b.n	800e32a <__gethex+0x176>
 800e5d8:	6922      	ldr	r2, [r4, #16]
 800e5da:	3202      	adds	r2, #2
 800e5dc:	f104 010c 	add.w	r1, r4, #12
 800e5e0:	0092      	lsls	r2, r2, #2
 800e5e2:	300c      	adds	r0, #12
 800e5e4:	f7fd f8c0 	bl	800b768 <memcpy>
 800e5e8:	4621      	mov	r1, r4
 800e5ea:	ee18 0a10 	vmov	r0, s16
 800e5ee:	f000 f9af 	bl	800e950 <_Bfree>
 800e5f2:	464c      	mov	r4, r9
 800e5f4:	6923      	ldr	r3, [r4, #16]
 800e5f6:	1c5a      	adds	r2, r3, #1
 800e5f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e5fc:	6122      	str	r2, [r4, #16]
 800e5fe:	2201      	movs	r2, #1
 800e600:	615a      	str	r2, [r3, #20]
 800e602:	e7bb      	b.n	800e57c <__gethex+0x3c8>
 800e604:	6922      	ldr	r2, [r4, #16]
 800e606:	455a      	cmp	r2, fp
 800e608:	dd0b      	ble.n	800e622 <__gethex+0x46e>
 800e60a:	2101      	movs	r1, #1
 800e60c:	4620      	mov	r0, r4
 800e60e:	f7ff fd6a 	bl	800e0e6 <rshift>
 800e612:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e616:	3501      	adds	r5, #1
 800e618:	42ab      	cmp	r3, r5
 800e61a:	f6ff aed0 	blt.w	800e3be <__gethex+0x20a>
 800e61e:	2701      	movs	r7, #1
 800e620:	e7c0      	b.n	800e5a4 <__gethex+0x3f0>
 800e622:	f016 061f 	ands.w	r6, r6, #31
 800e626:	d0fa      	beq.n	800e61e <__gethex+0x46a>
 800e628:	449a      	add	sl, r3
 800e62a:	f1c6 0620 	rsb	r6, r6, #32
 800e62e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e632:	f000 fa43 	bl	800eabc <__hi0bits>
 800e636:	42b0      	cmp	r0, r6
 800e638:	dbe7      	blt.n	800e60a <__gethex+0x456>
 800e63a:	e7f0      	b.n	800e61e <__gethex+0x46a>
 800e63c:	08010d54 	.word	0x08010d54

0800e640 <L_shift>:
 800e640:	f1c2 0208 	rsb	r2, r2, #8
 800e644:	0092      	lsls	r2, r2, #2
 800e646:	b570      	push	{r4, r5, r6, lr}
 800e648:	f1c2 0620 	rsb	r6, r2, #32
 800e64c:	6843      	ldr	r3, [r0, #4]
 800e64e:	6804      	ldr	r4, [r0, #0]
 800e650:	fa03 f506 	lsl.w	r5, r3, r6
 800e654:	432c      	orrs	r4, r5
 800e656:	40d3      	lsrs	r3, r2
 800e658:	6004      	str	r4, [r0, #0]
 800e65a:	f840 3f04 	str.w	r3, [r0, #4]!
 800e65e:	4288      	cmp	r0, r1
 800e660:	d3f4      	bcc.n	800e64c <L_shift+0xc>
 800e662:	bd70      	pop	{r4, r5, r6, pc}

0800e664 <__match>:
 800e664:	b530      	push	{r4, r5, lr}
 800e666:	6803      	ldr	r3, [r0, #0]
 800e668:	3301      	adds	r3, #1
 800e66a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e66e:	b914      	cbnz	r4, 800e676 <__match+0x12>
 800e670:	6003      	str	r3, [r0, #0]
 800e672:	2001      	movs	r0, #1
 800e674:	bd30      	pop	{r4, r5, pc}
 800e676:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e67a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e67e:	2d19      	cmp	r5, #25
 800e680:	bf98      	it	ls
 800e682:	3220      	addls	r2, #32
 800e684:	42a2      	cmp	r2, r4
 800e686:	d0f0      	beq.n	800e66a <__match+0x6>
 800e688:	2000      	movs	r0, #0
 800e68a:	e7f3      	b.n	800e674 <__match+0x10>

0800e68c <__hexnan>:
 800e68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e690:	680b      	ldr	r3, [r1, #0]
 800e692:	6801      	ldr	r1, [r0, #0]
 800e694:	115e      	asrs	r6, r3, #5
 800e696:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e69a:	f013 031f 	ands.w	r3, r3, #31
 800e69e:	b087      	sub	sp, #28
 800e6a0:	bf18      	it	ne
 800e6a2:	3604      	addne	r6, #4
 800e6a4:	2500      	movs	r5, #0
 800e6a6:	1f37      	subs	r7, r6, #4
 800e6a8:	4682      	mov	sl, r0
 800e6aa:	4690      	mov	r8, r2
 800e6ac:	9301      	str	r3, [sp, #4]
 800e6ae:	f846 5c04 	str.w	r5, [r6, #-4]
 800e6b2:	46b9      	mov	r9, r7
 800e6b4:	463c      	mov	r4, r7
 800e6b6:	9502      	str	r5, [sp, #8]
 800e6b8:	46ab      	mov	fp, r5
 800e6ba:	784a      	ldrb	r2, [r1, #1]
 800e6bc:	1c4b      	adds	r3, r1, #1
 800e6be:	9303      	str	r3, [sp, #12]
 800e6c0:	b342      	cbz	r2, 800e714 <__hexnan+0x88>
 800e6c2:	4610      	mov	r0, r2
 800e6c4:	9105      	str	r1, [sp, #20]
 800e6c6:	9204      	str	r2, [sp, #16]
 800e6c8:	f7ff fd5f 	bl	800e18a <__hexdig_fun>
 800e6cc:	2800      	cmp	r0, #0
 800e6ce:	d14f      	bne.n	800e770 <__hexnan+0xe4>
 800e6d0:	9a04      	ldr	r2, [sp, #16]
 800e6d2:	9905      	ldr	r1, [sp, #20]
 800e6d4:	2a20      	cmp	r2, #32
 800e6d6:	d818      	bhi.n	800e70a <__hexnan+0x7e>
 800e6d8:	9b02      	ldr	r3, [sp, #8]
 800e6da:	459b      	cmp	fp, r3
 800e6dc:	dd13      	ble.n	800e706 <__hexnan+0x7a>
 800e6de:	454c      	cmp	r4, r9
 800e6e0:	d206      	bcs.n	800e6f0 <__hexnan+0x64>
 800e6e2:	2d07      	cmp	r5, #7
 800e6e4:	dc04      	bgt.n	800e6f0 <__hexnan+0x64>
 800e6e6:	462a      	mov	r2, r5
 800e6e8:	4649      	mov	r1, r9
 800e6ea:	4620      	mov	r0, r4
 800e6ec:	f7ff ffa8 	bl	800e640 <L_shift>
 800e6f0:	4544      	cmp	r4, r8
 800e6f2:	d950      	bls.n	800e796 <__hexnan+0x10a>
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	f1a4 0904 	sub.w	r9, r4, #4
 800e6fa:	f844 3c04 	str.w	r3, [r4, #-4]
 800e6fe:	f8cd b008 	str.w	fp, [sp, #8]
 800e702:	464c      	mov	r4, r9
 800e704:	461d      	mov	r5, r3
 800e706:	9903      	ldr	r1, [sp, #12]
 800e708:	e7d7      	b.n	800e6ba <__hexnan+0x2e>
 800e70a:	2a29      	cmp	r2, #41	; 0x29
 800e70c:	d156      	bne.n	800e7bc <__hexnan+0x130>
 800e70e:	3102      	adds	r1, #2
 800e710:	f8ca 1000 	str.w	r1, [sl]
 800e714:	f1bb 0f00 	cmp.w	fp, #0
 800e718:	d050      	beq.n	800e7bc <__hexnan+0x130>
 800e71a:	454c      	cmp	r4, r9
 800e71c:	d206      	bcs.n	800e72c <__hexnan+0xa0>
 800e71e:	2d07      	cmp	r5, #7
 800e720:	dc04      	bgt.n	800e72c <__hexnan+0xa0>
 800e722:	462a      	mov	r2, r5
 800e724:	4649      	mov	r1, r9
 800e726:	4620      	mov	r0, r4
 800e728:	f7ff ff8a 	bl	800e640 <L_shift>
 800e72c:	4544      	cmp	r4, r8
 800e72e:	d934      	bls.n	800e79a <__hexnan+0x10e>
 800e730:	f1a8 0204 	sub.w	r2, r8, #4
 800e734:	4623      	mov	r3, r4
 800e736:	f853 1b04 	ldr.w	r1, [r3], #4
 800e73a:	f842 1f04 	str.w	r1, [r2, #4]!
 800e73e:	429f      	cmp	r7, r3
 800e740:	d2f9      	bcs.n	800e736 <__hexnan+0xaa>
 800e742:	1b3b      	subs	r3, r7, r4
 800e744:	f023 0303 	bic.w	r3, r3, #3
 800e748:	3304      	adds	r3, #4
 800e74a:	3401      	adds	r4, #1
 800e74c:	3e03      	subs	r6, #3
 800e74e:	42b4      	cmp	r4, r6
 800e750:	bf88      	it	hi
 800e752:	2304      	movhi	r3, #4
 800e754:	4443      	add	r3, r8
 800e756:	2200      	movs	r2, #0
 800e758:	f843 2b04 	str.w	r2, [r3], #4
 800e75c:	429f      	cmp	r7, r3
 800e75e:	d2fb      	bcs.n	800e758 <__hexnan+0xcc>
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	b91b      	cbnz	r3, 800e76c <__hexnan+0xe0>
 800e764:	4547      	cmp	r7, r8
 800e766:	d127      	bne.n	800e7b8 <__hexnan+0x12c>
 800e768:	2301      	movs	r3, #1
 800e76a:	603b      	str	r3, [r7, #0]
 800e76c:	2005      	movs	r0, #5
 800e76e:	e026      	b.n	800e7be <__hexnan+0x132>
 800e770:	3501      	adds	r5, #1
 800e772:	2d08      	cmp	r5, #8
 800e774:	f10b 0b01 	add.w	fp, fp, #1
 800e778:	dd06      	ble.n	800e788 <__hexnan+0xfc>
 800e77a:	4544      	cmp	r4, r8
 800e77c:	d9c3      	bls.n	800e706 <__hexnan+0x7a>
 800e77e:	2300      	movs	r3, #0
 800e780:	f844 3c04 	str.w	r3, [r4, #-4]
 800e784:	2501      	movs	r5, #1
 800e786:	3c04      	subs	r4, #4
 800e788:	6822      	ldr	r2, [r4, #0]
 800e78a:	f000 000f 	and.w	r0, r0, #15
 800e78e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e792:	6022      	str	r2, [r4, #0]
 800e794:	e7b7      	b.n	800e706 <__hexnan+0x7a>
 800e796:	2508      	movs	r5, #8
 800e798:	e7b5      	b.n	800e706 <__hexnan+0x7a>
 800e79a:	9b01      	ldr	r3, [sp, #4]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d0df      	beq.n	800e760 <__hexnan+0xd4>
 800e7a0:	f04f 32ff 	mov.w	r2, #4294967295
 800e7a4:	f1c3 0320 	rsb	r3, r3, #32
 800e7a8:	fa22 f303 	lsr.w	r3, r2, r3
 800e7ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e7b0:	401a      	ands	r2, r3
 800e7b2:	f846 2c04 	str.w	r2, [r6, #-4]
 800e7b6:	e7d3      	b.n	800e760 <__hexnan+0xd4>
 800e7b8:	3f04      	subs	r7, #4
 800e7ba:	e7d1      	b.n	800e760 <__hexnan+0xd4>
 800e7bc:	2004      	movs	r0, #4
 800e7be:	b007      	add	sp, #28
 800e7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e7c4 <_localeconv_r>:
 800e7c4:	4800      	ldr	r0, [pc, #0]	; (800e7c8 <_localeconv_r+0x4>)
 800e7c6:	4770      	bx	lr
 800e7c8:	200001a4 	.word	0x200001a4

0800e7cc <__retarget_lock_init_recursive>:
 800e7cc:	4770      	bx	lr

0800e7ce <__retarget_lock_acquire_recursive>:
 800e7ce:	4770      	bx	lr

0800e7d0 <__retarget_lock_release_recursive>:
 800e7d0:	4770      	bx	lr

0800e7d2 <__swhatbuf_r>:
 800e7d2:	b570      	push	{r4, r5, r6, lr}
 800e7d4:	460e      	mov	r6, r1
 800e7d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7da:	2900      	cmp	r1, #0
 800e7dc:	b096      	sub	sp, #88	; 0x58
 800e7de:	4614      	mov	r4, r2
 800e7e0:	461d      	mov	r5, r3
 800e7e2:	da07      	bge.n	800e7f4 <__swhatbuf_r+0x22>
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	602b      	str	r3, [r5, #0]
 800e7e8:	89b3      	ldrh	r3, [r6, #12]
 800e7ea:	061a      	lsls	r2, r3, #24
 800e7ec:	d410      	bmi.n	800e810 <__swhatbuf_r+0x3e>
 800e7ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7f2:	e00e      	b.n	800e812 <__swhatbuf_r+0x40>
 800e7f4:	466a      	mov	r2, sp
 800e7f6:	f001 f807 	bl	800f808 <_fstat_r>
 800e7fa:	2800      	cmp	r0, #0
 800e7fc:	dbf2      	blt.n	800e7e4 <__swhatbuf_r+0x12>
 800e7fe:	9a01      	ldr	r2, [sp, #4]
 800e800:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e804:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e808:	425a      	negs	r2, r3
 800e80a:	415a      	adcs	r2, r3
 800e80c:	602a      	str	r2, [r5, #0]
 800e80e:	e7ee      	b.n	800e7ee <__swhatbuf_r+0x1c>
 800e810:	2340      	movs	r3, #64	; 0x40
 800e812:	2000      	movs	r0, #0
 800e814:	6023      	str	r3, [r4, #0]
 800e816:	b016      	add	sp, #88	; 0x58
 800e818:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e81c <__smakebuf_r>:
 800e81c:	898b      	ldrh	r3, [r1, #12]
 800e81e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e820:	079d      	lsls	r5, r3, #30
 800e822:	4606      	mov	r6, r0
 800e824:	460c      	mov	r4, r1
 800e826:	d507      	bpl.n	800e838 <__smakebuf_r+0x1c>
 800e828:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e82c:	6023      	str	r3, [r4, #0]
 800e82e:	6123      	str	r3, [r4, #16]
 800e830:	2301      	movs	r3, #1
 800e832:	6163      	str	r3, [r4, #20]
 800e834:	b002      	add	sp, #8
 800e836:	bd70      	pop	{r4, r5, r6, pc}
 800e838:	ab01      	add	r3, sp, #4
 800e83a:	466a      	mov	r2, sp
 800e83c:	f7ff ffc9 	bl	800e7d2 <__swhatbuf_r>
 800e840:	9900      	ldr	r1, [sp, #0]
 800e842:	4605      	mov	r5, r0
 800e844:	4630      	mov	r0, r6
 800e846:	f000 fd5d 	bl	800f304 <_malloc_r>
 800e84a:	b948      	cbnz	r0, 800e860 <__smakebuf_r+0x44>
 800e84c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e850:	059a      	lsls	r2, r3, #22
 800e852:	d4ef      	bmi.n	800e834 <__smakebuf_r+0x18>
 800e854:	f023 0303 	bic.w	r3, r3, #3
 800e858:	f043 0302 	orr.w	r3, r3, #2
 800e85c:	81a3      	strh	r3, [r4, #12]
 800e85e:	e7e3      	b.n	800e828 <__smakebuf_r+0xc>
 800e860:	4b0d      	ldr	r3, [pc, #52]	; (800e898 <__smakebuf_r+0x7c>)
 800e862:	62b3      	str	r3, [r6, #40]	; 0x28
 800e864:	89a3      	ldrh	r3, [r4, #12]
 800e866:	6020      	str	r0, [r4, #0]
 800e868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e86c:	81a3      	strh	r3, [r4, #12]
 800e86e:	9b00      	ldr	r3, [sp, #0]
 800e870:	6163      	str	r3, [r4, #20]
 800e872:	9b01      	ldr	r3, [sp, #4]
 800e874:	6120      	str	r0, [r4, #16]
 800e876:	b15b      	cbz	r3, 800e890 <__smakebuf_r+0x74>
 800e878:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e87c:	4630      	mov	r0, r6
 800e87e:	f000 ffd5 	bl	800f82c <_isatty_r>
 800e882:	b128      	cbz	r0, 800e890 <__smakebuf_r+0x74>
 800e884:	89a3      	ldrh	r3, [r4, #12]
 800e886:	f023 0303 	bic.w	r3, r3, #3
 800e88a:	f043 0301 	orr.w	r3, r3, #1
 800e88e:	81a3      	strh	r3, [r4, #12]
 800e890:	89a0      	ldrh	r0, [r4, #12]
 800e892:	4305      	orrs	r5, r0
 800e894:	81a5      	strh	r5, [r4, #12]
 800e896:	e7cd      	b.n	800e834 <__smakebuf_r+0x18>
 800e898:	0800df45 	.word	0x0800df45

0800e89c <malloc>:
 800e89c:	4b02      	ldr	r3, [pc, #8]	; (800e8a8 <malloc+0xc>)
 800e89e:	4601      	mov	r1, r0
 800e8a0:	6818      	ldr	r0, [r3, #0]
 800e8a2:	f000 bd2f 	b.w	800f304 <_malloc_r>
 800e8a6:	bf00      	nop
 800e8a8:	2000004c 	.word	0x2000004c

0800e8ac <__ascii_mbtowc>:
 800e8ac:	b082      	sub	sp, #8
 800e8ae:	b901      	cbnz	r1, 800e8b2 <__ascii_mbtowc+0x6>
 800e8b0:	a901      	add	r1, sp, #4
 800e8b2:	b142      	cbz	r2, 800e8c6 <__ascii_mbtowc+0x1a>
 800e8b4:	b14b      	cbz	r3, 800e8ca <__ascii_mbtowc+0x1e>
 800e8b6:	7813      	ldrb	r3, [r2, #0]
 800e8b8:	600b      	str	r3, [r1, #0]
 800e8ba:	7812      	ldrb	r2, [r2, #0]
 800e8bc:	1e10      	subs	r0, r2, #0
 800e8be:	bf18      	it	ne
 800e8c0:	2001      	movne	r0, #1
 800e8c2:	b002      	add	sp, #8
 800e8c4:	4770      	bx	lr
 800e8c6:	4610      	mov	r0, r2
 800e8c8:	e7fb      	b.n	800e8c2 <__ascii_mbtowc+0x16>
 800e8ca:	f06f 0001 	mvn.w	r0, #1
 800e8ce:	e7f8      	b.n	800e8c2 <__ascii_mbtowc+0x16>

0800e8d0 <_Balloc>:
 800e8d0:	b570      	push	{r4, r5, r6, lr}
 800e8d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e8d4:	4604      	mov	r4, r0
 800e8d6:	460d      	mov	r5, r1
 800e8d8:	b976      	cbnz	r6, 800e8f8 <_Balloc+0x28>
 800e8da:	2010      	movs	r0, #16
 800e8dc:	f7ff ffde 	bl	800e89c <malloc>
 800e8e0:	4602      	mov	r2, r0
 800e8e2:	6260      	str	r0, [r4, #36]	; 0x24
 800e8e4:	b920      	cbnz	r0, 800e8f0 <_Balloc+0x20>
 800e8e6:	4b18      	ldr	r3, [pc, #96]	; (800e948 <_Balloc+0x78>)
 800e8e8:	4818      	ldr	r0, [pc, #96]	; (800e94c <_Balloc+0x7c>)
 800e8ea:	2166      	movs	r1, #102	; 0x66
 800e8ec:	f000 ff4c 	bl	800f788 <__assert_func>
 800e8f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e8f4:	6006      	str	r6, [r0, #0]
 800e8f6:	60c6      	str	r6, [r0, #12]
 800e8f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e8fa:	68f3      	ldr	r3, [r6, #12]
 800e8fc:	b183      	cbz	r3, 800e920 <_Balloc+0x50>
 800e8fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e900:	68db      	ldr	r3, [r3, #12]
 800e902:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e906:	b9b8      	cbnz	r0, 800e938 <_Balloc+0x68>
 800e908:	2101      	movs	r1, #1
 800e90a:	fa01 f605 	lsl.w	r6, r1, r5
 800e90e:	1d72      	adds	r2, r6, #5
 800e910:	0092      	lsls	r2, r2, #2
 800e912:	4620      	mov	r0, r4
 800e914:	f000 fc97 	bl	800f246 <_calloc_r>
 800e918:	b160      	cbz	r0, 800e934 <_Balloc+0x64>
 800e91a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e91e:	e00e      	b.n	800e93e <_Balloc+0x6e>
 800e920:	2221      	movs	r2, #33	; 0x21
 800e922:	2104      	movs	r1, #4
 800e924:	4620      	mov	r0, r4
 800e926:	f000 fc8e 	bl	800f246 <_calloc_r>
 800e92a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e92c:	60f0      	str	r0, [r6, #12]
 800e92e:	68db      	ldr	r3, [r3, #12]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d1e4      	bne.n	800e8fe <_Balloc+0x2e>
 800e934:	2000      	movs	r0, #0
 800e936:	bd70      	pop	{r4, r5, r6, pc}
 800e938:	6802      	ldr	r2, [r0, #0]
 800e93a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e93e:	2300      	movs	r3, #0
 800e940:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e944:	e7f7      	b.n	800e936 <_Balloc+0x66>
 800e946:	bf00      	nop
 800e948:	08010cde 	.word	0x08010cde
 800e94c:	08010e48 	.word	0x08010e48

0800e950 <_Bfree>:
 800e950:	b570      	push	{r4, r5, r6, lr}
 800e952:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e954:	4605      	mov	r5, r0
 800e956:	460c      	mov	r4, r1
 800e958:	b976      	cbnz	r6, 800e978 <_Bfree+0x28>
 800e95a:	2010      	movs	r0, #16
 800e95c:	f7ff ff9e 	bl	800e89c <malloc>
 800e960:	4602      	mov	r2, r0
 800e962:	6268      	str	r0, [r5, #36]	; 0x24
 800e964:	b920      	cbnz	r0, 800e970 <_Bfree+0x20>
 800e966:	4b09      	ldr	r3, [pc, #36]	; (800e98c <_Bfree+0x3c>)
 800e968:	4809      	ldr	r0, [pc, #36]	; (800e990 <_Bfree+0x40>)
 800e96a:	218a      	movs	r1, #138	; 0x8a
 800e96c:	f000 ff0c 	bl	800f788 <__assert_func>
 800e970:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e974:	6006      	str	r6, [r0, #0]
 800e976:	60c6      	str	r6, [r0, #12]
 800e978:	b13c      	cbz	r4, 800e98a <_Bfree+0x3a>
 800e97a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e97c:	6862      	ldr	r2, [r4, #4]
 800e97e:	68db      	ldr	r3, [r3, #12]
 800e980:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e984:	6021      	str	r1, [r4, #0]
 800e986:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e98a:	bd70      	pop	{r4, r5, r6, pc}
 800e98c:	08010cde 	.word	0x08010cde
 800e990:	08010e48 	.word	0x08010e48

0800e994 <__multadd>:
 800e994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e998:	690e      	ldr	r6, [r1, #16]
 800e99a:	4607      	mov	r7, r0
 800e99c:	4698      	mov	r8, r3
 800e99e:	460c      	mov	r4, r1
 800e9a0:	f101 0014 	add.w	r0, r1, #20
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	6805      	ldr	r5, [r0, #0]
 800e9a8:	b2a9      	uxth	r1, r5
 800e9aa:	fb02 8101 	mla	r1, r2, r1, r8
 800e9ae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e9b2:	0c2d      	lsrs	r5, r5, #16
 800e9b4:	fb02 c505 	mla	r5, r2, r5, ip
 800e9b8:	b289      	uxth	r1, r1
 800e9ba:	3301      	adds	r3, #1
 800e9bc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e9c0:	429e      	cmp	r6, r3
 800e9c2:	f840 1b04 	str.w	r1, [r0], #4
 800e9c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e9ca:	dcec      	bgt.n	800e9a6 <__multadd+0x12>
 800e9cc:	f1b8 0f00 	cmp.w	r8, #0
 800e9d0:	d022      	beq.n	800ea18 <__multadd+0x84>
 800e9d2:	68a3      	ldr	r3, [r4, #8]
 800e9d4:	42b3      	cmp	r3, r6
 800e9d6:	dc19      	bgt.n	800ea0c <__multadd+0x78>
 800e9d8:	6861      	ldr	r1, [r4, #4]
 800e9da:	4638      	mov	r0, r7
 800e9dc:	3101      	adds	r1, #1
 800e9de:	f7ff ff77 	bl	800e8d0 <_Balloc>
 800e9e2:	4605      	mov	r5, r0
 800e9e4:	b928      	cbnz	r0, 800e9f2 <__multadd+0x5e>
 800e9e6:	4602      	mov	r2, r0
 800e9e8:	4b0d      	ldr	r3, [pc, #52]	; (800ea20 <__multadd+0x8c>)
 800e9ea:	480e      	ldr	r0, [pc, #56]	; (800ea24 <__multadd+0x90>)
 800e9ec:	21b5      	movs	r1, #181	; 0xb5
 800e9ee:	f000 fecb 	bl	800f788 <__assert_func>
 800e9f2:	6922      	ldr	r2, [r4, #16]
 800e9f4:	3202      	adds	r2, #2
 800e9f6:	f104 010c 	add.w	r1, r4, #12
 800e9fa:	0092      	lsls	r2, r2, #2
 800e9fc:	300c      	adds	r0, #12
 800e9fe:	f7fc feb3 	bl	800b768 <memcpy>
 800ea02:	4621      	mov	r1, r4
 800ea04:	4638      	mov	r0, r7
 800ea06:	f7ff ffa3 	bl	800e950 <_Bfree>
 800ea0a:	462c      	mov	r4, r5
 800ea0c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ea10:	3601      	adds	r6, #1
 800ea12:	f8c3 8014 	str.w	r8, [r3, #20]
 800ea16:	6126      	str	r6, [r4, #16]
 800ea18:	4620      	mov	r0, r4
 800ea1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea1e:	bf00      	nop
 800ea20:	08010d54 	.word	0x08010d54
 800ea24:	08010e48 	.word	0x08010e48

0800ea28 <__s2b>:
 800ea28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea2c:	460c      	mov	r4, r1
 800ea2e:	4615      	mov	r5, r2
 800ea30:	461f      	mov	r7, r3
 800ea32:	2209      	movs	r2, #9
 800ea34:	3308      	adds	r3, #8
 800ea36:	4606      	mov	r6, r0
 800ea38:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea3c:	2100      	movs	r1, #0
 800ea3e:	2201      	movs	r2, #1
 800ea40:	429a      	cmp	r2, r3
 800ea42:	db09      	blt.n	800ea58 <__s2b+0x30>
 800ea44:	4630      	mov	r0, r6
 800ea46:	f7ff ff43 	bl	800e8d0 <_Balloc>
 800ea4a:	b940      	cbnz	r0, 800ea5e <__s2b+0x36>
 800ea4c:	4602      	mov	r2, r0
 800ea4e:	4b19      	ldr	r3, [pc, #100]	; (800eab4 <__s2b+0x8c>)
 800ea50:	4819      	ldr	r0, [pc, #100]	; (800eab8 <__s2b+0x90>)
 800ea52:	21ce      	movs	r1, #206	; 0xce
 800ea54:	f000 fe98 	bl	800f788 <__assert_func>
 800ea58:	0052      	lsls	r2, r2, #1
 800ea5a:	3101      	adds	r1, #1
 800ea5c:	e7f0      	b.n	800ea40 <__s2b+0x18>
 800ea5e:	9b08      	ldr	r3, [sp, #32]
 800ea60:	6143      	str	r3, [r0, #20]
 800ea62:	2d09      	cmp	r5, #9
 800ea64:	f04f 0301 	mov.w	r3, #1
 800ea68:	6103      	str	r3, [r0, #16]
 800ea6a:	dd16      	ble.n	800ea9a <__s2b+0x72>
 800ea6c:	f104 0909 	add.w	r9, r4, #9
 800ea70:	46c8      	mov	r8, r9
 800ea72:	442c      	add	r4, r5
 800ea74:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ea78:	4601      	mov	r1, r0
 800ea7a:	3b30      	subs	r3, #48	; 0x30
 800ea7c:	220a      	movs	r2, #10
 800ea7e:	4630      	mov	r0, r6
 800ea80:	f7ff ff88 	bl	800e994 <__multadd>
 800ea84:	45a0      	cmp	r8, r4
 800ea86:	d1f5      	bne.n	800ea74 <__s2b+0x4c>
 800ea88:	f1a5 0408 	sub.w	r4, r5, #8
 800ea8c:	444c      	add	r4, r9
 800ea8e:	1b2d      	subs	r5, r5, r4
 800ea90:	1963      	adds	r3, r4, r5
 800ea92:	42bb      	cmp	r3, r7
 800ea94:	db04      	blt.n	800eaa0 <__s2b+0x78>
 800ea96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea9a:	340a      	adds	r4, #10
 800ea9c:	2509      	movs	r5, #9
 800ea9e:	e7f6      	b.n	800ea8e <__s2b+0x66>
 800eaa0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800eaa4:	4601      	mov	r1, r0
 800eaa6:	3b30      	subs	r3, #48	; 0x30
 800eaa8:	220a      	movs	r2, #10
 800eaaa:	4630      	mov	r0, r6
 800eaac:	f7ff ff72 	bl	800e994 <__multadd>
 800eab0:	e7ee      	b.n	800ea90 <__s2b+0x68>
 800eab2:	bf00      	nop
 800eab4:	08010d54 	.word	0x08010d54
 800eab8:	08010e48 	.word	0x08010e48

0800eabc <__hi0bits>:
 800eabc:	0c03      	lsrs	r3, r0, #16
 800eabe:	041b      	lsls	r3, r3, #16
 800eac0:	b9d3      	cbnz	r3, 800eaf8 <__hi0bits+0x3c>
 800eac2:	0400      	lsls	r0, r0, #16
 800eac4:	2310      	movs	r3, #16
 800eac6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800eaca:	bf04      	itt	eq
 800eacc:	0200      	lsleq	r0, r0, #8
 800eace:	3308      	addeq	r3, #8
 800ead0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ead4:	bf04      	itt	eq
 800ead6:	0100      	lsleq	r0, r0, #4
 800ead8:	3304      	addeq	r3, #4
 800eada:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800eade:	bf04      	itt	eq
 800eae0:	0080      	lsleq	r0, r0, #2
 800eae2:	3302      	addeq	r3, #2
 800eae4:	2800      	cmp	r0, #0
 800eae6:	db05      	blt.n	800eaf4 <__hi0bits+0x38>
 800eae8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800eaec:	f103 0301 	add.w	r3, r3, #1
 800eaf0:	bf08      	it	eq
 800eaf2:	2320      	moveq	r3, #32
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	4770      	bx	lr
 800eaf8:	2300      	movs	r3, #0
 800eafa:	e7e4      	b.n	800eac6 <__hi0bits+0xa>

0800eafc <__lo0bits>:
 800eafc:	6803      	ldr	r3, [r0, #0]
 800eafe:	f013 0207 	ands.w	r2, r3, #7
 800eb02:	4601      	mov	r1, r0
 800eb04:	d00b      	beq.n	800eb1e <__lo0bits+0x22>
 800eb06:	07da      	lsls	r2, r3, #31
 800eb08:	d424      	bmi.n	800eb54 <__lo0bits+0x58>
 800eb0a:	0798      	lsls	r0, r3, #30
 800eb0c:	bf49      	itett	mi
 800eb0e:	085b      	lsrmi	r3, r3, #1
 800eb10:	089b      	lsrpl	r3, r3, #2
 800eb12:	2001      	movmi	r0, #1
 800eb14:	600b      	strmi	r3, [r1, #0]
 800eb16:	bf5c      	itt	pl
 800eb18:	600b      	strpl	r3, [r1, #0]
 800eb1a:	2002      	movpl	r0, #2
 800eb1c:	4770      	bx	lr
 800eb1e:	b298      	uxth	r0, r3
 800eb20:	b9b0      	cbnz	r0, 800eb50 <__lo0bits+0x54>
 800eb22:	0c1b      	lsrs	r3, r3, #16
 800eb24:	2010      	movs	r0, #16
 800eb26:	f013 0fff 	tst.w	r3, #255	; 0xff
 800eb2a:	bf04      	itt	eq
 800eb2c:	0a1b      	lsreq	r3, r3, #8
 800eb2e:	3008      	addeq	r0, #8
 800eb30:	071a      	lsls	r2, r3, #28
 800eb32:	bf04      	itt	eq
 800eb34:	091b      	lsreq	r3, r3, #4
 800eb36:	3004      	addeq	r0, #4
 800eb38:	079a      	lsls	r2, r3, #30
 800eb3a:	bf04      	itt	eq
 800eb3c:	089b      	lsreq	r3, r3, #2
 800eb3e:	3002      	addeq	r0, #2
 800eb40:	07da      	lsls	r2, r3, #31
 800eb42:	d403      	bmi.n	800eb4c <__lo0bits+0x50>
 800eb44:	085b      	lsrs	r3, r3, #1
 800eb46:	f100 0001 	add.w	r0, r0, #1
 800eb4a:	d005      	beq.n	800eb58 <__lo0bits+0x5c>
 800eb4c:	600b      	str	r3, [r1, #0]
 800eb4e:	4770      	bx	lr
 800eb50:	4610      	mov	r0, r2
 800eb52:	e7e8      	b.n	800eb26 <__lo0bits+0x2a>
 800eb54:	2000      	movs	r0, #0
 800eb56:	4770      	bx	lr
 800eb58:	2020      	movs	r0, #32
 800eb5a:	4770      	bx	lr

0800eb5c <__i2b>:
 800eb5c:	b510      	push	{r4, lr}
 800eb5e:	460c      	mov	r4, r1
 800eb60:	2101      	movs	r1, #1
 800eb62:	f7ff feb5 	bl	800e8d0 <_Balloc>
 800eb66:	4602      	mov	r2, r0
 800eb68:	b928      	cbnz	r0, 800eb76 <__i2b+0x1a>
 800eb6a:	4b05      	ldr	r3, [pc, #20]	; (800eb80 <__i2b+0x24>)
 800eb6c:	4805      	ldr	r0, [pc, #20]	; (800eb84 <__i2b+0x28>)
 800eb6e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800eb72:	f000 fe09 	bl	800f788 <__assert_func>
 800eb76:	2301      	movs	r3, #1
 800eb78:	6144      	str	r4, [r0, #20]
 800eb7a:	6103      	str	r3, [r0, #16]
 800eb7c:	bd10      	pop	{r4, pc}
 800eb7e:	bf00      	nop
 800eb80:	08010d54 	.word	0x08010d54
 800eb84:	08010e48 	.word	0x08010e48

0800eb88 <__multiply>:
 800eb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb8c:	4614      	mov	r4, r2
 800eb8e:	690a      	ldr	r2, [r1, #16]
 800eb90:	6923      	ldr	r3, [r4, #16]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	bfb8      	it	lt
 800eb96:	460b      	movlt	r3, r1
 800eb98:	460d      	mov	r5, r1
 800eb9a:	bfbc      	itt	lt
 800eb9c:	4625      	movlt	r5, r4
 800eb9e:	461c      	movlt	r4, r3
 800eba0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800eba4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800eba8:	68ab      	ldr	r3, [r5, #8]
 800ebaa:	6869      	ldr	r1, [r5, #4]
 800ebac:	eb0a 0709 	add.w	r7, sl, r9
 800ebb0:	42bb      	cmp	r3, r7
 800ebb2:	b085      	sub	sp, #20
 800ebb4:	bfb8      	it	lt
 800ebb6:	3101      	addlt	r1, #1
 800ebb8:	f7ff fe8a 	bl	800e8d0 <_Balloc>
 800ebbc:	b930      	cbnz	r0, 800ebcc <__multiply+0x44>
 800ebbe:	4602      	mov	r2, r0
 800ebc0:	4b42      	ldr	r3, [pc, #264]	; (800eccc <__multiply+0x144>)
 800ebc2:	4843      	ldr	r0, [pc, #268]	; (800ecd0 <__multiply+0x148>)
 800ebc4:	f240 115d 	movw	r1, #349	; 0x15d
 800ebc8:	f000 fdde 	bl	800f788 <__assert_func>
 800ebcc:	f100 0614 	add.w	r6, r0, #20
 800ebd0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ebd4:	4633      	mov	r3, r6
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	4543      	cmp	r3, r8
 800ebda:	d31e      	bcc.n	800ec1a <__multiply+0x92>
 800ebdc:	f105 0c14 	add.w	ip, r5, #20
 800ebe0:	f104 0314 	add.w	r3, r4, #20
 800ebe4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ebe8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ebec:	9202      	str	r2, [sp, #8]
 800ebee:	ebac 0205 	sub.w	r2, ip, r5
 800ebf2:	3a15      	subs	r2, #21
 800ebf4:	f022 0203 	bic.w	r2, r2, #3
 800ebf8:	3204      	adds	r2, #4
 800ebfa:	f105 0115 	add.w	r1, r5, #21
 800ebfe:	458c      	cmp	ip, r1
 800ec00:	bf38      	it	cc
 800ec02:	2204      	movcc	r2, #4
 800ec04:	9201      	str	r2, [sp, #4]
 800ec06:	9a02      	ldr	r2, [sp, #8]
 800ec08:	9303      	str	r3, [sp, #12]
 800ec0a:	429a      	cmp	r2, r3
 800ec0c:	d808      	bhi.n	800ec20 <__multiply+0x98>
 800ec0e:	2f00      	cmp	r7, #0
 800ec10:	dc55      	bgt.n	800ecbe <__multiply+0x136>
 800ec12:	6107      	str	r7, [r0, #16]
 800ec14:	b005      	add	sp, #20
 800ec16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec1a:	f843 2b04 	str.w	r2, [r3], #4
 800ec1e:	e7db      	b.n	800ebd8 <__multiply+0x50>
 800ec20:	f8b3 a000 	ldrh.w	sl, [r3]
 800ec24:	f1ba 0f00 	cmp.w	sl, #0
 800ec28:	d020      	beq.n	800ec6c <__multiply+0xe4>
 800ec2a:	f105 0e14 	add.w	lr, r5, #20
 800ec2e:	46b1      	mov	r9, r6
 800ec30:	2200      	movs	r2, #0
 800ec32:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ec36:	f8d9 b000 	ldr.w	fp, [r9]
 800ec3a:	b2a1      	uxth	r1, r4
 800ec3c:	fa1f fb8b 	uxth.w	fp, fp
 800ec40:	fb0a b101 	mla	r1, sl, r1, fp
 800ec44:	4411      	add	r1, r2
 800ec46:	f8d9 2000 	ldr.w	r2, [r9]
 800ec4a:	0c24      	lsrs	r4, r4, #16
 800ec4c:	0c12      	lsrs	r2, r2, #16
 800ec4e:	fb0a 2404 	mla	r4, sl, r4, r2
 800ec52:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ec56:	b289      	uxth	r1, r1
 800ec58:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ec5c:	45f4      	cmp	ip, lr
 800ec5e:	f849 1b04 	str.w	r1, [r9], #4
 800ec62:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ec66:	d8e4      	bhi.n	800ec32 <__multiply+0xaa>
 800ec68:	9901      	ldr	r1, [sp, #4]
 800ec6a:	5072      	str	r2, [r6, r1]
 800ec6c:	9a03      	ldr	r2, [sp, #12]
 800ec6e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ec72:	3304      	adds	r3, #4
 800ec74:	f1b9 0f00 	cmp.w	r9, #0
 800ec78:	d01f      	beq.n	800ecba <__multiply+0x132>
 800ec7a:	6834      	ldr	r4, [r6, #0]
 800ec7c:	f105 0114 	add.w	r1, r5, #20
 800ec80:	46b6      	mov	lr, r6
 800ec82:	f04f 0a00 	mov.w	sl, #0
 800ec86:	880a      	ldrh	r2, [r1, #0]
 800ec88:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ec8c:	fb09 b202 	mla	r2, r9, r2, fp
 800ec90:	4492      	add	sl, r2
 800ec92:	b2a4      	uxth	r4, r4
 800ec94:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ec98:	f84e 4b04 	str.w	r4, [lr], #4
 800ec9c:	f851 4b04 	ldr.w	r4, [r1], #4
 800eca0:	f8be 2000 	ldrh.w	r2, [lr]
 800eca4:	0c24      	lsrs	r4, r4, #16
 800eca6:	fb09 2404 	mla	r4, r9, r4, r2
 800ecaa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ecae:	458c      	cmp	ip, r1
 800ecb0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ecb4:	d8e7      	bhi.n	800ec86 <__multiply+0xfe>
 800ecb6:	9a01      	ldr	r2, [sp, #4]
 800ecb8:	50b4      	str	r4, [r6, r2]
 800ecba:	3604      	adds	r6, #4
 800ecbc:	e7a3      	b.n	800ec06 <__multiply+0x7e>
 800ecbe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d1a5      	bne.n	800ec12 <__multiply+0x8a>
 800ecc6:	3f01      	subs	r7, #1
 800ecc8:	e7a1      	b.n	800ec0e <__multiply+0x86>
 800ecca:	bf00      	nop
 800eccc:	08010d54 	.word	0x08010d54
 800ecd0:	08010e48 	.word	0x08010e48

0800ecd4 <__pow5mult>:
 800ecd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecd8:	4615      	mov	r5, r2
 800ecda:	f012 0203 	ands.w	r2, r2, #3
 800ecde:	4606      	mov	r6, r0
 800ece0:	460f      	mov	r7, r1
 800ece2:	d007      	beq.n	800ecf4 <__pow5mult+0x20>
 800ece4:	4c25      	ldr	r4, [pc, #148]	; (800ed7c <__pow5mult+0xa8>)
 800ece6:	3a01      	subs	r2, #1
 800ece8:	2300      	movs	r3, #0
 800ecea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ecee:	f7ff fe51 	bl	800e994 <__multadd>
 800ecf2:	4607      	mov	r7, r0
 800ecf4:	10ad      	asrs	r5, r5, #2
 800ecf6:	d03d      	beq.n	800ed74 <__pow5mult+0xa0>
 800ecf8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ecfa:	b97c      	cbnz	r4, 800ed1c <__pow5mult+0x48>
 800ecfc:	2010      	movs	r0, #16
 800ecfe:	f7ff fdcd 	bl	800e89c <malloc>
 800ed02:	4602      	mov	r2, r0
 800ed04:	6270      	str	r0, [r6, #36]	; 0x24
 800ed06:	b928      	cbnz	r0, 800ed14 <__pow5mult+0x40>
 800ed08:	4b1d      	ldr	r3, [pc, #116]	; (800ed80 <__pow5mult+0xac>)
 800ed0a:	481e      	ldr	r0, [pc, #120]	; (800ed84 <__pow5mult+0xb0>)
 800ed0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ed10:	f000 fd3a 	bl	800f788 <__assert_func>
 800ed14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ed18:	6004      	str	r4, [r0, #0]
 800ed1a:	60c4      	str	r4, [r0, #12]
 800ed1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ed20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ed24:	b94c      	cbnz	r4, 800ed3a <__pow5mult+0x66>
 800ed26:	f240 2171 	movw	r1, #625	; 0x271
 800ed2a:	4630      	mov	r0, r6
 800ed2c:	f7ff ff16 	bl	800eb5c <__i2b>
 800ed30:	2300      	movs	r3, #0
 800ed32:	f8c8 0008 	str.w	r0, [r8, #8]
 800ed36:	4604      	mov	r4, r0
 800ed38:	6003      	str	r3, [r0, #0]
 800ed3a:	f04f 0900 	mov.w	r9, #0
 800ed3e:	07eb      	lsls	r3, r5, #31
 800ed40:	d50a      	bpl.n	800ed58 <__pow5mult+0x84>
 800ed42:	4639      	mov	r1, r7
 800ed44:	4622      	mov	r2, r4
 800ed46:	4630      	mov	r0, r6
 800ed48:	f7ff ff1e 	bl	800eb88 <__multiply>
 800ed4c:	4639      	mov	r1, r7
 800ed4e:	4680      	mov	r8, r0
 800ed50:	4630      	mov	r0, r6
 800ed52:	f7ff fdfd 	bl	800e950 <_Bfree>
 800ed56:	4647      	mov	r7, r8
 800ed58:	106d      	asrs	r5, r5, #1
 800ed5a:	d00b      	beq.n	800ed74 <__pow5mult+0xa0>
 800ed5c:	6820      	ldr	r0, [r4, #0]
 800ed5e:	b938      	cbnz	r0, 800ed70 <__pow5mult+0x9c>
 800ed60:	4622      	mov	r2, r4
 800ed62:	4621      	mov	r1, r4
 800ed64:	4630      	mov	r0, r6
 800ed66:	f7ff ff0f 	bl	800eb88 <__multiply>
 800ed6a:	6020      	str	r0, [r4, #0]
 800ed6c:	f8c0 9000 	str.w	r9, [r0]
 800ed70:	4604      	mov	r4, r0
 800ed72:	e7e4      	b.n	800ed3e <__pow5mult+0x6a>
 800ed74:	4638      	mov	r0, r7
 800ed76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed7a:	bf00      	nop
 800ed7c:	08010f98 	.word	0x08010f98
 800ed80:	08010cde 	.word	0x08010cde
 800ed84:	08010e48 	.word	0x08010e48

0800ed88 <__lshift>:
 800ed88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed8c:	460c      	mov	r4, r1
 800ed8e:	6849      	ldr	r1, [r1, #4]
 800ed90:	6923      	ldr	r3, [r4, #16]
 800ed92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ed96:	68a3      	ldr	r3, [r4, #8]
 800ed98:	4607      	mov	r7, r0
 800ed9a:	4691      	mov	r9, r2
 800ed9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eda0:	f108 0601 	add.w	r6, r8, #1
 800eda4:	42b3      	cmp	r3, r6
 800eda6:	db0b      	blt.n	800edc0 <__lshift+0x38>
 800eda8:	4638      	mov	r0, r7
 800edaa:	f7ff fd91 	bl	800e8d0 <_Balloc>
 800edae:	4605      	mov	r5, r0
 800edb0:	b948      	cbnz	r0, 800edc6 <__lshift+0x3e>
 800edb2:	4602      	mov	r2, r0
 800edb4:	4b28      	ldr	r3, [pc, #160]	; (800ee58 <__lshift+0xd0>)
 800edb6:	4829      	ldr	r0, [pc, #164]	; (800ee5c <__lshift+0xd4>)
 800edb8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800edbc:	f000 fce4 	bl	800f788 <__assert_func>
 800edc0:	3101      	adds	r1, #1
 800edc2:	005b      	lsls	r3, r3, #1
 800edc4:	e7ee      	b.n	800eda4 <__lshift+0x1c>
 800edc6:	2300      	movs	r3, #0
 800edc8:	f100 0114 	add.w	r1, r0, #20
 800edcc:	f100 0210 	add.w	r2, r0, #16
 800edd0:	4618      	mov	r0, r3
 800edd2:	4553      	cmp	r3, sl
 800edd4:	db33      	blt.n	800ee3e <__lshift+0xb6>
 800edd6:	6920      	ldr	r0, [r4, #16]
 800edd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eddc:	f104 0314 	add.w	r3, r4, #20
 800ede0:	f019 091f 	ands.w	r9, r9, #31
 800ede4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ede8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800edec:	d02b      	beq.n	800ee46 <__lshift+0xbe>
 800edee:	f1c9 0e20 	rsb	lr, r9, #32
 800edf2:	468a      	mov	sl, r1
 800edf4:	2200      	movs	r2, #0
 800edf6:	6818      	ldr	r0, [r3, #0]
 800edf8:	fa00 f009 	lsl.w	r0, r0, r9
 800edfc:	4302      	orrs	r2, r0
 800edfe:	f84a 2b04 	str.w	r2, [sl], #4
 800ee02:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee06:	459c      	cmp	ip, r3
 800ee08:	fa22 f20e 	lsr.w	r2, r2, lr
 800ee0c:	d8f3      	bhi.n	800edf6 <__lshift+0x6e>
 800ee0e:	ebac 0304 	sub.w	r3, ip, r4
 800ee12:	3b15      	subs	r3, #21
 800ee14:	f023 0303 	bic.w	r3, r3, #3
 800ee18:	3304      	adds	r3, #4
 800ee1a:	f104 0015 	add.w	r0, r4, #21
 800ee1e:	4584      	cmp	ip, r0
 800ee20:	bf38      	it	cc
 800ee22:	2304      	movcc	r3, #4
 800ee24:	50ca      	str	r2, [r1, r3]
 800ee26:	b10a      	cbz	r2, 800ee2c <__lshift+0xa4>
 800ee28:	f108 0602 	add.w	r6, r8, #2
 800ee2c:	3e01      	subs	r6, #1
 800ee2e:	4638      	mov	r0, r7
 800ee30:	612e      	str	r6, [r5, #16]
 800ee32:	4621      	mov	r1, r4
 800ee34:	f7ff fd8c 	bl	800e950 <_Bfree>
 800ee38:	4628      	mov	r0, r5
 800ee3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee3e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ee42:	3301      	adds	r3, #1
 800ee44:	e7c5      	b.n	800edd2 <__lshift+0x4a>
 800ee46:	3904      	subs	r1, #4
 800ee48:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee4c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ee50:	459c      	cmp	ip, r3
 800ee52:	d8f9      	bhi.n	800ee48 <__lshift+0xc0>
 800ee54:	e7ea      	b.n	800ee2c <__lshift+0xa4>
 800ee56:	bf00      	nop
 800ee58:	08010d54 	.word	0x08010d54
 800ee5c:	08010e48 	.word	0x08010e48

0800ee60 <__mcmp>:
 800ee60:	b530      	push	{r4, r5, lr}
 800ee62:	6902      	ldr	r2, [r0, #16]
 800ee64:	690c      	ldr	r4, [r1, #16]
 800ee66:	1b12      	subs	r2, r2, r4
 800ee68:	d10e      	bne.n	800ee88 <__mcmp+0x28>
 800ee6a:	f100 0314 	add.w	r3, r0, #20
 800ee6e:	3114      	adds	r1, #20
 800ee70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ee74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ee78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ee7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ee80:	42a5      	cmp	r5, r4
 800ee82:	d003      	beq.n	800ee8c <__mcmp+0x2c>
 800ee84:	d305      	bcc.n	800ee92 <__mcmp+0x32>
 800ee86:	2201      	movs	r2, #1
 800ee88:	4610      	mov	r0, r2
 800ee8a:	bd30      	pop	{r4, r5, pc}
 800ee8c:	4283      	cmp	r3, r0
 800ee8e:	d3f3      	bcc.n	800ee78 <__mcmp+0x18>
 800ee90:	e7fa      	b.n	800ee88 <__mcmp+0x28>
 800ee92:	f04f 32ff 	mov.w	r2, #4294967295
 800ee96:	e7f7      	b.n	800ee88 <__mcmp+0x28>

0800ee98 <__mdiff>:
 800ee98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee9c:	460c      	mov	r4, r1
 800ee9e:	4606      	mov	r6, r0
 800eea0:	4611      	mov	r1, r2
 800eea2:	4620      	mov	r0, r4
 800eea4:	4617      	mov	r7, r2
 800eea6:	f7ff ffdb 	bl	800ee60 <__mcmp>
 800eeaa:	1e05      	subs	r5, r0, #0
 800eeac:	d110      	bne.n	800eed0 <__mdiff+0x38>
 800eeae:	4629      	mov	r1, r5
 800eeb0:	4630      	mov	r0, r6
 800eeb2:	f7ff fd0d 	bl	800e8d0 <_Balloc>
 800eeb6:	b930      	cbnz	r0, 800eec6 <__mdiff+0x2e>
 800eeb8:	4b39      	ldr	r3, [pc, #228]	; (800efa0 <__mdiff+0x108>)
 800eeba:	4602      	mov	r2, r0
 800eebc:	f240 2132 	movw	r1, #562	; 0x232
 800eec0:	4838      	ldr	r0, [pc, #224]	; (800efa4 <__mdiff+0x10c>)
 800eec2:	f000 fc61 	bl	800f788 <__assert_func>
 800eec6:	2301      	movs	r3, #1
 800eec8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eecc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eed0:	bfa4      	itt	ge
 800eed2:	463b      	movge	r3, r7
 800eed4:	4627      	movge	r7, r4
 800eed6:	4630      	mov	r0, r6
 800eed8:	6879      	ldr	r1, [r7, #4]
 800eeda:	bfa6      	itte	ge
 800eedc:	461c      	movge	r4, r3
 800eede:	2500      	movge	r5, #0
 800eee0:	2501      	movlt	r5, #1
 800eee2:	f7ff fcf5 	bl	800e8d0 <_Balloc>
 800eee6:	b920      	cbnz	r0, 800eef2 <__mdiff+0x5a>
 800eee8:	4b2d      	ldr	r3, [pc, #180]	; (800efa0 <__mdiff+0x108>)
 800eeea:	4602      	mov	r2, r0
 800eeec:	f44f 7110 	mov.w	r1, #576	; 0x240
 800eef0:	e7e6      	b.n	800eec0 <__mdiff+0x28>
 800eef2:	693e      	ldr	r6, [r7, #16]
 800eef4:	60c5      	str	r5, [r0, #12]
 800eef6:	6925      	ldr	r5, [r4, #16]
 800eef8:	f107 0114 	add.w	r1, r7, #20
 800eefc:	f104 0914 	add.w	r9, r4, #20
 800ef00:	f100 0e14 	add.w	lr, r0, #20
 800ef04:	f107 0210 	add.w	r2, r7, #16
 800ef08:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ef0c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ef10:	46f2      	mov	sl, lr
 800ef12:	2700      	movs	r7, #0
 800ef14:	f859 3b04 	ldr.w	r3, [r9], #4
 800ef18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ef1c:	fa1f f883 	uxth.w	r8, r3
 800ef20:	fa17 f78b 	uxtah	r7, r7, fp
 800ef24:	0c1b      	lsrs	r3, r3, #16
 800ef26:	eba7 0808 	sub.w	r8, r7, r8
 800ef2a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ef2e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ef32:	fa1f f888 	uxth.w	r8, r8
 800ef36:	141f      	asrs	r7, r3, #16
 800ef38:	454d      	cmp	r5, r9
 800ef3a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ef3e:	f84a 3b04 	str.w	r3, [sl], #4
 800ef42:	d8e7      	bhi.n	800ef14 <__mdiff+0x7c>
 800ef44:	1b2b      	subs	r3, r5, r4
 800ef46:	3b15      	subs	r3, #21
 800ef48:	f023 0303 	bic.w	r3, r3, #3
 800ef4c:	3304      	adds	r3, #4
 800ef4e:	3415      	adds	r4, #21
 800ef50:	42a5      	cmp	r5, r4
 800ef52:	bf38      	it	cc
 800ef54:	2304      	movcc	r3, #4
 800ef56:	4419      	add	r1, r3
 800ef58:	4473      	add	r3, lr
 800ef5a:	469e      	mov	lr, r3
 800ef5c:	460d      	mov	r5, r1
 800ef5e:	4565      	cmp	r5, ip
 800ef60:	d30e      	bcc.n	800ef80 <__mdiff+0xe8>
 800ef62:	f10c 0203 	add.w	r2, ip, #3
 800ef66:	1a52      	subs	r2, r2, r1
 800ef68:	f022 0203 	bic.w	r2, r2, #3
 800ef6c:	3903      	subs	r1, #3
 800ef6e:	458c      	cmp	ip, r1
 800ef70:	bf38      	it	cc
 800ef72:	2200      	movcc	r2, #0
 800ef74:	441a      	add	r2, r3
 800ef76:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ef7a:	b17b      	cbz	r3, 800ef9c <__mdiff+0x104>
 800ef7c:	6106      	str	r6, [r0, #16]
 800ef7e:	e7a5      	b.n	800eecc <__mdiff+0x34>
 800ef80:	f855 8b04 	ldr.w	r8, [r5], #4
 800ef84:	fa17 f488 	uxtah	r4, r7, r8
 800ef88:	1422      	asrs	r2, r4, #16
 800ef8a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ef8e:	b2a4      	uxth	r4, r4
 800ef90:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ef94:	f84e 4b04 	str.w	r4, [lr], #4
 800ef98:	1417      	asrs	r7, r2, #16
 800ef9a:	e7e0      	b.n	800ef5e <__mdiff+0xc6>
 800ef9c:	3e01      	subs	r6, #1
 800ef9e:	e7ea      	b.n	800ef76 <__mdiff+0xde>
 800efa0:	08010d54 	.word	0x08010d54
 800efa4:	08010e48 	.word	0x08010e48

0800efa8 <__ulp>:
 800efa8:	b082      	sub	sp, #8
 800efaa:	ed8d 0b00 	vstr	d0, [sp]
 800efae:	9b01      	ldr	r3, [sp, #4]
 800efb0:	4912      	ldr	r1, [pc, #72]	; (800effc <__ulp+0x54>)
 800efb2:	4019      	ands	r1, r3
 800efb4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800efb8:	2900      	cmp	r1, #0
 800efba:	dd05      	ble.n	800efc8 <__ulp+0x20>
 800efbc:	2200      	movs	r2, #0
 800efbe:	460b      	mov	r3, r1
 800efc0:	ec43 2b10 	vmov	d0, r2, r3
 800efc4:	b002      	add	sp, #8
 800efc6:	4770      	bx	lr
 800efc8:	4249      	negs	r1, r1
 800efca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800efce:	ea4f 5021 	mov.w	r0, r1, asr #20
 800efd2:	f04f 0200 	mov.w	r2, #0
 800efd6:	f04f 0300 	mov.w	r3, #0
 800efda:	da04      	bge.n	800efe6 <__ulp+0x3e>
 800efdc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800efe0:	fa41 f300 	asr.w	r3, r1, r0
 800efe4:	e7ec      	b.n	800efc0 <__ulp+0x18>
 800efe6:	f1a0 0114 	sub.w	r1, r0, #20
 800efea:	291e      	cmp	r1, #30
 800efec:	bfda      	itte	le
 800efee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800eff2:	fa20 f101 	lsrle.w	r1, r0, r1
 800eff6:	2101      	movgt	r1, #1
 800eff8:	460a      	mov	r2, r1
 800effa:	e7e1      	b.n	800efc0 <__ulp+0x18>
 800effc:	7ff00000 	.word	0x7ff00000

0800f000 <__b2d>:
 800f000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f002:	6905      	ldr	r5, [r0, #16]
 800f004:	f100 0714 	add.w	r7, r0, #20
 800f008:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f00c:	1f2e      	subs	r6, r5, #4
 800f00e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f012:	4620      	mov	r0, r4
 800f014:	f7ff fd52 	bl	800eabc <__hi0bits>
 800f018:	f1c0 0320 	rsb	r3, r0, #32
 800f01c:	280a      	cmp	r0, #10
 800f01e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f09c <__b2d+0x9c>
 800f022:	600b      	str	r3, [r1, #0]
 800f024:	dc14      	bgt.n	800f050 <__b2d+0x50>
 800f026:	f1c0 0e0b 	rsb	lr, r0, #11
 800f02a:	fa24 f10e 	lsr.w	r1, r4, lr
 800f02e:	42b7      	cmp	r7, r6
 800f030:	ea41 030c 	orr.w	r3, r1, ip
 800f034:	bf34      	ite	cc
 800f036:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f03a:	2100      	movcs	r1, #0
 800f03c:	3015      	adds	r0, #21
 800f03e:	fa04 f000 	lsl.w	r0, r4, r0
 800f042:	fa21 f10e 	lsr.w	r1, r1, lr
 800f046:	ea40 0201 	orr.w	r2, r0, r1
 800f04a:	ec43 2b10 	vmov	d0, r2, r3
 800f04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f050:	42b7      	cmp	r7, r6
 800f052:	bf3a      	itte	cc
 800f054:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f058:	f1a5 0608 	subcc.w	r6, r5, #8
 800f05c:	2100      	movcs	r1, #0
 800f05e:	380b      	subs	r0, #11
 800f060:	d017      	beq.n	800f092 <__b2d+0x92>
 800f062:	f1c0 0c20 	rsb	ip, r0, #32
 800f066:	fa04 f500 	lsl.w	r5, r4, r0
 800f06a:	42be      	cmp	r6, r7
 800f06c:	fa21 f40c 	lsr.w	r4, r1, ip
 800f070:	ea45 0504 	orr.w	r5, r5, r4
 800f074:	bf8c      	ite	hi
 800f076:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f07a:	2400      	movls	r4, #0
 800f07c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f080:	fa01 f000 	lsl.w	r0, r1, r0
 800f084:	fa24 f40c 	lsr.w	r4, r4, ip
 800f088:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f08c:	ea40 0204 	orr.w	r2, r0, r4
 800f090:	e7db      	b.n	800f04a <__b2d+0x4a>
 800f092:	ea44 030c 	orr.w	r3, r4, ip
 800f096:	460a      	mov	r2, r1
 800f098:	e7d7      	b.n	800f04a <__b2d+0x4a>
 800f09a:	bf00      	nop
 800f09c:	3ff00000 	.word	0x3ff00000

0800f0a0 <__d2b>:
 800f0a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f0a4:	4689      	mov	r9, r1
 800f0a6:	2101      	movs	r1, #1
 800f0a8:	ec57 6b10 	vmov	r6, r7, d0
 800f0ac:	4690      	mov	r8, r2
 800f0ae:	f7ff fc0f 	bl	800e8d0 <_Balloc>
 800f0b2:	4604      	mov	r4, r0
 800f0b4:	b930      	cbnz	r0, 800f0c4 <__d2b+0x24>
 800f0b6:	4602      	mov	r2, r0
 800f0b8:	4b25      	ldr	r3, [pc, #148]	; (800f150 <__d2b+0xb0>)
 800f0ba:	4826      	ldr	r0, [pc, #152]	; (800f154 <__d2b+0xb4>)
 800f0bc:	f240 310a 	movw	r1, #778	; 0x30a
 800f0c0:	f000 fb62 	bl	800f788 <__assert_func>
 800f0c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f0c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f0cc:	bb35      	cbnz	r5, 800f11c <__d2b+0x7c>
 800f0ce:	2e00      	cmp	r6, #0
 800f0d0:	9301      	str	r3, [sp, #4]
 800f0d2:	d028      	beq.n	800f126 <__d2b+0x86>
 800f0d4:	4668      	mov	r0, sp
 800f0d6:	9600      	str	r6, [sp, #0]
 800f0d8:	f7ff fd10 	bl	800eafc <__lo0bits>
 800f0dc:	9900      	ldr	r1, [sp, #0]
 800f0de:	b300      	cbz	r0, 800f122 <__d2b+0x82>
 800f0e0:	9a01      	ldr	r2, [sp, #4]
 800f0e2:	f1c0 0320 	rsb	r3, r0, #32
 800f0e6:	fa02 f303 	lsl.w	r3, r2, r3
 800f0ea:	430b      	orrs	r3, r1
 800f0ec:	40c2      	lsrs	r2, r0
 800f0ee:	6163      	str	r3, [r4, #20]
 800f0f0:	9201      	str	r2, [sp, #4]
 800f0f2:	9b01      	ldr	r3, [sp, #4]
 800f0f4:	61a3      	str	r3, [r4, #24]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	bf14      	ite	ne
 800f0fa:	2202      	movne	r2, #2
 800f0fc:	2201      	moveq	r2, #1
 800f0fe:	6122      	str	r2, [r4, #16]
 800f100:	b1d5      	cbz	r5, 800f138 <__d2b+0x98>
 800f102:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f106:	4405      	add	r5, r0
 800f108:	f8c9 5000 	str.w	r5, [r9]
 800f10c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f110:	f8c8 0000 	str.w	r0, [r8]
 800f114:	4620      	mov	r0, r4
 800f116:	b003      	add	sp, #12
 800f118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f11c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f120:	e7d5      	b.n	800f0ce <__d2b+0x2e>
 800f122:	6161      	str	r1, [r4, #20]
 800f124:	e7e5      	b.n	800f0f2 <__d2b+0x52>
 800f126:	a801      	add	r0, sp, #4
 800f128:	f7ff fce8 	bl	800eafc <__lo0bits>
 800f12c:	9b01      	ldr	r3, [sp, #4]
 800f12e:	6163      	str	r3, [r4, #20]
 800f130:	2201      	movs	r2, #1
 800f132:	6122      	str	r2, [r4, #16]
 800f134:	3020      	adds	r0, #32
 800f136:	e7e3      	b.n	800f100 <__d2b+0x60>
 800f138:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f13c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f140:	f8c9 0000 	str.w	r0, [r9]
 800f144:	6918      	ldr	r0, [r3, #16]
 800f146:	f7ff fcb9 	bl	800eabc <__hi0bits>
 800f14a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f14e:	e7df      	b.n	800f110 <__d2b+0x70>
 800f150:	08010d54 	.word	0x08010d54
 800f154:	08010e48 	.word	0x08010e48

0800f158 <__ratio>:
 800f158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f15c:	4688      	mov	r8, r1
 800f15e:	4669      	mov	r1, sp
 800f160:	4681      	mov	r9, r0
 800f162:	f7ff ff4d 	bl	800f000 <__b2d>
 800f166:	a901      	add	r1, sp, #4
 800f168:	4640      	mov	r0, r8
 800f16a:	ec55 4b10 	vmov	r4, r5, d0
 800f16e:	f7ff ff47 	bl	800f000 <__b2d>
 800f172:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f176:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f17a:	eba3 0c02 	sub.w	ip, r3, r2
 800f17e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f182:	1a9b      	subs	r3, r3, r2
 800f184:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f188:	ec51 0b10 	vmov	r0, r1, d0
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	bfd6      	itet	le
 800f190:	460a      	movle	r2, r1
 800f192:	462a      	movgt	r2, r5
 800f194:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f198:	468b      	mov	fp, r1
 800f19a:	462f      	mov	r7, r5
 800f19c:	bfd4      	ite	le
 800f19e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f1a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f1a6:	4620      	mov	r0, r4
 800f1a8:	ee10 2a10 	vmov	r2, s0
 800f1ac:	465b      	mov	r3, fp
 800f1ae:	4639      	mov	r1, r7
 800f1b0:	f7f1 fb6c 	bl	800088c <__aeabi_ddiv>
 800f1b4:	ec41 0b10 	vmov	d0, r0, r1
 800f1b8:	b003      	add	sp, #12
 800f1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f1be <__copybits>:
 800f1be:	3901      	subs	r1, #1
 800f1c0:	b570      	push	{r4, r5, r6, lr}
 800f1c2:	1149      	asrs	r1, r1, #5
 800f1c4:	6914      	ldr	r4, [r2, #16]
 800f1c6:	3101      	adds	r1, #1
 800f1c8:	f102 0314 	add.w	r3, r2, #20
 800f1cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f1d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f1d4:	1f05      	subs	r5, r0, #4
 800f1d6:	42a3      	cmp	r3, r4
 800f1d8:	d30c      	bcc.n	800f1f4 <__copybits+0x36>
 800f1da:	1aa3      	subs	r3, r4, r2
 800f1dc:	3b11      	subs	r3, #17
 800f1de:	f023 0303 	bic.w	r3, r3, #3
 800f1e2:	3211      	adds	r2, #17
 800f1e4:	42a2      	cmp	r2, r4
 800f1e6:	bf88      	it	hi
 800f1e8:	2300      	movhi	r3, #0
 800f1ea:	4418      	add	r0, r3
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	4288      	cmp	r0, r1
 800f1f0:	d305      	bcc.n	800f1fe <__copybits+0x40>
 800f1f2:	bd70      	pop	{r4, r5, r6, pc}
 800f1f4:	f853 6b04 	ldr.w	r6, [r3], #4
 800f1f8:	f845 6f04 	str.w	r6, [r5, #4]!
 800f1fc:	e7eb      	b.n	800f1d6 <__copybits+0x18>
 800f1fe:	f840 3b04 	str.w	r3, [r0], #4
 800f202:	e7f4      	b.n	800f1ee <__copybits+0x30>

0800f204 <__any_on>:
 800f204:	f100 0214 	add.w	r2, r0, #20
 800f208:	6900      	ldr	r0, [r0, #16]
 800f20a:	114b      	asrs	r3, r1, #5
 800f20c:	4298      	cmp	r0, r3
 800f20e:	b510      	push	{r4, lr}
 800f210:	db11      	blt.n	800f236 <__any_on+0x32>
 800f212:	dd0a      	ble.n	800f22a <__any_on+0x26>
 800f214:	f011 011f 	ands.w	r1, r1, #31
 800f218:	d007      	beq.n	800f22a <__any_on+0x26>
 800f21a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f21e:	fa24 f001 	lsr.w	r0, r4, r1
 800f222:	fa00 f101 	lsl.w	r1, r0, r1
 800f226:	428c      	cmp	r4, r1
 800f228:	d10b      	bne.n	800f242 <__any_on+0x3e>
 800f22a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f22e:	4293      	cmp	r3, r2
 800f230:	d803      	bhi.n	800f23a <__any_on+0x36>
 800f232:	2000      	movs	r0, #0
 800f234:	bd10      	pop	{r4, pc}
 800f236:	4603      	mov	r3, r0
 800f238:	e7f7      	b.n	800f22a <__any_on+0x26>
 800f23a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f23e:	2900      	cmp	r1, #0
 800f240:	d0f5      	beq.n	800f22e <__any_on+0x2a>
 800f242:	2001      	movs	r0, #1
 800f244:	e7f6      	b.n	800f234 <__any_on+0x30>

0800f246 <_calloc_r>:
 800f246:	b513      	push	{r0, r1, r4, lr}
 800f248:	434a      	muls	r2, r1
 800f24a:	4611      	mov	r1, r2
 800f24c:	9201      	str	r2, [sp, #4]
 800f24e:	f000 f859 	bl	800f304 <_malloc_r>
 800f252:	4604      	mov	r4, r0
 800f254:	b118      	cbz	r0, 800f25e <_calloc_r+0x18>
 800f256:	9a01      	ldr	r2, [sp, #4]
 800f258:	2100      	movs	r1, #0
 800f25a:	f7fc fa93 	bl	800b784 <memset>
 800f25e:	4620      	mov	r0, r4
 800f260:	b002      	add	sp, #8
 800f262:	bd10      	pop	{r4, pc}

0800f264 <_free_r>:
 800f264:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f266:	2900      	cmp	r1, #0
 800f268:	d048      	beq.n	800f2fc <_free_r+0x98>
 800f26a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f26e:	9001      	str	r0, [sp, #4]
 800f270:	2b00      	cmp	r3, #0
 800f272:	f1a1 0404 	sub.w	r4, r1, #4
 800f276:	bfb8      	it	lt
 800f278:	18e4      	addlt	r4, r4, r3
 800f27a:	f000 faf9 	bl	800f870 <__malloc_lock>
 800f27e:	4a20      	ldr	r2, [pc, #128]	; (800f300 <_free_r+0x9c>)
 800f280:	9801      	ldr	r0, [sp, #4]
 800f282:	6813      	ldr	r3, [r2, #0]
 800f284:	4615      	mov	r5, r2
 800f286:	b933      	cbnz	r3, 800f296 <_free_r+0x32>
 800f288:	6063      	str	r3, [r4, #4]
 800f28a:	6014      	str	r4, [r2, #0]
 800f28c:	b003      	add	sp, #12
 800f28e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f292:	f000 baf3 	b.w	800f87c <__malloc_unlock>
 800f296:	42a3      	cmp	r3, r4
 800f298:	d90b      	bls.n	800f2b2 <_free_r+0x4e>
 800f29a:	6821      	ldr	r1, [r4, #0]
 800f29c:	1862      	adds	r2, r4, r1
 800f29e:	4293      	cmp	r3, r2
 800f2a0:	bf04      	itt	eq
 800f2a2:	681a      	ldreq	r2, [r3, #0]
 800f2a4:	685b      	ldreq	r3, [r3, #4]
 800f2a6:	6063      	str	r3, [r4, #4]
 800f2a8:	bf04      	itt	eq
 800f2aa:	1852      	addeq	r2, r2, r1
 800f2ac:	6022      	streq	r2, [r4, #0]
 800f2ae:	602c      	str	r4, [r5, #0]
 800f2b0:	e7ec      	b.n	800f28c <_free_r+0x28>
 800f2b2:	461a      	mov	r2, r3
 800f2b4:	685b      	ldr	r3, [r3, #4]
 800f2b6:	b10b      	cbz	r3, 800f2bc <_free_r+0x58>
 800f2b8:	42a3      	cmp	r3, r4
 800f2ba:	d9fa      	bls.n	800f2b2 <_free_r+0x4e>
 800f2bc:	6811      	ldr	r1, [r2, #0]
 800f2be:	1855      	adds	r5, r2, r1
 800f2c0:	42a5      	cmp	r5, r4
 800f2c2:	d10b      	bne.n	800f2dc <_free_r+0x78>
 800f2c4:	6824      	ldr	r4, [r4, #0]
 800f2c6:	4421      	add	r1, r4
 800f2c8:	1854      	adds	r4, r2, r1
 800f2ca:	42a3      	cmp	r3, r4
 800f2cc:	6011      	str	r1, [r2, #0]
 800f2ce:	d1dd      	bne.n	800f28c <_free_r+0x28>
 800f2d0:	681c      	ldr	r4, [r3, #0]
 800f2d2:	685b      	ldr	r3, [r3, #4]
 800f2d4:	6053      	str	r3, [r2, #4]
 800f2d6:	4421      	add	r1, r4
 800f2d8:	6011      	str	r1, [r2, #0]
 800f2da:	e7d7      	b.n	800f28c <_free_r+0x28>
 800f2dc:	d902      	bls.n	800f2e4 <_free_r+0x80>
 800f2de:	230c      	movs	r3, #12
 800f2e0:	6003      	str	r3, [r0, #0]
 800f2e2:	e7d3      	b.n	800f28c <_free_r+0x28>
 800f2e4:	6825      	ldr	r5, [r4, #0]
 800f2e6:	1961      	adds	r1, r4, r5
 800f2e8:	428b      	cmp	r3, r1
 800f2ea:	bf04      	itt	eq
 800f2ec:	6819      	ldreq	r1, [r3, #0]
 800f2ee:	685b      	ldreq	r3, [r3, #4]
 800f2f0:	6063      	str	r3, [r4, #4]
 800f2f2:	bf04      	itt	eq
 800f2f4:	1949      	addeq	r1, r1, r5
 800f2f6:	6021      	streq	r1, [r4, #0]
 800f2f8:	6054      	str	r4, [r2, #4]
 800f2fa:	e7c7      	b.n	800f28c <_free_r+0x28>
 800f2fc:	b003      	add	sp, #12
 800f2fe:	bd30      	pop	{r4, r5, pc}
 800f300:	20000240 	.word	0x20000240

0800f304 <_malloc_r>:
 800f304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f306:	1ccd      	adds	r5, r1, #3
 800f308:	f025 0503 	bic.w	r5, r5, #3
 800f30c:	3508      	adds	r5, #8
 800f30e:	2d0c      	cmp	r5, #12
 800f310:	bf38      	it	cc
 800f312:	250c      	movcc	r5, #12
 800f314:	2d00      	cmp	r5, #0
 800f316:	4606      	mov	r6, r0
 800f318:	db01      	blt.n	800f31e <_malloc_r+0x1a>
 800f31a:	42a9      	cmp	r1, r5
 800f31c:	d903      	bls.n	800f326 <_malloc_r+0x22>
 800f31e:	230c      	movs	r3, #12
 800f320:	6033      	str	r3, [r6, #0]
 800f322:	2000      	movs	r0, #0
 800f324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f326:	f000 faa3 	bl	800f870 <__malloc_lock>
 800f32a:	4921      	ldr	r1, [pc, #132]	; (800f3b0 <_malloc_r+0xac>)
 800f32c:	680a      	ldr	r2, [r1, #0]
 800f32e:	4614      	mov	r4, r2
 800f330:	b99c      	cbnz	r4, 800f35a <_malloc_r+0x56>
 800f332:	4f20      	ldr	r7, [pc, #128]	; (800f3b4 <_malloc_r+0xb0>)
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	b923      	cbnz	r3, 800f342 <_malloc_r+0x3e>
 800f338:	4621      	mov	r1, r4
 800f33a:	4630      	mov	r0, r6
 800f33c:	f000 f9a0 	bl	800f680 <_sbrk_r>
 800f340:	6038      	str	r0, [r7, #0]
 800f342:	4629      	mov	r1, r5
 800f344:	4630      	mov	r0, r6
 800f346:	f000 f99b 	bl	800f680 <_sbrk_r>
 800f34a:	1c43      	adds	r3, r0, #1
 800f34c:	d123      	bne.n	800f396 <_malloc_r+0x92>
 800f34e:	230c      	movs	r3, #12
 800f350:	6033      	str	r3, [r6, #0]
 800f352:	4630      	mov	r0, r6
 800f354:	f000 fa92 	bl	800f87c <__malloc_unlock>
 800f358:	e7e3      	b.n	800f322 <_malloc_r+0x1e>
 800f35a:	6823      	ldr	r3, [r4, #0]
 800f35c:	1b5b      	subs	r3, r3, r5
 800f35e:	d417      	bmi.n	800f390 <_malloc_r+0x8c>
 800f360:	2b0b      	cmp	r3, #11
 800f362:	d903      	bls.n	800f36c <_malloc_r+0x68>
 800f364:	6023      	str	r3, [r4, #0]
 800f366:	441c      	add	r4, r3
 800f368:	6025      	str	r5, [r4, #0]
 800f36a:	e004      	b.n	800f376 <_malloc_r+0x72>
 800f36c:	6863      	ldr	r3, [r4, #4]
 800f36e:	42a2      	cmp	r2, r4
 800f370:	bf0c      	ite	eq
 800f372:	600b      	streq	r3, [r1, #0]
 800f374:	6053      	strne	r3, [r2, #4]
 800f376:	4630      	mov	r0, r6
 800f378:	f000 fa80 	bl	800f87c <__malloc_unlock>
 800f37c:	f104 000b 	add.w	r0, r4, #11
 800f380:	1d23      	adds	r3, r4, #4
 800f382:	f020 0007 	bic.w	r0, r0, #7
 800f386:	1ac2      	subs	r2, r0, r3
 800f388:	d0cc      	beq.n	800f324 <_malloc_r+0x20>
 800f38a:	1a1b      	subs	r3, r3, r0
 800f38c:	50a3      	str	r3, [r4, r2]
 800f38e:	e7c9      	b.n	800f324 <_malloc_r+0x20>
 800f390:	4622      	mov	r2, r4
 800f392:	6864      	ldr	r4, [r4, #4]
 800f394:	e7cc      	b.n	800f330 <_malloc_r+0x2c>
 800f396:	1cc4      	adds	r4, r0, #3
 800f398:	f024 0403 	bic.w	r4, r4, #3
 800f39c:	42a0      	cmp	r0, r4
 800f39e:	d0e3      	beq.n	800f368 <_malloc_r+0x64>
 800f3a0:	1a21      	subs	r1, r4, r0
 800f3a2:	4630      	mov	r0, r6
 800f3a4:	f000 f96c 	bl	800f680 <_sbrk_r>
 800f3a8:	3001      	adds	r0, #1
 800f3aa:	d1dd      	bne.n	800f368 <_malloc_r+0x64>
 800f3ac:	e7cf      	b.n	800f34e <_malloc_r+0x4a>
 800f3ae:	bf00      	nop
 800f3b0:	20000240 	.word	0x20000240
 800f3b4:	20000244 	.word	0x20000244

0800f3b8 <__sfputc_r>:
 800f3b8:	6893      	ldr	r3, [r2, #8]
 800f3ba:	3b01      	subs	r3, #1
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	b410      	push	{r4}
 800f3c0:	6093      	str	r3, [r2, #8]
 800f3c2:	da08      	bge.n	800f3d6 <__sfputc_r+0x1e>
 800f3c4:	6994      	ldr	r4, [r2, #24]
 800f3c6:	42a3      	cmp	r3, r4
 800f3c8:	db01      	blt.n	800f3ce <__sfputc_r+0x16>
 800f3ca:	290a      	cmp	r1, #10
 800f3cc:	d103      	bne.n	800f3d6 <__sfputc_r+0x1e>
 800f3ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3d2:	f7fd bd99 	b.w	800cf08 <__swbuf_r>
 800f3d6:	6813      	ldr	r3, [r2, #0]
 800f3d8:	1c58      	adds	r0, r3, #1
 800f3da:	6010      	str	r0, [r2, #0]
 800f3dc:	7019      	strb	r1, [r3, #0]
 800f3de:	4608      	mov	r0, r1
 800f3e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3e4:	4770      	bx	lr

0800f3e6 <__sfputs_r>:
 800f3e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3e8:	4606      	mov	r6, r0
 800f3ea:	460f      	mov	r7, r1
 800f3ec:	4614      	mov	r4, r2
 800f3ee:	18d5      	adds	r5, r2, r3
 800f3f0:	42ac      	cmp	r4, r5
 800f3f2:	d101      	bne.n	800f3f8 <__sfputs_r+0x12>
 800f3f4:	2000      	movs	r0, #0
 800f3f6:	e007      	b.n	800f408 <__sfputs_r+0x22>
 800f3f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3fc:	463a      	mov	r2, r7
 800f3fe:	4630      	mov	r0, r6
 800f400:	f7ff ffda 	bl	800f3b8 <__sfputc_r>
 800f404:	1c43      	adds	r3, r0, #1
 800f406:	d1f3      	bne.n	800f3f0 <__sfputs_r+0xa>
 800f408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f40c <_vfiprintf_r>:
 800f40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f410:	460d      	mov	r5, r1
 800f412:	b09d      	sub	sp, #116	; 0x74
 800f414:	4614      	mov	r4, r2
 800f416:	4698      	mov	r8, r3
 800f418:	4606      	mov	r6, r0
 800f41a:	b118      	cbz	r0, 800f424 <_vfiprintf_r+0x18>
 800f41c:	6983      	ldr	r3, [r0, #24]
 800f41e:	b90b      	cbnz	r3, 800f424 <_vfiprintf_r+0x18>
 800f420:	f7fe fdc4 	bl	800dfac <__sinit>
 800f424:	4b89      	ldr	r3, [pc, #548]	; (800f64c <_vfiprintf_r+0x240>)
 800f426:	429d      	cmp	r5, r3
 800f428:	d11b      	bne.n	800f462 <_vfiprintf_r+0x56>
 800f42a:	6875      	ldr	r5, [r6, #4]
 800f42c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f42e:	07d9      	lsls	r1, r3, #31
 800f430:	d405      	bmi.n	800f43e <_vfiprintf_r+0x32>
 800f432:	89ab      	ldrh	r3, [r5, #12]
 800f434:	059a      	lsls	r2, r3, #22
 800f436:	d402      	bmi.n	800f43e <_vfiprintf_r+0x32>
 800f438:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f43a:	f7ff f9c8 	bl	800e7ce <__retarget_lock_acquire_recursive>
 800f43e:	89ab      	ldrh	r3, [r5, #12]
 800f440:	071b      	lsls	r3, r3, #28
 800f442:	d501      	bpl.n	800f448 <_vfiprintf_r+0x3c>
 800f444:	692b      	ldr	r3, [r5, #16]
 800f446:	b9eb      	cbnz	r3, 800f484 <_vfiprintf_r+0x78>
 800f448:	4629      	mov	r1, r5
 800f44a:	4630      	mov	r0, r6
 800f44c:	f7fd fdae 	bl	800cfac <__swsetup_r>
 800f450:	b1c0      	cbz	r0, 800f484 <_vfiprintf_r+0x78>
 800f452:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f454:	07dc      	lsls	r4, r3, #31
 800f456:	d50e      	bpl.n	800f476 <_vfiprintf_r+0x6a>
 800f458:	f04f 30ff 	mov.w	r0, #4294967295
 800f45c:	b01d      	add	sp, #116	; 0x74
 800f45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f462:	4b7b      	ldr	r3, [pc, #492]	; (800f650 <_vfiprintf_r+0x244>)
 800f464:	429d      	cmp	r5, r3
 800f466:	d101      	bne.n	800f46c <_vfiprintf_r+0x60>
 800f468:	68b5      	ldr	r5, [r6, #8]
 800f46a:	e7df      	b.n	800f42c <_vfiprintf_r+0x20>
 800f46c:	4b79      	ldr	r3, [pc, #484]	; (800f654 <_vfiprintf_r+0x248>)
 800f46e:	429d      	cmp	r5, r3
 800f470:	bf08      	it	eq
 800f472:	68f5      	ldreq	r5, [r6, #12]
 800f474:	e7da      	b.n	800f42c <_vfiprintf_r+0x20>
 800f476:	89ab      	ldrh	r3, [r5, #12]
 800f478:	0598      	lsls	r0, r3, #22
 800f47a:	d4ed      	bmi.n	800f458 <_vfiprintf_r+0x4c>
 800f47c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f47e:	f7ff f9a7 	bl	800e7d0 <__retarget_lock_release_recursive>
 800f482:	e7e9      	b.n	800f458 <_vfiprintf_r+0x4c>
 800f484:	2300      	movs	r3, #0
 800f486:	9309      	str	r3, [sp, #36]	; 0x24
 800f488:	2320      	movs	r3, #32
 800f48a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f48e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f492:	2330      	movs	r3, #48	; 0x30
 800f494:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f658 <_vfiprintf_r+0x24c>
 800f498:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f49c:	f04f 0901 	mov.w	r9, #1
 800f4a0:	4623      	mov	r3, r4
 800f4a2:	469a      	mov	sl, r3
 800f4a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4a8:	b10a      	cbz	r2, 800f4ae <_vfiprintf_r+0xa2>
 800f4aa:	2a25      	cmp	r2, #37	; 0x25
 800f4ac:	d1f9      	bne.n	800f4a2 <_vfiprintf_r+0x96>
 800f4ae:	ebba 0b04 	subs.w	fp, sl, r4
 800f4b2:	d00b      	beq.n	800f4cc <_vfiprintf_r+0xc0>
 800f4b4:	465b      	mov	r3, fp
 800f4b6:	4622      	mov	r2, r4
 800f4b8:	4629      	mov	r1, r5
 800f4ba:	4630      	mov	r0, r6
 800f4bc:	f7ff ff93 	bl	800f3e6 <__sfputs_r>
 800f4c0:	3001      	adds	r0, #1
 800f4c2:	f000 80aa 	beq.w	800f61a <_vfiprintf_r+0x20e>
 800f4c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f4c8:	445a      	add	r2, fp
 800f4ca:	9209      	str	r2, [sp, #36]	; 0x24
 800f4cc:	f89a 3000 	ldrb.w	r3, [sl]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	f000 80a2 	beq.w	800f61a <_vfiprintf_r+0x20e>
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	f04f 32ff 	mov.w	r2, #4294967295
 800f4dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4e0:	f10a 0a01 	add.w	sl, sl, #1
 800f4e4:	9304      	str	r3, [sp, #16]
 800f4e6:	9307      	str	r3, [sp, #28]
 800f4e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f4ec:	931a      	str	r3, [sp, #104]	; 0x68
 800f4ee:	4654      	mov	r4, sl
 800f4f0:	2205      	movs	r2, #5
 800f4f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4f6:	4858      	ldr	r0, [pc, #352]	; (800f658 <_vfiprintf_r+0x24c>)
 800f4f8:	f7f0 fe92 	bl	8000220 <memchr>
 800f4fc:	9a04      	ldr	r2, [sp, #16]
 800f4fe:	b9d8      	cbnz	r0, 800f538 <_vfiprintf_r+0x12c>
 800f500:	06d1      	lsls	r1, r2, #27
 800f502:	bf44      	itt	mi
 800f504:	2320      	movmi	r3, #32
 800f506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f50a:	0713      	lsls	r3, r2, #28
 800f50c:	bf44      	itt	mi
 800f50e:	232b      	movmi	r3, #43	; 0x2b
 800f510:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f514:	f89a 3000 	ldrb.w	r3, [sl]
 800f518:	2b2a      	cmp	r3, #42	; 0x2a
 800f51a:	d015      	beq.n	800f548 <_vfiprintf_r+0x13c>
 800f51c:	9a07      	ldr	r2, [sp, #28]
 800f51e:	4654      	mov	r4, sl
 800f520:	2000      	movs	r0, #0
 800f522:	f04f 0c0a 	mov.w	ip, #10
 800f526:	4621      	mov	r1, r4
 800f528:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f52c:	3b30      	subs	r3, #48	; 0x30
 800f52e:	2b09      	cmp	r3, #9
 800f530:	d94e      	bls.n	800f5d0 <_vfiprintf_r+0x1c4>
 800f532:	b1b0      	cbz	r0, 800f562 <_vfiprintf_r+0x156>
 800f534:	9207      	str	r2, [sp, #28]
 800f536:	e014      	b.n	800f562 <_vfiprintf_r+0x156>
 800f538:	eba0 0308 	sub.w	r3, r0, r8
 800f53c:	fa09 f303 	lsl.w	r3, r9, r3
 800f540:	4313      	orrs	r3, r2
 800f542:	9304      	str	r3, [sp, #16]
 800f544:	46a2      	mov	sl, r4
 800f546:	e7d2      	b.n	800f4ee <_vfiprintf_r+0xe2>
 800f548:	9b03      	ldr	r3, [sp, #12]
 800f54a:	1d19      	adds	r1, r3, #4
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	9103      	str	r1, [sp, #12]
 800f550:	2b00      	cmp	r3, #0
 800f552:	bfbb      	ittet	lt
 800f554:	425b      	neglt	r3, r3
 800f556:	f042 0202 	orrlt.w	r2, r2, #2
 800f55a:	9307      	strge	r3, [sp, #28]
 800f55c:	9307      	strlt	r3, [sp, #28]
 800f55e:	bfb8      	it	lt
 800f560:	9204      	strlt	r2, [sp, #16]
 800f562:	7823      	ldrb	r3, [r4, #0]
 800f564:	2b2e      	cmp	r3, #46	; 0x2e
 800f566:	d10c      	bne.n	800f582 <_vfiprintf_r+0x176>
 800f568:	7863      	ldrb	r3, [r4, #1]
 800f56a:	2b2a      	cmp	r3, #42	; 0x2a
 800f56c:	d135      	bne.n	800f5da <_vfiprintf_r+0x1ce>
 800f56e:	9b03      	ldr	r3, [sp, #12]
 800f570:	1d1a      	adds	r2, r3, #4
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	9203      	str	r2, [sp, #12]
 800f576:	2b00      	cmp	r3, #0
 800f578:	bfb8      	it	lt
 800f57a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f57e:	3402      	adds	r4, #2
 800f580:	9305      	str	r3, [sp, #20]
 800f582:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f668 <_vfiprintf_r+0x25c>
 800f586:	7821      	ldrb	r1, [r4, #0]
 800f588:	2203      	movs	r2, #3
 800f58a:	4650      	mov	r0, sl
 800f58c:	f7f0 fe48 	bl	8000220 <memchr>
 800f590:	b140      	cbz	r0, 800f5a4 <_vfiprintf_r+0x198>
 800f592:	2340      	movs	r3, #64	; 0x40
 800f594:	eba0 000a 	sub.w	r0, r0, sl
 800f598:	fa03 f000 	lsl.w	r0, r3, r0
 800f59c:	9b04      	ldr	r3, [sp, #16]
 800f59e:	4303      	orrs	r3, r0
 800f5a0:	3401      	adds	r4, #1
 800f5a2:	9304      	str	r3, [sp, #16]
 800f5a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5a8:	482c      	ldr	r0, [pc, #176]	; (800f65c <_vfiprintf_r+0x250>)
 800f5aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f5ae:	2206      	movs	r2, #6
 800f5b0:	f7f0 fe36 	bl	8000220 <memchr>
 800f5b4:	2800      	cmp	r0, #0
 800f5b6:	d03f      	beq.n	800f638 <_vfiprintf_r+0x22c>
 800f5b8:	4b29      	ldr	r3, [pc, #164]	; (800f660 <_vfiprintf_r+0x254>)
 800f5ba:	bb1b      	cbnz	r3, 800f604 <_vfiprintf_r+0x1f8>
 800f5bc:	9b03      	ldr	r3, [sp, #12]
 800f5be:	3307      	adds	r3, #7
 800f5c0:	f023 0307 	bic.w	r3, r3, #7
 800f5c4:	3308      	adds	r3, #8
 800f5c6:	9303      	str	r3, [sp, #12]
 800f5c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5ca:	443b      	add	r3, r7
 800f5cc:	9309      	str	r3, [sp, #36]	; 0x24
 800f5ce:	e767      	b.n	800f4a0 <_vfiprintf_r+0x94>
 800f5d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5d4:	460c      	mov	r4, r1
 800f5d6:	2001      	movs	r0, #1
 800f5d8:	e7a5      	b.n	800f526 <_vfiprintf_r+0x11a>
 800f5da:	2300      	movs	r3, #0
 800f5dc:	3401      	adds	r4, #1
 800f5de:	9305      	str	r3, [sp, #20]
 800f5e0:	4619      	mov	r1, r3
 800f5e2:	f04f 0c0a 	mov.w	ip, #10
 800f5e6:	4620      	mov	r0, r4
 800f5e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5ec:	3a30      	subs	r2, #48	; 0x30
 800f5ee:	2a09      	cmp	r2, #9
 800f5f0:	d903      	bls.n	800f5fa <_vfiprintf_r+0x1ee>
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d0c5      	beq.n	800f582 <_vfiprintf_r+0x176>
 800f5f6:	9105      	str	r1, [sp, #20]
 800f5f8:	e7c3      	b.n	800f582 <_vfiprintf_r+0x176>
 800f5fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800f5fe:	4604      	mov	r4, r0
 800f600:	2301      	movs	r3, #1
 800f602:	e7f0      	b.n	800f5e6 <_vfiprintf_r+0x1da>
 800f604:	ab03      	add	r3, sp, #12
 800f606:	9300      	str	r3, [sp, #0]
 800f608:	462a      	mov	r2, r5
 800f60a:	4b16      	ldr	r3, [pc, #88]	; (800f664 <_vfiprintf_r+0x258>)
 800f60c:	a904      	add	r1, sp, #16
 800f60e:	4630      	mov	r0, r6
 800f610:	f7fc f960 	bl	800b8d4 <_printf_float>
 800f614:	4607      	mov	r7, r0
 800f616:	1c78      	adds	r0, r7, #1
 800f618:	d1d6      	bne.n	800f5c8 <_vfiprintf_r+0x1bc>
 800f61a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f61c:	07d9      	lsls	r1, r3, #31
 800f61e:	d405      	bmi.n	800f62c <_vfiprintf_r+0x220>
 800f620:	89ab      	ldrh	r3, [r5, #12]
 800f622:	059a      	lsls	r2, r3, #22
 800f624:	d402      	bmi.n	800f62c <_vfiprintf_r+0x220>
 800f626:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f628:	f7ff f8d2 	bl	800e7d0 <__retarget_lock_release_recursive>
 800f62c:	89ab      	ldrh	r3, [r5, #12]
 800f62e:	065b      	lsls	r3, r3, #25
 800f630:	f53f af12 	bmi.w	800f458 <_vfiprintf_r+0x4c>
 800f634:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f636:	e711      	b.n	800f45c <_vfiprintf_r+0x50>
 800f638:	ab03      	add	r3, sp, #12
 800f63a:	9300      	str	r3, [sp, #0]
 800f63c:	462a      	mov	r2, r5
 800f63e:	4b09      	ldr	r3, [pc, #36]	; (800f664 <_vfiprintf_r+0x258>)
 800f640:	a904      	add	r1, sp, #16
 800f642:	4630      	mov	r0, r6
 800f644:	f7fc fbea 	bl	800be1c <_printf_i>
 800f648:	e7e4      	b.n	800f614 <_vfiprintf_r+0x208>
 800f64a:	bf00      	nop
 800f64c:	08010d88 	.word	0x08010d88
 800f650:	08010da8 	.word	0x08010da8
 800f654:	08010d68 	.word	0x08010d68
 800f658:	08010fa4 	.word	0x08010fa4
 800f65c:	08010fae 	.word	0x08010fae
 800f660:	0800b8d5 	.word	0x0800b8d5
 800f664:	0800f3e7 	.word	0x0800f3e7
 800f668:	08010faa 	.word	0x08010faa
 800f66c:	00000000 	.word	0x00000000

0800f670 <nan>:
 800f670:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f678 <nan+0x8>
 800f674:	4770      	bx	lr
 800f676:	bf00      	nop
 800f678:	00000000 	.word	0x00000000
 800f67c:	7ff80000 	.word	0x7ff80000

0800f680 <_sbrk_r>:
 800f680:	b538      	push	{r3, r4, r5, lr}
 800f682:	4d06      	ldr	r5, [pc, #24]	; (800f69c <_sbrk_r+0x1c>)
 800f684:	2300      	movs	r3, #0
 800f686:	4604      	mov	r4, r0
 800f688:	4608      	mov	r0, r1
 800f68a:	602b      	str	r3, [r5, #0]
 800f68c:	f7f6 fcda 	bl	8006044 <_sbrk>
 800f690:	1c43      	adds	r3, r0, #1
 800f692:	d102      	bne.n	800f69a <_sbrk_r+0x1a>
 800f694:	682b      	ldr	r3, [r5, #0]
 800f696:	b103      	cbz	r3, 800f69a <_sbrk_r+0x1a>
 800f698:	6023      	str	r3, [r4, #0]
 800f69a:	bd38      	pop	{r3, r4, r5, pc}
 800f69c:	20009554 	.word	0x20009554

0800f6a0 <__sread>:
 800f6a0:	b510      	push	{r4, lr}
 800f6a2:	460c      	mov	r4, r1
 800f6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6a8:	f000 f8ee 	bl	800f888 <_read_r>
 800f6ac:	2800      	cmp	r0, #0
 800f6ae:	bfab      	itete	ge
 800f6b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f6b2:	89a3      	ldrhlt	r3, [r4, #12]
 800f6b4:	181b      	addge	r3, r3, r0
 800f6b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f6ba:	bfac      	ite	ge
 800f6bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800f6be:	81a3      	strhlt	r3, [r4, #12]
 800f6c0:	bd10      	pop	{r4, pc}

0800f6c2 <__swrite>:
 800f6c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6c6:	461f      	mov	r7, r3
 800f6c8:	898b      	ldrh	r3, [r1, #12]
 800f6ca:	05db      	lsls	r3, r3, #23
 800f6cc:	4605      	mov	r5, r0
 800f6ce:	460c      	mov	r4, r1
 800f6d0:	4616      	mov	r6, r2
 800f6d2:	d505      	bpl.n	800f6e0 <__swrite+0x1e>
 800f6d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6d8:	2302      	movs	r3, #2
 800f6da:	2200      	movs	r2, #0
 800f6dc:	f000 f8b6 	bl	800f84c <_lseek_r>
 800f6e0:	89a3      	ldrh	r3, [r4, #12]
 800f6e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f6ea:	81a3      	strh	r3, [r4, #12]
 800f6ec:	4632      	mov	r2, r6
 800f6ee:	463b      	mov	r3, r7
 800f6f0:	4628      	mov	r0, r5
 800f6f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6f6:	f000 b835 	b.w	800f764 <_write_r>

0800f6fa <__sseek>:
 800f6fa:	b510      	push	{r4, lr}
 800f6fc:	460c      	mov	r4, r1
 800f6fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f702:	f000 f8a3 	bl	800f84c <_lseek_r>
 800f706:	1c43      	adds	r3, r0, #1
 800f708:	89a3      	ldrh	r3, [r4, #12]
 800f70a:	bf15      	itete	ne
 800f70c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f70e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f712:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f716:	81a3      	strheq	r3, [r4, #12]
 800f718:	bf18      	it	ne
 800f71a:	81a3      	strhne	r3, [r4, #12]
 800f71c:	bd10      	pop	{r4, pc}

0800f71e <__sclose>:
 800f71e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f722:	f000 b84f 	b.w	800f7c4 <_close_r>

0800f726 <strncmp>:
 800f726:	b510      	push	{r4, lr}
 800f728:	b16a      	cbz	r2, 800f746 <strncmp+0x20>
 800f72a:	3901      	subs	r1, #1
 800f72c:	1884      	adds	r4, r0, r2
 800f72e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f732:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f736:	4293      	cmp	r3, r2
 800f738:	d103      	bne.n	800f742 <strncmp+0x1c>
 800f73a:	42a0      	cmp	r0, r4
 800f73c:	d001      	beq.n	800f742 <strncmp+0x1c>
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d1f5      	bne.n	800f72e <strncmp+0x8>
 800f742:	1a98      	subs	r0, r3, r2
 800f744:	bd10      	pop	{r4, pc}
 800f746:	4610      	mov	r0, r2
 800f748:	e7fc      	b.n	800f744 <strncmp+0x1e>

0800f74a <__ascii_wctomb>:
 800f74a:	b149      	cbz	r1, 800f760 <__ascii_wctomb+0x16>
 800f74c:	2aff      	cmp	r2, #255	; 0xff
 800f74e:	bf85      	ittet	hi
 800f750:	238a      	movhi	r3, #138	; 0x8a
 800f752:	6003      	strhi	r3, [r0, #0]
 800f754:	700a      	strbls	r2, [r1, #0]
 800f756:	f04f 30ff 	movhi.w	r0, #4294967295
 800f75a:	bf98      	it	ls
 800f75c:	2001      	movls	r0, #1
 800f75e:	4770      	bx	lr
 800f760:	4608      	mov	r0, r1
 800f762:	4770      	bx	lr

0800f764 <_write_r>:
 800f764:	b538      	push	{r3, r4, r5, lr}
 800f766:	4d07      	ldr	r5, [pc, #28]	; (800f784 <_write_r+0x20>)
 800f768:	4604      	mov	r4, r0
 800f76a:	4608      	mov	r0, r1
 800f76c:	4611      	mov	r1, r2
 800f76e:	2200      	movs	r2, #0
 800f770:	602a      	str	r2, [r5, #0]
 800f772:	461a      	mov	r2, r3
 800f774:	f7f6 fc15 	bl	8005fa2 <_write>
 800f778:	1c43      	adds	r3, r0, #1
 800f77a:	d102      	bne.n	800f782 <_write_r+0x1e>
 800f77c:	682b      	ldr	r3, [r5, #0]
 800f77e:	b103      	cbz	r3, 800f782 <_write_r+0x1e>
 800f780:	6023      	str	r3, [r4, #0]
 800f782:	bd38      	pop	{r3, r4, r5, pc}
 800f784:	20009554 	.word	0x20009554

0800f788 <__assert_func>:
 800f788:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f78a:	4614      	mov	r4, r2
 800f78c:	461a      	mov	r2, r3
 800f78e:	4b09      	ldr	r3, [pc, #36]	; (800f7b4 <__assert_func+0x2c>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	4605      	mov	r5, r0
 800f794:	68d8      	ldr	r0, [r3, #12]
 800f796:	b14c      	cbz	r4, 800f7ac <__assert_func+0x24>
 800f798:	4b07      	ldr	r3, [pc, #28]	; (800f7b8 <__assert_func+0x30>)
 800f79a:	9100      	str	r1, [sp, #0]
 800f79c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f7a0:	4906      	ldr	r1, [pc, #24]	; (800f7bc <__assert_func+0x34>)
 800f7a2:	462b      	mov	r3, r5
 800f7a4:	f000 f81e 	bl	800f7e4 <fiprintf>
 800f7a8:	f000 f880 	bl	800f8ac <abort>
 800f7ac:	4b04      	ldr	r3, [pc, #16]	; (800f7c0 <__assert_func+0x38>)
 800f7ae:	461c      	mov	r4, r3
 800f7b0:	e7f3      	b.n	800f79a <__assert_func+0x12>
 800f7b2:	bf00      	nop
 800f7b4:	2000004c 	.word	0x2000004c
 800f7b8:	08010fb5 	.word	0x08010fb5
 800f7bc:	08010fc2 	.word	0x08010fc2
 800f7c0:	08010ff0 	.word	0x08010ff0

0800f7c4 <_close_r>:
 800f7c4:	b538      	push	{r3, r4, r5, lr}
 800f7c6:	4d06      	ldr	r5, [pc, #24]	; (800f7e0 <_close_r+0x1c>)
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	4604      	mov	r4, r0
 800f7cc:	4608      	mov	r0, r1
 800f7ce:	602b      	str	r3, [r5, #0]
 800f7d0:	f7f6 fc03 	bl	8005fda <_close>
 800f7d4:	1c43      	adds	r3, r0, #1
 800f7d6:	d102      	bne.n	800f7de <_close_r+0x1a>
 800f7d8:	682b      	ldr	r3, [r5, #0]
 800f7da:	b103      	cbz	r3, 800f7de <_close_r+0x1a>
 800f7dc:	6023      	str	r3, [r4, #0]
 800f7de:	bd38      	pop	{r3, r4, r5, pc}
 800f7e0:	20009554 	.word	0x20009554

0800f7e4 <fiprintf>:
 800f7e4:	b40e      	push	{r1, r2, r3}
 800f7e6:	b503      	push	{r0, r1, lr}
 800f7e8:	4601      	mov	r1, r0
 800f7ea:	ab03      	add	r3, sp, #12
 800f7ec:	4805      	ldr	r0, [pc, #20]	; (800f804 <fiprintf+0x20>)
 800f7ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7f2:	6800      	ldr	r0, [r0, #0]
 800f7f4:	9301      	str	r3, [sp, #4]
 800f7f6:	f7ff fe09 	bl	800f40c <_vfiprintf_r>
 800f7fa:	b002      	add	sp, #8
 800f7fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f800:	b003      	add	sp, #12
 800f802:	4770      	bx	lr
 800f804:	2000004c 	.word	0x2000004c

0800f808 <_fstat_r>:
 800f808:	b538      	push	{r3, r4, r5, lr}
 800f80a:	4d07      	ldr	r5, [pc, #28]	; (800f828 <_fstat_r+0x20>)
 800f80c:	2300      	movs	r3, #0
 800f80e:	4604      	mov	r4, r0
 800f810:	4608      	mov	r0, r1
 800f812:	4611      	mov	r1, r2
 800f814:	602b      	str	r3, [r5, #0]
 800f816:	f7f6 fbec 	bl	8005ff2 <_fstat>
 800f81a:	1c43      	adds	r3, r0, #1
 800f81c:	d102      	bne.n	800f824 <_fstat_r+0x1c>
 800f81e:	682b      	ldr	r3, [r5, #0]
 800f820:	b103      	cbz	r3, 800f824 <_fstat_r+0x1c>
 800f822:	6023      	str	r3, [r4, #0]
 800f824:	bd38      	pop	{r3, r4, r5, pc}
 800f826:	bf00      	nop
 800f828:	20009554 	.word	0x20009554

0800f82c <_isatty_r>:
 800f82c:	b538      	push	{r3, r4, r5, lr}
 800f82e:	4d06      	ldr	r5, [pc, #24]	; (800f848 <_isatty_r+0x1c>)
 800f830:	2300      	movs	r3, #0
 800f832:	4604      	mov	r4, r0
 800f834:	4608      	mov	r0, r1
 800f836:	602b      	str	r3, [r5, #0]
 800f838:	f7f6 fbeb 	bl	8006012 <_isatty>
 800f83c:	1c43      	adds	r3, r0, #1
 800f83e:	d102      	bne.n	800f846 <_isatty_r+0x1a>
 800f840:	682b      	ldr	r3, [r5, #0]
 800f842:	b103      	cbz	r3, 800f846 <_isatty_r+0x1a>
 800f844:	6023      	str	r3, [r4, #0]
 800f846:	bd38      	pop	{r3, r4, r5, pc}
 800f848:	20009554 	.word	0x20009554

0800f84c <_lseek_r>:
 800f84c:	b538      	push	{r3, r4, r5, lr}
 800f84e:	4d07      	ldr	r5, [pc, #28]	; (800f86c <_lseek_r+0x20>)
 800f850:	4604      	mov	r4, r0
 800f852:	4608      	mov	r0, r1
 800f854:	4611      	mov	r1, r2
 800f856:	2200      	movs	r2, #0
 800f858:	602a      	str	r2, [r5, #0]
 800f85a:	461a      	mov	r2, r3
 800f85c:	f7f6 fbe4 	bl	8006028 <_lseek>
 800f860:	1c43      	adds	r3, r0, #1
 800f862:	d102      	bne.n	800f86a <_lseek_r+0x1e>
 800f864:	682b      	ldr	r3, [r5, #0]
 800f866:	b103      	cbz	r3, 800f86a <_lseek_r+0x1e>
 800f868:	6023      	str	r3, [r4, #0]
 800f86a:	bd38      	pop	{r3, r4, r5, pc}
 800f86c:	20009554 	.word	0x20009554

0800f870 <__malloc_lock>:
 800f870:	4801      	ldr	r0, [pc, #4]	; (800f878 <__malloc_lock+0x8>)
 800f872:	f7fe bfac 	b.w	800e7ce <__retarget_lock_acquire_recursive>
 800f876:	bf00      	nop
 800f878:	2000954c 	.word	0x2000954c

0800f87c <__malloc_unlock>:
 800f87c:	4801      	ldr	r0, [pc, #4]	; (800f884 <__malloc_unlock+0x8>)
 800f87e:	f7fe bfa7 	b.w	800e7d0 <__retarget_lock_release_recursive>
 800f882:	bf00      	nop
 800f884:	2000954c 	.word	0x2000954c

0800f888 <_read_r>:
 800f888:	b538      	push	{r3, r4, r5, lr}
 800f88a:	4d07      	ldr	r5, [pc, #28]	; (800f8a8 <_read_r+0x20>)
 800f88c:	4604      	mov	r4, r0
 800f88e:	4608      	mov	r0, r1
 800f890:	4611      	mov	r1, r2
 800f892:	2200      	movs	r2, #0
 800f894:	602a      	str	r2, [r5, #0]
 800f896:	461a      	mov	r2, r3
 800f898:	f7f6 fb66 	bl	8005f68 <_read>
 800f89c:	1c43      	adds	r3, r0, #1
 800f89e:	d102      	bne.n	800f8a6 <_read_r+0x1e>
 800f8a0:	682b      	ldr	r3, [r5, #0]
 800f8a2:	b103      	cbz	r3, 800f8a6 <_read_r+0x1e>
 800f8a4:	6023      	str	r3, [r4, #0]
 800f8a6:	bd38      	pop	{r3, r4, r5, pc}
 800f8a8:	20009554 	.word	0x20009554

0800f8ac <abort>:
 800f8ac:	b508      	push	{r3, lr}
 800f8ae:	2006      	movs	r0, #6
 800f8b0:	f000 f82c 	bl	800f90c <raise>
 800f8b4:	2001      	movs	r0, #1
 800f8b6:	f7f6 fb4d 	bl	8005f54 <_exit>

0800f8ba <_raise_r>:
 800f8ba:	291f      	cmp	r1, #31
 800f8bc:	b538      	push	{r3, r4, r5, lr}
 800f8be:	4604      	mov	r4, r0
 800f8c0:	460d      	mov	r5, r1
 800f8c2:	d904      	bls.n	800f8ce <_raise_r+0x14>
 800f8c4:	2316      	movs	r3, #22
 800f8c6:	6003      	str	r3, [r0, #0]
 800f8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800f8cc:	bd38      	pop	{r3, r4, r5, pc}
 800f8ce:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f8d0:	b112      	cbz	r2, 800f8d8 <_raise_r+0x1e>
 800f8d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f8d6:	b94b      	cbnz	r3, 800f8ec <_raise_r+0x32>
 800f8d8:	4620      	mov	r0, r4
 800f8da:	f000 f831 	bl	800f940 <_getpid_r>
 800f8de:	462a      	mov	r2, r5
 800f8e0:	4601      	mov	r1, r0
 800f8e2:	4620      	mov	r0, r4
 800f8e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8e8:	f000 b818 	b.w	800f91c <_kill_r>
 800f8ec:	2b01      	cmp	r3, #1
 800f8ee:	d00a      	beq.n	800f906 <_raise_r+0x4c>
 800f8f0:	1c59      	adds	r1, r3, #1
 800f8f2:	d103      	bne.n	800f8fc <_raise_r+0x42>
 800f8f4:	2316      	movs	r3, #22
 800f8f6:	6003      	str	r3, [r0, #0]
 800f8f8:	2001      	movs	r0, #1
 800f8fa:	e7e7      	b.n	800f8cc <_raise_r+0x12>
 800f8fc:	2400      	movs	r4, #0
 800f8fe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f902:	4628      	mov	r0, r5
 800f904:	4798      	blx	r3
 800f906:	2000      	movs	r0, #0
 800f908:	e7e0      	b.n	800f8cc <_raise_r+0x12>
	...

0800f90c <raise>:
 800f90c:	4b02      	ldr	r3, [pc, #8]	; (800f918 <raise+0xc>)
 800f90e:	4601      	mov	r1, r0
 800f910:	6818      	ldr	r0, [r3, #0]
 800f912:	f7ff bfd2 	b.w	800f8ba <_raise_r>
 800f916:	bf00      	nop
 800f918:	2000004c 	.word	0x2000004c

0800f91c <_kill_r>:
 800f91c:	b538      	push	{r3, r4, r5, lr}
 800f91e:	4d07      	ldr	r5, [pc, #28]	; (800f93c <_kill_r+0x20>)
 800f920:	2300      	movs	r3, #0
 800f922:	4604      	mov	r4, r0
 800f924:	4608      	mov	r0, r1
 800f926:	4611      	mov	r1, r2
 800f928:	602b      	str	r3, [r5, #0]
 800f92a:	f7f6 fb03 	bl	8005f34 <_kill>
 800f92e:	1c43      	adds	r3, r0, #1
 800f930:	d102      	bne.n	800f938 <_kill_r+0x1c>
 800f932:	682b      	ldr	r3, [r5, #0]
 800f934:	b103      	cbz	r3, 800f938 <_kill_r+0x1c>
 800f936:	6023      	str	r3, [r4, #0]
 800f938:	bd38      	pop	{r3, r4, r5, pc}
 800f93a:	bf00      	nop
 800f93c:	20009554 	.word	0x20009554

0800f940 <_getpid_r>:
 800f940:	f7f6 baf0 	b.w	8005f24 <_getpid>

0800f944 <_init>:
 800f944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f946:	bf00      	nop
 800f948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f94a:	bc08      	pop	{r3}
 800f94c:	469e      	mov	lr, r3
 800f94e:	4770      	bx	lr

0800f950 <_fini>:
 800f950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f952:	bf00      	nop
 800f954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f956:	bc08      	pop	{r3}
 800f958:	469e      	mov	lr, r3
 800f95a:	4770      	bx	lr
