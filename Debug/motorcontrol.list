
motorcontrol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010a70  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016a0  08010c40  08010c40  00011c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080122e0  080122e0  00014214  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080122e0  080122e0  000132e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080122e8  080122e8  00014214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080122e8  080122e8  000132e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080122ec  080122ec  000132ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000214  20000000  080122f0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a95c  20000218  08012504  00014218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000ab74  08012504  00014b74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c07f  00000000  00000000  00014244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d20  00000000  00000000  000302c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  00034fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001287  00000000  00000000  000367f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029945  00000000  00000000  00037a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020eb8  00000000  00000000  000613c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e893c  00000000  00000000  0008227c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016abb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c38  00000000  00000000  0016abfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00172834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000218 	.word	0x20000218
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010c28 	.word	0x08010c28

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000021c 	.word	0x2000021c
 800020c:	08010c28 	.word	0x08010c28

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9be 	b.w	800107c <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	468e      	mov	lr, r1
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	4688      	mov	r8, r1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d14a      	bne.n	8000e2a <__udivmoddi4+0xa6>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4617      	mov	r7, r2
 8000d98:	d962      	bls.n	8000e60 <__udivmoddi4+0xdc>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	b14e      	cbz	r6, 8000db4 <__udivmoddi4+0x30>
 8000da0:	f1c6 0320 	rsb	r3, r6, #32
 8000da4:	fa01 f806 	lsl.w	r8, r1, r6
 8000da8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dac:	40b7      	lsls	r7, r6
 8000dae:	ea43 0808 	orr.w	r8, r3, r8
 8000db2:	40b4      	lsls	r4, r6
 8000db4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fb01 f20c 	mul.w	r2, r1, ip
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x62>
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dd8:	f080 80ea 	bcs.w	8000fb0 <__udivmoddi4+0x22c>
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	f240 80e7 	bls.w	8000fb0 <__udivmoddi4+0x22c>
 8000de2:	3902      	subs	r1, #2
 8000de4:	443b      	add	r3, r7
 8000de6:	1a9a      	subs	r2, r3, r2
 8000de8:	b2a3      	uxth	r3, r4
 8000dea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000df6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dfa:	459c      	cmp	ip, r3
 8000dfc:	d909      	bls.n	8000e12 <__udivmoddi4+0x8e>
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e04:	f080 80d6 	bcs.w	8000fb4 <__udivmoddi4+0x230>
 8000e08:	459c      	cmp	ip, r3
 8000e0a:	f240 80d3 	bls.w	8000fb4 <__udivmoddi4+0x230>
 8000e0e:	443b      	add	r3, r7
 8000e10:	3802      	subs	r0, #2
 8000e12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e16:	eba3 030c 	sub.w	r3, r3, ip
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	b11d      	cbz	r5, 8000e26 <__udivmoddi4+0xa2>
 8000e1e:	40f3      	lsrs	r3, r6
 8000e20:	2200      	movs	r2, #0
 8000e22:	e9c5 3200 	strd	r3, r2, [r5]
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d905      	bls.n	8000e3a <__udivmoddi4+0xb6>
 8000e2e:	b10d      	cbz	r5, 8000e34 <__udivmoddi4+0xb0>
 8000e30:	e9c5 0100 	strd	r0, r1, [r5]
 8000e34:	2100      	movs	r1, #0
 8000e36:	4608      	mov	r0, r1
 8000e38:	e7f5      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e3a:	fab3 f183 	clz	r1, r3
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d146      	bne.n	8000ed0 <__udivmoddi4+0x14c>
 8000e42:	4573      	cmp	r3, lr
 8000e44:	d302      	bcc.n	8000e4c <__udivmoddi4+0xc8>
 8000e46:	4282      	cmp	r2, r0
 8000e48:	f200 8105 	bhi.w	8001056 <__udivmoddi4+0x2d2>
 8000e4c:	1a84      	subs	r4, r0, r2
 8000e4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e52:	2001      	movs	r0, #1
 8000e54:	4690      	mov	r8, r2
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	d0e5      	beq.n	8000e26 <__udivmoddi4+0xa2>
 8000e5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e5e:	e7e2      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	f000 8090 	beq.w	8000f86 <__udivmoddi4+0x202>
 8000e66:	fab2 f682 	clz	r6, r2
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	f040 80a4 	bne.w	8000fb8 <__udivmoddi4+0x234>
 8000e70:	1a8a      	subs	r2, r1, r2
 8000e72:	0c03      	lsrs	r3, r0, #16
 8000e74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e78:	b280      	uxth	r0, r0
 8000e7a:	b2bc      	uxth	r4, r7
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x11e>
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x11c>
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	f200 80e0 	bhi.w	8001060 <__udivmoddi4+0x2dc>
 8000ea0:	46c4      	mov	ip, r8
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ea8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000eac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000eb0:	fb02 f404 	mul.w	r4, r2, r4
 8000eb4:	429c      	cmp	r4, r3
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0x144>
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0x142>
 8000ec0:	429c      	cmp	r4, r3
 8000ec2:	f200 80ca 	bhi.w	800105a <__udivmoddi4+0x2d6>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	1b1b      	subs	r3, r3, r4
 8000eca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ece:	e7a5      	b.n	8000e1c <__udivmoddi4+0x98>
 8000ed0:	f1c1 0620 	rsb	r6, r1, #32
 8000ed4:	408b      	lsls	r3, r1
 8000ed6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eda:	431f      	orrs	r7, r3
 8000edc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ee0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ee4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ee8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eec:	4323      	orrs	r3, r4
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	fa1f fc87 	uxth.w	ip, r7
 8000ef6:	fbbe f0f9 	udiv	r0, lr, r9
 8000efa:	0c1c      	lsrs	r4, r3, #16
 8000efc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0e:	d909      	bls.n	8000f24 <__udivmoddi4+0x1a0>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f16:	f080 809c 	bcs.w	8001052 <__udivmoddi4+0x2ce>
 8000f1a:	45a6      	cmp	lr, r4
 8000f1c:	f240 8099 	bls.w	8001052 <__udivmoddi4+0x2ce>
 8000f20:	3802      	subs	r0, #2
 8000f22:	443c      	add	r4, r7
 8000f24:	eba4 040e 	sub.w	r4, r4, lr
 8000f28:	fa1f fe83 	uxth.w	lr, r3
 8000f2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f30:	fb09 4413 	mls	r4, r9, r3, r4
 8000f34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f3c:	45a4      	cmp	ip, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1ce>
 8000f40:	193c      	adds	r4, r7, r4
 8000f42:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f46:	f080 8082 	bcs.w	800104e <__udivmoddi4+0x2ca>
 8000f4a:	45a4      	cmp	ip, r4
 8000f4c:	d97f      	bls.n	800104e <__udivmoddi4+0x2ca>
 8000f4e:	3b02      	subs	r3, #2
 8000f50:	443c      	add	r4, r7
 8000f52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f56:	eba4 040c 	sub.w	r4, r4, ip
 8000f5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f5e:	4564      	cmp	r4, ip
 8000f60:	4673      	mov	r3, lr
 8000f62:	46e1      	mov	r9, ip
 8000f64:	d362      	bcc.n	800102c <__udivmoddi4+0x2a8>
 8000f66:	d05f      	beq.n	8001028 <__udivmoddi4+0x2a4>
 8000f68:	b15d      	cbz	r5, 8000f82 <__udivmoddi4+0x1fe>
 8000f6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f72:	fa04 f606 	lsl.w	r6, r4, r6
 8000f76:	fa22 f301 	lsr.w	r3, r2, r1
 8000f7a:	431e      	orrs	r6, r3
 8000f7c:	40cc      	lsrs	r4, r1
 8000f7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f82:	2100      	movs	r1, #0
 8000f84:	e74f      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000f86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f8a:	0c01      	lsrs	r1, r0, #16
 8000f8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f90:	b280      	uxth	r0, r0
 8000f92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f96:	463b      	mov	r3, r7
 8000f98:	4638      	mov	r0, r7
 8000f9a:	463c      	mov	r4, r7
 8000f9c:	46b8      	mov	r8, r7
 8000f9e:	46be      	mov	lr, r7
 8000fa0:	2620      	movs	r6, #32
 8000fa2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000fa6:	eba2 0208 	sub.w	r2, r2, r8
 8000faa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000fae:	e766      	b.n	8000e7e <__udivmoddi4+0xfa>
 8000fb0:	4601      	mov	r1, r0
 8000fb2:	e718      	b.n	8000de6 <__udivmoddi4+0x62>
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	e72c      	b.n	8000e12 <__udivmoddi4+0x8e>
 8000fb8:	f1c6 0220 	rsb	r2, r6, #32
 8000fbc:	fa2e f302 	lsr.w	r3, lr, r2
 8000fc0:	40b7      	lsls	r7, r6
 8000fc2:	40b1      	lsls	r1, r6
 8000fc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fd2:	b2bc      	uxth	r4, r7
 8000fd4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb08 f904 	mul.w	r9, r8, r4
 8000fe2:	40b0      	lsls	r0, r6
 8000fe4:	4589      	cmp	r9, r1
 8000fe6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fea:	b280      	uxth	r0, r0
 8000fec:	d93e      	bls.n	800106c <__udivmoddi4+0x2e8>
 8000fee:	1879      	adds	r1, r7, r1
 8000ff0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ff4:	d201      	bcs.n	8000ffa <__udivmoddi4+0x276>
 8000ff6:	4589      	cmp	r9, r1
 8000ff8:	d81f      	bhi.n	800103a <__udivmoddi4+0x2b6>
 8000ffa:	eba1 0109 	sub.w	r1, r1, r9
 8000ffe:	fbb1 f9fe 	udiv	r9, r1, lr
 8001002:	fb09 f804 	mul.w	r8, r9, r4
 8001006:	fb0e 1119 	mls	r1, lr, r9, r1
 800100a:	b292      	uxth	r2, r2
 800100c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001010:	4542      	cmp	r2, r8
 8001012:	d229      	bcs.n	8001068 <__udivmoddi4+0x2e4>
 8001014:	18ba      	adds	r2, r7, r2
 8001016:	f109 31ff 	add.w	r1, r9, #4294967295
 800101a:	d2c4      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 800101c:	4542      	cmp	r2, r8
 800101e:	d2c2      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 8001020:	f1a9 0102 	sub.w	r1, r9, #2
 8001024:	443a      	add	r2, r7
 8001026:	e7be      	b.n	8000fa6 <__udivmoddi4+0x222>
 8001028:	45f0      	cmp	r8, lr
 800102a:	d29d      	bcs.n	8000f68 <__udivmoddi4+0x1e4>
 800102c:	ebbe 0302 	subs.w	r3, lr, r2
 8001030:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001034:	3801      	subs	r0, #1
 8001036:	46e1      	mov	r9, ip
 8001038:	e796      	b.n	8000f68 <__udivmoddi4+0x1e4>
 800103a:	eba7 0909 	sub.w	r9, r7, r9
 800103e:	4449      	add	r1, r9
 8001040:	f1a8 0c02 	sub.w	ip, r8, #2
 8001044:	fbb1 f9fe 	udiv	r9, r1, lr
 8001048:	fb09 f804 	mul.w	r8, r9, r4
 800104c:	e7db      	b.n	8001006 <__udivmoddi4+0x282>
 800104e:	4673      	mov	r3, lr
 8001050:	e77f      	b.n	8000f52 <__udivmoddi4+0x1ce>
 8001052:	4650      	mov	r0, sl
 8001054:	e766      	b.n	8000f24 <__udivmoddi4+0x1a0>
 8001056:	4608      	mov	r0, r1
 8001058:	e6fd      	b.n	8000e56 <__udivmoddi4+0xd2>
 800105a:	443b      	add	r3, r7
 800105c:	3a02      	subs	r2, #2
 800105e:	e733      	b.n	8000ec8 <__udivmoddi4+0x144>
 8001060:	f1ac 0c02 	sub.w	ip, ip, #2
 8001064:	443b      	add	r3, r7
 8001066:	e71c      	b.n	8000ea2 <__udivmoddi4+0x11e>
 8001068:	4649      	mov	r1, r9
 800106a:	e79c      	b.n	8000fa6 <__udivmoddi4+0x222>
 800106c:	eba1 0109 	sub.w	r1, r1, r9
 8001070:	46c4      	mov	ip, r8
 8001072:	fbb1 f9fe 	udiv	r9, r1, lr
 8001076:	fb09 f804 	mul.w	r8, r9, r4
 800107a:	e7c4      	b.n	8001006 <__udivmoddi4+0x282>

0800107c <__aeabi_idiv0>:
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800109e:	4b2a      	ldr	r3, [pc, #168]	@ (8001148 <MX_ADC1_Init+0xc8>)
 80010a0:	4a2a      	ldr	r2, [pc, #168]	@ (800114c <MX_ADC1_Init+0xcc>)
 80010a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010a4:	4b28      	ldr	r3, [pc, #160]	@ (8001148 <MX_ADC1_Init+0xc8>)
 80010a6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ac:	4b26      	ldr	r3, [pc, #152]	@ (8001148 <MX_ADC1_Init+0xc8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010b2:	4b25      	ldr	r3, [pc, #148]	@ (8001148 <MX_ADC1_Init+0xc8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010b8:	4b23      	ldr	r3, [pc, #140]	@ (8001148 <MX_ADC1_Init+0xc8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010be:	4b22      	ldr	r3, [pc, #136]	@ (8001148 <MX_ADC1_Init+0xc8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010c6:	4b20      	ldr	r3, [pc, #128]	@ (8001148 <MX_ADC1_Init+0xc8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001148 <MX_ADC1_Init+0xc8>)
 80010ce:	4a20      	ldr	r2, [pc, #128]	@ (8001150 <MX_ADC1_Init+0xd0>)
 80010d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001148 <MX_ADC1_Init+0xc8>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001148 <MX_ADC1_Init+0xc8>)
 80010da:	2201      	movs	r2, #1
 80010dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010de:	4b1a      	ldr	r3, [pc, #104]	@ (8001148 <MX_ADC1_Init+0xc8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010e6:	4b18      	ldr	r3, [pc, #96]	@ (8001148 <MX_ADC1_Init+0xc8>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ec:	4816      	ldr	r0, [pc, #88]	@ (8001148 <MX_ADC1_Init+0xc8>)
 80010ee:	f006 f9b5 	bl	800745c <HAL_ADC_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80010f8:	f004 f840 	bl	800517c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 80010fc:	2316      	movs	r3, #22
 80010fe:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	480e      	ldr	r0, [pc, #56]	@ (8001148 <MX_ADC1_Init+0xc8>)
 8001110:	f006 fd80 	bl	8007c14 <HAL_ADCEx_MultiModeConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800111a:	f004 f82f 	bl	800517c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800111e:	230a      	movs	r3, #10
 8001120:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8001122:	2301      	movs	r3, #1
 8001124:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	4619      	mov	r1, r3
 800112e:	4806      	ldr	r0, [pc, #24]	@ (8001148 <MX_ADC1_Init+0xc8>)
 8001130:	f006 fb42 	bl	80077b8 <HAL_ADC_ConfigChannel>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 800113a:	f004 f81f 	bl	800517c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	3720      	adds	r7, #32
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000234 	.word	0x20000234
 800114c:	40012000 	.word	0x40012000
 8001150:	0f000001 	.word	0x0f000001

08001154 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800115a:	463b      	mov	r3, r7
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001166:	4b1e      	ldr	r3, [pc, #120]	@ (80011e0 <MX_ADC2_Init+0x8c>)
 8001168:	4a1e      	ldr	r2, [pc, #120]	@ (80011e4 <MX_ADC2_Init+0x90>)
 800116a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800116c:	4b1c      	ldr	r3, [pc, #112]	@ (80011e0 <MX_ADC2_Init+0x8c>)
 800116e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001172:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001174:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <MX_ADC2_Init+0x8c>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800117a:	4b19      	ldr	r3, [pc, #100]	@ (80011e0 <MX_ADC2_Init+0x8c>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001180:	4b17      	ldr	r3, [pc, #92]	@ (80011e0 <MX_ADC2_Init+0x8c>)
 8001182:	2200      	movs	r2, #0
 8001184:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001186:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <MX_ADC2_Init+0x8c>)
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800118e:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <MX_ADC2_Init+0x8c>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <MX_ADC2_Init+0x8c>)
 8001196:	2201      	movs	r2, #1
 8001198:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800119a:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <MX_ADC2_Init+0x8c>)
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011a2:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <MX_ADC2_Init+0x8c>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011a8:	480d      	ldr	r0, [pc, #52]	@ (80011e0 <MX_ADC2_Init+0x8c>)
 80011aa:	f006 f957 	bl	800745c <HAL_ADC_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 80011b4:	f003 ffe2 	bl	800517c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80011b8:	230b      	movs	r3, #11
 80011ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011bc:	2301      	movs	r3, #1
 80011be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011c4:	463b      	mov	r3, r7
 80011c6:	4619      	mov	r1, r3
 80011c8:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <MX_ADC2_Init+0x8c>)
 80011ca:	f006 faf5 	bl	80077b8 <HAL_ADC_ConfigChannel>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80011d4:	f003 ffd2 	bl	800517c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	2000027c 	.word	0x2000027c
 80011e4:	40012100 	.word	0x40012100

080011e8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ee:	463b      	mov	r3, r7
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80011fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001274 <MX_ADC3_Init+0x8c>)
 80011fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001278 <MX_ADC3_Init+0x90>)
 80011fe:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001200:	4b1c      	ldr	r3, [pc, #112]	@ (8001274 <MX_ADC3_Init+0x8c>)
 8001202:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001206:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001208:	4b1a      	ldr	r3, [pc, #104]	@ (8001274 <MX_ADC3_Init+0x8c>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800120e:	4b19      	ldr	r3, [pc, #100]	@ (8001274 <MX_ADC3_Init+0x8c>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001214:	4b17      	ldr	r3, [pc, #92]	@ (8001274 <MX_ADC3_Init+0x8c>)
 8001216:	2200      	movs	r2, #0
 8001218:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800121a:	4b16      	ldr	r3, [pc, #88]	@ (8001274 <MX_ADC3_Init+0x8c>)
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001222:	4b14      	ldr	r3, [pc, #80]	@ (8001274 <MX_ADC3_Init+0x8c>)
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001228:	4b12      	ldr	r3, [pc, #72]	@ (8001274 <MX_ADC3_Init+0x8c>)
 800122a:	2201      	movs	r2, #1
 800122c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800122e:	4b11      	ldr	r3, [pc, #68]	@ (8001274 <MX_ADC3_Init+0x8c>)
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001236:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <MX_ADC3_Init+0x8c>)
 8001238:	2201      	movs	r2, #1
 800123a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800123c:	480d      	ldr	r0, [pc, #52]	@ (8001274 <MX_ADC3_Init+0x8c>)
 800123e:	f006 f90d 	bl	800745c <HAL_ADC_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_ADC3_Init+0x64>
  {
    Error_Handler();
 8001248:	f003 ff98 	bl	800517c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800124c:	2300      	movs	r3, #0
 800124e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001250:	2301      	movs	r3, #1
 8001252:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001258:	463b      	mov	r3, r7
 800125a:	4619      	mov	r1, r3
 800125c:	4805      	ldr	r0, [pc, #20]	@ (8001274 <MX_ADC3_Init+0x8c>)
 800125e:	f006 faab 	bl	80077b8 <HAL_ADC_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8001268:	f003 ff88 	bl	800517c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200002c4 	.word	0x200002c4
 8001278:	40012200 	.word	0x40012200

0800127c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08e      	sub	sp, #56	@ 0x38
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a45      	ldr	r2, [pc, #276]	@ (80013b0 <HAL_ADC_MspInit+0x134>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d128      	bne.n	80012f0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	623b      	str	r3, [r7, #32]
 80012a2:	4b44      	ldr	r3, [pc, #272]	@ (80013b4 <HAL_ADC_MspInit+0x138>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a6:	4a43      	ldr	r2, [pc, #268]	@ (80013b4 <HAL_ADC_MspInit+0x138>)
 80012a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ae:	4b41      	ldr	r3, [pc, #260]	@ (80013b4 <HAL_ADC_MspInit+0x138>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012b6:	623b      	str	r3, [r7, #32]
 80012b8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
 80012be:	4b3d      	ldr	r3, [pc, #244]	@ (80013b4 <HAL_ADC_MspInit+0x138>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a3c      	ldr	r2, [pc, #240]	@ (80013b4 <HAL_ADC_MspInit+0x138>)
 80012c4:	f043 0304 	orr.w	r3, r3, #4
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b3a      	ldr	r3, [pc, #232]	@ (80013b4 <HAL_ADC_MspInit+0x138>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	61fb      	str	r3, [r7, #28]
 80012d4:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012d6:	2301      	movs	r3, #1
 80012d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012da:	2303      	movs	r3, #3
 80012dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e6:	4619      	mov	r1, r3
 80012e8:	4833      	ldr	r0, [pc, #204]	@ (80013b8 <HAL_ADC_MspInit+0x13c>)
 80012ea:	f007 fcc3 	bl	8008c74 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80012ee:	e05a      	b.n	80013a6 <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC2)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a31      	ldr	r2, [pc, #196]	@ (80013bc <HAL_ADC_MspInit+0x140>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d128      	bne.n	800134c <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
 80012fe:	4b2d      	ldr	r3, [pc, #180]	@ (80013b4 <HAL_ADC_MspInit+0x138>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001302:	4a2c      	ldr	r2, [pc, #176]	@ (80013b4 <HAL_ADC_MspInit+0x138>)
 8001304:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001308:	6453      	str	r3, [r2, #68]	@ 0x44
 800130a:	4b2a      	ldr	r3, [pc, #168]	@ (80013b4 <HAL_ADC_MspInit+0x138>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001312:	61bb      	str	r3, [r7, #24]
 8001314:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	4b26      	ldr	r3, [pc, #152]	@ (80013b4 <HAL_ADC_MspInit+0x138>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	4a25      	ldr	r2, [pc, #148]	@ (80013b4 <HAL_ADC_MspInit+0x138>)
 8001320:	f043 0304 	orr.w	r3, r3, #4
 8001324:	6313      	str	r3, [r2, #48]	@ 0x30
 8001326:	4b23      	ldr	r3, [pc, #140]	@ (80013b4 <HAL_ADC_MspInit+0x138>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001332:	2302      	movs	r3, #2
 8001334:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001336:	2303      	movs	r3, #3
 8001338:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001342:	4619      	mov	r1, r3
 8001344:	481c      	ldr	r0, [pc, #112]	@ (80013b8 <HAL_ADC_MspInit+0x13c>)
 8001346:	f007 fc95 	bl	8008c74 <HAL_GPIO_Init>
}
 800134a:	e02c      	b.n	80013a6 <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC3)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a1b      	ldr	r2, [pc, #108]	@ (80013c0 <HAL_ADC_MspInit+0x144>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d127      	bne.n	80013a6 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	4b16      	ldr	r3, [pc, #88]	@ (80013b4 <HAL_ADC_MspInit+0x138>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135e:	4a15      	ldr	r2, [pc, #84]	@ (80013b4 <HAL_ADC_MspInit+0x138>)
 8001360:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001364:	6453      	str	r3, [r2, #68]	@ 0x44
 8001366:	4b13      	ldr	r3, [pc, #76]	@ (80013b4 <HAL_ADC_MspInit+0x138>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <HAL_ADC_MspInit+0x138>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	4a0e      	ldr	r2, [pc, #56]	@ (80013b4 <HAL_ADC_MspInit+0x138>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6313      	str	r3, [r2, #48]	@ 0x30
 8001382:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <HAL_ADC_MspInit+0x138>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800138e:	2301      	movs	r3, #1
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001392:	2303      	movs	r3, #3
 8001394:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800139e:	4619      	mov	r1, r3
 80013a0:	4808      	ldr	r0, [pc, #32]	@ (80013c4 <HAL_ADC_MspInit+0x148>)
 80013a2:	f007 fc67 	bl	8008c74 <HAL_GPIO_Init>
}
 80013a6:	bf00      	nop
 80013a8:	3738      	adds	r7, #56	@ 0x38
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40012000 	.word	0x40012000
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40020800 	.word	0x40020800
 80013bc:	40012100 	.word	0x40012100
 80013c0:	40012200 	.word	0x40012200
 80013c4:	40020000 	.word	0x40020000

080013c8 <order_phases>:
#include <stdio.h>
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 80013c8:	b5b0      	push	{r4, r5, r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af02      	add	r7, sp, #8
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
 80013d4:	603b      	str	r3, [r7, #0]
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 80013d6:	4b76      	ldr	r3, [pc, #472]	@ (80015b0 <order_phases+0x1e8>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]

	if(!cal->started){
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7c1b      	ldrb	r3, [r3, #16]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d108      	bne.n	80013f6 <order_phases+0x2e>
		printf("Checking phase sign, pole pairs\r\n");
 80013e4:	4873      	ldr	r0, [pc, #460]	@ (80015b4 <order_phases+0x1ec>)
 80013e6:	f00c faf7 	bl	800d9d8 <puts>
		cal->started = 1;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	60da      	str	r2, [r3, #12]
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	ee07 3a90 	vmov	s15, r3
 8001402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001406:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 80015b8 <order_phases+0x1f0>
 800140a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	edd3 7a05 	vldr	s15, [r3, #20]
 800141a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800141e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001426:	d529      	bpl.n	800147c <order_phases+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 800143a:	f8c2 3288 	str.w	r3, [r2, #648]	@ 0x288
        cal->cal_position.elec_velocity = 0;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001444:	461a      	mov	r2, r3
 8001446:	f04f 0300 	mov.w	r3, #0
 800144a:	f8c2 3290 	str.w	r3, [r2, #656]	@ 0x290
        controller->i_d_des = I_CAL;
 800144e:	4b5b      	ldr	r3, [pc, #364]	@ (80015bc <order_phases+0x1f4>)
 8001450:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        controller->i_q_des = 0.0f;
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        commutate(controller, &cal->cal_position);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f503 4302 	add.w	r3, r3, #33280	@ 0x8200
 8001468:	332c      	adds	r3, #44	@ 0x2c
 800146a:	4619      	mov	r1, r3
 800146c:	68b8      	ldr	r0, [r7, #8]
 800146e:	f001 fdd5 	bl	800301c <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	68da      	ldr	r2, [r3, #12]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	619a      	str	r2, [r3, #24]
    	return;
 800147a:	e096      	b.n	80015aa <order_phases+0x1e2>
    }

    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001482:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80015c0 <order_phases+0x1f8>
 8001486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148e:	d51d      	bpl.n	80014cc <order_phases+0x104>
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	edd3 7a05 	vldr	s15, [r3, #20]
 8001496:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800149a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800149e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	edc3 7a02 	vstr	s15, [r3, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80014b6:	f8c2 3288 	str.w	r3, [r2, #648]	@ 0x288
		commutate(controller, &cal->cal_position);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f503 4302 	add.w	r3, r3, #33280	@ 0x8200
 80014c0:	332c      	adds	r3, #44	@ 0x2c
 80014c2:	4619      	mov	r1, r3
 80014c4:	68b8      	ldr	r0, [r7, #8]
 80014c6:	f001 fda9 	bl	800301c <commutate>
    	return;
 80014ca:	e06e      	b.n	80015aa <order_phases+0x1e2>
    }

	reset_foc(controller);
 80014cc:	68b8      	ldr	r0, [r7, #8]
 80014ce:	f001 fc8b 	bl	8002de8 <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	617b      	str	r3, [r7, #20]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	edd3 7a06 	vldr	s15, [r3, #24]
 80014de:	ed97 7a05 	vldr	s14, [r7, #20]
 80014e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e6:	eef0 7ae7 	vabs.f32	s15, s15
 80014ea:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80015c4 <order_phases+0x1fc>
 80014ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014f2:	ee16 0a90 	vmov	r0, s13
 80014f6:	f7ff f857 	bl	80005a8 <__aeabi_f2d>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	ec43 2b10 	vmov	d0, r2, r3
 8001502:	f00f f911 	bl	8010728 <round>
 8001506:	ec53 2b10 	vmov	r2, r3, d0
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	f7ff fb7b 	bl	8000c08 <__aeabi_d2uiz>
 8001512:	4603      	mov	r3, r0
 8001514:	b2da      	uxtb	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	701a      	strb	r2, [r3, #0]

	if(cal->theta_start < theta_end){
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001520:	ed97 7a05 	vldr	s14, [r7, #20]
 8001524:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152c:	dd07      	ble.n	800153e <order_phases+0x176>
		cal->phase_order = 0;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Phase order correct\r\n");
 8001536:	4824      	ldr	r0, [pc, #144]	@ (80015c8 <order_phases+0x200>)
 8001538:	f00c fa4e 	bl	800d9d8 <puts>
 800153c:	e006      	b.n	800154c <order_phases+0x184>
	}
	else{
		cal->phase_order = 1;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Swapping phase sign\r\n");
 8001546:	4821      	ldr	r0, [pc, #132]	@ (80015cc <order_phases+0x204>)
 8001548:	f00c fa46 	bl	800d9d8 <puts>
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	4619      	mov	r1, r3
 8001552:	481f      	ldr	r0, [pc, #124]	@ (80015d0 <order_phases+0x208>)
 8001554:	f00c f9d8 	bl	800d908 <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff f823 	bl	80005a8 <__aeabi_f2d>
 8001562:	4604      	mov	r4, r0
 8001564:	460d      	mov	r5, r1
 8001566:	6978      	ldr	r0, [r7, #20]
 8001568:	f7ff f81e 	bl	80005a8 <__aeabi_f2d>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	e9cd 2300 	strd	r2, r3, [sp]
 8001574:	4622      	mov	r2, r4
 8001576:	462b      	mov	r3, r5
 8001578:	4816      	ldr	r0, [pc, #88]	@ (80015d4 <order_phases+0x20c>)
 800157a:	f00c f9c5 	bl	800d908 <iprintf>
    PHASE_ORDER = cal->phase_order;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001584:	461a      	mov	r2, r3
 8001586:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <order_phases+0x1e8>)
 8001588:	601a      	str	r2, [r3, #0]
    PPAIRS = (float)cal->ppairs;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	ee07 3a90 	vmov	s15, r3
 8001592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001596:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <order_phases+0x1f4>)
 8001598:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    cal->started = 0;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	741a      	strb	r2, [r3, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bdb0      	pop	{r4, r5, r7, pc}
 80015b0:	20000448 	.word	0x20000448
 80015b4:	08010c40 	.word	0x08010c40
 80015b8:	37d1b717 	.word	0x37d1b717
 80015bc:	20000348 	.word	0x20000348
 80015c0:	3fd06cbe 	.word	0x3fd06cbe
 80015c4:	40c90fdb 	.word	0x40c90fdb
 80015c8:	08010c64 	.word	0x08010c64
 80015cc:	08010c7c 	.word	0x08010c7c
 80015d0:	08010c94 	.word	0x08010c94
 80015d4:	08010ca8 	.word	0x08010ca8

080015d8 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	b094      	sub	sp, #80	@ 0x50
 80015dc:	af02      	add	r7, sp, #8
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	603b      	str	r3, [r7, #0]
	/* Calibrates e-zero and encoder nonliearity */

	if(!cal->started){
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	7c1b      	ldrb	r3, [r3, #16]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10f      	bne.n	800160e <calibrate_encoder+0x36>
			printf("Starting offset cal and linearization\r\n");
 80015ee:	489e      	ldr	r0, [pc, #632]	@ (8001868 <calibrate_encoder+0x290>)
 80015f0:	f00c f9f2 	bl	800d9d8 <puts>
			cal->started = 1;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	741a      	strb	r2, [r3, #16]
			cal->start_count = loop_count;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	60da      	str	r2, [r3, #12]
			cal->next_sample_time = T1;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001606:	629a      	str	r2, [r3, #40]	@ 0x28
			cal->sample_count = 0;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	849a      	strh	r2, [r3, #36]	@ 0x24
		}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	ee07 3a90 	vmov	s15, r3
 800161a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800161e:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 800186c <calibrate_encoder+0x294>
 8001622:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001632:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001636:	eef4 7ac7 	vcmpe.f32	s15, s14
 800163a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163e:	d525      	bpl.n	800168c <calibrate_encoder+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8001652:	f8c2 3288 	str.w	r3, [r2, #648]	@ 0x288
        controller->i_d_des = I_CAL;
 8001656:	4b86      	ldr	r3, [pc, #536]	@ (8001870 <calibrate_encoder+0x298>)
 8001658:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        controller->i_q_des = 0.0f;
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        commutate(controller, &cal->cal_position);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f503 4302 	add.w	r3, r3, #33280	@ 0x8200
 8001670:	332c      	adds	r3, #44	@ 0x2c
 8001672:	4619      	mov	r1, r3
 8001674:	68b8      	ldr	r0, [r7, #8]
 8001676:	f001 fcd1 	bl	800301c <commutate>

    	cal->theta_start = encoder->angle_multiturn[0];
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	619a      	str	r2, [r3, #24]
    	cal->next_sample_time = cal->time;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	695a      	ldr	r2, [r3, #20]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	629a      	str	r2, [r3, #40]	@ 0x28
    	return;
 800168a:	e259      	b.n	8001b40 <calibrate_encoder+0x568>
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001692:	4b77      	ldr	r3, [pc, #476]	@ (8001870 <calibrate_encoder+0x298>)
 8001694:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001698:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8001874 <calibrate_encoder+0x29c>
 800169c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80016a0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80016a4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80016a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80016ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80016b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b8:	f140 808f 	bpl.w	80017da <calibrate_encoder+0x202>
    	// rotate voltage vector through one mechanical rotation in the positive direction
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	edd3 7a02 	vldr	s15, [r3, #8]
 80016c2:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8001878 <calibrate_encoder+0x2a0>
 80016c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	edc3 7a02 	vstr	s15, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80016da:	f8c2 3288 	str.w	r3, [r2, #648]	@ 0x288
		commutate(controller, &cal->cal_position);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f503 4302 	add.w	r3, r3, #33280	@ 0x8200
 80016e4:	332c      	adds	r3, #44	@ 0x2c
 80016e6:	4619      	mov	r1, r3
 80016e8:	68b8      	ldr	r0, [r7, #8]
 80016ea:	f001 fc97 	bl	800301c <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if(cal->time > cal->next_sample_time){
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	ed93 7a05 	vldr	s14, [r3, #20]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80016fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001702:	dc00      	bgt.n	8001706 <calibrate_encoder+0x12e>
				return;
			}
			cal->sample_count++;

		}
		return;
 8001704:	e21c      	b.n	8001b40 <calibrate_encoder+0x568>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	edd3 7a02 	vldr	s15, [r3, #8]
 800170c:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 800188c <calibrate_encoder+0x2b4>
 8001710:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001714:	4b56      	ldr	r3, [pc, #344]	@ (8001870 <calibrate_encoder+0x298>)
 8001716:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800171a:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8001874 <calibrate_encoder+0x29c>
 800171e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001726:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800172a:	ee17 3a90 	vmov	r3, s15
 800172e:	61bb      	str	r3, [r7, #24]
			int error = encoder->raw - count_ref;//- encoder->raw;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	617b      	str	r3, [r7, #20]
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	13db      	asrs	r3, r3, #15
 800173e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001746:	4618      	mov	r0, r3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	441a      	add	r2, r3
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	f100 030a 	add.w	r3, r0, #10
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	440b      	add	r3, r1
 8001756:	605a      	str	r2, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800175c:	461d      	mov	r5, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	330a      	adds	r3, #10
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	685c      	ldr	r4, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe ff19 	bl	80005a8 <__aeabi_f2d>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	e9cd 2300 	strd	r2, r3, [sp]
 800177e:	4623      	mov	r3, r4
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4629      	mov	r1, r5
 8001784:	483d      	ldr	r0, [pc, #244]	@ (800187c <calibrate_encoder+0x2a4>)
 8001786:	f00c f8bf 	bl	800d908 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001790:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001880 <calibrate_encoder+0x2a8>
 8001794:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80017a2:	ee07 3a90 	vmov	s15, r3
 80017a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017aa:	4b31      	ldr	r3, [pc, #196]	@ (8001870 <calibrate_encoder+0x298>)
 80017ac:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80017b0:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8001884 <calibrate_encoder+0x2ac>
 80017b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80017b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80017bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80017c0:	eeb4 7a67 	vcmp.f32	s14, s15
 80017c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c8:	f000 81b7 	beq.w	8001b3a <calibrate_encoder+0x562>
			cal->sample_count++;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80017d0:	3301      	adds	r3, #1
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	849a      	strh	r2, [r3, #36]	@ 0x24
		return;
 80017d8:	e1b2      	b.n	8001b40 <calibrate_encoder+0x568>
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	ed93 7a05 	vldr	s14, [r3, #20]
 80017e0:	4b23      	ldr	r3, [pc, #140]	@ (8001870 <calibrate_encoder+0x298>)
 80017e2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80017e6:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8001888 <calibrate_encoder+0x2b0>
 80017ea:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80017ee:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80017f2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80017f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80017fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80017fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001806:	f140 80a9 	bpl.w	800195c <calibrate_encoder+0x384>
		// rotate voltage vector through one mechanical rotation in the negative direction
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001810:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001878 <calibrate_encoder+0x2a0>
 8001814:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	edc3 7a02 	vstr	s15, [r3, #8]
		controller->i_d_des = I_CAL;
 800181e:	4b14      	ldr	r3, [pc, #80]	@ (8001870 <calibrate_encoder+0x298>)
 8001820:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
		controller->i_q_des = 0.0f;
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
		cal->cal_position.elec_angle = cal->theta_ref;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 800183c:	f8c2 3288 	str.w	r3, [r2, #648]	@ 0x288
		commutate(controller, &cal->cal_position);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f503 4302 	add.w	r3, r3, #33280	@ 0x8200
 8001846:	332c      	adds	r3, #44	@ 0x2c
 8001848:	4619      	mov	r1, r3
 800184a:	68b8      	ldr	r0, [r7, #8]
 800184c:	f001 fbe6 	bl	800301c <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	ed93 7a05 	vldr	s14, [r3, #20]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800185c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001864:	dc14      	bgt.n	8001890 <calibrate_encoder+0x2b8>
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
			cal->sample_count--;
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
 8001866:	e16a      	b.n	8001b3e <calibrate_encoder+0x566>
 8001868:	08010cc4 	.word	0x08010cc4
 800186c:	37d1b717 	.word	0x37d1b717
 8001870:	20000348 	.word	0x20000348
 8001874:	40c90fdb 	.word	0x40c90fdb
 8001878:	3983126e 	.word	0x3983126e
 800187c:	08010cec 	.word	0x08010cec
 8001880:	3ba0d97c 	.word	0x3ba0d97c
 8001884:	43000000 	.word	0x43000000
 8001888:	41490fdb 	.word	0x41490fdb
 800188c:	47800000 	.word	0x47800000
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 8152 	beq.w	8001b3e <calibrate_encoder+0x566>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	edd3 7a02 	vldr	s15, [r3, #8]
 80018a0:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 800188c <calibrate_encoder+0x2b4>
 80018a4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80018a8:	4ba7      	ldr	r3, [pc, #668]	@ (8001b48 <calibrate_encoder+0x570>)
 80018aa:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80018ae:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 8001b4c <calibrate_encoder+0x574>
 80018b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018be:	ee17 3a90 	vmov	r3, s15
 80018c2:	623b      	str	r3, [r7, #32]
			int error = encoder->raw - count_ref;// - encoder->raw;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	61fb      	str	r3, [r7, #28]
			error = error + ENC_CPR*(error<0);
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	13db      	asrs	r3, r3, #15
 80018d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	4413      	add	r3, r2
 80018da:	61fb      	str	r3, [r7, #28]
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	330a      	adds	r3, #10
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	4413      	add	r3, r2
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80018f2:	4610      	mov	r0, r2
 80018f4:	0fda      	lsrs	r2, r3, #31
 80018f6:	4413      	add	r3, r2
 80018f8:	105b      	asrs	r3, r3, #1
 80018fa:	4619      	mov	r1, r3
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	f100 030a 	add.w	r3, r0, #10
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	6059      	str	r1, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800190c:	461d      	mov	r5, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	330a      	adds	r3, #10
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	685c      	ldr	r4, [r3, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fe41 	bl	80005a8 <__aeabi_f2d>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	e9cd 2300 	strd	r2, r3, [sp]
 800192e:	4623      	mov	r3, r4
 8001930:	6a3a      	ldr	r2, [r7, #32]
 8001932:	4629      	mov	r1, r5
 8001934:	4886      	ldr	r0, [pc, #536]	@ (8001b50 <calibrate_encoder+0x578>)
 8001936:	f00b ffe7 	bl	800d908 <iprintf>
			cal->sample_count--;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800193e:	3b01      	subs	r3, #1
 8001940:	b29a      	uxth	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	849a      	strh	r2, [r3, #36]	@ 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800194c:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8001b54 <calibrate_encoder+0x57c>
 8001950:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		return;
 800195a:	e0f0      	b.n	8001b3e <calibrate_encoder+0x566>
    }

    reset_foc(controller);
 800195c:	68b8      	ldr	r0, [r7, #8]
 800195e:	f001 fa43 	bl	8002de8 <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	647b      	str	r3, [r7, #68]	@ 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8001966:	2300      	movs	r3, #0
 8001968:	643b      	str	r3, [r7, #64]	@ 0x40
 800196a:	e00b      	b.n	8001984 <calibrate_encoder+0x3ac>
		ezero_mean += cal->error_arr[i];
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001970:	330a      	adds	r3, #10
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800197a:	4413      	add	r3, r2
 800197c:	647b      	str	r3, [r7, #68]	@ 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 800197e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001980:	3301      	adds	r3, #1
 8001982:	643b      	str	r3, [r7, #64]	@ 0x40
 8001984:	4b70      	ldr	r3, [pc, #448]	@ (8001b48 <calibrate_encoder+0x570>)
 8001986:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800198a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800198e:	ee17 3a90 	vmov	r3, s15
 8001992:	01db      	lsls	r3, r3, #7
 8001994:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001996:	429a      	cmp	r2, r3
 8001998:	dbe8      	blt.n	800196c <calibrate_encoder+0x394>
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 800199a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800199c:	ee07 3a90 	vmov	s15, r3
 80019a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019a4:	4b68      	ldr	r3, [pc, #416]	@ (8001b48 <calibrate_encoder+0x570>)
 80019a6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80019aa:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8001b58 <calibrate_encoder+0x580>
 80019ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ba:	ee17 2a90 	vmov	r2, s15
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	61da      	str	r2, [r3, #28]

	// Moving average to filter out cogging ripple

	int window = SAMPLES_PER_PPAIR;
 80019c2:	2380      	movs	r3, #128	@ 0x80
 80019c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	int lut_offset = (ENC_CPR-cal->error_arr[0])*N_LUT/ENC_CPR;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ca:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	da01      	bge.n	80019d6 <calibrate_encoder+0x3fe>
 80019d2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80019d6:	125b      	asrs	r3, r3, #9
 80019d8:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 0; i<N_LUT; i++){
 80019da:	2300      	movs	r3, #0
 80019dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019de:	e0a0      	b.n	8001b22 <calibrate_encoder+0x54a>
			int moving_avg = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	63bb      	str	r3, [r7, #56]	@ 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 80019e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019e6:	0fda      	lsrs	r2, r3, #31
 80019e8:	4413      	add	r3, r2
 80019ea:	105b      	asrs	r3, r3, #1
 80019ec:	425b      	negs	r3, r3
 80019ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80019f0:	e068      	b.n	8001ac4 <calibrate_encoder+0x4ec>
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 80019f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019f4:	ee07 3a90 	vmov	s15, r3
 80019f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019fc:	4b52      	ldr	r3, [pc, #328]	@ (8001b48 <calibrate_encoder+0x570>)
 80019fe:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a06:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8001b58 <calibrate_encoder+0x580>
 8001a0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a0e:	eddf 6a52 	vldr	s13, [pc, #328]	@ 8001b58 <calibrate_encoder+0x580>
 8001a12:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a18:	ee07 3a90 	vmov	s15, r3
 8001a1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a28:	ee17 3a90 	vmov	r3, s15
 8001a2c:	633b      	str	r3, [r7, #48]	@ 0x30
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 8001a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	da13      	bge.n	8001a5c <calibrate_encoder+0x484>
 8001a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a36:	ee07 3a90 	vmov	s15, r3
 8001a3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a3e:	4b42      	ldr	r3, [pc, #264]	@ (8001b48 <calibrate_encoder+0x570>)
 8001a40:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a44:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8001b58 <calibrate_encoder+0x580>
 8001a48:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a54:	ee17 3a90 	vmov	r3, s15
 8001a58:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a5a:	e027      	b.n	8001aac <calibrate_encoder+0x4d4>
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a5e:	ee07 3a90 	vmov	s15, r3
 8001a62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a66:	4b38      	ldr	r3, [pc, #224]	@ (8001b48 <calibrate_encoder+0x570>)
 8001a68:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a6c:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8001b58 <calibrate_encoder+0x580>
 8001a70:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001a78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001a7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a84:	dd12      	ble.n	8001aac <calibrate_encoder+0x4d4>
 8001a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a88:	ee07 3a90 	vmov	s15, r3
 8001a8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a90:	4b2d      	ldr	r3, [pc, #180]	@ (8001b48 <calibrate_encoder+0x570>)
 8001a92:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a96:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8001b58 <calibrate_encoder+0x580>
 8001a9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aa6:	ee17 3a90 	vmov	r3, s15
 8001aaa:	633b      	str	r3, [r7, #48]	@ 0x30
				moving_avg += cal->error_arr[index];
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ab0:	330a      	adds	r3, #10
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001aba:	4413      	add	r3, r2
 8001abc:	63bb      	str	r3, [r7, #56]	@ 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ac6:	0fda      	lsrs	r2, r3, #31
 8001ac8:	4413      	add	r3, r2
 8001aca:	105b      	asrs	r3, r3, #1
 8001acc:	461a      	mov	r2, r3
 8001ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	db8e      	blt.n	80019f2 <calibrate_encoder+0x41a>
			}
			moving_avg = moving_avg/window;
 8001ad4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ad8:	fb92 f3f3 	sdiv	r3, r2, r3
 8001adc:	63bb      	str	r3, [r7, #56]	@ 0x38
			int lut_index = lut_offset + i;
 8001ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ae2:	4413      	add	r3, r2
 8001ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8001ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ae8:	2b7f      	cmp	r3, #127	@ 0x7f
 8001aea:	dd02      	ble.n	8001af2 <calibrate_encoder+0x51a>
 8001aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aee:	3b80      	subs	r3, #128	@ 0x80
 8001af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001af8:	1ad2      	subs	r2, r2, r3
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001afe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b02:	330a      	adds	r3, #10
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	440b      	add	r3, r1
 8001b08:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	461a      	mov	r2, r3
 8001b14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001b16:	4811      	ldr	r0, [pc, #68]	@ (8001b5c <calibrate_encoder+0x584>)
 8001b18:	f00b fef6 	bl	800d908 <iprintf>
	for(int i = 0; i<N_LUT; i++){
 8001b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b1e:	3301      	adds	r3, #1
 8001b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b24:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b26:	f77f af5b 	ble.w	80019e0 <calibrate_encoder+0x408>

		}

	cal->started = 0;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	741a      	strb	r2, [r3, #16]
	cal->done_cal = 1;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001b38:	e002      	b.n	8001b40 <calibrate_encoder+0x568>
				return;
 8001b3a:	bf00      	nop
 8001b3c:	e000      	b.n	8001b40 <calibrate_encoder+0x568>
		return;
 8001b3e:	bf00      	nop
}
 8001b40:	3748      	adds	r7, #72	@ 0x48
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bdb0      	pop	{r4, r5, r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000348 	.word	0x20000348
 8001b4c:	40c90fdb 	.word	0x40c90fdb
 8001b50:	08010cec 	.word	0x08010cec
 8001b54:	3ba0d97c 	.word	0x3ba0d97c
 8001b58:	43000000 	.word	0x43000000
 8001b5c:	08010cfc 	.word	0x08010cfc

08001b60 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001b64:	4b17      	ldr	r3, [pc, #92]	@ (8001bc4 <MX_CAN1_Init+0x64>)
 8001b66:	4a18      	ldr	r2, [pc, #96]	@ (8001bc8 <MX_CAN1_Init+0x68>)
 8001b68:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001b6a:	4b16      	ldr	r3, [pc, #88]	@ (8001bc4 <MX_CAN1_Init+0x64>)
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001b70:	4b14      	ldr	r3, [pc, #80]	@ (8001bc4 <MX_CAN1_Init+0x64>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b76:	4b13      	ldr	r3, [pc, #76]	@ (8001bc4 <MX_CAN1_Init+0x64>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <MX_CAN1_Init+0x64>)
 8001b7e:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8001b82:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001b84:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc4 <MX_CAN1_Init+0x64>)
 8001b86:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b8a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc4 <MX_CAN1_Init+0x64>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001b92:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <MX_CAN1_Init+0x64>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001b98:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc4 <MX_CAN1_Init+0x64>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001b9e:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <MX_CAN1_Init+0x64>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001ba4:	4b07      	ldr	r3, [pc, #28]	@ (8001bc4 <MX_CAN1_Init+0x64>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001baa:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <MX_CAN1_Init+0x64>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001bb0:	4804      	ldr	r0, [pc, #16]	@ (8001bc4 <MX_CAN1_Init+0x64>)
 8001bb2:	f006 f875 	bl	8007ca0 <HAL_CAN_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001bbc:	f003 fade 	bl	800517c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	2000030c 	.word	0x2000030c
 8001bc8:	40006400 	.word	0x40006400

08001bcc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08a      	sub	sp, #40	@ 0x28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1d      	ldr	r2, [pc, #116]	@ (8001c60 <HAL_CAN_MspInit+0x94>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d134      	bne.n	8001c58 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c64 <HAL_CAN_MspInit+0x98>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf6:	4a1b      	ldr	r2, [pc, #108]	@ (8001c64 <HAL_CAN_MspInit+0x98>)
 8001bf8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bfe:	4b19      	ldr	r3, [pc, #100]	@ (8001c64 <HAL_CAN_MspInit+0x98>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <HAL_CAN_MspInit+0x98>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	4a14      	ldr	r2, [pc, #80]	@ (8001c64 <HAL_CAN_MspInit+0x98>)
 8001c14:	f043 0302 	orr.w	r3, r3, #2
 8001c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1a:	4b12      	ldr	r3, [pc, #72]	@ (8001c64 <HAL_CAN_MspInit+0x98>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c26:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c34:	2303      	movs	r3, #3
 8001c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c38:	2309      	movs	r3, #9
 8001c3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	4619      	mov	r1, r3
 8001c42:	4809      	ldr	r0, [pc, #36]	@ (8001c68 <HAL_CAN_MspInit+0x9c>)
 8001c44:	f007 f816 	bl	8008c74 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	2014      	movs	r0, #20
 8001c4e:	f006 ff48 	bl	8008ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001c52:	2014      	movs	r0, #20
 8001c54:	f006 ff61 	bl	8008b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001c58:	bf00      	nop
 8001c5a:	3728      	adds	r7, #40	@ 0x28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40006400 	.word	0x40006400
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40020400 	.word	0x40020400

08001c6c <can_rx_init>:
  }
}

/* USER CODE BEGIN 1 */

void can_rx_init(CANRxMessage *msg){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	msg->filter.FilterFIFOAssignment=CAN_FILTER_FIFO0; 	// set fifo assignment
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	63da      	str	r2, [r3, #60]	@ 0x3c
	msg->filter.FilterIdHigh=CAN_ID<<5;         // CAN ID
 8001c7a:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <can_rx_init+0x54>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	015a      	lsls	r2, r3, #5
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	62da      	str	r2, [r3, #44]	@ 0x2c
	msg->filter.FilterIdLow=0x0;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	631a      	str	r2, [r3, #48]	@ 0x30
	msg->filter.FilterMaskIdHigh=0xFFF;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001c90:	635a      	str	r2, [r3, #52]	@ 0x34
	msg->filter.FilterMaskIdLow=0xFFFF;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c98:	639a      	str	r2, [r3, #56]	@ 0x38
	msg->filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	645a      	str	r2, [r3, #68]	@ 0x44
	msg->filter.FilterScale=CAN_FILTERSCALE_16BIT;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	649a      	str	r2, [r3, #72]	@ 0x48
	msg->filter.FilterActivation=ENABLE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	64da      	str	r2, [r3, #76]	@ 0x4c
	HAL_CAN_ConfigFilter(&CAN_H, &msg->filter);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	332c      	adds	r3, #44	@ 0x2c
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4804      	ldr	r0, [pc, #16]	@ (8001cc4 <can_rx_init+0x58>)
 8001cb4:	f006 f8f0 	bl	8007e98 <HAL_CAN_ConfigFilter>
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000448 	.word	0x20000448
 8001cc4:	2000030c 	.word	0x2000030c

08001cc8 <can_tx_init>:

void can_tx_init(CANTxMessage *msg){
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	msg->tx_header.DLC = 8; 			// message size of 8 byte
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2208      	movs	r2, #8
 8001cd4:	61da      	str	r2, [r3, #28]
	msg->tx_header.IDE=CAN_ID_STD; 		// set identifier to standard
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	615a      	str	r2, [r3, #20]
	msg->tx_header.RTR=CAN_RTR_DATA; 	// set data type to remote transmission request?
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	619a      	str	r2, [r3, #24]
	msg->tx_header.StdId = CAN_MASTER;  // recipient CAN ID
 8001ce2:	4b05      	ldr	r3, [pc, #20]	@ (8001cf8 <can_tx_init+0x30>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	60da      	str	r2, [r3, #12]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	20000448 	.word	0x20000448

08001cfc <pack_reply_default>:
/// 0: [position[15-8]]
/// 1: [position[7-0]]
/// 2: [velocity[11-4]]
/// 3: [velocity[3-0], current[11-8]]
/// 4: [current[7-0]]
void pack_reply_default(CANRxMessage rx_msg, CANTxMessage *tx_msg, float p, float v, float t, int version, int calibrate_finish, int state){
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b088      	sub	sp, #32
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 8001d08:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8001d0c:	ed87 0a03 	vstr	s0, [r7, #12]
 8001d10:	edc7 0a02 	vstr	s1, [r7, #8]
 8001d14:	ed87 1a01 	vstr	s2, [r7, #4]
    int p_int = float_to_uint(p, P_REPLY_MIN, P_REPLY_MAX, 16);
 8001d18:	2010      	movs	r0, #16
 8001d1a:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 8001df0 <pack_reply_default+0xf4>
 8001d1e:	eddf 0a35 	vldr	s1, [pc, #212]	@ 8001df4 <pack_reply_default+0xf8>
 8001d22:	ed97 0a03 	vldr	s0, [r7, #12]
 8001d26:	f003 fb19 	bl	800535c <float_to_uint>
 8001d2a:	61f8      	str	r0, [r7, #28]
    int v_int = float_to_uint(v, V_MIN, V_MAX, 16);
 8001d2c:	4b32      	ldr	r3, [pc, #200]	@ (8001df8 <pack_reply_default+0xfc>)
 8001d2e:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001d32:	4b31      	ldr	r3, [pc, #196]	@ (8001df8 <pack_reply_default+0xfc>)
 8001d34:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 8001d38:	2010      	movs	r0, #16
 8001d3a:	eeb0 1a47 	vmov.f32	s2, s14
 8001d3e:	eef0 0a67 	vmov.f32	s1, s15
 8001d42:	ed97 0a02 	vldr	s0, [r7, #8]
 8001d46:	f003 fb09 	bl	800535c <float_to_uint>
 8001d4a:	61b8      	str	r0, [r7, #24]
//    int t_int = float_to_uint(t, -(I_MAX+SENSE_BUFFER)*KT*GR, (I_MAX+SENSE_BUFFER)*KT*GR, 16);
    int t_int = float_to_uint(t, T_MIN, T_MAX, 16);
 8001d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001df8 <pack_reply_default+0xfc>)
 8001d4e:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8001d52:	4b29      	ldr	r3, [pc, #164]	@ (8001df8 <pack_reply_default+0xfc>)
 8001d54:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8001d58:	2010      	movs	r0, #16
 8001d5a:	eeb0 1a47 	vmov.f32	s2, s14
 8001d5e:	eef0 0a67 	vmov.f32	s1, s15
 8001d62:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d66:	f003 faf9 	bl	800535c <float_to_uint>
 8001d6a:	6178      	str	r0, [r7, #20]

    tx_msg->data[0] = p_int>>8;
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	121b      	asrs	r3, r3, #8
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d76:	705a      	strb	r2, [r3, #1]
    tx_msg->data[1] = p_int&0xFF;
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d80:	709a      	strb	r2, [r3, #2]
    tx_msg->data[2] = v_int>>8;
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	121b      	asrs	r3, r3, #8
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d8c:	70da      	strb	r2, [r3, #3]
    tx_msg->data[3] = v_int&0xFF;
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d96:	711a      	strb	r2, [r3, #4]
    tx_msg->data[4] = t_int>>8;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	121b      	asrs	r3, r3, #8
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001da2:	715a      	strb	r2, [r3, #5]
    tx_msg->data[5] = t_int&0xFF;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001dac:	719a      	strb	r2, [r3, #6]
    tx_msg->data[6] = 0x0 + (calibrate_finish&0xF);
 8001dae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	f003 030f 	and.w	r3, r3, #15
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001dbe:	71da      	strb	r2, [r3, #7]
    tx_msg->data[7] = (version<<4) + (state&0xF);
 8001dc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	f003 030f 	and.w	r3, r3, #15
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001dde:	721a      	strb	r2, [r3, #8]
}
 8001de0:	bf00      	nop
 8001de2:	3720      	adds	r7, #32
 8001de4:	46bd      	mov	sp, r7
 8001de6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001dea:	b004      	add	sp, #16
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	42bc7edd 	.word	0x42bc7edd
 8001df4:	c2bc7edd 	.word	0xc2bc7edd
 8001df8:	20000348 	.word	0x20000348

08001dfc <pack_reply_config>:

void pack_reply_config(CANRxMessage rx_msg, CANTxMessage *tx_msg, int version, int state){
 8001dfc:	b084      	sub	sp, #16
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b098      	sub	sp, #96	@ 0x60
 8001e02:	af12      	add	r7, sp, #72	@ 0x48
 8001e04:	f107 0c20 	add.w	ip, r7, #32
 8001e08:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int func_type = rx_msg.data[0];
 8001e0c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001e10:	613b      	str	r3, [r7, #16]
	int reg_type = rx_msg.data[1];
 8001e12:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001e16:	60fb      	str	r3, [r7, #12]
	int target_addr = rx_msg.data[2];
 8001e18:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001e1c:	60bb      	str	r3, [r7, #8]
	union RegData reg_data;
	int config_state;

	if (func_type == 1){
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d114      	bne.n	8001e4e <pack_reply_config+0x52>
		if (state == MOTOR_MODE){
 8001e24:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d102      	bne.n	8001e32 <pack_reply_config+0x36>
			config_state = CODE_READ_ONLY;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	e02d      	b.n	8001e8e <pack_reply_config+0x92>
		}
		else{
		config_state = unpack_config_cmd(rx_msg);
 8001e32:	4668      	mov	r0, sp
 8001e34:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e38:	2248      	movs	r2, #72	@ 0x48
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f00b ff5f 	bl	800dcfe <memcpy>
 8001e40:	f107 0320 	add.w	r3, r7, #32
 8001e44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e46:	f000 f967 	bl	8002118 <unpack_config_cmd>
 8001e4a:	6178      	str	r0, [r7, #20]
 8001e4c:	e01f      	b.n	8001e8e <pack_reply_config+0x92>
		}
	}
	else if ((reg_type == 0 && (target_addr < 0 || target_addr >= INT_REG_LENGTH)) ||
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d105      	bne.n	8001e60 <pack_reply_config+0x64>
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	db0b      	blt.n	8001e72 <pack_reply_config+0x76>
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2bff      	cmp	r3, #255	@ 0xff
 8001e5e:	dc08      	bgt.n	8001e72 <pack_reply_config+0x76>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d108      	bne.n	8001e78 <pack_reply_config+0x7c>
			 (reg_type == 1 && (target_addr < 0 || target_addr >= FLOAT_REG_LENGTH))){
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	db02      	blt.n	8001e72 <pack_reply_config+0x76>
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e70:	dd02      	ble.n	8001e78 <pack_reply_config+0x7c>
		config_state = CODE_INVALID_ADDR;
 8001e72:	2303      	movs	r3, #3
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	e00a      	b.n	8001e8e <pack_reply_config+0x92>
	}
	else if (reg_type != 0 && reg_type != 1){
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d005      	beq.n	8001e8a <pack_reply_config+0x8e>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d002      	beq.n	8001e8a <pack_reply_config+0x8e>
		config_state = CODE_INVALID_CMD;
 8001e84:	2304      	movs	r3, #4
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	e001      	b.n	8001e8e <pack_reply_config+0x92>
	}
	else{
		config_state = CODE_CONFIG_SUCCESS;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
	}

	if (config_state != CODE_INVALID_ADDR){
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	d019      	beq.n	8001ec8 <pack_reply_config+0xcc>
		if (reg_type == 0 ){
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d109      	bne.n	8001eae <pack_reply_config+0xb2>
	        reg_data.intValue = __int_reg[target_addr];
 8001e9a:	4a22      	ldr	r2, [pc, #136]	@ (8001f24 <pack_reply_config+0x128>)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea2:	607b      	str	r3, [r7, #4]
	        memcpy(&(tx_msg->data[3]), &(reg_data.intValue), sizeof(int));
 8001ea4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	e00c      	b.n	8001ec8 <pack_reply_config+0xcc>
		}
		else if (reg_type == 1){
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d109      	bne.n	8001ec8 <pack_reply_config+0xcc>
            reg_data.floatValue = __float_reg[target_addr];
 8001eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8001f28 <pack_reply_config+0x12c>)
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	607b      	str	r3, [r7, #4]
            memcpy(&(tx_msg->data[3]), &(reg_data.floatValue), sizeof(float));
 8001ec0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	601a      	str	r2, [r3, #0]
		}
	}

    if (config_state == CODE_INVALID_ADDR || config_state == CODE_INVALID_CMD) {
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	d002      	beq.n	8001ed4 <pack_reply_config+0xd8>
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d105      	bne.n	8001ee0 <pack_reply_config+0xe4>
        int zeroData = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	603b      	str	r3, [r7, #0]
        memcpy(&(tx_msg->data[3]), &zeroData, sizeof(int));
 8001ed8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001eda:	3304      	adds	r3, #4
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	601a      	str	r2, [r3, #0]
    }

	tx_msg->data[0] = config_state;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ee6:	705a      	strb	r2, [r3, #1]
	tx_msg->data[1] = reg_type;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001eee:	709a      	strb	r2, [r3, #2]
	tx_msg->data[2] = target_addr;
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ef6:	70da      	strb	r2, [r3, #3]
	tx_msg->data[7] = (version<<4) + (state&0xF);
 8001ef8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f12:	721a      	strb	r2, [r3, #8]
}
 8001f14:	bf00      	nop
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f1e:	b004      	add	sp, #16
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20000448 	.word	0x20000448
 8001f28:	20000348 	.word	0x20000348

08001f2c <pack_reply_hall_cal>:

void pack_reply_hall_cal(CANRxMessage rx_msg, CANTxMessage *tx_msg, int version, int state){
 8001f2c:	b084      	sub	sp, #16
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b094      	sub	sp, #80	@ 0x50
 8001f32:	af12      	add	r7, sp, #72	@ 0x48
 8001f34:	f107 0c10 	add.w	ip, r7, #16
 8001f38:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int config_state;

	if (rx_msg.data[0] == 1){
 8001f3c:	7e3b      	ldrb	r3, [r7, #24]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d10d      	bne.n	8001f5e <pack_reply_hall_cal+0x32>
		config_state = unpack_hall_cal_cmd(rx_msg);
 8001f42:	4668      	mov	r0, sp
 8001f44:	f107 0320 	add.w	r3, r7, #32
 8001f48:	2248      	movs	r2, #72	@ 0x48
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	f00b fed7 	bl	800dcfe <memcpy>
 8001f50:	f107 0310 	add.w	r3, r7, #16
 8001f54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f56:	f000 f913 	bl	8002180 <unpack_hall_cal_cmd>
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	e001      	b.n	8001f62 <pack_reply_hall_cal+0x36>
	}
	else{
		config_state = CODE_CONFIG_SUCCESS;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	607b      	str	r3, [r7, #4]
	}

	tx_msg->data[0] = config_state;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f68:	705a      	strb	r2, [r3, #1]
	tx_msg->data[1] = 0;
 8001f6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	709a      	strb	r2, [r3, #2]
	tx_msg->data[2] = 0;
 8001f70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f72:	2200      	movs	r2, #0
 8001f74:	70da      	strb	r2, [r3, #3]

	memcpy((void*)&(tx_msg->data[3]), (void*)&__float_reg[ADDR_HALL_CAL_OFFSET], sizeof(float));
 8001f76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f78:	3304      	adds	r3, #4
 8001f7a:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa8 <pack_reply_hall_cal+0x7c>)
 8001f7c:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 8001f7e:	601a      	str	r2, [r3, #0]

	tx_msg->data[7] = (version<<4) + (state&0xF);
 8001f80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f98:	721a      	strb	r2, [r3, #8]
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001fa4:	b004      	add	sp, #16
 8001fa6:	4770      	bx	lr
 8001fa8:	20000348 	.word	0x20000348

08001fac <unpack_control_cmd>:
/// 3: [velocity[3-0], kp[11-8]]
/// 4: [kp[7-0]]
/// 5: [kd[11-4]]
/// 6: [kd[3-0], torque[11-8]]
/// 7: [torque[7-0]]
void unpack_control_cmd(CANRxMessage rx_msg, float *commands){// ControllerStruct * controller){
 8001fac:	b084      	sub	sp, #16
 8001fae:	b590      	push	{r4, r7, lr}
 8001fb0:	b087      	sub	sp, #28
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8001fb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        int p_int = (rx_msg.data[0]<<8)|rx_msg.data[1];
 8001fbc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001fc0:	021b      	lsls	r3, r3, #8
 8001fc2:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]
        int kp_int = (rx_msg.data[2]<<4)|(rx_msg.data[3]>>4);
 8001fca:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001fd4:	0912      	lsrs	r2, r2, #4
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        int ki_int = ((rx_msg.data[3]&0xF)<<8)|rx_msg.data[4];
 8001fdc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001fe0:	021b      	lsls	r3, r3, #8
 8001fe2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001fe6:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8001fea:	4313      	orrs	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
        int kd_int = (rx_msg.data[5]<<4)|(rx_msg.data[6]>>4);
 8001fee:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8001ff8:	0912      	lsrs	r2, r2, #4
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60bb      	str	r3, [r7, #8]
        int t_int = ((rx_msg.data[6]&0xF)<<8)|rx_msg.data[7];
 8002000:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800200a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800200e:	4313      	orrs	r3, r2
 8002010:	607b      	str	r3, [r7, #4]

        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8002012:	4b3f      	ldr	r3, [pc, #252]	@ (8002110 <unpack_control_cmd+0x164>)
 8002014:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002018:	4b3d      	ldr	r3, [pc, #244]	@ (8002110 <unpack_control_cmd+0x164>)
 800201a:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 800201e:	2110      	movs	r1, #16
 8002020:	eef0 0a47 	vmov.f32	s1, s14
 8002024:	eeb0 0a67 	vmov.f32	s0, s15
 8002028:	6978      	ldr	r0, [r7, #20]
 800202a:	f003 f9ca 	bl	80053c2 <uint_to_float>
 800202e:	eef0 7a40 	vmov.f32	s15, s0
 8002032:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002036:	edc3 7a00 	vstr	s15, [r3]
        commands[1] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 800203a:	4b35      	ldr	r3, [pc, #212]	@ (8002110 <unpack_control_cmd+0x164>)
 800203c:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8002040:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002044:	1d1c      	adds	r4, r3, #4
 8002046:	210c      	movs	r1, #12
 8002048:	eef0 0a67 	vmov.f32	s1, s15
 800204c:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8002114 <unpack_control_cmd+0x168>
 8002050:	6938      	ldr	r0, [r7, #16]
 8002052:	f003 f9b6 	bl	80053c2 <uint_to_float>
 8002056:	eef0 7a40 	vmov.f32	s15, s0
 800205a:	edc4 7a00 	vstr	s15, [r4]
        commands[2] = uint_to_float(ki_int, KI_MIN, KI_MAX, 12);
 800205e:	4b2c      	ldr	r3, [pc, #176]	@ (8002110 <unpack_control_cmd+0x164>)
 8002060:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8002064:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002068:	f103 0408 	add.w	r4, r3, #8
 800206c:	210c      	movs	r1, #12
 800206e:	eef0 0a67 	vmov.f32	s1, s15
 8002072:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8002114 <unpack_control_cmd+0x168>
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f003 f9a3 	bl	80053c2 <uint_to_float>
 800207c:	eef0 7a40 	vmov.f32	s15, s0
 8002080:	edc4 7a00 	vstr	s15, [r4]
        commands[3] = uint_to_float(kd_int, KD_MIN, KD_MAX, 12);
 8002084:	4b22      	ldr	r3, [pc, #136]	@ (8002110 <unpack_control_cmd+0x164>)
 8002086:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 800208a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800208e:	f103 040c 	add.w	r4, r3, #12
 8002092:	210c      	movs	r1, #12
 8002094:	eef0 0a67 	vmov.f32	s1, s15
 8002098:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8002114 <unpack_control_cmd+0x168>
 800209c:	68b8      	ldr	r0, [r7, #8]
 800209e:	f003 f990 	bl	80053c2 <uint_to_float>
 80020a2:	eef0 7a40 	vmov.f32	s15, s0
 80020a6:	edc4 7a00 	vstr	s15, [r4]
        commands[4] = uint_to_float(t_int, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 80020aa:	4b19      	ldr	r3, [pc, #100]	@ (8002110 <unpack_control_cmd+0x164>)
 80020ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80020b0:	eeb1 7a67 	vneg.f32	s14, s15
 80020b4:	4b16      	ldr	r3, [pc, #88]	@ (8002110 <unpack_control_cmd+0x164>)
 80020b6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80020ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020be:	4b14      	ldr	r3, [pc, #80]	@ (8002110 <unpack_control_cmd+0x164>)
 80020c0:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80020c4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80020c8:	4b11      	ldr	r3, [pc, #68]	@ (8002110 <unpack_control_cmd+0x164>)
 80020ca:	ed93 7a03 	vldr	s14, [r3, #12]
 80020ce:	4b10      	ldr	r3, [pc, #64]	@ (8002110 <unpack_control_cmd+0x164>)
 80020d0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80020d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002110 <unpack_control_cmd+0x164>)
 80020da:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80020de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80020e6:	f103 0410 	add.w	r4, r3, #16
 80020ea:	210c      	movs	r1, #12
 80020ec:	eef0 0a67 	vmov.f32	s1, s15
 80020f0:	eeb0 0a66 	vmov.f32	s0, s13
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f003 f964 	bl	80053c2 <uint_to_float>
 80020fa:	eef0 7a40 	vmov.f32	s15, s0
 80020fe:	edc4 7a00 	vstr	s15, [r4]
    //printf("Received   ");
    //printf("%.3f  %.3f  %.3f  %.3f  %.3f   %.3f", controller->p_des, controller->v_des, controller->kp, controller->kd, controller->t_ff, controller->i_q_ref);
    //printf("\n\r");
}
 8002102:	bf00      	nop
 8002104:	371c      	adds	r7, #28
 8002106:	46bd      	mov	sp, r7
 8002108:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800210c:	b004      	add	sp, #16
 800210e:	4770      	bx	lr
 8002110:	20000348 	.word	0x20000348
 8002114:	00000000 	.word	0x00000000

08002118 <unpack_config_cmd>:

int unpack_config_cmd(CANRxMessage rx_msg){
 8002118:	b084      	sub	sp, #16
 800211a:	b580      	push	{r7, lr}
 800211c:	b084      	sub	sp, #16
 800211e:	af00      	add	r7, sp, #0
 8002120:	f107 0c18 	add.w	ip, r7, #24
 8002124:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int reg_type = rx_msg.data[1];
 8002128:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800212c:	60bb      	str	r3, [r7, #8]
	int target_addr = rx_msg.data[2];
 800212e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002132:	607b      	str	r3, [r7, #4]
	int config_state;

	union RegData new_data;

	if (reg_type == 0){
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d109      	bne.n	800214e <unpack_config_cmd+0x36>
		memcpy((void*)&(new_data.intValue), (void*)&(rx_msg.data[3]), sizeof(int));
 800213a:	f8d7 3023 	ldr.w	r3, [r7, #35]	@ 0x23
 800213e:	603b      	str	r3, [r7, #0]
		config_state = int_reg_update_can(target_addr, new_data.intValue);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	4619      	mov	r1, r3
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f005 f865 	bl	8007214 <int_reg_update_can>
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	e010      	b.n	8002170 <unpack_config_cmd+0x58>
	}
	else if (reg_type == 1){
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d10b      	bne.n	800216c <unpack_config_cmd+0x54>
		memcpy((void*)&(new_data.floatValue), (void*)&(rx_msg.data[3]), sizeof(float));
 8002154:	f8d7 3023 	ldr.w	r3, [r7, #35]	@ 0x23
 8002158:	603b      	str	r3, [r7, #0]
		config_state = float_reg_update_can(target_addr, new_data.floatValue);
 800215a:	edd7 7a00 	vldr	s15, [r7]
 800215e:	eeb0 0a67 	vmov.f32	s0, s15
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f004 ff94 	bl	8007090 <float_reg_update_can>
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	e001      	b.n	8002170 <unpack_config_cmd+0x58>
	}
	else{
		config_state = CODE_INVALID_CMD;
 800216c:	2304      	movs	r3, #4
 800216e:	60fb      	str	r3, [r7, #12]
	}

	return config_state;
 8002170:	68fb      	ldr	r3, [r7, #12]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800217c:	b004      	add	sp, #16
 800217e:	4770      	bx	lr

08002180 <unpack_hall_cal_cmd>:

int unpack_hall_cal_cmd(CANRxMessage rx_msg){
 8002180:	b084      	sub	sp, #16
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	f107 0c10 	add.w	ip, r7, #16
 800218c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float new_data = 0;
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	603b      	str	r3, [r7, #0]
	int config_state;

	memcpy((void*)&new_data, (void*)&(rx_msg.data[1]), sizeof(float));
 8002196:	f8d7 3019 	ldr.w	r3, [r7, #25]
 800219a:	603b      	str	r3, [r7, #0]

	config_state = float_reg_update_can(ADDR_HALL_CAL_OFFSET, new_data);
 800219c:	edd7 7a00 	vldr	s15, [r7]
 80021a0:	eeb0 0a67 	vmov.f32	s0, s15
 80021a4:	201c      	movs	r0, #28
 80021a6:	f004 ff73 	bl	8007090 <float_reg_update_can>
 80021aa:	6078      	str	r0, [r7, #4]

	return config_state;
 80021ac:	687b      	ldr	r3, [r7, #4]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021b8:	b004      	add	sp, #16
 80021ba:	4770      	bx	lr

080021bc <drv_spi_write>:
#include "drv8323.h"
#include <stdio.h>
#include "usart.h"
#include "hw_config.h"

uint16_t drv_spi_write(DRVStruct * drv, uint16_t val){
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	807b      	strh	r3, [r7, #2]
	drv->spi_tx_word = val;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	887a      	ldrh	r2, [r7, #2]
 80021cc:	801a      	strh	r2, [r3, #0]
	DRV_CS_LOW; 	// CS low
 80021ce:	2200      	movs	r2, #0
 80021d0:	2110      	movs	r1, #16
 80021d2:	480f      	ldr	r0, [pc, #60]	@ (8002210 <drv_spi_write+0x54>)
 80021d4:	f006 fefa 	bl	8008fcc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	1c9a      	adds	r2, r3, #2
 80021de:	2364      	movs	r3, #100	@ 0x64
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2301      	movs	r3, #1
 80021e4:	480b      	ldr	r0, [pc, #44]	@ (8002214 <drv_spi_write+0x58>)
 80021e6:	f007 fdcc 	bl	8009d82 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 80021ea:	bf00      	nop
 80021ec:	4b09      	ldr	r3, [pc, #36]	@ (8002214 <drv_spi_write+0x58>)
 80021ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d0f9      	beq.n	80021ec <drv_spi_write+0x30>
	DRV_CS_HIGH; 	// CS high
 80021f8:	2201      	movs	r2, #1
 80021fa:	2110      	movs	r1, #16
 80021fc:	4804      	ldr	r0, [pc, #16]	@ (8002210 <drv_spi_write+0x54>)
 80021fe:	f006 fee5 	bl	8008fcc <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	885b      	ldrh	r3, [r3, #2]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40020000 	.word	0x40020000
 8002214:	20009418 	.word	0x20009418

08002218 <drv_read_register>:

uint16_t drv_read_FSR2(DRVStruct drv){
	return drv_spi_write(&drv, (1<<15)|FSR2);
}

uint16_t drv_read_register(DRVStruct drv, int reg){
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	f107 0308 	add.w	r3, r7, #8
 8002222:	e883 0003 	stmia.w	r3, {r0, r1}
 8002226:	607a      	str	r2, [r7, #4]
	return drv_spi_write(&drv, (1<<15)|(reg<<11));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	b21b      	sxth	r3, r3
 800222c:	02db      	lsls	r3, r3, #11
 800222e:	b21b      	sxth	r3, r3
 8002230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002238:	b21b      	sxth	r3, r3
 800223a:	b29a      	uxth	r2, r3
 800223c:	f107 0308 	add.w	r3, r7, #8
 8002240:	4611      	mov	r1, r2
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff ffba 	bl	80021bc <drv_spi_write>
 8002248:	4603      	mov	r3, r0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <drv_write_register>:
void drv_write_register(DRVStruct drv, int reg, int val){
 8002252:	b590      	push	{r4, r7, lr}
 8002254:	b085      	sub	sp, #20
 8002256:	af00      	add	r7, sp, #0
 8002258:	f107 0408 	add.w	r4, r7, #8
 800225c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002260:	607a      	str	r2, [r7, #4]
 8002262:	603b      	str	r3, [r7, #0]
	drv_spi_write(&drv, (reg<<11)|val);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	b21b      	sxth	r3, r3
 8002268:	02db      	lsls	r3, r3, #11
 800226a:	b21a      	sxth	r2, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	b21b      	sxth	r3, r3
 8002270:	4313      	orrs	r3, r2
 8002272:	b21b      	sxth	r3, r3
 8002274:	b29a      	uxth	r2, r3
 8002276:	f107 0308 	add.w	r3, r7, #8
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff9d 	bl	80021bc <drv_spi_write>
}
 8002282:	bf00      	nop
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	bd90      	pop	{r4, r7, pc}

0800228a <drv_write_DCR>:
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 800228a:	b590      	push	{r4, r7, lr}
 800228c:	b087      	sub	sp, #28
 800228e:	af00      	add	r7, sp, #0
 8002290:	f107 0408 	add.w	r4, r7, #8
 8002294:	e884 0003 	stmia.w	r4, {r0, r1}
 8002298:	607a      	str	r2, [r7, #4]
 800229a:	603b      	str	r3, [r7, #0]
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	b21b      	sxth	r3, r3
 80022a0:	025b      	lsls	r3, r3, #9
 80022a2:	b21b      	sxth	r3, r3
 80022a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022a8:	b21a      	sxth	r2, r3
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	b21b      	sxth	r3, r3
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	b21b      	sxth	r3, r3
 80022b2:	4313      	orrs	r3, r2
 80022b4:	b21a      	sxth	r2, r3
 80022b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b8:	b21b      	sxth	r3, r3
 80022ba:	01db      	lsls	r3, r3, #7
 80022bc:	b21b      	sxth	r3, r3
 80022be:	4313      	orrs	r3, r2
 80022c0:	b21a      	sxth	r2, r3
 80022c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022c4:	b21b      	sxth	r3, r3
 80022c6:	015b      	lsls	r3, r3, #5
 80022c8:	b21b      	sxth	r3, r3
 80022ca:	4313      	orrs	r3, r2
 80022cc:	b21a      	sxth	r2, r3
 80022ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	011b      	lsls	r3, r3, #4
 80022d4:	b21b      	sxth	r3, r3
 80022d6:	4313      	orrs	r3, r2
 80022d8:	b21a      	sxth	r2, r3
 80022da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022dc:	b21b      	sxth	r3, r3
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	4313      	orrs	r3, r2
 80022e4:	b21a      	sxth	r2, r3
 80022e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022e8:	b21b      	sxth	r3, r3
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	b21b      	sxth	r3, r3
 80022ee:	4313      	orrs	r3, r2
 80022f0:	b21a      	sxth	r2, r3
 80022f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022f4:	b21b      	sxth	r3, r3
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	b21b      	sxth	r3, r3
 80022fa:	4313      	orrs	r3, r2
 80022fc:	b21a      	sxth	r2, r3
 80022fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002300:	b21b      	sxth	r3, r3
 8002302:	4313      	orrs	r3, r2
 8002304:	b21b      	sxth	r3, r3
 8002306:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8002308:	8afa      	ldrh	r2, [r7, #22]
 800230a:	f107 0308 	add.w	r3, r7, #8
 800230e:	4611      	mov	r1, r2
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff ff53 	bl	80021bc <drv_spi_write>
}
 8002316:	bf00      	nop
 8002318:	371c      	adds	r7, #28
 800231a:	46bd      	mov	sp, r7
 800231c:	bd90      	pop	{r4, r7, pc}

0800231e <drv_write_OCPCR>:
}
void drv_write_LSR(DRVStruct drv, int CBC, int TDRIVE, int IDRIVEP_LS, int IDRIVEN_LS){
	uint16_t val = (LSR<<11) | (CBC<<10) | (TDRIVE<<8) | (IDRIVEP_LS<<4) | IDRIVEN_LS;
	drv_spi_write(&drv, val);
}
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 800231e:	b590      	push	{r4, r7, lr}
 8002320:	b087      	sub	sp, #28
 8002322:	af00      	add	r7, sp, #0
 8002324:	f107 0408 	add.w	r4, r7, #8
 8002328:	e884 0003 	stmia.w	r4, {r0, r1}
 800232c:	607a      	str	r2, [r7, #4]
 800232e:	603b      	str	r3, [r7, #0]
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	b21b      	sxth	r3, r3
 8002334:	029b      	lsls	r3, r3, #10
 8002336:	b21b      	sxth	r3, r3
 8002338:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800233c:	b21a      	sxth	r2, r3
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	b21b      	sxth	r3, r3
 8002342:	021b      	lsls	r3, r3, #8
 8002344:	b21b      	sxth	r3, r3
 8002346:	4313      	orrs	r3, r2
 8002348:	b21a      	sxth	r2, r3
 800234a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800234c:	b21b      	sxth	r3, r3
 800234e:	019b      	lsls	r3, r3, #6
 8002350:	b21b      	sxth	r3, r3
 8002352:	4313      	orrs	r3, r2
 8002354:	b21a      	sxth	r2, r3
 8002356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002358:	b21b      	sxth	r3, r3
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	b21b      	sxth	r3, r3
 800235e:	4313      	orrs	r3, r2
 8002360:	b21a      	sxth	r2, r3
 8002362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002364:	b21b      	sxth	r3, r3
 8002366:	4313      	orrs	r3, r2
 8002368:	b21b      	sxth	r3, r3
 800236a:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 800236c:	8afa      	ldrh	r2, [r7, #22]
 800236e:	f107 0308 	add.w	r3, r7, #8
 8002372:	4611      	mov	r1, r2
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff21 	bl	80021bc <drv_spi_write>
}
 800237a:	bf00      	nop
 800237c:	371c      	adds	r7, #28
 800237e:	46bd      	mov	sp, r7
 8002380:	bd90      	pop	{r4, r7, pc}

08002382 <drv_write_CSACR>:
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 8002382:	b590      	push	{r4, r7, lr}
 8002384:	b087      	sub	sp, #28
 8002386:	af00      	add	r7, sp, #0
 8002388:	f107 0408 	add.w	r4, r7, #8
 800238c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	603b      	str	r3, [r7, #0]
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	b21b      	sxth	r3, r3
 8002398:	029b      	lsls	r3, r3, #10
 800239a:	b21b      	sxth	r3, r3
 800239c:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 80023a0:	b21a      	sxth	r2, r3
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	b21b      	sxth	r3, r3
 80023a6:	025b      	lsls	r3, r3, #9
 80023a8:	b21b      	sxth	r3, r3
 80023aa:	4313      	orrs	r3, r2
 80023ac:	b21a      	sxth	r2, r3
 80023ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b0:	b21b      	sxth	r3, r3
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	b21b      	sxth	r3, r3
 80023b6:	4313      	orrs	r3, r2
 80023b8:	b21a      	sxth	r2, r3
 80023ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023bc:	b21b      	sxth	r3, r3
 80023be:	019b      	lsls	r3, r3, #6
 80023c0:	b21b      	sxth	r3, r3
 80023c2:	4313      	orrs	r3, r2
 80023c4:	b21a      	sxth	r2, r3
 80023c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c8:	b21b      	sxth	r3, r3
 80023ca:	015b      	lsls	r3, r3, #5
 80023cc:	b21b      	sxth	r3, r3
 80023ce:	4313      	orrs	r3, r2
 80023d0:	b21a      	sxth	r2, r3
 80023d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023d4:	b21b      	sxth	r3, r3
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	b21b      	sxth	r3, r3
 80023da:	4313      	orrs	r3, r2
 80023dc:	b21a      	sxth	r2, r3
 80023de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e0:	b21b      	sxth	r3, r3
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	b21b      	sxth	r3, r3
 80023e6:	4313      	orrs	r3, r2
 80023e8:	b21a      	sxth	r2, r3
 80023ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023ec:	b21b      	sxth	r3, r3
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	b21b      	sxth	r3, r3
 80023f2:	4313      	orrs	r3, r2
 80023f4:	b21a      	sxth	r2, r3
 80023f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023f8:	b21b      	sxth	r3, r3
 80023fa:	4313      	orrs	r3, r2
 80023fc:	b21b      	sxth	r3, r3
 80023fe:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8002400:	8afa      	ldrh	r2, [r7, #22]
 8002402:	f107 0308 	add.w	r3, r7, #8
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fed7 	bl	80021bc <drv_spi_write>
}
 800240e:	bf00      	nop
 8002410:	371c      	adds	r7, #28
 8002412:	46bd      	mov	sp, r7
 8002414:	bd90      	pop	{r4, r7, pc}

08002416 <drv_enable_gd>:
void drv_enable_gd(DRVStruct drv){
 8002416:	b580      	push	{r7, lr}
 8002418:	b084      	sub	sp, #16
 800241a:	af00      	add	r7, sp, #0
 800241c:	463b      	mov	r3, r7
 800241e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
 8002422:	2202      	movs	r2, #2
 8002424:	463b      	mov	r3, r7
 8002426:	e893 0003 	ldmia.w	r3, {r0, r1}
 800242a:	f7ff fef5 	bl	8002218 <drv_read_register>
 800242e:	4603      	mov	r3, r0
 8002430:	f023 0304 	bic.w	r3, r3, #4
 8002434:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 8002436:	89fb      	ldrh	r3, [r7, #14]
 8002438:	2202      	movs	r2, #2
 800243a:	4639      	mov	r1, r7
 800243c:	c903      	ldmia	r1, {r0, r1}
 800243e:	f7ff ff08 	bl	8002252 <drv_write_register>
}
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <drv_disable_gd>:
void drv_disable_gd(DRVStruct drv){
 800244a:	b580      	push	{r7, lr}
 800244c:	b084      	sub	sp, #16
 800244e:	af00      	add	r7, sp, #0
 8002450:	463b      	mov	r3, r7
 8002452:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) | (0x1<<2);
 8002456:	2202      	movs	r2, #2
 8002458:	463b      	mov	r3, r7
 800245a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800245e:	f7ff fedb 	bl	8002218 <drv_read_register>
 8002462:	4603      	mov	r3, r0
 8002464:	f043 0304 	orr.w	r3, r3, #4
 8002468:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 800246a:	89fb      	ldrh	r3, [r7, #14]
 800246c:	2202      	movs	r2, #2
 800246e:	4639      	mov	r1, r7
 8002470:	c903      	ldmia	r1, {r0, r1}
 8002472:	f7ff feee 	bl	8002252 <drv_write_register>
}
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <drv_calibrate>:
void drv_calibrate(DRVStruct drv){
 800247e:	b580      	push	{r7, lr}
 8002480:	b084      	sub	sp, #16
 8002482:	af00      	add	r7, sp, #0
 8002484:	463b      	mov	r3, r7
 8002486:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (0x1<<4) + (0x1<<3) + (0x1<<2);
 800248a:	231c      	movs	r3, #28
 800248c:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, CSACR, val);
 800248e:	89fb      	ldrh	r3, [r7, #14]
 8002490:	2206      	movs	r2, #6
 8002492:	4639      	mov	r1, r7
 8002494:	c903      	ldmia	r1, {r0, r1}
 8002496:	f7ff fedc 	bl	8002252 <drv_write_register>
}
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <flash_writer_init>:
#include "flash_writer.h"




void flash_writer_init(FlashWriter *fw, uint32_t sector) {
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
	if(sector>7) sector = 7;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b07      	cmp	r3, #7
 80024b2:	d901      	bls.n	80024b8 <flash_writer_init+0x14>
 80024b4:	2307      	movs	r3, #7
 80024b6:	603b      	str	r3, [r7, #0]
	fw->sector = sector;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	609a      	str	r2, [r3, #8]
	fw->base = __SECTOR_ADDRS[sector];
 80024be:	4a07      	ldr	r2, [pc, #28]	@ (80024dc <flash_writer_init+0x38>)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	605a      	str	r2, [r3, #4]
	fw->ready = false;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	20000000 	.word	0x20000000

080024e0 <flash_writer_open>:
bool flash_writer_ready(FlashWriter fw) {
    return fw.ready;
}

void flash_writer_open(FlashWriter * fw) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
    FLASH_Unlock();
 80024e8:	f003 fbac 	bl	8005c44 <FLASH_Unlock>
    FLASH_ClearFlag( FLASH_FLAG_EOP |  FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 80024ec:	20f1      	movs	r0, #241	@ 0xf1
 80024ee:	f003 fc65 	bl	8005dbc <FLASH_ClearFlag>
    FLASH_EraseSector(__SECTORS[fw->sector], VoltageRange_3);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	4a07      	ldr	r2, [pc, #28]	@ (8002514 <flash_writer_open+0x34>)
 80024f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fc:	2102      	movs	r1, #2
 80024fe:	4618      	mov	r0, r3
 8002500:	f003 fbc8 	bl	8005c94 <FLASH_EraseSector>
    fw->ready = true;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	701a      	strb	r2, [r3, #0]
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000020 	.word	0x20000020

08002518 <flash_writer_write_int>:

void flash_writer_write_int(FlashWriter fw, uint32_t index, int x) {
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
 800251e:	1d3c      	adds	r4, r7, #4
 8002520:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002524:	603b      	str	r3, [r7, #0]
    union UN {int a; uint32_t b;};
    union UN un;
    un.a = x;
 8002526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002528:	617b      	str	r3, [r7, #20]
    FLASH_ProgramWord(fw.base + 4 * index, un.b);
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4611      	mov	r1, r2
 8002536:	4618      	mov	r0, r3
 8002538:	f003 fc0c 	bl	8005d54 <FLASH_ProgramWord>
}
 800253c:	bf00      	nop
 800253e:	371c      	adds	r7, #28
 8002540:	46bd      	mov	sp, r7
 8002542:	bd90      	pop	{r4, r7, pc}

08002544 <flash_writer_write_float>:

void flash_writer_write_uint(FlashWriter fw, uint32_t index, unsigned int x) {
    FLASH_ProgramWord(fw.base + 4 * index, x);
}

void flash_writer_write_float(FlashWriter fw, uint32_t index, float x) {
 8002544:	b590      	push	{r4, r7, lr}
 8002546:	b089      	sub	sp, #36	@ 0x24
 8002548:	af00      	add	r7, sp, #0
 800254a:	f107 040c 	add.w	r4, r7, #12
 800254e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	ed87 0a01 	vstr	s0, [r7, #4]
    union UN {float a; uint32_t b;};
    union UN un;
    un.a = x;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	61fb      	str	r3, [r7, #28]
    FLASH_ProgramWord(fw.base + 4 * index, un.b);
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	69fa      	ldr	r2, [r7, #28]
 8002566:	4611      	mov	r1, r2
 8002568:	4618      	mov	r0, r3
 800256a:	f003 fbf3 	bl	8005d54 <FLASH_ProgramWord>
}
 800256e:	bf00      	nop
 8002570:	3724      	adds	r7, #36	@ 0x24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd90      	pop	{r4, r7, pc}

08002576 <flash_writer_close>:

void flash_writer_close(FlashWriter * fw) {
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
    FLASH_Lock();
 800257e:	f003 fb79 	bl	8005c74 <FLASH_Lock>
    fw->ready = false;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	701a      	strb	r2, [r3, #0]
}
 8002588:	bf00      	nop
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <flash_read_int>:

int flash_read_int(FlashWriter fw, uint32_t index) {
 8002590:	b490      	push	{r4, r7}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	1d3c      	adds	r4, r7, #4
 8002598:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800259c:	603b      	str	r3, [r7, #0]
    return *(int*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4a05      	ldr	r2, [pc, #20]	@ (80025b8 <flash_read_int+0x28>)
 80025a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	681b      	ldr	r3, [r3, #0]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc90      	pop	{r4, r7}
 80025b6:	4770      	bx	lr
 80025b8:	20000000 	.word	0x20000000

080025bc <flash_read_float>:

uint32_t flash_read_uint(FlashWriter fw, uint32_t index) {
    return *(uint32_t*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
}

float flash_read_float(FlashWriter fw, uint32_t index) {
 80025bc:	b490      	push	{r4, r7}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	1d3c      	adds	r4, r7, #4
 80025c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80025c8:	603b      	str	r3, [r7, #0]
    return *(float*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	4a07      	ldr	r2, [pc, #28]	@ (80025ec <flash_read_float+0x30>)
 80025ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	ee07 3a90 	vmov	s15, r3
}
 80025de:	eeb0 0a67 	vmov.f32	s0, s15
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc90      	pop	{r4, r7}
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	20000000 	.word	0x20000000

080025f0 <set_dtc>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void set_dtc(ControllerStruct *controller){
 80025f0:	b480      	push	{r7}
 80025f2:	b087      	sub	sp, #28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fc:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002602:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002608:	60fb      	str	r3, [r7, #12]

	if(INVERT_DTC){
		dtc_u = 1.0f - controller->dtc_u;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8002610:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002614:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002618:	edc7 7a05 	vstr	s15, [r7, #20]
		dtc_v = 1.0f - controller->dtc_v;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8002622:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002626:	ee77 7a67 	vsub.f32	s15, s14, s15
 800262a:	edc7 7a04 	vstr	s15, [r7, #16]
		dtc_w = 1.0f - controller->dtc_w;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8002634:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002638:	ee77 7a67 	vsub.f32	s15, s14, s15
 800263c:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002640:	4b3b      	ldr	r3, [pc, #236]	@ (8002730 <set_dtc+0x140>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d136      	bne.n	80026b6 <set_dtc+0xc6>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 8002648:	4b3a      	ldr	r3, [pc, #232]	@ (8002734 <set_dtc+0x144>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800264e:	ee07 3a90 	vmov	s15, r3
 8002652:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002656:	edd7 7a05 	vldr	s15, [r7, #20]
 800265a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800265e:	4b35      	ldr	r3, [pc, #212]	@ (8002734 <set_dtc+0x144>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002666:	ee17 2a90 	vmov	r2, s15
 800266a:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 800266c:	4b31      	ldr	r3, [pc, #196]	@ (8002734 <set_dtc+0x144>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002672:	ee07 3a90 	vmov	s15, r3
 8002676:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800267a:	edd7 7a04 	vldr	s15, [r7, #16]
 800267e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002682:	4b2c      	ldr	r3, [pc, #176]	@ (8002734 <set_dtc+0x144>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800268a:	ee17 2a90 	vmov	r2, s15
 800268e:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 8002690:	4b28      	ldr	r3, [pc, #160]	@ (8002734 <set_dtc+0x144>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002696:	ee07 3a90 	vmov	s15, r3
 800269a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800269e:	edd7 7a03 	vldr	s15, [r7, #12]
 80026a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026a6:	4b23      	ldr	r3, [pc, #140]	@ (8002734 <set_dtc+0x144>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026ae:	ee17 2a90 	vmov	r2, s15
 80026b2:	63da      	str	r2, [r3, #60]	@ 0x3c
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
	}
}
 80026b4:	e035      	b.n	8002722 <set_dtc+0x132>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
 80026b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002734 <set_dtc+0x144>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026bc:	ee07 3a90 	vmov	s15, r3
 80026c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80026c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026cc:	4b19      	ldr	r3, [pc, #100]	@ (8002734 <set_dtc+0x144>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026d4:	ee17 2a90 	vmov	r2, s15
 80026d8:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
 80026da:	4b16      	ldr	r3, [pc, #88]	@ (8002734 <set_dtc+0x144>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e0:	ee07 3a90 	vmov	s15, r3
 80026e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80026ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f0:	4b10      	ldr	r3, [pc, #64]	@ (8002734 <set_dtc+0x144>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026f8:	ee17 2a90 	vmov	r2, s15
 80026fc:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 80026fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002734 <set_dtc+0x144>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002704:	ee07 3a90 	vmov	s15, r3
 8002708:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800270c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002714:	4b07      	ldr	r3, [pc, #28]	@ (8002734 <set_dtc+0x144>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800271c:	ee17 2a90 	vmov	r2, s15
 8002720:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002722:	bf00      	nop
 8002724:	371c      	adds	r7, #28
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	20000448 	.word	0x20000448
 8002734:	200094d0 	.word	0x200094d0

08002738 <analog_sample>:

void analog_sample (ControllerStruct *controller){
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
	/* Sampe ADCs */
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002740:	4b38      	ldr	r3, [pc, #224]	@ (8002824 <analog_sample+0xec>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10e      	bne.n	8002766 <analog_sample+0x2e>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 8002748:	4837      	ldr	r0, [pc, #220]	@ (8002828 <analog_sample+0xf0>)
 800274a:	f005 f828 	bl	800779e <HAL_ADC_GetValue>
 800274e:	4603      	mov	r3, r0
 8002750:	461a      	mov	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 8002756:	4835      	ldr	r0, [pc, #212]	@ (800282c <analog_sample+0xf4>)
 8002758:	f005 f821 	bl	800779e <HAL_ADC_GetValue>
 800275c:	4603      	mov	r3, r0
 800275e:	461a      	mov	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	e00d      	b.n	8002782 <analog_sample+0x4a>
		//adc_ch_ic = ADC_CH_IC;
	}
	else{
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 8002766:	4831      	ldr	r0, [pc, #196]	@ (800282c <analog_sample+0xf4>)
 8002768:	f005 f819 	bl	800779e <HAL_ADC_GetValue>
 800276c:	4603      	mov	r3, r0
 800276e:	461a      	mov	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 8002774:	482c      	ldr	r0, [pc, #176]	@ (8002828 <analog_sample+0xf0>)
 8002776:	f005 f812 	bl	800779e <HAL_ADC_GetValue>
 800277a:	4603      	mov	r3, r0
 800277c:	461a      	mov	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	609a      	str	r2, [r3, #8]
		//adc_ch_ic = ADC_CH_IB;
	}


	HAL_ADC_Start(&ADC_CH_MAIN);
 8002782:	4829      	ldr	r0, [pc, #164]	@ (8002828 <analog_sample+0xf0>)
 8002784:	f004 feae 	bl	80074e4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&ADC_CH_MAIN, HAL_MAX_DELAY);
 8002788:	f04f 31ff 	mov.w	r1, #4294967295
 800278c:	4826      	ldr	r0, [pc, #152]	@ (8002828 <analog_sample+0xf0>)
 800278e:	f004 ff7b 	bl	8007688 <HAL_ADC_PollForConversion>

	controller->adc_vbus_raw = HAL_ADC_GetValue(&ADC_CH_VBUS);
 8002792:	4827      	ldr	r0, [pc, #156]	@ (8002830 <analog_sample+0xf8>)
 8002794:	f005 f803 	bl	800779e <HAL_ADC_GetValue>
 8002798:	4603      	mov	r3, r0
 800279a:	461a      	mov	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	611a      	str	r2, [r3, #16]
	controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	ee07 3a90 	vmov	s15, r3
 80027a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ac:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8002834 <analog_sample+0xfc>
 80027b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	edc3 7a08 	vstr	s15, [r3, #32]

    controller->i_a = controller->i_scale*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	ed93 7a1d 	vldr	s14, [r3, #116]	@ 0x74
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	ee07 3a90 	vmov	s15, r3
 80027d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	edc3 7a05 	vstr	s15, [r3, #20]
    controller->i_b = controller->i_scale*(float)(controller->adc_b_raw - controller->adc_b_offset);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	ed93 7a1d 	vldr	s14, [r3, #116]	@ 0x74
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	ee07 3a90 	vmov	s15, r3
 80027f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	edc3 7a06 	vstr	s15, [r3, #24]
    controller->i_c = -controller->i_a - controller->i_b;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	edd3 7a05 	vldr	s15, [r3, #20]
 8002808:	eeb1 7a67 	vneg.f32	s14, s15
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	edc3 7a07 	vstr	s15, [r3, #28]

}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000448 	.word	0x20000448
 8002828:	20000234 	.word	0x20000234
 800282c:	2000027c 	.word	0x2000027c
 8002830:	200002c4 	.word	0x200002c4
 8002834:	3c533318 	.word	0x3c533318

08002838 <abc>:

void abc( float theta, float d, float q, float *a, float *b, float *c){
 8002838:	b580      	push	{r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af00      	add	r7, sp, #0
 800283e:	ed87 0a05 	vstr	s0, [r7, #20]
 8002842:	edc7 0a04 	vstr	s1, [r7, #16]
 8002846:	ed87 1a03 	vstr	s2, [r7, #12]
 800284a:	60b8      	str	r0, [r7, #8]
 800284c:	6079      	str	r1, [r7, #4]
 800284e:	603a      	str	r2, [r7, #0]
    /* Inverse DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1 */

    float cf = cos_lut(theta);
 8002850:	ed97 0a05 	vldr	s0, [r7, #20]
 8002854:	f002 fe22 	bl	800549c <cos_lut>
 8002858:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 800285c:	ed97 0a05 	vldr	s0, [r7, #20]
 8002860:	f002 fde2 	bl	8005428 <sin_lut>
 8002864:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 8002868:	ed97 7a07 	vldr	s14, [r7, #28]
 800286c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002870:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002874:	edd7 6a06 	vldr	s13, [r7, #24]
 8002878:	edd7 7a03 	vldr	s15, [r7, #12]
 800287c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002880:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 800288a:	edd7 7a06 	vldr	s15, [r7, #24]
 800288e:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002938 <abc+0x100>
 8002892:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002896:	edd7 7a07 	vldr	s15, [r7, #28]
 800289a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800289e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80028aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80028b2:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800293c <abc+0x104>
 80028b6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80028ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80028be:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80028c2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80028c6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80028ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80028ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	edc3 7a00 	vstr	s15, [r3]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 80028dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80028e0:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800293c <abc+0x104>
 80028e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80028ec:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80028f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80028fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002900:	edd7 7a07 	vldr	s15, [r7, #28]
 8002904:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002938 <abc+0x100>
 8002908:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800290c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002910:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8002914:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002918:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800291c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002920:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002924:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	edc3 7a00 	vstr	s15, [r3]
    }
 800292e:	bf00      	nop
 8002930:	3720      	adds	r7, #32
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	3f5db3d7 	.word	0x3f5db3d7
 800293c:	bf5db3d7 	.word	0xbf5db3d7

08002940 <dq0>:


void dq0(float theta, float a, float b, float c, float *d, float *q){
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af00      	add	r7, sp, #0
 8002946:	ed87 0a05 	vstr	s0, [r7, #20]
 800294a:	edc7 0a04 	vstr	s1, [r7, #16]
 800294e:	ed87 1a03 	vstr	s2, [r7, #12]
 8002952:	edc7 1a02 	vstr	s3, [r7, #8]
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
    /* DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1*/

    float cf = cos_lut(theta);
 800295a:	ed97 0a05 	vldr	s0, [r7, #20]
 800295e:	f002 fd9d 	bl	800549c <cos_lut>
 8002962:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002966:	ed97 0a05 	vldr	s0, [r7, #20]
 800296a:	f002 fd5d 	bl	8005428 <sin_lut>
 800296e:	ed87 0a06 	vstr	s0, [r7, #24]

    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002972:	ed97 7a07 	vldr	s14, [r7, #28]
 8002976:	edd7 7a04 	vldr	s15, [r7, #16]
 800297a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800297e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002982:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8002a54 <dq0+0x114>
 8002986:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800298a:	edd7 7a07 	vldr	s15, [r7, #28]
 800298e:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8002992:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002996:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800299a:	edd7 7a03 	vldr	s15, [r7, #12]
 800299e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80029aa:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002a58 <dq0+0x118>
 80029ae:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80029b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80029b6:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80029ba:	ee67 7a86 	vmul.f32	s15, s15, s12
 80029be:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80029c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80029c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ce:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8002a5c <dq0+0x11c>
 80029d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 80029dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80029e0:	eeb1 7a67 	vneg.f32	s14, s15
 80029e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80029e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80029f0:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8002a58 <dq0+0x118>
 80029f4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80029f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80029fc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8002a00:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002a04:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002a08:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a14:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a18:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8002a54 <dq0+0x114>
 8002a1c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002a20:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a24:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8002a28:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002a2c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002a30:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a3c:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002a5c <dq0+0x11c>
 8002a40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	edc3 7a00 	vstr	s15, [r3]

    }
 8002a4a:	bf00      	nop
 8002a4c:	3720      	adds	r7, #32
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	3f5db3d7 	.word	0x3f5db3d7
 8002a58:	bf5db3d7 	.word	0xbf5db3d7
 8002a5c:	3f2aaaab 	.word	0x3f2aaaab

08002a60 <svm>:

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 8002a60:	b580      	push	{r7, lr}
 8002a62:	ed2d 8b02 	vpush	{d8}
 8002a66:	b08a      	sub	sp, #40	@ 0x28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	ed87 0a07 	vstr	s0, [r7, #28]
 8002a6e:	edc7 0a06 	vstr	s1, [r7, #24]
 8002a72:	ed87 1a05 	vstr	s2, [r7, #20]
 8002a76:	edc7 1a04 	vstr	s3, [r7, #16]
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 8002a80:	ed97 1a04 	vldr	s2, [r7, #16]
 8002a84:	edd7 0a05 	vldr	s1, [r7, #20]
 8002a88:	ed97 0a06 	vldr	s0, [r7, #24]
 8002a8c:	f002 fbe9 	bl	8005262 <fminf3>
 8002a90:	eeb0 8a40 	vmov.f32	s16, s0
 8002a94:	ed97 1a04 	vldr	s2, [r7, #16]
 8002a98:	edd7 0a05 	vldr	s1, [r7, #20]
 8002a9c:	ed97 0a06 	vldr	s0, [r7, #24]
 8002aa0:	f002 fbab 	bl	80051fa <fmaxf3>
 8002aa4:	eef0 7a40 	vmov.f32	s15, s0
 8002aa8:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002aac:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002ab0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ab4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);
 8002ab8:	4b41      	ldr	r3, [pc, #260]	@ (8002bc0 <svm+0x160>)
 8002aba:	623b      	str	r3, [r7, #32]

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002abc:	ed97 7a06 	vldr	s14, [r7, #24]
 8002ac0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002ac4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ac8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002acc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ad0:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8002bc4 <svm+0x164>
 8002ad4:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002ad8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002adc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ae0:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ae4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ae8:	eddf 0a37 	vldr	s1, [pc, #220]	@ 8002bc8 <svm+0x168>
 8002aec:	eeb0 0a67 	vmov.f32	s0, s15
 8002af0:	f002 fb4b 	bl	800518a <fast_fmaxf>
 8002af4:	eef0 7a40 	vmov.f32	s15, s0
 8002af8:	eddf 0a34 	vldr	s1, [pc, #208]	@ 8002bcc <svm+0x16c>
 8002afc:	eeb0 0a67 	vmov.f32	s0, s15
 8002b00:	f002 fb5f 	bl	80051c2 <fast_fminf>
 8002b04:	eef0 7a40 	vmov.f32	s15, s0
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002b0e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002b12:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002b16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b1a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002b1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b22:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8002bc4 <svm+0x164>
 8002b26:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002b2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b32:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3a:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8002bc8 <svm+0x168>
 8002b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b42:	f002 fb22 	bl	800518a <fast_fmaxf>
 8002b46:	eef0 7a40 	vmov.f32	s15, s0
 8002b4a:	eddf 0a20 	vldr	s1, [pc, #128]	@ 8002bcc <svm+0x16c>
 8002b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b52:	f002 fb36 	bl	80051c2 <fast_fminf>
 8002b56:	eef0 7a40 	vmov.f32	s15, s0
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002b60:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b64:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002b68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b6c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002b70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b74:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002bc4 <svm+0x164>
 8002b78:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002b7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b84:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b8c:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8002bc8 <svm+0x168>
 8002b90:	eeb0 0a67 	vmov.f32	s0, s15
 8002b94:	f002 faf9 	bl	800518a <fast_fmaxf>
 8002b98:	eef0 7a40 	vmov.f32	s15, s0
 8002b9c:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 8002bcc <svm+0x16c>
 8002ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ba4:	f002 fb0d 	bl	80051c2 <fast_fminf>
 8002ba8:	eef0 7a40 	vmov.f32	s15, s0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	edc3 7a00 	vstr	s15, [r3]

    }
 8002bb2:	bf00      	nop
 8002bb4:	3728      	adds	r7, #40	@ 0x28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	ecbd 8b02 	vpop	{d8}
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	3ef0a3d7 	.word	0x3ef0a3d7
 8002bc4:	3f933333 	.word	0x3f933333
 8002bc8:	00000000 	.word	0x00000000
 8002bcc:	3f70a3d7 	.word	0x3f70a3d7

08002bd0 <zero_current>:

void zero_current(ControllerStruct *controller){
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
    int adc_b_offset = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	613b      	str	r3, [r7, #16]
    int n = 1000;
 8002be0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002be4:	60bb      	str	r3, [r7, #8]
    controller->dtc_u = 0.f;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	65da      	str	r2, [r3, #92]	@ 0x5c
    controller->dtc_v = 0.f;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	661a      	str	r2, [r3, #96]	@ 0x60
    controller->dtc_w = 0.f;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	665a      	str	r2, [r3, #100]	@ 0x64
    set_dtc(controller);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7ff fcf6 	bl	80025f0 <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	e00f      	b.n	8002c2a <zero_current+0x5a>
    	analog_sample(controller);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff fd94 	bl	8002738 <analog_sample>
    	adc_a_offset +=  controller->adc_a_raw;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	4413      	add	r3, r2
 8002c18:	617b      	str	r3, [r7, #20]
    	adc_b_offset += controller->adc_b_raw;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4413      	add	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
    for (int i = 0; i<n; i++){               // Average n samples
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	3301      	adds	r3, #1
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	dbeb      	blt.n	8002c0a <zero_current+0x3a>
     }
    controller->adc_a_offset = adc_a_offset/n;
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	fb92 f2f3 	sdiv	r2, r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    controller->adc_b_offset = adc_b_offset/n;
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	fb92 f2f3 	sdiv	r2, r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

    }
 8002c4e:	bf00      	nop
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a53      	ldr	r2, [pc, #332]	@ (8002db0 <init_controller_params+0x158>)
 8002c64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    controller->ki_q = KI_Q;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a51      	ldr	r2, [pc, #324]	@ (8002db0 <init_controller_params+0x158>)
 8002c6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    controller->k_d = K_SCALE*I_BW;
 8002c70:	4b50      	ldr	r3, [pc, #320]	@ (8002db4 <init_controller_params+0x15c>)
 8002c72:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c76:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8002db8 <init_controller_params+0x160>
 8002c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
    controller->k_q = K_SCALE*I_BW;
 8002c84:	4b4b      	ldr	r3, [pc, #300]	@ (8002db4 <init_controller_params+0x15c>)
 8002c86:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c8a:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8002db8 <init_controller_params+0x160>
 8002c8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	edc3 7a1f 	vstr	s15, [r3, #124]	@ 0x7c
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8002c98:	4b46      	ldr	r3, [pc, #280]	@ (8002db4 <init_controller_params+0x15c>)
 8002c9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c9e:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8002dbc <init_controller_params+0x164>
 8002ca2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ca6:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8002dc0 <init_controller_params+0x168>
 8002caa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002cb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002cc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
    controller->ki_fw = .1f*controller->ki_d;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 8002cd2:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8002dc4 <init_controller_params+0x16c>
 8002cd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
    controller->phase_order = PHASE_ORDER;
 8002ce0:	4b39      	ldr	r3, [pc, #228]	@ (8002dc8 <init_controller_params+0x170>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    controller->flux_linkage = KT/(1.5f*PPAIRS);
 8002cea:	4b32      	ldr	r3, [pc, #200]	@ (8002db4 <init_controller_params+0x15c>)
 8002cec:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8002cf0:	4b30      	ldr	r3, [pc, #192]	@ (8002db4 <init_controller_params+0x15c>)
 8002cf2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002cf6:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8002cfa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90
    if(I_MAX <= 40.0f){controller->i_scale = I_SCALE;}
 8002d08:	4b2a      	ldr	r3, [pc, #168]	@ (8002db4 <init_controller_params+0x15c>)
 8002d0a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d0e:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002dcc <init_controller_params+0x174>
 8002d12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d1a:	d803      	bhi.n	8002d24 <init_controller_params+0xcc>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a2c      	ldr	r2, [pc, #176]	@ (8002dd0 <init_controller_params+0x178>)
 8002d20:	675a      	str	r2, [r3, #116]	@ 0x74
 8002d22:	e002      	b.n	8002d2a <init_controller_params+0xd2>
    else{controller->i_scale = 2.0f*I_SCALE;}
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a2b      	ldr	r2, [pc, #172]	@ (8002dd4 <init_controller_params+0x17c>)
 8002d28:	675a      	str	r2, [r3, #116]	@ 0x74
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	e036      	b.n	8002d9e <init_controller_params+0x146>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	ee07 3a90 	vmov	s15, r3
 8002d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d3a:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002dd8 <init_controller_params+0x180>
 8002d3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d42:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002ddc <init_controller_params+0x184>
 8002d46:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002d4a:	ee16 0a90 	vmov	r0, s13
 8002d4e:	f7fd fc2b 	bl	80005a8 <__aeabi_f2d>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	ec43 2b10 	vmov	d0, r2, r3
 8002d5a:	f00d fc51 	bl	8010600 <exp>
 8002d5e:	ec51 0b10 	vmov	r0, r1, d0
 8002d62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d66:	4b1e      	ldr	r3, [pc, #120]	@ (8002de0 <init_controller_params+0x188>)
 8002d68:	f7fd fc76 	bl	8000658 <__aeabi_dmul>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4610      	mov	r0, r2
 8002d72:	4619      	mov	r1, r3
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	4b1a      	ldr	r3, [pc, #104]	@ (8002de4 <init_controller_params+0x18c>)
 8002d7a:	f7fd fab7 	bl	80002ec <__adddf3>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4610      	mov	r0, r2
 8002d84:	4619      	mov	r1, r3
 8002d86:	f7fd ff5f 	bl	8000c48 <__aeabi_d2f>
 8002d8a:	4601      	mov	r1, r0
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	3342      	adds	r3, #66	@ 0x42
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2b7f      	cmp	r3, #127	@ 0x7f
 8002da2:	ddc5      	ble.n	8002d30 <init_controller_params+0xd8>
    }

    }
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	3cd0e560 	.word	0x3cd0e560
 8002db4:	20000348 	.word	0x20000348
 8002db8:	38fba882 	.word	0x38fba882
 8002dbc:	37d1b717 	.word	0x37d1b717
 8002dc0:	40c90fdb 	.word	0x40c90fdb
 8002dc4:	3dcccccd 	.word	0x3dcccccd
 8002dc8:	20000448 	.word	0x20000448
 8002dcc:	42200000 	.word	0x42200000
 8002dd0:	3ca4ffff 	.word	0x3ca4ffff
 8002dd4:	3d24ffff 	.word	0x3d24ffff
 8002dd8:	bc000000 	.word	0xbc000000
 8002ddc:	3d03126f 	.word	0x3d03126f
 8002de0:	3ff33333 	.word	0x3ff33333
 8002de4:	3ff00000 	.word	0x3ff00000

08002de8 <reset_foc>:

void reset_foc(ControllerStruct *controller){
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]

	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002df0:	4b36      	ldr	r3, [pc, #216]	@ (8002ecc <reset_foc+0xe4>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df6:	ee07 3a90 	vmov	s15, r3
 8002dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dfe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002e02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e06:	4b31      	ldr	r3, [pc, #196]	@ (8002ecc <reset_foc+0xe4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e0e:	ee17 2a90 	vmov	r2, s15
 8002e12:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002e14:	4b2d      	ldr	r3, [pc, #180]	@ (8002ecc <reset_foc+0xe4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e1a:	ee07 3a90 	vmov	s15, r3
 8002e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e22:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002e26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e2a:	4b28      	ldr	r3, [pc, #160]	@ (8002ecc <reset_foc+0xe4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e32:	ee17 2a90 	vmov	r2, s15
 8002e36:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002e38:	4b24      	ldr	r3, [pc, #144]	@ (8002ecc <reset_foc+0xe4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e3e:	ee07 3a90 	vmov	s15, r3
 8002e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e46:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002e4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e4e:	4b1f      	ldr	r3, [pc, #124]	@ (8002ecc <reset_foc+0xe4>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e56:	ee17 2a90 	vmov	r2, s15
 8002e5a:	639a      	str	r2, [r3, #56]	@ 0x38
    controller->i_d_des = 0;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    controller->i_q_des = 0;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    controller->i_d = 0;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	63da      	str	r2, [r3, #60]	@ 0x3c
    controller->i_q = 0;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	641a      	str	r2, [r3, #64]	@ 0x40
    controller->i_q_filt = 0;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	645a      	str	r2, [r3, #68]	@ 0x44
    controller->q_int = 0;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    controller->d_int = 0;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    controller->v_q = 0;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	659a      	str	r2, [r3, #88]	@ 0x58
    controller->v_d = 0;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	655a      	str	r2, [r3, #84]	@ 0x54
    controller->fw_int = 0;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    controller->otw_flag = 0;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

    }
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	200094d0 	.word	0x200094d0

08002ed0 <field_weaken>:
    float val2 = controller->inverter_tab[index+1];
    return val1 + (val2 - val1)*(duty*128.0f - (float)index);
}

void field_weaken(ControllerStruct *controller)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
       /// Field Weakening ///

       controller->fw_int += controller->ki_fw*(controller->v_max - 1.0f - controller->v_ref);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	ed93 7a3e 	vldr	s14, [r3, #248]	@ 0xf8
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	edd3 6a22 	vldr	s13, [r3, #136]	@ 0x88
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	edd3 7a3c 	vldr	s15, [r3, #240]	@ 0xf0
 8002eea:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8002eee:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	edd3 7a3d 	vldr	s15, [r3, #244]	@ 0xf4
 8002ef8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002efc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8
       controller->fw_int = fast_fmaxf(fast_fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	edd3 7a3e 	vldr	s15, [r3, #248]	@ 0xf8
 8002f10:	eddf 0a40 	vldr	s1, [pc, #256]	@ 8003014 <field_weaken+0x144>
 8002f14:	eeb0 0a67 	vmov.f32	s0, s15
 8002f18:	f002 f953 	bl	80051c2 <fast_fminf>
 8002f1c:	eeb0 7a40 	vmov.f32	s14, s0
 8002f20:	4b3d      	ldr	r3, [pc, #244]	@ (8003018 <field_weaken+0x148>)
 8002f22:	edd3 7a06 	vldr	s15, [r3, #24]
 8002f26:	eef1 7a67 	vneg.f32	s15, s15
 8002f2a:	eef0 0a67 	vmov.f32	s1, s15
 8002f2e:	eeb0 0a47 	vmov.f32	s0, s14
 8002f32:	f002 f92a 	bl	800518a <fast_fmaxf>
 8002f36:	eef0 7a40 	vmov.f32	s15, s0
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8
       controller->i_q_des = controller->i_q_des + (controller->i_q_des > 0)*controller->fw_int + (controller->i_q_des < 0)*controller->fw_int;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	ed93 7a2c 	vldr	s14, [r3, #176]	@ 0xb0
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8002f4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f54:	dd02      	ble.n	8002f5c <field_weaken+0x8c>
 8002f56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f5a:	e001      	b.n	8002f60 <field_weaken+0x90>
 8002f5c:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8003014 <field_weaken+0x144>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	edd3 7a3e 	vldr	s15, [r3, #248]	@ 0xf8
 8002f66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8002f74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f7c:	d502      	bpl.n	8002f84 <field_weaken+0xb4>
 8002f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f82:	e001      	b.n	8002f88 <field_weaken+0xb8>
 8002f84:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8003014 <field_weaken+0x144>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	edd3 7a3e 	vldr	s15, [r3, #248]	@ 0xf8
 8002f8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	edc3 7a2c 	vstr	s15, [r3, #176]	@ 0xb0
       controller->i_d_des = controller->fw_int;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	ed93 7a41 	vldr	s14, [r3, #260]	@ 0x104
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	edd3 7a41 	vldr	s15, [r3, #260]	@ 0x104
 8002fb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	edd3 6a2b 	vldr	s13, [r3, #172]	@ 0xac
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	edd3 7a2b 	vldr	s15, [r3, #172]	@ 0xac
 8002fc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fcc:	eeb0 0a67 	vmov.f32	s0, s15
 8002fd0:	f00d fb7e 	bl	80106d0 <sqrtf>
 8002fd4:	ed87 0a03 	vstr	s0, [r7, #12]
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8002fde:	edd7 0a03 	vldr	s1, [r7, #12]
 8002fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8002fe6:	f002 f8ec 	bl	80051c2 <fast_fminf>
 8002fea:	eeb0 7a40 	vmov.f32	s14, s0
 8002fee:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ff2:	eef1 7a67 	vneg.f32	s15, s15
 8002ff6:	eef0 0a67 	vmov.f32	s1, s15
 8002ffa:	eeb0 0a47 	vmov.f32	s0, s14
 8002ffe:	f002 f8c4 	bl	800518a <fast_fmaxf>
 8003002:	eef0 7a40 	vmov.f32	s15, s0
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	edc3 7a2c 	vstr	s15, [r3, #176]	@ 0xb0


}
 800300c:	bf00      	nop
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	00000000 	.word	0x00000000
 8003018:	20000348 	.word	0x20000348

0800301c <commutate>:
void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	62da      	str	r2, [r3, #44]	@ 0x2c
		controller->dtheta_elec = encoder->elec_velocity;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	635a      	str	r2, [r3, #52]	@ 0x34
		controller->dtheta_mech = encoder->velocity/GR;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 800303c:	4b5e      	ldr	r3, [pc, #376]	@ (80031b8 <commutate+0x19c>)
 800303e:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8003042:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	edd3 6a03 	vldr	s13, [r3, #12]
 8003052:	4b59      	ldr	r3, [pc, #356]	@ (80031b8 <commutate+0x19c>)
 8003054:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8003058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	ed93 7a05 	vldr	s14, [r3, #20]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	edd3 6a06 	vldr	s13, [r3, #24]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	ed93 6a07 	vldr	s12, [r3, #28]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3340      	adds	r3, #64	@ 0x40
 8003084:	4619      	mov	r1, r3
 8003086:	4610      	mov	r0, r2
 8003088:	eef0 1a46 	vmov.f32	s3, s12
 800308c:	eeb0 1a66 	vmov.f32	s2, s13
 8003090:	eef0 0a47 	vmov.f32	s1, s14
 8003094:	eeb0 0a67 	vmov.f32	s0, s15
 8003098:	f7ff fc52 	bl	8002940 <dq0>

       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80030a2:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80031bc <commutate+0x1a0>
 80030a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80030b0:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80031c0 <commutate+0x1a4>
 80030b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80030c8:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80031bc <commutate+0x1a0>
 80030cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80030d6:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 80031c0 <commutate+0x1a4>
 80030da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80030ee:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80031bc <commutate+0x1a0>
 80030f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	edd3 7a08 	vldr	s15, [r3, #32]
 80030fc:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80031c0 <commutate+0x1a4>
 8003100:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003114:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80031c4 <commutate+0x1a8>
 8003118:	ee67 7a87 	vmul.f32	s15, s15, s14
 800311c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80031c8 <commutate+0x1ac>
 8003120:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003124:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80031cc <commutate+0x1b0>
 8003128:	ee67 7a87 	vmul.f32	s15, s15, s14
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	edc3 7a3c 	vstr	s15, [r3, #240]	@ 0xf0
       controller->v_margin = controller->v_max - controller->v_ref;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	edd3 7a3d 	vldr	s15, [r3, #244]	@ 0xf4
 800313e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	edc3 7a3f 	vstr	s15, [r3, #252]	@ 0xfc
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 8003148:	4b1b      	ldr	r3, [pc, #108]	@ (80031b8 <commutate+0x19c>)
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f103 02ac 	add.w	r2, r3, #172	@ 0xac
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f103 01b0 	add.w	r1, r3, #176	@ 0xb0
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	edd3 7a41 	vldr	s15, [r3, #260]	@ 0x104
 8003164:	eeb0 0a67 	vmov.f32	s0, s15
 8003168:	4610      	mov	r0, r2
 800316a:	f002 f8ae 	bl	80052ca <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	ed93 7a2b 	vldr	s14, [r3, #172]	@ 0xac
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800317a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800317e:	edc7 7a07 	vstr	s15, [r7, #28]
       float i_q_error = controller->i_q_des - controller->i_q;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	ed93 7a2c 	vldr	s14, [r3, #176]	@ 0xb0
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800318e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003192:	edc7 7a06 	vstr	s15, [r7, #24]

       if(controller->i_q > controller->i_mag_max){
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80031a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031aa:	dd13      	ble.n	80031d4 <commutate+0x1b8>
    	   controller->i_mag_max = controller->i_q;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	651a      	str	r2, [r3, #80]	@ 0x50
 80031b4:	e00e      	b.n	80031d4 <commutate+0x1b8>
 80031b6:	bf00      	nop
 80031b8:	20000348 	.word	0x20000348
 80031bc:	3f666666 	.word	0x3f666666
 80031c0:	3dcccccd 	.word	0x3dcccccd
 80031c4:	3f933333 	.word	0x3f933333
 80031c8:	3f70a3d7 	.word	0x3f70a3d7
 80031cc:	3f13cd3a 	.word	0x3f13cd3a
 80031d0:	381d4951 	.word	0x381d4951
       }


       // Calculate decoupling feed-forward voltages //

       float v_d_ff = 0.0f;//-SQRT3*controller->dtheta_elec*L_Q*controller->i_q;
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]
       float v_q_ff = 0.0f;//SQRT3*controller->dtheta_elec*(0.0f*L_D*controller->i_d + controller->flux_linkage);
 80031da:	f04f 0300 	mov.w	r3, #0
 80031de:	613b      	str	r3, [r7, #16]

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	ed93 7a1e 	vldr	s14, [r3, #120]	@ 0x78
 80031e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80031ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 80031f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80031fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 8003212:	eef0 0a47 	vmov.f32	s1, s14
 8003216:	eeb0 0a67 	vmov.f32	s0, s15
 800321a:	f001 ffd2 	bl	80051c2 <fast_fminf>
 800321e:	eeb0 7a40 	vmov.f32	s14, s0
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	edd3 7a3c 	vldr	s15, [r3, #240]	@ 0xf0
 8003228:	eef1 7a67 	vneg.f32	s15, s15
 800322c:	eef0 0a67 	vmov.f32	s1, s15
 8003230:	eeb0 0a47 	vmov.f32	s0, s14
 8003234:	f001 ffa9 	bl	800518a <fast_fmaxf>
 8003238:	eef0 7a40 	vmov.f32	s15, s0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	ed93 7a25 	vldr	s14, [r3, #148]	@ 0x94
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	edd3 6a1e 	vldr	s13, [r3, #120]	@ 0x78
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 8003254:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003258:	edd7 7a07 	vldr	s15, [r7, #28]
 800325c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 8003276:	eef0 0a47 	vmov.f32	s1, s14
 800327a:	eeb0 0a67 	vmov.f32	s0, s15
 800327e:	f001 ffa0 	bl	80051c2 <fast_fminf>
 8003282:	eeb0 7a40 	vmov.f32	s14, s0
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	edd3 7a3c 	vldr	s15, [r3, #240]	@ 0xf0
 800328c:	eef1 7a67 	vneg.f32	s15, s15
 8003290:	eef0 0a67 	vmov.f32	s1, s15
 8003294:	eeb0 0a47 	vmov.f32	s0, s14
 8003298:	f001 ff77 	bl	800518a <fast_fmaxf>
 800329c:	eef0 7a40 	vmov.f32	s15, s0
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
       float vq_max = controller->v_max;//sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032ac:	60fb      	str	r3, [r7, #12]

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	ed93 7a1f 	vldr	s14, [r3, #124]	@ 0x7c
 80032b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80032b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 80032c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80032ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	ed93 7a26 	vldr	s14, [r3, #152]	@ 0x98
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	edd3 6a1f 	vldr	s13, [r3, #124]	@ 0x7c
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 80032e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80032ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80032ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	edc3 7a26 	vstr	s15, [r3, #152]	@ 0x98
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 8003308:	eef0 0a47 	vmov.f32	s1, s14
 800330c:	eeb0 0a67 	vmov.f32	s0, s15
 8003310:	f001 ff57 	bl	80051c2 <fast_fminf>
 8003314:	eeb0 7a40 	vmov.f32	s14, s0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	edd3 7a3c 	vldr	s15, [r3, #240]	@ 0xf0
 800331e:	eef1 7a67 	vneg.f32	s15, s15
 8003322:	eef0 0a67 	vmov.f32	s1, s15
 8003326:	eeb0 0a47 	vmov.f32	s0, s14
 800332a:	f001 ff2e 	bl	800518a <fast_fmaxf>
 800332e:	eef0 7a40 	vmov.f32	s15, s0
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	edc3 7a26 	vstr	s15, [r3, #152]	@ 0x98
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003344:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8003354:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800335c:	eeb0 0a67 	vmov.f32	s0, s15
 8003360:	f00d f9b6 	bl	80106d0 <sqrtf>
 8003364:	eef0 7a40 	vmov.f32	s15, s0
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8003374:	edd7 0a03 	vldr	s1, [r7, #12]
 8003378:	eeb0 0a67 	vmov.f32	s0, s15
 800337c:	f001 ff21 	bl	80051c2 <fast_fminf>
 8003380:	eeb0 7a40 	vmov.f32	s14, s0
 8003384:	edd7 7a03 	vldr	s15, [r7, #12]
 8003388:	eef1 7a67 	vneg.f32	s15, s15
 800338c:	eef0 0a67 	vmov.f32	s1, s15
 8003390:	eeb0 0a47 	vmov.f32	s0, s14
 8003394:	f001 fef9 	bl	800518a <fast_fmaxf>
 8003398:	eef0 7a40 	vmov.f32	s15, s0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	edd3 7a3c 	vldr	s15, [r3, #240]	@ 0xf0
 80033b4:	eeb0 0a67 	vmov.f32	s0, s15
 80033b8:	4610      	mov	r0, r2
 80033ba:	f001 ff86 	bl	80052ca <limit_norm>

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80033ca:	ed5f 6a7f 	vldr	s13, [pc, #-508]	@ 80031d0 <commutate+0x1b4>
 80033ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f103 016c 	add.w	r1, r3, #108	@ 0x6c
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3370      	adds	r3, #112	@ 0x70
 80033f2:	461a      	mov	r2, r3
 80033f4:	eeb0 1a66 	vmov.f32	s2, s13
 80033f8:	eef0 0a47 	vmov.f32	s1, s14
 80033fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003400:	f7ff fa1a 	bl	8002838 <abc>
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	edd3 7a3c 	vldr	s15, [r3, #240]	@ 0xf0
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	edd3 6a1b 	vldr	s13, [r3, #108]	@ 0x6c
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	ed93 6a1c 	vldr	s12, [r3, #112]	@ 0x70
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3364      	adds	r3, #100	@ 0x64
 800342c:	461a      	mov	r2, r3
 800342e:	eef0 1a46 	vmov.f32	s3, s12
 8003432:	eeb0 1a66 	vmov.f32	s2, s13
 8003436:	eef0 0a47 	vmov.f32	s1, s14
 800343a:	eeb0 0a67 	vmov.f32	s0, s15
 800343e:	f7ff fb0f 	bl	8002a60 <svm>

       set_dtc(controller);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff f8d4 	bl	80025f0 <set_dtc>

    }
 8003448:	bf00      	nop
 800344a:	3720      	adds	r7, #32
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <torque_control>:


void torque_control(ControllerStruct *controller){
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
	/*----- convert theta_mech to 0~359.9999deg -----*/
	static float pos, round;
	pos = controller->theta_mech;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345c:	4a76      	ldr	r2, [pc, #472]	@ (8003638 <torque_control+0x1e8>)
 800345e:	6013      	str	r3, [r2, #0]
	modff(pos/(2*PI_F),&round);
 8003460:	4b75      	ldr	r3, [pc, #468]	@ (8003638 <torque_control+0x1e8>)
 8003462:	edd3 7a00 	vldr	s15, [r3]
 8003466:	eddf 6a75 	vldr	s13, [pc, #468]	@ 800363c <torque_control+0x1ec>
 800346a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800346e:	4874      	ldr	r0, [pc, #464]	@ (8003640 <torque_control+0x1f0>)
 8003470:	eeb0 0a47 	vmov.f32	s0, s14
 8003474:	f00a fc5c 	bl	800dd30 <modff>
	pos = pos - round*2*PI_F;
 8003478:	4b6f      	ldr	r3, [pc, #444]	@ (8003638 <torque_control+0x1e8>)
 800347a:	ed93 7a00 	vldr	s14, [r3]
 800347e:	4b70      	ldr	r3, [pc, #448]	@ (8003640 <torque_control+0x1f0>)
 8003480:	edd3 7a00 	vldr	s15, [r3]
 8003484:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003488:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8003644 <torque_control+0x1f4>
 800348c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003494:	4b68      	ldr	r3, [pc, #416]	@ (8003638 <torque_control+0x1e8>)
 8003496:	edc3 7a00 	vstr	s15, [r3]
	if(pos < 0){
 800349a:	4b67      	ldr	r3, [pc, #412]	@ (8003638 <torque_control+0x1e8>)
 800349c:	edd3 7a00 	vldr	s15, [r3]
 80034a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a8:	d509      	bpl.n	80034be <torque_control+0x6e>
		pos = pos + 2*PI_F;
 80034aa:	4b63      	ldr	r3, [pc, #396]	@ (8003638 <torque_control+0x1e8>)
 80034ac:	edd3 7a00 	vldr	s15, [r3]
 80034b0:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 800363c <torque_control+0x1ec>
 80034b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034b8:	4b5f      	ldr	r3, [pc, #380]	@ (8003638 <torque_control+0x1e8>)
 80034ba:	edc3 7a00 	vstr	s15, [r3]
	}

	/*----- position PID control -----*/
	static float err = 0; //integral of position error

	if(controller->p_des < pos){
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	ed93 7a36 	vldr	s14, [r3, #216]	@ 0xd8
 80034c4:	4b5c      	ldr	r3, [pc, #368]	@ (8003638 <torque_control+0x1e8>)
 80034c6:	edd3 7a00 	vldr	s15, [r3]
 80034ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d2:	d534      	bpl.n	800353e <torque_control+0xee>
		if((controller->p_des + 2*PI_F - pos) < (pos - controller->p_des)){
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 80034da:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800363c <torque_control+0x1ec>
 80034de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034e2:	4b55      	ldr	r3, [pc, #340]	@ (8003638 <torque_control+0x1e8>)
 80034e4:	edd3 7a00 	vldr	s15, [r3]
 80034e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034ec:	4b52      	ldr	r3, [pc, #328]	@ (8003638 <torque_control+0x1e8>)
 80034ee:	edd3 6a00 	vldr	s13, [r3]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 80034f8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80034fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003504:	d50f      	bpl.n	8003526 <torque_control+0xd6>
			err = 2*PI_F - pos + controller->p_des;
 8003506:	4b4c      	ldr	r3, [pc, #304]	@ (8003638 <torque_control+0x1e8>)
 8003508:	edd3 7a00 	vldr	s15, [r3]
 800350c:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 800363c <torque_control+0x1ec>
 8003510:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 800351a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800351e:	4b4a      	ldr	r3, [pc, #296]	@ (8003648 <torque_control+0x1f8>)
 8003520:	edc3 7a00 	vstr	s15, [r3]
 8003524:	e03f      	b.n	80035a6 <torque_control+0x156>
		}
		else{
			err = controller->p_des - pos;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	ed93 7a36 	vldr	s14, [r3, #216]	@ 0xd8
 800352c:	4b42      	ldr	r3, [pc, #264]	@ (8003638 <torque_control+0x1e8>)
 800352e:	edd3 7a00 	vldr	s15, [r3]
 8003532:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003536:	4b44      	ldr	r3, [pc, #272]	@ (8003648 <torque_control+0x1f8>)
 8003538:	edc3 7a00 	vstr	s15, [r3]
 800353c:	e033      	b.n	80035a6 <torque_control+0x156>
		}
	}
	else{
		if((pos + 2*PI_F - controller->p_des) < (controller->p_des - pos)){
 800353e:	4b3e      	ldr	r3, [pc, #248]	@ (8003638 <torque_control+0x1e8>)
 8003540:	edd3 7a00 	vldr	s15, [r3]
 8003544:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 800363c <torque_control+0x1ec>
 8003548:	ee37 7a87 	vadd.f32	s14, s15, s14
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8003552:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	edd3 6a36 	vldr	s13, [r3, #216]	@ 0xd8
 800355c:	4b36      	ldr	r3, [pc, #216]	@ (8003638 <torque_control+0x1e8>)
 800355e:	edd3 7a00 	vldr	s15, [r3]
 8003562:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003566:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800356a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356e:	d50f      	bpl.n	8003590 <torque_control+0x140>
			err = controller->p_des - 2*PI_F - pos;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8003576:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800363c <torque_control+0x1ec>
 800357a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800357e:	4b2e      	ldr	r3, [pc, #184]	@ (8003638 <torque_control+0x1e8>)
 8003580:	edd3 7a00 	vldr	s15, [r3]
 8003584:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003588:	4b2f      	ldr	r3, [pc, #188]	@ (8003648 <torque_control+0x1f8>)
 800358a:	edc3 7a00 	vstr	s15, [r3]
 800358e:	e00a      	b.n	80035a6 <torque_control+0x156>
		}
		else{
			err = controller->p_des - pos;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	ed93 7a36 	vldr	s14, [r3, #216]	@ 0xd8
 8003596:	4b28      	ldr	r3, [pc, #160]	@ (8003638 <torque_control+0x1e8>)
 8003598:	edd3 7a00 	vldr	s15, [r3]
 800359c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035a0:	4b29      	ldr	r3, [pc, #164]	@ (8003648 <torque_control+0x1f8>)
 80035a2:	edc3 7a00 	vstr	s15, [r3]
		}
	}
	in_err = in_err + err;
 80035a6:	4b29      	ldr	r3, [pc, #164]	@ (800364c <torque_control+0x1fc>)
 80035a8:	ed93 7a00 	vldr	s14, [r3]
 80035ac:	4b26      	ldr	r3, [pc, #152]	@ (8003648 <torque_control+0x1f8>)
 80035ae:	edd3 7a00 	vldr	s15, [r3]
 80035b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035b6:	4b25      	ldr	r3, [pc, #148]	@ (800364c <torque_control+0x1fc>)
 80035b8:	edc3 7a00 	vstr	s15, [r3]

    float torque_ref = controller->kp*(err) + controller->t_ff + controller->ki*(in_err) + controller->kd*(-controller->dtheta_mech);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	ed93 7a37 	vldr	s14, [r3, #220]	@ 0xdc
 80035c2:	4b21      	ldr	r3, [pc, #132]	@ (8003648 <torque_control+0x1f8>)
 80035c4:	edd3 7a00 	vldr	s15, [r3]
 80035c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	edd3 7a3a 	vldr	s15, [r3, #232]	@ 0xe8
 80035d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	edd3 6a38 	vldr	s13, [r3, #224]	@ 0xe0
 80035dc:	4b1b      	ldr	r3, [pc, #108]	@ (800364c <torque_control+0x1fc>)
 80035de:	edd3 7a00 	vldr	s15, [r3]
 80035e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	edd3 6a39 	vldr	s13, [r3, #228]	@ 0xe4
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80035f6:	eef1 7a67 	vneg.f32	s15, s15
 80035fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003602:	edc7 7a03 	vstr	s15, [r7, #12]
    controller->i_q_des = torque_ref/(KT*GR);
 8003606:	4b12      	ldr	r3, [pc, #72]	@ (8003650 <torque_control+0x200>)
 8003608:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800360c:	4b10      	ldr	r3, [pc, #64]	@ (8003650 <torque_control+0x200>)
 800360e:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003612:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003616:	edd7 6a03 	vldr	s13, [r7, #12]
 800361a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	edc3 7a2c 	vstr	s15, [r3, #176]	@ 0xb0
	controller->i_d_des = 0.0f;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    
    }
 800362e:	bf00      	nop
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000338 	.word	0x20000338
 800363c:	40c90fdb 	.word	0x40c90fdb
 8003640:	2000033c 	.word	0x2000033c
 8003644:	40490fdb 	.word	0x40490fdb
 8003648:	20000340 	.word	0x20000340
 800364c:	20000334 	.word	0x20000334
 8003650:	20000348 	.word	0x20000348

08003654 <zero_commands>:



void zero_commands(ControllerStruct * controller){
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
	controller->t_ff = 0;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	controller->kp = 0;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	controller->ki = 0;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
	controller->kd = 0;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	controller->p_des = 0;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	controller->v_des = 0;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	controller->i_q_des = 0;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
	...

080036b0 <run_fsm>:
#include "foc.h"
#include "math_ops.h"
#include "position_sensor.h"
#include "drv8323.h"

 void run_fsm(FSMStruct * fsmstate){
 80036b0:	b590      	push	{r4, r7, lr}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	6078      	str	r0, [r7, #4]
	 /* run_fsm is run every commutation interrupt cycle */

	 /* state transition management */
	 if(fsmstate->next_state != fsmstate->state){
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	785a      	ldrb	r2, [r3, #1]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d00d      	beq.n	80036e0 <run_fsm+0x30>
		 fsm_exit_state(fsmstate);		// safely exit the old state
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f9b1 	bl	8003a2c <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	78db      	ldrb	r3, [r3, #3]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d006      	beq.n	80036e0 <run_fsm+0x30>
			 fsmstate->state = fsmstate->next_state;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	785a      	ldrb	r2, [r3, #1]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	701a      	strb	r2, [r3, #0]
			 fsm_enter_state(fsmstate);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f8f0 	bl	80038c0 <fsm_enter_state>
		 }
	 }

	 switch(fsmstate->state){
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b06      	cmp	r3, #6
 80036e6:	f200 80d7 	bhi.w	8003898 <run_fsm+0x1e8>
 80036ea:	a201      	add	r2, pc, #4	@ (adr r2, 80036f0 <run_fsm+0x40>)
 80036ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f0:	08003897 	.word	0x08003897
 80036f4:	08003857 	.word	0x08003857
 80036f8:	0800380d 	.word	0x0800380d
 80036fc:	08003899 	.word	0x08003899
 8003700:	08003897 	.word	0x08003897
 8003704:	0800370d 	.word	0x0800370d
 8003708:	0800384d 	.word	0x0800384d
		 case MENU_MODE:
			 break;

		 case ENCODER_CALIBRATE:
			 if(!comm_encoder_cal.done_ordering){
 800370c:	4b64      	ldr	r3, [pc, #400]	@ (80038a0 <run_fsm+0x1f0>)
 800370e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003712:	2b00      	cmp	r3, #0
 8003714:	d108      	bne.n	8003728 <run_fsm+0x78>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8003716:	4b63      	ldr	r3, [pc, #396]	@ (80038a4 <run_fsm+0x1f4>)
 8003718:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800371c:	4a60      	ldr	r2, [pc, #384]	@ (80038a0 <run_fsm+0x1f0>)
 800371e:	4961      	ldr	r1, [pc, #388]	@ (80038a4 <run_fsm+0x1f4>)
 8003720:	4861      	ldr	r0, [pc, #388]	@ (80038a8 <run_fsm+0x1f8>)
 8003722:	f7fd fe51 	bl	80013c8 <order_phases>
				 preference_writer_close(&prefs);
				 preference_writer_load(prefs);
				 update_fsm(fsmstate, 27);
			 }

			 break;
 8003726:	e0b7      	b.n	8003898 <run_fsm+0x1e8>
			 else if(!comm_encoder_cal.done_cal){
 8003728:	4b5d      	ldr	r3, [pc, #372]	@ (80038a0 <run_fsm+0x1f0>)
 800372a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800372e:	2b00      	cmp	r3, #0
 8003730:	d108      	bne.n	8003744 <run_fsm+0x94>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8003732:	4b5c      	ldr	r3, [pc, #368]	@ (80038a4 <run_fsm+0x1f4>)
 8003734:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003738:	4a59      	ldr	r2, [pc, #356]	@ (80038a0 <run_fsm+0x1f0>)
 800373a:	495a      	ldr	r1, [pc, #360]	@ (80038a4 <run_fsm+0x1f4>)
 800373c:	485a      	ldr	r0, [pc, #360]	@ (80038a8 <run_fsm+0x1f8>)
 800373e:	f7fd ff4b 	bl	80015d8 <calibrate_encoder>
			 break;
 8003742:	e0a9      	b.n	8003898 <run_fsm+0x1e8>
				 E_ZERO = comm_encoder_cal.ezero;
 8003744:	4b56      	ldr	r3, [pc, #344]	@ (80038a0 <run_fsm+0x1f0>)
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	4a58      	ldr	r2, [pc, #352]	@ (80038ac <run_fsm+0x1fc>)
 800374a:	6153      	str	r3, [r2, #20]
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 800374c:	4b57      	ldr	r3, [pc, #348]	@ (80038ac <run_fsm+0x1fc>)
 800374e:	695c      	ldr	r4, [r3, #20]
 8003750:	4b55      	ldr	r3, [pc, #340]	@ (80038a8 <run_fsm+0x1f8>)
 8003752:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 8003756:	4b55      	ldr	r3, [pc, #340]	@ (80038ac <run_fsm+0x1fc>)
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	425b      	negs	r3, r3
 800375c:	ee07 3a90 	vmov	s15, r3
 8003760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003768:	eddf 6a51 	vldr	s13, [pc, #324]	@ 80038b0 <run_fsm+0x200>
 800376c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003770:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003774:	eeb0 0a47 	vmov.f32	s0, s14
 8003778:	f00c ff8a 	bl	8010690 <fmodf>
 800377c:	eef0 7a40 	vmov.f32	s15, s0
 8003780:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80038b4 <run_fsm+0x204>
 8003784:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003788:	ee17 0a90 	vmov	r0, s15
 800378c:	f7fc ff0c 	bl	80005a8 <__aeabi_f2d>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4621      	mov	r1, r4
 8003796:	4848      	ldr	r0, [pc, #288]	@ (80038b8 <run_fsm+0x208>)
 8003798:	f00a f8b6 	bl	800d908 <iprintf>
				 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 800379c:	4b42      	ldr	r3, [pc, #264]	@ (80038a8 <run_fsm+0x1f8>)
 800379e:	4a40      	ldr	r2, [pc, #256]	@ (80038a0 <run_fsm+0x1f0>)
 80037a0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80037a4:	33dc      	adds	r3, #220	@ 0xdc
 80037a6:	f102 012c 	add.w	r1, r2, #44	@ 0x2c
 80037aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037ae:	4618      	mov	r0, r3
 80037b0:	f00a faa5 	bl	800dcfe <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 80037b4:	4b3d      	ldr	r3, [pc, #244]	@ (80038ac <run_fsm+0x1fc>)
 80037b6:	4a3a      	ldr	r2, [pc, #232]	@ (80038a0 <run_fsm+0x1f0>)
 80037b8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80037bc:	331c      	adds	r3, #28
 80037be:	f102 012c 	add.w	r1, r2, #44	@ 0x2c
 80037c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037c6:	4618      	mov	r0, r3
 80037c8:	f00a fa99 	bl	800dcfe <memcpy>
				 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 80037cc:	4b3b      	ldr	r3, [pc, #236]	@ (80038bc <run_fsm+0x20c>)
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	9200      	str	r2, [sp, #0]
 80037d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037d4:	f002 f8ac 	bl	8005930 <preference_writer_ready>
 80037d8:	4603      	mov	r3, r0
 80037da:	f083 0301 	eor.w	r3, r3, #1
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <run_fsm+0x13a>
 80037e4:	4835      	ldr	r0, [pc, #212]	@ (80038bc <run_fsm+0x20c>)
 80037e6:	f002 f894 	bl	8005912 <preference_writer_open>
				 preference_writer_flush(&prefs);
 80037ea:	4834      	ldr	r0, [pc, #208]	@ (80038bc <run_fsm+0x20c>)
 80037ec:	f002 f8ae 	bl	800594c <preference_writer_flush>
				 preference_writer_close(&prefs);
 80037f0:	4832      	ldr	r0, [pc, #200]	@ (80038bc <run_fsm+0x20c>)
 80037f2:	f002 f929 	bl	8005a48 <preference_writer_close>
				 preference_writer_load(prefs);
 80037f6:	4b31      	ldr	r3, [pc, #196]	@ (80038bc <run_fsm+0x20c>)
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	9200      	str	r2, [sp, #0]
 80037fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037fe:	f002 f8e1 	bl	80059c4 <preference_writer_load>
				 update_fsm(fsmstate, 27);
 8003802:	211b      	movs	r1, #27
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f9c9 	bl	8003b9c <update_fsm>
			 break;
 800380a:	e045      	b.n	8003898 <run_fsm+0x1e8>

		 case MOTOR_MODE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 800380c:	4b27      	ldr	r3, [pc, #156]	@ (80038ac <run_fsm+0x1fc>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	2b00      	cmp	r3, #0
 8003812:	dd09      	ble.n	8003828 <run_fsm+0x178>
 8003814:	4b23      	ldr	r3, [pc, #140]	@ (80038a4 <run_fsm+0x1f4>)
 8003816:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800381a:	4b24      	ldr	r3, [pc, #144]	@ (80038ac <run_fsm+0x1fc>)
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	429a      	cmp	r2, r3
 8003820:	dd02      	ble.n	8003828 <run_fsm+0x178>
				 zero_commands(&controller);
 8003822:	4820      	ldr	r0, [pc, #128]	@ (80038a4 <run_fsm+0x1f4>)
 8003824:	f7ff ff16 	bl	8003654 <zero_commands>
			 }
			 /* Otherwise, commutate */

			 torque_control(&controller);
 8003828:	481e      	ldr	r0, [pc, #120]	@ (80038a4 <run_fsm+0x1f4>)
 800382a:	f7ff fe11 	bl	8003450 <torque_control>
			 field_weaken(&controller);
 800382e:	481d      	ldr	r0, [pc, #116]	@ (80038a4 <run_fsm+0x1f4>)
 8003830:	f7ff fb4e 	bl	8002ed0 <field_weaken>
			 commutate(&controller, &comm_encoder);
 8003834:	491c      	ldr	r1, [pc, #112]	@ (80038a8 <run_fsm+0x1f8>)
 8003836:	481b      	ldr	r0, [pc, #108]	@ (80038a4 <run_fsm+0x1f4>)
 8003838:	f7ff fbf0 	bl	800301c <commutate>

			 controller.timeout ++;
 800383c:	4b19      	ldr	r3, [pc, #100]	@ (80038a4 <run_fsm+0x1f4>)
 800383e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003842:	3301      	adds	r3, #1
 8003844:	4a17      	ldr	r2, [pc, #92]	@ (80038a4 <run_fsm+0x1f4>)
 8003846:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
			 break;
 800384a:	e025      	b.n	8003898 <run_fsm+0x1e8>

		 case SETUP_MODE:
			 break;

		 case ENCODER_MODE:
			 ps_print(&comm_encoder, 100);
 800384c:	2164      	movs	r1, #100	@ 0x64
 800384e:	4816      	ldr	r0, [pc, #88]	@ (80038a8 <run_fsm+0x1f8>)
 8003850:	f002 f808 	bl	8005864 <ps_print>
			 break;
 8003854:	e020      	b.n	8003898 <run_fsm+0x1e8>

		 case HALL_CALIBRATE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 8003856:	4b15      	ldr	r3, [pc, #84]	@ (80038ac <run_fsm+0x1fc>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	dd09      	ble.n	8003872 <run_fsm+0x1c2>
 800385e:	4b11      	ldr	r3, [pc, #68]	@ (80038a4 <run_fsm+0x1f4>)
 8003860:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8003864:	4b11      	ldr	r3, [pc, #68]	@ (80038ac <run_fsm+0x1fc>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	429a      	cmp	r2, r3
 800386a:	dd02      	ble.n	8003872 <run_fsm+0x1c2>
				 zero_commands(&controller);
 800386c:	480d      	ldr	r0, [pc, #52]	@ (80038a4 <run_fsm+0x1f4>)
 800386e:	f7ff fef1 	bl	8003654 <zero_commands>
			 }
			 /* Otherwise, commutate */

			 /* Calibrate Hall Sensor */
			 hall_calibrate(fsmstate);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fd38 	bl	80042e8 <hall_calibrate>

			 torque_control(&controller);
 8003878:	480a      	ldr	r0, [pc, #40]	@ (80038a4 <run_fsm+0x1f4>)
 800387a:	f7ff fde9 	bl	8003450 <torque_control>
			 commutate(&controller, &comm_encoder);
 800387e:	490a      	ldr	r1, [pc, #40]	@ (80038a8 <run_fsm+0x1f8>)
 8003880:	4808      	ldr	r0, [pc, #32]	@ (80038a4 <run_fsm+0x1f4>)
 8003882:	f7ff fbcb 	bl	800301c <commutate>

			 controller.timeout ++;
 8003886:	4b07      	ldr	r3, [pc, #28]	@ (80038a4 <run_fsm+0x1f4>)
 8003888:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800388c:	3301      	adds	r3, #1
 800388e:	4a05      	ldr	r2, [pc, #20]	@ (80038a4 <run_fsm+0x1f4>)
 8003890:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
			 break;
 8003894:	e000      	b.n	8003898 <run_fsm+0x1e8>
			 break;
 8003896:	bf00      	nop
	 }

 }
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	bd90      	pop	{r4, r7, pc}
 80038a0:	20000e60 	.word	0x20000e60
 80038a4:	2000085c 	.word	0x2000085c
 80038a8:	20000b78 	.word	0x20000b78
 80038ac:	20000448 	.word	0x20000448
 80038b0:	47800000 	.word	0x47800000
 80038b4:	40c90fdb 	.word	0x40c90fdb
 80038b8:	08010d08 	.word	0x08010d08
 80038bc:	20000848 	.word	0x20000848

080038c0 <fsm_enter_state>:

 void fsm_enter_state(FSMStruct * fsmstate){
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
	 /* Called when entering a new state
	  * Do necessary setup   */

		switch(fsmstate->state){
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b06      	cmp	r3, #6
 80038ce:	f200 808c 	bhi.w	80039ea <fsm_enter_state+0x12a>
 80038d2:	a201      	add	r2, pc, #4	@ (adr r2, 80038d8 <fsm_enter_state+0x18>)
 80038d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d8:	080038f5 	.word	0x080038f5
 80038dc:	080039b5 	.word	0x080039b5
 80038e0:	08003929 	.word	0x08003929
 80038e4:	080039eb 	.word	0x080039eb
 80038e8:	08003905 	.word	0x08003905
 80038ec:	08003959 	.word	0x08003959
 80038f0:	08003919 	.word	0x08003919
			case MENU_MODE:
				if (fsmstate->print_uart_msg){
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	791b      	ldrb	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d073      	beq.n	80039e4 <fsm_enter_state+0x124>
					printf("\r\nEntering Main Menu\r\n");
 80038fc:	483d      	ldr	r0, [pc, #244]	@ (80039f4 <fsm_enter_state+0x134>)
 80038fe:	f00a f86b 	bl	800d9d8 <puts>
				}
				break;
 8003902:	e06f      	b.n	80039e4 <fsm_enter_state+0x124>
			case SETUP_MODE:
				if (fsmstate->print_uart_msg){
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	791b      	ldrb	r3, [r3, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <fsm_enter_state+0x52>
					printf("\r\nEntering Setup\r\n");
 800390c:	483a      	ldr	r0, [pc, #232]	@ (80039f8 <fsm_enter_state+0x138>)
 800390e:	f00a f863 	bl	800d9d8 <puts>
				}
				enter_setup_state();
 8003912:	f000 fa1f 	bl	8003d54 <enter_setup_state>
				break;
 8003916:	e068      	b.n	80039ea <fsm_enter_state+0x12a>
			case ENCODER_MODE:
				if (fsmstate->print_uart_msg){
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	791b      	ldrb	r3, [r3, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d063      	beq.n	80039e8 <fsm_enter_state+0x128>
					printf("\r\nEntering Encoder Mode\r\n");
 8003920:	4836      	ldr	r0, [pc, #216]	@ (80039fc <fsm_enter_state+0x13c>)
 8003922:	f00a f859 	bl	800d9d8 <puts>
				}
				break;
 8003926:	e05f      	b.n	80039e8 <fsm_enter_state+0x128>
			case MOTOR_MODE:
				if (fsmstate->print_uart_msg){
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	791b      	ldrb	r3, [r3, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <fsm_enter_state+0x76>
					printf("\r\nEntering Motor Mode\r\n");
 8003930:	4833      	ldr	r0, [pc, #204]	@ (8003a00 <fsm_enter_state+0x140>)
 8003932:	f00a f851 	bl	800d9d8 <puts>
				}
				controller.kp = 5.0f ;
 8003936:	4b33      	ldr	r3, [pc, #204]	@ (8003a04 <fsm_enter_state+0x144>)
 8003938:	4a33      	ldr	r2, [pc, #204]	@ (8003a08 <fsm_enter_state+0x148>)
 800393a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
				controller.ki = 0.0f ;
 800393e:	4b31      	ldr	r3, [pc, #196]	@ (8003a04 <fsm_enter_state+0x144>)
 8003940:	f04f 0200 	mov.w	r2, #0
 8003944:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
				controller.kd = 1.0f ;
 8003948:	4b2e      	ldr	r3, [pc, #184]	@ (8003a04 <fsm_enter_state+0x144>)
 800394a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800394e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
				enter_motor_mode();
 8003952:	f000 fc47 	bl	80041e4 <enter_motor_mode>
				break;
 8003956:	e048      	b.n	80039ea <fsm_enter_state+0x12a>
			case ENCODER_CALIBRATE:
				if (fsmstate->print_uart_msg){
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	791b      	ldrb	r3, [r3, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <fsm_enter_state+0xa6>
					printf("\r\nEntering Encoder Calibration Mode\r\n");
 8003960:	482a      	ldr	r0, [pc, #168]	@ (8003a0c <fsm_enter_state+0x14c>)
 8003962:	f00a f839 	bl	800d9d8 <puts>
				}
				/* zero out all calibrations before starting */

				comm_encoder_cal.done_cal = 0;
 8003966:	4b2a      	ldr	r3, [pc, #168]	@ (8003a10 <fsm_enter_state+0x150>)
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
				comm_encoder_cal.done_ordering = 0;
 800396e:	4b28      	ldr	r3, [pc, #160]	@ (8003a10 <fsm_enter_state+0x150>)
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
				comm_encoder_cal.started = 0;
 8003976:	4b26      	ldr	r3, [pc, #152]	@ (8003a10 <fsm_enter_state+0x150>)
 8003978:	2200      	movs	r2, #0
 800397a:	741a      	strb	r2, [r3, #16]
				comm_encoder.e_zero = 0;
 800397c:	4b25      	ldr	r3, [pc, #148]	@ (8003a14 <fsm_enter_state+0x154>)
 800397e:	2200      	movs	r2, #0
 8003980:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 8003984:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003988:	2100      	movs	r1, #0
 800398a:	4823      	ldr	r0, [pc, #140]	@ (8003a18 <fsm_enter_state+0x158>)
 800398c:	f00a f926 	bl	800dbdc <memset>
				drv_enable_gd(drv);
 8003990:	4b22      	ldr	r3, [pc, #136]	@ (8003a1c <fsm_enter_state+0x15c>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	4611      	mov	r1, r2
 8003996:	889a      	ldrh	r2, [r3, #4]
 8003998:	2300      	movs	r3, #0
 800399a:	f362 030f 	bfi	r3, r2, #0, #16
 800399e:	4608      	mov	r0, r1
 80039a0:	4619      	mov	r1, r3
 80039a2:	f7fe fd38 	bl	8002416 <drv_enable_gd>
				GPIO_ENABLE;
 80039a6:	2201      	movs	r2, #1
 80039a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80039ac:	481c      	ldr	r0, [pc, #112]	@ (8003a20 <fsm_enter_state+0x160>)
 80039ae:	f005 fb0d 	bl	8008fcc <HAL_GPIO_WritePin>
				break;
 80039b2:	e01a      	b.n	80039ea <fsm_enter_state+0x12a>
			case HALL_CALIBRATE:
				if (fsmstate->print_uart_msg){
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	791b      	ldrb	r3, [r3, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <fsm_enter_state+0x102>
					printf("\r\nEntering Hall Calibration Mode\r\n");
 80039bc:	4819      	ldr	r0, [pc, #100]	@ (8003a24 <fsm_enter_state+0x164>)
 80039be:	f00a f80b 	bl	800d9d8 <puts>
				}
				controller.kp = 50.0f ;
 80039c2:	4b10      	ldr	r3, [pc, #64]	@ (8003a04 <fsm_enter_state+0x144>)
 80039c4:	4a18      	ldr	r2, [pc, #96]	@ (8003a28 <fsm_enter_state+0x168>)
 80039c6:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
				controller.ki = 0.0f ;
 80039ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003a04 <fsm_enter_state+0x144>)
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
				controller.kd = 1.5f ;
 80039d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003a04 <fsm_enter_state+0x144>)
 80039d6:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 80039da:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
				enter_motor_mode();
 80039de:	f000 fc01 	bl	80041e4 <enter_motor_mode>
				break;
 80039e2:	e002      	b.n	80039ea <fsm_enter_state+0x12a>
				break;
 80039e4:	bf00      	nop
 80039e6:	e000      	b.n	80039ea <fsm_enter_state+0x12a>
				break;
 80039e8:	bf00      	nop

		}
 }
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	08010d1c 	.word	0x08010d1c
 80039f8:	08010d34 	.word	0x08010d34
 80039fc:	08010d48 	.word	0x08010d48
 8003a00:	08010d64 	.word	0x08010d64
 8003a04:	2000085c 	.word	0x2000085c
 8003a08:	40a00000 	.word	0x40a00000
 8003a0c:	08010d7c 	.word	0x08010d7c
 8003a10:	20000e60 	.word	0x20000e60
 8003a14:	20000b78 	.word	0x20000b78
 8003a18:	20000c54 	.word	0x20000c54
 8003a1c:	20000e58 	.word	0x20000e58
 8003a20:	40020000 	.word	0x40020000
 8003a24:	08010da4 	.word	0x08010da4
 8003a28:	42480000 	.word	0x42480000

08003a2c <fsm_exit_state>:

 void fsm_exit_state(FSMStruct * fsmstate){
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
	 /* Called when exiting the current state
	  * Do necessary cleanup  */

		switch(fsmstate->state){
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b06      	cmp	r3, #6
 8003a3a:	f200 8096 	bhi.w	8003b6a <fsm_exit_state+0x13e>
 8003a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a44 <fsm_exit_state+0x18>)
 8003a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a44:	08003a61 	.word	0x08003a61
 8003a48:	08003b29 	.word	0x08003b29
 8003a4c:	08003aa3 	.word	0x08003aa3
 8003a50:	08003b6b 	.word	0x08003b6b
 8003a54:	08003a77 	.word	0x08003a77
 8003a58:	08003af1 	.word	0x08003af1
 8003a5c:	08003a8d 	.word	0x08003a8d
			case MENU_MODE:
				if (fsmstate->print_uart_msg){
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	791b      	ldrb	r3, [r3, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <fsm_exit_state+0x42>
					printf("\r\nLeaving Main Menu\r\n");
 8003a68:	4842      	ldr	r0, [pc, #264]	@ (8003b74 <fsm_exit_state+0x148>)
 8003a6a:	f009 ffb5 	bl	800d9d8 <puts>
				}
				fsmstate->ready = 1;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	70da      	strb	r2, [r3, #3]
				break;
 8003a74:	e079      	b.n	8003b6a <fsm_exit_state+0x13e>
			case SETUP_MODE:
				if (fsmstate->print_uart_msg){
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	791b      	ldrb	r3, [r3, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <fsm_exit_state+0x58>
					printf("\r\nLeaving Setup Menu\r\n");
 8003a7e:	483e      	ldr	r0, [pc, #248]	@ (8003b78 <fsm_exit_state+0x14c>)
 8003a80:	f009 ffaa 	bl	800d9d8 <puts>
				}
				fsmstate->ready = 1;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	70da      	strb	r2, [r3, #3]
				break;
 8003a8a:	e06e      	b.n	8003b6a <fsm_exit_state+0x13e>
			case ENCODER_MODE:
				if (fsmstate->print_uart_msg){
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	791b      	ldrb	r3, [r3, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <fsm_exit_state+0x6e>
					printf("\r\nLeaving Encoder Mode\r\n");
 8003a94:	4839      	ldr	r0, [pc, #228]	@ (8003b7c <fsm_exit_state+0x150>)
 8003a96:	f009 ff9f 	bl	800d9d8 <puts>
				}
				fsmstate->ready = 1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	70da      	strb	r2, [r3, #3]
				break;
 8003aa0:	e063      	b.n	8003b6a <fsm_exit_state+0x13e>
			case MOTOR_MODE:
				/* Don't stop commutating if there are high currents or FW happening */
				//if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
				if (fsmstate->print_uart_msg){
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	791b      	ldrb	r3, [r3, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <fsm_exit_state+0x84>
					printf("\r\nLeaving Motor Mode\r\n");
 8003aaa:	4835      	ldr	r0, [pc, #212]	@ (8003b80 <fsm_exit_state+0x154>)
 8003aac:	f009 ff94 	bl	800d9d8 <puts>
				}
				fsmstate->ready = 1;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	70da      	strb	r2, [r3, #3]
				drv_disable_gd(drv);
 8003ab6:	4b33      	ldr	r3, [pc, #204]	@ (8003b84 <fsm_exit_state+0x158>)
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	4611      	mov	r1, r2
 8003abc:	889a      	ldrh	r2, [r3, #4]
 8003abe:	2300      	movs	r3, #0
 8003ac0:	f362 030f 	bfi	r3, r2, #0, #16
 8003ac4:	4608      	mov	r0, r1
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	f7fe fcbf 	bl	800244a <drv_disable_gd>
				reset_foc(&controller);
 8003acc:	482e      	ldr	r0, [pc, #184]	@ (8003b88 <fsm_exit_state+0x15c>)
 8003ace:	f7ff f98b 	bl	8002de8 <reset_foc>
				GPIO_DISABLE;
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003ad8:	482c      	ldr	r0, [pc, #176]	@ (8003b8c <fsm_exit_state+0x160>)
 8003ada:	f005 fa77 	bl	8008fcc <HAL_GPIO_WritePin>
				LED_LOW;
 8003ade:	2200      	movs	r2, #0
 8003ae0:	2120      	movs	r1, #32
 8003ae2:	482b      	ldr	r0, [pc, #172]	@ (8003b90 <fsm_exit_state+0x164>)
 8003ae4:	f005 fa72 	bl	8008fcc <HAL_GPIO_WritePin>
				//}
				zero_commands(&controller);		// Set commands to zero
 8003ae8:	4827      	ldr	r0, [pc, #156]	@ (8003b88 <fsm_exit_state+0x15c>)
 8003aea:	f7ff fdb3 	bl	8003654 <zero_commands>
				break;
 8003aee:	e03c      	b.n	8003b6a <fsm_exit_state+0x13e>
			case ENCODER_CALIBRATE:
				if (fsmstate->print_uart_msg){
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	791b      	ldrb	r3, [r3, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <fsm_exit_state+0xd2>
					printf("\r\nExiting Encoder Calibration Mode\r\n");
 8003af8:	4826      	ldr	r0, [pc, #152]	@ (8003b94 <fsm_exit_state+0x168>)
 8003afa:	f009 ff6d 	bl	800d9d8 <puts>
				}
				GPIO_DISABLE;
 8003afe:	2200      	movs	r2, #0
 8003b00:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003b04:	4821      	ldr	r0, [pc, #132]	@ (8003b8c <fsm_exit_state+0x160>)
 8003b06:	f005 fa61 	bl	8008fcc <HAL_GPIO_WritePin>
				drv_disable_gd(drv);
 8003b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003b84 <fsm_exit_state+0x158>)
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	4611      	mov	r1, r2
 8003b10:	889a      	ldrh	r2, [r3, #4]
 8003b12:	2300      	movs	r3, #0
 8003b14:	f362 030f 	bfi	r3, r2, #0, #16
 8003b18:	4608      	mov	r0, r1
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	f7fe fc95 	bl	800244a <drv_disable_gd>
				//free(error_array);
				//free(lut_array);

				fsmstate->ready = 1;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	70da      	strb	r2, [r3, #3]
				break;
 8003b26:	e020      	b.n	8003b6a <fsm_exit_state+0x13e>
			case HALL_CALIBRATE:
				if (fsmstate->print_uart_msg){
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	791b      	ldrb	r3, [r3, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <fsm_exit_state+0x10a>
					printf("\r\nExiting Hall Calibration Mode\r\n");
 8003b30:	4819      	ldr	r0, [pc, #100]	@ (8003b98 <fsm_exit_state+0x16c>)
 8003b32:	f009 ff51 	bl	800d9d8 <puts>
				}
				GPIO_DISABLE;
 8003b36:	2200      	movs	r2, #0
 8003b38:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003b3c:	4813      	ldr	r0, [pc, #76]	@ (8003b8c <fsm_exit_state+0x160>)
 8003b3e:	f005 fa45 	bl	8008fcc <HAL_GPIO_WritePin>
				LED_LOW;
 8003b42:	2200      	movs	r2, #0
 8003b44:	2120      	movs	r1, #32
 8003b46:	4812      	ldr	r0, [pc, #72]	@ (8003b90 <fsm_exit_state+0x164>)
 8003b48:	f005 fa40 	bl	8008fcc <HAL_GPIO_WritePin>
				drv_disable_gd(drv);
 8003b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b84 <fsm_exit_state+0x158>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	4611      	mov	r1, r2
 8003b52:	889a      	ldrh	r2, [r3, #4]
 8003b54:	2300      	movs	r3, #0
 8003b56:	f362 030f 	bfi	r3, r2, #0, #16
 8003b5a:	4608      	mov	r0, r1
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	f7fe fc74 	bl	800244a <drv_disable_gd>
				fsmstate->ready = 1;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	70da      	strb	r2, [r3, #3]
				break;
 8003b68:	bf00      	nop
		}

 }
 8003b6a:	bf00      	nop
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	08010dc8 	.word	0x08010dc8
 8003b78:	08010de0 	.word	0x08010de0
 8003b7c:	08010df8 	.word	0x08010df8
 8003b80:	08010e10 	.word	0x08010e10
 8003b84:	20000e58 	.word	0x20000e58
 8003b88:	2000085c 	.word	0x2000085c
 8003b8c:	40020000 	.word	0x40020000
 8003b90:	40020800 	.word	0x40020800
 8003b94:	08010e28 	.word	0x08010e28
 8003b98:	08010e4c 	.word	0x08010e4c

08003b9c <update_fsm>:

 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
	if(fsm_input == MENU_CMD){	// escape to exit to rest mode
 8003ba8:	78fb      	ldrb	r3, [r7, #3]
 8003baa:	2b1b      	cmp	r3, #27
 8003bac:	d10d      	bne.n	8003bca <update_fsm+0x2e>
		fsmstate->next_state = MENU_MODE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	705a      	strb	r2, [r3, #1]
		fsmstate->ready = 0;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	70da      	strb	r2, [r3, #3]
		if (fsmstate->print_uart_msg){
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	791b      	ldrb	r3, [r3, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 8097 	beq.w	8003cf2 <update_fsm+0x156>
			enter_menu_state();
 8003bc4:	f000 f89a 	bl	8003cfc <enter_menu_state>
		}
		return;
 8003bc8:	e093      	b.n	8003cf2 <update_fsm+0x156>
	}
	switch(fsmstate->state){
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b06      	cmp	r3, #6
 8003bd0:	f200 8090 	bhi.w	8003cf4 <update_fsm+0x158>
 8003bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bdc <update_fsm+0x40>)
 8003bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bda:	bf00      	nop
 8003bdc:	08003bf9 	.word	0x08003bf9
 8003be0:	08003cf5 	.word	0x08003cf5
 8003be4:	08003cf5 	.word	0x08003cf5
 8003be8:	08003cf5 	.word	0x08003cf5
 8003bec:	08003cb9 	.word	0x08003cb9
 8003bf0:	08003cf5 	.word	0x08003cf5
 8003bf4:	08003cf5 	.word	0x08003cf5
		case MENU_MODE:
			switch (fsm_input){
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	3b63      	subs	r3, #99	@ 0x63
 8003bfc:	2b17      	cmp	r3, #23
 8003bfe:	d859      	bhi.n	8003cb4 <update_fsm+0x118>
 8003c00:	a201      	add	r2, pc, #4	@ (adr r2, 8003c08 <update_fsm+0x6c>)
 8003c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c06:	bf00      	nop
 8003c08:	08003c69 	.word	0x08003c69
 8003c0c:	08003cb5 	.word	0x08003cb5
 8003c10:	08003c85 	.word	0x08003c85
 8003c14:	08003cb5 	.word	0x08003cb5
 8003c18:	08003cb5 	.word	0x08003cb5
 8003c1c:	08003ca7 	.word	0x08003ca7
 8003c20:	08003cb5 	.word	0x08003cb5
 8003c24:	08003cb5 	.word	0x08003cb5
 8003c28:	08003cb5 	.word	0x08003cb5
 8003c2c:	08003cb5 	.word	0x08003cb5
 8003c30:	08003c77 	.word	0x08003c77
 8003c34:	08003cb5 	.word	0x08003cb5
 8003c38:	08003cb5 	.word	0x08003cb5
 8003c3c:	08003cb5 	.word	0x08003cb5
 8003c40:	08003cb5 	.word	0x08003cb5
 8003c44:	08003cb5 	.word	0x08003cb5
 8003c48:	08003c93 	.word	0x08003c93
 8003c4c:	08003cb5 	.word	0x08003cb5
 8003c50:	08003cb5 	.word	0x08003cb5
 8003c54:	08003cb5 	.word	0x08003cb5
 8003c58:	08003cb5 	.word	0x08003cb5
 8003c5c:	08003cb5 	.word	0x08003cb5
 8003c60:	08003cb5 	.word	0x08003cb5
 8003c64:	08003ca1 	.word	0x08003ca1
				case ENCODER_CAL_CMD:
					fsmstate->next_state = ENCODER_CALIBRATE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2205      	movs	r2, #5
 8003c6c:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	70da      	strb	r2, [r3, #3]
					break;
 8003c74:	e01f      	b.n	8003cb6 <update_fsm+0x11a>
				case MOTOR_CMD:
					fsmstate->next_state = MOTOR_MODE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2202      	movs	r2, #2
 8003c7a:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	70da      	strb	r2, [r3, #3]
					break;
 8003c82:	e018      	b.n	8003cb6 <update_fsm+0x11a>
				case ENCODER_CMD:
					fsmstate->next_state = ENCODER_MODE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2206      	movs	r2, #6
 8003c88:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	70da      	strb	r2, [r3, #3]
					break;
 8003c90:	e011      	b.n	8003cb6 <update_fsm+0x11a>
				case SETUP_CMD:
					fsmstate->next_state = SETUP_MODE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2204      	movs	r2, #4
 8003c96:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	70da      	strb	r2, [r3, #3]
					break;
 8003c9e:	e00a      	b.n	8003cb6 <update_fsm+0x11a>
				case ZERO_CMD:
					encoder_set_zero();
 8003ca0:	f000 fafc 	bl	800429c <encoder_set_zero>
					break;
 8003ca4:	e007      	b.n	8003cb6 <update_fsm+0x11a>
				case HALL_CAL_CMD:
					fsmstate->next_state = HALL_CALIBRATE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	70da      	strb	r2, [r3, #3]
					break;
 8003cb2:	e000      	b.n	8003cb6 <update_fsm+0x11a>
				default:
					break;
 8003cb4:	bf00      	nop
				}
			break;
 8003cb6:	e01d      	b.n	8003cf4 <update_fsm+0x158>
		case SETUP_MODE:
			if(fsm_input == ENTER_CMD){
 8003cb8:	78fb      	ldrb	r3, [r7, #3]
 8003cba:	2b0d      	cmp	r3, #13
 8003cbc:	d103      	bne.n	8003cc6 <update_fsm+0x12a>
				process_user_input(fsmstate);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fa34 	bl	800412c <process_user_input>
				break;
 8003cc4:	e016      	b.n	8003cf4 <update_fsm+0x158>
			}
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	7b5b      	ldrb	r3, [r3, #13]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d103      	bne.n	8003cd6 <update_fsm+0x13a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	78fa      	ldrb	r2, [r7, #3]
 8003cd2:	739a      	strb	r2, [r3, #14]
 8003cd4:	e006      	b.n	8003ce4 <update_fsm+0x148>
			else{
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	7b5b      	ldrb	r3, [r3, #13]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	4413      	add	r3, r2
 8003ce0:	78fa      	ldrb	r2, [r7, #3]
 8003ce2:	715a      	strb	r2, [r3, #5]
				//fsmstate->bytecount = fsmstate->bytecount%(sizeof(fsmstate->cmd_buff)/sizeof(fsmstate->cmd_buff[0])); // reset when buffer is full
			}
			fsmstate->bytecount++;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	7b5b      	ldrb	r3, [r3, #13]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	735a      	strb	r2, [r3, #13]
			/* If enter is typed, process user input */

			break;
 8003cf0:	e000      	b.n	8003cf4 <update_fsm+0x158>
		return;
 8003cf2:	bf00      	nop
			break;
		case MOTOR_MODE:
			break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop

08003cfc <enter_menu_state>:


 void enter_menu_state(void){
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r");
 8003d00:	480c      	ldr	r0, [pc, #48]	@ (8003d34 <enter_menu_state+0x38>)
 8003d02:	f009 fe01 	bl	800d908 <iprintf>
	    printf(" Commands:\n\r");
 8003d06:	480c      	ldr	r0, [pc, #48]	@ (8003d38 <enter_menu_state+0x3c>)
 8003d08:	f009 fdfe 	bl	800d908 <iprintf>
	    printf(" m - Motor Mode\n\r");
 8003d0c:	480b      	ldr	r0, [pc, #44]	@ (8003d3c <enter_menu_state+0x40>)
 8003d0e:	f009 fdfb 	bl	800d908 <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 8003d12:	480b      	ldr	r0, [pc, #44]	@ (8003d40 <enter_menu_state+0x44>)
 8003d14:	f009 fdf8 	bl	800d908 <iprintf>
	    printf(" s - Setup\n\r");
 8003d18:	480a      	ldr	r0, [pc, #40]	@ (8003d44 <enter_menu_state+0x48>)
 8003d1a:	f009 fdf5 	bl	800d908 <iprintf>
	    printf(" e - Display Encoder\n\r");
 8003d1e:	480a      	ldr	r0, [pc, #40]	@ (8003d48 <enter_menu_state+0x4c>)
 8003d20:	f009 fdf2 	bl	800d908 <iprintf>
	    printf(" z - Set Zero Position\n\r");
 8003d24:	4809      	ldr	r0, [pc, #36]	@ (8003d4c <enter_menu_state+0x50>)
 8003d26:	f009 fdef 	bl	800d908 <iprintf>
	    printf(" esc - Exit to Menu\n\r");
 8003d2a:	4809      	ldr	r0, [pc, #36]	@ (8003d50 <enter_menu_state+0x54>)
 8003d2c:	f009 fdec 	bl	800d908 <iprintf>

	    //gpio.led->write(0);
 }
 8003d30:	bf00      	nop
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	08010e70 	.word	0x08010e70
 8003d38:	08010e74 	.word	0x08010e74
 8003d3c:	08010e84 	.word	0x08010e84
 8003d40:	08010e98 	.word	0x08010e98
 8003d44:	08010eb4 	.word	0x08010eb4
 8003d48:	08010ec4 	.word	0x08010ec4
 8003d4c:	08010edc 	.word	0x08010edc
 8003d50:	08010ef8 	.word	0x08010ef8

08003d54 <enter_setup_state>:

 void enter_setup_state(void){
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af04      	add	r7, sp, #16
	    printf("\r\n Configuration Options \n\r");
 8003d5a:	4899      	ldr	r0, [pc, #612]	@ (8003fc0 <enter_setup_state+0x26c>)
 8003d5c:	f009 fdd4 	bl	800d908 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 8003d60:	4b98      	ldr	r3, [pc, #608]	@ (8003fc4 <enter_setup_state+0x270>)
 8003d62:	9301      	str	r3, [sp, #4]
 8003d64:	4b98      	ldr	r3, [pc, #608]	@ (8003fc8 <enter_setup_state+0x274>)
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	4b98      	ldr	r3, [pc, #608]	@ (8003fcc <enter_setup_state+0x278>)
 8003d6a:	4a99      	ldr	r2, [pc, #612]	@ (8003fd0 <enter_setup_state+0x27c>)
 8003d6c:	4999      	ldr	r1, [pc, #612]	@ (8003fd4 <enter_setup_state+0x280>)
 8003d6e:	489a      	ldr	r0, [pc, #616]	@ (8003fd8 <enter_setup_state+0x284>)
 8003d70:	f009 fdca 	bl	800d908 <iprintf>
	    printf("\r\n Motor:\r\n");
 8003d74:	4899      	ldr	r0, [pc, #612]	@ (8003fdc <enter_setup_state+0x288>)
 8003d76:	f009 fe2f 	bl	800d9d8 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio",                                "0",   "-",      GR);
 8003d7a:	4b99      	ldr	r3, [pc, #612]	@ (8003fe0 <enter_setup_state+0x28c>)
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fc fc12 	bl	80005a8 <__aeabi_f2d>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d8c:	4b95      	ldr	r3, [pc, #596]	@ (8003fe4 <enter_setup_state+0x290>)
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	4b95      	ldr	r3, [pc, #596]	@ (8003fe8 <enter_setup_state+0x294>)
 8003d92:	4a96      	ldr	r2, [pc, #600]	@ (8003fec <enter_setup_state+0x298>)
 8003d94:	4996      	ldr	r1, [pc, #600]	@ (8003ff0 <enter_setup_state+0x29c>)
 8003d96:	4897      	ldr	r0, [pc, #604]	@ (8003ff4 <enter_setup_state+0x2a0>)
 8003d98:	f009 fdb6 	bl	800d908 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "t", "Torque Constant (N-m/A)",                   "0",   "-",      KT);
 8003d9c:	4b90      	ldr	r3, [pc, #576]	@ (8003fe0 <enter_setup_state+0x28c>)
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fc fc01 	bl	80005a8 <__aeabi_f2d>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003dae:	4b8d      	ldr	r3, [pc, #564]	@ (8003fe4 <enter_setup_state+0x290>)
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	4b8d      	ldr	r3, [pc, #564]	@ (8003fe8 <enter_setup_state+0x294>)
 8003db4:	4a90      	ldr	r2, [pc, #576]	@ (8003ff8 <enter_setup_state+0x2a4>)
 8003db6:	4991      	ldr	r1, [pc, #580]	@ (8003ffc <enter_setup_state+0x2a8>)
 8003db8:	4891      	ldr	r0, [pc, #580]	@ (8004000 <enter_setup_state+0x2ac>)
 8003dba:	f009 fda5 	bl	800d908 <iprintf>
	    printf("\r\n Control:\r\n");
 8003dbe:	4891      	ldr	r0, [pc, #580]	@ (8004004 <enter_setup_state+0x2b0>)
 8003dc0:	f009 fe0a 	bl	800d9d8 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "b", "Current Bandwidth (Hz)",                    "100", "2000",   I_BW);
 8003dc4:	4b86      	ldr	r3, [pc, #536]	@ (8003fe0 <enter_setup_state+0x28c>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fc fbed 	bl	80005a8 <__aeabi_f2d>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003dd6:	4b8c      	ldr	r3, [pc, #560]	@ (8004008 <enter_setup_state+0x2b4>)
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	4b8c      	ldr	r3, [pc, #560]	@ (800400c <enter_setup_state+0x2b8>)
 8003ddc:	4a8c      	ldr	r2, [pc, #560]	@ (8004010 <enter_setup_state+0x2bc>)
 8003dde:	498d      	ldr	r1, [pc, #564]	@ (8004014 <enter_setup_state+0x2c0>)
 8003de0:	4884      	ldr	r0, [pc, #528]	@ (8003ff4 <enter_setup_state+0x2a0>)
 8003de2:	f009 fd91 	bl	800d908 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "l", "Current Limit (A)",                         "0.0", "75.0",   I_MAX);
 8003de6:	4b7e      	ldr	r3, [pc, #504]	@ (8003fe0 <enter_setup_state+0x28c>)
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fc fbdc 	bl	80005a8 <__aeabi_f2d>
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003df8:	4b87      	ldr	r3, [pc, #540]	@ (8004018 <enter_setup_state+0x2c4>)
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	4b87      	ldr	r3, [pc, #540]	@ (800401c <enter_setup_state+0x2c8>)
 8003dfe:	4a88      	ldr	r2, [pc, #544]	@ (8004020 <enter_setup_state+0x2cc>)
 8003e00:	4988      	ldr	r1, [pc, #544]	@ (8004024 <enter_setup_state+0x2d0>)
 8003e02:	487c      	ldr	r0, [pc, #496]	@ (8003ff4 <enter_setup_state+0x2a0>)
 8003e04:	f009 fd80 	bl	800d908 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "p", "Max Position Setpoint (rad)",               "-",   "-",      P_MAX);
 8003e08:	4b75      	ldr	r3, [pc, #468]	@ (8003fe0 <enter_setup_state+0x28c>)
 8003e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fc fbcb 	bl	80005a8 <__aeabi_f2d>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e1a:	4b72      	ldr	r3, [pc, #456]	@ (8003fe4 <enter_setup_state+0x290>)
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	4b71      	ldr	r3, [pc, #452]	@ (8003fe4 <enter_setup_state+0x290>)
 8003e20:	4a81      	ldr	r2, [pc, #516]	@ (8004028 <enter_setup_state+0x2d4>)
 8003e22:	4982      	ldr	r1, [pc, #520]	@ (800402c <enter_setup_state+0x2d8>)
 8003e24:	4873      	ldr	r0, [pc, #460]	@ (8003ff4 <enter_setup_state+0x2a0>)
 8003e26:	f009 fd6f 	bl	800d908 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "v", "Max Velocity Setpoint (rad)/s",             "-",   "-",      V_MAX);
 8003e2a:	4b6d      	ldr	r3, [pc, #436]	@ (8003fe0 <enter_setup_state+0x28c>)
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fc fbba 	bl	80005a8 <__aeabi_f2d>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e3c:	4b69      	ldr	r3, [pc, #420]	@ (8003fe4 <enter_setup_state+0x290>)
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	4b68      	ldr	r3, [pc, #416]	@ (8003fe4 <enter_setup_state+0x290>)
 8003e42:	4a7b      	ldr	r2, [pc, #492]	@ (8004030 <enter_setup_state+0x2dc>)
 8003e44:	497b      	ldr	r1, [pc, #492]	@ (8004034 <enter_setup_state+0x2e0>)
 8003e46:	486b      	ldr	r0, [pc, #428]	@ (8003ff4 <enter_setup_state+0x2a0>)
 8003e48:	f009 fd5e 	bl	800d908 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "T", "Max Torque Setpoint (rad)/s",               "-",   "-",      T_MAX);
 8003e4c:	4b64      	ldr	r3, [pc, #400]	@ (8003fe0 <enter_setup_state+0x28c>)
 8003e4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fc fba9 	bl	80005a8 <__aeabi_f2d>
 8003e56:	4602      	mov	r2, r0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e5e:	4b61      	ldr	r3, [pc, #388]	@ (8003fe4 <enter_setup_state+0x290>)
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	4b60      	ldr	r3, [pc, #384]	@ (8003fe4 <enter_setup_state+0x290>)
 8003e64:	4a74      	ldr	r2, [pc, #464]	@ (8004038 <enter_setup_state+0x2e4>)
 8003e66:	4975      	ldr	r1, [pc, #468]	@ (800403c <enter_setup_state+0x2e8>)
 8003e68:	4862      	ldr	r0, [pc, #392]	@ (8003ff4 <enter_setup_state+0x2a0>)
 8003e6a:	f009 fd4d 	bl	800d908 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "k", "Max Gain for Position (N-m/rad)",           "0.0", "1000.0", KP_MAX);
 8003e6e:	4b5c      	ldr	r3, [pc, #368]	@ (8003fe0 <enter_setup_state+0x28c>)
 8003e70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fc fb98 	bl	80005a8 <__aeabi_f2d>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e80:	4b6f      	ldr	r3, [pc, #444]	@ (8004040 <enter_setup_state+0x2ec>)
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	4b65      	ldr	r3, [pc, #404]	@ (800401c <enter_setup_state+0x2c8>)
 8003e86:	4a6f      	ldr	r2, [pc, #444]	@ (8004044 <enter_setup_state+0x2f0>)
 8003e88:	496f      	ldr	r1, [pc, #444]	@ (8004048 <enter_setup_state+0x2f4>)
 8003e8a:	485a      	ldr	r0, [pc, #360]	@ (8003ff4 <enter_setup_state+0x2a0>)
 8003e8c:	f009 fd3c 	bl	800d908 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "i", "Max Integral Gain for Position (N-m*s/rad)","0.0", "10.0",   KI_MAX);
 8003e90:	4b53      	ldr	r3, [pc, #332]	@ (8003fe0 <enter_setup_state+0x28c>)
 8003e92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fc fb87 	bl	80005a8 <__aeabi_f2d>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ea2:	4b6a      	ldr	r3, [pc, #424]	@ (800404c <enter_setup_state+0x2f8>)
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	4b5d      	ldr	r3, [pc, #372]	@ (800401c <enter_setup_state+0x2c8>)
 8003ea8:	4a69      	ldr	r2, [pc, #420]	@ (8004050 <enter_setup_state+0x2fc>)
 8003eaa:	496a      	ldr	r1, [pc, #424]	@ (8004054 <enter_setup_state+0x300>)
 8003eac:	4851      	ldr	r0, [pc, #324]	@ (8003ff4 <enter_setup_state+0x2a0>)
 8003eae:	f009 fd2b 	bl	800d908 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "d", "Max Gain for Velocity (N-m/rad/s)",         "0.0", "5.0",    KD_MAX);
 8003eb2:	4b4b      	ldr	r3, [pc, #300]	@ (8003fe0 <enter_setup_state+0x28c>)
 8003eb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fc fb76 	bl	80005a8 <__aeabi_f2d>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ec4:	4b64      	ldr	r3, [pc, #400]	@ (8004058 <enter_setup_state+0x304>)
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	4b54      	ldr	r3, [pc, #336]	@ (800401c <enter_setup_state+0x2c8>)
 8003eca:	4a64      	ldr	r2, [pc, #400]	@ (800405c <enter_setup_state+0x308>)
 8003ecc:	4964      	ldr	r1, [pc, #400]	@ (8004060 <enter_setup_state+0x30c>)
 8003ece:	4849      	ldr	r0, [pc, #292]	@ (8003ff4 <enter_setup_state+0x2a0>)
 8003ed0:	f009 fd1a 	bl	800d908 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "f", "FW Current Limit (A)",                      "0.0", "33.0",   I_FW_MAX);
 8003ed4:	4b42      	ldr	r3, [pc, #264]	@ (8003fe0 <enter_setup_state+0x28c>)
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7fc fb65 	bl	80005a8 <__aeabi_f2d>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ee6:	4b5f      	ldr	r3, [pc, #380]	@ (8004064 <enter_setup_state+0x310>)
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	4b4c      	ldr	r3, [pc, #304]	@ (800401c <enter_setup_state+0x2c8>)
 8003eec:	4a5e      	ldr	r2, [pc, #376]	@ (8004068 <enter_setup_state+0x314>)
 8003eee:	495f      	ldr	r1, [pc, #380]	@ (800406c <enter_setup_state+0x318>)
 8003ef0:	4840      	ldr	r0, [pc, #256]	@ (8003ff4 <enter_setup_state+0x2a0>)
 8003ef2:	f009 fd09 	bl	800d908 <iprintf>
//	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)",                "0",   "150",    TEMP_MAX);
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "c", "Continuous Current (A)",                    "0.0", "40.0",   I_MAX_CONT);
 8003ef6:	4b3a      	ldr	r3, [pc, #232]	@ (8003fe0 <enter_setup_state+0x28c>)
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fc fb54 	bl	80005a8 <__aeabi_f2d>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f08:	4b59      	ldr	r3, [pc, #356]	@ (8004070 <enter_setup_state+0x31c>)
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	4b43      	ldr	r3, [pc, #268]	@ (800401c <enter_setup_state+0x2c8>)
 8003f0e:	4a59      	ldr	r2, [pc, #356]	@ (8004074 <enter_setup_state+0x320>)
 8003f10:	4959      	ldr	r1, [pc, #356]	@ (8004078 <enter_setup_state+0x324>)
 8003f12:	4838      	ldr	r0, [pc, #224]	@ (8003ff4 <enter_setup_state+0x2a0>)
 8003f14:	f009 fcf8 	bl	800d908 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "a", "Calibration Current (A)",                   "0.0", "20.0",   I_CAL);
 8003f18:	4b31      	ldr	r3, [pc, #196]	@ (8003fe0 <enter_setup_state+0x28c>)
 8003f1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7fc fb43 	bl	80005a8 <__aeabi_f2d>
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f2a:	4b54      	ldr	r3, [pc, #336]	@ (800407c <enter_setup_state+0x328>)
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	4b3b      	ldr	r3, [pc, #236]	@ (800401c <enter_setup_state+0x2c8>)
 8003f30:	4a53      	ldr	r2, [pc, #332]	@ (8004080 <enter_setup_state+0x32c>)
 8003f32:	4954      	ldr	r1, [pc, #336]	@ (8004084 <enter_setup_state+0x330>)
 8003f34:	482f      	ldr	r0, [pc, #188]	@ (8003ff4 <enter_setup_state+0x2a0>)
 8003f36:	f009 fce7 	bl	800d908 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %d\n\r",   "r", "Hall Calibration Direction",                "-1",  "1",      HALL_CAL_DIR);
 8003f3a:	4b53      	ldr	r3, [pc, #332]	@ (8004088 <enter_setup_state+0x334>)
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	9301      	str	r3, [sp, #4]
 8003f40:	4b52      	ldr	r3, [pc, #328]	@ (800408c <enter_setup_state+0x338>)
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	4b52      	ldr	r3, [pc, #328]	@ (8004090 <enter_setup_state+0x33c>)
 8003f46:	4a53      	ldr	r2, [pc, #332]	@ (8004094 <enter_setup_state+0x340>)
 8003f48:	4953      	ldr	r1, [pc, #332]	@ (8004098 <enter_setup_state+0x344>)
 8003f4a:	4854      	ldr	r0, [pc, #336]	@ (800409c <enter_setup_state+0x348>)
 8003f4c:	f009 fcdc 	bl	800d908 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "e", "Hall Calibration offset",                   "0.0", "143.0",  HALL_CAL_OFFSET);
 8003f50:	4b23      	ldr	r3, [pc, #140]	@ (8003fe0 <enter_setup_state+0x28c>)
 8003f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fc fb27 	bl	80005a8 <__aeabi_f2d>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f62:	4b4f      	ldr	r3, [pc, #316]	@ (80040a0 <enter_setup_state+0x34c>)
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	4b2d      	ldr	r3, [pc, #180]	@ (800401c <enter_setup_state+0x2c8>)
 8003f68:	4a4e      	ldr	r2, [pc, #312]	@ (80040a4 <enter_setup_state+0x350>)
 8003f6a:	494f      	ldr	r1, [pc, #316]	@ (80040a8 <enter_setup_state+0x354>)
 8003f6c:	484f      	ldr	r0, [pc, #316]	@ (80040ac <enter_setup_state+0x358>)
 8003f6e:	f009 fccb 	bl	800d908 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Hall Calibration Speed",                    "0.0", "10.0",   HALL_CAL_SPEED);
 8003f72:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe0 <enter_setup_state+0x28c>)
 8003f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fc fb16 	bl	80005a8 <__aeabi_f2d>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f84:	4b31      	ldr	r3, [pc, #196]	@ (800404c <enter_setup_state+0x2f8>)
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	4b24      	ldr	r3, [pc, #144]	@ (800401c <enter_setup_state+0x2c8>)
 8003f8a:	4a49      	ldr	r2, [pc, #292]	@ (80040b0 <enter_setup_state+0x35c>)
 8003f8c:	4949      	ldr	r1, [pc, #292]	@ (80040b4 <enter_setup_state+0x360>)
 8003f8e:	4847      	ldr	r0, [pc, #284]	@ (80040ac <enter_setup_state+0x358>)
 8003f90:	f009 fcba 	bl	800d908 <iprintf>
	    printf("\r\n CAN:\r\n");
 8003f94:	4848      	ldr	r0, [pc, #288]	@ (80040b8 <enter_setup_state+0x364>)
 8003f96:	f009 fd1f 	bl	800d9d8 <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "n", "CAN ID",                                    "0",   "127",    CAN_ID);
 8003f9a:	4b3b      	ldr	r3, [pc, #236]	@ (8004088 <enter_setup_state+0x334>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	9301      	str	r3, [sp, #4]
 8003fa0:	4b46      	ldr	r3, [pc, #280]	@ (80040bc <enter_setup_state+0x368>)
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	4b10      	ldr	r3, [pc, #64]	@ (8003fe8 <enter_setup_state+0x294>)
 8003fa6:	4a46      	ldr	r2, [pc, #280]	@ (80040c0 <enter_setup_state+0x36c>)
 8003fa8:	4946      	ldr	r1, [pc, #280]	@ (80040c4 <enter_setup_state+0x370>)
 8003faa:	4847      	ldr	r0, [pc, #284]	@ (80040c8 <enter_setup_state+0x374>)
 8003fac:	f009 fcac 	bl	800d908 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN TX ID",                                 "0",   "127",    CAN_MASTER);
 8003fb0:	4b35      	ldr	r3, [pc, #212]	@ (8004088 <enter_setup_state+0x334>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	9301      	str	r3, [sp, #4]
 8003fb6:	4b41      	ldr	r3, [pc, #260]	@ (80040bc <enter_setup_state+0x368>)
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe8 <enter_setup_state+0x294>)
 8003fbc:	e086      	b.n	80040cc <enter_setup_state+0x378>
 8003fbe:	bf00      	nop
 8003fc0:	08010f10 	.word	0x08010f10
 8003fc4:	08010f64 	.word	0x08010f64
 8003fc8:	08010f74 	.word	0x08010f74
 8003fcc:	08010f2c 	.word	0x08010f2c
 8003fd0:	08010f30 	.word	0x08010f30
 8003fd4:	08010f3c 	.word	0x08010f3c
 8003fd8:	08010f44 	.word	0x08010f44
 8003fdc:	08010f78 	.word	0x08010f78
 8003fe0:	20000348 	.word	0x20000348
 8003fe4:	08010fb8 	.word	0x08010fb8
 8003fe8:	08010f84 	.word	0x08010f84
 8003fec:	08010f88 	.word	0x08010f88
 8003ff0:	08010f94 	.word	0x08010f94
 8003ff4:	08010f98 	.word	0x08010f98
 8003ff8:	08010fbc 	.word	0x08010fbc
 8003ffc:	08010fd4 	.word	0x08010fd4
 8004000:	08010fd8 	.word	0x08010fd8
 8004004:	08010ff8 	.word	0x08010ff8
 8004008:	08011028 	.word	0x08011028
 800400c:	08011008 	.word	0x08011008
 8004010:	0801100c 	.word	0x0801100c
 8004014:	08011024 	.word	0x08011024
 8004018:	0801104c 	.word	0x0801104c
 800401c:	08011030 	.word	0x08011030
 8004020:	08011034 	.word	0x08011034
 8004024:	08011048 	.word	0x08011048
 8004028:	08011054 	.word	0x08011054
 800402c:	08011070 	.word	0x08011070
 8004030:	08011074 	.word	0x08011074
 8004034:	08011094 	.word	0x08011094
 8004038:	08011098 	.word	0x08011098
 800403c:	080110b4 	.word	0x080110b4
 8004040:	080110dc 	.word	0x080110dc
 8004044:	080110b8 	.word	0x080110b8
 8004048:	080110d8 	.word	0x080110d8
 800404c:	08011114 	.word	0x08011114
 8004050:	080110e4 	.word	0x080110e4
 8004054:	08011110 	.word	0x08011110
 8004058:	08011144 	.word	0x08011144
 800405c:	0801111c 	.word	0x0801111c
 8004060:	08011140 	.word	0x08011140
 8004064:	08011164 	.word	0x08011164
 8004068:	08011148 	.word	0x08011148
 800406c:	08011160 	.word	0x08011160
 8004070:	08011188 	.word	0x08011188
 8004074:	0801116c 	.word	0x0801116c
 8004078:	08011184 	.word	0x08011184
 800407c:	080111ac 	.word	0x080111ac
 8004080:	08011190 	.word	0x08011190
 8004084:	080111a8 	.word	0x080111a8
 8004088:	20000448 	.word	0x20000448
 800408c:	080111f4 	.word	0x080111f4
 8004090:	080111b4 	.word	0x080111b4
 8004094:	080111b8 	.word	0x080111b8
 8004098:	080111d4 	.word	0x080111d4
 800409c:	080111d8 	.word	0x080111d8
 80040a0:	08011234 	.word	0x08011234
 80040a4:	080111f8 	.word	0x080111f8
 80040a8:	08011210 	.word	0x08011210
 80040ac:	08011214 	.word	0x08011214
 80040b0:	0801123c 	.word	0x0801123c
 80040b4:	08011254 	.word	0x08011254
 80040b8:	08011258 	.word	0x08011258
 80040bc:	08011290 	.word	0x08011290
 80040c0:	08011264 	.word	0x08011264
 80040c4:	0801126c 	.word	0x0801126c
 80040c8:	08011270 	.word	0x08011270
 80040cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004100 <enter_setup_state+0x3ac>)
 80040ce:	490d      	ldr	r1, [pc, #52]	@ (8004104 <enter_setup_state+0x3b0>)
 80040d0:	480d      	ldr	r0, [pc, #52]	@ (8004108 <enter_setup_state+0x3b4>)
 80040d2:	f009 fc19 	bl	800d908 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r",   "o", "CAN Timeout (cycles)(0 = none)",            "0",   "100000", CAN_TIMEOUT);
 80040d6:	4b0d      	ldr	r3, [pc, #52]	@ (800410c <enter_setup_state+0x3b8>)
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	9301      	str	r3, [sp, #4]
 80040dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004110 <enter_setup_state+0x3bc>)
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004114 <enter_setup_state+0x3c0>)
 80040e2:	4a0d      	ldr	r2, [pc, #52]	@ (8004118 <enter_setup_state+0x3c4>)
 80040e4:	490d      	ldr	r1, [pc, #52]	@ (800411c <enter_setup_state+0x3c8>)
 80040e6:	480e      	ldr	r0, [pc, #56]	@ (8004120 <enter_setup_state+0x3cc>)
 80040e8:	f009 fc0e 	bl	800d908 <iprintf>
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 80040ec:	480d      	ldr	r0, [pc, #52]	@ (8004124 <enter_setup_state+0x3d0>)
 80040ee:	f009 fc0b 	bl	800d908 <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 80040f2:	480d      	ldr	r0, [pc, #52]	@ (8004128 <enter_setup_state+0x3d4>)
 80040f4:	f009 fc08 	bl	800d908 <iprintf>
 }
 80040f8:	bf00      	nop
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	08011294 	.word	0x08011294
 8004104:	080112a0 	.word	0x080112a0
 8004108:	08011270 	.word	0x08011270
 800410c:	20000448 	.word	0x20000448
 8004110:	080112c8 	.word	0x080112c8
 8004114:	08010f84 	.word	0x08010f84
 8004118:	080112a4 	.word	0x080112a4
 800411c:	080112c4 	.word	0x080112c4
 8004120:	080111d8 	.word	0x080111d8
 8004124:	080112d0 	.word	0x080112d0
 8004128:	0801131c 	.word	0x0801131c

0800412c <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af02      	add	r7, sp, #8
 8004132:	6078      	str	r0, [r7, #4]
	 /* Collects user input from serial (maybe eventually CAN) and updates settings */

	 static char* response;  // Static buffer for the response
	 response = float_reg_update_uart(fsmstate->cmd_id, fsmstate->cmd_buff);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	7b9a      	ldrb	r2, [r3, #14]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3305      	adds	r3, #5
 800413c:	4619      	mov	r1, r3
 800413e:	4610      	mov	r0, r2
 8004140:	f002 fefa 	bl	8006f38 <float_reg_update_uart>
 8004144:	4603      	mov	r3, r0
 8004146:	4a24      	ldr	r2, [pc, #144]	@ (80041d8 <process_user_input+0xac>)
 8004148:	6013      	str	r3, [r2, #0]
	 if (strcmp(response, STR_INVALID_CMD) == 0){
 800414a:	4b23      	ldr	r3, [pc, #140]	@ (80041d8 <process_user_input+0xac>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4923      	ldr	r1, [pc, #140]	@ (80041dc <process_user_input+0xb0>)
 8004150:	4618      	mov	r0, r3
 8004152:	f7fc f85d 	bl	8000210 <strcmp>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10a      	bne.n	8004172 <process_user_input+0x46>
		 response = int_reg_update_uart(fsmstate->cmd_id, fsmstate->cmd_buff);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	7b9a      	ldrb	r2, [r3, #14]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3305      	adds	r3, #5
 8004164:	4619      	mov	r1, r3
 8004166:	4610      	mov	r0, r2
 8004168:	f003 f802 	bl	8007170 <int_reg_update_uart>
 800416c:	4603      	mov	r3, r0
 800416e:	4a1a      	ldr	r2, [pc, #104]	@ (80041d8 <process_user_input+0xac>)
 8004170:	6013      	str	r3, [r2, #0]
	 }
	 printf(response);
 8004172:	4b19      	ldr	r3, [pc, #100]	@ (80041d8 <process_user_input+0xac>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f009 fbc6 	bl	800d908 <iprintf>
		 }
	*/

	 /* Write new settings to flash */

	 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 800417c:	4b18      	ldr	r3, [pc, #96]	@ (80041e0 <process_user_input+0xb4>)
 800417e:	691a      	ldr	r2, [r3, #16]
 8004180:	9200      	str	r2, [sp, #0]
 8004182:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004184:	f001 fbd4 	bl	8005930 <preference_writer_ready>
 8004188:	4603      	mov	r3, r0
 800418a:	f083 0301 	eor.w	r3, r3, #1
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <process_user_input+0x6e>
 8004194:	4812      	ldr	r0, [pc, #72]	@ (80041e0 <process_user_input+0xb4>)
 8004196:	f001 fbbc 	bl	8005912 <preference_writer_open>
	 preference_writer_flush(&prefs);
 800419a:	4811      	ldr	r0, [pc, #68]	@ (80041e0 <process_user_input+0xb4>)
 800419c:	f001 fbd6 	bl	800594c <preference_writer_flush>
	 preference_writer_close(&prefs);
 80041a0:	480f      	ldr	r0, [pc, #60]	@ (80041e0 <process_user_input+0xb4>)
 80041a2:	f001 fc51 	bl	8005a48 <preference_writer_close>
	 preference_writer_load(prefs);
 80041a6:	4b0e      	ldr	r3, [pc, #56]	@ (80041e0 <process_user_input+0xb4>)
 80041a8:	691a      	ldr	r2, [r3, #16]
 80041aa:	9200      	str	r2, [sp, #0]
 80041ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041ae:	f001 fc09 	bl	80059c4 <preference_writer_load>

	 enter_setup_state();
 80041b2:	f7ff fdcf 	bl	8003d54 <enter_setup_state>

	 fsmstate->bytecount = 0;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	735a      	strb	r2, [r3, #13]
	 fsmstate->cmd_id = 0;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	739a      	strb	r2, [r3, #14]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3305      	adds	r3, #5
 80041c6:	2208      	movs	r2, #8
 80041c8:	2100      	movs	r1, #0
 80041ca:	4618      	mov	r0, r3
 80041cc:	f009 fd06 	bl	800dbdc <memset>
 }
 80041d0:	bf00      	nop
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	20000344 	.word	0x20000344
 80041dc:	08011348 	.word	0x08011348
 80041e0:	20000848 	.word	0x20000848

080041e4 <enter_motor_mode>:

 void enter_motor_mode(void){
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
	float _f_round, _f_p_des;
	_f_p_des = controller.theta_mech;
 80041ea:	4b26      	ldr	r3, [pc, #152]	@ (8004284 <enter_motor_mode+0xa0>)
 80041ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ee:	607b      	str	r3, [r7, #4]
	modff(_f_p_des/(2*PI_F),&_f_round);
 80041f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80041f4:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8004288 <enter_motor_mode+0xa4>
 80041f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80041fc:	463b      	mov	r3, r7
 80041fe:	4618      	mov	r0, r3
 8004200:	eeb0 0a47 	vmov.f32	s0, s14
 8004204:	f009 fd94 	bl	800dd30 <modff>
	_f_p_des = _f_p_des - _f_round*2*PI_F;
 8004208:	edd7 7a00 	vldr	s15, [r7]
 800420c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004210:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800428c <enter_motor_mode+0xa8>
 8004214:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004218:	ed97 7a01 	vldr	s14, [r7, #4]
 800421c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004220:	edc7 7a01 	vstr	s15, [r7, #4]
	if(_f_p_des < 0) _f_p_des = _f_p_des + 2*PI_F;
 8004224:	edd7 7a01 	vldr	s15, [r7, #4]
 8004228:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800422c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004230:	d507      	bpl.n	8004242 <enter_motor_mode+0x5e>
 8004232:	edd7 7a01 	vldr	s15, [r7, #4]
 8004236:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8004288 <enter_motor_mode+0xa4>
 800423a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800423e:	edc7 7a01 	vstr	s15, [r7, #4]
	controller.p_des = _f_p_des;
 8004242:	4a10      	ldr	r2, [pc, #64]	@ (8004284 <enter_motor_mode+0xa0>)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

	GPIO_ENABLE;
 800424a:	2201      	movs	r2, #1
 800424c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004250:	480f      	ldr	r0, [pc, #60]	@ (8004290 <enter_motor_mode+0xac>)
 8004252:	f004 febb 	bl	8008fcc <HAL_GPIO_WritePin>
	LED_HIGH;
 8004256:	2201      	movs	r2, #1
 8004258:	2120      	movs	r1, #32
 800425a:	480e      	ldr	r0, [pc, #56]	@ (8004294 <enter_motor_mode+0xb0>)
 800425c:	f004 feb6 	bl	8008fcc <HAL_GPIO_WritePin>
	reset_foc(&controller);
 8004260:	4808      	ldr	r0, [pc, #32]	@ (8004284 <enter_motor_mode+0xa0>)
 8004262:	f7fe fdc1 	bl	8002de8 <reset_foc>
	drv_enable_gd(drv);
 8004266:	4b0c      	ldr	r3, [pc, #48]	@ (8004298 <enter_motor_mode+0xb4>)
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	4611      	mov	r1, r2
 800426c:	889a      	ldrh	r2, [r3, #4]
 800426e:	2300      	movs	r3, #0
 8004270:	f362 030f 	bfi	r3, r2, #0, #16
 8004274:	4608      	mov	r0, r1
 8004276:	4619      	mov	r1, r3
 8004278:	f7fe f8cd 	bl	8002416 <drv_enable_gd>
 }
 800427c:	bf00      	nop
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	2000085c 	.word	0x2000085c
 8004288:	40c90fdb 	.word	0x40c90fdb
 800428c:	40490fdb 	.word	0x40490fdb
 8004290:	40020000 	.word	0x40020000
 8004294:	40020800 	.word	0x40020800
 8004298:	20000e58 	.word	0x20000e58

0800429c <encoder_set_zero>:


 void encoder_set_zero(void){
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
	comm_encoder.m_zero = 0;
 80042a2:	4b0d      	ldr	r3, [pc, #52]	@ (80042d8 <encoder_set_zero+0x3c>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	comm_encoder.first_sample = 0;
 80042aa:	4b0b      	ldr	r3, [pc, #44]	@ (80042d8 <encoder_set_zero+0x3c>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 22dc 	strb.w	r2, [r3, #732]	@ 0x2dc
	int zero_count = comm_encoder.count;
 80042b2:	4b09      	ldr	r3, [pc, #36]	@ (80042d8 <encoder_set_zero+0x3c>)
 80042b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042b6:	607b      	str	r3, [r7, #4]
	M_ZERO = zero_count;
 80042b8:	4a08      	ldr	r2, [pc, #32]	@ (80042dc <encoder_set_zero+0x40>)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6113      	str	r3, [r2, #16]
	ps_sample(&comm_encoder, DT);
 80042be:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80042e0 <encoder_set_zero+0x44>
 80042c2:	4805      	ldr	r0, [pc, #20]	@ (80042d8 <encoder_set_zero+0x3c>)
 80042c4:	f001 f93a 	bl	800553c <ps_sample>
	controller.theta_mech = 0;
 80042c8:	4b06      	ldr	r3, [pc, #24]	@ (80042e4 <encoder_set_zero+0x48>)
 80042ca:	f04f 0200 	mov.w	r2, #0
 80042ce:	629a      	str	r2, [r3, #40]	@ 0x28
 }
 80042d0:	bf00      	nop
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	20000b78 	.word	0x20000b78
 80042dc:	20000448 	.word	0x20000448
 80042e0:	37d1b717 	.word	0x37d1b717
 80042e4:	2000085c 	.word	0x2000085c

080042e8 <hall_calibrate>:


 void hall_calibrate(FSMStruct * fsmstate){
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
     if(hall_cal.hall_cal_state == CODE_HALL_UNCALIBRATED || hall_cal.hall_cal_state >= CODE_HALL_CAL_SUCCESS );
 80042f0:	4ba1      	ldr	r3, [pc, #644]	@ (8004578 <hall_calibrate+0x290>)
 80042f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 81cf 	beq.w	8004698 <hall_calibrate+0x3b0>
 80042fa:	4b9f      	ldr	r3, [pc, #636]	@ (8004578 <hall_calibrate+0x290>)
 80042fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042fe:	2b01      	cmp	r3, #1
 8004300:	f300 81ca 	bgt.w	8004698 <hall_calibrate+0x3b0>
     else{
    	 // read hall sensor
    	 hall_cal.hall_input = HAL_GPIO_ReadPin(HALL_IO);
 8004304:	2140      	movs	r1, #64	@ 0x40
 8004306:	489d      	ldr	r0, [pc, #628]	@ (800457c <hall_calibrate+0x294>)
 8004308:	f004 fe48 	bl	8008f9c <HAL_GPIO_ReadPin>
 800430c:	4603      	mov	r3, r0
 800430e:	461a      	mov	r2, r3
 8004310:	4b99      	ldr	r3, [pc, #612]	@ (8004578 <hall_calibrate+0x290>)
 8004312:	601a      	str	r2, [r3, #0]
    	 // calculate new position
    	 if((HALL_CAL_DIR == 1 && controller.theta_mech >= hall_cal.hall_present_pos + 2*PI_F) || (HALL_CAL_DIR == -1 && controller.theta_mech <= hall_cal.hall_present_pos - 2*PI_F)){
 8004314:	4b9a      	ldr	r3, [pc, #616]	@ (8004580 <hall_calibrate+0x298>)
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d10e      	bne.n	800433a <hall_calibrate+0x52>
 800431c:	4b99      	ldr	r3, [pc, #612]	@ (8004584 <hall_calibrate+0x29c>)
 800431e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8004322:	4b95      	ldr	r3, [pc, #596]	@ (8004578 <hall_calibrate+0x290>)
 8004324:	edd3 7a04 	vldr	s15, [r3, #16]
 8004328:	eddf 6a97 	vldr	s13, [pc, #604]	@ 8004588 <hall_calibrate+0x2a0>
 800432c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004330:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004338:	da13      	bge.n	8004362 <hall_calibrate+0x7a>
 800433a:	4b91      	ldr	r3, [pc, #580]	@ (8004580 <hall_calibrate+0x298>)
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004342:	d115      	bne.n	8004370 <hall_calibrate+0x88>
 8004344:	4b8f      	ldr	r3, [pc, #572]	@ (8004584 <hall_calibrate+0x29c>)
 8004346:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800434a:	4b8b      	ldr	r3, [pc, #556]	@ (8004578 <hall_calibrate+0x290>)
 800434c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004350:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8004588 <hall_calibrate+0x2a0>
 8004354:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004358:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800435c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004360:	d806      	bhi.n	8004370 <hall_calibrate+0x88>
    		 hall_cal.hall_cal_state = CODE_HALL_CAL_FAIL ;
 8004362:	4b85      	ldr	r3, [pc, #532]	@ (8004578 <hall_calibrate+0x290>)
 8004364:	2203      	movs	r2, #3
 8004366:	629a      	str	r2, [r3, #40]	@ 0x28
    		 fsmstate->next_state = MENU_MODE ;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	705a      	strb	r2, [r3, #1]
 800436e:	e18f      	b.n	8004690 <hall_calibrate+0x3a8>
         else{
        	 // rotate the motor forward and backward to read the hall sensor (1: no magnet detected, 0: magnet detected)
        	 // record the position at the moment from 1 to 0 (in_pos), and keep rotating
        	 // record the position at the moment from 0 to 1 (out_pos), and stop rotating.
        	 // calculate the average value of in_pos and out_pos, and rotate the motor to that position slowly
        	 if(hall_cal.hall_input != hall_cal.hall_preinput ) {
 8004370:	4b81      	ldr	r3, [pc, #516]	@ (8004578 <hall_calibrate+0x290>)
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	4b80      	ldr	r3, [pc, #512]	@ (8004578 <hall_calibrate+0x290>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	429a      	cmp	r2, r3
 800437a:	d020      	beq.n	80043be <hall_calibrate+0xd6>
        		 hall_cal.hall_cal_count += 1 ;
 800437c:	4b7e      	ldr	r3, [pc, #504]	@ (8004578 <hall_calibrate+0x290>)
 800437e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004380:	3301      	adds	r3, #1
 8004382:	4a7d      	ldr	r2, [pc, #500]	@ (8004578 <hall_calibrate+0x290>)
 8004384:	6253      	str	r3, [r2, #36]	@ 0x24
        		 if(hall_cal.hall_input == 0) hall_cal.hall_in_pos = controller.theta_mech ;
 8004386:	4b7c      	ldr	r3, [pc, #496]	@ (8004578 <hall_calibrate+0x290>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d104      	bne.n	8004398 <hall_calibrate+0xb0>
 800438e:	4b7d      	ldr	r3, [pc, #500]	@ (8004584 <hall_calibrate+0x29c>)
 8004390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004392:	4a79      	ldr	r2, [pc, #484]	@ (8004578 <hall_calibrate+0x290>)
 8004394:	6153      	str	r3, [r2, #20]
 8004396:	e012      	b.n	80043be <hall_calibrate+0xd6>
        		 else{
        			 hall_cal.hall_out_pos = controller.theta_mech ;
 8004398:	4b7a      	ldr	r3, [pc, #488]	@ (8004584 <hall_calibrate+0x29c>)
 800439a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439c:	4a76      	ldr	r2, [pc, #472]	@ (8004578 <hall_calibrate+0x290>)
 800439e:	6193      	str	r3, [r2, #24]
        			 hall_cal.hall_mid_pos = (hall_cal.hall_in_pos + hall_cal.hall_out_pos)/2.0f ;
 80043a0:	4b75      	ldr	r3, [pc, #468]	@ (8004578 <hall_calibrate+0x290>)
 80043a2:	ed93 7a05 	vldr	s14, [r3, #20]
 80043a6:	4b74      	ldr	r3, [pc, #464]	@ (8004578 <hall_calibrate+0x290>)
 80043a8:	edd3 7a06 	vldr	s15, [r3, #24]
 80043ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043b0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80043b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043b8:	4b6f      	ldr	r3, [pc, #444]	@ (8004578 <hall_calibrate+0x290>)
 80043ba:	edc3 7a07 	vstr	s15, [r3, #28]
                 }
             }
             if(hall_cal.hall_cal_count <= 1) hall_cal.hall_cal_pcmd = hall_cal.hall_cal_pcmd + HALL_CAL_DIR*(1.0f/(40000.0f)*HALL_CAL_SPEED ) ;
 80043be:	4b6e      	ldr	r3, [pc, #440]	@ (8004578 <hall_calibrate+0x290>)
 80043c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	dc17      	bgt.n	80043f6 <hall_calibrate+0x10e>
 80043c6:	4b6c      	ldr	r3, [pc, #432]	@ (8004578 <hall_calibrate+0x290>)
 80043c8:	ed93 7a02 	vldr	s14, [r3, #8]
 80043cc:	4b6c      	ldr	r3, [pc, #432]	@ (8004580 <hall_calibrate+0x298>)
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	ee07 3a90 	vmov	s15, r3
 80043d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80043d8:	4b6c      	ldr	r3, [pc, #432]	@ (800458c <hall_calibrate+0x2a4>)
 80043da:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 80043de:	ed9f 6a6c 	vldr	s12, [pc, #432]	@ 8004590 <hall_calibrate+0x2a8>
 80043e2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80043e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043ee:	4b62      	ldr	r3, [pc, #392]	@ (8004578 <hall_calibrate+0x290>)
 80043f0:	edc3 7a02 	vstr	s15, [r3, #8]
 80043f4:	e113      	b.n	800461e <hall_calibrate+0x336>
             else{
                 if(HALL_CAL_DIR == 1 ){
 80043f6:	4b62      	ldr	r3, [pc, #392]	@ (8004580 <hall_calibrate+0x298>)
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d17a      	bne.n	80044f4 <hall_calibrate+0x20c>
                     if(HALL_CAL_OFFSET == 0){
 80043fe:	4b63      	ldr	r3, [pc, #396]	@ (800458c <hall_calibrate+0x2a4>)
 8004400:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8004404:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800440c:	d132      	bne.n	8004474 <hall_calibrate+0x18c>
                    	 // keep turning
                    	 if(controller.theta_mech >= hall_cal.hall_mid_pos) hall_cal.hall_cal_pcmd = hall_cal.hall_cal_pcmd - HALL_CAL_DIR*1.0f/40000.0f*HALL_CAL_SPEED ;
 800440e:	4b5d      	ldr	r3, [pc, #372]	@ (8004584 <hall_calibrate+0x29c>)
 8004410:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8004414:	4b58      	ldr	r3, [pc, #352]	@ (8004578 <hall_calibrate+0x290>)
 8004416:	edd3 7a07 	vldr	s15, [r3, #28]
 800441a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800441e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004422:	db17      	blt.n	8004454 <hall_calibrate+0x16c>
 8004424:	4b54      	ldr	r3, [pc, #336]	@ (8004578 <hall_calibrate+0x290>)
 8004426:	ed93 7a02 	vldr	s14, [r3, #8]
 800442a:	4b55      	ldr	r3, [pc, #340]	@ (8004580 <hall_calibrate+0x298>)
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	ee07 3a90 	vmov	s15, r3
 8004432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004436:	ed9f 6a57 	vldr	s12, [pc, #348]	@ 8004594 <hall_calibrate+0x2ac>
 800443a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800443e:	4b53      	ldr	r3, [pc, #332]	@ (800458c <hall_calibrate+0x2a4>)
 8004440:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8004444:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004448:	ee77 7a67 	vsub.f32	s15, s14, s15
 800444c:	4b4a      	ldr	r3, [pc, #296]	@ (8004578 <hall_calibrate+0x290>)
 800444e:	edc3 7a02 	vstr	s15, [r3, #8]
 8004452:	e0e4      	b.n	800461e <hall_calibrate+0x336>
                    	 else{
                    		 // stop
                    		 hall_cal.hall_cal_pcmd = 0.0f;
 8004454:	4b48      	ldr	r3, [pc, #288]	@ (8004578 <hall_calibrate+0x290>)
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	609a      	str	r2, [r3, #8]
                    		 hall_cal.hall_cal_state = CODE_HALL_CAL_SUCCESS; // success
 800445c:	4b46      	ldr	r3, [pc, #280]	@ (8004578 <hall_calibrate+0x290>)
 800445e:	2202      	movs	r2, #2
 8004460:	629a      	str	r2, [r3, #40]	@ 0x28
                             // zero
                    		 hall_cal.hall_cal_count = 0 ;
 8004462:	4b45      	ldr	r3, [pc, #276]	@ (8004578 <hall_calibrate+0x290>)
 8004464:	2200      	movs	r2, #0
 8004466:	625a      	str	r2, [r3, #36]	@ 0x24
                    		 encoder_set_zero();
 8004468:	f7ff ff18 	bl	800429c <encoder_set_zero>
                    		 fsmstate->next_state = MOTOR_MODE ;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	705a      	strb	r2, [r3, #1]
 8004472:	e0d4      	b.n	800461e <hall_calibrate+0x336>
                         }
                     }
                     else{
                         if(controller.theta_mech <= hall_cal.hall_mid_pos + HALL_CAL_OFFSET*PI_F/180)  hall_cal.hall_cal_pcmd = hall_cal.hall_cal_pcmd + HALL_CAL_DIR*1.0f/40000.0f*HALL_CAL_SPEED ;
 8004474:	4b43      	ldr	r3, [pc, #268]	@ (8004584 <hall_calibrate+0x29c>)
 8004476:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800447a:	4b3f      	ldr	r3, [pc, #252]	@ (8004578 <hall_calibrate+0x290>)
 800447c:	edd3 6a07 	vldr	s13, [r3, #28]
 8004480:	4b42      	ldr	r3, [pc, #264]	@ (800458c <hall_calibrate+0x2a4>)
 8004482:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8004486:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 8004598 <hall_calibrate+0x2b0>
 800448a:	ee27 6a86 	vmul.f32	s12, s15, s12
 800448e:	eddf 5a43 	vldr	s11, [pc, #268]	@ 800459c <hall_calibrate+0x2b4>
 8004492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800449a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800449e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a2:	d817      	bhi.n	80044d4 <hall_calibrate+0x1ec>
 80044a4:	4b34      	ldr	r3, [pc, #208]	@ (8004578 <hall_calibrate+0x290>)
 80044a6:	ed93 7a02 	vldr	s14, [r3, #8]
 80044aa:	4b35      	ldr	r3, [pc, #212]	@ (8004580 <hall_calibrate+0x298>)
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	ee07 3a90 	vmov	s15, r3
 80044b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044b6:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8004594 <hall_calibrate+0x2ac>
 80044ba:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80044be:	4b33      	ldr	r3, [pc, #204]	@ (800458c <hall_calibrate+0x2a4>)
 80044c0:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 80044c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044cc:	4b2a      	ldr	r3, [pc, #168]	@ (8004578 <hall_calibrate+0x290>)
 80044ce:	edc3 7a02 	vstr	s15, [r3, #8]
 80044d2:	e0a4      	b.n	800461e <hall_calibrate+0x336>
                         else{
                        	 // stop
                        	 hall_cal.hall_cal_pcmd = 0.0f;
 80044d4:	4b28      	ldr	r3, [pc, #160]	@ (8004578 <hall_calibrate+0x290>)
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	609a      	str	r2, [r3, #8]
                        	 hall_cal.hall_cal_state = CODE_HALL_CAL_SUCCESS; // success
 80044dc:	4b26      	ldr	r3, [pc, #152]	@ (8004578 <hall_calibrate+0x290>)
 80044de:	2202      	movs	r2, #2
 80044e0:	629a      	str	r2, [r3, #40]	@ 0x28
                             // zero
                             hall_cal.hall_cal_count = 0 ;
 80044e2:	4b25      	ldr	r3, [pc, #148]	@ (8004578 <hall_calibrate+0x290>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	625a      	str	r2, [r3, #36]	@ 0x24
                    		 encoder_set_zero();
 80044e8:	f7ff fed8 	bl	800429c <encoder_set_zero>
                    		 fsmstate->next_state = MOTOR_MODE ;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	705a      	strb	r2, [r3, #1]
 80044f2:	e094      	b.n	800461e <hall_calibrate+0x336>
                         }
                     }
                 }
                 else if(HALL_CAL_DIR == -1){
 80044f4:	4b22      	ldr	r3, [pc, #136]	@ (8004580 <hall_calibrate+0x298>)
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fc:	f040 808f 	bne.w	800461e <hall_calibrate+0x336>
                     if(HALL_CAL_OFFSET == 0){
 8004500:	4b22      	ldr	r3, [pc, #136]	@ (800458c <hall_calibrate+0x2a4>)
 8004502:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8004506:	eef5 7a40 	vcmp.f32	s15, #0.0
 800450a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800450e:	d147      	bne.n	80045a0 <hall_calibrate+0x2b8>
                    	 // keep turning
                         if(controller.theta_mech <= hall_cal.hall_mid_pos) hall_cal.hall_cal_pcmd = hall_cal.hall_cal_pcmd - HALL_CAL_DIR*1.0f/40000.0f*HALL_CAL_SPEED ;
 8004510:	4b1c      	ldr	r3, [pc, #112]	@ (8004584 <hall_calibrate+0x29c>)
 8004512:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8004516:	4b18      	ldr	r3, [pc, #96]	@ (8004578 <hall_calibrate+0x290>)
 8004518:	edd3 7a07 	vldr	s15, [r3, #28]
 800451c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004524:	d817      	bhi.n	8004556 <hall_calibrate+0x26e>
 8004526:	4b14      	ldr	r3, [pc, #80]	@ (8004578 <hall_calibrate+0x290>)
 8004528:	ed93 7a02 	vldr	s14, [r3, #8]
 800452c:	4b14      	ldr	r3, [pc, #80]	@ (8004580 <hall_calibrate+0x298>)
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	ee07 3a90 	vmov	s15, r3
 8004534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004538:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8004594 <hall_calibrate+0x2ac>
 800453c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8004540:	4b12      	ldr	r3, [pc, #72]	@ (800458c <hall_calibrate+0x2a4>)
 8004542:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8004546:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800454a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800454e:	4b0a      	ldr	r3, [pc, #40]	@ (8004578 <hall_calibrate+0x290>)
 8004550:	edc3 7a02 	vstr	s15, [r3, #8]
 8004554:	e063      	b.n	800461e <hall_calibrate+0x336>
                         else{
                        	 // stop
                        	 hall_cal.hall_cal_pcmd = 0.0f;
 8004556:	4b08      	ldr	r3, [pc, #32]	@ (8004578 <hall_calibrate+0x290>)
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	609a      	str	r2, [r3, #8]
                        	 hall_cal.hall_cal_state = CODE_HALL_CAL_SUCCESS; // success
 800455e:	4b06      	ldr	r3, [pc, #24]	@ (8004578 <hall_calibrate+0x290>)
 8004560:	2202      	movs	r2, #2
 8004562:	629a      	str	r2, [r3, #40]	@ 0x28
                             // zero
                             hall_cal.hall_cal_count = 0 ;
 8004564:	4b04      	ldr	r3, [pc, #16]	@ (8004578 <hall_calibrate+0x290>)
 8004566:	2200      	movs	r2, #0
 8004568:	625a      	str	r2, [r3, #36]	@ 0x24
                    		 encoder_set_zero();
 800456a:	f7ff fe97 	bl	800429c <encoder_set_zero>
                    		 fsmstate->next_state = MOTOR_MODE ;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2202      	movs	r2, #2
 8004572:	705a      	strb	r2, [r3, #1]
 8004574:	e053      	b.n	800461e <hall_calibrate+0x336>
 8004576:	bf00      	nop
 8004578:	200093e8 	.word	0x200093e8
 800457c:	40020800 	.word	0x40020800
 8004580:	20000448 	.word	0x20000448
 8004584:	2000085c 	.word	0x2000085c
 8004588:	40c90fdb 	.word	0x40c90fdb
 800458c:	20000348 	.word	0x20000348
 8004590:	37d1b717 	.word	0x37d1b717
 8004594:	471c4000 	.word	0x471c4000
 8004598:	40490fdb 	.word	0x40490fdb
 800459c:	43340000 	.word	0x43340000
                         }
                     }
                     else{
                    	 // calibrate_offset != 0
                         if(controller.theta_mech >= hall_cal.hall_mid_pos - HALL_CAL_OFFSET*PI_F/180)  hall_cal.hall_cal_pcmd = hall_cal.hall_cal_pcmd + HALL_CAL_DIR*1.0f/40000.0f*HALL_CAL_SPEED ;
 80045a0:	4b3f      	ldr	r3, [pc, #252]	@ (80046a0 <hall_calibrate+0x3b8>)
 80045a2:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80045a6:	4b3f      	ldr	r3, [pc, #252]	@ (80046a4 <hall_calibrate+0x3bc>)
 80045a8:	edd3 6a07 	vldr	s13, [r3, #28]
 80045ac:	4b3e      	ldr	r3, [pc, #248]	@ (80046a8 <hall_calibrate+0x3c0>)
 80045ae:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 80045b2:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 80046ac <hall_calibrate+0x3c4>
 80045b6:	ee27 6a86 	vmul.f32	s12, s15, s12
 80045ba:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80046b0 <hall_calibrate+0x3c8>
 80045be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045c2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80045c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ce:	db17      	blt.n	8004600 <hall_calibrate+0x318>
 80045d0:	4b34      	ldr	r3, [pc, #208]	@ (80046a4 <hall_calibrate+0x3bc>)
 80045d2:	ed93 7a02 	vldr	s14, [r3, #8]
 80045d6:	4b37      	ldr	r3, [pc, #220]	@ (80046b4 <hall_calibrate+0x3cc>)
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	ee07 3a90 	vmov	s15, r3
 80045de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045e2:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 80046b8 <hall_calibrate+0x3d0>
 80045e6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80045ea:	4b2f      	ldr	r3, [pc, #188]	@ (80046a8 <hall_calibrate+0x3c0>)
 80045ec:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 80045f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045f8:	4b2a      	ldr	r3, [pc, #168]	@ (80046a4 <hall_calibrate+0x3bc>)
 80045fa:	edc3 7a02 	vstr	s15, [r3, #8]
 80045fe:	e00e      	b.n	800461e <hall_calibrate+0x336>
                         else{
                        	 // stop
                        	 hall_cal.hall_cal_pcmd = 0.0f;
 8004600:	4b28      	ldr	r3, [pc, #160]	@ (80046a4 <hall_calibrate+0x3bc>)
 8004602:	f04f 0200 	mov.w	r2, #0
 8004606:	609a      	str	r2, [r3, #8]
                        	 hall_cal.hall_cal_state = CODE_HALL_CAL_SUCCESS; // success
 8004608:	4b26      	ldr	r3, [pc, #152]	@ (80046a4 <hall_calibrate+0x3bc>)
 800460a:	2202      	movs	r2, #2
 800460c:	629a      	str	r2, [r3, #40]	@ 0x28
                             // zero
                             hall_cal.hall_cal_count = 0 ;
 800460e:	4b25      	ldr	r3, [pc, #148]	@ (80046a4 <hall_calibrate+0x3bc>)
 8004610:	2200      	movs	r2, #0
 8004612:	625a      	str	r2, [r3, #36]	@ 0x24
                    		 encoder_set_zero();
 8004614:	f7ff fe42 	bl	800429c <encoder_set_zero>
                    		 fsmstate->next_state = MOTOR_MODE ;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	705a      	strb	r2, [r3, #1]
                         }
                     }
                 }
             }
             hall_cal.hall_cal_pcmd = (hall_cal.hall_cal_pcmd>2*PI_F) ? hall_cal.hall_cal_pcmd-=2*PI_F : hall_cal.hall_cal_pcmd ;
 800461e:	4b21      	ldr	r3, [pc, #132]	@ (80046a4 <hall_calibrate+0x3bc>)
 8004620:	edd3 7a02 	vldr	s15, [r3, #8]
 8004624:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80046bc <hall_calibrate+0x3d4>
 8004628:	eef4 7ac7 	vcmpe.f32	s15, s14
 800462c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004630:	dd0c      	ble.n	800464c <hall_calibrate+0x364>
 8004632:	4b1c      	ldr	r3, [pc, #112]	@ (80046a4 <hall_calibrate+0x3bc>)
 8004634:	edd3 7a02 	vldr	s15, [r3, #8]
 8004638:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80046bc <hall_calibrate+0x3d4>
 800463c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004640:	4b18      	ldr	r3, [pc, #96]	@ (80046a4 <hall_calibrate+0x3bc>)
 8004642:	edc3 7a02 	vstr	s15, [r3, #8]
 8004646:	4b17      	ldr	r3, [pc, #92]	@ (80046a4 <hall_calibrate+0x3bc>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	e001      	b.n	8004650 <hall_calibrate+0x368>
 800464c:	4b15      	ldr	r3, [pc, #84]	@ (80046a4 <hall_calibrate+0x3bc>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	4a14      	ldr	r2, [pc, #80]	@ (80046a4 <hall_calibrate+0x3bc>)
 8004652:	6093      	str	r3, [r2, #8]
             hall_cal.hall_cal_pcmd = (hall_cal.hall_cal_pcmd < 0)  ? hall_cal.hall_cal_pcmd+=2*PI_F : hall_cal.hall_cal_pcmd ;
 8004654:	4b13      	ldr	r3, [pc, #76]	@ (80046a4 <hall_calibrate+0x3bc>)
 8004656:	edd3 7a02 	vldr	s15, [r3, #8]
 800465a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800465e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004662:	d50c      	bpl.n	800467e <hall_calibrate+0x396>
 8004664:	4b0f      	ldr	r3, [pc, #60]	@ (80046a4 <hall_calibrate+0x3bc>)
 8004666:	edd3 7a02 	vldr	s15, [r3, #8]
 800466a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80046bc <hall_calibrate+0x3d4>
 800466e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004672:	4b0c      	ldr	r3, [pc, #48]	@ (80046a4 <hall_calibrate+0x3bc>)
 8004674:	edc3 7a02 	vstr	s15, [r3, #8]
 8004678:	4b0a      	ldr	r3, [pc, #40]	@ (80046a4 <hall_calibrate+0x3bc>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	e001      	b.n	8004682 <hall_calibrate+0x39a>
 800467e:	4b09      	ldr	r3, [pc, #36]	@ (80046a4 <hall_calibrate+0x3bc>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	4a08      	ldr	r2, [pc, #32]	@ (80046a4 <hall_calibrate+0x3bc>)
 8004684:	6093      	str	r3, [r2, #8]
             controller.p_des = hall_cal.hall_cal_pcmd ;
 8004686:	4b07      	ldr	r3, [pc, #28]	@ (80046a4 <hall_calibrate+0x3bc>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	4a05      	ldr	r2, [pc, #20]	@ (80046a0 <hall_calibrate+0x3b8>)
 800468c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
         }
         hall_cal.hall_preinput = hall_cal.hall_input ;
 8004690:	4b04      	ldr	r3, [pc, #16]	@ (80046a4 <hall_calibrate+0x3bc>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a03      	ldr	r2, [pc, #12]	@ (80046a4 <hall_calibrate+0x3bc>)
 8004696:	6053      	str	r3, [r2, #4]
     }
 }
 8004698:	bf00      	nop
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	2000085c 	.word	0x2000085c
 80046a4:	200093e8 	.word	0x200093e8
 80046a8:	20000348 	.word	0x20000348
 80046ac:	40490fdb 	.word	0x40490fdb
 80046b0:	43340000 	.word	0x43340000
 80046b4:	20000448 	.word	0x20000448
 80046b8:	471c4000 	.word	0x471c4000
 80046bc:	40c90fdb 	.word	0x40c90fdb

080046c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08a      	sub	sp, #40	@ 0x28
 80046c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046c6:	f107 0314 	add.w	r3, r7, #20
 80046ca:	2200      	movs	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	605a      	str	r2, [r3, #4]
 80046d0:	609a      	str	r2, [r3, #8]
 80046d2:	60da      	str	r2, [r3, #12]
 80046d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046d6:	2300      	movs	r3, #0
 80046d8:	613b      	str	r3, [r7, #16]
 80046da:	4b3d      	ldr	r3, [pc, #244]	@ (80047d0 <MX_GPIO_Init+0x110>)
 80046dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046de:	4a3c      	ldr	r2, [pc, #240]	@ (80047d0 <MX_GPIO_Init+0x110>)
 80046e0:	f043 0304 	orr.w	r3, r3, #4
 80046e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80046e6:	4b3a      	ldr	r3, [pc, #232]	@ (80047d0 <MX_GPIO_Init+0x110>)
 80046e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80046f2:	2300      	movs	r3, #0
 80046f4:	60fb      	str	r3, [r7, #12]
 80046f6:	4b36      	ldr	r3, [pc, #216]	@ (80047d0 <MX_GPIO_Init+0x110>)
 80046f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fa:	4a35      	ldr	r2, [pc, #212]	@ (80047d0 <MX_GPIO_Init+0x110>)
 80046fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004700:	6313      	str	r3, [r2, #48]	@ 0x30
 8004702:	4b33      	ldr	r3, [pc, #204]	@ (80047d0 <MX_GPIO_Init+0x110>)
 8004704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800470e:	2300      	movs	r3, #0
 8004710:	60bb      	str	r3, [r7, #8]
 8004712:	4b2f      	ldr	r3, [pc, #188]	@ (80047d0 <MX_GPIO_Init+0x110>)
 8004714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004716:	4a2e      	ldr	r2, [pc, #184]	@ (80047d0 <MX_GPIO_Init+0x110>)
 8004718:	f043 0301 	orr.w	r3, r3, #1
 800471c:	6313      	str	r3, [r2, #48]	@ 0x30
 800471e:	4b2c      	ldr	r3, [pc, #176]	@ (80047d0 <MX_GPIO_Init+0x110>)
 8004720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	60bb      	str	r3, [r7, #8]
 8004728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800472a:	2300      	movs	r3, #0
 800472c:	607b      	str	r3, [r7, #4]
 800472e:	4b28      	ldr	r3, [pc, #160]	@ (80047d0 <MX_GPIO_Init+0x110>)
 8004730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004732:	4a27      	ldr	r2, [pc, #156]	@ (80047d0 <MX_GPIO_Init+0x110>)
 8004734:	f043 0302 	orr.w	r3, r3, #2
 8004738:	6313      	str	r3, [r2, #48]	@ 0x30
 800473a:	4b25      	ldr	r3, [pc, #148]	@ (80047d0 <MX_GPIO_Init+0x110>)
 800473c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	607b      	str	r3, [r7, #4]
 8004744:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 8004746:	2200      	movs	r2, #0
 8004748:	f648 0110 	movw	r1, #34832	@ 0x8810
 800474c:	4821      	ldr	r0, [pc, #132]	@ (80047d4 <MX_GPIO_Init+0x114>)
 800474e:	f004 fc3d 	bl	8008fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8004752:	2200      	movs	r2, #0
 8004754:	2120      	movs	r1, #32
 8004756:	4820      	ldr	r0, [pc, #128]	@ (80047d8 <MX_GPIO_Init+0x118>)
 8004758:	f004 fc38 	bl	8008fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800475c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004762:	4b1e      	ldr	r3, [pc, #120]	@ (80047dc <MX_GPIO_Init+0x11c>)
 8004764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004766:	2300      	movs	r3, #0
 8004768:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800476a:	f107 0314 	add.w	r3, r7, #20
 800476e:	4619      	mov	r1, r3
 8004770:	4819      	ldr	r0, [pc, #100]	@ (80047d8 <MX_GPIO_Init+0x118>)
 8004772:	f004 fa7f 	bl	8008c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15;
 8004776:	f648 0310 	movw	r3, #34832	@ 0x8810
 800477a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800477c:	2301      	movs	r3, #1
 800477e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004780:	2300      	movs	r3, #0
 8004782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004784:	2303      	movs	r3, #3
 8004786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004788:	f107 0314 	add.w	r3, r7, #20
 800478c:	4619      	mov	r1, r3
 800478e:	4811      	ldr	r0, [pc, #68]	@ (80047d4 <MX_GPIO_Init+0x114>)
 8004790:	f004 fa70 	bl	8008c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004794:	2320      	movs	r3, #32
 8004796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004798:	2301      	movs	r3, #1
 800479a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800479c:	2300      	movs	r3, #0
 800479e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047a0:	2303      	movs	r3, #3
 80047a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047a4:	f107 0314 	add.w	r3, r7, #20
 80047a8:	4619      	mov	r1, r3
 80047aa:	480b      	ldr	r0, [pc, #44]	@ (80047d8 <MX_GPIO_Init+0x118>)
 80047ac:	f004 fa62 	bl	8008c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80047b0:	2340      	movs	r3, #64	@ 0x40
 80047b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047b4:	2300      	movs	r3, #0
 80047b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b8:	2300      	movs	r3, #0
 80047ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047bc:	f107 0314 	add.w	r3, r7, #20
 80047c0:	4619      	mov	r1, r3
 80047c2:	4805      	ldr	r0, [pc, #20]	@ (80047d8 <MX_GPIO_Init+0x118>)
 80047c4:	f004 fa56 	bl	8008c74 <HAL_GPIO_Init>

}
 80047c8:	bf00      	nop
 80047ca:	3728      	adds	r7, #40	@ 0x28
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40023800 	.word	0x40023800
 80047d4:	40020000 	.word	0x40020000
 80047d8:	40020800 	.word	0x40020800
 80047dc:	10210000 	.word	0x10210000

080047e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b088      	sub	sp, #32
 80047e4:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80047e6:	f002 fda3 	bl	8007330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80047ea:	f000 fc55 	bl	8005098 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80047ee:	f7ff ff67 	bl	80046c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80047f2:	f002 f837 	bl	8006864 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80047f6:	f001 ff1b 	bl	8006630 <MX_TIM1_Init>
  MX_CAN1_Init();
 80047fa:	f7fd f9b1 	bl	8001b60 <MX_CAN1_Init>
  MX_SPI1_Init();
 80047fe:	f001 f933 	bl	8005a68 <MX_SPI1_Init>
  MX_SPI3_Init();
 8004802:	f001 f969 	bl	8005ad8 <MX_SPI3_Init>
  MX_ADC1_Init();
 8004806:	f7fc fc3b 	bl	8001080 <MX_ADC1_Init>
  MX_ADC2_Init();
 800480a:	f7fc fca3 	bl	8001154 <MX_ADC2_Init>
  MX_ADC3_Init();
 800480e:	f7fc fceb 	bl	80011e8 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  /* Load settings from flash */
  preference_writer_init(&prefs, 6);
 8004812:	2106      	movs	r1, #6
 8004814:	48b3      	ldr	r0, [pc, #716]	@ (8004ae4 <main+0x304>)
 8004816:	f001 f86b 	bl	80058f0 <preference_writer_init>
  preference_writer_load(prefs);
 800481a:	4bb2      	ldr	r3, [pc, #712]	@ (8004ae4 <main+0x304>)
 800481c:	691a      	ldr	r2, [r3, #16]
 800481e:	9200      	str	r2, [sp, #0]
 8004820:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004822:	f001 f8cf 	bl	80059c4 <preference_writer_load>

  /* Sanitize configs in case flash is empty or is wrong value*/
  if(                          MIN_E_ZERO > E_ZERO                   || MAX_E_ZERO < E_ZERO)                   {E_ZERO = 0;}
 8004826:	4bb0      	ldr	r3, [pc, #704]	@ (8004ae8 <main+0x308>)
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800482e:	d102      	bne.n	8004836 <main+0x56>
 8004830:	4bad      	ldr	r3, [pc, #692]	@ (8004ae8 <main+0x308>)
 8004832:	2200      	movs	r2, #0
 8004834:	615a      	str	r2, [r3, #20]
  if(                          MIN_M_ZERO > M_ZERO                   || MAX_M_ZERO < M_ZERO)                   {M_ZERO = 0;}
 8004836:	4bac      	ldr	r3, [pc, #688]	@ (8004ae8 <main+0x308>)
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800483e:	d102      	bne.n	8004846 <main+0x66>
 8004840:	4ba9      	ldr	r3, [pc, #676]	@ (8004ae8 <main+0x308>)
 8004842:	2200      	movs	r2, #0
 8004844:	611a      	str	r2, [r3, #16]
  if(isnan(GR)              || MIN_GR > GR		                     || MAX_GR < GR)                 		   {GR = 6.0f;}
 8004846:	4ba9      	ldr	r3, [pc, #676]	@ (8004aec <main+0x30c>)
 8004848:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800484c:	eef4 7a67 	vcmp.f32	s15, s15
 8004850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004854:	d613      	bvs.n	800487e <main+0x9e>
 8004856:	4ba5      	ldr	r3, [pc, #660]	@ (8004aec <main+0x30c>)
 8004858:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800485c:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8004af0 <main+0x310>
 8004860:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004868:	d409      	bmi.n	800487e <main+0x9e>
 800486a:	4ba0      	ldr	r3, [pc, #640]	@ (8004aec <main+0x30c>)
 800486c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004870:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8004af4 <main+0x314>
 8004874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800487c:	dd02      	ble.n	8004884 <main+0xa4>
 800487e:	4b9b      	ldr	r3, [pc, #620]	@ (8004aec <main+0x30c>)
 8004880:	4a9d      	ldr	r2, [pc, #628]	@ (8004af8 <main+0x318>)
 8004882:	645a      	str	r2, [r3, #68]	@ 0x44
  if(isnan(KT)	            || MIN_KT > KT                           || MAX_KT < KT)                           {KT = 0.08f;}
 8004884:	4b99      	ldr	r3, [pc, #612]	@ (8004aec <main+0x30c>)
 8004886:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800488a:	eef4 7a67 	vcmp.f32	s15, s15
 800488e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004892:	d613      	bvs.n	80048bc <main+0xdc>
 8004894:	4b95      	ldr	r3, [pc, #596]	@ (8004aec <main+0x30c>)
 8004896:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800489a:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 8004afc <main+0x31c>
 800489e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a6:	d409      	bmi.n	80048bc <main+0xdc>
 80048a8:	4b90      	ldr	r3, [pc, #576]	@ (8004aec <main+0x30c>)
 80048aa:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80048ae:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8004af4 <main+0x314>
 80048b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ba:	dd02      	ble.n	80048c2 <main+0xe2>
 80048bc:	4b8b      	ldr	r3, [pc, #556]	@ (8004aec <main+0x30c>)
 80048be:	4a90      	ldr	r2, [pc, #576]	@ (8004b00 <main+0x320>)
 80048c0:	639a      	str	r2, [r3, #56]	@ 0x38
  if(isnan(I_BW)            || MIN_I_BW > I_BW                       || MAX_I_BW < I_BW)				       {I_BW = 1000;}
 80048c2:	4b8a      	ldr	r3, [pc, #552]	@ (8004aec <main+0x30c>)
 80048c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80048c8:	eef4 7a67 	vcmp.f32	s15, s15
 80048cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d0:	d613      	bvs.n	80048fa <main+0x11a>
 80048d2:	4b86      	ldr	r3, [pc, #536]	@ (8004aec <main+0x30c>)
 80048d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80048d8:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8004b04 <main+0x324>
 80048dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048e4:	d409      	bmi.n	80048fa <main+0x11a>
 80048e6:	4b81      	ldr	r3, [pc, #516]	@ (8004aec <main+0x30c>)
 80048e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80048ec:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8004b08 <main+0x328>
 80048f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f8:	dd02      	ble.n	8004900 <main+0x120>
 80048fa:	4b7c      	ldr	r3, [pc, #496]	@ (8004aec <main+0x30c>)
 80048fc:	4a83      	ldr	r2, [pc, #524]	@ (8004b0c <main+0x32c>)
 80048fe:	609a      	str	r2, [r3, #8]
  if(isnan(I_MAX)           || MIN_I_MAX > I_MAX                     || MAX_I_MAX < I_MAX)					   {I_MAX = 40;}
 8004900:	4b7a      	ldr	r3, [pc, #488]	@ (8004aec <main+0x30c>)
 8004902:	edd3 7a03 	vldr	s15, [r3, #12]
 8004906:	eef4 7a67 	vcmp.f32	s15, s15
 800490a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800490e:	d611      	bvs.n	8004934 <main+0x154>
 8004910:	4b76      	ldr	r3, [pc, #472]	@ (8004aec <main+0x30c>)
 8004912:	edd3 7a03 	vldr	s15, [r3, #12]
 8004916:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800491a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800491e:	d409      	bmi.n	8004934 <main+0x154>
 8004920:	4b72      	ldr	r3, [pc, #456]	@ (8004aec <main+0x30c>)
 8004922:	edd3 7a03 	vldr	s15, [r3, #12]
 8004926:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8004b10 <main+0x330>
 800492a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800492e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004932:	dd02      	ble.n	800493a <main+0x15a>
 8004934:	4b6d      	ldr	r3, [pc, #436]	@ (8004aec <main+0x30c>)
 8004936:	4a77      	ldr	r2, [pc, #476]	@ (8004b14 <main+0x334>)
 8004938:	60da      	str	r2, [r3, #12]
  if(isnan(P_MAX)           || MIN_P_MAX > P_MAX                     || MAX_P_MAX < P_MAX)	                   {P_MAX = 6.283f;}
 800493a:	4b6c      	ldr	r3, [pc, #432]	@ (8004aec <main+0x30c>)
 800493c:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8004940:	eef4 7a67 	vcmp.f32	s15, s15
 8004944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004948:	d611      	bvs.n	800496e <main+0x18e>
 800494a:	4b68      	ldr	r3, [pc, #416]	@ (8004aec <main+0x30c>)
 800494c:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8004950:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004958:	d409      	bmi.n	800496e <main+0x18e>
 800495a:	4b64      	ldr	r3, [pc, #400]	@ (8004aec <main+0x30c>)
 800495c:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8004960:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8004af4 <main+0x314>
 8004964:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800496c:	dd02      	ble.n	8004974 <main+0x194>
 800496e:	4b5f      	ldr	r3, [pc, #380]	@ (8004aec <main+0x30c>)
 8004970:	4a69      	ldr	r2, [pc, #420]	@ (8004b18 <main+0x338>)
 8004972:	651a      	str	r2, [r3, #80]	@ 0x50
  if(isnan(P_MIN)           || MIN_P_MIN > P_MIN                     || MAX_P_MIN < P_MIN)	                   {P_MIN = 0.0f;}
 8004974:	4b5d      	ldr	r3, [pc, #372]	@ (8004aec <main+0x30c>)
 8004976:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800497a:	eef4 7a67 	vcmp.f32	s15, s15
 800497e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004982:	d611      	bvs.n	80049a8 <main+0x1c8>
 8004984:	4b59      	ldr	r3, [pc, #356]	@ (8004aec <main+0x30c>)
 8004986:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800498a:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8004b1c <main+0x33c>
 800498e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004996:	d407      	bmi.n	80049a8 <main+0x1c8>
 8004998:	4b54      	ldr	r3, [pc, #336]	@ (8004aec <main+0x30c>)
 800499a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800499e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a6:	dd03      	ble.n	80049b0 <main+0x1d0>
 80049a8:	4b50      	ldr	r3, [pc, #320]	@ (8004aec <main+0x30c>)
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  if(isnan(V_MAX)           || MIN_V_MAX > V_MAX                     || MAX_V_MAX < V_MAX)	                   {V_MAX = 45.0f;}
 80049b0:	4b4e      	ldr	r3, [pc, #312]	@ (8004aec <main+0x30c>)
 80049b2:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80049b6:	eef4 7a67 	vcmp.f32	s15, s15
 80049ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049be:	d611      	bvs.n	80049e4 <main+0x204>
 80049c0:	4b4a      	ldr	r3, [pc, #296]	@ (8004aec <main+0x30c>)
 80049c2:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80049c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ce:	d409      	bmi.n	80049e4 <main+0x204>
 80049d0:	4b46      	ldr	r3, [pc, #280]	@ (8004aec <main+0x30c>)
 80049d2:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80049d6:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8004af4 <main+0x314>
 80049da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e2:	dd02      	ble.n	80049ea <main+0x20a>
 80049e4:	4b41      	ldr	r3, [pc, #260]	@ (8004aec <main+0x30c>)
 80049e6:	4a4e      	ldr	r2, [pc, #312]	@ (8004b20 <main+0x340>)
 80049e8:	659a      	str	r2, [r3, #88]	@ 0x58
  if(isnan(V_MIN)           || MIN_V_MIN > V_MIN                     || MAX_V_MIN < V_MIN)	                   {V_MIN = -45.0f;}
 80049ea:	4b40      	ldr	r3, [pc, #256]	@ (8004aec <main+0x30c>)
 80049ec:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80049f0:	eef4 7a67 	vcmp.f32	s15, s15
 80049f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f8:	d611      	bvs.n	8004a1e <main+0x23e>
 80049fa:	4b3c      	ldr	r3, [pc, #240]	@ (8004aec <main+0x30c>)
 80049fc:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8004a00:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8004b1c <main+0x33c>
 8004a04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a0c:	d407      	bmi.n	8004a1e <main+0x23e>
 8004a0e:	4b37      	ldr	r3, [pc, #220]	@ (8004aec <main+0x30c>)
 8004a10:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8004a14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a1c:	dd02      	ble.n	8004a24 <main+0x244>
 8004a1e:	4b33      	ldr	r3, [pc, #204]	@ (8004aec <main+0x30c>)
 8004a20:	4a40      	ldr	r2, [pc, #256]	@ (8004b24 <main+0x344>)
 8004a22:	655a      	str	r2, [r3, #84]	@ 0x54
  if(isnan(T_MAX)           || MIN_T_MAX > T_MAX                     || MAX_T_MAX < T_MAX)                     {T_MAX = 20.0f;}
 8004a24:	4b31      	ldr	r3, [pc, #196]	@ (8004aec <main+0x30c>)
 8004a26:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8004a2a:	eef4 7a67 	vcmp.f32	s15, s15
 8004a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a32:	d611      	bvs.n	8004a58 <main+0x278>
 8004a34:	4b2d      	ldr	r3, [pc, #180]	@ (8004aec <main+0x30c>)
 8004a36:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8004a3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a42:	d409      	bmi.n	8004a58 <main+0x278>
 8004a44:	4b29      	ldr	r3, [pc, #164]	@ (8004aec <main+0x30c>)
 8004a46:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8004a4a:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8004af4 <main+0x314>
 8004a4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a56:	dd02      	ble.n	8004a5e <main+0x27e>
 8004a58:	4b24      	ldr	r3, [pc, #144]	@ (8004aec <main+0x30c>)
 8004a5a:	4a33      	ldr	r2, [pc, #204]	@ (8004b28 <main+0x348>)
 8004a5c:	661a      	str	r2, [r3, #96]	@ 0x60
  if(isnan(T_MIN)           || MIN_T_MIN > T_MIN                     || MAX_T_MIN < T_MIN)	                   {T_MIN = -20.0f;}
 8004a5e:	4b23      	ldr	r3, [pc, #140]	@ (8004aec <main+0x30c>)
 8004a60:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8004a64:	eef4 7a67 	vcmp.f32	s15, s15
 8004a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6c:	d611      	bvs.n	8004a92 <main+0x2b2>
 8004a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8004aec <main+0x30c>)
 8004a70:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8004a74:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8004b1c <main+0x33c>
 8004a78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a80:	d407      	bmi.n	8004a92 <main+0x2b2>
 8004a82:	4b1a      	ldr	r3, [pc, #104]	@ (8004aec <main+0x30c>)
 8004a84:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8004a88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a90:	dd02      	ble.n	8004a98 <main+0x2b8>
 8004a92:	4b16      	ldr	r3, [pc, #88]	@ (8004aec <main+0x30c>)
 8004a94:	4a25      	ldr	r2, [pc, #148]	@ (8004b2c <main+0x34c>)
 8004a96:	65da      	str	r2, [r3, #92]	@ 0x5c
  if(isnan(KP_MAX)          || MIN_KP_MAX > KP_MAX                   || MAX_KP_MAX < KP_MAX)			       {KP_MAX = 500.0f;}
 8004a98:	4b14      	ldr	r3, [pc, #80]	@ (8004aec <main+0x30c>)
 8004a9a:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8004a9e:	eef4 7a67 	vcmp.f32	s15, s15
 8004aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aa6:	d611      	bvs.n	8004acc <main+0x2ec>
 8004aa8:	4b10      	ldr	r3, [pc, #64]	@ (8004aec <main+0x30c>)
 8004aaa:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8004aae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab6:	d409      	bmi.n	8004acc <main+0x2ec>
 8004ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8004aec <main+0x30c>)
 8004aba:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8004abe:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8004af4 <main+0x314>
 8004ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aca:	dd02      	ble.n	8004ad2 <main+0x2f2>
 8004acc:	4b07      	ldr	r3, [pc, #28]	@ (8004aec <main+0x30c>)
 8004ace:	4a18      	ldr	r2, [pc, #96]	@ (8004b30 <main+0x350>)
 8004ad0:	665a      	str	r2, [r3, #100]	@ 0x64
  if(isnan(KI_MAX)          || MIN_KI_MAX > KI_MAX                   || MAX_KI_MAX < KI_MAX)      			   {KI_MAX = 0.0f;}
 8004ad2:	4b06      	ldr	r3, [pc, #24]	@ (8004aec <main+0x30c>)
 8004ad4:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8004ad8:	eef4 7a67 	vcmp.f32	s15, s15
 8004adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae0:	e028      	b.n	8004b34 <main+0x354>
 8004ae2:	bf00      	nop
 8004ae4:	20000848 	.word	0x20000848
 8004ae8:	20000448 	.word	0x20000448
 8004aec:	20000348 	.word	0x20000348
 8004af0:	3a83126f 	.word	0x3a83126f
 8004af4:	4f000000 	.word	0x4f000000
 8004af8:	40c00000 	.word	0x40c00000
 8004afc:	38d1b717 	.word	0x38d1b717
 8004b00:	3da3d70a 	.word	0x3da3d70a
 8004b04:	42c80000 	.word	0x42c80000
 8004b08:	44fa0000 	.word	0x44fa0000
 8004b0c:	447a0000 	.word	0x447a0000
 8004b10:	42960000 	.word	0x42960000
 8004b14:	42200000 	.word	0x42200000
 8004b18:	40c90e56 	.word	0x40c90e56
 8004b1c:	cf000000 	.word	0xcf000000
 8004b20:	42340000 	.word	0x42340000
 8004b24:	c2340000 	.word	0xc2340000
 8004b28:	41a00000 	.word	0x41a00000
 8004b2c:	c1a00000 	.word	0xc1a00000
 8004b30:	43fa0000 	.word	0x43fa0000
 8004b34:	d611      	bvs.n	8004b5a <main+0x37a>
 8004b36:	4baf      	ldr	r3, [pc, #700]	@ (8004df4 <main+0x614>)
 8004b38:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8004b3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b44:	d409      	bmi.n	8004b5a <main+0x37a>
 8004b46:	4bab      	ldr	r3, [pc, #684]	@ (8004df4 <main+0x614>)
 8004b48:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8004b4c:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8004df8 <main+0x618>
 8004b50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b58:	dd03      	ble.n	8004b62 <main+0x382>
 8004b5a:	4ba6      	ldr	r3, [pc, #664]	@ (8004df4 <main+0x614>)
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	669a      	str	r2, [r3, #104]	@ 0x68
  if(isnan(KD_MAX)          || MIN_KD_MAX > KD_MAX                   || MAX_KD_MAX < KD_MAX)				   {KD_MAX = 5.0f;}
 8004b62:	4ba4      	ldr	r3, [pc, #656]	@ (8004df4 <main+0x614>)
 8004b64:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8004b68:	eef4 7a67 	vcmp.f32	s15, s15
 8004b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b70:	d611      	bvs.n	8004b96 <main+0x3b6>
 8004b72:	4ba0      	ldr	r3, [pc, #640]	@ (8004df4 <main+0x614>)
 8004b74:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8004b78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b80:	d409      	bmi.n	8004b96 <main+0x3b6>
 8004b82:	4b9c      	ldr	r3, [pc, #624]	@ (8004df4 <main+0x614>)
 8004b84:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8004b88:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 8004df8 <main+0x618>
 8004b8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b94:	dd02      	ble.n	8004b9c <main+0x3bc>
 8004b96:	4b97      	ldr	r3, [pc, #604]	@ (8004df4 <main+0x614>)
 8004b98:	4a98      	ldr	r2, [pc, #608]	@ (8004dfc <main+0x61c>)
 8004b9a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if(isnan(I_FW_MAX)        || MIN_I_FW_MAX > I_FW_MAX               || MAX_I_FW_MAX < I_FW_MAX)			   {I_FW_MAX = 0.0f;}
 8004b9c:	4b95      	ldr	r3, [pc, #596]	@ (8004df4 <main+0x614>)
 8004b9e:	edd3 7a06 	vldr	s15, [r3, #24]
 8004ba2:	eef4 7a67 	vcmp.f32	s15, s15
 8004ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004baa:	d611      	bvs.n	8004bd0 <main+0x3f0>
 8004bac:	4b91      	ldr	r3, [pc, #580]	@ (8004df4 <main+0x614>)
 8004bae:	edd3 7a06 	vldr	s15, [r3, #24]
 8004bb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bba:	d409      	bmi.n	8004bd0 <main+0x3f0>
 8004bbc:	4b8d      	ldr	r3, [pc, #564]	@ (8004df4 <main+0x614>)
 8004bbe:	edd3 7a06 	vldr	s15, [r3, #24]
 8004bc2:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8004e00 <main+0x620>
 8004bc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bce:	dd03      	ble.n	8004bd8 <main+0x3f8>
 8004bd0:	4b88      	ldr	r3, [pc, #544]	@ (8004df4 <main+0x614>)
 8004bd2:	f04f 0200 	mov.w	r2, #0
 8004bd6:	619a      	str	r2, [r3, #24]
  if(isnan(I_MAX_CONT)      || MIN_I_MAX_CONT > I_MAX_CONT           || MAX_I_MAX_CONT < I_MAX_CONT)           {I_MAX_CONT = 14.0f;}
 8004bd8:	4b86      	ldr	r3, [pc, #536]	@ (8004df4 <main+0x614>)
 8004bda:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004bde:	eef4 7a67 	vcmp.f32	s15, s15
 8004be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be6:	d613      	bvs.n	8004c10 <main+0x430>
 8004be8:	4b82      	ldr	r3, [pc, #520]	@ (8004df4 <main+0x614>)
 8004bea:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004bee:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8004e04 <main+0x624>
 8004bf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bfa:	d409      	bmi.n	8004c10 <main+0x430>
 8004bfc:	4b7d      	ldr	r3, [pc, #500]	@ (8004df4 <main+0x614>)
 8004bfe:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004c02:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8004df8 <main+0x618>
 8004c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c0e:	dd02      	ble.n	8004c16 <main+0x436>
 8004c10:	4b78      	ldr	r3, [pc, #480]	@ (8004df4 <main+0x614>)
 8004c12:	4a7d      	ldr	r2, [pc, #500]	@ (8004e08 <main+0x628>)
 8004c14:	625a      	str	r2, [r3, #36]	@ 0x24
  if(isnan(I_CAL)           || MIN_I_CAL > I_CAL                     || MAX_I_CAL < I_CAL)					   {I_CAL = 5.0f;}
 8004c16:	4b77      	ldr	r3, [pc, #476]	@ (8004df4 <main+0x614>)
 8004c18:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8004c1c:	eef4 7a67 	vcmp.f32	s15, s15
 8004c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c24:	d611      	bvs.n	8004c4a <main+0x46a>
 8004c26:	4b73      	ldr	r3, [pc, #460]	@ (8004df4 <main+0x614>)
 8004c28:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8004c2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c34:	d409      	bmi.n	8004c4a <main+0x46a>
 8004c36:	4b6f      	ldr	r3, [pc, #444]	@ (8004df4 <main+0x614>)
 8004c38:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8004c3c:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8004c40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c48:	dd02      	ble.n	8004c50 <main+0x470>
 8004c4a:	4b6a      	ldr	r3, [pc, #424]	@ (8004df4 <main+0x614>)
 8004c4c:	4a6b      	ldr	r2, [pc, #428]	@ (8004dfc <main+0x61c>)
 8004c4e:	649a      	str	r2, [r3, #72]	@ 0x48
  if(HALL_CAL_DIR != 1 && HALL_CAL_DIR != -1)												      			   {HALL_CAL_DIR = 1;}
 8004c50:	4b6e      	ldr	r3, [pc, #440]	@ (8004e0c <main+0x62c>)
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d007      	beq.n	8004c68 <main+0x488>
 8004c58:	4b6c      	ldr	r3, [pc, #432]	@ (8004e0c <main+0x62c>)
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c60:	d002      	beq.n	8004c68 <main+0x488>
 8004c62:	4b6a      	ldr	r3, [pc, #424]	@ (8004e0c <main+0x62c>)
 8004c64:	2201      	movs	r2, #1
 8004c66:	619a      	str	r2, [r3, #24]
  if(isnan(HALL_CAL_OFFSET) || MIN_HALL_CAL_OFFSET > HALL_CAL_OFFSET || MAX_HALL_CAL_OFFSET < HALL_CAL_OFFSET) {HALL_CAL_OFFSET = 0.0f;}
 8004c68:	4b62      	ldr	r3, [pc, #392]	@ (8004df4 <main+0x614>)
 8004c6a:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8004c6e:	eef4 7a67 	vcmp.f32	s15, s15
 8004c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c76:	d611      	bvs.n	8004c9c <main+0x4bc>
 8004c78:	4b5e      	ldr	r3, [pc, #376]	@ (8004df4 <main+0x614>)
 8004c7a:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8004c7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c86:	d409      	bmi.n	8004c9c <main+0x4bc>
 8004c88:	4b5a      	ldr	r3, [pc, #360]	@ (8004df4 <main+0x614>)
 8004c8a:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8004c8e:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8004e10 <main+0x630>
 8004c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c9a:	dd03      	ble.n	8004ca4 <main+0x4c4>
 8004c9c:	4b55      	ldr	r3, [pc, #340]	@ (8004df4 <main+0x614>)
 8004c9e:	f04f 0200 	mov.w	r2, #0
 8004ca2:	671a      	str	r2, [r3, #112]	@ 0x70
  if(isnan(HALL_CAL_SPEED)  || MIN_HALL_CAL_SPEED > HALL_CAL_SPEED   || MAX_HALL_CAL_SPEED < HALL_CAL_SPEED)   {HALL_CAL_SPEED = 0.25f;}
 8004ca4:	4b53      	ldr	r3, [pc, #332]	@ (8004df4 <main+0x614>)
 8004ca6:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8004caa:	eef4 7a67 	vcmp.f32	s15, s15
 8004cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb2:	d611      	bvs.n	8004cd8 <main+0x4f8>
 8004cb4:	4b4f      	ldr	r3, [pc, #316]	@ (8004df4 <main+0x614>)
 8004cb6:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8004cba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc2:	d409      	bmi.n	8004cd8 <main+0x4f8>
 8004cc4:	4b4b      	ldr	r3, [pc, #300]	@ (8004df4 <main+0x614>)
 8004cc6:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8004cca:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004cce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd6:	dd03      	ble.n	8004ce0 <main+0x500>
 8004cd8:	4b46      	ldr	r3, [pc, #280]	@ (8004df4 <main+0x614>)
 8004cda:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 8004cde:	675a      	str	r2, [r3, #116]	@ 0x74
  if(						   MIN_CAN_ID > CAN_ID                   || MAX_CAN_ID < CAN_ID)                   {CAN_ID = 1;}
 8004ce0:	4b4a      	ldr	r3, [pc, #296]	@ (8004e0c <main+0x62c>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	dd03      	ble.n	8004cf0 <main+0x510>
 8004ce8:	4b48      	ldr	r3, [pc, #288]	@ (8004e0c <main+0x62c>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b7f      	cmp	r3, #127	@ 0x7f
 8004cee:	dd02      	ble.n	8004cf6 <main+0x516>
 8004cf0:	4b46      	ldr	r3, [pc, #280]	@ (8004e0c <main+0x62c>)
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	605a      	str	r2, [r3, #4]
  if(                          MIN_CAN_MASTER > CAN_MASTER           || MAX_CAN_MASTER < CAN_MASTER)           {CAN_MASTER = 0;}
 8004cf6:	4b45      	ldr	r3, [pc, #276]	@ (8004e0c <main+0x62c>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	db03      	blt.n	8004d06 <main+0x526>
 8004cfe:	4b43      	ldr	r3, [pc, #268]	@ (8004e0c <main+0x62c>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d04:	dd02      	ble.n	8004d0c <main+0x52c>
 8004d06:	4b41      	ldr	r3, [pc, #260]	@ (8004e0c <main+0x62c>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	609a      	str	r2, [r3, #8]
  if(                          MIN_CAN_TIMEOUT > CAN_TIMEOUT         || MAX_CAN_TIMEOUT < CAN_TIMEOUT)         {CAN_TIMEOUT = 0;}
 8004d0c:	4b3f      	ldr	r3, [pc, #252]	@ (8004e0c <main+0x62c>)
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	db04      	blt.n	8004d1e <main+0x53e>
 8004d14:	4b3d      	ldr	r3, [pc, #244]	@ (8004e0c <main+0x62c>)
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	4a3e      	ldr	r2, [pc, #248]	@ (8004e14 <main+0x634>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	dd02      	ble.n	8004d24 <main+0x544>
 8004d1e:	4b3b      	ldr	r3, [pc, #236]	@ (8004e0c <main+0x62c>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	60da      	str	r2, [r3, #12]
  if(isnan(R_NOMINAL)       || MIN_R_NOMINAL > R_NOMINAL             || MAX_R_NOMINAL < R_NOMINAL)             {R_NOMINAL = 0.0f;}
 8004d24:	4b33      	ldr	r3, [pc, #204]	@ (8004df4 <main+0x614>)
 8004d26:	edd3 7a07 	vldr	s15, [r3, #28]
 8004d2a:	eef4 7a67 	vcmp.f32	s15, s15
 8004d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d32:	d613      	bvs.n	8004d5c <main+0x57c>
 8004d34:	4b2f      	ldr	r3, [pc, #188]	@ (8004df4 <main+0x614>)
 8004d36:	edd3 7a07 	vldr	s15, [r3, #28]
 8004d3a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8004e04 <main+0x624>
 8004d3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d46:	d409      	bmi.n	8004d5c <main+0x57c>
 8004d48:	4b2a      	ldr	r3, [pc, #168]	@ (8004df4 <main+0x614>)
 8004d4a:	edd3 7a07 	vldr	s15, [r3, #28]
 8004d4e:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8004df8 <main+0x618>
 8004d52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d5a:	dd03      	ble.n	8004d64 <main+0x584>
 8004d5c:	4b25      	ldr	r3, [pc, #148]	@ (8004df4 <main+0x614>)
 8004d5e:	f04f 0200 	mov.w	r2, #0
 8004d62:	61da      	str	r2, [r3, #28]
  if(isnan(TEMP_MAX)        || MIN_TEMP_MAX > TEMP_MAX               || MAX_TEMP_MAX < TEMP_MAX)               {TEMP_MAX = 125.0f;}
 8004d64:	4b23      	ldr	r3, [pc, #140]	@ (8004df4 <main+0x614>)
 8004d66:	edd3 7a08 	vldr	s15, [r3, #32]
 8004d6a:	eef4 7a67 	vcmp.f32	s15, s15
 8004d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d72:	d613      	bvs.n	8004d9c <main+0x5bc>
 8004d74:	4b1f      	ldr	r3, [pc, #124]	@ (8004df4 <main+0x614>)
 8004d76:	edd3 7a08 	vldr	s15, [r3, #32]
 8004d7a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8004e04 <main+0x624>
 8004d7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d86:	d409      	bmi.n	8004d9c <main+0x5bc>
 8004d88:	4b1a      	ldr	r3, [pc, #104]	@ (8004df4 <main+0x614>)
 8004d8a:	edd3 7a08 	vldr	s15, [r3, #32]
 8004d8e:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8004df8 <main+0x618>
 8004d92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d9a:	dd02      	ble.n	8004da2 <main+0x5c2>
 8004d9c:	4b15      	ldr	r3, [pc, #84]	@ (8004df4 <main+0x614>)
 8004d9e:	4a1e      	ldr	r2, [pc, #120]	@ (8004e18 <main+0x638>)
 8004da0:	621a      	str	r2, [r3, #32]
  if(isnan(PPAIRS)          || MIN_PPAIRS > PPAIRS                   || MAX_PPAIRS < PPAIRS)                   {PPAIRS = 21.0f;}
 8004da2:	4b14      	ldr	r3, [pc, #80]	@ (8004df4 <main+0x614>)
 8004da4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004da8:	eef4 7a67 	vcmp.f32	s15, s15
 8004dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db0:	d613      	bvs.n	8004dda <main+0x5fa>
 8004db2:	4b10      	ldr	r3, [pc, #64]	@ (8004df4 <main+0x614>)
 8004db4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004db8:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8004e04 <main+0x624>
 8004dbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc4:	d409      	bmi.n	8004dda <main+0x5fa>
 8004dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8004df4 <main+0x614>)
 8004dc8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004dcc:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004df8 <main+0x618>
 8004dd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd8:	dd02      	ble.n	8004de0 <main+0x600>
 8004dda:	4b06      	ldr	r3, [pc, #24]	@ (8004df4 <main+0x614>)
 8004ddc:	4a0f      	ldr	r2, [pc, #60]	@ (8004e1c <main+0x63c>)
 8004dde:	629a      	str	r2, [r3, #40]	@ 0x28

  user_config_initialize();
 8004de0:	f001 fdde 	bl	80069a0 <user_config_initialize>

//  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
  printf("\r\n= = = = = Version Information = = = = =\r\n");
 8004de4:	480e      	ldr	r0, [pc, #56]	@ (8004e20 <main+0x640>)
 8004de6:	f008 fdf7 	bl	800d9d8 <puts>
  printf("\r\nFirmware Version:  %s\r\n", FIRMWARE_VERSION);
 8004dea:	490e      	ldr	r1, [pc, #56]	@ (8004e24 <main+0x644>)
 8004dec:	480e      	ldr	r0, [pc, #56]	@ (8004e28 <main+0x648>)
 8004dee:	f008 fd8b 	bl	800d908 <iprintf>
 8004df2:	e01b      	b.n	8004e2c <main+0x64c>
 8004df4:	20000348 	.word	0x20000348
 8004df8:	4f000000 	.word	0x4f000000
 8004dfc:	40a00000 	.word	0x40a00000
 8004e00:	42040000 	.word	0x42040000
 8004e04:	cf000000 	.word	0xcf000000
 8004e08:	41600000 	.word	0x41600000
 8004e0c:	20000448 	.word	0x20000448
 8004e10:	430f0000 	.word	0x430f0000
 8004e14:	000186a0 	.word	0x000186a0
 8004e18:	42fa0000 	.word	0x42fa0000
 8004e1c:	41a80000 	.word	0x41a80000
 8004e20:	08011360 	.word	0x08011360
 8004e24:	0801138c 	.word	0x0801138c
 8004e28:	08011394 	.word	0x08011394
  printf("\r\nBuild Date:  %s\r\n", FIRMWARE_DATE);
 8004e2c:	497f      	ldr	r1, [pc, #508]	@ (800502c <main+0x84c>)
 8004e2e:	4880      	ldr	r0, [pc, #512]	@ (8005030 <main+0x850>)
 8004e30:	f008 fd6a 	bl	800d908 <iprintf>
  printf("Build Time:  %s\r\n", FIRMWARE_TIME);
 8004e34:	497f      	ldr	r1, [pc, #508]	@ (8005034 <main+0x854>)
 8004e36:	4880      	ldr	r0, [pc, #512]	@ (8005038 <main+0x858>)
 8004e38:	f008 fd66 	bl	800d908 <iprintf>
  printf("\r\nAuthor:  %s\r\n", AUTHOR_NAME);
 8004e3c:	497f      	ldr	r1, [pc, #508]	@ (800503c <main+0x85c>)
 8004e3e:	4880      	ldr	r0, [pc, #512]	@ (8005040 <main+0x860>)
 8004e40:	f008 fd62 	bl	800d908 <iprintf>
  printf("\r\nModification Info:  %s\r\n", MODIFICATION_INFO);
 8004e44:	497f      	ldr	r1, [pc, #508]	@ (8005044 <main+0x864>)
 8004e46:	4880      	ldr	r0, [pc, #512]	@ (8005048 <main+0x868>)
 8004e48:	f008 fd5e 	bl	800d908 <iprintf>
  printf("\r\n= = = = = Program Started = = = = =\r\n");
 8004e4c:	487f      	ldr	r0, [pc, #508]	@ (800504c <main+0x86c>)
 8004e4e:	f008 fdc3 	bl	800d9d8 <puts>
  }
  else{

  }

  init_controller_params(&controller);
 8004e52:	487f      	ldr	r0, [pc, #508]	@ (8005050 <main+0x870>)
 8004e54:	f7fd ff00 	bl	8002c58 <init_controller_params>

  /* calibration "encoder" zeroing */
  memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 8004e58:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	487d      	ldr	r0, [pc, #500]	@ (8005054 <main+0x874>)
 8004e60:	f008 febc 	bl	800dbdc <memset>

  /* initialize the parameters of hall sensor */
  hall_cal.hall_input = 1;
 8004e64:	4b7c      	ldr	r3, [pc, #496]	@ (8005058 <main+0x878>)
 8004e66:	2201      	movs	r2, #1
 8004e68:	601a      	str	r2, [r3, #0]
  hall_cal.hall_preinput = 1;
 8004e6a:	4b7b      	ldr	r3, [pc, #492]	@ (8005058 <main+0x878>)
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	605a      	str	r2, [r3, #4]
  hall_cal.hall_cal_pcmd = 0;
 8004e70:	4b79      	ldr	r3, [pc, #484]	@ (8005058 <main+0x878>)
 8004e72:	f04f 0200 	mov.w	r2, #0
 8004e76:	609a      	str	r2, [r3, #8]
  hall_cal.hall_cal_speed = 0.25; // rad/s
 8004e78:	4b77      	ldr	r3, [pc, #476]	@ (8005058 <main+0x878>)
 8004e7a:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 8004e7e:	60da      	str	r2, [r3, #12]
  hall_cal.hall_present_pos = 0; // calibrate the previous position of encoder
 8004e80:	4b75      	ldr	r3, [pc, #468]	@ (8005058 <main+0x878>)
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	611a      	str	r2, [r3, #16]
  hall_cal.hall_in_pos = 0;  // read the position from 1 to 0 (magnet enters the area of hall sensor)
 8004e88:	4b73      	ldr	r3, [pc, #460]	@ (8005058 <main+0x878>)
 8004e8a:	f04f 0200 	mov.w	r2, #0
 8004e8e:	615a      	str	r2, [r3, #20]
  hall_cal.hall_out_pos = 0; // read the position from 0 to 1 (magnet exits the area of hall sensor)
 8004e90:	4b71      	ldr	r3, [pc, #452]	@ (8005058 <main+0x878>)
 8004e92:	f04f 0200 	mov.w	r2, #0
 8004e96:	619a      	str	r2, [r3, #24]
  hall_cal.hall_mid_pos = 0;
 8004e98:	4b6f      	ldr	r3, [pc, #444]	@ (8005058 <main+0x878>)
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	61da      	str	r2, [r3, #28]
  hall_cal. hall_cal_offset = 0; // rad
 8004ea0:	4b6d      	ldr	r3, [pc, #436]	@ (8005058 <main+0x878>)
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	621a      	str	r2, [r3, #32]
  hall_cal.hall_cal_count = 0;
 8004ea8:	4b6b      	ldr	r3, [pc, #428]	@ (8005058 <main+0x878>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	625a      	str	r2, [r3, #36]	@ 0x24
  hall_cal.hall_cal_state = CODE_HALL_UNCALIBRATED;
 8004eae:	4b6a      	ldr	r3, [pc, #424]	@ (8005058 <main+0x878>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* commutation encoder setup */
  comm_encoder.m_zero = M_ZERO;
 8004eb4:	4b69      	ldr	r3, [pc, #420]	@ (800505c <main+0x87c>)
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	4a69      	ldr	r2, [pc, #420]	@ (8005060 <main+0x880>)
 8004eba:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  comm_encoder.e_zero = E_ZERO;
 8004ebe:	4b67      	ldr	r3, [pc, #412]	@ (800505c <main+0x87c>)
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	4a67      	ldr	r2, [pc, #412]	@ (8005060 <main+0x880>)
 8004ec4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
  comm_encoder.ppairs = PPAIRS;
 8004ec8:	4b66      	ldr	r3, [pc, #408]	@ (8005064 <main+0x884>)
 8004eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ecc:	4a64      	ldr	r2, [pc, #400]	@ (8005060 <main+0x880>)
 8004ece:	6693      	str	r3, [r2, #104]	@ 0x68

  if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
 8004ed0:	4b63      	ldr	r3, [pc, #396]	@ (8005060 <main+0x880>)
 8004ed2:	4a62      	ldr	r2, [pc, #392]	@ (800505c <main+0x87c>)
 8004ed4:	33dc      	adds	r3, #220	@ 0xdc
 8004ed6:	f102 011c 	add.w	r1, r2, #28
 8004eda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f008 ff0d 	bl	800dcfe <memcpy>
  else{memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));}
  ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 8004ee4:	2164      	movs	r1, #100	@ 0x64
 8004ee6:	485e      	ldr	r0, [pc, #376]	@ (8005060 <main+0x880>)
 8004ee8:	f000 faf0 	bl	80054cc <ps_warmup>

  //for(int i = 0; i<128; i++){printf("%d\r\n", comm_encoder.offset_lut[i]);}

  /* Turn on ADCs */
  HAL_ADC_Start(&hadc1);
 8004eec:	485e      	ldr	r0, [pc, #376]	@ (8005068 <main+0x888>)
 8004eee:	f002 faf9 	bl	80074e4 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8004ef2:	485e      	ldr	r0, [pc, #376]	@ (800506c <main+0x88c>)
 8004ef4:	f002 faf6 	bl	80074e4 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 8004ef8:	485d      	ldr	r0, [pc, #372]	@ (8005070 <main+0x890>)
 8004efa:	f002 faf3 	bl	80074e4 <HAL_ADC_Start>

  /* DRV8323 setup */
  DRV_CS_HIGH; 	// CS high
 8004efe:	2201      	movs	r2, #1
 8004f00:	2110      	movs	r1, #16
 8004f02:	485c      	ldr	r0, [pc, #368]	@ (8005074 <main+0x894>)
 8004f04:	f004 f862 	bl	8008fcc <HAL_GPIO_WritePin>
  GPIO_ENABLE;   // GPIO ENABLE_PIN HIGH
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004f0e:	4859      	ldr	r0, [pc, #356]	@ (8005074 <main+0x894>)
 8004f10:	f004 f85c 	bl	8008fcc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8004f14:	2001      	movs	r0, #1
 8004f16:	f002 fa7d 	bl	8007414 <HAL_Delay>
  drv_calibrate(drv);
 8004f1a:	4b57      	ldr	r3, [pc, #348]	@ (8005078 <main+0x898>)
 8004f1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004f20:	f7fd faad 	bl	800247e <drv_calibrate>
  HAL_Delay(1);
 8004f24:	2001      	movs	r0, #1
 8004f26:	f002 fa75 	bl	8007414 <HAL_Delay>
  drv_write_DCR(drv, 0x0, 0x0, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 8004f2a:	4953      	ldr	r1, [pc, #332]	@ (8005078 <main+0x898>)
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	9306      	str	r3, [sp, #24]
 8004f30:	2300      	movs	r3, #0
 8004f32:	9305      	str	r3, [sp, #20]
 8004f34:	2300      	movs	r3, #0
 8004f36:	9304      	str	r3, [sp, #16]
 8004f38:	2300      	movs	r3, #0
 8004f3a:	9303      	str	r3, [sp, #12]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	9302      	str	r3, [sp, #8]
 8004f40:	2301      	movs	r3, #1
 8004f42:	9301      	str	r3, [sp, #4]
 8004f44:	2300      	movs	r3, #0
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	2300      	movs	r3, #0
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	c903      	ldmia	r1, {r0, r1}
 8004f4e:	f7fd f99c 	bl	800228a <drv_write_DCR>
  HAL_Delay(1);
 8004f52:	2001      	movs	r0, #1
 8004f54:	f002 fa5e 	bl	8007414 <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x0, 0x0, 0x0, SEN_LVL_1_0);
 8004f58:	4947      	ldr	r1, [pc, #284]	@ (8005078 <main+0x898>)
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	9306      	str	r3, [sp, #24]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	9305      	str	r3, [sp, #20]
 8004f62:	2300      	movs	r3, #0
 8004f64:	9304      	str	r3, [sp, #16]
 8004f66:	2300      	movs	r3, #0
 8004f68:	9303      	str	r3, [sp, #12]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	9302      	str	r3, [sp, #8]
 8004f6e:	2303      	movs	r3, #3
 8004f70:	9301      	str	r3, [sp, #4]
 8004f72:	2300      	movs	r3, #0
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	2301      	movs	r3, #1
 8004f78:	2200      	movs	r2, #0
 8004f7a:	c903      	ldmia	r1, {r0, r1}
 8004f7c:	f7fd fa01 	bl	8002382 <drv_write_CSACR>
  HAL_Delay(1);
 8004f80:	2001      	movs	r0, #1
 8004f82:	f002 fa47 	bl	8007414 <HAL_Delay>
  drv_write_OCPCR(drv, TRETRY_4MS, DEADTIME_200NS, OCP_RETRY, OCP_DEG_8US, VDS_LVL_1_88);
 8004f86:	493c      	ldr	r1, [pc, #240]	@ (8005078 <main+0x898>)
 8004f88:	230f      	movs	r3, #15
 8004f8a:	9302      	str	r3, [sp, #8]
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	9301      	str	r3, [sp, #4]
 8004f90:	2301      	movs	r3, #1
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	2302      	movs	r3, #2
 8004f96:	2200      	movs	r2, #0
 8004f98:	c903      	ldmia	r1, {r0, r1}
 8004f9a:	f7fd f9c0 	bl	800231e <drv_write_OCPCR>
  zero_current(&controller);
 8004f9e:	482c      	ldr	r0, [pc, #176]	@ (8005050 <main+0x870>)
 8004fa0:	f7fd fe16 	bl	8002bd0 <zero_current>
  drv_enable_gd(drv);
 8004fa4:	4b34      	ldr	r3, [pc, #208]	@ (8005078 <main+0x898>)
 8004fa6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004faa:	f7fd fa34 	bl	8002416 <drv_enable_gd>
  GPIO_DISABLE;
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004fb4:	482f      	ldr	r0, [pc, #188]	@ (8005074 <main+0x894>)
 8004fb6:	f004 f809 	bl	8008fcc <HAL_GPIO_WritePin>
//  printf("ADC A OFFSET: %d     ADC B OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset);

  /* Turn on PWM */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004fba:	2100      	movs	r1, #0
 8004fbc:	482f      	ldr	r0, [pc, #188]	@ (800507c <main+0x89c>)
 8004fbe:	f005 fa67 	bl	800a490 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8004fc2:	2104      	movs	r1, #4
 8004fc4:	482d      	ldr	r0, [pc, #180]	@ (800507c <main+0x89c>)
 8004fc6:	f005 fa63 	bl	800a490 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8004fca:	2108      	movs	r1, #8
 8004fcc:	482b      	ldr	r0, [pc, #172]	@ (800507c <main+0x89c>)
 8004fce:	f005 fa5f 	bl	800a490 <HAL_TIM_PWM_Start>

  /* CAN setup */
  can_rx_init(&can_rx);
 8004fd2:	482b      	ldr	r0, [pc, #172]	@ (8005080 <main+0x8a0>)
 8004fd4:	f7fc fe4a 	bl	8001c6c <can_rx_init>
  can_tx_init(&can_tx);
 8004fd8:	482a      	ldr	r0, [pc, #168]	@ (8005084 <main+0x8a4>)
 8004fda:	f7fc fe75 	bl	8001cc8 <can_tx_init>
  HAL_CAN_Start(&CAN_H); //start CAN
 8004fde:	482a      	ldr	r0, [pc, #168]	@ (8005088 <main+0x8a8>)
 8004fe0:	f003 f83a 	bl	8008058 <HAL_CAN_Start>
  //__HAL_CAN_ENABLE_IT(&CAN_H, CAN_IT_RX_FIFO0_MSG_PENDING); // Start can interrupt

  /* Set Interrupt Priorities */
  HAL_NVIC_SetPriority(PWM_ISR, 0x0,0x0); // commutation > communication
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	2019      	movs	r0, #25
 8004fea:	f003 fd7a 	bl	8008ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(CAN_ISR, 0x01, 0x01);
 8004fee:	2201      	movs	r2, #1
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	2014      	movs	r0, #20
 8004ff4:	f003 fd75 	bl	8008ae2 <HAL_NVIC_SetPriority>

  /* Start the FSM */
  state.state = MENU_MODE;
 8004ff8:	4b24      	ldr	r3, [pc, #144]	@ (800508c <main+0x8ac>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	701a      	strb	r2, [r3, #0]
  state.next_state = MENU_MODE;
 8004ffe:	4b23      	ldr	r3, [pc, #140]	@ (800508c <main+0x8ac>)
 8005000:	2200      	movs	r2, #0
 8005002:	705a      	strb	r2, [r3, #1]
  state.ready = 1;
 8005004:	4b21      	ldr	r3, [pc, #132]	@ (800508c <main+0x8ac>)
 8005006:	2201      	movs	r2, #1
 8005008:	70da      	strb	r2, [r3, #3]
  state.print_uart_msg = 0;
 800500a:	4b20      	ldr	r3, [pc, #128]	@ (800508c <main+0x8ac>)
 800500c:	2200      	movs	r2, #0
 800500e:	711a      	strb	r2, [r3, #4]
  enter_menu_state();
 8005010:	f7fe fe74 	bl	8003cfc <enter_menu_state>


  /* Turn on interrupts */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8005014:	2201      	movs	r2, #1
 8005016:	491e      	ldr	r1, [pc, #120]	@ (8005090 <main+0x8b0>)
 8005018:	481e      	ldr	r0, [pc, #120]	@ (8005094 <main+0x8b4>)
 800501a:	f006 fa8e 	bl	800b53a <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 800501e:	4817      	ldr	r0, [pc, #92]	@ (800507c <main+0x89c>)
 8005020:	f005 f96c 	bl	800a2fc <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(100);
 8005024:	2064      	movs	r0, #100	@ 0x64
 8005026:	f002 f9f5 	bl	8007414 <HAL_Delay>
 800502a:	e7fb      	b.n	8005024 <main+0x844>
 800502c:	080113b0 	.word	0x080113b0
 8005030:	080113bc 	.word	0x080113bc
 8005034:	080113d0 	.word	0x080113d0
 8005038:	080113dc 	.word	0x080113dc
 800503c:	080113f0 	.word	0x080113f0
 8005040:	0801140c 	.word	0x0801140c
 8005044:	0801141c 	.word	0x0801141c
 8005048:	0801142c 	.word	0x0801142c
 800504c:	08011448 	.word	0x08011448
 8005050:	2000085c 	.word	0x2000085c
 8005054:	2000908c 	.word	0x2000908c
 8005058:	200093e8 	.word	0x200093e8
 800505c:	20000448 	.word	0x20000448
 8005060:	20000b78 	.word	0x20000b78
 8005064:	20000348 	.word	0x20000348
 8005068:	20000234 	.word	0x20000234
 800506c:	2000027c 	.word	0x2000027c
 8005070:	200002c4 	.word	0x200002c4
 8005074:	40020000 	.word	0x40020000
 8005078:	20000e58 	.word	0x20000e58
 800507c:	200094d0 	.word	0x200094d0
 8005080:	20009390 	.word	0x20009390
 8005084:	2000936c 	.word	0x2000936c
 8005088:	2000030c 	.word	0x2000030c
 800508c:	20000b68 	.word	0x20000b68
 8005090:	20009414 	.word	0x20009414
 8005094:	20009518 	.word	0x20009518

08005098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b094      	sub	sp, #80	@ 0x50
 800509c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800509e:	f107 031c 	add.w	r3, r7, #28
 80050a2:	2234      	movs	r2, #52	@ 0x34
 80050a4:	2100      	movs	r1, #0
 80050a6:	4618      	mov	r0, r3
 80050a8:	f008 fd98 	bl	800dbdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80050ac:	f107 0308 	add.w	r3, r7, #8
 80050b0:	2200      	movs	r2, #0
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	605a      	str	r2, [r3, #4]
 80050b6:	609a      	str	r2, [r3, #8]
 80050b8:	60da      	str	r2, [r3, #12]
 80050ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80050bc:	2300      	movs	r3, #0
 80050be:	607b      	str	r3, [r7, #4]
 80050c0:	4b2c      	ldr	r3, [pc, #176]	@ (8005174 <SystemClock_Config+0xdc>)
 80050c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c4:	4a2b      	ldr	r2, [pc, #172]	@ (8005174 <SystemClock_Config+0xdc>)
 80050c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80050cc:	4b29      	ldr	r3, [pc, #164]	@ (8005174 <SystemClock_Config+0xdc>)
 80050ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050d4:	607b      	str	r3, [r7, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80050d8:	2300      	movs	r3, #0
 80050da:	603b      	str	r3, [r7, #0]
 80050dc:	4b26      	ldr	r3, [pc, #152]	@ (8005178 <SystemClock_Config+0xe0>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a25      	ldr	r2, [pc, #148]	@ (8005178 <SystemClock_Config+0xe0>)
 80050e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050e6:	6013      	str	r3, [r2, #0]
 80050e8:	4b23      	ldr	r3, [pc, #140]	@ (8005178 <SystemClock_Config+0xe0>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80050f0:	603b      	str	r3, [r7, #0]
 80050f2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80050f4:	2301      	movs	r3, #1
 80050f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80050f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80050fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80050fe:	2302      	movs	r3, #2
 8005100:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005102:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005106:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005108:	2304      	movs	r3, #4
 800510a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800510c:	23b4      	movs	r3, #180	@ 0xb4
 800510e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005110:	2302      	movs	r3, #2
 8005112:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005114:	2302      	movs	r3, #2
 8005116:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005118:	2302      	movs	r3, #2
 800511a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800511c:	f107 031c 	add.w	r3, r7, #28
 8005120:	4618      	mov	r0, r3
 8005122:	f004 fb07 	bl	8009734 <HAL_RCC_OscConfig>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800512c:	f000 f826 	bl	800517c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005130:	f003 ff66 	bl	8009000 <HAL_PWREx_EnableOverDrive>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800513a:	f000 f81f 	bl	800517c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800513e:	230f      	movs	r3, #15
 8005140:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005142:	2302      	movs	r3, #2
 8005144:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005146:	2300      	movs	r3, #0
 8005148:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800514a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800514e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005150:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005154:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005156:	f107 0308 	add.w	r3, r7, #8
 800515a:	2105      	movs	r1, #5
 800515c:	4618      	mov	r0, r3
 800515e:	f003 ff9f 	bl	80090a0 <HAL_RCC_ClockConfig>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8005168:	f000 f808 	bl	800517c <Error_Handler>
  }
}
 800516c:	bf00      	nop
 800516e:	3750      	adds	r7, #80	@ 0x50
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40023800 	.word	0x40023800
 8005178:	40007000 	.word	0x40007000

0800517c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005180:	bf00      	nop
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <fast_fmaxf>:

#include "math_ops.h"
#include "lookup.h"


float fast_fmaxf(float x, float y){
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	ed87 0a01 	vstr	s0, [r7, #4]
 8005194:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8005198:	ed97 7a01 	vldr	s14, [r7, #4]
 800519c:	edd7 7a00 	vldr	s15, [r7]
 80051a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a8:	dd01      	ble.n	80051ae <fast_fmaxf+0x24>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	e000      	b.n	80051b0 <fast_fmaxf+0x26>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	ee07 3a90 	vmov	s15, r3
    }
 80051b4:	eeb0 0a67 	vmov.f32	s0, s15
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <fast_fminf>:

float fast_fminf(float x, float y){
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	ed87 0a01 	vstr	s0, [r7, #4]
 80051cc:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 80051d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80051d4:	edd7 7a00 	vldr	s15, [r7]
 80051d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e0:	d501      	bpl.n	80051e6 <fast_fminf+0x24>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	e000      	b.n	80051e8 <fast_fminf+0x26>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	ee07 3a90 	vmov	s15, r3
    }
 80051ec:	eeb0 0a67 	vmov.f32	s0, s15
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <fmaxf3>:

float fmaxf3(float x, float y, float z){
 80051fa:	b480      	push	{r7}
 80051fc:	b085      	sub	sp, #20
 80051fe:	af00      	add	r7, sp, #0
 8005200:	ed87 0a03 	vstr	s0, [r7, #12]
 8005204:	edc7 0a02 	vstr	s1, [r7, #8]
 8005208:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 800520c:	ed97 7a03 	vldr	s14, [r7, #12]
 8005210:	edd7 7a02 	vldr	s15, [r7, #8]
 8005214:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800521c:	dd0c      	ble.n	8005238 <fmaxf3+0x3e>
 800521e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005222:	edd7 7a01 	vldr	s15, [r7, #4]
 8005226:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800522a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800522e:	dd01      	ble.n	8005234 <fmaxf3+0x3a>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	e00d      	b.n	8005250 <fmaxf3+0x56>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	e00b      	b.n	8005250 <fmaxf3+0x56>
 8005238:	ed97 7a02 	vldr	s14, [r7, #8]
 800523c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005240:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005248:	dd01      	ble.n	800524e <fmaxf3+0x54>
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	e000      	b.n	8005250 <fmaxf3+0x56>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	ee07 3a90 	vmov	s15, r3
    }
 8005254:	eeb0 0a67 	vmov.f32	s0, s15
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <fminf3>:

float fminf3(float x, float y, float z){
 8005262:	b480      	push	{r7}
 8005264:	b085      	sub	sp, #20
 8005266:	af00      	add	r7, sp, #0
 8005268:	ed87 0a03 	vstr	s0, [r7, #12]
 800526c:	edc7 0a02 	vstr	s1, [r7, #8]
 8005270:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 8005274:	ed97 7a03 	vldr	s14, [r7, #12]
 8005278:	edd7 7a02 	vldr	s15, [r7, #8]
 800527c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005284:	d50c      	bpl.n	80052a0 <fminf3+0x3e>
 8005286:	ed97 7a03 	vldr	s14, [r7, #12]
 800528a:	edd7 7a01 	vldr	s15, [r7, #4]
 800528e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005296:	d501      	bpl.n	800529c <fminf3+0x3a>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	e00d      	b.n	80052b8 <fminf3+0x56>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	e00b      	b.n	80052b8 <fminf3+0x56>
 80052a0:	ed97 7a02 	vldr	s14, [r7, #8]
 80052a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80052a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b0:	d501      	bpl.n	80052b6 <fminf3+0x54>
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	e000      	b.n	80052b8 <fminf3+0x56>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	ee07 3a90 	vmov	s15, r3
    }
 80052bc:	eeb0 0a67 	vmov.f32	s0, s15
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <limit_norm>:
float roundf(float x){
    /// Returns nearest integer ///
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b086      	sub	sp, #24
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	60f8      	str	r0, [r7, #12]
 80052d2:	60b9      	str	r1, [r7, #8]
 80052d4:	ed87 0a01 	vstr	s0, [r7, #4]
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	ed93 7a00 	vldr	s14, [r3]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	edd3 7a00 	vldr	s15, [r3]
 80052e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	edd3 6a00 	vldr	s13, [r3]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	edd3 7a00 	vldr	s15, [r3]
 80052f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052fc:	eeb0 0a67 	vmov.f32	s0, s15
 8005300:	f00b f9e6 	bl	80106d0 <sqrtf>
 8005304:	ed87 0a05 	vstr	s0, [r7, #20]
    if(norm > limit){
 8005308:	ed97 7a05 	vldr	s14, [r7, #20]
 800530c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005310:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005318:	dc00      	bgt.n	800531c <limit_norm+0x52>
        *x = *x * limit/norm;
        *y = *y * limit/norm;
        }
    }
 800531a:	e01b      	b.n	8005354 <limit_norm+0x8a>
        *x = *x * limit/norm;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	ed93 7a00 	vldr	s14, [r3]
 8005322:	edd7 7a01 	vldr	s15, [r7, #4]
 8005326:	ee67 6a27 	vmul.f32	s13, s14, s15
 800532a:	ed97 7a05 	vldr	s14, [r7, #20]
 800532e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	edc3 7a00 	vstr	s15, [r3]
        *y = *y * limit/norm;
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	ed93 7a00 	vldr	s14, [r3]
 800533e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005342:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005346:	ed97 7a05 	vldr	s14, [r7, #20]
 800534a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	edc3 7a00 	vstr	s15, [r3]
    }
 8005354:	bf00      	nop
 8005356:	3718      	adds	r7, #24
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <float_to_uint>:
    
void limit(float *x, float min, float max){
    *x = fast_fmaxf(fast_fminf(*x, max), min);
    }

int float_to_uint(float x, float x_min, float x_max, int bits){
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	ed87 0a03 	vstr	s0, [r7, #12]
 8005366:	edc7 0a02 	vstr	s1, [r7, #8]
 800536a:	ed87 1a01 	vstr	s2, [r7, #4]
 800536e:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 8005370:	ed97 7a01 	vldr	s14, [r7, #4]
 8005374:	edd7 7a02 	vldr	s15, [r7, #8]
 8005378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800537c:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 8005384:	ed97 7a03 	vldr	s14, [r7, #12]
 8005388:	edd7 7a04 	vldr	s15, [r7, #16]
 800538c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005390:	2201      	movs	r2, #1
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	fa02 f303 	lsl.w	r3, r2, r3
 8005398:	3b01      	subs	r3, #1
 800539a:	ee07 3a90 	vmov	s15, r3
 800539e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053a2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80053a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80053aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053b2:	ee17 3a90 	vmov	r3, s15
    }
 80053b6:	4618      	mov	r0, r3
 80053b8:	371c      	adds	r7, #28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <uint_to_float>:
    
    
float uint_to_float(int x_int, float x_min, float x_max, int bits){
 80053c2:	b480      	push	{r7}
 80053c4:	b087      	sub	sp, #28
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	60f8      	str	r0, [r7, #12]
 80053ca:	ed87 0a02 	vstr	s0, [r7, #8]
 80053ce:	edc7 0a01 	vstr	s1, [r7, #4]
 80053d2:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 80053d4:	ed97 7a01 	vldr	s14, [r7, #4]
 80053d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80053dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053e0:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	ee07 3a90 	vmov	s15, r3
 80053ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80053f6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80053fa:	2201      	movs	r2, #1
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005402:	3b01      	subs	r3, #1
 8005404:	ee07 3a90 	vmov	s15, r3
 8005408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800540c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005410:	edd7 7a04 	vldr	s15, [r7, #16]
 8005414:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 8005418:	eeb0 0a67 	vmov.f32	s0, s15
 800541c:	371c      	adds	r7, #28
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
	...

08005428 <sin_lut>:

float sin_lut(float theta){
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWO_PI_F);
 8005432:	eddf 0a17 	vldr	s1, [pc, #92]	@ 8005490 <sin_lut+0x68>
 8005436:	ed97 0a01 	vldr	s0, [r7, #4]
 800543a:	f00b f929 	bl	8010690 <fmodf>
 800543e:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = theta<0 ? theta + TWO_PI_F : theta;
 8005442:	edd7 7a01 	vldr	s15, [r7, #4]
 8005446:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800544a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800544e:	d506      	bpl.n	800545e <sin_lut+0x36>
 8005450:	edd7 7a01 	vldr	s15, [r7, #4]
 8005454:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005490 <sin_lut+0x68>
 8005458:	ee77 7a87 	vadd.f32	s15, s15, s14
 800545c:	e001      	b.n	8005462 <sin_lut+0x3a>
 800545e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005462:	edc7 7a01 	vstr	s15, [r7, #4]

	return sin_tab[(int) (LUT_MULT*theta)];
 8005466:	edd7 7a01 	vldr	s15, [r7, #4]
 800546a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8005494 <sin_lut+0x6c>
 800546e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005472:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005476:	ee17 3a90 	vmov	r3, s15
 800547a:	4a07      	ldr	r2, [pc, #28]	@ (8005498 <sin_lut+0x70>)
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	ee07 3a90 	vmov	s15, r3
}
 8005486:	eeb0 0a67 	vmov.f32	s0, s15
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	40c90fdb 	.word	0x40c90fdb
 8005494:	42a2f983 	.word	0x42a2f983
 8005498:	0801166c 	.word	0x0801166c

0800549c <cos_lut>:

float cos_lut(float theta){
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lut(PI_OVER_2_F - theta);
 80054a6:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80054c8 <cos_lut+0x2c>
 80054aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80054ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054b2:	eeb0 0a67 	vmov.f32	s0, s15
 80054b6:	f7ff ffb7 	bl	8005428 <sin_lut>
 80054ba:	eef0 7a40 	vmov.f32	s15, s0
}
 80054be:	eeb0 0a67 	vmov.f32	s0, s15
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	3fc90fdb 	.word	0x3fc90fdb

080054cc <ps_warmup>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void ps_warmup(EncoderStruct * encoder, int n){
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
	for(int i = 0; i<n; i++){
 80054d6:	2300      	movs	r3, #0
 80054d8:	60fb      	str	r3, [r7, #12]
 80054da:	e021      	b.n	8005520 <ps_warmup+0x54>
		encoder->spi_tx_word = 0x0000;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	801a      	strh	r2, [r3, #0]
		ENC_CS_LOW; 	// CS low
 80054e2:	2200      	movs	r2, #0
 80054e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054e8:	4812      	ldr	r0, [pc, #72]	@ (8005534 <ps_warmup+0x68>)
 80054ea:	f003 fd6f 	bl	8008fcc <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 80054ee:	6879      	ldr	r1, [r7, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	1c9a      	adds	r2, r3, #2
 80054f4:	2364      	movs	r3, #100	@ 0x64
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	2301      	movs	r3, #1
 80054fa:	480f      	ldr	r0, [pc, #60]	@ (8005538 <ps_warmup+0x6c>)
 80054fc:	f004 fc41 	bl	8009d82 <HAL_SPI_TransmitReceive>
		while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8005500:	bf00      	nop
 8005502:	4b0d      	ldr	r3, [pc, #52]	@ (8005538 <ps_warmup+0x6c>)
 8005504:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d0f9      	beq.n	8005502 <ps_warmup+0x36>
		ENC_CS_HIGH; 	// CS high
 800550e:	2201      	movs	r2, #1
 8005510:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005514:	4807      	ldr	r0, [pc, #28]	@ (8005534 <ps_warmup+0x68>)
 8005516:	f003 fd59 	bl	8008fcc <HAL_GPIO_WritePin>
	for(int i = 0; i<n; i++){
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	3301      	adds	r3, #1
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	429a      	cmp	r2, r3
 8005526:	dbd9      	blt.n	80054dc <ps_warmup+0x10>
	}
}
 8005528:	bf00      	nop
 800552a:	bf00      	nop
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	40020000 	.word	0x40020000
 8005538:	20009470 	.word	0x20009470

0800553c <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 800553c:	b580      	push	{r7, lr}
 800553e:	b08c      	sub	sp, #48	@ 0x30
 8005540:	af02      	add	r7, sp, #8
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	ed87 0a00 	vstr	s0, [r7]
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	609a      	str	r2, [r3, #8]
	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
 8005550:	2313      	movs	r3, #19
 8005552:	627b      	str	r3, [r7, #36]	@ 0x24
 8005554:	e011      	b.n	800557a <ps_sample+0x3e>
 8005556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005558:	3b01      	subs	r3, #1
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	3302      	adds	r3, #2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	3304      	adds	r3, #4
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	6879      	ldr	r1, [r7, #4]
 8005568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556a:	3302      	adds	r3, #2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	440b      	add	r3, r1
 8005570:	3304      	adds	r3, #4
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005576:	3b01      	subs	r3, #1
 8005578:	627b      	str	r3, [r7, #36]	@ 0x24
 800557a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557c:	2b00      	cmp	r3, #0
 800557e:	dcea      	bgt.n	8005556 <ps_sample+0x1a>
	//for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->count_buff[i] = encoder->count_buff[i-1];}
	//memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float)); // this is much slower for some reason

	/* SPI read/write */
	encoder->spi_tx_word = ENC_READ_WORD;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	801a      	strh	r2, [r3, #0]
	ENC_CS_LOW; 	// CS low
 8005586:	2200      	movs	r2, #0
 8005588:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800558c:	48ac      	ldr	r0, [pc, #688]	@ (8005840 <ps_sample+0x304>)
 800558e:	f003 fd1d 	bl	8008fcc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 8005592:	6879      	ldr	r1, [r7, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	1c9a      	adds	r2, r3, #2
 8005598:	2364      	movs	r3, #100	@ 0x64
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	2301      	movs	r3, #1
 800559e:	48a9      	ldr	r0, [pc, #676]	@ (8005844 <ps_sample+0x308>)
 80055a0:	f004 fbef 	bl	8009d82 <HAL_SPI_TransmitReceive>
	while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 80055a4:	bf00      	nop
 80055a6:	4ba7      	ldr	r3, [pc, #668]	@ (8005844 <ps_sample+0x308>)
 80055a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d0f9      	beq.n	80055a6 <ps_sample+0x6a>
	ENC_CS_HIGH; 	// CS high
 80055b2:	2201      	movs	r2, #1
 80055b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80055b8:	48a1      	ldr	r0, [pc, #644]	@ (8005840 <ps_sample+0x304>)
 80055ba:	f003 fd07 	bl	8008fcc <HAL_GPIO_WritePin>
	encoder->raw = encoder ->spi_rx_word;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	885b      	ldrh	r3, [r3, #2]
 80055c2:	461a      	mov	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	675a      	str	r2, [r3, #116]	@ 0x74

	/* Linearization */
	int off_1 = encoder->offset_lut[(encoder->raw)>>9];				// lookup table lower entry
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055cc:	125b      	asrs	r3, r3, #9
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	3336      	adds	r3, #54	@ 0x36
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	61fb      	str	r3, [r7, #28]
	int off_2 = encoder->offset_lut[((encoder->raw>>9)+1)%128];		// lookup table higher entry
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055de:	125b      	asrs	r3, r3, #9
 80055e0:	3301      	adds	r3, #1
 80055e2:	425a      	negs	r2, r3
 80055e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80055ec:	bf58      	it	pl
 80055ee:	4253      	negpl	r3, r2
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	3336      	adds	r3, #54	@ 0x36
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	61bb      	str	r3, [r7, #24]
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>9)<<9))>>9);     // Interpolate between lookup table entries
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005606:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800560a:	fb02 f303 	mul.w	r3, r2, r3
 800560e:	125b      	asrs	r3, r3, #9
 8005610:	69fa      	ldr	r2, [r7, #28]
 8005612:	4413      	add	r3, r2
 8005614:	617b      	str	r3, [r7, #20]
	encoder->count = encoder->raw + off_interp;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	441a      	add	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	679a      	str	r2, [r3, #120]	@ 0x78


	/* Real angles in radians */
	encoder->angle_singleturn = ((float)(encoder->count-M_ZERO))/((float)ENC_CPR);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005626:	4b88      	ldr	r3, [pc, #544]	@ (8005848 <ps_sample+0x30c>)
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	ee07 3a90 	vmov	s15, r3
 8005630:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005634:	eddf 6a85 	vldr	s13, [pc, #532]	@ 800584c <ps_sample+0x310>
 8005638:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	edc3 7a01 	vstr	s15, [r3, #4]
	int int_angle = encoder->angle_singleturn;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	edd3 7a01 	vldr	s15, [r3, #4]
 8005648:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800564c:	ee17 3a90 	vmov	r3, s15
 8005650:	613b      	str	r3, [r7, #16]
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	ed93 7a01 	vldr	s14, [r3, #4]
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	ee07 3a90 	vmov	s15, r3
 800565e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005662:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005666:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8005850 <ps_sample+0x314>
 800566a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	edc3 7a01 	vstr	s15, [r3, #4]
	//encoder->angle_singleturn = TWO_PI_F*fmodf(((float)(encoder->count-M_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	edd3 7a01 	vldr	s15, [r3, #4]
 800567a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800567e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005682:	d507      	bpl.n	8005694 <ps_sample+0x158>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	edd3 7a01 	vldr	s15, [r3, #4]
 800568a:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8005850 <ps_sample+0x314>
 800568e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005692:	e002      	b.n	800569a <ps_sample+0x15e>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	edd3 7a01 	vldr	s15, [r3, #4]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	edc3 7a01 	vstr	s15, [r3, #4]

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80056aa:	4b67      	ldr	r3, [pc, #412]	@ (8005848 <ps_sample+0x30c>)
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	ee07 3a90 	vmov	s15, r3
 80056b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056bc:	eddf 6a63 	vldr	s13, [pc, #396]	@ 800584c <ps_sample+0x310>
 80056c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
	int_angle = (int)encoder->elec_angle;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80056d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056d4:	ee17 3a90 	vmov	r3, s15
 80056d8:	613b      	str	r3, [r7, #16]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	ee07 3a90 	vmov	s15, r3
 80056e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056ee:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8005850 <ps_sample+0x314>
 80056f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
	//encoder->elec_angle = TWO_PI_F*fmodf((encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8005702:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800570a:	d507      	bpl.n	800571c <ps_sample+0x1e0>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8005712:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8005850 <ps_sample+0x314>
 8005716:	ee77 7a87 	vadd.f32	s15, s15, s14
 800571a:	e002      	b.n	8005722 <ps_sample+0x1e6>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
	/* Rollover */
	int rollover = 0;
 8005728:	2300      	movs	r3, #0
 800572a:	623b      	str	r3, [r7, #32]
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	ed93 7a01 	vldr	s14, [r3, #4]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	edd3 7a02 	vldr	s15, [r3, #8]
 8005738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800573c:	edc7 7a03 	vstr	s15, [r7, #12]
	if(angle_diff > PI_F){rollover = -1;}
 8005740:	edd7 7a03 	vldr	s15, [r7, #12]
 8005744:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8005854 <ps_sample+0x318>
 8005748:	eef4 7ac7 	vcmpe.f32	s15, s14
 800574c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005750:	dd03      	ble.n	800575a <ps_sample+0x21e>
 8005752:	f04f 33ff 	mov.w	r3, #4294967295
 8005756:	623b      	str	r3, [r7, #32]
 8005758:	e00a      	b.n	8005770 <ps_sample+0x234>
	else if(angle_diff < -PI_F){rollover = 1;}
 800575a:	edd7 7a03 	vldr	s15, [r7, #12]
 800575e:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8005858 <ps_sample+0x31c>
 8005762:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800576a:	d501      	bpl.n	8005770 <ps_sample+0x234>
 800576c:	2301      	movs	r3, #1
 800576e:	623b      	str	r3, [r7, #32]
	encoder->turns += rollover;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	441a      	add	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	if(!encoder->first_sample){
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 32dc 	ldrb.w	r3, [r3, #732]	@ 0x2dc
 8005786:	2b00      	cmp	r3, #0
 8005788:	d125      	bne.n	80057d6 <ps_sample+0x29a>
		encoder->turns = 0;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
		if(encoder->angle_singleturn > PI_OVER_2_F){encoder->turns = -1;}
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	edd3 7a01 	vldr	s15, [r3, #4]
 8005798:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800585c <ps_sample+0x320>
 800579c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057a4:	dd05      	ble.n	80057b2 <ps_sample+0x276>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f04f 32ff 	mov.w	r2, #4294967295
 80057ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80057b0:	e00d      	b.n	80057ce <ps_sample+0x292>
		else if(encoder->angle_singleturn < -PI_OVER_2_F){encoder->turns = 1;}
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80057b8:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8005860 <ps_sample+0x324>
 80057bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057c4:	d503      	bpl.n	80057ce <ps_sample+0x292>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
		encoder->first_sample = 1;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 22dc 	strb.w	r2, [r3, #732]	@ 0x2dc
	}



	/* Multi-turn position */
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	ed93 7a01 	vldr	s14, [r3, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057e2:	ee07 3a90 	vmov	s15, r3
 80057e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057ea:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8005850 <ps_sample+0x314>
 80057ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80057f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	edc3 7a03 	vstr	s15, [r3, #12]
			c1 += encoder->angle_multiturn[i]*q*(i - ibar);
		}
		encoder->vel2 = -c1/dt;
*/
	//encoder->velocity = vel2
	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	ed93 7a03 	vldr	s14, [r3, #12]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8005808:	ee77 6a67 	vsub.f32	s13, s14, s15
 800580c:	edd7 7a00 	vldr	s15, [r7]
 8005810:	eeb3 7a03 	vmov.f32	s14, #51	@ 0x41980000  19.0
 8005814:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800582e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64

}
 8005838:	bf00      	nop
 800583a:	3728      	adds	r7, #40	@ 0x28
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	40020000 	.word	0x40020000
 8005844:	20009470 	.word	0x20009470
 8005848:	20000448 	.word	0x20000448
 800584c:	47800000 	.word	0x47800000
 8005850:	40c90fdb 	.word	0x40c90fdb
 8005854:	40490fdb 	.word	0x40490fdb
 8005858:	c0490fdb 	.word	0xc0490fdb
 800585c:	3fc90fdb 	.word	0x3fc90fdb
 8005860:	bfc90fdb 	.word	0xbfc90fdb

08005864 <ps_print>:

void ps_print(EncoderStruct * encoder, int dt_ms){
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
	printf("Raw: %d", encoder->raw);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005872:	4619      	mov	r1, r3
 8005874:	4818      	ldr	r0, [pc, #96]	@ (80058d8 <ps_print+0x74>)
 8005876:	f008 f847 	bl	800d908 <iprintf>
	printf("   Linearized Count: %d", encoder->count);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800587e:	4619      	mov	r1, r3
 8005880:	4816      	ldr	r0, [pc, #88]	@ (80058dc <ps_print+0x78>)
 8005882:	f008 f841 	bl	800d908 <iprintf>
	printf("   Single Turn: %f", encoder->angle_singleturn);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	4618      	mov	r0, r3
 800588c:	f7fa fe8c 	bl	80005a8 <__aeabi_f2d>
 8005890:	4602      	mov	r2, r0
 8005892:	460b      	mov	r3, r1
 8005894:	4812      	ldr	r0, [pc, #72]	@ (80058e0 <ps_print+0x7c>)
 8005896:	f008 f837 	bl	800d908 <iprintf>
	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fa fe82 	bl	80005a8 <__aeabi_f2d>
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	480e      	ldr	r0, [pc, #56]	@ (80058e4 <ps_print+0x80>)
 80058aa:	f008 f82d 	bl	800d908 <iprintf>
	printf("   Electrical: %f", encoder->elec_angle);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fa fe78 	bl	80005a8 <__aeabi_f2d>
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	480a      	ldr	r0, [pc, #40]	@ (80058e8 <ps_print+0x84>)
 80058be:	f008 f823 	bl	800d908 <iprintf>
	printf("   Turns:  %d\r\n", encoder->turns);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058c8:	4619      	mov	r1, r3
 80058ca:	4808      	ldr	r0, [pc, #32]	@ (80058ec <ps_print+0x88>)
 80058cc:	f008 f81c 	bl	800d908 <iprintf>
	//HAL_Delay(dt_ms);
}
 80058d0:	bf00      	nop
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	08011470 	.word	0x08011470
 80058dc:	08011478 	.word	0x08011478
 80058e0:	08011490 	.word	0x08011490
 80058e4:	080114a4 	.word	0x080114a4
 80058e8:	080114b8 	.word	0x080114b8
 80058ec:	080114cc 	.word	0x080114cc

080058f0 <preference_writer_init>:
    __sector = sector;
    __ready = false;
}
*/

void preference_writer_init(PreferenceWriter * pr, uint32_t sector){
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
	flash_writer_init(&pr->fw, sector);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6839      	ldr	r1, [r7, #0]
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fc fdd0 	bl	80024a4 <flash_writer_init>
	pr->sector = sector;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	60da      	str	r2, [r3, #12]
}
 800590a:	bf00      	nop
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <preference_writer_open>:


void preference_writer_open(PreferenceWriter * pr) {
 8005912:	b580      	push	{r7, lr}
 8005914:	b082      	sub	sp, #8
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
    flash_writer_open(&pr->fw);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4618      	mov	r0, r3
 800591e:	f7fc fddf 	bl	80024e0 <flash_writer_open>
    pr->ready = true;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	741a      	strb	r2, [r3, #16]
}
 8005928:	bf00      	nop
 800592a:	3708      	adds	r7, #8
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <preference_writer_ready>:

bool  preference_writer_ready(PreferenceWriter pr) {
 8005930:	b084      	sub	sp, #16
 8005932:	b490      	push	{r4, r7}
 8005934:	af00      	add	r7, sp, #0
 8005936:	f107 0408 	add.w	r4, r7, #8
 800593a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return pr.ready;
 800593e:	7e3b      	ldrb	r3, [r7, #24]
}
 8005940:	4618      	mov	r0, r3
 8005942:	46bd      	mov	sp, r7
 8005944:	bc90      	pop	{r4, r7}
 8005946:	b004      	add	sp, #16
 8005948:	4770      	bx	lr
	...

0800594c <preference_writer_flush>:

void preference_writer_write_float(float x, int index) {
    __float_reg[index] = x;
}

void preference_writer_flush(PreferenceWriter * pr) {
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af02      	add	r7, sp, #8
 8005952:	6078      	str	r0, [r7, #4]
    int offs;
    for (offs = 0; offs < 256; offs++) {
 8005954:	2300      	movs	r3, #0
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	e00d      	b.n	8005976 <preference_writer_flush+0x2a>
        flash_writer_write_int(pr->fw, offs, __int_reg[offs]);
 800595a:	68f9      	ldr	r1, [r7, #12]
 800595c:	4a17      	ldr	r2, [pc, #92]	@ (80059bc <preference_writer_flush+0x70>)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	460b      	mov	r3, r1
 800596a:	ca07      	ldmia	r2, {r0, r1, r2}
 800596c:	f7fc fdd4 	bl	8002518 <flash_writer_write_int>
    for (offs = 0; offs < 256; offs++) {
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	3301      	adds	r3, #1
 8005974:	60fb      	str	r3, [r7, #12]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2bff      	cmp	r3, #255	@ 0xff
 800597a:	ddee      	ble.n	800595a <preference_writer_flush+0xe>
    }
    for (; offs < 320; offs++) {
 800597c:	e012      	b.n	80059a4 <preference_writer_flush+0x58>
        flash_writer_write_float(pr->fw, offs, __float_reg[offs - 256]);
 800597e:	68f9      	ldr	r1, [r7, #12]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005986:	4a0e      	ldr	r2, [pc, #56]	@ (80059c0 <preference_writer_flush+0x74>)
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	edd3 7a00 	vldr	s15, [r3]
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	eeb0 0a67 	vmov.f32	s0, s15
 8005996:	460b      	mov	r3, r1
 8005998:	ca07      	ldmia	r2, {r0, r1, r2}
 800599a:	f7fc fdd3 	bl	8002544 <flash_writer_write_float>
    for (; offs < 320; offs++) {
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3301      	adds	r3, #1
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80059aa:	dbe8      	blt.n	800597e <preference_writer_flush+0x32>
    }
    pr->ready = false;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	741a      	strb	r2, [r3, #16]
}
 80059b2:	bf00      	nop
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	20000448 	.word	0x20000448
 80059c0:	20000348 	.word	0x20000348

080059c4 <preference_writer_load>:

void preference_writer_load(PreferenceWriter pr) {
 80059c4:	b084      	sub	sp, #16
 80059c6:	b590      	push	{r4, r7, lr}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	f107 0418 	add.w	r4, r7, #24
 80059d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int offs;
    for (offs = 0; offs < 256; offs++) {
 80059d4:	2300      	movs	r3, #0
 80059d6:	607b      	str	r3, [r7, #4]
 80059d8:	e00d      	b.n	80059f6 <preference_writer_load+0x32>
        __int_reg[offs] = flash_read_int(pr.fw, offs);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f107 0218 	add.w	r2, r7, #24
 80059e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80059e2:	f7fc fdd5 	bl	8002590 <flash_read_int>
 80059e6:	4602      	mov	r2, r0
 80059e8:	4915      	ldr	r1, [pc, #84]	@ (8005a40 <preference_writer_load+0x7c>)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (offs = 0; offs < 256; offs++) {
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3301      	adds	r3, #1
 80059f4:	607b      	str	r3, [r7, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2bff      	cmp	r3, #255	@ 0xff
 80059fa:	ddee      	ble.n	80059da <preference_writer_load+0x16>
    }
    for(; offs < 320; offs++) {
 80059fc:	e013      	b.n	8005a26 <preference_writer_load+0x62>
        __float_reg[offs - 256] = flash_read_float(pr.fw, offs);
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f5a3 7480 	sub.w	r4, r3, #256	@ 0x100
 8005a06:	4613      	mov	r3, r2
 8005a08:	f107 0218 	add.w	r2, r7, #24
 8005a0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8005a0e:	f7fc fdd5 	bl	80025bc <flash_read_float>
 8005a12:	eef0 7a40 	vmov.f32	s15, s0
 8005a16:	4a0b      	ldr	r2, [pc, #44]	@ (8005a44 <preference_writer_load+0x80>)
 8005a18:	00a3      	lsls	r3, r4, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	edc3 7a00 	vstr	s15, [r3]
    for(; offs < 320; offs++) {
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	3301      	adds	r3, #1
 8005a24:	607b      	str	r3, [r7, #4]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005a2c:	dbe7      	blt.n	80059fe <preference_writer_load+0x3a>
    }
}
 8005a2e:	bf00      	nop
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005a3a:	b004      	add	sp, #16
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	20000448 	.word	0x20000448
 8005a44:	20000348 	.word	0x20000348

08005a48 <preference_writer_close>:

void preference_writer_close(PreferenceWriter *pr) {
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
    pr->ready = false;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	741a      	strb	r2, [r3, #16]
    flash_writer_close(&pr->fw);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7fc fd8c 	bl	8002576 <flash_writer_close>
}
 8005a5e:	bf00      	nop
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
	...

08005a68 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005a6c:	4b18      	ldr	r3, [pc, #96]	@ (8005ad0 <MX_SPI1_Init+0x68>)
 8005a6e:	4a19      	ldr	r2, [pc, #100]	@ (8005ad4 <MX_SPI1_Init+0x6c>)
 8005a70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005a72:	4b17      	ldr	r3, [pc, #92]	@ (8005ad0 <MX_SPI1_Init+0x68>)
 8005a74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005a78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005a7a:	4b15      	ldr	r3, [pc, #84]	@ (8005ad0 <MX_SPI1_Init+0x68>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8005a80:	4b13      	ldr	r3, [pc, #76]	@ (8005ad0 <MX_SPI1_Init+0x68>)
 8005a82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a86:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a88:	4b11      	ldr	r3, [pc, #68]	@ (8005ad0 <MX_SPI1_Init+0x68>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005a8e:	4b10      	ldr	r3, [pc, #64]	@ (8005ad0 <MX_SPI1_Init+0x68>)
 8005a90:	2201      	movs	r2, #1
 8005a92:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005a94:	4b0e      	ldr	r3, [pc, #56]	@ (8005ad0 <MX_SPI1_Init+0x68>)
 8005a96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a9a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8005ad0 <MX_SPI1_Init+0x68>)
 8005a9e:	2228      	movs	r2, #40	@ 0x28
 8005aa0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad0 <MX_SPI1_Init+0x68>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005aa8:	4b09      	ldr	r3, [pc, #36]	@ (8005ad0 <MX_SPI1_Init+0x68>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005aae:	4b08      	ldr	r3, [pc, #32]	@ (8005ad0 <MX_SPI1_Init+0x68>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005ab4:	4b06      	ldr	r3, [pc, #24]	@ (8005ad0 <MX_SPI1_Init+0x68>)
 8005ab6:	220a      	movs	r2, #10
 8005ab8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005aba:	4805      	ldr	r0, [pc, #20]	@ (8005ad0 <MX_SPI1_Init+0x68>)
 8005abc:	f004 f8d8 	bl	8009c70 <HAL_SPI_Init>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8005ac6:	f7ff fb59 	bl	800517c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005aca:	bf00      	nop
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	20009418 	.word	0x20009418
 8005ad4:	40013000 	.word	0x40013000

08005ad8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8005adc:	4b18      	ldr	r3, [pc, #96]	@ (8005b40 <MX_SPI3_Init+0x68>)
 8005ade:	4a19      	ldr	r2, [pc, #100]	@ (8005b44 <MX_SPI3_Init+0x6c>)
 8005ae0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005ae2:	4b17      	ldr	r3, [pc, #92]	@ (8005b40 <MX_SPI3_Init+0x68>)
 8005ae4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005ae8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005aea:	4b15      	ldr	r3, [pc, #84]	@ (8005b40 <MX_SPI3_Init+0x68>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8005af0:	4b13      	ldr	r3, [pc, #76]	@ (8005b40 <MX_SPI3_Init+0x68>)
 8005af2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005af6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005af8:	4b11      	ldr	r3, [pc, #68]	@ (8005b40 <MX_SPI3_Init+0x68>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005afe:	4b10      	ldr	r3, [pc, #64]	@ (8005b40 <MX_SPI3_Init+0x68>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005b04:	4b0e      	ldr	r3, [pc, #56]	@ (8005b40 <MX_SPI3_Init+0x68>)
 8005b06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b0a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005b40 <MX_SPI3_Init+0x68>)
 8005b0e:	2200      	movs	r2, #0
 8005b10:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005b12:	4b0b      	ldr	r3, [pc, #44]	@ (8005b40 <MX_SPI3_Init+0x68>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005b18:	4b09      	ldr	r3, [pc, #36]	@ (8005b40 <MX_SPI3_Init+0x68>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b1e:	4b08      	ldr	r3, [pc, #32]	@ (8005b40 <MX_SPI3_Init+0x68>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8005b24:	4b06      	ldr	r3, [pc, #24]	@ (8005b40 <MX_SPI3_Init+0x68>)
 8005b26:	220a      	movs	r2, #10
 8005b28:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005b2a:	4805      	ldr	r0, [pc, #20]	@ (8005b40 <MX_SPI3_Init+0x68>)
 8005b2c:	f004 f8a0 	bl	8009c70 <HAL_SPI_Init>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8005b36:	f7ff fb21 	bl	800517c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005b3a:	bf00      	nop
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	20009470 	.word	0x20009470
 8005b44:	40003c00 	.word	0x40003c00

08005b48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08c      	sub	sp, #48	@ 0x30
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b50:	f107 031c 	add.w	r3, r7, #28
 8005b54:	2200      	movs	r2, #0
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	605a      	str	r2, [r3, #4]
 8005b5a:	609a      	str	r2, [r3, #8]
 8005b5c:	60da      	str	r2, [r3, #12]
 8005b5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a32      	ldr	r2, [pc, #200]	@ (8005c30 <HAL_SPI_MspInit+0xe8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d12c      	bne.n	8005bc4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61bb      	str	r3, [r7, #24]
 8005b6e:	4b31      	ldr	r3, [pc, #196]	@ (8005c34 <HAL_SPI_MspInit+0xec>)
 8005b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b72:	4a30      	ldr	r2, [pc, #192]	@ (8005c34 <HAL_SPI_MspInit+0xec>)
 8005b74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b7a:	4b2e      	ldr	r3, [pc, #184]	@ (8005c34 <HAL_SPI_MspInit+0xec>)
 8005b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b82:	61bb      	str	r3, [r7, #24]
 8005b84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b86:	2300      	movs	r3, #0
 8005b88:	617b      	str	r3, [r7, #20]
 8005b8a:	4b2a      	ldr	r3, [pc, #168]	@ (8005c34 <HAL_SPI_MspInit+0xec>)
 8005b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b8e:	4a29      	ldr	r2, [pc, #164]	@ (8005c34 <HAL_SPI_MspInit+0xec>)
 8005b90:	f043 0301 	orr.w	r3, r3, #1
 8005b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b96:	4b27      	ldr	r3, [pc, #156]	@ (8005c34 <HAL_SPI_MspInit+0xec>)
 8005b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	617b      	str	r3, [r7, #20]
 8005ba0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005ba2:	23e0      	movs	r3, #224	@ 0xe0
 8005ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005baa:	2300      	movs	r3, #0
 8005bac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005bb2:	2305      	movs	r3, #5
 8005bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bb6:	f107 031c 	add.w	r3, r7, #28
 8005bba:	4619      	mov	r1, r3
 8005bbc:	481e      	ldr	r0, [pc, #120]	@ (8005c38 <HAL_SPI_MspInit+0xf0>)
 8005bbe:	f003 f859 	bl	8008c74 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005bc2:	e031      	b.n	8005c28 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI3)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8005c3c <HAL_SPI_MspInit+0xf4>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d12c      	bne.n	8005c28 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005bce:	2300      	movs	r3, #0
 8005bd0:	613b      	str	r3, [r7, #16]
 8005bd2:	4b18      	ldr	r3, [pc, #96]	@ (8005c34 <HAL_SPI_MspInit+0xec>)
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd6:	4a17      	ldr	r2, [pc, #92]	@ (8005c34 <HAL_SPI_MspInit+0xec>)
 8005bd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8005bde:	4b15      	ldr	r3, [pc, #84]	@ (8005c34 <HAL_SPI_MspInit+0xec>)
 8005be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005be6:	613b      	str	r3, [r7, #16]
 8005be8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bea:	2300      	movs	r3, #0
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	4b11      	ldr	r3, [pc, #68]	@ (8005c34 <HAL_SPI_MspInit+0xec>)
 8005bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf2:	4a10      	ldr	r2, [pc, #64]	@ (8005c34 <HAL_SPI_MspInit+0xec>)
 8005bf4:	f043 0304 	orr.w	r3, r3, #4
 8005bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8005bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8005c34 <HAL_SPI_MspInit+0xec>)
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bfe:	f003 0304 	and.w	r3, r3, #4
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005c06:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8005c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c10:	2300      	movs	r3, #0
 8005c12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c14:	2303      	movs	r3, #3
 8005c16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005c18:	2306      	movs	r3, #6
 8005c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c1c:	f107 031c 	add.w	r3, r7, #28
 8005c20:	4619      	mov	r1, r3
 8005c22:	4807      	ldr	r0, [pc, #28]	@ (8005c40 <HAL_SPI_MspInit+0xf8>)
 8005c24:	f003 f826 	bl	8008c74 <HAL_GPIO_Init>
}
 8005c28:	bf00      	nop
 8005c2a:	3730      	adds	r7, #48	@ 0x30
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	40013000 	.word	0x40013000
 8005c34:	40023800 	.word	0x40023800
 8005c38:	40020000 	.word	0x40020000
 8005c3c:	40003c00 	.word	0x40003c00
 8005c40:	40020800 	.word	0x40020800

08005c44 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8005c48:	4b07      	ldr	r3, [pc, #28]	@ (8005c68 <FLASH_Unlock+0x24>)
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	da05      	bge.n	8005c5c <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8005c50:	4b05      	ldr	r3, [pc, #20]	@ (8005c68 <FLASH_Unlock+0x24>)
 8005c52:	4a06      	ldr	r2, [pc, #24]	@ (8005c6c <FLASH_Unlock+0x28>)
 8005c54:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8005c56:	4b04      	ldr	r3, [pc, #16]	@ (8005c68 <FLASH_Unlock+0x24>)
 8005c58:	4a05      	ldr	r2, [pc, #20]	@ (8005c70 <FLASH_Unlock+0x2c>)
 8005c5a:	605a      	str	r2, [r3, #4]
  }  
}
 8005c5c:	bf00      	nop
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	40023c00 	.word	0x40023c00
 8005c6c:	45670123 	.word	0x45670123
 8005c70:	cdef89ab 	.word	0xcdef89ab

08005c74 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8005c74:	b480      	push	{r7}
 8005c76:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005c78:	4b05      	ldr	r3, [pc, #20]	@ (8005c90 <FLASH_Lock+0x1c>)
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	4a04      	ldr	r2, [pc, #16]	@ (8005c90 <FLASH_Lock+0x1c>)
 8005c7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c82:	6113      	str	r3, [r2, #16]
}
 8005c84:	bf00      	nop
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	40023c00 	.word	0x40023c00

08005c94 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE2;
 8005ca4:	2309      	movs	r3, #9
 8005ca6:	72fb      	strb	r3, [r7, #11]
 
  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8005ca8:	78fb      	ldrb	r3, [r7, #3]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d102      	bne.n	8005cb4 <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	e010      	b.n	8005cd6 <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 8005cb4:	78fb      	ldrb	r3, [r7, #3]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d103      	bne.n	8005cc2 <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005cba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	e009      	b.n	8005cd6 <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 8005cc2:	78fb      	ldrb	r3, [r7, #3]
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d103      	bne.n	8005cd0 <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005cc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ccc:	60fb      	str	r3, [r7, #12]
 8005cce:	e002      	b.n	8005cd6 <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005cd0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005cd4:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation2();
 8005cd6:	f000 f8bf 	bl	8005e58 <FLASH_WaitForLastOperation2>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE2)
 8005cde:	7afb      	ldrb	r3, [r7, #11]
 8005ce0:	2b09      	cmp	r3, #9
 8005ce2:	d12f      	bne.n	8005d44 <FLASH_EraseSector+0xb0>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 8005ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8005d50 <FLASH_EraseSector+0xbc>)
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	4a19      	ldr	r2, [pc, #100]	@ (8005d50 <FLASH_EraseSector+0xbc>)
 8005cea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cee:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 8005cf0:	4b17      	ldr	r3, [pc, #92]	@ (8005d50 <FLASH_EraseSector+0xbc>)
 8005cf2:	691a      	ldr	r2, [r3, #16]
 8005cf4:	4916      	ldr	r1, [pc, #88]	@ (8005d50 <FLASH_EraseSector+0xbc>)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	610b      	str	r3, [r1, #16]
    FLASH->CR &= SECTOR_MASK;
 8005cfc:	4b14      	ldr	r3, [pc, #80]	@ (8005d50 <FLASH_EraseSector+0xbc>)
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	4a13      	ldr	r2, [pc, #76]	@ (8005d50 <FLASH_EraseSector+0xbc>)
 8005d02:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005d06:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8005d08:	4b11      	ldr	r3, [pc, #68]	@ (8005d50 <FLASH_EraseSector+0xbc>)
 8005d0a:	691a      	ldr	r2, [r3, #16]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	4a0f      	ldr	r2, [pc, #60]	@ (8005d50 <FLASH_EraseSector+0xbc>)
 8005d12:	f043 0302 	orr.w	r3, r3, #2
 8005d16:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8005d18:	4b0d      	ldr	r3, [pc, #52]	@ (8005d50 <FLASH_EraseSector+0xbc>)
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	4a0c      	ldr	r2, [pc, #48]	@ (8005d50 <FLASH_EraseSector+0xbc>)
 8005d1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d22:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation2();
 8005d24:	f000 f898 	bl	8005e58 <FLASH_WaitForLastOperation2>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 8005d2c:	4b08      	ldr	r3, [pc, #32]	@ (8005d50 <FLASH_EraseSector+0xbc>)
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	4a07      	ldr	r2, [pc, #28]	@ (8005d50 <FLASH_EraseSector+0xbc>)
 8005d32:	f023 0302 	bic.w	r3, r3, #2
 8005d36:	6113      	str	r3, [r2, #16]
    FLASH->CR &= SECTOR_MASK; 
 8005d38:	4b05      	ldr	r3, [pc, #20]	@ (8005d50 <FLASH_EraseSector+0xbc>)
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	4a04      	ldr	r2, [pc, #16]	@ (8005d50 <FLASH_EraseSector+0xbc>)
 8005d3e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005d42:	6113      	str	r3, [r2, #16]
  }
  /* Return the Erase Status */
  return status;
 8005d44:	7afb      	ldrb	r3, [r7, #11]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	40023c00 	.word	0x40023c00

08005d54 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE2;
 8005d5e:	2309      	movs	r3, #9
 8005d60:	73fb      	strb	r3, [r7, #15]
 
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation2();
 8005d62:	f000 f879 	bl	8005e58 <FLASH_WaitForLastOperation2>
 8005d66:	4603      	mov	r3, r0
 8005d68:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE2)
 8005d6a:	7bfb      	ldrb	r3, [r7, #15]
 8005d6c:	2b09      	cmp	r3, #9
 8005d6e:	d11e      	bne.n	8005dae <FLASH_ProgramWord+0x5a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8005d70:	4b11      	ldr	r3, [pc, #68]	@ (8005db8 <FLASH_ProgramWord+0x64>)
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	4a10      	ldr	r2, [pc, #64]	@ (8005db8 <FLASH_ProgramWord+0x64>)
 8005d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d7a:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 8005d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8005db8 <FLASH_ProgramWord+0x64>)
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	4a0d      	ldr	r2, [pc, #52]	@ (8005db8 <FLASH_ProgramWord+0x64>)
 8005d82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d86:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 8005d88:	4b0b      	ldr	r3, [pc, #44]	@ (8005db8 <FLASH_ProgramWord+0x64>)
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8005db8 <FLASH_ProgramWord+0x64>)
 8005d8e:	f043 0301 	orr.w	r3, r3, #1
 8005d92:	6113      	str	r3, [r2, #16]
  
    *(__IO uint32_t*)Address = Data;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation2();
 8005d9a:	f000 f85d 	bl	8005e58 <FLASH_WaitForLastOperation2>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	73fb      	strb	r3, [r7, #15]
 
    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8005da2:	4b05      	ldr	r3, [pc, #20]	@ (8005db8 <FLASH_ProgramWord+0x64>)
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	4a04      	ldr	r2, [pc, #16]	@ (8005db8 <FLASH_ProgramWord+0x64>)
 8005da8:	f023 0301 	bic.w	r3, r3, #1
 8005dac:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	40023c00 	.word	0x40023c00

08005dbc <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42xx/43xxx and STM32F401xx/411xE devices)   
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8005dc4:	4a04      	ldr	r2, [pc, #16]	@ (8005dd8 <FLASH_ClearFlag+0x1c>)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	60d3      	str	r3, [r2, #12]
}
 8005dca:	bf00      	nop
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	40023c00 	.word	0x40023c00

08005ddc <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_RD2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE2;
 8005de2:	2309      	movs	r3, #9
 8005de4:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8005de6:	4b1b      	ldr	r3, [pc, #108]	@ (8005e54 <FLASH_GetStatus+0x78>)
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005df2:	d102      	bne.n	8005dfa <FLASH_GetStatus+0x1e>
  {
    flashstatus = FLASH_BUSY2;
 8005df4:	2301      	movs	r3, #1
 8005df6:	71fb      	strb	r3, [r7, #7]
 8005df8:	e025      	b.n	8005e46 <FLASH_GetStatus+0x6a>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 8005dfa:	4b16      	ldr	r3, [pc, #88]	@ (8005e54 <FLASH_GetStatus+0x78>)
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f003 0310 	and.w	r3, r3, #16
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <FLASH_GetStatus+0x30>
    { 
      flashstatus = FLASH_ERROR_WRP2;
 8005e06:	2306      	movs	r3, #6
 8005e08:	71fb      	strb	r3, [r7, #7]
 8005e0a:	e01c      	b.n	8005e46 <FLASH_GetStatus+0x6a>
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 8005e0c:	4b11      	ldr	r3, [pc, #68]	@ (8005e54 <FLASH_GetStatus+0x78>)
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <FLASH_GetStatus+0x42>
      { 
        flashstatus = FLASH_ERROR_RD2;
 8005e18:	2302      	movs	r3, #2
 8005e1a:	71fb      	strb	r3, [r7, #7]
 8005e1c:	e013      	b.n	8005e46 <FLASH_GetStatus+0x6a>
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
 8005e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e54 <FLASH_GetStatus+0x78>)
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <FLASH_GetStatus+0x54>
        {
          flashstatus = FLASH_ERROR_PROGRAM2; 
 8005e2a:	2307      	movs	r3, #7
 8005e2c:	71fb      	strb	r3, [r7, #7]
 8005e2e:	e00a      	b.n	8005e46 <FLASH_GetStatus+0x6a>
        }
        else
        {
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 8005e30:	4b08      	ldr	r3, [pc, #32]	@ (8005e54 <FLASH_GetStatus+0x78>)
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <FLASH_GetStatus+0x66>
          {
            flashstatus = FLASH_ERROR_OPERATION2;
 8005e3c:	2308      	movs	r3, #8
 8005e3e:	71fb      	strb	r3, [r7, #7]
 8005e40:	e001      	b.n	8005e46 <FLASH_GetStatus+0x6a>
          }
          else
          {
            flashstatus = FLASH_COMPLETE2;
 8005e42:	2309      	movs	r3, #9
 8005e44:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 8005e46:	79fb      	ldrb	r3, [r7, #7]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr
 8005e54:	40023c00 	.word	0x40023c00

08005e58 <FLASH_WaitForLastOperation2>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_WaitForLastOperation2(void)
{ 
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE2;
 8005e5e:	2309      	movs	r3, #9
 8005e60:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 8005e62:	f7ff ffbb 	bl	8005ddc <FLASH_GetStatus>
 8005e66:	4603      	mov	r3, r0
 8005e68:	71fb      	strb	r3, [r7, #7]
 
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY2)
 8005e6a:	e003      	b.n	8005e74 <FLASH_WaitForLastOperation2+0x1c>
  {
    status = FLASH_GetStatus();
 8005e6c:	f7ff ffb6 	bl	8005ddc <FLASH_GetStatus>
 8005e70:	4603      	mov	r3, r0
 8005e72:	71fb      	strb	r3, [r7, #7]
  while(status == FLASH_BUSY2)
 8005e74:	79fb      	ldrb	r3, [r7, #7]
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d0f7      	beq.n	8005e6c <FLASH_WaitForLastOperation2+0x14>
  }
  /* Return the operation status */
  return status;
 8005e7c:	79fb      	ldrb	r3, [r7, #7]
 8005e7e:	b2db      	uxtb	r3, r3
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e8e:	2300      	movs	r3, #0
 8005e90:	607b      	str	r3, [r7, #4]
 8005e92:	4b10      	ldr	r3, [pc, #64]	@ (8005ed4 <HAL_MspInit+0x4c>)
 8005e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e96:	4a0f      	ldr	r2, [pc, #60]	@ (8005ed4 <HAL_MspInit+0x4c>)
 8005e98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed4 <HAL_MspInit+0x4c>)
 8005ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ea2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ea6:	607b      	str	r3, [r7, #4]
 8005ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005eaa:	2300      	movs	r3, #0
 8005eac:	603b      	str	r3, [r7, #0]
 8005eae:	4b09      	ldr	r3, [pc, #36]	@ (8005ed4 <HAL_MspInit+0x4c>)
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb2:	4a08      	ldr	r2, [pc, #32]	@ (8005ed4 <HAL_MspInit+0x4c>)
 8005eb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005eba:	4b06      	ldr	r3, [pc, #24]	@ (8005ed4 <HAL_MspInit+0x4c>)
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ec2:	603b      	str	r3, [r7, #0]
 8005ec4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8005ec6:	2006      	movs	r0, #6
 8005ec8:	f002 fe00 	bl	8008acc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005ecc:	bf00      	nop
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	40023800 	.word	0x40023800

08005ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005edc:	bf00      	nop
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005eea:	bf00      	nop
 8005eec:	e7fd      	b.n	8005eea <HardFault_Handler+0x4>

08005eee <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ef2:	bf00      	nop
 8005ef4:	e7fd      	b.n	8005ef2 <MemManage_Handler+0x4>

08005ef6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005efa:	bf00      	nop
 8005efc:	e7fd      	b.n	8005efa <BusFault_Handler+0x4>

08005efe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005efe:	b480      	push	{r7}
 8005f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005f02:	bf00      	nop
 8005f04:	e7fd      	b.n	8005f02 <UsageFault_Handler+0x4>

08005f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005f06:	b480      	push	{r7}
 8005f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005f0a:	bf00      	nop
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005f14:	b480      	push	{r7}
 8005f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005f18:	bf00      	nop
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005f22:	b480      	push	{r7}
 8005f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005f26:	bf00      	nop
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f34:	f001 fa4e 	bl	80073d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f38:	bf00      	nop
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005f40:	4803      	ldr	r0, [pc, #12]	@ (8005f50 <CAN1_RX0_IRQHandler+0x14>)
 8005f42:	f002 faba 	bl	80084ba <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  can_tx_rx();
 8005f46:	f000 f849 	bl	8005fdc <can_tx_rx>

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8005f4a:	bf00      	nop
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	2000030c 	.word	0x2000030c

08005f54 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	//LED_HIGH	// Useful for timing

	/* Sample ADCs */
	analog_sample(&controller);
 8005f58:	480c      	ldr	r0, [pc, #48]	@ (8005f8c <TIM1_UP_TIM10_IRQHandler+0x38>)
 8005f5a:	f7fc fbed 	bl	8002738 <analog_sample>

	/* Sample position sensor */
	ps_sample(&comm_encoder, DT);
 8005f5e:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8005f90 <TIM1_UP_TIM10_IRQHandler+0x3c>
 8005f62:	480c      	ldr	r0, [pc, #48]	@ (8005f94 <TIM1_UP_TIM10_IRQHandler+0x40>)
 8005f64:	f7ff faea 	bl	800553c <ps_sample>

	/* Run Finite State Machine */
	run_fsm(&state);
 8005f68:	480b      	ldr	r0, [pc, #44]	@ (8005f98 <TIM1_UP_TIM10_IRQHandler+0x44>)
 8005f6a:	f7fd fba1 	bl	80036b0 <run_fsm>

	/* Check for CAN messages */
	can_tx_rx();
 8005f6e:	f000 f835 	bl	8005fdc <can_tx_rx>

	/* increment loop count */
	controller.loop_count++;
 8005f72:	4b06      	ldr	r3, [pc, #24]	@ (8005f8c <TIM1_UP_TIM10_IRQHandler+0x38>)
 8005f74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005f78:	3301      	adds	r3, #1
 8005f7a:	4a04      	ldr	r2, [pc, #16]	@ (8005f8c <TIM1_UP_TIM10_IRQHandler+0x38>)
 8005f7c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
	//LED_LOW;

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005f80:	4806      	ldr	r0, [pc, #24]	@ (8005f9c <TIM1_UP_TIM10_IRQHandler+0x48>)
 8005f82:	f004 fb4d 	bl	800a620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005f86:	bf00      	nop
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	2000085c 	.word	0x2000085c
 8005f90:	37d1b717 	.word	0x37d1b717
 8005f94:	20000b78 	.word	0x20000b78
 8005f98:	20000b68 	.word	0x20000b68
 8005f9c:	200094d0 	.word	0x200094d0

08005fa0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8005fa6:	480a      	ldr	r0, [pc, #40]	@ (8005fd0 <USART2_IRQHandler+0x30>)
 8005fa8:	f005 faf8 	bl	800b59c <HAL_UART_IRQHandler>
	state.print_uart_msg = 1;
 8005fac:	4b09      	ldr	r3, [pc, #36]	@ (8005fd4 <USART2_IRQHandler+0x34>)
 8005fae:	2201      	movs	r2, #1
 8005fb0:	711a      	strb	r2, [r3, #4]

	char c = Serial2RxBuffer[0];
 8005fb2:	4b09      	ldr	r3, [pc, #36]	@ (8005fd8 <USART2_IRQHandler+0x38>)
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	71fb      	strb	r3, [r7, #7]
	update_fsm(&state, c);
 8005fb8:	79fb      	ldrb	r3, [r7, #7]
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4805      	ldr	r0, [pc, #20]	@ (8005fd4 <USART2_IRQHandler+0x34>)
 8005fbe:	f7fd fded 	bl	8003b9c <update_fsm>

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005fc2:	4803      	ldr	r0, [pc, #12]	@ (8005fd0 <USART2_IRQHandler+0x30>)
 8005fc4:	f005 faea 	bl	800b59c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8005fc8:	bf00      	nop
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	20009518 	.word	0x20009518
 8005fd4:	20000b68 	.word	0x20000b68
 8005fd8:	20009414 	.word	0x20009414

08005fdc <can_tx_rx>:

/* USER CODE BEGIN 1 */

void can_tx_rx(void){
 8005fdc:	b590      	push	{r4, r7, lr}
 8005fde:	ed2d 8b04 	vpush	{d8-d9}
 8005fe2:	b099      	sub	sp, #100	@ 0x64
 8005fe4:	af16      	add	r7, sp, #88	@ 0x58

	int no_mesage = HAL_CAN_GetRxMessage(&CAN_H, CAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Read CAN
 8005fe6:	4ba4      	ldr	r3, [pc, #656]	@ (8006278 <can_tx_rx+0x29c>)
 8005fe8:	4aa4      	ldr	r2, [pc, #656]	@ (800627c <can_tx_rx+0x2a0>)
 8005fea:	2100      	movs	r1, #0
 8005fec:	48a4      	ldr	r0, [pc, #656]	@ (8006280 <can_tx_rx+0x2a4>)
 8005fee:	f002 f952 	bl	8008296 <HAL_CAN_GetRxMessage>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	607b      	str	r3, [r7, #4]
	if(!no_mesage){
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f040 822b 	bne.w	8006454 <can_tx_rx+0x478>
		state.print_uart_msg = 0;
 8005ffe:	4ba1      	ldr	r3, [pc, #644]	@ (8006284 <can_tx_rx+0x2a8>)
 8006000:	2200      	movs	r2, #0
 8006002:	711a      	strb	r2, [r3, #4]
		uint32_t TxMailbox;

		/* Check for special commands by function code*/
		switch (can_rx.rx_header.StdId >> 7)
 8006004:	4ba0      	ldr	r3, [pc, #640]	@ (8006288 <can_tx_rx+0x2ac>)
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	09db      	lsrs	r3, r3, #7
 800600a:	2b05      	cmp	r3, #5
 800600c:	f200 81dc 	bhi.w	80063c8 <can_tx_rx+0x3ec>
 8006010:	a201      	add	r2, pc, #4	@ (adr r2, 8006018 <can_tx_rx+0x3c>)
 8006012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006016:	bf00      	nop
 8006018:	08006031 	.word	0x08006031
 800601c:	080060ad 	.word	0x080060ad
 8006020:	08006151 	.word	0x08006151
 8006024:	080061cd 	.word	0x080061cd
 8006028:	080062ad 	.word	0x080062ad
 800602c:	08006329 	.word	0x08006329
			{
				case FC_RESET:
					update_fsm(&state, MENU_CMD);
 8006030:	211b      	movs	r1, #27
 8006032:	4894      	ldr	r0, [pc, #592]	@ (8006284 <can_tx_rx+0x2a8>)
 8006034:	f7fd fdb2 	bl	8003b9c <update_fsm>
					pack_reply_default(can_rx, &can_tx, comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, VERSION_NUM, hall_cal.hall_cal_state, state.state);	// Pack response
 8006038:	4b94      	ldr	r3, [pc, #592]	@ (800628c <can_tx_rx+0x2b0>)
 800603a:	ed93 7a03 	vldr	s14, [r3, #12]
 800603e:	4b94      	ldr	r3, [pc, #592]	@ (8006290 <can_tx_rx+0x2b4>)
 8006040:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8006044:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8006048:	4b90      	ldr	r3, [pc, #576]	@ (800628c <can_tx_rx+0x2b0>)
 800604a:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 800604e:	4b90      	ldr	r3, [pc, #576]	@ (8006290 <can_tx_rx+0x2b4>)
 8006050:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8006054:	eec7 8a27 	vdiv.f32	s17, s14, s15
 8006058:	4b8e      	ldr	r3, [pc, #568]	@ (8006294 <can_tx_rx+0x2b8>)
 800605a:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800605e:	4b8c      	ldr	r3, [pc, #560]	@ (8006290 <can_tx_rx+0x2b4>)
 8006060:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8006064:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006068:	4b89      	ldr	r3, [pc, #548]	@ (8006290 <can_tx_rx+0x2b4>)
 800606a:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800606e:	ee27 9a27 	vmul.f32	s18, s14, s15
 8006072:	4b89      	ldr	r3, [pc, #548]	@ (8006298 <can_tx_rx+0x2bc>)
 8006074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006076:	4a83      	ldr	r2, [pc, #524]	@ (8006284 <can_tx_rx+0x2a8>)
 8006078:	7812      	ldrb	r2, [r2, #0]
 800607a:	4c83      	ldr	r4, [pc, #524]	@ (8006288 <can_tx_rx+0x2ac>)
 800607c:	9215      	str	r2, [sp, #84]	@ 0x54
 800607e:	9314      	str	r3, [sp, #80]	@ 0x50
 8006080:	2305      	movs	r3, #5
 8006082:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006084:	4b85      	ldr	r3, [pc, #532]	@ (800629c <can_tx_rx+0x2c0>)
 8006086:	9312      	str	r3, [sp, #72]	@ 0x48
 8006088:	4668      	mov	r0, sp
 800608a:	f104 0310 	add.w	r3, r4, #16
 800608e:	2248      	movs	r2, #72	@ 0x48
 8006090:	4619      	mov	r1, r3
 8006092:	f007 fe34 	bl	800dcfe <memcpy>
 8006096:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800609a:	eeb0 1a49 	vmov.f32	s2, s18
 800609e:	eef0 0a68 	vmov.f32	s1, s17
 80060a2:	eeb0 0a48 	vmov.f32	s0, s16
 80060a6:	f7fb fe29 	bl	8001cfc <pack_reply_default>
					break;
 80060aa:	e1c7      	b.n	800643c <can_tx_rx+0x460>

				case FC_MANAGE_CONFIG:
					if (can_rx.data[0] <= 1){
 80060ac:	4b76      	ldr	r3, [pc, #472]	@ (8006288 <can_tx_rx+0x2ac>)
 80060ae:	7a1b      	ldrb	r3, [r3, #8]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d813      	bhi.n	80060dc <can_tx_rx+0x100>
						pack_reply_config(can_rx, &can_tx, VERSION_NUM, state.state);
 80060b4:	4b73      	ldr	r3, [pc, #460]	@ (8006284 <can_tx_rx+0x2a8>)
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	4c73      	ldr	r4, [pc, #460]	@ (8006288 <can_tx_rx+0x2ac>)
 80060ba:	9314      	str	r3, [sp, #80]	@ 0x50
 80060bc:	2305      	movs	r3, #5
 80060be:	9313      	str	r3, [sp, #76]	@ 0x4c
 80060c0:	4b76      	ldr	r3, [pc, #472]	@ (800629c <can_tx_rx+0x2c0>)
 80060c2:	9312      	str	r3, [sp, #72]	@ 0x48
 80060c4:	4668      	mov	r0, sp
 80060c6:	f104 0310 	add.w	r3, r4, #16
 80060ca:	2248      	movs	r2, #72	@ 0x48
 80060cc:	4619      	mov	r1, r3
 80060ce:	f007 fe16 	bl	800dcfe <memcpy>
 80060d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80060d6:	f7fb fe91 	bl	8001dfc <pack_reply_config>
					}
					else{
						pack_reply_default(can_rx, &can_tx, comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, VERSION_NUM, hall_cal.hall_cal_state, state.state);
					}
					break;
 80060da:	e1af      	b.n	800643c <can_tx_rx+0x460>
						pack_reply_default(can_rx, &can_tx, comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, VERSION_NUM, hall_cal.hall_cal_state, state.state);
 80060dc:	4b6b      	ldr	r3, [pc, #428]	@ (800628c <can_tx_rx+0x2b0>)
 80060de:	ed93 7a03 	vldr	s14, [r3, #12]
 80060e2:	4b6b      	ldr	r3, [pc, #428]	@ (8006290 <can_tx_rx+0x2b4>)
 80060e4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80060e8:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80060ec:	4b67      	ldr	r3, [pc, #412]	@ (800628c <can_tx_rx+0x2b0>)
 80060ee:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 80060f2:	4b67      	ldr	r3, [pc, #412]	@ (8006290 <can_tx_rx+0x2b4>)
 80060f4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80060f8:	eec7 8a27 	vdiv.f32	s17, s14, s15
 80060fc:	4b65      	ldr	r3, [pc, #404]	@ (8006294 <can_tx_rx+0x2b8>)
 80060fe:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8006102:	4b63      	ldr	r3, [pc, #396]	@ (8006290 <can_tx_rx+0x2b4>)
 8006104:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8006108:	ee27 7a27 	vmul.f32	s14, s14, s15
 800610c:	4b60      	ldr	r3, [pc, #384]	@ (8006290 <can_tx_rx+0x2b4>)
 800610e:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8006112:	ee27 9a27 	vmul.f32	s18, s14, s15
 8006116:	4b60      	ldr	r3, [pc, #384]	@ (8006298 <can_tx_rx+0x2bc>)
 8006118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800611a:	4a5a      	ldr	r2, [pc, #360]	@ (8006284 <can_tx_rx+0x2a8>)
 800611c:	7812      	ldrb	r2, [r2, #0]
 800611e:	4c5a      	ldr	r4, [pc, #360]	@ (8006288 <can_tx_rx+0x2ac>)
 8006120:	9215      	str	r2, [sp, #84]	@ 0x54
 8006122:	9314      	str	r3, [sp, #80]	@ 0x50
 8006124:	2305      	movs	r3, #5
 8006126:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006128:	4b5c      	ldr	r3, [pc, #368]	@ (800629c <can_tx_rx+0x2c0>)
 800612a:	9312      	str	r3, [sp, #72]	@ 0x48
 800612c:	4668      	mov	r0, sp
 800612e:	f104 0310 	add.w	r3, r4, #16
 8006132:	2248      	movs	r2, #72	@ 0x48
 8006134:	4619      	mov	r1, r3
 8006136:	f007 fde2 	bl	800dcfe <memcpy>
 800613a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800613e:	eeb0 1a49 	vmov.f32	s2, s18
 8006142:	eef0 0a68 	vmov.f32	s1, s17
 8006146:	eeb0 0a48 	vmov.f32	s0, s16
 800614a:	f7fb fdd7 	bl	8001cfc <pack_reply_default>
					break;
 800614e:	e175      	b.n	800643c <can_tx_rx+0x460>

				case FC_SET_ZERO:
					update_fsm(&state, ZERO_CMD);
 8006150:	217a      	movs	r1, #122	@ 0x7a
 8006152:	484c      	ldr	r0, [pc, #304]	@ (8006284 <can_tx_rx+0x2a8>)
 8006154:	f7fd fd22 	bl	8003b9c <update_fsm>
					pack_reply_default(can_rx, &can_tx, comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, VERSION_NUM, hall_cal.hall_cal_state, state.state);
 8006158:	4b4c      	ldr	r3, [pc, #304]	@ (800628c <can_tx_rx+0x2b0>)
 800615a:	ed93 7a03 	vldr	s14, [r3, #12]
 800615e:	4b4c      	ldr	r3, [pc, #304]	@ (8006290 <can_tx_rx+0x2b4>)
 8006160:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8006164:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8006168:	4b48      	ldr	r3, [pc, #288]	@ (800628c <can_tx_rx+0x2b0>)
 800616a:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 800616e:	4b48      	ldr	r3, [pc, #288]	@ (8006290 <can_tx_rx+0x2b4>)
 8006170:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8006174:	eec7 8a27 	vdiv.f32	s17, s14, s15
 8006178:	4b46      	ldr	r3, [pc, #280]	@ (8006294 <can_tx_rx+0x2b8>)
 800617a:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800617e:	4b44      	ldr	r3, [pc, #272]	@ (8006290 <can_tx_rx+0x2b4>)
 8006180:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8006184:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006188:	4b41      	ldr	r3, [pc, #260]	@ (8006290 <can_tx_rx+0x2b4>)
 800618a:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800618e:	ee27 9a27 	vmul.f32	s18, s14, s15
 8006192:	4b41      	ldr	r3, [pc, #260]	@ (8006298 <can_tx_rx+0x2bc>)
 8006194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006196:	4a3b      	ldr	r2, [pc, #236]	@ (8006284 <can_tx_rx+0x2a8>)
 8006198:	7812      	ldrb	r2, [r2, #0]
 800619a:	4c3b      	ldr	r4, [pc, #236]	@ (8006288 <can_tx_rx+0x2ac>)
 800619c:	9215      	str	r2, [sp, #84]	@ 0x54
 800619e:	9314      	str	r3, [sp, #80]	@ 0x50
 80061a0:	2305      	movs	r3, #5
 80061a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80061a4:	4b3d      	ldr	r3, [pc, #244]	@ (800629c <can_tx_rx+0x2c0>)
 80061a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80061a8:	4668      	mov	r0, sp
 80061aa:	f104 0310 	add.w	r3, r4, #16
 80061ae:	2248      	movs	r2, #72	@ 0x48
 80061b0:	4619      	mov	r1, r3
 80061b2:	f007 fda4 	bl	800dcfe <memcpy>
 80061b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80061ba:	eeb0 1a49 	vmov.f32	s2, s18
 80061be:	eef0 0a68 	vmov.f32	s1, s17
 80061c2:	eeb0 0a48 	vmov.f32	s0, s16
 80061c6:	f7fb fd99 	bl	8001cfc <pack_reply_default>
					break;
 80061ca:	e137      	b.n	800643c <can_tx_rx+0x460>

				case FC_HALL_CAL:
					hall_cal.hall_cal_count = 0;
 80061cc:	4b32      	ldr	r3, [pc, #200]	@ (8006298 <can_tx_rx+0x2bc>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	625a      	str	r2, [r3, #36]	@ 0x24
					hall_cal.hall_cal_state = CODE_HALL_CALIBRATING; // calibrating
 80061d2:	4b31      	ldr	r3, [pc, #196]	@ (8006298 <can_tx_rx+0x2bc>)
 80061d4:	2201      	movs	r2, #1
 80061d6:	629a      	str	r2, [r3, #40]	@ 0x28
					/*----- convert theta_mech to 0~359.9999deg -----*/
					hall_cal.hall_present_pos = controller.theta_mech;
 80061d8:	4b2e      	ldr	r3, [pc, #184]	@ (8006294 <can_tx_rx+0x2b8>)
 80061da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061dc:	4a2e      	ldr	r2, [pc, #184]	@ (8006298 <can_tx_rx+0x2bc>)
 80061de:	6113      	str	r3, [r2, #16]
					hall_cal.hall_cal_pcmd = controller.theta_mech;
 80061e0:	4b2c      	ldr	r3, [pc, #176]	@ (8006294 <can_tx_rx+0x2b8>)
 80061e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e4:	4a2c      	ldr	r2, [pc, #176]	@ (8006298 <can_tx_rx+0x2bc>)
 80061e6:	6093      	str	r3, [r2, #8]
					static float _f_cal_round;
					modff(hall_cal.hall_cal_pcmd/(2*PI_F),&_f_cal_round);
 80061e8:	4b2b      	ldr	r3, [pc, #172]	@ (8006298 <can_tx_rx+0x2bc>)
 80061ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80061ee:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 80062a0 <can_tx_rx+0x2c4>
 80061f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80061f6:	482b      	ldr	r0, [pc, #172]	@ (80062a4 <can_tx_rx+0x2c8>)
 80061f8:	eeb0 0a47 	vmov.f32	s0, s14
 80061fc:	f007 fd98 	bl	800dd30 <modff>
					hall_cal.hall_cal_pcmd = hall_cal.hall_cal_pcmd - _f_cal_round*2*PI_F;
 8006200:	4b25      	ldr	r3, [pc, #148]	@ (8006298 <can_tx_rx+0x2bc>)
 8006202:	ed93 7a02 	vldr	s14, [r3, #8]
 8006206:	4b27      	ldr	r3, [pc, #156]	@ (80062a4 <can_tx_rx+0x2c8>)
 8006208:	edd3 7a00 	vldr	s15, [r3]
 800620c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006210:	eddf 6a25 	vldr	s13, [pc, #148]	@ 80062a8 <can_tx_rx+0x2cc>
 8006214:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800621c:	4b1e      	ldr	r3, [pc, #120]	@ (8006298 <can_tx_rx+0x2bc>)
 800621e:	edc3 7a02 	vstr	s15, [r3, #8]
					if(hall_cal.hall_cal_pcmd < 0) hall_cal.hall_cal_pcmd = hall_cal.hall_cal_pcmd + 2*PI_F;
 8006222:	4b1d      	ldr	r3, [pc, #116]	@ (8006298 <can_tx_rx+0x2bc>)
 8006224:	edd3 7a02 	vldr	s15, [r3, #8]
 8006228:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800622c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006230:	d509      	bpl.n	8006246 <can_tx_rx+0x26a>
 8006232:	4b19      	ldr	r3, [pc, #100]	@ (8006298 <can_tx_rx+0x2bc>)
 8006234:	edd3 7a02 	vldr	s15, [r3, #8]
 8006238:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80062a0 <can_tx_rx+0x2c4>
 800623c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006240:	4b15      	ldr	r3, [pc, #84]	@ (8006298 <can_tx_rx+0x2bc>)
 8006242:	edc3 7a02 	vstr	s15, [r3, #8]
					update_fsm(&state, HALL_CAL_CMD);
 8006246:	2168      	movs	r1, #104	@ 0x68
 8006248:	480e      	ldr	r0, [pc, #56]	@ (8006284 <can_tx_rx+0x2a8>)
 800624a:	f7fd fca7 	bl	8003b9c <update_fsm>
					pack_reply_hall_cal(can_rx, &can_tx, VERSION_NUM, state.state);
 800624e:	4b0d      	ldr	r3, [pc, #52]	@ (8006284 <can_tx_rx+0x2a8>)
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	4c0d      	ldr	r4, [pc, #52]	@ (8006288 <can_tx_rx+0x2ac>)
 8006254:	9314      	str	r3, [sp, #80]	@ 0x50
 8006256:	2305      	movs	r3, #5
 8006258:	9313      	str	r3, [sp, #76]	@ 0x4c
 800625a:	4b10      	ldr	r3, [pc, #64]	@ (800629c <can_tx_rx+0x2c0>)
 800625c:	9312      	str	r3, [sp, #72]	@ 0x48
 800625e:	4668      	mov	r0, sp
 8006260:	f104 0310 	add.w	r3, r4, #16
 8006264:	2248      	movs	r2, #72	@ 0x48
 8006266:	4619      	mov	r1, r3
 8006268:	f007 fd49 	bl	800dcfe <memcpy>
 800626c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006270:	f7fb fe5c 	bl	8001f2c <pack_reply_hall_cal>
					break;
 8006274:	e0e2      	b.n	800643c <can_tx_rx+0x460>
 8006276:	bf00      	nop
 8006278:	20009398 	.word	0x20009398
 800627c:	200093a0 	.word	0x200093a0
 8006280:	2000030c 	.word	0x2000030c
 8006284:	20000b68 	.word	0x20000b68
 8006288:	20009390 	.word	0x20009390
 800628c:	20000b78 	.word	0x20000b78
 8006290:	20000348 	.word	0x20000348
 8006294:	2000085c 	.word	0x2000085c
 8006298:	200093e8 	.word	0x200093e8
 800629c:	2000936c 	.word	0x2000936c
 80062a0:	40c90fdb 	.word	0x40c90fdb
 80062a4:	200094c8 	.word	0x200094c8
 80062a8:	40490fdb 	.word	0x40490fdb

				case FC_ENTER_MOTOR:
					update_fsm(&state, MOTOR_CMD);
 80062ac:	216d      	movs	r1, #109	@ 0x6d
 80062ae:	486c      	ldr	r0, [pc, #432]	@ (8006460 <can_tx_rx+0x484>)
 80062b0:	f7fd fc74 	bl	8003b9c <update_fsm>
					pack_reply_default(can_rx, &can_tx, comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, VERSION_NUM, hall_cal.hall_cal_state, state.state);	// Pack response
 80062b4:	4b6b      	ldr	r3, [pc, #428]	@ (8006464 <can_tx_rx+0x488>)
 80062b6:	ed93 7a03 	vldr	s14, [r3, #12]
 80062ba:	4b6b      	ldr	r3, [pc, #428]	@ (8006468 <can_tx_rx+0x48c>)
 80062bc:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80062c0:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80062c4:	4b67      	ldr	r3, [pc, #412]	@ (8006464 <can_tx_rx+0x488>)
 80062c6:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 80062ca:	4b67      	ldr	r3, [pc, #412]	@ (8006468 <can_tx_rx+0x48c>)
 80062cc:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80062d0:	eec7 8a27 	vdiv.f32	s17, s14, s15
 80062d4:	4b65      	ldr	r3, [pc, #404]	@ (800646c <can_tx_rx+0x490>)
 80062d6:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80062da:	4b63      	ldr	r3, [pc, #396]	@ (8006468 <can_tx_rx+0x48c>)
 80062dc:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80062e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062e4:	4b60      	ldr	r3, [pc, #384]	@ (8006468 <can_tx_rx+0x48c>)
 80062e6:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80062ea:	ee27 9a27 	vmul.f32	s18, s14, s15
 80062ee:	4b60      	ldr	r3, [pc, #384]	@ (8006470 <can_tx_rx+0x494>)
 80062f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f2:	4a5b      	ldr	r2, [pc, #364]	@ (8006460 <can_tx_rx+0x484>)
 80062f4:	7812      	ldrb	r2, [r2, #0]
 80062f6:	4c5f      	ldr	r4, [pc, #380]	@ (8006474 <can_tx_rx+0x498>)
 80062f8:	9215      	str	r2, [sp, #84]	@ 0x54
 80062fa:	9314      	str	r3, [sp, #80]	@ 0x50
 80062fc:	2305      	movs	r3, #5
 80062fe:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006300:	4b5d      	ldr	r3, [pc, #372]	@ (8006478 <can_tx_rx+0x49c>)
 8006302:	9312      	str	r3, [sp, #72]	@ 0x48
 8006304:	4668      	mov	r0, sp
 8006306:	f104 0310 	add.w	r3, r4, #16
 800630a:	2248      	movs	r2, #72	@ 0x48
 800630c:	4619      	mov	r1, r3
 800630e:	f007 fcf6 	bl	800dcfe <memcpy>
 8006312:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006316:	eeb0 1a49 	vmov.f32	s2, s18
 800631a:	eef0 0a68 	vmov.f32	s1, s17
 800631e:	eeb0 0a48 	vmov.f32	s0, s16
 8006322:	f7fb fceb 	bl	8001cfc <pack_reply_default>
					break;
 8006326:	e089      	b.n	800643c <can_tx_rx+0x460>

				case FC_CONTROL_CMD:
					pack_reply_default(can_rx, &can_tx, comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, VERSION_NUM, hall_cal.hall_cal_state, state.state);	// Pack response
 8006328:	4b4e      	ldr	r3, [pc, #312]	@ (8006464 <can_tx_rx+0x488>)
 800632a:	ed93 7a03 	vldr	s14, [r3, #12]
 800632e:	4b4e      	ldr	r3, [pc, #312]	@ (8006468 <can_tx_rx+0x48c>)
 8006330:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8006334:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8006338:	4b4a      	ldr	r3, [pc, #296]	@ (8006464 <can_tx_rx+0x488>)
 800633a:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 800633e:	4b4a      	ldr	r3, [pc, #296]	@ (8006468 <can_tx_rx+0x48c>)
 8006340:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8006344:	eec7 8a27 	vdiv.f32	s17, s14, s15
 8006348:	4b48      	ldr	r3, [pc, #288]	@ (800646c <can_tx_rx+0x490>)
 800634a:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800634e:	4b46      	ldr	r3, [pc, #280]	@ (8006468 <can_tx_rx+0x48c>)
 8006350:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8006354:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006358:	4b43      	ldr	r3, [pc, #268]	@ (8006468 <can_tx_rx+0x48c>)
 800635a:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800635e:	ee27 9a27 	vmul.f32	s18, s14, s15
 8006362:	4b43      	ldr	r3, [pc, #268]	@ (8006470 <can_tx_rx+0x494>)
 8006364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006366:	4a3e      	ldr	r2, [pc, #248]	@ (8006460 <can_tx_rx+0x484>)
 8006368:	7812      	ldrb	r2, [r2, #0]
 800636a:	4c42      	ldr	r4, [pc, #264]	@ (8006474 <can_tx_rx+0x498>)
 800636c:	9215      	str	r2, [sp, #84]	@ 0x54
 800636e:	9314      	str	r3, [sp, #80]	@ 0x50
 8006370:	2305      	movs	r3, #5
 8006372:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006374:	4b40      	ldr	r3, [pc, #256]	@ (8006478 <can_tx_rx+0x49c>)
 8006376:	9312      	str	r3, [sp, #72]	@ 0x48
 8006378:	4668      	mov	r0, sp
 800637a:	f104 0310 	add.w	r3, r4, #16
 800637e:	2248      	movs	r2, #72	@ 0x48
 8006380:	4619      	mov	r1, r3
 8006382:	f007 fcbc 	bl	800dcfe <memcpy>
 8006386:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800638a:	eeb0 1a49 	vmov.f32	s2, s18
 800638e:	eef0 0a68 	vmov.f32	s1, s17
 8006392:	eeb0 0a48 	vmov.f32	s0, s16
 8006396:	f7fb fcb1 	bl	8001cfc <pack_reply_default>
					unpack_control_cmd(can_rx, controller.commands);	// Unpack commands
 800639a:	4c36      	ldr	r4, [pc, #216]	@ (8006474 <can_tx_rx+0x498>)
 800639c:	4b37      	ldr	r3, [pc, #220]	@ (800647c <can_tx_rx+0x4a0>)
 800639e:	9312      	str	r3, [sp, #72]	@ 0x48
 80063a0:	4668      	mov	r0, sp
 80063a2:	f104 0310 	add.w	r3, r4, #16
 80063a6:	2248      	movs	r2, #72	@ 0x48
 80063a8:	4619      	mov	r1, r3
 80063aa:	f007 fca8 	bl	800dcfe <memcpy>
 80063ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80063b2:	f7fb fdfb 	bl	8001fac <unpack_control_cmd>

					controller.timeout = 0;					    // Reset timeout counter
 80063b6:	4b2d      	ldr	r3, [pc, #180]	@ (800646c <can_tx_rx+0x490>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
					controller.i_mag_max = controller.i_q;
 80063be:	4b2b      	ldr	r3, [pc, #172]	@ (800646c <can_tx_rx+0x490>)
 80063c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c2:	4a2a      	ldr	r2, [pc, #168]	@ (800646c <can_tx_rx+0x490>)
 80063c4:	6513      	str	r3, [r2, #80]	@ 0x50
					break;
 80063c6:	e039      	b.n	800643c <can_tx_rx+0x460>

				default:
					pack_reply_default(can_rx, &can_tx, comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, VERSION_NUM, hall_cal.hall_cal_state, state.state);	// Pack response
 80063c8:	4b26      	ldr	r3, [pc, #152]	@ (8006464 <can_tx_rx+0x488>)
 80063ca:	ed93 7a03 	vldr	s14, [r3, #12]
 80063ce:	4b26      	ldr	r3, [pc, #152]	@ (8006468 <can_tx_rx+0x48c>)
 80063d0:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80063d4:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80063d8:	4b22      	ldr	r3, [pc, #136]	@ (8006464 <can_tx_rx+0x488>)
 80063da:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 80063de:	4b22      	ldr	r3, [pc, #136]	@ (8006468 <can_tx_rx+0x48c>)
 80063e0:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80063e4:	eec7 8a27 	vdiv.f32	s17, s14, s15
 80063e8:	4b20      	ldr	r3, [pc, #128]	@ (800646c <can_tx_rx+0x490>)
 80063ea:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80063ee:	4b1e      	ldr	r3, [pc, #120]	@ (8006468 <can_tx_rx+0x48c>)
 80063f0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80063f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006468 <can_tx_rx+0x48c>)
 80063fa:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80063fe:	ee27 9a27 	vmul.f32	s18, s14, s15
 8006402:	4b1b      	ldr	r3, [pc, #108]	@ (8006470 <can_tx_rx+0x494>)
 8006404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006406:	4a16      	ldr	r2, [pc, #88]	@ (8006460 <can_tx_rx+0x484>)
 8006408:	7812      	ldrb	r2, [r2, #0]
 800640a:	4c1a      	ldr	r4, [pc, #104]	@ (8006474 <can_tx_rx+0x498>)
 800640c:	9215      	str	r2, [sp, #84]	@ 0x54
 800640e:	9314      	str	r3, [sp, #80]	@ 0x50
 8006410:	2305      	movs	r3, #5
 8006412:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006414:	4b18      	ldr	r3, [pc, #96]	@ (8006478 <can_tx_rx+0x49c>)
 8006416:	9312      	str	r3, [sp, #72]	@ 0x48
 8006418:	4668      	mov	r0, sp
 800641a:	f104 0310 	add.w	r3, r4, #16
 800641e:	2248      	movs	r2, #72	@ 0x48
 8006420:	4619      	mov	r1, r3
 8006422:	f007 fc6c 	bl	800dcfe <memcpy>
 8006426:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800642a:	eeb0 1a49 	vmov.f32	s2, s18
 800642e:	eef0 0a68 	vmov.f32	s1, s17
 8006432:	eeb0 0a48 	vmov.f32	s0, s16
 8006436:	f7fb fc61 	bl	8001cfc <pack_reply_default>
					break;
 800643a:	bf00      	nop
			}

		can_tx.tx_header.StdId = can_rx.rx_header.StdId | 0x400;
 800643c:	4b0d      	ldr	r3, [pc, #52]	@ (8006474 <can_tx_rx+0x498>)
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006444:	4a0c      	ldr	r2, [pc, #48]	@ (8006478 <can_tx_rx+0x49c>)
 8006446:	60d3      	str	r3, [r2, #12]
		HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 8006448:	463b      	mov	r3, r7
 800644a:	4a0d      	ldr	r2, [pc, #52]	@ (8006480 <can_tx_rx+0x4a4>)
 800644c:	490d      	ldr	r1, [pc, #52]	@ (8006484 <can_tx_rx+0x4a8>)
 800644e:	480e      	ldr	r0, [pc, #56]	@ (8006488 <can_tx_rx+0x4ac>)
 8006450:	f001 fe46 	bl	80080e0 <HAL_CAN_AddTxMessage>
	}

}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	ecbd 8b04 	vpop	{d8-d9}
 800645e:	bd90      	pop	{r4, r7, pc}
 8006460:	20000b68 	.word	0x20000b68
 8006464:	20000b78 	.word	0x20000b78
 8006468:	20000348 	.word	0x20000348
 800646c:	2000085c 	.word	0x2000085c
 8006470:	200093e8 	.word	0x200093e8
 8006474:	20009390 	.word	0x20009390
 8006478:	2000936c 	.word	0x2000936c
 800647c:	20000934 	.word	0x20000934
 8006480:	2000936d 	.word	0x2000936d
 8006484:	20009378 	.word	0x20009378
 8006488:	2000030c 	.word	0x2000030c

0800648c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800648c:	b480      	push	{r7}
 800648e:	af00      	add	r7, sp, #0
	return 1;
 8006490:	2301      	movs	r3, #1
}
 8006492:	4618      	mov	r0, r3
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <_kill>:

int _kill(int pid, int sig)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80064a6:	f007 fbfd 	bl	800dca4 <__errno>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2216      	movs	r2, #22
 80064ae:	601a      	str	r2, [r3, #0]
	return -1;
 80064b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <_exit>:

void _exit (int status)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80064c4:	f04f 31ff 	mov.w	r1, #4294967295
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7ff ffe7 	bl	800649c <_kill>
	while (1) {}		/* Make sure we hang here */
 80064ce:	bf00      	nop
 80064d0:	e7fd      	b.n	80064ce <_exit+0x12>

080064d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b086      	sub	sp, #24
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	60f8      	str	r0, [r7, #12]
 80064da:	60b9      	str	r1, [r7, #8]
 80064dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064de:	2300      	movs	r3, #0
 80064e0:	617b      	str	r3, [r7, #20]
 80064e2:	e00a      	b.n	80064fa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80064e4:	f3af 8000 	nop.w
 80064e8:	4601      	mov	r1, r0
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	1c5a      	adds	r2, r3, #1
 80064ee:	60ba      	str	r2, [r7, #8]
 80064f0:	b2ca      	uxtb	r2, r1
 80064f2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	3301      	adds	r3, #1
 80064f8:	617b      	str	r3, [r7, #20]
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	429a      	cmp	r2, r3
 8006500:	dbf0      	blt.n	80064e4 <_read+0x12>
	}

return len;
 8006502:	687b      	ldr	r3, [r7, #4]
}
 8006504:	4618      	mov	r0, r3
 8006506:	3718      	adds	r7, #24
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006518:	2300      	movs	r3, #0
 800651a:	617b      	str	r3, [r7, #20]
 800651c:	e009      	b.n	8006532 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	1c5a      	adds	r2, r3, #1
 8006522:	60ba      	str	r2, [r7, #8]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	4618      	mov	r0, r3
 8006528:	f000 fa16 	bl	8006958 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	3301      	adds	r3, #1
 8006530:	617b      	str	r3, [r7, #20]
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	429a      	cmp	r2, r3
 8006538:	dbf1      	blt.n	800651e <_write+0x12>
	}
	return len;
 800653a:	687b      	ldr	r3, [r7, #4]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3718      	adds	r7, #24
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <_close>:

int _close(int file)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
	return -1;
 800654c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006550:	4618      	mov	r0, r3
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800656c:	605a      	str	r2, [r3, #4]
	return 0;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <_isatty>:

int _isatty(int file)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
	return 1;
 8006584:	2301      	movs	r3, #1
}
 8006586:	4618      	mov	r0, r3
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006592:	b480      	push	{r7}
 8006594:	b085      	sub	sp, #20
 8006596:	af00      	add	r7, sp, #0
 8006598:	60f8      	str	r0, [r7, #12]
 800659a:	60b9      	str	r1, [r7, #8]
 800659c:	607a      	str	r2, [r7, #4]
	return 0;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3714      	adds	r7, #20
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80065b4:	4b11      	ldr	r3, [pc, #68]	@ (80065fc <_sbrk+0x50>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d102      	bne.n	80065c2 <_sbrk+0x16>
		heap_end = &end;
 80065bc:	4b0f      	ldr	r3, [pc, #60]	@ (80065fc <_sbrk+0x50>)
 80065be:	4a10      	ldr	r2, [pc, #64]	@ (8006600 <_sbrk+0x54>)
 80065c0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80065c2:	4b0e      	ldr	r3, [pc, #56]	@ (80065fc <_sbrk+0x50>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80065c8:	4b0c      	ldr	r3, [pc, #48]	@ (80065fc <_sbrk+0x50>)
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4413      	add	r3, r2
 80065d0:	466a      	mov	r2, sp
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d907      	bls.n	80065e6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80065d6:	f007 fb65 	bl	800dca4 <__errno>
 80065da:	4603      	mov	r3, r0
 80065dc:	220c      	movs	r2, #12
 80065de:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80065e0:	f04f 33ff 	mov.w	r3, #4294967295
 80065e4:	e006      	b.n	80065f4 <_sbrk+0x48>
	}

	heap_end += incr;
 80065e6:	4b05      	ldr	r3, [pc, #20]	@ (80065fc <_sbrk+0x50>)
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4413      	add	r3, r2
 80065ee:	4a03      	ldr	r2, [pc, #12]	@ (80065fc <_sbrk+0x50>)
 80065f0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80065f2:	68fb      	ldr	r3, [r7, #12]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	200094cc 	.word	0x200094cc
 8006600:	2000ab78 	.word	0x2000ab78

08006604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006604:	b480      	push	{r7}
 8006606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006608:	4b08      	ldr	r3, [pc, #32]	@ (800662c <SystemInit+0x28>)
 800660a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800660e:	4a07      	ldr	r2, [pc, #28]	@ (800662c <SystemInit+0x28>)
 8006610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006618:	4b04      	ldr	r3, [pc, #16]	@ (800662c <SystemInit+0x28>)
 800661a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800661e:	609a      	str	r2, [r3, #8]
#endif
}
 8006620:	bf00      	nop
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	e000ed00 	.word	0xe000ed00

08006630 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b096      	sub	sp, #88	@ 0x58
 8006634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006636:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800663a:	2200      	movs	r2, #0
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	605a      	str	r2, [r3, #4]
 8006640:	609a      	str	r2, [r3, #8]
 8006642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006644:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800664e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006652:	2200      	movs	r2, #0
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	605a      	str	r2, [r3, #4]
 8006658:	609a      	str	r2, [r3, #8]
 800665a:	60da      	str	r2, [r3, #12]
 800665c:	611a      	str	r2, [r3, #16]
 800665e:	615a      	str	r2, [r3, #20]
 8006660:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006662:	1d3b      	adds	r3, r7, #4
 8006664:	2220      	movs	r2, #32
 8006666:	2100      	movs	r1, #0
 8006668:	4618      	mov	r0, r3
 800666a:	f007 fab7 	bl	800dbdc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800666e:	4b4a      	ldr	r3, [pc, #296]	@ (8006798 <MX_TIM1_Init+0x168>)
 8006670:	4a4a      	ldr	r2, [pc, #296]	@ (800679c <MX_TIM1_Init+0x16c>)
 8006672:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006674:	4b48      	ldr	r3, [pc, #288]	@ (8006798 <MX_TIM1_Init+0x168>)
 8006676:	2200      	movs	r2, #0
 8006678:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800667a:	4b47      	ldr	r3, [pc, #284]	@ (8006798 <MX_TIM1_Init+0x168>)
 800667c:	2220      	movs	r2, #32
 800667e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0x8CA;
 8006680:	4b45      	ldr	r3, [pc, #276]	@ (8006798 <MX_TIM1_Init+0x168>)
 8006682:	f640 02ca 	movw	r2, #2250	@ 0x8ca
 8006686:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006688:	4b43      	ldr	r3, [pc, #268]	@ (8006798 <MX_TIM1_Init+0x168>)
 800668a:	2200      	movs	r2, #0
 800668c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 800668e:	4b42      	ldr	r3, [pc, #264]	@ (8006798 <MX_TIM1_Init+0x168>)
 8006690:	2201      	movs	r2, #1
 8006692:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006694:	4b40      	ldr	r3, [pc, #256]	@ (8006798 <MX_TIM1_Init+0x168>)
 8006696:	2280      	movs	r2, #128	@ 0x80
 8006698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800669a:	483f      	ldr	r0, [pc, #252]	@ (8006798 <MX_TIM1_Init+0x168>)
 800669c:	f003 fdde 	bl	800a25c <HAL_TIM_Base_Init>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d001      	beq.n	80066aa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80066a6:	f7fe fd69 	bl	800517c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80066aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80066ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80066b0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80066b4:	4619      	mov	r1, r3
 80066b6:	4838      	ldr	r0, [pc, #224]	@ (8006798 <MX_TIM1_Init+0x168>)
 80066b8:	f004 f978 	bl	800a9ac <HAL_TIM_ConfigClockSource>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80066c2:	f7fe fd5b 	bl	800517c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80066c6:	4834      	ldr	r0, [pc, #208]	@ (8006798 <MX_TIM1_Init+0x168>)
 80066c8:	f003 fe88 	bl	800a3dc <HAL_TIM_PWM_Init>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d001      	beq.n	80066d6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80066d2:	f7fe fd53 	bl	800517c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066d6:	2300      	movs	r3, #0
 80066d8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066da:	2300      	movs	r3, #0
 80066dc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80066de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80066e2:	4619      	mov	r1, r3
 80066e4:	482c      	ldr	r0, [pc, #176]	@ (8006798 <MX_TIM1_Init+0x168>)
 80066e6:	f004 fd67 	bl	800b1b8 <HAL_TIMEx_MasterConfigSynchronization>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80066f0:	f7fe fd44 	bl	800517c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80066f4:	2360      	movs	r3, #96	@ 0x60
 80066f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80066f8:	2300      	movs	r3, #0
 80066fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80066fc:	2302      	movs	r3, #2
 80066fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006700:	2300      	movs	r3, #0
 8006702:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8006704:	2304      	movs	r3, #4
 8006706:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006708:	2300      	movs	r3, #0
 800670a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800670c:	2300      	movs	r3, #0
 800670e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006714:	2200      	movs	r2, #0
 8006716:	4619      	mov	r1, r3
 8006718:	481f      	ldr	r0, [pc, #124]	@ (8006798 <MX_TIM1_Init+0x168>)
 800671a:	f004 f889 	bl	800a830 <HAL_TIM_PWM_ConfigChannel>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8006724:	f7fe fd2a 	bl	800517c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006728:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800672c:	2204      	movs	r2, #4
 800672e:	4619      	mov	r1, r3
 8006730:	4819      	ldr	r0, [pc, #100]	@ (8006798 <MX_TIM1_Init+0x168>)
 8006732:	f004 f87d 	bl	800a830 <HAL_TIM_PWM_ConfigChannel>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800673c:	f7fe fd1e 	bl	800517c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006740:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006744:	2208      	movs	r2, #8
 8006746:	4619      	mov	r1, r3
 8006748:	4813      	ldr	r0, [pc, #76]	@ (8006798 <MX_TIM1_Init+0x168>)
 800674a:	f004 f871 	bl	800a830 <HAL_TIM_PWM_ConfigChannel>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d001      	beq.n	8006758 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8006754:	f7fe fd12 	bl	800517c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006758:	2300      	movs	r3, #0
 800675a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800675c:	2300      	movs	r3, #0
 800675e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006760:	2300      	movs	r3, #0
 8006762:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006764:	2300      	movs	r3, #0
 8006766:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006768:	2300      	movs	r3, #0
 800676a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800676c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006770:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006772:	2300      	movs	r3, #0
 8006774:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006776:	1d3b      	adds	r3, r7, #4
 8006778:	4619      	mov	r1, r3
 800677a:	4807      	ldr	r0, [pc, #28]	@ (8006798 <MX_TIM1_Init+0x168>)
 800677c:	f004 fd98 	bl	800b2b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8006786:	f7fe fcf9 	bl	800517c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800678a:	4803      	ldr	r0, [pc, #12]	@ (8006798 <MX_TIM1_Init+0x168>)
 800678c:	f000 f830 	bl	80067f0 <HAL_TIM_MspPostInit>

}
 8006790:	bf00      	nop
 8006792:	3758      	adds	r7, #88	@ 0x58
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	200094d0 	.word	0x200094d0
 800679c:	40010000 	.word	0x40010000

080067a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a0e      	ldr	r2, [pc, #56]	@ (80067e8 <HAL_TIM_Base_MspInit+0x48>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d115      	bne.n	80067de <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80067b2:	2300      	movs	r3, #0
 80067b4:	60fb      	str	r3, [r7, #12]
 80067b6:	4b0d      	ldr	r3, [pc, #52]	@ (80067ec <HAL_TIM_Base_MspInit+0x4c>)
 80067b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ba:	4a0c      	ldr	r2, [pc, #48]	@ (80067ec <HAL_TIM_Base_MspInit+0x4c>)
 80067bc:	f043 0301 	orr.w	r3, r3, #1
 80067c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80067c2:	4b0a      	ldr	r3, [pc, #40]	@ (80067ec <HAL_TIM_Base_MspInit+0x4c>)
 80067c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	60fb      	str	r3, [r7, #12]
 80067cc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80067ce:	2200      	movs	r2, #0
 80067d0:	2100      	movs	r1, #0
 80067d2:	2019      	movs	r0, #25
 80067d4:	f002 f985 	bl	8008ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80067d8:	2019      	movs	r0, #25
 80067da:	f002 f99e 	bl	8008b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80067de:	bf00      	nop
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	40010000 	.word	0x40010000
 80067ec:	40023800 	.word	0x40023800

080067f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b088      	sub	sp, #32
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067f8:	f107 030c 	add.w	r3, r7, #12
 80067fc:	2200      	movs	r2, #0
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	605a      	str	r2, [r3, #4]
 8006802:	609a      	str	r2, [r3, #8]
 8006804:	60da      	str	r2, [r3, #12]
 8006806:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a12      	ldr	r2, [pc, #72]	@ (8006858 <HAL_TIM_MspPostInit+0x68>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d11e      	bne.n	8006850 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006812:	2300      	movs	r3, #0
 8006814:	60bb      	str	r3, [r7, #8]
 8006816:	4b11      	ldr	r3, [pc, #68]	@ (800685c <HAL_TIM_MspPostInit+0x6c>)
 8006818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800681a:	4a10      	ldr	r2, [pc, #64]	@ (800685c <HAL_TIM_MspPostInit+0x6c>)
 800681c:	f043 0301 	orr.w	r3, r3, #1
 8006820:	6313      	str	r3, [r2, #48]	@ 0x30
 8006822:	4b0e      	ldr	r3, [pc, #56]	@ (800685c <HAL_TIM_MspPostInit+0x6c>)
 8006824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	60bb      	str	r3, [r7, #8]
 800682c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800682e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8006832:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006834:	2302      	movs	r3, #2
 8006836:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006838:	2300      	movs	r3, #0
 800683a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800683c:	2303      	movs	r3, #3
 800683e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006840:	2301      	movs	r3, #1
 8006842:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006844:	f107 030c 	add.w	r3, r7, #12
 8006848:	4619      	mov	r1, r3
 800684a:	4805      	ldr	r0, [pc, #20]	@ (8006860 <HAL_TIM_MspPostInit+0x70>)
 800684c:	f002 fa12 	bl	8008c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006850:	bf00      	nop
 8006852:	3720      	adds	r7, #32
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	40010000 	.word	0x40010000
 800685c:	40023800 	.word	0x40023800
 8006860:	40020000 	.word	0x40020000

08006864 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006868:	4b11      	ldr	r3, [pc, #68]	@ (80068b0 <MX_USART2_UART_Init+0x4c>)
 800686a:	4a12      	ldr	r2, [pc, #72]	@ (80068b4 <MX_USART2_UART_Init+0x50>)
 800686c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800686e:	4b10      	ldr	r3, [pc, #64]	@ (80068b0 <MX_USART2_UART_Init+0x4c>)
 8006870:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006876:	4b0e      	ldr	r3, [pc, #56]	@ (80068b0 <MX_USART2_UART_Init+0x4c>)
 8006878:	2200      	movs	r2, #0
 800687a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800687c:	4b0c      	ldr	r3, [pc, #48]	@ (80068b0 <MX_USART2_UART_Init+0x4c>)
 800687e:	2200      	movs	r2, #0
 8006880:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006882:	4b0b      	ldr	r3, [pc, #44]	@ (80068b0 <MX_USART2_UART_Init+0x4c>)
 8006884:	2200      	movs	r2, #0
 8006886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006888:	4b09      	ldr	r3, [pc, #36]	@ (80068b0 <MX_USART2_UART_Init+0x4c>)
 800688a:	220c      	movs	r2, #12
 800688c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800688e:	4b08      	ldr	r3, [pc, #32]	@ (80068b0 <MX_USART2_UART_Init+0x4c>)
 8006890:	2200      	movs	r2, #0
 8006892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006894:	4b06      	ldr	r3, [pc, #24]	@ (80068b0 <MX_USART2_UART_Init+0x4c>)
 8006896:	2200      	movs	r2, #0
 8006898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800689a:	4805      	ldr	r0, [pc, #20]	@ (80068b0 <MX_USART2_UART_Init+0x4c>)
 800689c:	f004 fd6e 	bl	800b37c <HAL_UART_Init>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80068a6:	f7fe fc69 	bl	800517c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80068aa:	bf00      	nop
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	20009518 	.word	0x20009518
 80068b4:	40004400 	.word	0x40004400

080068b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b08a      	sub	sp, #40	@ 0x28
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068c0:	f107 0314 	add.w	r3, r7, #20
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	605a      	str	r2, [r3, #4]
 80068ca:	609a      	str	r2, [r3, #8]
 80068cc:	60da      	str	r2, [r3, #12]
 80068ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a1d      	ldr	r2, [pc, #116]	@ (800694c <HAL_UART_MspInit+0x94>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d133      	bne.n	8006942 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80068da:	2300      	movs	r3, #0
 80068dc:	613b      	str	r3, [r7, #16]
 80068de:	4b1c      	ldr	r3, [pc, #112]	@ (8006950 <HAL_UART_MspInit+0x98>)
 80068e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e2:	4a1b      	ldr	r2, [pc, #108]	@ (8006950 <HAL_UART_MspInit+0x98>)
 80068e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80068ea:	4b19      	ldr	r3, [pc, #100]	@ (8006950 <HAL_UART_MspInit+0x98>)
 80068ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068f2:	613b      	str	r3, [r7, #16]
 80068f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068f6:	2300      	movs	r3, #0
 80068f8:	60fb      	str	r3, [r7, #12]
 80068fa:	4b15      	ldr	r3, [pc, #84]	@ (8006950 <HAL_UART_MspInit+0x98>)
 80068fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068fe:	4a14      	ldr	r2, [pc, #80]	@ (8006950 <HAL_UART_MspInit+0x98>)
 8006900:	f043 0301 	orr.w	r3, r3, #1
 8006904:	6313      	str	r3, [r2, #48]	@ 0x30
 8006906:	4b12      	ldr	r3, [pc, #72]	@ (8006950 <HAL_UART_MspInit+0x98>)
 8006908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	60fb      	str	r3, [r7, #12]
 8006910:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006912:	230c      	movs	r3, #12
 8006914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006916:	2302      	movs	r3, #2
 8006918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800691a:	2302      	movs	r3, #2
 800691c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800691e:	2303      	movs	r3, #3
 8006920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006922:	2307      	movs	r3, #7
 8006924:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006926:	f107 0314 	add.w	r3, r7, #20
 800692a:	4619      	mov	r1, r3
 800692c:	4809      	ldr	r0, [pc, #36]	@ (8006954 <HAL_UART_MspInit+0x9c>)
 800692e:	f002 f9a1 	bl	8008c74 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8006932:	2200      	movs	r2, #0
 8006934:	2101      	movs	r1, #1
 8006936:	2026      	movs	r0, #38	@ 0x26
 8006938:	f002 f8d3 	bl	8008ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800693c:	2026      	movs	r0, #38	@ 0x26
 800693e:	f002 f8ec 	bl	8008b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006942:	bf00      	nop
 8006944:	3728      	adds	r7, #40	@ 0x28
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	40004400 	.word	0x40004400
 8006950:	40023800 	.word	0x40023800
 8006954:	40020000 	.word	0x40020000

08006958 <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8006960:	1d39      	adds	r1, r7, #4
 8006962:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006966:	2201      	movs	r2, #1
 8006968:	4803      	ldr	r0, [pc, #12]	@ (8006978 <__io_putchar+0x20>)
 800696a:	f004 fd54 	bl	800b416 <HAL_UART_Transmit>
return 0;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	20009518 	.word	0x20009518

0800697c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8006984:	2201      	movs	r2, #1
 8006986:	4904      	ldr	r1, [pc, #16]	@ (8006998 <HAL_UART_RxCpltCallback+0x1c>)
 8006988:	4804      	ldr	r0, [pc, #16]	@ (800699c <HAL_UART_RxCpltCallback+0x20>)
 800698a:	f004 fdd6 	bl	800b53a <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800698e:	bf00      	nop
 8006990:	3708      	adds	r7, #8
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	20009414 	.word	0x20009414
 800699c:	20009518 	.word	0x20009518

080069a0 <user_config_initialize>:
#include <stdio.h>

struct FloatRegConfig float_reg_config[FLOAT_REG_LENGTH];
struct IntRegConfig int_reg_config[INT_REG_LENGTH];

void user_config_initialize(void){
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
	for (int i=0; i<FLOAT_REG_LENGTH; i++){
 80069a6:	2300      	movs	r3, #0
 80069a8:	607b      	str	r3, [r7, #4]
 80069aa:	e01f      	b.n	80069ec <user_config_initialize+0x4c>
		float_reg_config[i].name = "";
 80069ac:	4a12      	ldr	r2, [pc, #72]	@ (80069f8 <user_config_initialize+0x58>)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	011b      	lsls	r3, r3, #4
 80069b2:	4413      	add	r3, r2
 80069b4:	4a11      	ldr	r2, [pc, #68]	@ (80069fc <user_config_initialize+0x5c>)
 80069b6:	601a      	str	r2, [r3, #0]
		float_reg_config[i].cmd = ' ';
 80069b8:	4a0f      	ldr	r2, [pc, #60]	@ (80069f8 <user_config_initialize+0x58>)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	4413      	add	r3, r2
 80069c0:	3304      	adds	r3, #4
 80069c2:	2220      	movs	r2, #32
 80069c4:	701a      	strb	r2, [r3, #0]
		float_reg_config[i].f_MIN = 0;
 80069c6:	4a0c      	ldr	r2, [pc, #48]	@ (80069f8 <user_config_initialize+0x58>)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	011b      	lsls	r3, r3, #4
 80069cc:	4413      	add	r3, r2
 80069ce:	3308      	adds	r3, #8
 80069d0:	f04f 0200 	mov.w	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]
		float_reg_config[i].f_MAX = 0;
 80069d6:	4a08      	ldr	r2, [pc, #32]	@ (80069f8 <user_config_initialize+0x58>)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	011b      	lsls	r3, r3, #4
 80069dc:	4413      	add	r3, r2
 80069de:	330c      	adds	r3, #12
 80069e0:	f04f 0200 	mov.w	r2, #0
 80069e4:	601a      	str	r2, [r3, #0]
	for (int i=0; i<FLOAT_REG_LENGTH; i++){
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	3301      	adds	r3, #1
 80069ea:	607b      	str	r3, [r7, #4]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80069f0:	dddc      	ble.n	80069ac <user_config_initialize+0xc>
	}

	for (int i=0; i<INT_REG_LENGTH; i++){
 80069f2:	2300      	movs	r3, #0
 80069f4:	603b      	str	r3, [r7, #0]
 80069f6:	e021      	b.n	8006a3c <user_config_initialize+0x9c>
 80069f8:	2000955c 	.word	0x2000955c
 80069fc:	080114dc 	.word	0x080114dc
		int_reg_config[i].name = "";
 8006a00:	4ab7      	ldr	r2, [pc, #732]	@ (8006ce0 <user_config_initialize+0x340>)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	011b      	lsls	r3, r3, #4
 8006a06:	4413      	add	r3, r2
 8006a08:	4ab6      	ldr	r2, [pc, #728]	@ (8006ce4 <user_config_initialize+0x344>)
 8006a0a:	601a      	str	r2, [r3, #0]
		int_reg_config[i].cmd = ' ';
 8006a0c:	4ab4      	ldr	r2, [pc, #720]	@ (8006ce0 <user_config_initialize+0x340>)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	011b      	lsls	r3, r3, #4
 8006a12:	4413      	add	r3, r2
 8006a14:	3304      	adds	r3, #4
 8006a16:	2220      	movs	r2, #32
 8006a18:	701a      	strb	r2, [r3, #0]
		int_reg_config[i].i_MIN = 0;
 8006a1a:	4ab1      	ldr	r2, [pc, #708]	@ (8006ce0 <user_config_initialize+0x340>)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	011b      	lsls	r3, r3, #4
 8006a20:	4413      	add	r3, r2
 8006a22:	3308      	adds	r3, #8
 8006a24:	2200      	movs	r2, #0
 8006a26:	601a      	str	r2, [r3, #0]
		int_reg_config[i].i_MAX = 0;
 8006a28:	4aad      	ldr	r2, [pc, #692]	@ (8006ce0 <user_config_initialize+0x340>)
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	011b      	lsls	r3, r3, #4
 8006a2e:	4413      	add	r3, r2
 8006a30:	330c      	adds	r3, #12
 8006a32:	2200      	movs	r2, #0
 8006a34:	601a      	str	r2, [r3, #0]
	for (int i=0; i<INT_REG_LENGTH; i++){
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	603b      	str	r3, [r7, #0]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	2bff      	cmp	r3, #255	@ 0xff
 8006a40:	ddde      	ble.n	8006a00 <user_config_initialize+0x60>
	}

	// initialize the float_reg_config array
	float_reg_config[ADDR_I_BW].name				= NAME_I_BW;
 8006a42:	4ba9      	ldr	r3, [pc, #676]	@ (8006ce8 <user_config_initialize+0x348>)
 8006a44:	4aa9      	ldr	r2, [pc, #676]	@ (8006cec <user_config_initialize+0x34c>)
 8006a46:	621a      	str	r2, [r3, #32]
	float_reg_config[ADDR_I_BW].cmd					= CMD_I_BW;
 8006a48:	4ba7      	ldr	r3, [pc, #668]	@ (8006ce8 <user_config_initialize+0x348>)
 8006a4a:	2262      	movs	r2, #98	@ 0x62
 8006a4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	float_reg_config[ADDR_I_BW].f_MIN				= MIN_I_BW;
 8006a50:	4ba5      	ldr	r3, [pc, #660]	@ (8006ce8 <user_config_initialize+0x348>)
 8006a52:	4aa7      	ldr	r2, [pc, #668]	@ (8006cf0 <user_config_initialize+0x350>)
 8006a54:	629a      	str	r2, [r3, #40]	@ 0x28
	float_reg_config[ADDR_I_BW].f_MAX				= MAX_I_BW;
 8006a56:	4ba4      	ldr	r3, [pc, #656]	@ (8006ce8 <user_config_initialize+0x348>)
 8006a58:	4aa6      	ldr	r2, [pc, #664]	@ (8006cf4 <user_config_initialize+0x354>)
 8006a5a:	62da      	str	r2, [r3, #44]	@ 0x2c

	float_reg_config[ADDR_I_MAX].name				= NAME_I_MAX;
 8006a5c:	4ba2      	ldr	r3, [pc, #648]	@ (8006ce8 <user_config_initialize+0x348>)
 8006a5e:	4aa6      	ldr	r2, [pc, #664]	@ (8006cf8 <user_config_initialize+0x358>)
 8006a60:	631a      	str	r2, [r3, #48]	@ 0x30
	float_reg_config[ADDR_I_MAX].cmd				= CMD_I_MAX;
 8006a62:	4ba1      	ldr	r3, [pc, #644]	@ (8006ce8 <user_config_initialize+0x348>)
 8006a64:	226c      	movs	r2, #108	@ 0x6c
 8006a66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	float_reg_config[ADDR_I_MAX].f_MIN				= MIN_I_MAX;
 8006a6a:	4b9f      	ldr	r3, [pc, #636]	@ (8006ce8 <user_config_initialize+0x348>)
 8006a6c:	f04f 0200 	mov.w	r2, #0
 8006a70:	639a      	str	r2, [r3, #56]	@ 0x38
	float_reg_config[ADDR_I_MAX].f_MAX				= MAX_I_MAX;
 8006a72:	4b9d      	ldr	r3, [pc, #628]	@ (8006ce8 <user_config_initialize+0x348>)
 8006a74:	4aa1      	ldr	r2, [pc, #644]	@ (8006cfc <user_config_initialize+0x35c>)
 8006a76:	63da      	str	r2, [r3, #60]	@ 0x3c

	float_reg_config[ADDR_THETA_MIN].name			= NAME_THETA_MIN;
 8006a78:	4b9b      	ldr	r3, [pc, #620]	@ (8006ce8 <user_config_initialize+0x348>)
 8006a7a:	4aa1      	ldr	r2, [pc, #644]	@ (8006d00 <user_config_initialize+0x360>)
 8006a7c:	641a      	str	r2, [r3, #64]	@ 0x40
	float_reg_config[ADDR_THETA_MIN].cmd			= CMD_THETA_MIN;
 8006a7e:	4b9a      	ldr	r3, [pc, #616]	@ (8006ce8 <user_config_initialize+0x348>)
 8006a80:	2220      	movs	r2, #32
 8006a82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	float_reg_config[ADDR_THETA_MIN].f_MIN			= MIN_THETA_MIN;
 8006a86:	4b98      	ldr	r3, [pc, #608]	@ (8006ce8 <user_config_initialize+0x348>)
 8006a88:	f04f 424f 	mov.w	r2, #3472883712	@ 0xcf000000
 8006a8c:	649a      	str	r2, [r3, #72]	@ 0x48
	float_reg_config[ADDR_THETA_MIN].f_MAX			= MAX_THETA_MIN;
 8006a8e:	4b96      	ldr	r3, [pc, #600]	@ (8006ce8 <user_config_initialize+0x348>)
 8006a90:	f04f 429e 	mov.w	r2, #1325400064	@ 0x4f000000
 8006a94:	64da      	str	r2, [r3, #76]	@ 0x4c

	float_reg_config[ADDR_THETA_MAX].name			= NAME_THETA_MAX;
 8006a96:	4b94      	ldr	r3, [pc, #592]	@ (8006ce8 <user_config_initialize+0x348>)
 8006a98:	4a9a      	ldr	r2, [pc, #616]	@ (8006d04 <user_config_initialize+0x364>)
 8006a9a:	651a      	str	r2, [r3, #80]	@ 0x50
	float_reg_config[ADDR_THETA_MAX].cmd			= CMD_THETA_MAX;
 8006a9c:	4b92      	ldr	r3, [pc, #584]	@ (8006ce8 <user_config_initialize+0x348>)
 8006a9e:	2220      	movs	r2, #32
 8006aa0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
	float_reg_config[ADDR_THETA_MAX].f_MIN			= MIN_THETA_MAX;
 8006aa4:	4b90      	ldr	r3, [pc, #576]	@ (8006ce8 <user_config_initialize+0x348>)
 8006aa6:	f04f 424f 	mov.w	r2, #3472883712	@ 0xcf000000
 8006aaa:	659a      	str	r2, [r3, #88]	@ 0x58
	float_reg_config[ADDR_THETA_MAX].f_MAX			= MAX_THETA_MAX;
 8006aac:	4b8e      	ldr	r3, [pc, #568]	@ (8006ce8 <user_config_initialize+0x348>)
 8006aae:	f04f 429e 	mov.w	r2, #1325400064	@ 0x4f000000
 8006ab2:	65da      	str	r2, [r3, #92]	@ 0x5c

	float_reg_config[ADDR_I_FW_MAX].name			= NAME_I_FW_MAX;
 8006ab4:	4b8c      	ldr	r3, [pc, #560]	@ (8006ce8 <user_config_initialize+0x348>)
 8006ab6:	4a94      	ldr	r2, [pc, #592]	@ (8006d08 <user_config_initialize+0x368>)
 8006ab8:	661a      	str	r2, [r3, #96]	@ 0x60
	float_reg_config[ADDR_I_FW_MAX].cmd				= CMD_I_FW_MAX;
 8006aba:	4b8b      	ldr	r3, [pc, #556]	@ (8006ce8 <user_config_initialize+0x348>)
 8006abc:	2266      	movs	r2, #102	@ 0x66
 8006abe:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
	float_reg_config[ADDR_I_FW_MAX].f_MIN			= MIN_I_FW_MAX;
 8006ac2:	4b89      	ldr	r3, [pc, #548]	@ (8006ce8 <user_config_initialize+0x348>)
 8006ac4:	f04f 0200 	mov.w	r2, #0
 8006ac8:	669a      	str	r2, [r3, #104]	@ 0x68
	float_reg_config[ADDR_I_FW_MAX].f_MAX			= MAX_I_FW_MAX;
 8006aca:	4b87      	ldr	r3, [pc, #540]	@ (8006ce8 <user_config_initialize+0x348>)
 8006acc:	4a8f      	ldr	r2, [pc, #572]	@ (8006d0c <user_config_initialize+0x36c>)
 8006ace:	66da      	str	r2, [r3, #108]	@ 0x6c

	float_reg_config[ADDR_R_NOMINAL].name			= NAME_R_NOMINAL;
 8006ad0:	4b85      	ldr	r3, [pc, #532]	@ (8006ce8 <user_config_initialize+0x348>)
 8006ad2:	4a8f      	ldr	r2, [pc, #572]	@ (8006d10 <user_config_initialize+0x370>)
 8006ad4:	671a      	str	r2, [r3, #112]	@ 0x70
	float_reg_config[ADDR_R_NOMINAL].cmd			= CMD_R_NOMINAL;
 8006ad6:	4b84      	ldr	r3, [pc, #528]	@ (8006ce8 <user_config_initialize+0x348>)
 8006ad8:	2220      	movs	r2, #32
 8006ada:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	float_reg_config[ADDR_R_NOMINAL].f_MIN			= MIN_R_NOMINAL;
 8006ade:	4b82      	ldr	r3, [pc, #520]	@ (8006ce8 <user_config_initialize+0x348>)
 8006ae0:	f04f 424f 	mov.w	r2, #3472883712	@ 0xcf000000
 8006ae4:	679a      	str	r2, [r3, #120]	@ 0x78
	float_reg_config[ADDR_R_NOMINAL].f_MAX			= MAX_R_NOMINAL;
 8006ae6:	4b80      	ldr	r3, [pc, #512]	@ (8006ce8 <user_config_initialize+0x348>)
 8006ae8:	f04f 429e 	mov.w	r2, #1325400064	@ 0x4f000000
 8006aec:	67da      	str	r2, [r3, #124]	@ 0x7c

	float_reg_config[ADDR_TEMP_MAX].name			= NAME_TEMP_MAX;
 8006aee:	4b7e      	ldr	r3, [pc, #504]	@ (8006ce8 <user_config_initialize+0x348>)
 8006af0:	4a88      	ldr	r2, [pc, #544]	@ (8006d14 <user_config_initialize+0x374>)
 8006af2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	float_reg_config[ADDR_TEMP_MAX].cmd				= CMD_TEMP_MAX;
 8006af6:	4b7c      	ldr	r3, [pc, #496]	@ (8006ce8 <user_config_initialize+0x348>)
 8006af8:	2220      	movs	r2, #32
 8006afa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	float_reg_config[ADDR_TEMP_MAX].f_MIN			= MIN_TEMP_MAX;
 8006afe:	4b7a      	ldr	r3, [pc, #488]	@ (8006ce8 <user_config_initialize+0x348>)
 8006b00:	f04f 424f 	mov.w	r2, #3472883712	@ 0xcf000000
 8006b04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	float_reg_config[ADDR_TEMP_MAX].f_MAX			= MAX_TEMP_MAX;
 8006b08:	4b77      	ldr	r3, [pc, #476]	@ (8006ce8 <user_config_initialize+0x348>)
 8006b0a:	f04f 429e 	mov.w	r2, #1325400064	@ 0x4f000000
 8006b0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

	float_reg_config[ADDR_I_MAX_CONT].name			= NAME_I_MAX_CONT;
 8006b12:	4b75      	ldr	r3, [pc, #468]	@ (8006ce8 <user_config_initialize+0x348>)
 8006b14:	4a80      	ldr	r2, [pc, #512]	@ (8006d18 <user_config_initialize+0x378>)
 8006b16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	float_reg_config[ADDR_I_MAX_CONT].cmd			= CMD_I_MAX_CONT;
 8006b1a:	4b73      	ldr	r3, [pc, #460]	@ (8006ce8 <user_config_initialize+0x348>)
 8006b1c:	2263      	movs	r2, #99	@ 0x63
 8006b1e:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
	float_reg_config[ADDR_I_MAX_CONT].f_MIN			= MIN_I_MAX_CONT;
 8006b22:	4b71      	ldr	r3, [pc, #452]	@ (8006ce8 <user_config_initialize+0x348>)
 8006b24:	f04f 424f 	mov.w	r2, #3472883712	@ 0xcf000000
 8006b28:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	float_reg_config[ADDR_I_MAX_CONT].f_MAX			= MAX_I_MAX_CONT;
 8006b2c:	4b6e      	ldr	r3, [pc, #440]	@ (8006ce8 <user_config_initialize+0x348>)
 8006b2e:	f04f 429e 	mov.w	r2, #1325400064	@ 0x4f000000
 8006b32:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

	float_reg_config[ADDR_PPAIRS].name				= NAME_PPAIRS;
 8006b36:	4b6c      	ldr	r3, [pc, #432]	@ (8006ce8 <user_config_initialize+0x348>)
 8006b38:	4a78      	ldr	r2, [pc, #480]	@ (8006d1c <user_config_initialize+0x37c>)
 8006b3a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	float_reg_config[ADDR_PPAIRS].cmd				= CMD_PPAIRS;
 8006b3e:	4b6a      	ldr	r3, [pc, #424]	@ (8006ce8 <user_config_initialize+0x348>)
 8006b40:	2220      	movs	r2, #32
 8006b42:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	float_reg_config[ADDR_PPAIRS].f_MIN				= MIN_PPAIRS;
 8006b46:	4b68      	ldr	r3, [pc, #416]	@ (8006ce8 <user_config_initialize+0x348>)
 8006b48:	f04f 424f 	mov.w	r2, #3472883712	@ 0xcf000000
 8006b4c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	float_reg_config[ADDR_PPAIRS].f_MAX				= MAX_PPAIRS;
 8006b50:	4b65      	ldr	r3, [pc, #404]	@ (8006ce8 <user_config_initialize+0x348>)
 8006b52:	f04f 429e 	mov.w	r2, #1325400064	@ 0x4f000000
 8006b56:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	//	float_reg_config[ADDR_L_Q].name				= NAME_L_Q;
	//	float_reg_config[ADDR_L_Q].cmd				= CMD_L_Q;
	//	float_reg_config[ADDR_L_Q].f_MIN			= MIN_L_Q;
	//	float_reg_config[ADDR_L_Q].f_MAX			= MAX_L_Q;

	float_reg_config[ADDR_R_PHASE].name				= NAME_R_PHASE;
 8006b5a:	4b63      	ldr	r3, [pc, #396]	@ (8006ce8 <user_config_initialize+0x348>)
 8006b5c:	4a70      	ldr	r2, [pc, #448]	@ (8006d20 <user_config_initialize+0x380>)
 8006b5e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	float_reg_config[ADDR_R_PHASE].cmd				= CMD_R_PHASE;
 8006b62:	4b61      	ldr	r3, [pc, #388]	@ (8006ce8 <user_config_initialize+0x348>)
 8006b64:	2220      	movs	r2, #32
 8006b66:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
	float_reg_config[ADDR_R_PHASE].f_MIN			= MIN_R_PHASE;
 8006b6a:	4b5f      	ldr	r3, [pc, #380]	@ (8006ce8 <user_config_initialize+0x348>)
 8006b6c:	f04f 424f 	mov.w	r2, #3472883712	@ 0xcf000000
 8006b70:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	float_reg_config[ADDR_R_PHASE].f_MAX			= MAX_R_PHASE;
 8006b74:	4b5c      	ldr	r3, [pc, #368]	@ (8006ce8 <user_config_initialize+0x348>)
 8006b76:	f04f 429e 	mov.w	r2, #1325400064	@ 0x4f000000
 8006b7a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

	float_reg_config[ADDR_KT].name					= NAME_KT;
 8006b7e:	4b5a      	ldr	r3, [pc, #360]	@ (8006ce8 <user_config_initialize+0x348>)
 8006b80:	4a68      	ldr	r2, [pc, #416]	@ (8006d24 <user_config_initialize+0x384>)
 8006b82:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
	float_reg_config[ADDR_KT].cmd					= CMD_KT;
 8006b86:	4b58      	ldr	r3, [pc, #352]	@ (8006ce8 <user_config_initialize+0x348>)
 8006b88:	2274      	movs	r2, #116	@ 0x74
 8006b8a:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
	float_reg_config[ADDR_KT].f_MIN					= MIN_KT;
 8006b8e:	4b56      	ldr	r3, [pc, #344]	@ (8006ce8 <user_config_initialize+0x348>)
 8006b90:	4a65      	ldr	r2, [pc, #404]	@ (8006d28 <user_config_initialize+0x388>)
 8006b92:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	float_reg_config[ADDR_KT].f_MAX					= MAX_KT;
 8006b96:	4b54      	ldr	r3, [pc, #336]	@ (8006ce8 <user_config_initialize+0x348>)
 8006b98:	f04f 429e 	mov.w	r2, #1325400064	@ 0x4f000000
 8006b9c:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec

	float_reg_config[ADDR_R_TH].name				= NAME_R_TH;
 8006ba0:	4b51      	ldr	r3, [pc, #324]	@ (8006ce8 <user_config_initialize+0x348>)
 8006ba2:	4a62      	ldr	r2, [pc, #392]	@ (8006d2c <user_config_initialize+0x38c>)
 8006ba4:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	float_reg_config[ADDR_R_TH].cmd					= CMD_R_TH;
 8006ba8:	4b4f      	ldr	r3, [pc, #316]	@ (8006ce8 <user_config_initialize+0x348>)
 8006baa:	2220      	movs	r2, #32
 8006bac:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
	float_reg_config[ADDR_R_TH].f_MIN				= MIN_R_TH;
 8006bb0:	4b4d      	ldr	r3, [pc, #308]	@ (8006ce8 <user_config_initialize+0x348>)
 8006bb2:	f04f 424f 	mov.w	r2, #3472883712	@ 0xcf000000
 8006bb6:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	float_reg_config[ADDR_R_TH].f_MAX				= MAX_R_TH;
 8006bba:	4b4b      	ldr	r3, [pc, #300]	@ (8006ce8 <user_config_initialize+0x348>)
 8006bbc:	f04f 429e 	mov.w	r2, #1325400064	@ 0x4f000000
 8006bc0:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

	float_reg_config[ADDR_C_TH].name				= NAME_C_TH;
 8006bc4:	4b48      	ldr	r3, [pc, #288]	@ (8006ce8 <user_config_initialize+0x348>)
 8006bc6:	4a5a      	ldr	r2, [pc, #360]	@ (8006d30 <user_config_initialize+0x390>)
 8006bc8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	float_reg_config[ADDR_C_TH].cmd					= CMD_C_TH;
 8006bcc:	4b46      	ldr	r3, [pc, #280]	@ (8006ce8 <user_config_initialize+0x348>)
 8006bce:	2220      	movs	r2, #32
 8006bd0:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
	float_reg_config[ADDR_C_TH].f_MIN				= MIN_C_TH;
 8006bd4:	4b44      	ldr	r3, [pc, #272]	@ (8006ce8 <user_config_initialize+0x348>)
 8006bd6:	f04f 424f 	mov.w	r2, #3472883712	@ 0xcf000000
 8006bda:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
	float_reg_config[ADDR_C_TH].f_MAX				= MAX_C_TH;
 8006bde:	4b42      	ldr	r3, [pc, #264]	@ (8006ce8 <user_config_initialize+0x348>)
 8006be0:	f04f 429e 	mov.w	r2, #1325400064	@ 0x4f000000
 8006be4:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

	float_reg_config[ADDR_GR].name					= NAME_GR;
 8006be8:	4b3f      	ldr	r3, [pc, #252]	@ (8006ce8 <user_config_initialize+0x348>)
 8006bea:	4a52      	ldr	r2, [pc, #328]	@ (8006d34 <user_config_initialize+0x394>)
 8006bec:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
	float_reg_config[ADDR_GR].cmd					= CMD_GR;
 8006bf0:	4b3d      	ldr	r3, [pc, #244]	@ (8006ce8 <user_config_initialize+0x348>)
 8006bf2:	2267      	movs	r2, #103	@ 0x67
 8006bf4:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
	float_reg_config[ADDR_GR].f_MIN					= MIN_GR;
 8006bf8:	4b3b      	ldr	r3, [pc, #236]	@ (8006ce8 <user_config_initialize+0x348>)
 8006bfa:	4a4f      	ldr	r2, [pc, #316]	@ (8006d38 <user_config_initialize+0x398>)
 8006bfc:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
	float_reg_config[ADDR_GR].f_MAX					= MAX_GR;
 8006c00:	4b39      	ldr	r3, [pc, #228]	@ (8006ce8 <user_config_initialize+0x348>)
 8006c02:	f04f 429e 	mov.w	r2, #1325400064	@ 0x4f000000
 8006c06:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

	float_reg_config[ADDR_P_MIN].name				= NAME_P_MIN;
 8006c0a:	4b37      	ldr	r3, [pc, #220]	@ (8006ce8 <user_config_initialize+0x348>)
 8006c0c:	4a4b      	ldr	r2, [pc, #300]	@ (8006d3c <user_config_initialize+0x39c>)
 8006c0e:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
	float_reg_config[ADDR_P_MIN].cmd				= CMD_P_MIN;
 8006c12:	4b35      	ldr	r3, [pc, #212]	@ (8006ce8 <user_config_initialize+0x348>)
 8006c14:	225f      	movs	r2, #95	@ 0x5f
 8006c16:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
	float_reg_config[ADDR_P_MIN].f_MIN				= MIN_P_MIN;
 8006c1a:	4b33      	ldr	r3, [pc, #204]	@ (8006ce8 <user_config_initialize+0x348>)
 8006c1c:	f04f 424f 	mov.w	r2, #3472883712	@ 0xcf000000
 8006c20:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
	float_reg_config[ADDR_P_MIN].f_MAX				= MAX_P_MIN;
 8006c24:	4b30      	ldr	r3, [pc, #192]	@ (8006ce8 <user_config_initialize+0x348>)
 8006c26:	f04f 0200 	mov.w	r2, #0
 8006c2a:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c

	float_reg_config[ADDR_P_MAX].name				= NAME_P_MAX;
 8006c2e:	4b2e      	ldr	r3, [pc, #184]	@ (8006ce8 <user_config_initialize+0x348>)
 8006c30:	4a43      	ldr	r2, [pc, #268]	@ (8006d40 <user_config_initialize+0x3a0>)
 8006c32:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
	float_reg_config[ADDR_P_MAX].cmd				= CMD_P_MAX;
 8006c36:	4b2c      	ldr	r3, [pc, #176]	@ (8006ce8 <user_config_initialize+0x348>)
 8006c38:	2270      	movs	r2, #112	@ 0x70
 8006c3a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	float_reg_config[ADDR_P_MAX].f_MIN				= MIN_P_MAX;
 8006c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8006ce8 <user_config_initialize+0x348>)
 8006c40:	f04f 0200 	mov.w	r2, #0
 8006c44:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
	float_reg_config[ADDR_P_MAX].f_MAX				= MAX_P_MAX;
 8006c48:	4b27      	ldr	r3, [pc, #156]	@ (8006ce8 <user_config_initialize+0x348>)
 8006c4a:	f04f 429e 	mov.w	r2, #1325400064	@ 0x4f000000
 8006c4e:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

	float_reg_config[ADDR_V_MIN].name				= NAME_V_MIN;
 8006c52:	4b25      	ldr	r3, [pc, #148]	@ (8006ce8 <user_config_initialize+0x348>)
 8006c54:	4a3b      	ldr	r2, [pc, #236]	@ (8006d44 <user_config_initialize+0x3a4>)
 8006c56:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
	float_reg_config[ADDR_V_MIN].cmd				= CMD_V_MIN;
 8006c5a:	4b23      	ldr	r3, [pc, #140]	@ (8006ce8 <user_config_initialize+0x348>)
 8006c5c:	225f      	movs	r2, #95	@ 0x5f
 8006c5e:	f883 2154 	strb.w	r2, [r3, #340]	@ 0x154
	float_reg_config[ADDR_V_MIN].f_MIN				= MIN_V_MIN;
 8006c62:	4b21      	ldr	r3, [pc, #132]	@ (8006ce8 <user_config_initialize+0x348>)
 8006c64:	f04f 424f 	mov.w	r2, #3472883712	@ 0xcf000000
 8006c68:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
	float_reg_config[ADDR_V_MIN].f_MAX				= MAX_V_MIN;
 8006c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8006ce8 <user_config_initialize+0x348>)
 8006c6e:	f04f 0200 	mov.w	r2, #0
 8006c72:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c

	float_reg_config[ADDR_V_MAX].name				= NAME_V_MAX;
 8006c76:	4b1c      	ldr	r3, [pc, #112]	@ (8006ce8 <user_config_initialize+0x348>)
 8006c78:	4a33      	ldr	r2, [pc, #204]	@ (8006d48 <user_config_initialize+0x3a8>)
 8006c7a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
	float_reg_config[ADDR_V_MAX].cmd				= CMD_V_MAX;
 8006c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ce8 <user_config_initialize+0x348>)
 8006c80:	2276      	movs	r2, #118	@ 0x76
 8006c82:	f883 2164 	strb.w	r2, [r3, #356]	@ 0x164
	float_reg_config[ADDR_V_MAX].f_MIN				= MIN_V_MAX;
 8006c86:	4b18      	ldr	r3, [pc, #96]	@ (8006ce8 <user_config_initialize+0x348>)
 8006c88:	f04f 0200 	mov.w	r2, #0
 8006c8c:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
	float_reg_config[ADDR_V_MAX].f_MAX				= MAX_V_MAX;
 8006c90:	4b15      	ldr	r3, [pc, #84]	@ (8006ce8 <user_config_initialize+0x348>)
 8006c92:	f04f 429e 	mov.w	r2, #1325400064	@ 0x4f000000
 8006c96:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

	float_reg_config[ADDR_T_MIN].name				= NAME_T_MIN;
 8006c9a:	4b13      	ldr	r3, [pc, #76]	@ (8006ce8 <user_config_initialize+0x348>)
 8006c9c:	4a2b      	ldr	r2, [pc, #172]	@ (8006d4c <user_config_initialize+0x3ac>)
 8006c9e:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
	float_reg_config[ADDR_T_MIN].cmd				= CMD_T_MIN;
 8006ca2:	4b11      	ldr	r3, [pc, #68]	@ (8006ce8 <user_config_initialize+0x348>)
 8006ca4:	225f      	movs	r2, #95	@ 0x5f
 8006ca6:	f883 2174 	strb.w	r2, [r3, #372]	@ 0x174
	float_reg_config[ADDR_T_MIN].f_MIN				= MIN_T_MIN;
 8006caa:	4b0f      	ldr	r3, [pc, #60]	@ (8006ce8 <user_config_initialize+0x348>)
 8006cac:	f04f 424f 	mov.w	r2, #3472883712	@ 0xcf000000
 8006cb0:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
	float_reg_config[ADDR_T_MIN].f_MAX				= MAX_T_MIN;
 8006cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ce8 <user_config_initialize+0x348>)
 8006cb6:	f04f 0200 	mov.w	r2, #0
 8006cba:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c

	float_reg_config[ADDR_T_MAX].name				= NAME_T_MAX;
 8006cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8006ce8 <user_config_initialize+0x348>)
 8006cc0:	4a23      	ldr	r2, [pc, #140]	@ (8006d50 <user_config_initialize+0x3b0>)
 8006cc2:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
	float_reg_config[ADDR_T_MAX].cmd				= CMD_T_MAX;
 8006cc6:	4b08      	ldr	r3, [pc, #32]	@ (8006ce8 <user_config_initialize+0x348>)
 8006cc8:	2254      	movs	r2, #84	@ 0x54
 8006cca:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
	float_reg_config[ADDR_T_MAX].f_MIN				= MIN_T_MAX;
 8006cce:	4b06      	ldr	r3, [pc, #24]	@ (8006ce8 <user_config_initialize+0x348>)
 8006cd0:	f04f 0200 	mov.w	r2, #0
 8006cd4:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
	float_reg_config[ADDR_T_MAX].f_MAX				= MAX_T_MAX;
 8006cd8:	4b03      	ldr	r3, [pc, #12]	@ (8006ce8 <user_config_initialize+0x348>)
 8006cda:	f04f 429e 	mov.w	r2, #1325400064	@ 0x4f000000
 8006cde:	e039      	b.n	8006d54 <user_config_initialize+0x3b4>
 8006ce0:	2000995c 	.word	0x2000995c
 8006ce4:	080114dc 	.word	0x080114dc
 8006ce8:	2000955c 	.word	0x2000955c
 8006cec:	080114e0 	.word	0x080114e0
 8006cf0:	42c80000 	.word	0x42c80000
 8006cf4:	44fa0000 	.word	0x44fa0000
 8006cf8:	080114e8 	.word	0x080114e8
 8006cfc:	42960000 	.word	0x42960000
 8006d00:	080114f0 	.word	0x080114f0
 8006d04:	080114fc 	.word	0x080114fc
 8006d08:	08011508 	.word	0x08011508
 8006d0c:	42040000 	.word	0x42040000
 8006d10:	08011514 	.word	0x08011514
 8006d14:	08011520 	.word	0x08011520
 8006d18:	0801152c 	.word	0x0801152c
 8006d1c:	08011538 	.word	0x08011538
 8006d20:	08011540 	.word	0x08011540
 8006d24:	08011548 	.word	0x08011548
 8006d28:	38d1b717 	.word	0x38d1b717
 8006d2c:	0801154c 	.word	0x0801154c
 8006d30:	08011554 	.word	0x08011554
 8006d34:	0801155c 	.word	0x0801155c
 8006d38:	3a83126f 	.word	0x3a83126f
 8006d3c:	08011560 	.word	0x08011560
 8006d40:	08011568 	.word	0x08011568
 8006d44:	08011570 	.word	0x08011570
 8006d48:	08011578 	.word	0x08011578
 8006d4c:	08011580 	.word	0x08011580
 8006d50:	08011588 	.word	0x08011588
 8006d54:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c

	float_reg_config[ADDR_KP_MAX].name				= NAME_KP_MAX;
 8006d58:	4b64      	ldr	r3, [pc, #400]	@ (8006eec <user_config_initialize+0x54c>)
 8006d5a:	4a65      	ldr	r2, [pc, #404]	@ (8006ef0 <user_config_initialize+0x550>)
 8006d5c:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
	float_reg_config[ADDR_KP_MAX].cmd				= CMD_KP_MAX;
 8006d60:	4b62      	ldr	r3, [pc, #392]	@ (8006eec <user_config_initialize+0x54c>)
 8006d62:	226b      	movs	r2, #107	@ 0x6b
 8006d64:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
	float_reg_config[ADDR_KP_MAX].f_MIN				= MIN_KP_MAX;
 8006d68:	4b60      	ldr	r3, [pc, #384]	@ (8006eec <user_config_initialize+0x54c>)
 8006d6a:	f04f 0200 	mov.w	r2, #0
 8006d6e:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
	float_reg_config[ADDR_KP_MAX].f_MAX				= MAX_KP_MAX;
 8006d72:	4b5e      	ldr	r3, [pc, #376]	@ (8006eec <user_config_initialize+0x54c>)
 8006d74:	f04f 429e 	mov.w	r2, #1325400064	@ 0x4f000000
 8006d78:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c

	float_reg_config[ADDR_KI_MAX].name				= NAME_KI_MAX;
 8006d7c:	4b5b      	ldr	r3, [pc, #364]	@ (8006eec <user_config_initialize+0x54c>)
 8006d7e:	4a5d      	ldr	r2, [pc, #372]	@ (8006ef4 <user_config_initialize+0x554>)
 8006d80:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
	float_reg_config[ADDR_KI_MAX].cmd				= CMD_KI_MAX;
 8006d84:	4b59      	ldr	r3, [pc, #356]	@ (8006eec <user_config_initialize+0x54c>)
 8006d86:	2269      	movs	r2, #105	@ 0x69
 8006d88:	f883 21a4 	strb.w	r2, [r3, #420]	@ 0x1a4
	float_reg_config[ADDR_KI_MAX].f_MIN				= MIN_KI_MAX;
 8006d8c:	4b57      	ldr	r3, [pc, #348]	@ (8006eec <user_config_initialize+0x54c>)
 8006d8e:	f04f 0200 	mov.w	r2, #0
 8006d92:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
	float_reg_config[ADDR_KI_MAX].f_MAX				= MAX_KI_MAX;
 8006d96:	4b55      	ldr	r3, [pc, #340]	@ (8006eec <user_config_initialize+0x54c>)
 8006d98:	f04f 429e 	mov.w	r2, #1325400064	@ 0x4f000000
 8006d9c:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac

	float_reg_config[ADDR_KD_MAX].name				= NAME_KD_MAX;
 8006da0:	4b52      	ldr	r3, [pc, #328]	@ (8006eec <user_config_initialize+0x54c>)
 8006da2:	4a55      	ldr	r2, [pc, #340]	@ (8006ef8 <user_config_initialize+0x558>)
 8006da4:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
	float_reg_config[ADDR_KD_MAX].cmd				= CMD_KD_MAX;
 8006da8:	4b50      	ldr	r3, [pc, #320]	@ (8006eec <user_config_initialize+0x54c>)
 8006daa:	2264      	movs	r2, #100	@ 0x64
 8006dac:	f883 21b4 	strb.w	r2, [r3, #436]	@ 0x1b4
	float_reg_config[ADDR_KD_MAX].f_MIN				= MIN_KD_MAX;
 8006db0:	4b4e      	ldr	r3, [pc, #312]	@ (8006eec <user_config_initialize+0x54c>)
 8006db2:	f04f 0200 	mov.w	r2, #0
 8006db6:	f8c3 21b8 	str.w	r2, [r3, #440]	@ 0x1b8
	float_reg_config[ADDR_KD_MAX].f_MAX				= MAX_KD_MAX;
 8006dba:	4b4c      	ldr	r3, [pc, #304]	@ (8006eec <user_config_initialize+0x54c>)
 8006dbc:	f04f 429e 	mov.w	r2, #1325400064	@ 0x4f000000
 8006dc0:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc

	float_reg_config[ADDR_HALL_CAL_OFFSET].name		= NAME_HALL_CAL_OFFSET;
 8006dc4:	4b49      	ldr	r3, [pc, #292]	@ (8006eec <user_config_initialize+0x54c>)
 8006dc6:	4a4d      	ldr	r2, [pc, #308]	@ (8006efc <user_config_initialize+0x55c>)
 8006dc8:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
	float_reg_config[ADDR_HALL_CAL_OFFSET].cmd		= CMD_HALL_CAL_OFFSET;
 8006dcc:	4b47      	ldr	r3, [pc, #284]	@ (8006eec <user_config_initialize+0x54c>)
 8006dce:	2265      	movs	r2, #101	@ 0x65
 8006dd0:	f883 21c4 	strb.w	r2, [r3, #452]	@ 0x1c4
	float_reg_config[ADDR_HALL_CAL_OFFSET].f_MIN	= MIN_HALL_CAL_OFFSET;
 8006dd4:	4b45      	ldr	r3, [pc, #276]	@ (8006eec <user_config_initialize+0x54c>)
 8006dd6:	f04f 0200 	mov.w	r2, #0
 8006dda:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
	float_reg_config[ADDR_HALL_CAL_OFFSET].f_MAX	= MAX_HALL_CAL_OFFSET;
 8006dde:	4b43      	ldr	r3, [pc, #268]	@ (8006eec <user_config_initialize+0x54c>)
 8006de0:	4a47      	ldr	r2, [pc, #284]	@ (8006f00 <user_config_initialize+0x560>)
 8006de2:	f8c3 21cc 	str.w	r2, [r3, #460]	@ 0x1cc

	float_reg_config[ADDR_HALL_CAL_SPEED].name		= NAME_HALL_CAL_SPEED;
 8006de6:	4b41      	ldr	r3, [pc, #260]	@ (8006eec <user_config_initialize+0x54c>)
 8006de8:	4a46      	ldr	r2, [pc, #280]	@ (8006f04 <user_config_initialize+0x564>)
 8006dea:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
	float_reg_config[ADDR_HALL_CAL_SPEED].cmd		= CMD_HALL_CAL_SPEED;
 8006dee:	4b3f      	ldr	r3, [pc, #252]	@ (8006eec <user_config_initialize+0x54c>)
 8006df0:	2268      	movs	r2, #104	@ 0x68
 8006df2:	f883 21d4 	strb.w	r2, [r3, #468]	@ 0x1d4
	float_reg_config[ADDR_HALL_CAL_SPEED].f_MIN		= MIN_HALL_CAL_SPEED;
 8006df6:	4b3d      	ldr	r3, [pc, #244]	@ (8006eec <user_config_initialize+0x54c>)
 8006df8:	f04f 0200 	mov.w	r2, #0
 8006dfc:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
	float_reg_config[ADDR_HALL_CAL_SPEED].f_MAX		= MAX_HALL_CAL_SPEED;
 8006e00:	4b3a      	ldr	r3, [pc, #232]	@ (8006eec <user_config_initialize+0x54c>)
 8006e02:	4a41      	ldr	r2, [pc, #260]	@ (8006f08 <user_config_initialize+0x568>)
 8006e04:	f8c3 21dc 	str.w	r2, [r3, #476]	@ 0x1dc

	// initialize the int_reg_config array
	int_reg_config[ADDR_PHASE_ORDER].name			= NAME_PHASE_ORDER;
 8006e08:	4b40      	ldr	r3, [pc, #256]	@ (8006f0c <user_config_initialize+0x56c>)
 8006e0a:	4a41      	ldr	r2, [pc, #260]	@ (8006f10 <user_config_initialize+0x570>)
 8006e0c:	601a      	str	r2, [r3, #0]
	int_reg_config[ADDR_PHASE_ORDER].cmd			= CMD_PHASE_ORDER;
 8006e0e:	4b3f      	ldr	r3, [pc, #252]	@ (8006f0c <user_config_initialize+0x56c>)
 8006e10:	2220      	movs	r2, #32
 8006e12:	711a      	strb	r2, [r3, #4]
	int_reg_config[ADDR_PHASE_ORDER].i_MIN			= MIN_PHASE_ORDER;
 8006e14:	4b3d      	ldr	r3, [pc, #244]	@ (8006f0c <user_config_initialize+0x56c>)
 8006e16:	4a3f      	ldr	r2, [pc, #252]	@ (8006f14 <user_config_initialize+0x574>)
 8006e18:	609a      	str	r2, [r3, #8]
	int_reg_config[ADDR_PHASE_ORDER].i_MAX			= MAX_PHASE_ORDER;
 8006e1a:	4b3c      	ldr	r3, [pc, #240]	@ (8006f0c <user_config_initialize+0x56c>)
 8006e1c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8006e20:	60da      	str	r2, [r3, #12]

	int_reg_config[ADDR_CAN_ID].name				= NAME_CAN_ID;
 8006e22:	4b3a      	ldr	r3, [pc, #232]	@ (8006f0c <user_config_initialize+0x56c>)
 8006e24:	4a3c      	ldr	r2, [pc, #240]	@ (8006f18 <user_config_initialize+0x578>)
 8006e26:	611a      	str	r2, [r3, #16]
	int_reg_config[ADDR_CAN_ID].cmd					= CMD_CAN_ID;
 8006e28:	4b38      	ldr	r3, [pc, #224]	@ (8006f0c <user_config_initialize+0x56c>)
 8006e2a:	226e      	movs	r2, #110	@ 0x6e
 8006e2c:	751a      	strb	r2, [r3, #20]
	int_reg_config[ADDR_CAN_ID].i_MIN				= MIN_CAN_ID;
 8006e2e:	4b37      	ldr	r3, [pc, #220]	@ (8006f0c <user_config_initialize+0x56c>)
 8006e30:	2201      	movs	r2, #1
 8006e32:	619a      	str	r2, [r3, #24]
	int_reg_config[ADDR_CAN_ID].i_MAX				= MAX_CAN_ID;
 8006e34:	4b35      	ldr	r3, [pc, #212]	@ (8006f0c <user_config_initialize+0x56c>)
 8006e36:	227f      	movs	r2, #127	@ 0x7f
 8006e38:	61da      	str	r2, [r3, #28]

	int_reg_config[ADDR_CAN_MASTER].name			= NAME_CAN_MASTER;
 8006e3a:	4b34      	ldr	r3, [pc, #208]	@ (8006f0c <user_config_initialize+0x56c>)
 8006e3c:	4a37      	ldr	r2, [pc, #220]	@ (8006f1c <user_config_initialize+0x57c>)
 8006e3e:	621a      	str	r2, [r3, #32]
	int_reg_config[ADDR_CAN_MASTER].cmd				= CMD_CAN_MASTER;
 8006e40:	4b32      	ldr	r3, [pc, #200]	@ (8006f0c <user_config_initialize+0x56c>)
 8006e42:	226d      	movs	r2, #109	@ 0x6d
 8006e44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	int_reg_config[ADDR_CAN_MASTER].i_MIN			= MIN_CAN_MASTER;
 8006e48:	4b30      	ldr	r3, [pc, #192]	@ (8006f0c <user_config_initialize+0x56c>)
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	629a      	str	r2, [r3, #40]	@ 0x28
	int_reg_config[ADDR_CAN_MASTER].i_MAX			= MAX_CAN_MASTER;
 8006e4e:	4b2f      	ldr	r3, [pc, #188]	@ (8006f0c <user_config_initialize+0x56c>)
 8006e50:	227f      	movs	r2, #127	@ 0x7f
 8006e52:	62da      	str	r2, [r3, #44]	@ 0x2c

	int_reg_config[ADDR_CAN_TIMEOUT].name			= NAME_CAN_TIMEOUT;
 8006e54:	4b2d      	ldr	r3, [pc, #180]	@ (8006f0c <user_config_initialize+0x56c>)
 8006e56:	4a32      	ldr	r2, [pc, #200]	@ (8006f20 <user_config_initialize+0x580>)
 8006e58:	631a      	str	r2, [r3, #48]	@ 0x30
	int_reg_config[ADDR_CAN_TIMEOUT].cmd			= CMD_CAN_TIMEOUT;
 8006e5a:	4b2c      	ldr	r3, [pc, #176]	@ (8006f0c <user_config_initialize+0x56c>)
 8006e5c:	226f      	movs	r2, #111	@ 0x6f
 8006e5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	int_reg_config[ADDR_CAN_TIMEOUT].i_MIN			= MIN_CAN_TIMEOUT;
 8006e62:	4b2a      	ldr	r3, [pc, #168]	@ (8006f0c <user_config_initialize+0x56c>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	639a      	str	r2, [r3, #56]	@ 0x38
	int_reg_config[ADDR_CAN_TIMEOUT].i_MAX			= MAX_CAN_TIMEOUT;
 8006e68:	4b28      	ldr	r3, [pc, #160]	@ (8006f0c <user_config_initialize+0x56c>)
 8006e6a:	4a2e      	ldr	r2, [pc, #184]	@ (8006f24 <user_config_initialize+0x584>)
 8006e6c:	63da      	str	r2, [r3, #60]	@ 0x3c

	int_reg_config[ADDR_M_ZERO].name				= NAME_M_ZERO;
 8006e6e:	4b27      	ldr	r3, [pc, #156]	@ (8006f0c <user_config_initialize+0x56c>)
 8006e70:	4a2d      	ldr	r2, [pc, #180]	@ (8006f28 <user_config_initialize+0x588>)
 8006e72:	641a      	str	r2, [r3, #64]	@ 0x40
	int_reg_config[ADDR_M_ZERO].cmd					= CMD_M_ZERO;
 8006e74:	4b25      	ldr	r3, [pc, #148]	@ (8006f0c <user_config_initialize+0x56c>)
 8006e76:	2220      	movs	r2, #32
 8006e78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	int_reg_config[ADDR_M_ZERO].i_MIN				= MIN_M_ZERO;
 8006e7c:	4b23      	ldr	r3, [pc, #140]	@ (8006f0c <user_config_initialize+0x56c>)
 8006e7e:	4a25      	ldr	r2, [pc, #148]	@ (8006f14 <user_config_initialize+0x574>)
 8006e80:	649a      	str	r2, [r3, #72]	@ 0x48
	int_reg_config[ADDR_M_ZERO].i_MAX				= MAX_M_ZERO;
 8006e82:	4b22      	ldr	r3, [pc, #136]	@ (8006f0c <user_config_initialize+0x56c>)
 8006e84:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8006e88:	64da      	str	r2, [r3, #76]	@ 0x4c

	int_reg_config[ADDR_E_ZERO].name				= NAME_E_ZERO;
 8006e8a:	4b20      	ldr	r3, [pc, #128]	@ (8006f0c <user_config_initialize+0x56c>)
 8006e8c:	4a27      	ldr	r2, [pc, #156]	@ (8006f2c <user_config_initialize+0x58c>)
 8006e8e:	651a      	str	r2, [r3, #80]	@ 0x50
	int_reg_config[ADDR_E_ZERO].cmd					= CMD_E_ZERO;
 8006e90:	4b1e      	ldr	r3, [pc, #120]	@ (8006f0c <user_config_initialize+0x56c>)
 8006e92:	2220      	movs	r2, #32
 8006e94:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
	int_reg_config[ADDR_E_ZERO].i_MIN				= MIN_E_ZERO;
 8006e98:	4b1c      	ldr	r3, [pc, #112]	@ (8006f0c <user_config_initialize+0x56c>)
 8006e9a:	4a1e      	ldr	r2, [pc, #120]	@ (8006f14 <user_config_initialize+0x574>)
 8006e9c:	659a      	str	r2, [r3, #88]	@ 0x58
	int_reg_config[ADDR_E_ZERO].i_MAX				= MAX_E_ZERO;
 8006e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8006f0c <user_config_initialize+0x56c>)
 8006ea0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8006ea4:	65da      	str	r2, [r3, #92]	@ 0x5c

	int_reg_config[ADDR_HALL_CAL_DIR].name			= NAME_HALL_CAL_DIR;
 8006ea6:	4b19      	ldr	r3, [pc, #100]	@ (8006f0c <user_config_initialize+0x56c>)
 8006ea8:	4a21      	ldr	r2, [pc, #132]	@ (8006f30 <user_config_initialize+0x590>)
 8006eaa:	661a      	str	r2, [r3, #96]	@ 0x60
	int_reg_config[ADDR_HALL_CAL_DIR].cmd			= CMD_HALL_CAL_DIR;
 8006eac:	4b17      	ldr	r3, [pc, #92]	@ (8006f0c <user_config_initialize+0x56c>)
 8006eae:	2272      	movs	r2, #114	@ 0x72
 8006eb0:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
	int_reg_config[ADDR_HALL_CAL_DIR].i_MIN			= MIN_HALL_CAL_DIR;
 8006eb4:	4b15      	ldr	r3, [pc, #84]	@ (8006f0c <user_config_initialize+0x56c>)
 8006eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eba:	669a      	str	r2, [r3, #104]	@ 0x68
	int_reg_config[ADDR_HALL_CAL_DIR].i_MAX			= MAX_HALL_CAL_DIR;
 8006ebc:	4b13      	ldr	r3, [pc, #76]	@ (8006f0c <user_config_initialize+0x56c>)
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	66da      	str	r2, [r3, #108]	@ 0x6c

	int_reg_config[ADDR_ENCODER_LUT].name			= NAME_ENCODER_LUT;
 8006ec2:	4b12      	ldr	r3, [pc, #72]	@ (8006f0c <user_config_initialize+0x56c>)
 8006ec4:	4a1b      	ldr	r2, [pc, #108]	@ (8006f34 <user_config_initialize+0x594>)
 8006ec6:	671a      	str	r2, [r3, #112]	@ 0x70
	int_reg_config[ADDR_ENCODER_LUT].cmd			= CMD_ENCODER_LUT;
 8006ec8:	4b10      	ldr	r3, [pc, #64]	@ (8006f0c <user_config_initialize+0x56c>)
 8006eca:	2220      	movs	r2, #32
 8006ecc:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	int_reg_config[ADDR_ENCODER_LUT].i_MIN			= MIN_ENCODER_LUT;
 8006ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8006f0c <user_config_initialize+0x56c>)
 8006ed2:	4a10      	ldr	r2, [pc, #64]	@ (8006f14 <user_config_initialize+0x574>)
 8006ed4:	679a      	str	r2, [r3, #120]	@ 0x78
	int_reg_config[ADDR_ENCODER_LUT].i_MAX			= MAX_ENCODER_LUT;
 8006ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8006f0c <user_config_initialize+0x56c>)
 8006ed8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8006edc:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006ede:	bf00      	nop
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	2000955c 	.word	0x2000955c
 8006ef0:	08011590 	.word	0x08011590
 8006ef4:	08011598 	.word	0x08011598
 8006ef8:	080115a0 	.word	0x080115a0
 8006efc:	080115a8 	.word	0x080115a8
 8006f00:	430f0000 	.word	0x430f0000
 8006f04:	080115b8 	.word	0x080115b8
 8006f08:	41200000 	.word	0x41200000
 8006f0c:	2000995c 	.word	0x2000995c
 8006f10:	080115c8 	.word	0x080115c8
 8006f14:	80000001 	.word	0x80000001
 8006f18:	080115d4 	.word	0x080115d4
 8006f1c:	080115dc 	.word	0x080115dc
 8006f20:	080115e8 	.word	0x080115e8
 8006f24:	000186a0 	.word	0x000186a0
 8006f28:	080115f4 	.word	0x080115f4
 8006f2c:	080115fc 	.word	0x080115fc
 8006f30:	08011604 	.word	0x08011604
 8006f34:	08011614 	.word	0x08011614

08006f38 <float_reg_update_uart>:

char* float_reg_update_uart(char cmd, const char *c_data){
 8006f38:	b590      	push	{r4, r7, lr}
 8006f3a:	b087      	sub	sp, #28
 8006f3c:	af02      	add	r7, sp, #8
 8006f3e:	4603      	mov	r3, r0
 8006f40:	6039      	str	r1, [r7, #0]
 8006f42:	71fb      	strb	r3, [r7, #7]
    static char response[100];
	float f_data = atof(c_data);
 8006f44:	6838      	ldr	r0, [r7, #0]
 8006f46:	f005 f92d 	bl	800c1a4 <atof>
 8006f4a:	ec53 2b10 	vmov	r2, r3, d0
 8006f4e:	4610      	mov	r0, r2
 8006f50:	4619      	mov	r1, r3
 8006f52:	f7f9 fe79 	bl	8000c48 <__aeabi_d2f>
 8006f56:	4603      	mov	r3, r0
 8006f58:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<FLOAT_REG_LENGTH; i++){
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60fb      	str	r3, [r7, #12]
 8006f5e:	e082      	b.n	8007066 <float_reg_update_uart+0x12e>
		if (float_reg_config[i].cmd == cmd){
 8006f60:	4a45      	ldr	r2, [pc, #276]	@ (8007078 <float_reg_update_uart+0x140>)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	011b      	lsls	r3, r3, #4
 8006f66:	4413      	add	r3, r2
 8006f68:	3304      	adds	r3, #4
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	79fa      	ldrb	r2, [r7, #7]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d176      	bne.n	8007060 <float_reg_update_uart+0x128>
			if ((float_reg_config[i].f_MIN > f_data) || (float_reg_config[i].f_MAX < f_data)){
 8006f72:	4a41      	ldr	r2, [pc, #260]	@ (8007078 <float_reg_update_uart+0x140>)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	011b      	lsls	r3, r3, #4
 8006f78:	4413      	add	r3, r2
 8006f7a:	3308      	adds	r3, #8
 8006f7c:	edd3 7a00 	vldr	s15, [r3]
 8006f80:	ed97 7a02 	vldr	s14, [r7, #8]
 8006f84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f8c:	d40d      	bmi.n	8006faa <float_reg_update_uart+0x72>
 8006f8e:	4a3a      	ldr	r2, [pc, #232]	@ (8007078 <float_reg_update_uart+0x140>)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	011b      	lsls	r3, r3, #4
 8006f94:	4413      	add	r3, r2
 8006f96:	330c      	adds	r3, #12
 8006f98:	edd3 7a00 	vldr	s15, [r3]
 8006f9c:	ed97 7a02 	vldr	s14, [r7, #8]
 8006fa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fa8:	dd01      	ble.n	8006fae <float_reg_update_uart+0x76>
				return STR_INVALID_VALUE;
 8006faa:	4b34      	ldr	r3, [pc, #208]	@ (800707c <float_reg_update_uart+0x144>)
 8006fac:	e060      	b.n	8007070 <float_reg_update_uart+0x138>
			}
			else if (i == ADDR_V_MAX){
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2b16      	cmp	r3, #22
 8006fb2:	d11c      	bne.n	8006fee <float_reg_update_uart+0xb6>
				__float_reg[ADDR_V_MAX] = f_data;
 8006fb4:	4a32      	ldr	r2, [pc, #200]	@ (8007080 <float_reg_update_uart+0x148>)
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	6593      	str	r3, [r2, #88]	@ 0x58
				__float_reg[ADDR_V_MIN] = -f_data;
 8006fba:	edd7 7a02 	vldr	s15, [r7, #8]
 8006fbe:	eef1 7a67 	vneg.f32	s15, s15
 8006fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8007080 <float_reg_update_uart+0x148>)
 8006fc4:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
                sprintf(response, "%s set to %f\r\n", float_reg_config[i].name, f_data);
 8006fc8:	4a2b      	ldr	r2, [pc, #172]	@ (8007078 <float_reg_update_uart+0x140>)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	011b      	lsls	r3, r3, #4
 8006fce:	4413      	add	r3, r2
 8006fd0:	681c      	ldr	r4, [r3, #0]
 8006fd2:	68b8      	ldr	r0, [r7, #8]
 8006fd4:	f7f9 fae8 	bl	80005a8 <__aeabi_f2d>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	460b      	mov	r3, r1
 8006fdc:	e9cd 2300 	strd	r2, r3, [sp]
 8006fe0:	4622      	mov	r2, r4
 8006fe2:	4928      	ldr	r1, [pc, #160]	@ (8007084 <float_reg_update_uart+0x14c>)
 8006fe4:	4828      	ldr	r0, [pc, #160]	@ (8007088 <float_reg_update_uart+0x150>)
 8006fe6:	f006 fcff 	bl	800d9e8 <siprintf>
				return response;
 8006fea:	4b27      	ldr	r3, [pc, #156]	@ (8007088 <float_reg_update_uart+0x150>)
 8006fec:	e040      	b.n	8007070 <float_reg_update_uart+0x138>
			}
			else if (i == ADDR_T_MAX){
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2b18      	cmp	r3, #24
 8006ff2:	d11c      	bne.n	800702e <float_reg_update_uart+0xf6>
				__float_reg[ADDR_T_MAX] = f_data;
 8006ff4:	4a22      	ldr	r2, [pc, #136]	@ (8007080 <float_reg_update_uart+0x148>)
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	6613      	str	r3, [r2, #96]	@ 0x60
				__float_reg[ADDR_T_MIN] = -f_data;
 8006ffa:	edd7 7a02 	vldr	s15, [r7, #8]
 8006ffe:	eef1 7a67 	vneg.f32	s15, s15
 8007002:	4b1f      	ldr	r3, [pc, #124]	@ (8007080 <float_reg_update_uart+0x148>)
 8007004:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
                sprintf(response, "%s set to %f\r\n", float_reg_config[i].name, f_data);
 8007008:	4a1b      	ldr	r2, [pc, #108]	@ (8007078 <float_reg_update_uart+0x140>)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	011b      	lsls	r3, r3, #4
 800700e:	4413      	add	r3, r2
 8007010:	681c      	ldr	r4, [r3, #0]
 8007012:	68b8      	ldr	r0, [r7, #8]
 8007014:	f7f9 fac8 	bl	80005a8 <__aeabi_f2d>
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	e9cd 2300 	strd	r2, r3, [sp]
 8007020:	4622      	mov	r2, r4
 8007022:	4918      	ldr	r1, [pc, #96]	@ (8007084 <float_reg_update_uart+0x14c>)
 8007024:	4818      	ldr	r0, [pc, #96]	@ (8007088 <float_reg_update_uart+0x150>)
 8007026:	f006 fcdf 	bl	800d9e8 <siprintf>
				return response;
 800702a:	4b17      	ldr	r3, [pc, #92]	@ (8007088 <float_reg_update_uart+0x150>)
 800702c:	e020      	b.n	8007070 <float_reg_update_uart+0x138>
			}
			else{
				__float_reg[i] = f_data;
 800702e:	4a14      	ldr	r2, [pc, #80]	@ (8007080 <float_reg_update_uart+0x148>)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4413      	add	r3, r2
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	601a      	str	r2, [r3, #0]
                sprintf(response, "%s set to %f\r\n", float_reg_config[i].name, f_data);
 800703a:	4a0f      	ldr	r2, [pc, #60]	@ (8007078 <float_reg_update_uart+0x140>)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	011b      	lsls	r3, r3, #4
 8007040:	4413      	add	r3, r2
 8007042:	681c      	ldr	r4, [r3, #0]
 8007044:	68b8      	ldr	r0, [r7, #8]
 8007046:	f7f9 faaf 	bl	80005a8 <__aeabi_f2d>
 800704a:	4602      	mov	r2, r0
 800704c:	460b      	mov	r3, r1
 800704e:	e9cd 2300 	strd	r2, r3, [sp]
 8007052:	4622      	mov	r2, r4
 8007054:	490b      	ldr	r1, [pc, #44]	@ (8007084 <float_reg_update_uart+0x14c>)
 8007056:	480c      	ldr	r0, [pc, #48]	@ (8007088 <float_reg_update_uart+0x150>)
 8007058:	f006 fcc6 	bl	800d9e8 <siprintf>
				return response;
 800705c:	4b0a      	ldr	r3, [pc, #40]	@ (8007088 <float_reg_update_uart+0x150>)
 800705e:	e007      	b.n	8007070 <float_reg_update_uart+0x138>
	for (int i=0; i<FLOAT_REG_LENGTH; i++){
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	3301      	adds	r3, #1
 8007064:	60fb      	str	r3, [r7, #12]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2b3f      	cmp	r3, #63	@ 0x3f
 800706a:	f77f af79 	ble.w	8006f60 <float_reg_update_uart+0x28>
			}
		}
	}
	return STR_INVALID_CMD;
 800706e:	4b07      	ldr	r3, [pc, #28]	@ (800708c <float_reg_update_uart+0x154>)
}
 8007070:	4618      	mov	r0, r3
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	bd90      	pop	{r4, r7, pc}
 8007078:	2000955c 	.word	0x2000955c
 800707c:	08011620 	.word	0x08011620
 8007080:	20000348 	.word	0x20000348
 8007084:	08011634 	.word	0x08011634
 8007088:	2000a95c 	.word	0x2000a95c
 800708c:	08011644 	.word	0x08011644

08007090 <float_reg_update_can>:

int float_reg_update_can(int addr, float f_data){
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af02      	add	r7, sp, #8
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	ed87 0a00 	vstr	s0, [r7]
	if (addr < 0 || addr >= FLOAT_REG_LENGTH){
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	db02      	blt.n	80070a8 <float_reg_update_can+0x18>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80070a6:	dd01      	ble.n	80070ac <float_reg_update_can+0x1c>
		return CODE_INVALID_ADDR;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e056      	b.n	800715a <float_reg_update_can+0xca>
	}
	else if (float_reg_config[addr].cmd == ' '){
 80070ac:	4a2d      	ldr	r2, [pc, #180]	@ (8007164 <float_reg_update_can+0xd4>)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	011b      	lsls	r3, r3, #4
 80070b2:	4413      	add	r3, r2
 80070b4:	3304      	adds	r3, #4
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	2b20      	cmp	r3, #32
 80070ba:	d101      	bne.n	80070c0 <float_reg_update_can+0x30>
		return CODE_READ_ONLY;
 80070bc:	2302      	movs	r3, #2
 80070be:	e04c      	b.n	800715a <float_reg_update_can+0xca>
	}
	else if ((float_reg_config[addr].f_MIN > f_data) || (float_reg_config[addr].f_MAX < f_data)){
 80070c0:	4a28      	ldr	r2, [pc, #160]	@ (8007164 <float_reg_update_can+0xd4>)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	011b      	lsls	r3, r3, #4
 80070c6:	4413      	add	r3, r2
 80070c8:	3308      	adds	r3, #8
 80070ca:	edd3 7a00 	vldr	s15, [r3]
 80070ce:	ed97 7a00 	vldr	s14, [r7]
 80070d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80070d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070da:	d40d      	bmi.n	80070f8 <float_reg_update_can+0x68>
 80070dc:	4a21      	ldr	r2, [pc, #132]	@ (8007164 <float_reg_update_can+0xd4>)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	011b      	lsls	r3, r3, #4
 80070e2:	4413      	add	r3, r2
 80070e4:	330c      	adds	r3, #12
 80070e6:	edd3 7a00 	vldr	s15, [r3]
 80070ea:	ed97 7a00 	vldr	s14, [r7]
 80070ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80070f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070f6:	dd01      	ble.n	80070fc <float_reg_update_can+0x6c>
		return CODE_INVALID_VALUE;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e02e      	b.n	800715a <float_reg_update_can+0xca>
	}
	else{
		if (__float_reg[addr] != f_data){
 80070fc:	4a1a      	ldr	r2, [pc, #104]	@ (8007168 <float_reg_update_can+0xd8>)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	edd3 7a00 	vldr	s15, [r3]
 8007108:	ed97 7a00 	vldr	s14, [r7]
 800710c:	eeb4 7a67 	vcmp.f32	s14, s15
 8007110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007114:	d020      	beq.n	8007158 <float_reg_update_can+0xc8>
			__float_reg[addr] = f_data;
 8007116:	4a14      	ldr	r2, [pc, #80]	@ (8007168 <float_reg_update_can+0xd8>)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4413      	add	r3, r2
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	601a      	str	r2, [r3, #0]
			if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 8007122:	4b12      	ldr	r3, [pc, #72]	@ (800716c <float_reg_update_can+0xdc>)
 8007124:	691a      	ldr	r2, [r3, #16]
 8007126:	9200      	str	r2, [sp, #0]
 8007128:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800712a:	f7fe fc01 	bl	8005930 <preference_writer_ready>
 800712e:	4603      	mov	r3, r0
 8007130:	f083 0301 	eor.w	r3, r3, #1
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d002      	beq.n	8007140 <float_reg_update_can+0xb0>
 800713a:	480c      	ldr	r0, [pc, #48]	@ (800716c <float_reg_update_can+0xdc>)
 800713c:	f7fe fbe9 	bl	8005912 <preference_writer_open>
			preference_writer_flush(&prefs);
 8007140:	480a      	ldr	r0, [pc, #40]	@ (800716c <float_reg_update_can+0xdc>)
 8007142:	f7fe fc03 	bl	800594c <preference_writer_flush>
			preference_writer_close(&prefs);
 8007146:	4809      	ldr	r0, [pc, #36]	@ (800716c <float_reg_update_can+0xdc>)
 8007148:	f7fe fc7e 	bl	8005a48 <preference_writer_close>
			preference_writer_load(prefs);
 800714c:	4b07      	ldr	r3, [pc, #28]	@ (800716c <float_reg_update_can+0xdc>)
 800714e:	691a      	ldr	r2, [r3, #16]
 8007150:	9200      	str	r2, [sp, #0]
 8007152:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007154:	f7fe fc36 	bl	80059c4 <preference_writer_load>
		}
		return CODE_CONFIG_SUCCESS;
 8007158:	2300      	movs	r3, #0
	}
}
 800715a:	4618      	mov	r0, r3
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	2000955c 	.word	0x2000955c
 8007168:	20000348 	.word	0x20000348
 800716c:	20000848 	.word	0x20000848

08007170 <int_reg_update_uart>:

char* int_reg_update_uart(char cmd, const char *c_data){
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	4603      	mov	r3, r0
 8007178:	6039      	str	r1, [r7, #0]
 800717a:	71fb      	strb	r3, [r7, #7]
    static char response[100];
	int i_data = atoi(c_data);
 800717c:	6838      	ldr	r0, [r7, #0]
 800717e:	f005 f814 	bl	800c1aa <atoi>
 8007182:	60b8      	str	r0, [r7, #8]

	for (int i=0; i<INT_REG_LENGTH; i++){
 8007184:	2300      	movs	r3, #0
 8007186:	60fb      	str	r3, [r7, #12]
 8007188:	e030      	b.n	80071ec <int_reg_update_uart+0x7c>
		if (int_reg_config[i].cmd == cmd){
 800718a:	4a1c      	ldr	r2, [pc, #112]	@ (80071fc <int_reg_update_uart+0x8c>)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	011b      	lsls	r3, r3, #4
 8007190:	4413      	add	r3, r2
 8007192:	3304      	adds	r3, #4
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	79fa      	ldrb	r2, [r7, #7]
 8007198:	429a      	cmp	r2, r3
 800719a:	d124      	bne.n	80071e6 <int_reg_update_uart+0x76>
			if ((int_reg_config[i].i_MIN > i_data) || (int_reg_config[i].i_MAX < i_data)){
 800719c:	4a17      	ldr	r2, [pc, #92]	@ (80071fc <int_reg_update_uart+0x8c>)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	011b      	lsls	r3, r3, #4
 80071a2:	4413      	add	r3, r2
 80071a4:	3308      	adds	r3, #8
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	db08      	blt.n	80071c0 <int_reg_update_uart+0x50>
 80071ae:	4a13      	ldr	r2, [pc, #76]	@ (80071fc <int_reg_update_uart+0x8c>)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	011b      	lsls	r3, r3, #4
 80071b4:	4413      	add	r3, r2
 80071b6:	330c      	adds	r3, #12
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	429a      	cmp	r2, r3
 80071be:	dd01      	ble.n	80071c4 <int_reg_update_uart+0x54>
				return STR_INVALID_VALUE;
 80071c0:	4b0f      	ldr	r3, [pc, #60]	@ (8007200 <int_reg_update_uart+0x90>)
 80071c2:	e017      	b.n	80071f4 <int_reg_update_uart+0x84>
			}
			else{
				__int_reg[i] = i_data;
 80071c4:	490f      	ldr	r1, [pc, #60]	@ (8007204 <int_reg_update_uart+0x94>)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                sprintf(response, "%s set to %d\r\n", int_reg_config[i].name, i_data);
 80071ce:	4a0b      	ldr	r2, [pc, #44]	@ (80071fc <int_reg_update_uart+0x8c>)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	011b      	lsls	r3, r3, #4
 80071d4:	4413      	add	r3, r2
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	490b      	ldr	r1, [pc, #44]	@ (8007208 <int_reg_update_uart+0x98>)
 80071dc:	480b      	ldr	r0, [pc, #44]	@ (800720c <int_reg_update_uart+0x9c>)
 80071de:	f006 fc03 	bl	800d9e8 <siprintf>
				return response;
 80071e2:	4b0a      	ldr	r3, [pc, #40]	@ (800720c <int_reg_update_uart+0x9c>)
 80071e4:	e006      	b.n	80071f4 <int_reg_update_uart+0x84>
	for (int i=0; i<INT_REG_LENGTH; i++){
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	3301      	adds	r3, #1
 80071ea:	60fb      	str	r3, [r7, #12]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2bff      	cmp	r3, #255	@ 0xff
 80071f0:	ddcb      	ble.n	800718a <int_reg_update_uart+0x1a>
			}
		}
	}
	return STR_INVALID_CMD;
 80071f2:	4b07      	ldr	r3, [pc, #28]	@ (8007210 <int_reg_update_uart+0xa0>)
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3710      	adds	r7, #16
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	2000995c 	.word	0x2000995c
 8007200:	08011620 	.word	0x08011620
 8007204:	20000448 	.word	0x20000448
 8007208:	0801165c 	.word	0x0801165c
 800720c:	2000a9c0 	.word	0x2000a9c0
 8007210:	08011644 	.word	0x08011644

08007214 <int_reg_update_can>:

int int_reg_update_can(int addr, int i_data){
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af02      	add	r7, sp, #8
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
	if (addr < 0 || addr >= INT_REG_LENGTH){
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	db02      	blt.n	800722a <int_reg_update_can+0x16>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2bff      	cmp	r3, #255	@ 0xff
 8007228:	dd01      	ble.n	800722e <int_reg_update_can+0x1a>
		return CODE_INVALID_ADDR;
 800722a:	2303      	movs	r3, #3
 800722c:	e04b      	b.n	80072c6 <int_reg_update_can+0xb2>
	}
	else if (int_reg_config[addr].cmd == ' '){
 800722e:	4a28      	ldr	r2, [pc, #160]	@ (80072d0 <int_reg_update_can+0xbc>)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	011b      	lsls	r3, r3, #4
 8007234:	4413      	add	r3, r2
 8007236:	3304      	adds	r3, #4
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	2b20      	cmp	r3, #32
 800723c:	d101      	bne.n	8007242 <int_reg_update_can+0x2e>
		return CODE_READ_ONLY;
 800723e:	2302      	movs	r3, #2
 8007240:	e041      	b.n	80072c6 <int_reg_update_can+0xb2>
	}
	else if (((int_reg_config[addr].i_MIN > i_data) || (int_reg_config[addr].i_MAX < i_data)) ||
 8007242:	4a23      	ldr	r2, [pc, #140]	@ (80072d0 <int_reg_update_can+0xbc>)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	011b      	lsls	r3, r3, #4
 8007248:	4413      	add	r3, r2
 800724a:	3308      	adds	r3, #8
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	429a      	cmp	r2, r3
 8007252:	db0e      	blt.n	8007272 <int_reg_update_can+0x5e>
 8007254:	4a1e      	ldr	r2, [pc, #120]	@ (80072d0 <int_reg_update_can+0xbc>)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	011b      	lsls	r3, r3, #4
 800725a:	4413      	add	r3, r2
 800725c:	330c      	adds	r3, #12
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	683a      	ldr	r2, [r7, #0]
 8007262:	429a      	cmp	r2, r3
 8007264:	dc05      	bgt.n	8007272 <int_reg_update_can+0x5e>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2b06      	cmp	r3, #6
 800726a:	d104      	bne.n	8007276 <int_reg_update_can+0x62>
			((addr == ADDR_HALL_CAL_DIR) && (i_data == 0))){
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <int_reg_update_can+0x62>
		return CODE_INVALID_VALUE;
 8007272:	2301      	movs	r3, #1
 8007274:	e027      	b.n	80072c6 <int_reg_update_can+0xb2>
	}
	else{
		if (__int_reg[addr] != i_data){
 8007276:	4a17      	ldr	r2, [pc, #92]	@ (80072d4 <int_reg_update_can+0xc0>)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	429a      	cmp	r2, r3
 8007282:	d01f      	beq.n	80072c4 <int_reg_update_can+0xb0>
			__int_reg[addr] = i_data;
 8007284:	4913      	ldr	r1, [pc, #76]	@ (80072d4 <int_reg_update_can+0xc0>)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 800728e:	4b12      	ldr	r3, [pc, #72]	@ (80072d8 <int_reg_update_can+0xc4>)
 8007290:	691a      	ldr	r2, [r3, #16]
 8007292:	9200      	str	r2, [sp, #0]
 8007294:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007296:	f7fe fb4b 	bl	8005930 <preference_writer_ready>
 800729a:	4603      	mov	r3, r0
 800729c:	f083 0301 	eor.w	r3, r3, #1
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d002      	beq.n	80072ac <int_reg_update_can+0x98>
 80072a6:	480c      	ldr	r0, [pc, #48]	@ (80072d8 <int_reg_update_can+0xc4>)
 80072a8:	f7fe fb33 	bl	8005912 <preference_writer_open>
			preference_writer_flush(&prefs);
 80072ac:	480a      	ldr	r0, [pc, #40]	@ (80072d8 <int_reg_update_can+0xc4>)
 80072ae:	f7fe fb4d 	bl	800594c <preference_writer_flush>
			preference_writer_close(&prefs);
 80072b2:	4809      	ldr	r0, [pc, #36]	@ (80072d8 <int_reg_update_can+0xc4>)
 80072b4:	f7fe fbc8 	bl	8005a48 <preference_writer_close>
			preference_writer_load(prefs);
 80072b8:	4b07      	ldr	r3, [pc, #28]	@ (80072d8 <int_reg_update_can+0xc4>)
 80072ba:	691a      	ldr	r2, [r3, #16]
 80072bc:	9200      	str	r2, [sp, #0]
 80072be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80072c0:	f7fe fb80 	bl	80059c4 <preference_writer_load>
		}
		return CODE_CONFIG_SUCCESS;
 80072c4:	2300      	movs	r3, #0
	}
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	2000995c 	.word	0x2000995c
 80072d4:	20000448 	.word	0x20000448
 80072d8:	20000848 	.word	0x20000848

080072dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80072dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007314 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80072e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80072e2:	e003      	b.n	80072ec <LoopCopyDataInit>

080072e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80072e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007318 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80072e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80072e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80072ea:	3104      	adds	r1, #4

080072ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80072ec:	480b      	ldr	r0, [pc, #44]	@ (800731c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80072ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007320 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80072f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80072f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80072f4:	d3f6      	bcc.n	80072e4 <CopyDataInit>
  ldr  r2, =_sbss
 80072f6:	4a0b      	ldr	r2, [pc, #44]	@ (8007324 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80072f8:	e002      	b.n	8007300 <LoopFillZerobss>

080072fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80072fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80072fc:	f842 3b04 	str.w	r3, [r2], #4

08007300 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007300:	4b09      	ldr	r3, [pc, #36]	@ (8007328 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007302:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007304:	d3f9      	bcc.n	80072fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007306:	f7ff f97d 	bl	8006604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800730a:	f006 fcd1 	bl	800dcb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800730e:	f7fd fa67 	bl	80047e0 <main>
  bx  lr    
 8007312:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007314:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007318:	080122f0 	.word	0x080122f0
  ldr  r0, =_sdata
 800731c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007320:	20000214 	.word	0x20000214
  ldr  r2, =_sbss
 8007324:	20000218 	.word	0x20000218
  ldr  r3, = _ebss
 8007328:	2000ab74 	.word	0x2000ab74

0800732c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800732c:	e7fe      	b.n	800732c <ADC_IRQHandler>
	...

08007330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007334:	4b0e      	ldr	r3, [pc, #56]	@ (8007370 <HAL_Init+0x40>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a0d      	ldr	r2, [pc, #52]	@ (8007370 <HAL_Init+0x40>)
 800733a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800733e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007340:	4b0b      	ldr	r3, [pc, #44]	@ (8007370 <HAL_Init+0x40>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a0a      	ldr	r2, [pc, #40]	@ (8007370 <HAL_Init+0x40>)
 8007346:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800734a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800734c:	4b08      	ldr	r3, [pc, #32]	@ (8007370 <HAL_Init+0x40>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a07      	ldr	r2, [pc, #28]	@ (8007370 <HAL_Init+0x40>)
 8007352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007356:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007358:	2003      	movs	r0, #3
 800735a:	f001 fbb7 	bl	8008acc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800735e:	2000      	movs	r0, #0
 8007360:	f000 f808 	bl	8007374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007364:	f7fe fd90 	bl	8005e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	40023c00 	.word	0x40023c00

08007374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800737c:	4b12      	ldr	r3, [pc, #72]	@ (80073c8 <HAL_InitTick+0x54>)
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	4b12      	ldr	r3, [pc, #72]	@ (80073cc <HAL_InitTick+0x58>)
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	4619      	mov	r1, r3
 8007386:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800738a:	fbb3 f3f1 	udiv	r3, r3, r1
 800738e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007392:	4618      	mov	r0, r3
 8007394:	f001 fbcf 	bl	8008b36 <HAL_SYSTICK_Config>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d001      	beq.n	80073a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e00e      	b.n	80073c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2b0f      	cmp	r3, #15
 80073a6:	d80a      	bhi.n	80073be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80073a8:	2200      	movs	r2, #0
 80073aa:	6879      	ldr	r1, [r7, #4]
 80073ac:	f04f 30ff 	mov.w	r0, #4294967295
 80073b0:	f001 fb97 	bl	8008ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80073b4:	4a06      	ldr	r2, [pc, #24]	@ (80073d0 <HAL_InitTick+0x5c>)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	e000      	b.n	80073c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	20000040 	.word	0x20000040
 80073cc:	20000048 	.word	0x20000048
 80073d0:	20000044 	.word	0x20000044

080073d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80073d4:	b480      	push	{r7}
 80073d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80073d8:	4b06      	ldr	r3, [pc, #24]	@ (80073f4 <HAL_IncTick+0x20>)
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	461a      	mov	r2, r3
 80073de:	4b06      	ldr	r3, [pc, #24]	@ (80073f8 <HAL_IncTick+0x24>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4413      	add	r3, r2
 80073e4:	4a04      	ldr	r2, [pc, #16]	@ (80073f8 <HAL_IncTick+0x24>)
 80073e6:	6013      	str	r3, [r2, #0]
}
 80073e8:	bf00      	nop
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	20000048 	.word	0x20000048
 80073f8:	2000aa24 	.word	0x2000aa24

080073fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80073fc:	b480      	push	{r7}
 80073fe:	af00      	add	r7, sp, #0
  return uwTick;
 8007400:	4b03      	ldr	r3, [pc, #12]	@ (8007410 <HAL_GetTick+0x14>)
 8007402:	681b      	ldr	r3, [r3, #0]
}
 8007404:	4618      	mov	r0, r3
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	2000aa24 	.word	0x2000aa24

08007414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800741c:	f7ff ffee 	bl	80073fc <HAL_GetTick>
 8007420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742c:	d005      	beq.n	800743a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800742e:	4b0a      	ldr	r3, [pc, #40]	@ (8007458 <HAL_Delay+0x44>)
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	461a      	mov	r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	4413      	add	r3, r2
 8007438:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800743a:	bf00      	nop
 800743c:	f7ff ffde 	bl	80073fc <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	429a      	cmp	r2, r3
 800744a:	d8f7      	bhi.n	800743c <HAL_Delay+0x28>
  {
  }
}
 800744c:	bf00      	nop
 800744e:	bf00      	nop
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	20000048 	.word	0x20000048

0800745c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007464:	2300      	movs	r3, #0
 8007466:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e033      	b.n	80074da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007476:	2b00      	cmp	r3, #0
 8007478:	d109      	bne.n	800748e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f7f9 fefe 	bl	800127c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007492:	f003 0310 	and.w	r3, r3, #16
 8007496:	2b00      	cmp	r3, #0
 8007498:	d118      	bne.n	80074cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800749e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80074a2:	f023 0302 	bic.w	r3, r3, #2
 80074a6:	f043 0202 	orr.w	r2, r3, #2
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fab4 	bl	8007a1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074be:	f023 0303 	bic.w	r3, r3, #3
 80074c2:	f043 0201 	orr.w	r2, r3, #1
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80074ca:	e001      	b.n	80074d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80074d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
	...

080074e4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80074ec:	2300      	movs	r3, #0
 80074ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d101      	bne.n	80074fe <HAL_ADC_Start+0x1a>
 80074fa:	2302      	movs	r3, #2
 80074fc:	e0b2      	b.n	8007664 <HAL_ADC_Start+0x180>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	2b01      	cmp	r3, #1
 8007512:	d018      	beq.n	8007546 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689a      	ldr	r2, [r3, #8]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f042 0201 	orr.w	r2, r2, #1
 8007522:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007524:	4b52      	ldr	r3, [pc, #328]	@ (8007670 <HAL_ADC_Start+0x18c>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a52      	ldr	r2, [pc, #328]	@ (8007674 <HAL_ADC_Start+0x190>)
 800752a:	fba2 2303 	umull	r2, r3, r2, r3
 800752e:	0c9a      	lsrs	r2, r3, #18
 8007530:	4613      	mov	r3, r2
 8007532:	005b      	lsls	r3, r3, #1
 8007534:	4413      	add	r3, r2
 8007536:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007538:	e002      	b.n	8007540 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	3b01      	subs	r3, #1
 800753e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1f9      	bne.n	800753a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	2b01      	cmp	r3, #1
 8007552:	d17a      	bne.n	800764a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007558:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800755c:	f023 0301 	bic.w	r3, r3, #1
 8007560:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007572:	2b00      	cmp	r3, #0
 8007574:	d007      	beq.n	8007586 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800757a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800757e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800758a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800758e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007592:	d106      	bne.n	80075a2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007598:	f023 0206 	bic.w	r2, r3, #6
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	645a      	str	r2, [r3, #68]	@ 0x44
 80075a0:	e002      	b.n	80075a8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80075b0:	4b31      	ldr	r3, [pc, #196]	@ (8007678 <HAL_ADC_Start+0x194>)
 80075b2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80075bc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f003 031f 	and.w	r3, r3, #31
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d12a      	bne.n	8007620 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a2b      	ldr	r2, [pc, #172]	@ (800767c <HAL_ADC_Start+0x198>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d015      	beq.n	8007600 <HAL_ADC_Start+0x11c>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a29      	ldr	r2, [pc, #164]	@ (8007680 <HAL_ADC_Start+0x19c>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d105      	bne.n	80075ea <HAL_ADC_Start+0x106>
 80075de:	4b26      	ldr	r3, [pc, #152]	@ (8007678 <HAL_ADC_Start+0x194>)
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f003 031f 	and.w	r3, r3, #31
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00a      	beq.n	8007600 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a25      	ldr	r2, [pc, #148]	@ (8007684 <HAL_ADC_Start+0x1a0>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d136      	bne.n	8007662 <HAL_ADC_Start+0x17e>
 80075f4:	4b20      	ldr	r3, [pc, #128]	@ (8007678 <HAL_ADC_Start+0x194>)
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	f003 0310 	and.w	r3, r3, #16
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d130      	bne.n	8007662 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d129      	bne.n	8007662 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	689a      	ldr	r2, [r3, #8]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800761c:	609a      	str	r2, [r3, #8]
 800761e:	e020      	b.n	8007662 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a15      	ldr	r2, [pc, #84]	@ (800767c <HAL_ADC_Start+0x198>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d11b      	bne.n	8007662 <HAL_ADC_Start+0x17e>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007634:	2b00      	cmp	r3, #0
 8007636:	d114      	bne.n	8007662 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689a      	ldr	r2, [r3, #8]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007646:	609a      	str	r2, [r3, #8]
 8007648:	e00b      	b.n	8007662 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800764e:	f043 0210 	orr.w	r2, r3, #16
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800765a:	f043 0201 	orr.w	r2, r3, #1
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	20000040 	.word	0x20000040
 8007674:	431bde83 	.word	0x431bde83
 8007678:	40012300 	.word	0x40012300
 800767c:	40012000 	.word	0x40012000
 8007680:	40012100 	.word	0x40012100
 8007684:	40012200 	.word	0x40012200

08007688 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007692:	2300      	movs	r3, #0
 8007694:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076a4:	d113      	bne.n	80076ce <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80076b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076b4:	d10b      	bne.n	80076ce <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ba:	f043 0220 	orr.w	r2, r3, #32
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e063      	b.n	8007796 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80076ce:	f7ff fe95 	bl	80073fc <HAL_GetTick>
 80076d2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80076d4:	e021      	b.n	800771a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076dc:	d01d      	beq.n	800771a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d007      	beq.n	80076f4 <HAL_ADC_PollForConversion+0x6c>
 80076e4:	f7ff fe8a 	bl	80073fc <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d212      	bcs.n	800771a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0302 	and.w	r3, r3, #2
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d00b      	beq.n	800771a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007706:	f043 0204 	orr.w	r2, r3, #4
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e03d      	b.n	8007796 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 0302 	and.w	r3, r3, #2
 8007724:	2b02      	cmp	r3, #2
 8007726:	d1d6      	bne.n	80076d6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f06f 0212 	mvn.w	r2, #18
 8007730:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007736:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d123      	bne.n	8007794 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007750:	2b00      	cmp	r3, #0
 8007752:	d11f      	bne.n	8007794 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800775a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800775e:	2b00      	cmp	r3, #0
 8007760:	d006      	beq.n	8007770 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800776c:	2b00      	cmp	r3, #0
 800776e:	d111      	bne.n	8007794 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007774:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007780:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d105      	bne.n	8007794 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800778c:	f043 0201 	orr.w	r2, r3, #1
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800779e:	b480      	push	{r7}
 80077a0:	b083      	sub	sp, #12
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80077c2:	2300      	movs	r3, #0
 80077c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d101      	bne.n	80077d4 <HAL_ADC_ConfigChannel+0x1c>
 80077d0:	2302      	movs	r3, #2
 80077d2:	e113      	b.n	80079fc <HAL_ADC_ConfigChannel+0x244>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2b09      	cmp	r3, #9
 80077e2:	d925      	bls.n	8007830 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68d9      	ldr	r1, [r3, #12]
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	461a      	mov	r2, r3
 80077f2:	4613      	mov	r3, r2
 80077f4:	005b      	lsls	r3, r3, #1
 80077f6:	4413      	add	r3, r2
 80077f8:	3b1e      	subs	r3, #30
 80077fa:	2207      	movs	r2, #7
 80077fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007800:	43da      	mvns	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	400a      	ands	r2, r1
 8007808:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68d9      	ldr	r1, [r3, #12]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	689a      	ldr	r2, [r3, #8]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	b29b      	uxth	r3, r3
 800781a:	4618      	mov	r0, r3
 800781c:	4603      	mov	r3, r0
 800781e:	005b      	lsls	r3, r3, #1
 8007820:	4403      	add	r3, r0
 8007822:	3b1e      	subs	r3, #30
 8007824:	409a      	lsls	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	430a      	orrs	r2, r1
 800782c:	60da      	str	r2, [r3, #12]
 800782e:	e022      	b.n	8007876 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6919      	ldr	r1, [r3, #16]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	b29b      	uxth	r3, r3
 800783c:	461a      	mov	r2, r3
 800783e:	4613      	mov	r3, r2
 8007840:	005b      	lsls	r3, r3, #1
 8007842:	4413      	add	r3, r2
 8007844:	2207      	movs	r2, #7
 8007846:	fa02 f303 	lsl.w	r3, r2, r3
 800784a:	43da      	mvns	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	400a      	ands	r2, r1
 8007852:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	6919      	ldr	r1, [r3, #16]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	689a      	ldr	r2, [r3, #8]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	b29b      	uxth	r3, r3
 8007864:	4618      	mov	r0, r3
 8007866:	4603      	mov	r3, r0
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	4403      	add	r3, r0
 800786c:	409a      	lsls	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	2b06      	cmp	r3, #6
 800787c:	d824      	bhi.n	80078c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	4613      	mov	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4413      	add	r3, r2
 800788e:	3b05      	subs	r3, #5
 8007890:	221f      	movs	r2, #31
 8007892:	fa02 f303 	lsl.w	r3, r2, r3
 8007896:	43da      	mvns	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	400a      	ands	r2, r1
 800789e:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	4618      	mov	r0, r3
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	685a      	ldr	r2, [r3, #4]
 80078b2:	4613      	mov	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	3b05      	subs	r3, #5
 80078ba:	fa00 f203 	lsl.w	r2, r0, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	430a      	orrs	r2, r1
 80078c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80078c6:	e04c      	b.n	8007962 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	2b0c      	cmp	r3, #12
 80078ce:	d824      	bhi.n	800791a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	685a      	ldr	r2, [r3, #4]
 80078da:	4613      	mov	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	3b23      	subs	r3, #35	@ 0x23
 80078e2:	221f      	movs	r2, #31
 80078e4:	fa02 f303 	lsl.w	r3, r2, r3
 80078e8:	43da      	mvns	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	400a      	ands	r2, r1
 80078f0:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	4618      	mov	r0, r3
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	4613      	mov	r3, r2
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	4413      	add	r3, r2
 800790a:	3b23      	subs	r3, #35	@ 0x23
 800790c:	fa00 f203 	lsl.w	r2, r0, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	430a      	orrs	r2, r1
 8007916:	631a      	str	r2, [r3, #48]	@ 0x30
 8007918:	e023      	b.n	8007962 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	685a      	ldr	r2, [r3, #4]
 8007924:	4613      	mov	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	4413      	add	r3, r2
 800792a:	3b41      	subs	r3, #65	@ 0x41
 800792c:	221f      	movs	r2, #31
 800792e:	fa02 f303 	lsl.w	r3, r2, r3
 8007932:	43da      	mvns	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	400a      	ands	r2, r1
 800793a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	b29b      	uxth	r3, r3
 8007948:	4618      	mov	r0, r3
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	685a      	ldr	r2, [r3, #4]
 800794e:	4613      	mov	r3, r2
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4413      	add	r3, r2
 8007954:	3b41      	subs	r3, #65	@ 0x41
 8007956:	fa00 f203 	lsl.w	r2, r0, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	430a      	orrs	r2, r1
 8007960:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007962:	4b29      	ldr	r3, [pc, #164]	@ (8007a08 <HAL_ADC_ConfigChannel+0x250>)
 8007964:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a28      	ldr	r2, [pc, #160]	@ (8007a0c <HAL_ADC_ConfigChannel+0x254>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d10f      	bne.n	8007990 <HAL_ADC_ConfigChannel+0x1d8>
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2b12      	cmp	r3, #18
 8007976:	d10b      	bne.n	8007990 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a1d      	ldr	r2, [pc, #116]	@ (8007a0c <HAL_ADC_ConfigChannel+0x254>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d12b      	bne.n	80079f2 <HAL_ADC_ConfigChannel+0x23a>
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a1c      	ldr	r2, [pc, #112]	@ (8007a10 <HAL_ADC_ConfigChannel+0x258>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d003      	beq.n	80079ac <HAL_ADC_ConfigChannel+0x1f4>
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b11      	cmp	r3, #17
 80079aa:	d122      	bne.n	80079f2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a11      	ldr	r2, [pc, #68]	@ (8007a10 <HAL_ADC_ConfigChannel+0x258>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d111      	bne.n	80079f2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80079ce:	4b11      	ldr	r3, [pc, #68]	@ (8007a14 <HAL_ADC_ConfigChannel+0x25c>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a11      	ldr	r2, [pc, #68]	@ (8007a18 <HAL_ADC_ConfigChannel+0x260>)
 80079d4:	fba2 2303 	umull	r2, r3, r2, r3
 80079d8:	0c9a      	lsrs	r2, r3, #18
 80079da:	4613      	mov	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4413      	add	r3, r2
 80079e0:	005b      	lsls	r3, r3, #1
 80079e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80079e4:	e002      	b.n	80079ec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	3b01      	subs	r3, #1
 80079ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1f9      	bne.n	80079e6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3714      	adds	r7, #20
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr
 8007a08:	40012300 	.word	0x40012300
 8007a0c:	40012000 	.word	0x40012000
 8007a10:	10000012 	.word	0x10000012
 8007a14:	20000040 	.word	0x20000040
 8007a18:	431bde83 	.word	0x431bde83

08007a1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007a24:	4b79      	ldr	r3, [pc, #484]	@ (8007c0c <ADC_Init+0x1f0>)
 8007a26:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	685a      	ldr	r2, [r3, #4]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	431a      	orrs	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007a50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	6859      	ldr	r1, [r3, #4]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	021a      	lsls	r2, r3, #8
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	430a      	orrs	r2, r1
 8007a64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	685a      	ldr	r2, [r3, #4]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8007a74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6859      	ldr	r1, [r3, #4]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	689a      	ldr	r2, [r3, #8]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	430a      	orrs	r2, r1
 8007a86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	689a      	ldr	r2, [r3, #8]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6899      	ldr	r1, [r3, #8]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68da      	ldr	r2, [r3, #12]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	430a      	orrs	r2, r1
 8007aa8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aae:	4a58      	ldr	r2, [pc, #352]	@ (8007c10 <ADC_Init+0x1f4>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d022      	beq.n	8007afa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	689a      	ldr	r2, [r3, #8]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007ac2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6899      	ldr	r1, [r3, #8]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	689a      	ldr	r2, [r3, #8]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007ae4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	6899      	ldr	r1, [r3, #8]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	430a      	orrs	r2, r1
 8007af6:	609a      	str	r2, [r3, #8]
 8007af8:	e00f      	b.n	8007b1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	689a      	ldr	r2, [r3, #8]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007b08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	689a      	ldr	r2, [r3, #8]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007b18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	689a      	ldr	r2, [r3, #8]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 0202 	bic.w	r2, r2, #2
 8007b28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	6899      	ldr	r1, [r3, #8]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	7e1b      	ldrb	r3, [r3, #24]
 8007b34:	005a      	lsls	r2, r3, #1
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d01b      	beq.n	8007b80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8007b66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6859      	ldr	r1, [r3, #4]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b72:	3b01      	subs	r3, #1
 8007b74:	035a      	lsls	r2, r3, #13
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	605a      	str	r2, [r3, #4]
 8007b7e:	e007      	b.n	8007b90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	685a      	ldr	r2, [r3, #4]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8007b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	69db      	ldr	r3, [r3, #28]
 8007baa:	3b01      	subs	r3, #1
 8007bac:	051a      	lsls	r2, r3, #20
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	430a      	orrs	r2, r1
 8007bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	689a      	ldr	r2, [r3, #8]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007bc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6899      	ldr	r1, [r3, #8]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007bd2:	025a      	lsls	r2, r3, #9
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	689a      	ldr	r2, [r3, #8]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007bea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6899      	ldr	r1, [r3, #8]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	029a      	lsls	r2, r3, #10
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	430a      	orrs	r2, r1
 8007bfe:	609a      	str	r2, [r3, #8]
}
 8007c00:	bf00      	nop
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	40012300 	.word	0x40012300
 8007c10:	0f000001 	.word	0x0f000001

08007c14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d101      	bne.n	8007c2c <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8007c28:	2302      	movs	r3, #2
 8007c2a:	e031      	b.n	8007c90 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007c34:	4b19      	ldr	r3, [pc, #100]	@ (8007c9c <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8007c36:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	f023 021f 	bic.w	r2, r3, #31
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	685a      	ldr	r2, [r3, #4]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	431a      	orrs	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	431a      	orrs	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	685a      	ldr	r2, [r3, #4]
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	431a      	orrs	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3714      	adds	r7, #20
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr
 8007c9c:	40012300 	.word	0x40012300

08007ca0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e0ed      	b.n	8007e8e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d102      	bne.n	8007cc4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f7f9 ff84 	bl	8001bcc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f022 0202 	bic.w	r2, r2, #2
 8007cd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007cd4:	f7ff fb92 	bl	80073fc <HAL_GetTick>
 8007cd8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007cda:	e012      	b.n	8007d02 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007cdc:	f7ff fb8e 	bl	80073fc <HAL_GetTick>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	2b0a      	cmp	r3, #10
 8007ce8:	d90b      	bls.n	8007d02 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2205      	movs	r2, #5
 8007cfa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e0c5      	b.n	8007e8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	f003 0302 	and.w	r3, r3, #2
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1e5      	bne.n	8007cdc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f042 0201 	orr.w	r2, r2, #1
 8007d1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007d20:	f7ff fb6c 	bl	80073fc <HAL_GetTick>
 8007d24:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007d26:	e012      	b.n	8007d4e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007d28:	f7ff fb68 	bl	80073fc <HAL_GetTick>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	2b0a      	cmp	r3, #10
 8007d34:	d90b      	bls.n	8007d4e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d3a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2205      	movs	r2, #5
 8007d46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e09f      	b.n	8007e8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	f003 0301 	and.w	r3, r3, #1
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d0e5      	beq.n	8007d28 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	7e1b      	ldrb	r3, [r3, #24]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d108      	bne.n	8007d76 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007d72:	601a      	str	r2, [r3, #0]
 8007d74:	e007      	b.n	8007d86 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007d84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	7e5b      	ldrb	r3, [r3, #25]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d108      	bne.n	8007da0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d9c:	601a      	str	r2, [r3, #0]
 8007d9e:	e007      	b.n	8007db0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007dae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	7e9b      	ldrb	r3, [r3, #26]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d108      	bne.n	8007dca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f042 0220 	orr.w	r2, r2, #32
 8007dc6:	601a      	str	r2, [r3, #0]
 8007dc8:	e007      	b.n	8007dda <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f022 0220 	bic.w	r2, r2, #32
 8007dd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	7edb      	ldrb	r3, [r3, #27]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d108      	bne.n	8007df4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f022 0210 	bic.w	r2, r2, #16
 8007df0:	601a      	str	r2, [r3, #0]
 8007df2:	e007      	b.n	8007e04 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f042 0210 	orr.w	r2, r2, #16
 8007e02:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	7f1b      	ldrb	r3, [r3, #28]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d108      	bne.n	8007e1e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f042 0208 	orr.w	r2, r2, #8
 8007e1a:	601a      	str	r2, [r3, #0]
 8007e1c:	e007      	b.n	8007e2e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f022 0208 	bic.w	r2, r2, #8
 8007e2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	7f5b      	ldrb	r3, [r3, #29]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d108      	bne.n	8007e48 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f042 0204 	orr.w	r2, r2, #4
 8007e44:	601a      	str	r2, [r3, #0]
 8007e46:	e007      	b.n	8007e58 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f022 0204 	bic.w	r2, r2, #4
 8007e56:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	689a      	ldr	r2, [r3, #8]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	431a      	orrs	r2, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	431a      	orrs	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	695b      	ldr	r3, [r3, #20]
 8007e6c:	ea42 0103 	orr.w	r1, r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	1e5a      	subs	r2, r3, #1
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	430a      	orrs	r2, r1
 8007e7c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
	...

08007e98 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007eae:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007eb0:	7cfb      	ldrb	r3, [r7, #19]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d003      	beq.n	8007ebe <HAL_CAN_ConfigFilter+0x26>
 8007eb6:	7cfb      	ldrb	r3, [r7, #19]
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	f040 80be 	bne.w	800803a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8007ebe:	4b65      	ldr	r3, [pc, #404]	@ (8008054 <HAL_CAN_ConfigFilter+0x1bc>)
 8007ec0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007ec8:	f043 0201 	orr.w	r2, r3, #1
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007ed8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eec:	021b      	lsls	r3, r3, #8
 8007eee:	431a      	orrs	r2, r3
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	695b      	ldr	r3, [r3, #20]
 8007efa:	f003 031f 	and.w	r3, r3, #31
 8007efe:	2201      	movs	r2, #1
 8007f00:	fa02 f303 	lsl.w	r3, r2, r3
 8007f04:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	43db      	mvns	r3, r3
 8007f10:	401a      	ands	r2, r3
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	69db      	ldr	r3, [r3, #28]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d123      	bne.n	8007f68 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	43db      	mvns	r3, r3
 8007f2a:	401a      	ands	r2, r3
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007f3e:	683a      	ldr	r2, [r7, #0]
 8007f40:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007f42:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	3248      	adds	r2, #72	@ 0x48
 8007f48:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007f5c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007f5e:	6979      	ldr	r1, [r7, #20]
 8007f60:	3348      	adds	r3, #72	@ 0x48
 8007f62:	00db      	lsls	r3, r3, #3
 8007f64:	440b      	add	r3, r1
 8007f66:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	69db      	ldr	r3, [r3, #28]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d122      	bne.n	8007fb6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	431a      	orrs	r2, r3
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007f8c:	683a      	ldr	r2, [r7, #0]
 8007f8e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007f90:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	3248      	adds	r2, #72	@ 0x48
 8007f96:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007faa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007fac:	6979      	ldr	r1, [r7, #20]
 8007fae:	3348      	adds	r3, #72	@ 0x48
 8007fb0:	00db      	lsls	r3, r3, #3
 8007fb2:	440b      	add	r3, r1
 8007fb4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d109      	bne.n	8007fd2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	43db      	mvns	r3, r3
 8007fc8:	401a      	ands	r2, r3
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8007fd0:	e007      	b.n	8007fe2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	431a      	orrs	r2, r3
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d109      	bne.n	8007ffe <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	43db      	mvns	r3, r3
 8007ff4:	401a      	ands	r2, r3
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8007ffc:	e007      	b.n	800800e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	431a      	orrs	r2, r3
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	6a1b      	ldr	r3, [r3, #32]
 8008012:	2b01      	cmp	r3, #1
 8008014:	d107      	bne.n	8008026 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	431a      	orrs	r2, r3
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800802c:	f023 0201 	bic.w	r2, r3, #1
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8008036:	2300      	movs	r3, #0
 8008038:	e006      	b.n	8008048 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800803e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
  }
}
 8008048:	4618      	mov	r0, r3
 800804a:	371c      	adds	r7, #28
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr
 8008054:	40006400 	.word	0x40006400

08008058 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b01      	cmp	r3, #1
 800806a:	d12e      	bne.n	80080ca <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2202      	movs	r2, #2
 8008070:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f022 0201 	bic.w	r2, r2, #1
 8008082:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008084:	f7ff f9ba 	bl	80073fc <HAL_GetTick>
 8008088:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800808a:	e012      	b.n	80080b2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800808c:	f7ff f9b6 	bl	80073fc <HAL_GetTick>
 8008090:	4602      	mov	r2, r0
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	2b0a      	cmp	r3, #10
 8008098:	d90b      	bls.n	80080b2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800809e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2205      	movs	r2, #5
 80080aa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e012      	b.n	80080d8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	f003 0301 	and.w	r3, r3, #1
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1e5      	bne.n	800808c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	e006      	b.n	80080d8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ce:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
  }
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b089      	sub	sp, #36	@ 0x24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
 80080ec:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80080f4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80080fe:	7ffb      	ldrb	r3, [r7, #31]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d003      	beq.n	800810c <HAL_CAN_AddTxMessage+0x2c>
 8008104:	7ffb      	ldrb	r3, [r7, #31]
 8008106:	2b02      	cmp	r3, #2
 8008108:	f040 80b8 	bne.w	800827c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10a      	bne.n	800812c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800811c:	2b00      	cmp	r3, #0
 800811e:	d105      	bne.n	800812c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8008126:	2b00      	cmp	r3, #0
 8008128:	f000 80a0 	beq.w	800826c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	0e1b      	lsrs	r3, r3, #24
 8008130:	f003 0303 	and.w	r3, r3, #3
 8008134:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	2b02      	cmp	r3, #2
 800813a:	d907      	bls.n	800814c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008140:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e09e      	b.n	800828a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800814c:	2201      	movs	r2, #1
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	409a      	lsls	r2, r3
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d10d      	bne.n	800817a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8008168:	68f9      	ldr	r1, [r7, #12]
 800816a:	6809      	ldr	r1, [r1, #0]
 800816c:	431a      	orrs	r2, r3
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	3318      	adds	r3, #24
 8008172:	011b      	lsls	r3, r3, #4
 8008174:	440b      	add	r3, r1
 8008176:	601a      	str	r2, [r3, #0]
 8008178:	e00f      	b.n	800819a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008184:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800818a:	68f9      	ldr	r1, [r7, #12]
 800818c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800818e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	3318      	adds	r3, #24
 8008194:	011b      	lsls	r3, r3, #4
 8008196:	440b      	add	r3, r1
 8008198:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6819      	ldr	r1, [r3, #0]
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	691a      	ldr	r2, [r3, #16]
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	3318      	adds	r3, #24
 80081a6:	011b      	lsls	r3, r3, #4
 80081a8:	440b      	add	r3, r1
 80081aa:	3304      	adds	r3, #4
 80081ac:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	7d1b      	ldrb	r3, [r3, #20]
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d111      	bne.n	80081da <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	3318      	adds	r3, #24
 80081be:	011b      	lsls	r3, r3, #4
 80081c0:	4413      	add	r3, r2
 80081c2:	3304      	adds	r3, #4
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	6811      	ldr	r1, [r2, #0]
 80081ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	3318      	adds	r3, #24
 80081d2:	011b      	lsls	r3, r3, #4
 80081d4:	440b      	add	r3, r1
 80081d6:	3304      	adds	r3, #4
 80081d8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	3307      	adds	r3, #7
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	061a      	lsls	r2, r3, #24
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	3306      	adds	r3, #6
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	041b      	lsls	r3, r3, #16
 80081ea:	431a      	orrs	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	3305      	adds	r3, #5
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	021b      	lsls	r3, r3, #8
 80081f4:	4313      	orrs	r3, r2
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	3204      	adds	r2, #4
 80081fa:	7812      	ldrb	r2, [r2, #0]
 80081fc:	4610      	mov	r0, r2
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	6811      	ldr	r1, [r2, #0]
 8008202:	ea43 0200 	orr.w	r2, r3, r0
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	011b      	lsls	r3, r3, #4
 800820a:	440b      	add	r3, r1
 800820c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8008210:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	3303      	adds	r3, #3
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	061a      	lsls	r2, r3, #24
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	3302      	adds	r3, #2
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	041b      	lsls	r3, r3, #16
 8008222:	431a      	orrs	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	3301      	adds	r3, #1
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	021b      	lsls	r3, r3, #8
 800822c:	4313      	orrs	r3, r2
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	7812      	ldrb	r2, [r2, #0]
 8008232:	4610      	mov	r0, r2
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	6811      	ldr	r1, [r2, #0]
 8008238:	ea43 0200 	orr.w	r2, r3, r0
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	011b      	lsls	r3, r3, #4
 8008240:	440b      	add	r3, r1
 8008242:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8008246:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	3318      	adds	r3, #24
 8008250:	011b      	lsls	r3, r3, #4
 8008252:	4413      	add	r3, r2
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	6811      	ldr	r1, [r2, #0]
 800825a:	f043 0201 	orr.w	r2, r3, #1
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	3318      	adds	r3, #24
 8008262:	011b      	lsls	r3, r3, #4
 8008264:	440b      	add	r3, r1
 8008266:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8008268:	2300      	movs	r3, #0
 800826a:	e00e      	b.n	800828a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008270:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	e006      	b.n	800828a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008280:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008288:	2301      	movs	r3, #1
  }
}
 800828a:	4618      	mov	r0, r3
 800828c:	3724      	adds	r7, #36	@ 0x24
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr

08008296 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8008296:	b480      	push	{r7}
 8008298:	b087      	sub	sp, #28
 800829a:	af00      	add	r7, sp, #0
 800829c:	60f8      	str	r0, [r7, #12]
 800829e:	60b9      	str	r1, [r7, #8]
 80082a0:	607a      	str	r2, [r7, #4]
 80082a2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80082aa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80082ac:	7dfb      	ldrb	r3, [r7, #23]
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d003      	beq.n	80082ba <HAL_CAN_GetRxMessage+0x24>
 80082b2:	7dfb      	ldrb	r3, [r7, #23]
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	f040 80f3 	bne.w	80084a0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10e      	bne.n	80082de <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	f003 0303 	and.w	r3, r3, #3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d116      	bne.n	80082fc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082d2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e0e7      	b.n	80084ae <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	f003 0303 	and.w	r3, r3, #3
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d107      	bne.n	80082fc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082f0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e0d8      	b.n	80084ae <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	331b      	adds	r3, #27
 8008304:	011b      	lsls	r3, r3, #4
 8008306:	4413      	add	r3, r2
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 0204 	and.w	r2, r3, #4
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d10c      	bne.n	8008334 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	331b      	adds	r3, #27
 8008322:	011b      	lsls	r3, r3, #4
 8008324:	4413      	add	r3, r2
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	0d5b      	lsrs	r3, r3, #21
 800832a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	601a      	str	r2, [r3, #0]
 8008332:	e00b      	b.n	800834c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	331b      	adds	r3, #27
 800833c:	011b      	lsls	r3, r3, #4
 800833e:	4413      	add	r3, r2
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	08db      	lsrs	r3, r3, #3
 8008344:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	331b      	adds	r3, #27
 8008354:	011b      	lsls	r3, r3, #4
 8008356:	4413      	add	r3, r2
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0202 	and.w	r2, r3, #2
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	331b      	adds	r3, #27
 800836a:	011b      	lsls	r3, r3, #4
 800836c:	4413      	add	r3, r2
 800836e:	3304      	adds	r3, #4
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 020f 	and.w	r2, r3, #15
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	331b      	adds	r3, #27
 8008382:	011b      	lsls	r3, r3, #4
 8008384:	4413      	add	r3, r2
 8008386:	3304      	adds	r3, #4
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	0a1b      	lsrs	r3, r3, #8
 800838c:	b2da      	uxtb	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	331b      	adds	r3, #27
 800839a:	011b      	lsls	r3, r3, #4
 800839c:	4413      	add	r3, r2
 800839e:	3304      	adds	r3, #4
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	0c1b      	lsrs	r3, r3, #16
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	011b      	lsls	r3, r3, #4
 80083b2:	4413      	add	r3, r2
 80083b4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	b2da      	uxtb	r2, r3
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	011b      	lsls	r3, r3, #4
 80083c8:	4413      	add	r3, r2
 80083ca:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	0a1a      	lsrs	r2, r3, #8
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	3301      	adds	r3, #1
 80083d6:	b2d2      	uxtb	r2, r2
 80083d8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	011b      	lsls	r3, r3, #4
 80083e2:	4413      	add	r3, r2
 80083e4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	0c1a      	lsrs	r2, r3, #16
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	3302      	adds	r3, #2
 80083f0:	b2d2      	uxtb	r2, r2
 80083f2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	011b      	lsls	r3, r3, #4
 80083fc:	4413      	add	r3, r2
 80083fe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	0e1a      	lsrs	r2, r3, #24
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	3303      	adds	r3, #3
 800840a:	b2d2      	uxtb	r2, r2
 800840c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	011b      	lsls	r3, r3, #4
 8008416:	4413      	add	r3, r2
 8008418:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	3304      	adds	r3, #4
 8008422:	b2d2      	uxtb	r2, r2
 8008424:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	011b      	lsls	r3, r3, #4
 800842e:	4413      	add	r3, r2
 8008430:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	0a1a      	lsrs	r2, r3, #8
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	3305      	adds	r3, #5
 800843c:	b2d2      	uxtb	r2, r2
 800843e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	011b      	lsls	r3, r3, #4
 8008448:	4413      	add	r3, r2
 800844a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	0c1a      	lsrs	r2, r3, #16
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	3306      	adds	r3, #6
 8008456:	b2d2      	uxtb	r2, r2
 8008458:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	011b      	lsls	r3, r3, #4
 8008462:	4413      	add	r3, r2
 8008464:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	0e1a      	lsrs	r2, r3, #24
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	3307      	adds	r3, #7
 8008470:	b2d2      	uxtb	r2, r2
 8008472:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d108      	bne.n	800848c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68da      	ldr	r2, [r3, #12]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f042 0220 	orr.w	r2, r2, #32
 8008488:	60da      	str	r2, [r3, #12]
 800848a:	e007      	b.n	800849c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	691a      	ldr	r2, [r3, #16]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f042 0220 	orr.w	r2, r2, #32
 800849a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800849c:	2300      	movs	r3, #0
 800849e:	e006      	b.n	80084ae <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
  }
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	371c      	adds	r7, #28
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b08a      	sub	sp, #40	@ 0x28
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80084c2:	2300      	movs	r3, #0
 80084c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	695b      	ldr	r3, [r3, #20]
 80084cc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80084f6:	6a3b      	ldr	r3, [r7, #32]
 80084f8:	f003 0301 	and.w	r3, r3, #1
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d07c      	beq.n	80085fa <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	f003 0301 	and.w	r3, r3, #1
 8008506:	2b00      	cmp	r3, #0
 8008508:	d023      	beq.n	8008552 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2201      	movs	r2, #1
 8008510:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	f003 0302 	and.w	r3, r3, #2
 8008518:	2b00      	cmp	r3, #0
 800851a:	d003      	beq.n	8008524 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 f983 	bl	8008828 <HAL_CAN_TxMailbox0CompleteCallback>
 8008522:	e016      	b.n	8008552 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	f003 0304 	and.w	r3, r3, #4
 800852a:	2b00      	cmp	r3, #0
 800852c:	d004      	beq.n	8008538 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800852e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008530:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008534:	627b      	str	r3, [r7, #36]	@ 0x24
 8008536:	e00c      	b.n	8008552 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	f003 0308 	and.w	r3, r3, #8
 800853e:	2b00      	cmp	r3, #0
 8008540:	d004      	beq.n	800854c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8008542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008544:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008548:	627b      	str	r3, [r7, #36]	@ 0x24
 800854a:	e002      	b.n	8008552 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f989 	bl	8008864 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008558:	2b00      	cmp	r3, #0
 800855a:	d024      	beq.n	80085a6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008564:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800856c:	2b00      	cmp	r3, #0
 800856e:	d003      	beq.n	8008578 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 f963 	bl	800883c <HAL_CAN_TxMailbox1CompleteCallback>
 8008576:	e016      	b.n	80085a6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800857e:	2b00      	cmp	r3, #0
 8008580:	d004      	beq.n	800858c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8008582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008584:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008588:	627b      	str	r3, [r7, #36]	@ 0x24
 800858a:	e00c      	b.n	80085a6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008592:	2b00      	cmp	r3, #0
 8008594:	d004      	beq.n	80085a0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8008596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008598:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800859c:	627b      	str	r3, [r7, #36]	@ 0x24
 800859e:	e002      	b.n	80085a6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 f969 	bl	8008878 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d024      	beq.n	80085fa <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80085b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d003      	beq.n	80085cc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f943 	bl	8008850 <HAL_CAN_TxMailbox2CompleteCallback>
 80085ca:	e016      	b.n	80085fa <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d004      	beq.n	80085e0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80085d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80085de:	e00c      	b.n	80085fa <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d004      	beq.n	80085f4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80085ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80085f2:	e002      	b.n	80085fa <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 f949 	bl	800888c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80085fa:	6a3b      	ldr	r3, [r7, #32]
 80085fc:	f003 0308 	and.w	r3, r3, #8
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00c      	beq.n	800861e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	f003 0310 	and.w	r3, r3, #16
 800860a:	2b00      	cmp	r3, #0
 800860c:	d007      	beq.n	800861e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800860e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008610:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008614:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2210      	movs	r2, #16
 800861c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800861e:	6a3b      	ldr	r3, [r7, #32]
 8008620:	f003 0304 	and.w	r3, r3, #4
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00b      	beq.n	8008640 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	f003 0308 	and.w	r3, r3, #8
 800862e:	2b00      	cmp	r3, #0
 8008630:	d006      	beq.n	8008640 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2208      	movs	r2, #8
 8008638:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 f93a 	bl	80088b4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8008640:	6a3b      	ldr	r3, [r7, #32]
 8008642:	f003 0302 	and.w	r3, r3, #2
 8008646:	2b00      	cmp	r3, #0
 8008648:	d009      	beq.n	800865e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	f003 0303 	and.w	r3, r3, #3
 8008654:	2b00      	cmp	r3, #0
 8008656:	d002      	beq.n	800865e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 f921 	bl	80088a0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800865e:	6a3b      	ldr	r3, [r7, #32]
 8008660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00c      	beq.n	8008682 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	f003 0310 	and.w	r3, r3, #16
 800866e:	2b00      	cmp	r3, #0
 8008670:	d007      	beq.n	8008682 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8008672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008674:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008678:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2210      	movs	r2, #16
 8008680:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8008682:	6a3b      	ldr	r3, [r7, #32]
 8008684:	f003 0320 	and.w	r3, r3, #32
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00b      	beq.n	80086a4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	f003 0308 	and.w	r3, r3, #8
 8008692:	2b00      	cmp	r3, #0
 8008694:	d006      	beq.n	80086a4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2208      	movs	r2, #8
 800869c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f91c 	bl	80088dc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80086a4:	6a3b      	ldr	r3, [r7, #32]
 80086a6:	f003 0310 	and.w	r3, r3, #16
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d009      	beq.n	80086c2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	f003 0303 	and.w	r3, r3, #3
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d002      	beq.n	80086c2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f903 	bl	80088c8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80086c2:	6a3b      	ldr	r3, [r7, #32]
 80086c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00b      	beq.n	80086e4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	f003 0310 	and.w	r3, r3, #16
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d006      	beq.n	80086e4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2210      	movs	r2, #16
 80086dc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 f906 	bl	80088f0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80086e4:	6a3b      	ldr	r3, [r7, #32]
 80086e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00b      	beq.n	8008706 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	f003 0308 	and.w	r3, r3, #8
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d006      	beq.n	8008706 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2208      	movs	r2, #8
 80086fe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 f8ff 	bl	8008904 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800870c:	2b00      	cmp	r3, #0
 800870e:	d07b      	beq.n	8008808 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	f003 0304 	and.w	r3, r3, #4
 8008716:	2b00      	cmp	r3, #0
 8008718:	d072      	beq.n	8008800 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800871a:	6a3b      	ldr	r3, [r7, #32]
 800871c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008720:	2b00      	cmp	r3, #0
 8008722:	d008      	beq.n	8008736 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800872a:	2b00      	cmp	r3, #0
 800872c:	d003      	beq.n	8008736 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800872e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008730:	f043 0301 	orr.w	r3, r3, #1
 8008734:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800873c:	2b00      	cmp	r3, #0
 800873e:	d008      	beq.n	8008752 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008746:	2b00      	cmp	r3, #0
 8008748:	d003      	beq.n	8008752 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800874a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800874c:	f043 0302 	orr.w	r3, r3, #2
 8008750:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8008752:	6a3b      	ldr	r3, [r7, #32]
 8008754:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008758:	2b00      	cmp	r3, #0
 800875a:	d008      	beq.n	800876e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8008762:	2b00      	cmp	r3, #0
 8008764:	d003      	beq.n	800876e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8008766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008768:	f043 0304 	orr.w	r3, r3, #4
 800876c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800876e:	6a3b      	ldr	r3, [r7, #32]
 8008770:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008774:	2b00      	cmp	r3, #0
 8008776:	d043      	beq.n	8008800 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800877e:	2b00      	cmp	r3, #0
 8008780:	d03e      	beq.n	8008800 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008788:	2b60      	cmp	r3, #96	@ 0x60
 800878a:	d02b      	beq.n	80087e4 <HAL_CAN_IRQHandler+0x32a>
 800878c:	2b60      	cmp	r3, #96	@ 0x60
 800878e:	d82e      	bhi.n	80087ee <HAL_CAN_IRQHandler+0x334>
 8008790:	2b50      	cmp	r3, #80	@ 0x50
 8008792:	d022      	beq.n	80087da <HAL_CAN_IRQHandler+0x320>
 8008794:	2b50      	cmp	r3, #80	@ 0x50
 8008796:	d82a      	bhi.n	80087ee <HAL_CAN_IRQHandler+0x334>
 8008798:	2b40      	cmp	r3, #64	@ 0x40
 800879a:	d019      	beq.n	80087d0 <HAL_CAN_IRQHandler+0x316>
 800879c:	2b40      	cmp	r3, #64	@ 0x40
 800879e:	d826      	bhi.n	80087ee <HAL_CAN_IRQHandler+0x334>
 80087a0:	2b30      	cmp	r3, #48	@ 0x30
 80087a2:	d010      	beq.n	80087c6 <HAL_CAN_IRQHandler+0x30c>
 80087a4:	2b30      	cmp	r3, #48	@ 0x30
 80087a6:	d822      	bhi.n	80087ee <HAL_CAN_IRQHandler+0x334>
 80087a8:	2b10      	cmp	r3, #16
 80087aa:	d002      	beq.n	80087b2 <HAL_CAN_IRQHandler+0x2f8>
 80087ac:	2b20      	cmp	r3, #32
 80087ae:	d005      	beq.n	80087bc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80087b0:	e01d      	b.n	80087ee <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80087b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b4:	f043 0308 	orr.w	r3, r3, #8
 80087b8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80087ba:	e019      	b.n	80087f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80087bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087be:	f043 0310 	orr.w	r3, r3, #16
 80087c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80087c4:	e014      	b.n	80087f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80087c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c8:	f043 0320 	orr.w	r3, r3, #32
 80087cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80087ce:	e00f      	b.n	80087f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80087d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80087d8:	e00a      	b.n	80087f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80087da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087e0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80087e2:	e005      	b.n	80087f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80087e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087ea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80087ec:	e000      	b.n	80087f0 <HAL_CAN_IRQHandler+0x336>
            break;
 80087ee:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	699a      	ldr	r2, [r3, #24]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80087fe:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2204      	movs	r2, #4
 8008806:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8008808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880a:	2b00      	cmp	r3, #0
 800880c:	d008      	beq.n	8008820 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008814:	431a      	orrs	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f87c 	bl	8008918 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8008820:	bf00      	nop
 8008822:	3728      	adds	r7, #40	@ 0x28
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8008844:	bf00      	nop
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8008858:	bf00      	nop
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800886c:	bf00      	nop
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8008880:	bf00      	nop
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8008894:	bf00      	nop
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80088a8:	bf00      	nop
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80088bc:	bf00      	nop
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80088e4:	bf00      	nop
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80088f8:	bf00      	nop
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800890c:	bf00      	nop
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800892c:	b480      	push	{r7}
 800892e:	b085      	sub	sp, #20
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f003 0307 	and.w	r3, r3, #7
 800893a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800893c:	4b0c      	ldr	r3, [pc, #48]	@ (8008970 <__NVIC_SetPriorityGrouping+0x44>)
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008942:	68ba      	ldr	r2, [r7, #8]
 8008944:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008948:	4013      	ands	r3, r2
 800894a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008954:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008958:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800895c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800895e:	4a04      	ldr	r2, [pc, #16]	@ (8008970 <__NVIC_SetPriorityGrouping+0x44>)
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	60d3      	str	r3, [r2, #12]
}
 8008964:	bf00      	nop
 8008966:	3714      	adds	r7, #20
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr
 8008970:	e000ed00 	.word	0xe000ed00

08008974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008974:	b480      	push	{r7}
 8008976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008978:	4b04      	ldr	r3, [pc, #16]	@ (800898c <__NVIC_GetPriorityGrouping+0x18>)
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	0a1b      	lsrs	r3, r3, #8
 800897e:	f003 0307 	and.w	r3, r3, #7
}
 8008982:	4618      	mov	r0, r3
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr
 800898c:	e000ed00 	.word	0xe000ed00

08008990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	4603      	mov	r3, r0
 8008998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800899a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	db0b      	blt.n	80089ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80089a2:	79fb      	ldrb	r3, [r7, #7]
 80089a4:	f003 021f 	and.w	r2, r3, #31
 80089a8:	4907      	ldr	r1, [pc, #28]	@ (80089c8 <__NVIC_EnableIRQ+0x38>)
 80089aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089ae:	095b      	lsrs	r3, r3, #5
 80089b0:	2001      	movs	r0, #1
 80089b2:	fa00 f202 	lsl.w	r2, r0, r2
 80089b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80089ba:	bf00      	nop
 80089bc:	370c      	adds	r7, #12
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	e000e100 	.word	0xe000e100

080089cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	4603      	mov	r3, r0
 80089d4:	6039      	str	r1, [r7, #0]
 80089d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	db0a      	blt.n	80089f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	b2da      	uxtb	r2, r3
 80089e4:	490c      	ldr	r1, [pc, #48]	@ (8008a18 <__NVIC_SetPriority+0x4c>)
 80089e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089ea:	0112      	lsls	r2, r2, #4
 80089ec:	b2d2      	uxtb	r2, r2
 80089ee:	440b      	add	r3, r1
 80089f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80089f4:	e00a      	b.n	8008a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	b2da      	uxtb	r2, r3
 80089fa:	4908      	ldr	r1, [pc, #32]	@ (8008a1c <__NVIC_SetPriority+0x50>)
 80089fc:	79fb      	ldrb	r3, [r7, #7]
 80089fe:	f003 030f 	and.w	r3, r3, #15
 8008a02:	3b04      	subs	r3, #4
 8008a04:	0112      	lsls	r2, r2, #4
 8008a06:	b2d2      	uxtb	r2, r2
 8008a08:	440b      	add	r3, r1
 8008a0a:	761a      	strb	r2, [r3, #24]
}
 8008a0c:	bf00      	nop
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr
 8008a18:	e000e100 	.word	0xe000e100
 8008a1c:	e000ed00 	.word	0xe000ed00

08008a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b089      	sub	sp, #36	@ 0x24
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f003 0307 	and.w	r3, r3, #7
 8008a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	f1c3 0307 	rsb	r3, r3, #7
 8008a3a:	2b04      	cmp	r3, #4
 8008a3c:	bf28      	it	cs
 8008a3e:	2304      	movcs	r3, #4
 8008a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	3304      	adds	r3, #4
 8008a46:	2b06      	cmp	r3, #6
 8008a48:	d902      	bls.n	8008a50 <NVIC_EncodePriority+0x30>
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	3b03      	subs	r3, #3
 8008a4e:	e000      	b.n	8008a52 <NVIC_EncodePriority+0x32>
 8008a50:	2300      	movs	r3, #0
 8008a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a54:	f04f 32ff 	mov.w	r2, #4294967295
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a5e:	43da      	mvns	r2, r3
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	401a      	ands	r2, r3
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a68:	f04f 31ff 	mov.w	r1, #4294967295
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a72:	43d9      	mvns	r1, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a78:	4313      	orrs	r3, r2
         );
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3724      	adds	r7, #36	@ 0x24
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
	...

08008a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	3b01      	subs	r3, #1
 8008a94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a98:	d301      	bcc.n	8008a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e00f      	b.n	8008abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8008ac8 <SysTick_Config+0x40>)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008aa6:	210f      	movs	r1, #15
 8008aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8008aac:	f7ff ff8e 	bl	80089cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008ab0:	4b05      	ldr	r3, [pc, #20]	@ (8008ac8 <SysTick_Config+0x40>)
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008ab6:	4b04      	ldr	r3, [pc, #16]	@ (8008ac8 <SysTick_Config+0x40>)
 8008ab8:	2207      	movs	r2, #7
 8008aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3708      	adds	r7, #8
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	e000e010 	.word	0xe000e010

08008acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f7ff ff29 	bl	800892c <__NVIC_SetPriorityGrouping>
}
 8008ada:	bf00      	nop
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b086      	sub	sp, #24
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	4603      	mov	r3, r0
 8008aea:	60b9      	str	r1, [r7, #8]
 8008aec:	607a      	str	r2, [r7, #4]
 8008aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008af0:	2300      	movs	r3, #0
 8008af2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008af4:	f7ff ff3e 	bl	8008974 <__NVIC_GetPriorityGrouping>
 8008af8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	68b9      	ldr	r1, [r7, #8]
 8008afe:	6978      	ldr	r0, [r7, #20]
 8008b00:	f7ff ff8e 	bl	8008a20 <NVIC_EncodePriority>
 8008b04:	4602      	mov	r2, r0
 8008b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b0a:	4611      	mov	r1, r2
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7ff ff5d 	bl	80089cc <__NVIC_SetPriority>
}
 8008b12:	bf00      	nop
 8008b14:	3718      	adds	r7, #24
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b082      	sub	sp, #8
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	4603      	mov	r3, r0
 8008b22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7ff ff31 	bl	8008990 <__NVIC_EnableIRQ>
}
 8008b2e:	bf00      	nop
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b082      	sub	sp, #8
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f7ff ffa2 	bl	8008a88 <SysTick_Config>
 8008b44:	4603      	mov	r3, r0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3708      	adds	r7, #8
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b084      	sub	sp, #16
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b5a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008b5c:	f7fe fc4e 	bl	80073fc <HAL_GetTick>
 8008b60:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d008      	beq.n	8008b80 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2280      	movs	r2, #128	@ 0x80
 8008b72:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e052      	b.n	8008c26 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f022 0216 	bic.w	r2, r2, #22
 8008b8e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	695a      	ldr	r2, [r3, #20]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008b9e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d103      	bne.n	8008bb0 <HAL_DMA_Abort+0x62>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d007      	beq.n	8008bc0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f022 0208 	bic.w	r2, r2, #8
 8008bbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f022 0201 	bic.w	r2, r2, #1
 8008bce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008bd0:	e013      	b.n	8008bfa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008bd2:	f7fe fc13 	bl	80073fc <HAL_GetTick>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	1ad3      	subs	r3, r2, r3
 8008bdc:	2b05      	cmp	r3, #5
 8008bde:	d90c      	bls.n	8008bfa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2220      	movs	r2, #32
 8008be4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2203      	movs	r2, #3
 8008bf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_TIMEOUT;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e015      	b.n	8008c26 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f003 0301 	and.w	r3, r3, #1
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d1e4      	bne.n	8008bd2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c0c:	223f      	movs	r2, #63	@ 0x3f
 8008c0e:	409a      	lsls	r2, r3
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  }
  return HAL_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008c2e:	b480      	push	{r7}
 8008c30:	b083      	sub	sp, #12
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d004      	beq.n	8008c4c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2280      	movs	r2, #128	@ 0x80
 8008c46:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e00c      	b.n	8008c66 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2205      	movs	r2, #5
 8008c50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f022 0201 	bic.w	r2, r2, #1
 8008c62:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
	...

08008c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b089      	sub	sp, #36	@ 0x24
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008c82:	2300      	movs	r3, #0
 8008c84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008c86:	2300      	movs	r3, #0
 8008c88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	61fb      	str	r3, [r7, #28]
 8008c8e:	e165      	b.n	8008f5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008c90:	2201      	movs	r2, #1
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	fa02 f303 	lsl.w	r3, r2, r3
 8008c98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	697a      	ldr	r2, [r7, #20]
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008ca4:	693a      	ldr	r2, [r7, #16]
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	f040 8154 	bne.w	8008f56 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	f003 0303 	and.w	r3, r3, #3
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d005      	beq.n	8008cc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d130      	bne.n	8008d28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	005b      	lsls	r3, r3, #1
 8008cd0:	2203      	movs	r2, #3
 8008cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd6:	43db      	mvns	r3, r3
 8008cd8:	69ba      	ldr	r2, [r7, #24]
 8008cda:	4013      	ands	r3, r2
 8008cdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	68da      	ldr	r2, [r3, #12]
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	005b      	lsls	r3, r3, #1
 8008ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cea:	69ba      	ldr	r2, [r7, #24]
 8008cec:	4313      	orrs	r3, r2
 8008cee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	69ba      	ldr	r2, [r7, #24]
 8008cf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	fa02 f303 	lsl.w	r3, r2, r3
 8008d04:	43db      	mvns	r3, r3
 8008d06:	69ba      	ldr	r2, [r7, #24]
 8008d08:	4013      	ands	r3, r2
 8008d0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	091b      	lsrs	r3, r3, #4
 8008d12:	f003 0201 	and.w	r2, r3, #1
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1c:	69ba      	ldr	r2, [r7, #24]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	69ba      	ldr	r2, [r7, #24]
 8008d26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	f003 0303 	and.w	r3, r3, #3
 8008d30:	2b03      	cmp	r3, #3
 8008d32:	d017      	beq.n	8008d64 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	005b      	lsls	r3, r3, #1
 8008d3e:	2203      	movs	r2, #3
 8008d40:	fa02 f303 	lsl.w	r3, r2, r3
 8008d44:	43db      	mvns	r3, r3
 8008d46:	69ba      	ldr	r2, [r7, #24]
 8008d48:	4013      	ands	r3, r2
 8008d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	689a      	ldr	r2, [r3, #8]
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	005b      	lsls	r3, r3, #1
 8008d54:	fa02 f303 	lsl.w	r3, r2, r3
 8008d58:	69ba      	ldr	r2, [r7, #24]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	69ba      	ldr	r2, [r7, #24]
 8008d62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	f003 0303 	and.w	r3, r3, #3
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	d123      	bne.n	8008db8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	08da      	lsrs	r2, r3, #3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	3208      	adds	r2, #8
 8008d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	f003 0307 	and.w	r3, r3, #7
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	220f      	movs	r2, #15
 8008d88:	fa02 f303 	lsl.w	r3, r2, r3
 8008d8c:	43db      	mvns	r3, r3
 8008d8e:	69ba      	ldr	r2, [r7, #24]
 8008d90:	4013      	ands	r3, r2
 8008d92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	691a      	ldr	r2, [r3, #16]
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	f003 0307 	and.w	r3, r3, #7
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	fa02 f303 	lsl.w	r3, r2, r3
 8008da4:	69ba      	ldr	r2, [r7, #24]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	08da      	lsrs	r2, r3, #3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	3208      	adds	r2, #8
 8008db2:	69b9      	ldr	r1, [r7, #24]
 8008db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	005b      	lsls	r3, r3, #1
 8008dc2:	2203      	movs	r2, #3
 8008dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8008dc8:	43db      	mvns	r3, r3
 8008dca:	69ba      	ldr	r2, [r7, #24]
 8008dcc:	4013      	ands	r3, r2
 8008dce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	f003 0203 	and.w	r2, r3, #3
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	005b      	lsls	r3, r3, #1
 8008ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8008de0:	69ba      	ldr	r2, [r7, #24]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	69ba      	ldr	r2, [r7, #24]
 8008dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 80ae 	beq.w	8008f56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	60fb      	str	r3, [r7, #12]
 8008dfe:	4b5d      	ldr	r3, [pc, #372]	@ (8008f74 <HAL_GPIO_Init+0x300>)
 8008e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e02:	4a5c      	ldr	r2, [pc, #368]	@ (8008f74 <HAL_GPIO_Init+0x300>)
 8008e04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008e08:	6453      	str	r3, [r2, #68]	@ 0x44
 8008e0a:	4b5a      	ldr	r3, [pc, #360]	@ (8008f74 <HAL_GPIO_Init+0x300>)
 8008e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e12:	60fb      	str	r3, [r7, #12]
 8008e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008e16:	4a58      	ldr	r2, [pc, #352]	@ (8008f78 <HAL_GPIO_Init+0x304>)
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	089b      	lsrs	r3, r3, #2
 8008e1c:	3302      	adds	r3, #2
 8008e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	f003 0303 	and.w	r3, r3, #3
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	220f      	movs	r2, #15
 8008e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e32:	43db      	mvns	r3, r3
 8008e34:	69ba      	ldr	r2, [r7, #24]
 8008e36:	4013      	ands	r3, r2
 8008e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a4f      	ldr	r2, [pc, #316]	@ (8008f7c <HAL_GPIO_Init+0x308>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d025      	beq.n	8008e8e <HAL_GPIO_Init+0x21a>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a4e      	ldr	r2, [pc, #312]	@ (8008f80 <HAL_GPIO_Init+0x30c>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d01f      	beq.n	8008e8a <HAL_GPIO_Init+0x216>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a4d      	ldr	r2, [pc, #308]	@ (8008f84 <HAL_GPIO_Init+0x310>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d019      	beq.n	8008e86 <HAL_GPIO_Init+0x212>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a4c      	ldr	r2, [pc, #304]	@ (8008f88 <HAL_GPIO_Init+0x314>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d013      	beq.n	8008e82 <HAL_GPIO_Init+0x20e>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a4b      	ldr	r2, [pc, #300]	@ (8008f8c <HAL_GPIO_Init+0x318>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d00d      	beq.n	8008e7e <HAL_GPIO_Init+0x20a>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a4a      	ldr	r2, [pc, #296]	@ (8008f90 <HAL_GPIO_Init+0x31c>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d007      	beq.n	8008e7a <HAL_GPIO_Init+0x206>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a49      	ldr	r2, [pc, #292]	@ (8008f94 <HAL_GPIO_Init+0x320>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d101      	bne.n	8008e76 <HAL_GPIO_Init+0x202>
 8008e72:	2306      	movs	r3, #6
 8008e74:	e00c      	b.n	8008e90 <HAL_GPIO_Init+0x21c>
 8008e76:	2307      	movs	r3, #7
 8008e78:	e00a      	b.n	8008e90 <HAL_GPIO_Init+0x21c>
 8008e7a:	2305      	movs	r3, #5
 8008e7c:	e008      	b.n	8008e90 <HAL_GPIO_Init+0x21c>
 8008e7e:	2304      	movs	r3, #4
 8008e80:	e006      	b.n	8008e90 <HAL_GPIO_Init+0x21c>
 8008e82:	2303      	movs	r3, #3
 8008e84:	e004      	b.n	8008e90 <HAL_GPIO_Init+0x21c>
 8008e86:	2302      	movs	r3, #2
 8008e88:	e002      	b.n	8008e90 <HAL_GPIO_Init+0x21c>
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e000      	b.n	8008e90 <HAL_GPIO_Init+0x21c>
 8008e8e:	2300      	movs	r3, #0
 8008e90:	69fa      	ldr	r2, [r7, #28]
 8008e92:	f002 0203 	and.w	r2, r2, #3
 8008e96:	0092      	lsls	r2, r2, #2
 8008e98:	4093      	lsls	r3, r2
 8008e9a:	69ba      	ldr	r2, [r7, #24]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008ea0:	4935      	ldr	r1, [pc, #212]	@ (8008f78 <HAL_GPIO_Init+0x304>)
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	089b      	lsrs	r3, r3, #2
 8008ea6:	3302      	adds	r3, #2
 8008ea8:	69ba      	ldr	r2, [r7, #24]
 8008eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008eae:	4b3a      	ldr	r3, [pc, #232]	@ (8008f98 <HAL_GPIO_Init+0x324>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	43db      	mvns	r3, r3
 8008eb8:	69ba      	ldr	r2, [r7, #24]
 8008eba:	4013      	ands	r3, r2
 8008ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d003      	beq.n	8008ed2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008eca:	69ba      	ldr	r2, [r7, #24]
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008ed2:	4a31      	ldr	r2, [pc, #196]	@ (8008f98 <HAL_GPIO_Init+0x324>)
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008ed8:	4b2f      	ldr	r3, [pc, #188]	@ (8008f98 <HAL_GPIO_Init+0x324>)
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	43db      	mvns	r3, r3
 8008ee2:	69ba      	ldr	r2, [r7, #24]
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d003      	beq.n	8008efc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008ef4:	69ba      	ldr	r2, [r7, #24]
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008efc:	4a26      	ldr	r2, [pc, #152]	@ (8008f98 <HAL_GPIO_Init+0x324>)
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008f02:	4b25      	ldr	r3, [pc, #148]	@ (8008f98 <HAL_GPIO_Init+0x324>)
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	43db      	mvns	r3, r3
 8008f0c:	69ba      	ldr	r2, [r7, #24]
 8008f0e:	4013      	ands	r3, r2
 8008f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d003      	beq.n	8008f26 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8008f1e:	69ba      	ldr	r2, [r7, #24]
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008f26:	4a1c      	ldr	r2, [pc, #112]	@ (8008f98 <HAL_GPIO_Init+0x324>)
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8008f98 <HAL_GPIO_Init+0x324>)
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	43db      	mvns	r3, r3
 8008f36:	69ba      	ldr	r2, [r7, #24]
 8008f38:	4013      	ands	r3, r2
 8008f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d003      	beq.n	8008f50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008f48:	69ba      	ldr	r2, [r7, #24]
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008f50:	4a11      	ldr	r2, [pc, #68]	@ (8008f98 <HAL_GPIO_Init+0x324>)
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	61fb      	str	r3, [r7, #28]
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	2b0f      	cmp	r3, #15
 8008f60:	f67f ae96 	bls.w	8008c90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008f64:	bf00      	nop
 8008f66:	bf00      	nop
 8008f68:	3724      	adds	r7, #36	@ 0x24
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	40023800 	.word	0x40023800
 8008f78:	40013800 	.word	0x40013800
 8008f7c:	40020000 	.word	0x40020000
 8008f80:	40020400 	.word	0x40020400
 8008f84:	40020800 	.word	0x40020800
 8008f88:	40020c00 	.word	0x40020c00
 8008f8c:	40021000 	.word	0x40021000
 8008f90:	40021400 	.word	0x40021400
 8008f94:	40021800 	.word	0x40021800
 8008f98:	40013c00 	.word	0x40013c00

08008f9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	691a      	ldr	r2, [r3, #16]
 8008fac:	887b      	ldrh	r3, [r7, #2]
 8008fae:	4013      	ands	r3, r2
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d002      	beq.n	8008fba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	73fb      	strb	r3, [r7, #15]
 8008fb8:	e001      	b.n	8008fbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3714      	adds	r7, #20
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	807b      	strh	r3, [r7, #2]
 8008fd8:	4613      	mov	r3, r2
 8008fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008fdc:	787b      	ldrb	r3, [r7, #1]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d003      	beq.n	8008fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008fe2:	887a      	ldrh	r2, [r7, #2]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008fe8:	e003      	b.n	8008ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008fea:	887b      	ldrh	r3, [r7, #2]
 8008fec:	041a      	lsls	r2, r3, #16
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	619a      	str	r2, [r3, #24]
}
 8008ff2:	bf00      	nop
 8008ff4:	370c      	adds	r7, #12
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr
	...

08009000 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009006:	2300      	movs	r3, #0
 8009008:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800900a:	2300      	movs	r3, #0
 800900c:	603b      	str	r3, [r7, #0]
 800900e:	4b20      	ldr	r3, [pc, #128]	@ (8009090 <HAL_PWREx_EnableOverDrive+0x90>)
 8009010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009012:	4a1f      	ldr	r2, [pc, #124]	@ (8009090 <HAL_PWREx_EnableOverDrive+0x90>)
 8009014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009018:	6413      	str	r3, [r2, #64]	@ 0x40
 800901a:	4b1d      	ldr	r3, [pc, #116]	@ (8009090 <HAL_PWREx_EnableOverDrive+0x90>)
 800901c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800901e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009022:	603b      	str	r3, [r7, #0]
 8009024:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009026:	4b1b      	ldr	r3, [pc, #108]	@ (8009094 <HAL_PWREx_EnableOverDrive+0x94>)
 8009028:	2201      	movs	r2, #1
 800902a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800902c:	f7fe f9e6 	bl	80073fc <HAL_GetTick>
 8009030:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009032:	e009      	b.n	8009048 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009034:	f7fe f9e2 	bl	80073fc <HAL_GetTick>
 8009038:	4602      	mov	r2, r0
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009042:	d901      	bls.n	8009048 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009044:	2303      	movs	r3, #3
 8009046:	e01f      	b.n	8009088 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009048:	4b13      	ldr	r3, [pc, #76]	@ (8009098 <HAL_PWREx_EnableOverDrive+0x98>)
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009054:	d1ee      	bne.n	8009034 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009056:	4b11      	ldr	r3, [pc, #68]	@ (800909c <HAL_PWREx_EnableOverDrive+0x9c>)
 8009058:	2201      	movs	r2, #1
 800905a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800905c:	f7fe f9ce 	bl	80073fc <HAL_GetTick>
 8009060:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009062:	e009      	b.n	8009078 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009064:	f7fe f9ca 	bl	80073fc <HAL_GetTick>
 8009068:	4602      	mov	r2, r0
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009072:	d901      	bls.n	8009078 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e007      	b.n	8009088 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009078:	4b07      	ldr	r3, [pc, #28]	@ (8009098 <HAL_PWREx_EnableOverDrive+0x98>)
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009080:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009084:	d1ee      	bne.n	8009064 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3708      	adds	r7, #8
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	40023800 	.word	0x40023800
 8009094:	420e0040 	.word	0x420e0040
 8009098:	40007000 	.word	0x40007000
 800909c:	420e0044 	.word	0x420e0044

080090a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d101      	bne.n	80090b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	e0cc      	b.n	800924e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80090b4:	4b68      	ldr	r3, [pc, #416]	@ (8009258 <HAL_RCC_ClockConfig+0x1b8>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 030f 	and.w	r3, r3, #15
 80090bc:	683a      	ldr	r2, [r7, #0]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d90c      	bls.n	80090dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090c2:	4b65      	ldr	r3, [pc, #404]	@ (8009258 <HAL_RCC_ClockConfig+0x1b8>)
 80090c4:	683a      	ldr	r2, [r7, #0]
 80090c6:	b2d2      	uxtb	r2, r2
 80090c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090ca:	4b63      	ldr	r3, [pc, #396]	@ (8009258 <HAL_RCC_ClockConfig+0x1b8>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f003 030f 	and.w	r3, r3, #15
 80090d2:	683a      	ldr	r2, [r7, #0]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d001      	beq.n	80090dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	e0b8      	b.n	800924e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f003 0302 	and.w	r3, r3, #2
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d020      	beq.n	800912a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 0304 	and.w	r3, r3, #4
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d005      	beq.n	8009100 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80090f4:	4b59      	ldr	r3, [pc, #356]	@ (800925c <HAL_RCC_ClockConfig+0x1bc>)
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	4a58      	ldr	r2, [pc, #352]	@ (800925c <HAL_RCC_ClockConfig+0x1bc>)
 80090fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80090fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 0308 	and.w	r3, r3, #8
 8009108:	2b00      	cmp	r3, #0
 800910a:	d005      	beq.n	8009118 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800910c:	4b53      	ldr	r3, [pc, #332]	@ (800925c <HAL_RCC_ClockConfig+0x1bc>)
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	4a52      	ldr	r2, [pc, #328]	@ (800925c <HAL_RCC_ClockConfig+0x1bc>)
 8009112:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009116:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009118:	4b50      	ldr	r3, [pc, #320]	@ (800925c <HAL_RCC_ClockConfig+0x1bc>)
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	494d      	ldr	r1, [pc, #308]	@ (800925c <HAL_RCC_ClockConfig+0x1bc>)
 8009126:	4313      	orrs	r3, r2
 8009128:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f003 0301 	and.w	r3, r3, #1
 8009132:	2b00      	cmp	r3, #0
 8009134:	d044      	beq.n	80091c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	2b01      	cmp	r3, #1
 800913c:	d107      	bne.n	800914e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800913e:	4b47      	ldr	r3, [pc, #284]	@ (800925c <HAL_RCC_ClockConfig+0x1bc>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009146:	2b00      	cmp	r3, #0
 8009148:	d119      	bne.n	800917e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	e07f      	b.n	800924e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	2b02      	cmp	r3, #2
 8009154:	d003      	beq.n	800915e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800915a:	2b03      	cmp	r3, #3
 800915c:	d107      	bne.n	800916e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800915e:	4b3f      	ldr	r3, [pc, #252]	@ (800925c <HAL_RCC_ClockConfig+0x1bc>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009166:	2b00      	cmp	r3, #0
 8009168:	d109      	bne.n	800917e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	e06f      	b.n	800924e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800916e:	4b3b      	ldr	r3, [pc, #236]	@ (800925c <HAL_RCC_ClockConfig+0x1bc>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 0302 	and.w	r3, r3, #2
 8009176:	2b00      	cmp	r3, #0
 8009178:	d101      	bne.n	800917e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e067      	b.n	800924e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800917e:	4b37      	ldr	r3, [pc, #220]	@ (800925c <HAL_RCC_ClockConfig+0x1bc>)
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	f023 0203 	bic.w	r2, r3, #3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	4934      	ldr	r1, [pc, #208]	@ (800925c <HAL_RCC_ClockConfig+0x1bc>)
 800918c:	4313      	orrs	r3, r2
 800918e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009190:	f7fe f934 	bl	80073fc <HAL_GetTick>
 8009194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009196:	e00a      	b.n	80091ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009198:	f7fe f930 	bl	80073fc <HAL_GetTick>
 800919c:	4602      	mov	r2, r0
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d901      	bls.n	80091ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80091aa:	2303      	movs	r3, #3
 80091ac:	e04f      	b.n	800924e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091ae:	4b2b      	ldr	r3, [pc, #172]	@ (800925c <HAL_RCC_ClockConfig+0x1bc>)
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	f003 020c 	and.w	r2, r3, #12
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	429a      	cmp	r2, r3
 80091be:	d1eb      	bne.n	8009198 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80091c0:	4b25      	ldr	r3, [pc, #148]	@ (8009258 <HAL_RCC_ClockConfig+0x1b8>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f003 030f 	and.w	r3, r3, #15
 80091c8:	683a      	ldr	r2, [r7, #0]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d20c      	bcs.n	80091e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091ce:	4b22      	ldr	r3, [pc, #136]	@ (8009258 <HAL_RCC_ClockConfig+0x1b8>)
 80091d0:	683a      	ldr	r2, [r7, #0]
 80091d2:	b2d2      	uxtb	r2, r2
 80091d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091d6:	4b20      	ldr	r3, [pc, #128]	@ (8009258 <HAL_RCC_ClockConfig+0x1b8>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f003 030f 	and.w	r3, r3, #15
 80091de:	683a      	ldr	r2, [r7, #0]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d001      	beq.n	80091e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	e032      	b.n	800924e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f003 0304 	and.w	r3, r3, #4
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d008      	beq.n	8009206 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80091f4:	4b19      	ldr	r3, [pc, #100]	@ (800925c <HAL_RCC_ClockConfig+0x1bc>)
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	4916      	ldr	r1, [pc, #88]	@ (800925c <HAL_RCC_ClockConfig+0x1bc>)
 8009202:	4313      	orrs	r3, r2
 8009204:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f003 0308 	and.w	r3, r3, #8
 800920e:	2b00      	cmp	r3, #0
 8009210:	d009      	beq.n	8009226 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009212:	4b12      	ldr	r3, [pc, #72]	@ (800925c <HAL_RCC_ClockConfig+0x1bc>)
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	00db      	lsls	r3, r3, #3
 8009220:	490e      	ldr	r1, [pc, #56]	@ (800925c <HAL_RCC_ClockConfig+0x1bc>)
 8009222:	4313      	orrs	r3, r2
 8009224:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009226:	f000 f855 	bl	80092d4 <HAL_RCC_GetSysClockFreq>
 800922a:	4602      	mov	r2, r0
 800922c:	4b0b      	ldr	r3, [pc, #44]	@ (800925c <HAL_RCC_ClockConfig+0x1bc>)
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	091b      	lsrs	r3, r3, #4
 8009232:	f003 030f 	and.w	r3, r3, #15
 8009236:	490a      	ldr	r1, [pc, #40]	@ (8009260 <HAL_RCC_ClockConfig+0x1c0>)
 8009238:	5ccb      	ldrb	r3, [r1, r3]
 800923a:	fa22 f303 	lsr.w	r3, r2, r3
 800923e:	4a09      	ldr	r2, [pc, #36]	@ (8009264 <HAL_RCC_ClockConfig+0x1c4>)
 8009240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009242:	4b09      	ldr	r3, [pc, #36]	@ (8009268 <HAL_RCC_ClockConfig+0x1c8>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4618      	mov	r0, r3
 8009248:	f7fe f894 	bl	8007374 <HAL_InitTick>

  return HAL_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	40023c00 	.word	0x40023c00
 800925c:	40023800 	.word	0x40023800
 8009260:	08011e6c 	.word	0x08011e6c
 8009264:	20000040 	.word	0x20000040
 8009268:	20000044 	.word	0x20000044

0800926c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800926c:	b480      	push	{r7}
 800926e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009270:	4b03      	ldr	r3, [pc, #12]	@ (8009280 <HAL_RCC_GetHCLKFreq+0x14>)
 8009272:	681b      	ldr	r3, [r3, #0]
}
 8009274:	4618      	mov	r0, r3
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	20000040 	.word	0x20000040

08009284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009288:	f7ff fff0 	bl	800926c <HAL_RCC_GetHCLKFreq>
 800928c:	4602      	mov	r2, r0
 800928e:	4b05      	ldr	r3, [pc, #20]	@ (80092a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	0a9b      	lsrs	r3, r3, #10
 8009294:	f003 0307 	and.w	r3, r3, #7
 8009298:	4903      	ldr	r1, [pc, #12]	@ (80092a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800929a:	5ccb      	ldrb	r3, [r1, r3]
 800929c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	40023800 	.word	0x40023800
 80092a8:	08011e7c 	.word	0x08011e7c

080092ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80092b0:	f7ff ffdc 	bl	800926c <HAL_RCC_GetHCLKFreq>
 80092b4:	4602      	mov	r2, r0
 80092b6:	4b05      	ldr	r3, [pc, #20]	@ (80092cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	0b5b      	lsrs	r3, r3, #13
 80092bc:	f003 0307 	and.w	r3, r3, #7
 80092c0:	4903      	ldr	r1, [pc, #12]	@ (80092d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80092c2:	5ccb      	ldrb	r3, [r1, r3]
 80092c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	40023800 	.word	0x40023800
 80092d0:	08011e7c 	.word	0x08011e7c

080092d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092d8:	b0ae      	sub	sp, #184	@ 0xb8
 80092da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80092dc:	2300      	movs	r3, #0
 80092de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80092e2:	2300      	movs	r3, #0
 80092e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80092e8:	2300      	movs	r3, #0
 80092ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80092ee:	2300      	movs	r3, #0
 80092f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80092f4:	2300      	movs	r3, #0
 80092f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80092fa:	4bcb      	ldr	r3, [pc, #812]	@ (8009628 <HAL_RCC_GetSysClockFreq+0x354>)
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	f003 030c 	and.w	r3, r3, #12
 8009302:	2b0c      	cmp	r3, #12
 8009304:	f200 8206 	bhi.w	8009714 <HAL_RCC_GetSysClockFreq+0x440>
 8009308:	a201      	add	r2, pc, #4	@ (adr r2, 8009310 <HAL_RCC_GetSysClockFreq+0x3c>)
 800930a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930e:	bf00      	nop
 8009310:	08009345 	.word	0x08009345
 8009314:	08009715 	.word	0x08009715
 8009318:	08009715 	.word	0x08009715
 800931c:	08009715 	.word	0x08009715
 8009320:	0800934d 	.word	0x0800934d
 8009324:	08009715 	.word	0x08009715
 8009328:	08009715 	.word	0x08009715
 800932c:	08009715 	.word	0x08009715
 8009330:	08009355 	.word	0x08009355
 8009334:	08009715 	.word	0x08009715
 8009338:	08009715 	.word	0x08009715
 800933c:	08009715 	.word	0x08009715
 8009340:	08009545 	.word	0x08009545
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009344:	4bb9      	ldr	r3, [pc, #740]	@ (800962c <HAL_RCC_GetSysClockFreq+0x358>)
 8009346:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800934a:	e1e7      	b.n	800971c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800934c:	4bb8      	ldr	r3, [pc, #736]	@ (8009630 <HAL_RCC_GetSysClockFreq+0x35c>)
 800934e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009352:	e1e3      	b.n	800971c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009354:	4bb4      	ldr	r3, [pc, #720]	@ (8009628 <HAL_RCC_GetSysClockFreq+0x354>)
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800935c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009360:	4bb1      	ldr	r3, [pc, #708]	@ (8009628 <HAL_RCC_GetSysClockFreq+0x354>)
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009368:	2b00      	cmp	r3, #0
 800936a:	d071      	beq.n	8009450 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800936c:	4bae      	ldr	r3, [pc, #696]	@ (8009628 <HAL_RCC_GetSysClockFreq+0x354>)
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	099b      	lsrs	r3, r3, #6
 8009372:	2200      	movs	r2, #0
 8009374:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009378:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800937c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009384:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009388:	2300      	movs	r3, #0
 800938a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800938e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009392:	4622      	mov	r2, r4
 8009394:	462b      	mov	r3, r5
 8009396:	f04f 0000 	mov.w	r0, #0
 800939a:	f04f 0100 	mov.w	r1, #0
 800939e:	0159      	lsls	r1, r3, #5
 80093a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80093a4:	0150      	lsls	r0, r2, #5
 80093a6:	4602      	mov	r2, r0
 80093a8:	460b      	mov	r3, r1
 80093aa:	4621      	mov	r1, r4
 80093ac:	1a51      	subs	r1, r2, r1
 80093ae:	6439      	str	r1, [r7, #64]	@ 0x40
 80093b0:	4629      	mov	r1, r5
 80093b2:	eb63 0301 	sbc.w	r3, r3, r1
 80093b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80093b8:	f04f 0200 	mov.w	r2, #0
 80093bc:	f04f 0300 	mov.w	r3, #0
 80093c0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80093c4:	4649      	mov	r1, r9
 80093c6:	018b      	lsls	r3, r1, #6
 80093c8:	4641      	mov	r1, r8
 80093ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80093ce:	4641      	mov	r1, r8
 80093d0:	018a      	lsls	r2, r1, #6
 80093d2:	4641      	mov	r1, r8
 80093d4:	1a51      	subs	r1, r2, r1
 80093d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80093d8:	4649      	mov	r1, r9
 80093da:	eb63 0301 	sbc.w	r3, r3, r1
 80093de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093e0:	f04f 0200 	mov.w	r2, #0
 80093e4:	f04f 0300 	mov.w	r3, #0
 80093e8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80093ec:	4649      	mov	r1, r9
 80093ee:	00cb      	lsls	r3, r1, #3
 80093f0:	4641      	mov	r1, r8
 80093f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093f6:	4641      	mov	r1, r8
 80093f8:	00ca      	lsls	r2, r1, #3
 80093fa:	4610      	mov	r0, r2
 80093fc:	4619      	mov	r1, r3
 80093fe:	4603      	mov	r3, r0
 8009400:	4622      	mov	r2, r4
 8009402:	189b      	adds	r3, r3, r2
 8009404:	633b      	str	r3, [r7, #48]	@ 0x30
 8009406:	462b      	mov	r3, r5
 8009408:	460a      	mov	r2, r1
 800940a:	eb42 0303 	adc.w	r3, r2, r3
 800940e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009410:	f04f 0200 	mov.w	r2, #0
 8009414:	f04f 0300 	mov.w	r3, #0
 8009418:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800941c:	4629      	mov	r1, r5
 800941e:	024b      	lsls	r3, r1, #9
 8009420:	4621      	mov	r1, r4
 8009422:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009426:	4621      	mov	r1, r4
 8009428:	024a      	lsls	r2, r1, #9
 800942a:	4610      	mov	r0, r2
 800942c:	4619      	mov	r1, r3
 800942e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009432:	2200      	movs	r2, #0
 8009434:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009438:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800943c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8009440:	f7f7 fc52 	bl	8000ce8 <__aeabi_uldivmod>
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	4613      	mov	r3, r2
 800944a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800944e:	e067      	b.n	8009520 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009450:	4b75      	ldr	r3, [pc, #468]	@ (8009628 <HAL_RCC_GetSysClockFreq+0x354>)
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	099b      	lsrs	r3, r3, #6
 8009456:	2200      	movs	r2, #0
 8009458:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800945c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8009460:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009468:	67bb      	str	r3, [r7, #120]	@ 0x78
 800946a:	2300      	movs	r3, #0
 800946c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800946e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8009472:	4622      	mov	r2, r4
 8009474:	462b      	mov	r3, r5
 8009476:	f04f 0000 	mov.w	r0, #0
 800947a:	f04f 0100 	mov.w	r1, #0
 800947e:	0159      	lsls	r1, r3, #5
 8009480:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009484:	0150      	lsls	r0, r2, #5
 8009486:	4602      	mov	r2, r0
 8009488:	460b      	mov	r3, r1
 800948a:	4621      	mov	r1, r4
 800948c:	1a51      	subs	r1, r2, r1
 800948e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009490:	4629      	mov	r1, r5
 8009492:	eb63 0301 	sbc.w	r3, r3, r1
 8009496:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009498:	f04f 0200 	mov.w	r2, #0
 800949c:	f04f 0300 	mov.w	r3, #0
 80094a0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80094a4:	4649      	mov	r1, r9
 80094a6:	018b      	lsls	r3, r1, #6
 80094a8:	4641      	mov	r1, r8
 80094aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80094ae:	4641      	mov	r1, r8
 80094b0:	018a      	lsls	r2, r1, #6
 80094b2:	4641      	mov	r1, r8
 80094b4:	ebb2 0a01 	subs.w	sl, r2, r1
 80094b8:	4649      	mov	r1, r9
 80094ba:	eb63 0b01 	sbc.w	fp, r3, r1
 80094be:	f04f 0200 	mov.w	r2, #0
 80094c2:	f04f 0300 	mov.w	r3, #0
 80094c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80094ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80094ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80094d2:	4692      	mov	sl, r2
 80094d4:	469b      	mov	fp, r3
 80094d6:	4623      	mov	r3, r4
 80094d8:	eb1a 0303 	adds.w	r3, sl, r3
 80094dc:	623b      	str	r3, [r7, #32]
 80094de:	462b      	mov	r3, r5
 80094e0:	eb4b 0303 	adc.w	r3, fp, r3
 80094e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80094e6:	f04f 0200 	mov.w	r2, #0
 80094ea:	f04f 0300 	mov.w	r3, #0
 80094ee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80094f2:	4629      	mov	r1, r5
 80094f4:	028b      	lsls	r3, r1, #10
 80094f6:	4621      	mov	r1, r4
 80094f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80094fc:	4621      	mov	r1, r4
 80094fe:	028a      	lsls	r2, r1, #10
 8009500:	4610      	mov	r0, r2
 8009502:	4619      	mov	r1, r3
 8009504:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009508:	2200      	movs	r2, #0
 800950a:	673b      	str	r3, [r7, #112]	@ 0x70
 800950c:	677a      	str	r2, [r7, #116]	@ 0x74
 800950e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8009512:	f7f7 fbe9 	bl	8000ce8 <__aeabi_uldivmod>
 8009516:	4602      	mov	r2, r0
 8009518:	460b      	mov	r3, r1
 800951a:	4613      	mov	r3, r2
 800951c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009520:	4b41      	ldr	r3, [pc, #260]	@ (8009628 <HAL_RCC_GetSysClockFreq+0x354>)
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	0c1b      	lsrs	r3, r3, #16
 8009526:	f003 0303 	and.w	r3, r3, #3
 800952a:	3301      	adds	r3, #1
 800952c:	005b      	lsls	r3, r3, #1
 800952e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8009532:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009536:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800953a:	fbb2 f3f3 	udiv	r3, r2, r3
 800953e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009542:	e0eb      	b.n	800971c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009544:	4b38      	ldr	r3, [pc, #224]	@ (8009628 <HAL_RCC_GetSysClockFreq+0x354>)
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800954c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009550:	4b35      	ldr	r3, [pc, #212]	@ (8009628 <HAL_RCC_GetSysClockFreq+0x354>)
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009558:	2b00      	cmp	r3, #0
 800955a:	d06b      	beq.n	8009634 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800955c:	4b32      	ldr	r3, [pc, #200]	@ (8009628 <HAL_RCC_GetSysClockFreq+0x354>)
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	099b      	lsrs	r3, r3, #6
 8009562:	2200      	movs	r2, #0
 8009564:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009566:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009568:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800956a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800956e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009570:	2300      	movs	r3, #0
 8009572:	667b      	str	r3, [r7, #100]	@ 0x64
 8009574:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8009578:	4622      	mov	r2, r4
 800957a:	462b      	mov	r3, r5
 800957c:	f04f 0000 	mov.w	r0, #0
 8009580:	f04f 0100 	mov.w	r1, #0
 8009584:	0159      	lsls	r1, r3, #5
 8009586:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800958a:	0150      	lsls	r0, r2, #5
 800958c:	4602      	mov	r2, r0
 800958e:	460b      	mov	r3, r1
 8009590:	4621      	mov	r1, r4
 8009592:	1a51      	subs	r1, r2, r1
 8009594:	61b9      	str	r1, [r7, #24]
 8009596:	4629      	mov	r1, r5
 8009598:	eb63 0301 	sbc.w	r3, r3, r1
 800959c:	61fb      	str	r3, [r7, #28]
 800959e:	f04f 0200 	mov.w	r2, #0
 80095a2:	f04f 0300 	mov.w	r3, #0
 80095a6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80095aa:	4659      	mov	r1, fp
 80095ac:	018b      	lsls	r3, r1, #6
 80095ae:	4651      	mov	r1, sl
 80095b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80095b4:	4651      	mov	r1, sl
 80095b6:	018a      	lsls	r2, r1, #6
 80095b8:	4651      	mov	r1, sl
 80095ba:	ebb2 0801 	subs.w	r8, r2, r1
 80095be:	4659      	mov	r1, fp
 80095c0:	eb63 0901 	sbc.w	r9, r3, r1
 80095c4:	f04f 0200 	mov.w	r2, #0
 80095c8:	f04f 0300 	mov.w	r3, #0
 80095cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80095d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80095d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80095d8:	4690      	mov	r8, r2
 80095da:	4699      	mov	r9, r3
 80095dc:	4623      	mov	r3, r4
 80095de:	eb18 0303 	adds.w	r3, r8, r3
 80095e2:	613b      	str	r3, [r7, #16]
 80095e4:	462b      	mov	r3, r5
 80095e6:	eb49 0303 	adc.w	r3, r9, r3
 80095ea:	617b      	str	r3, [r7, #20]
 80095ec:	f04f 0200 	mov.w	r2, #0
 80095f0:	f04f 0300 	mov.w	r3, #0
 80095f4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80095f8:	4629      	mov	r1, r5
 80095fa:	024b      	lsls	r3, r1, #9
 80095fc:	4621      	mov	r1, r4
 80095fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009602:	4621      	mov	r1, r4
 8009604:	024a      	lsls	r2, r1, #9
 8009606:	4610      	mov	r0, r2
 8009608:	4619      	mov	r1, r3
 800960a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800960e:	2200      	movs	r2, #0
 8009610:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009612:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8009614:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009618:	f7f7 fb66 	bl	8000ce8 <__aeabi_uldivmod>
 800961c:	4602      	mov	r2, r0
 800961e:	460b      	mov	r3, r1
 8009620:	4613      	mov	r3, r2
 8009622:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009626:	e065      	b.n	80096f4 <HAL_RCC_GetSysClockFreq+0x420>
 8009628:	40023800 	.word	0x40023800
 800962c:	00f42400 	.word	0x00f42400
 8009630:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009634:	4b3d      	ldr	r3, [pc, #244]	@ (800972c <HAL_RCC_GetSysClockFreq+0x458>)
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	099b      	lsrs	r3, r3, #6
 800963a:	2200      	movs	r2, #0
 800963c:	4618      	mov	r0, r3
 800963e:	4611      	mov	r1, r2
 8009640:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009644:	653b      	str	r3, [r7, #80]	@ 0x50
 8009646:	2300      	movs	r3, #0
 8009648:	657b      	str	r3, [r7, #84]	@ 0x54
 800964a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800964e:	4642      	mov	r2, r8
 8009650:	464b      	mov	r3, r9
 8009652:	f04f 0000 	mov.w	r0, #0
 8009656:	f04f 0100 	mov.w	r1, #0
 800965a:	0159      	lsls	r1, r3, #5
 800965c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009660:	0150      	lsls	r0, r2, #5
 8009662:	4602      	mov	r2, r0
 8009664:	460b      	mov	r3, r1
 8009666:	4641      	mov	r1, r8
 8009668:	1a51      	subs	r1, r2, r1
 800966a:	60b9      	str	r1, [r7, #8]
 800966c:	4649      	mov	r1, r9
 800966e:	eb63 0301 	sbc.w	r3, r3, r1
 8009672:	60fb      	str	r3, [r7, #12]
 8009674:	f04f 0200 	mov.w	r2, #0
 8009678:	f04f 0300 	mov.w	r3, #0
 800967c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8009680:	4659      	mov	r1, fp
 8009682:	018b      	lsls	r3, r1, #6
 8009684:	4651      	mov	r1, sl
 8009686:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800968a:	4651      	mov	r1, sl
 800968c:	018a      	lsls	r2, r1, #6
 800968e:	4651      	mov	r1, sl
 8009690:	1a54      	subs	r4, r2, r1
 8009692:	4659      	mov	r1, fp
 8009694:	eb63 0501 	sbc.w	r5, r3, r1
 8009698:	f04f 0200 	mov.w	r2, #0
 800969c:	f04f 0300 	mov.w	r3, #0
 80096a0:	00eb      	lsls	r3, r5, #3
 80096a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80096a6:	00e2      	lsls	r2, r4, #3
 80096a8:	4614      	mov	r4, r2
 80096aa:	461d      	mov	r5, r3
 80096ac:	4643      	mov	r3, r8
 80096ae:	18e3      	adds	r3, r4, r3
 80096b0:	603b      	str	r3, [r7, #0]
 80096b2:	464b      	mov	r3, r9
 80096b4:	eb45 0303 	adc.w	r3, r5, r3
 80096b8:	607b      	str	r3, [r7, #4]
 80096ba:	f04f 0200 	mov.w	r2, #0
 80096be:	f04f 0300 	mov.w	r3, #0
 80096c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80096c6:	4629      	mov	r1, r5
 80096c8:	028b      	lsls	r3, r1, #10
 80096ca:	4621      	mov	r1, r4
 80096cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80096d0:	4621      	mov	r1, r4
 80096d2:	028a      	lsls	r2, r1, #10
 80096d4:	4610      	mov	r0, r2
 80096d6:	4619      	mov	r1, r3
 80096d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096dc:	2200      	movs	r2, #0
 80096de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096e0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80096e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80096e6:	f7f7 faff 	bl	8000ce8 <__aeabi_uldivmod>
 80096ea:	4602      	mov	r2, r0
 80096ec:	460b      	mov	r3, r1
 80096ee:	4613      	mov	r3, r2
 80096f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80096f4:	4b0d      	ldr	r3, [pc, #52]	@ (800972c <HAL_RCC_GetSysClockFreq+0x458>)
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	0f1b      	lsrs	r3, r3, #28
 80096fa:	f003 0307 	and.w	r3, r3, #7
 80096fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8009702:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009706:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800970a:	fbb2 f3f3 	udiv	r3, r2, r3
 800970e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009712:	e003      	b.n	800971c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009714:	4b06      	ldr	r3, [pc, #24]	@ (8009730 <HAL_RCC_GetSysClockFreq+0x45c>)
 8009716:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800971a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800971c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8009720:	4618      	mov	r0, r3
 8009722:	37b8      	adds	r7, #184	@ 0xb8
 8009724:	46bd      	mov	sp, r7
 8009726:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800972a:	bf00      	nop
 800972c:	40023800 	.word	0x40023800
 8009730:	00f42400 	.word	0x00f42400

08009734 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b086      	sub	sp, #24
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d101      	bne.n	8009746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	e28d      	b.n	8009c62 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f003 0301 	and.w	r3, r3, #1
 800974e:	2b00      	cmp	r3, #0
 8009750:	f000 8083 	beq.w	800985a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009754:	4b94      	ldr	r3, [pc, #592]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	f003 030c 	and.w	r3, r3, #12
 800975c:	2b04      	cmp	r3, #4
 800975e:	d019      	beq.n	8009794 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009760:	4b91      	ldr	r3, [pc, #580]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009768:	2b08      	cmp	r3, #8
 800976a:	d106      	bne.n	800977a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800976c:	4b8e      	ldr	r3, [pc, #568]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009774:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009778:	d00c      	beq.n	8009794 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800977a:	4b8b      	ldr	r3, [pc, #556]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009782:	2b0c      	cmp	r3, #12
 8009784:	d112      	bne.n	80097ac <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009786:	4b88      	ldr	r3, [pc, #544]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800978e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009792:	d10b      	bne.n	80097ac <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009794:	4b84      	ldr	r3, [pc, #528]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800979c:	2b00      	cmp	r3, #0
 800979e:	d05b      	beq.n	8009858 <HAL_RCC_OscConfig+0x124>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d157      	bne.n	8009858 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e25a      	b.n	8009c62 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097b4:	d106      	bne.n	80097c4 <HAL_RCC_OscConfig+0x90>
 80097b6:	4b7c      	ldr	r3, [pc, #496]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a7b      	ldr	r2, [pc, #492]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 80097bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80097c0:	6013      	str	r3, [r2, #0]
 80097c2:	e01d      	b.n	8009800 <HAL_RCC_OscConfig+0xcc>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80097cc:	d10c      	bne.n	80097e8 <HAL_RCC_OscConfig+0xb4>
 80097ce:	4b76      	ldr	r3, [pc, #472]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a75      	ldr	r2, [pc, #468]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 80097d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80097d8:	6013      	str	r3, [r2, #0]
 80097da:	4b73      	ldr	r3, [pc, #460]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a72      	ldr	r2, [pc, #456]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 80097e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80097e4:	6013      	str	r3, [r2, #0]
 80097e6:	e00b      	b.n	8009800 <HAL_RCC_OscConfig+0xcc>
 80097e8:	4b6f      	ldr	r3, [pc, #444]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a6e      	ldr	r2, [pc, #440]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 80097ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80097f2:	6013      	str	r3, [r2, #0]
 80097f4:	4b6c      	ldr	r3, [pc, #432]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a6b      	ldr	r2, [pc, #428]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 80097fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80097fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d013      	beq.n	8009830 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009808:	f7fd fdf8 	bl	80073fc <HAL_GetTick>
 800980c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800980e:	e008      	b.n	8009822 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009810:	f7fd fdf4 	bl	80073fc <HAL_GetTick>
 8009814:	4602      	mov	r2, r0
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	1ad3      	subs	r3, r2, r3
 800981a:	2b64      	cmp	r3, #100	@ 0x64
 800981c:	d901      	bls.n	8009822 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800981e:	2303      	movs	r3, #3
 8009820:	e21f      	b.n	8009c62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009822:	4b61      	ldr	r3, [pc, #388]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800982a:	2b00      	cmp	r3, #0
 800982c:	d0f0      	beq.n	8009810 <HAL_RCC_OscConfig+0xdc>
 800982e:	e014      	b.n	800985a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009830:	f7fd fde4 	bl	80073fc <HAL_GetTick>
 8009834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009836:	e008      	b.n	800984a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009838:	f7fd fde0 	bl	80073fc <HAL_GetTick>
 800983c:	4602      	mov	r2, r0
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	2b64      	cmp	r3, #100	@ 0x64
 8009844:	d901      	bls.n	800984a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8009846:	2303      	movs	r3, #3
 8009848:	e20b      	b.n	8009c62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800984a:	4b57      	ldr	r3, [pc, #348]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009852:	2b00      	cmp	r3, #0
 8009854:	d1f0      	bne.n	8009838 <HAL_RCC_OscConfig+0x104>
 8009856:	e000      	b.n	800985a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 0302 	and.w	r3, r3, #2
 8009862:	2b00      	cmp	r3, #0
 8009864:	d06f      	beq.n	8009946 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009866:	4b50      	ldr	r3, [pc, #320]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	f003 030c 	and.w	r3, r3, #12
 800986e:	2b00      	cmp	r3, #0
 8009870:	d017      	beq.n	80098a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009872:	4b4d      	ldr	r3, [pc, #308]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800987a:	2b08      	cmp	r3, #8
 800987c:	d105      	bne.n	800988a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800987e:	4b4a      	ldr	r3, [pc, #296]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00b      	beq.n	80098a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800988a:	4b47      	ldr	r3, [pc, #284]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009892:	2b0c      	cmp	r3, #12
 8009894:	d11c      	bne.n	80098d0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009896:	4b44      	ldr	r3, [pc, #272]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d116      	bne.n	80098d0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80098a2:	4b41      	ldr	r3, [pc, #260]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f003 0302 	and.w	r3, r3, #2
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d005      	beq.n	80098ba <HAL_RCC_OscConfig+0x186>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d001      	beq.n	80098ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	e1d3      	b.n	8009c62 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098ba:	4b3b      	ldr	r3, [pc, #236]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	00db      	lsls	r3, r3, #3
 80098c8:	4937      	ldr	r1, [pc, #220]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 80098ca:	4313      	orrs	r3, r2
 80098cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80098ce:	e03a      	b.n	8009946 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d020      	beq.n	800991a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80098d8:	4b34      	ldr	r3, [pc, #208]	@ (80099ac <HAL_RCC_OscConfig+0x278>)
 80098da:	2201      	movs	r2, #1
 80098dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098de:	f7fd fd8d 	bl	80073fc <HAL_GetTick>
 80098e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098e4:	e008      	b.n	80098f8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80098e6:	f7fd fd89 	bl	80073fc <HAL_GetTick>
 80098ea:	4602      	mov	r2, r0
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	1ad3      	subs	r3, r2, r3
 80098f0:	2b02      	cmp	r3, #2
 80098f2:	d901      	bls.n	80098f8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80098f4:	2303      	movs	r3, #3
 80098f6:	e1b4      	b.n	8009c62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098f8:	4b2b      	ldr	r3, [pc, #172]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f003 0302 	and.w	r3, r3, #2
 8009900:	2b00      	cmp	r3, #0
 8009902:	d0f0      	beq.n	80098e6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009904:	4b28      	ldr	r3, [pc, #160]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	00db      	lsls	r3, r3, #3
 8009912:	4925      	ldr	r1, [pc, #148]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 8009914:	4313      	orrs	r3, r2
 8009916:	600b      	str	r3, [r1, #0]
 8009918:	e015      	b.n	8009946 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800991a:	4b24      	ldr	r3, [pc, #144]	@ (80099ac <HAL_RCC_OscConfig+0x278>)
 800991c:	2200      	movs	r2, #0
 800991e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009920:	f7fd fd6c 	bl	80073fc <HAL_GetTick>
 8009924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009926:	e008      	b.n	800993a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009928:	f7fd fd68 	bl	80073fc <HAL_GetTick>
 800992c:	4602      	mov	r2, r0
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	1ad3      	subs	r3, r2, r3
 8009932:	2b02      	cmp	r3, #2
 8009934:	d901      	bls.n	800993a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009936:	2303      	movs	r3, #3
 8009938:	e193      	b.n	8009c62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800993a:	4b1b      	ldr	r3, [pc, #108]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f003 0302 	and.w	r3, r3, #2
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1f0      	bne.n	8009928 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f003 0308 	and.w	r3, r3, #8
 800994e:	2b00      	cmp	r3, #0
 8009950:	d036      	beq.n	80099c0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	695b      	ldr	r3, [r3, #20]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d016      	beq.n	8009988 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800995a:	4b15      	ldr	r3, [pc, #84]	@ (80099b0 <HAL_RCC_OscConfig+0x27c>)
 800995c:	2201      	movs	r2, #1
 800995e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009960:	f7fd fd4c 	bl	80073fc <HAL_GetTick>
 8009964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009966:	e008      	b.n	800997a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009968:	f7fd fd48 	bl	80073fc <HAL_GetTick>
 800996c:	4602      	mov	r2, r0
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	1ad3      	subs	r3, r2, r3
 8009972:	2b02      	cmp	r3, #2
 8009974:	d901      	bls.n	800997a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8009976:	2303      	movs	r3, #3
 8009978:	e173      	b.n	8009c62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800997a:	4b0b      	ldr	r3, [pc, #44]	@ (80099a8 <HAL_RCC_OscConfig+0x274>)
 800997c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800997e:	f003 0302 	and.w	r3, r3, #2
 8009982:	2b00      	cmp	r3, #0
 8009984:	d0f0      	beq.n	8009968 <HAL_RCC_OscConfig+0x234>
 8009986:	e01b      	b.n	80099c0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009988:	4b09      	ldr	r3, [pc, #36]	@ (80099b0 <HAL_RCC_OscConfig+0x27c>)
 800998a:	2200      	movs	r2, #0
 800998c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800998e:	f7fd fd35 	bl	80073fc <HAL_GetTick>
 8009992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009994:	e00e      	b.n	80099b4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009996:	f7fd fd31 	bl	80073fc <HAL_GetTick>
 800999a:	4602      	mov	r2, r0
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	d907      	bls.n	80099b4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80099a4:	2303      	movs	r3, #3
 80099a6:	e15c      	b.n	8009c62 <HAL_RCC_OscConfig+0x52e>
 80099a8:	40023800 	.word	0x40023800
 80099ac:	42470000 	.word	0x42470000
 80099b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80099b4:	4b8a      	ldr	r3, [pc, #552]	@ (8009be0 <HAL_RCC_OscConfig+0x4ac>)
 80099b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80099b8:	f003 0302 	and.w	r3, r3, #2
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d1ea      	bne.n	8009996 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 0304 	and.w	r3, r3, #4
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f000 8097 	beq.w	8009afc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80099ce:	2300      	movs	r3, #0
 80099d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80099d2:	4b83      	ldr	r3, [pc, #524]	@ (8009be0 <HAL_RCC_OscConfig+0x4ac>)
 80099d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d10f      	bne.n	80099fe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80099de:	2300      	movs	r3, #0
 80099e0:	60bb      	str	r3, [r7, #8]
 80099e2:	4b7f      	ldr	r3, [pc, #508]	@ (8009be0 <HAL_RCC_OscConfig+0x4ac>)
 80099e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099e6:	4a7e      	ldr	r2, [pc, #504]	@ (8009be0 <HAL_RCC_OscConfig+0x4ac>)
 80099e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80099ee:	4b7c      	ldr	r3, [pc, #496]	@ (8009be0 <HAL_RCC_OscConfig+0x4ac>)
 80099f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80099f6:	60bb      	str	r3, [r7, #8]
 80099f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80099fa:	2301      	movs	r3, #1
 80099fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099fe:	4b79      	ldr	r3, [pc, #484]	@ (8009be4 <HAL_RCC_OscConfig+0x4b0>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d118      	bne.n	8009a3c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009a0a:	4b76      	ldr	r3, [pc, #472]	@ (8009be4 <HAL_RCC_OscConfig+0x4b0>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a75      	ldr	r2, [pc, #468]	@ (8009be4 <HAL_RCC_OscConfig+0x4b0>)
 8009a10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009a16:	f7fd fcf1 	bl	80073fc <HAL_GetTick>
 8009a1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a1c:	e008      	b.n	8009a30 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a1e:	f7fd fced 	bl	80073fc <HAL_GetTick>
 8009a22:	4602      	mov	r2, r0
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	1ad3      	subs	r3, r2, r3
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	d901      	bls.n	8009a30 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009a2c:	2303      	movs	r3, #3
 8009a2e:	e118      	b.n	8009c62 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a30:	4b6c      	ldr	r3, [pc, #432]	@ (8009be4 <HAL_RCC_OscConfig+0x4b0>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d0f0      	beq.n	8009a1e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d106      	bne.n	8009a52 <HAL_RCC_OscConfig+0x31e>
 8009a44:	4b66      	ldr	r3, [pc, #408]	@ (8009be0 <HAL_RCC_OscConfig+0x4ac>)
 8009a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a48:	4a65      	ldr	r2, [pc, #404]	@ (8009be0 <HAL_RCC_OscConfig+0x4ac>)
 8009a4a:	f043 0301 	orr.w	r3, r3, #1
 8009a4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a50:	e01c      	b.n	8009a8c <HAL_RCC_OscConfig+0x358>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	2b05      	cmp	r3, #5
 8009a58:	d10c      	bne.n	8009a74 <HAL_RCC_OscConfig+0x340>
 8009a5a:	4b61      	ldr	r3, [pc, #388]	@ (8009be0 <HAL_RCC_OscConfig+0x4ac>)
 8009a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a5e:	4a60      	ldr	r2, [pc, #384]	@ (8009be0 <HAL_RCC_OscConfig+0x4ac>)
 8009a60:	f043 0304 	orr.w	r3, r3, #4
 8009a64:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a66:	4b5e      	ldr	r3, [pc, #376]	@ (8009be0 <HAL_RCC_OscConfig+0x4ac>)
 8009a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a6a:	4a5d      	ldr	r2, [pc, #372]	@ (8009be0 <HAL_RCC_OscConfig+0x4ac>)
 8009a6c:	f043 0301 	orr.w	r3, r3, #1
 8009a70:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a72:	e00b      	b.n	8009a8c <HAL_RCC_OscConfig+0x358>
 8009a74:	4b5a      	ldr	r3, [pc, #360]	@ (8009be0 <HAL_RCC_OscConfig+0x4ac>)
 8009a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a78:	4a59      	ldr	r2, [pc, #356]	@ (8009be0 <HAL_RCC_OscConfig+0x4ac>)
 8009a7a:	f023 0301 	bic.w	r3, r3, #1
 8009a7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a80:	4b57      	ldr	r3, [pc, #348]	@ (8009be0 <HAL_RCC_OscConfig+0x4ac>)
 8009a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a84:	4a56      	ldr	r2, [pc, #344]	@ (8009be0 <HAL_RCC_OscConfig+0x4ac>)
 8009a86:	f023 0304 	bic.w	r3, r3, #4
 8009a8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d015      	beq.n	8009ac0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a94:	f7fd fcb2 	bl	80073fc <HAL_GetTick>
 8009a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a9a:	e00a      	b.n	8009ab2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a9c:	f7fd fcae 	bl	80073fc <HAL_GetTick>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	1ad3      	subs	r3, r2, r3
 8009aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d901      	bls.n	8009ab2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	e0d7      	b.n	8009c62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ab2:	4b4b      	ldr	r3, [pc, #300]	@ (8009be0 <HAL_RCC_OscConfig+0x4ac>)
 8009ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ab6:	f003 0302 	and.w	r3, r3, #2
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d0ee      	beq.n	8009a9c <HAL_RCC_OscConfig+0x368>
 8009abe:	e014      	b.n	8009aea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ac0:	f7fd fc9c 	bl	80073fc <HAL_GetTick>
 8009ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ac6:	e00a      	b.n	8009ade <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009ac8:	f7fd fc98 	bl	80073fc <HAL_GetTick>
 8009acc:	4602      	mov	r2, r0
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d901      	bls.n	8009ade <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8009ada:	2303      	movs	r3, #3
 8009adc:	e0c1      	b.n	8009c62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ade:	4b40      	ldr	r3, [pc, #256]	@ (8009be0 <HAL_RCC_OscConfig+0x4ac>)
 8009ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ae2:	f003 0302 	and.w	r3, r3, #2
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1ee      	bne.n	8009ac8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009aea:	7dfb      	ldrb	r3, [r7, #23]
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d105      	bne.n	8009afc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009af0:	4b3b      	ldr	r3, [pc, #236]	@ (8009be0 <HAL_RCC_OscConfig+0x4ac>)
 8009af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009af4:	4a3a      	ldr	r2, [pc, #232]	@ (8009be0 <HAL_RCC_OscConfig+0x4ac>)
 8009af6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009afa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f000 80ad 	beq.w	8009c60 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009b06:	4b36      	ldr	r3, [pc, #216]	@ (8009be0 <HAL_RCC_OscConfig+0x4ac>)
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	f003 030c 	and.w	r3, r3, #12
 8009b0e:	2b08      	cmp	r3, #8
 8009b10:	d060      	beq.n	8009bd4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	699b      	ldr	r3, [r3, #24]
 8009b16:	2b02      	cmp	r3, #2
 8009b18:	d145      	bne.n	8009ba6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b1a:	4b33      	ldr	r3, [pc, #204]	@ (8009be8 <HAL_RCC_OscConfig+0x4b4>)
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b20:	f7fd fc6c 	bl	80073fc <HAL_GetTick>
 8009b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b26:	e008      	b.n	8009b3a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b28:	f7fd fc68 	bl	80073fc <HAL_GetTick>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	d901      	bls.n	8009b3a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8009b36:	2303      	movs	r3, #3
 8009b38:	e093      	b.n	8009c62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b3a:	4b29      	ldr	r3, [pc, #164]	@ (8009be0 <HAL_RCC_OscConfig+0x4ac>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d1f0      	bne.n	8009b28 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	69da      	ldr	r2, [r3, #28]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a1b      	ldr	r3, [r3, #32]
 8009b4e:	431a      	orrs	r2, r3
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b54:	019b      	lsls	r3, r3, #6
 8009b56:	431a      	orrs	r2, r3
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b5c:	085b      	lsrs	r3, r3, #1
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	041b      	lsls	r3, r3, #16
 8009b62:	431a      	orrs	r2, r3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b68:	061b      	lsls	r3, r3, #24
 8009b6a:	431a      	orrs	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b70:	071b      	lsls	r3, r3, #28
 8009b72:	491b      	ldr	r1, [pc, #108]	@ (8009be0 <HAL_RCC_OscConfig+0x4ac>)
 8009b74:	4313      	orrs	r3, r2
 8009b76:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b78:	4b1b      	ldr	r3, [pc, #108]	@ (8009be8 <HAL_RCC_OscConfig+0x4b4>)
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b7e:	f7fd fc3d 	bl	80073fc <HAL_GetTick>
 8009b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b84:	e008      	b.n	8009b98 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b86:	f7fd fc39 	bl	80073fc <HAL_GetTick>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	d901      	bls.n	8009b98 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009b94:	2303      	movs	r3, #3
 8009b96:	e064      	b.n	8009c62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b98:	4b11      	ldr	r3, [pc, #68]	@ (8009be0 <HAL_RCC_OscConfig+0x4ac>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d0f0      	beq.n	8009b86 <HAL_RCC_OscConfig+0x452>
 8009ba4:	e05c      	b.n	8009c60 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ba6:	4b10      	ldr	r3, [pc, #64]	@ (8009be8 <HAL_RCC_OscConfig+0x4b4>)
 8009ba8:	2200      	movs	r2, #0
 8009baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bac:	f7fd fc26 	bl	80073fc <HAL_GetTick>
 8009bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bb2:	e008      	b.n	8009bc6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009bb4:	f7fd fc22 	bl	80073fc <HAL_GetTick>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	1ad3      	subs	r3, r2, r3
 8009bbe:	2b02      	cmp	r3, #2
 8009bc0:	d901      	bls.n	8009bc6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8009bc2:	2303      	movs	r3, #3
 8009bc4:	e04d      	b.n	8009c62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bc6:	4b06      	ldr	r3, [pc, #24]	@ (8009be0 <HAL_RCC_OscConfig+0x4ac>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d1f0      	bne.n	8009bb4 <HAL_RCC_OscConfig+0x480>
 8009bd2:	e045      	b.n	8009c60 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	699b      	ldr	r3, [r3, #24]
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d107      	bne.n	8009bec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	e040      	b.n	8009c62 <HAL_RCC_OscConfig+0x52e>
 8009be0:	40023800 	.word	0x40023800
 8009be4:	40007000 	.word	0x40007000
 8009be8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009bec:	4b1f      	ldr	r3, [pc, #124]	@ (8009c6c <HAL_RCC_OscConfig+0x538>)
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	699b      	ldr	r3, [r3, #24]
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d030      	beq.n	8009c5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d129      	bne.n	8009c5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d122      	bne.n	8009c5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009c16:	68fa      	ldr	r2, [r7, #12]
 8009c18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009c1c:	4013      	ands	r3, r2
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009c22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d119      	bne.n	8009c5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c32:	085b      	lsrs	r3, r3, #1
 8009c34:	3b01      	subs	r3, #1
 8009c36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d10f      	bne.n	8009c5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d107      	bne.n	8009c5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c56:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d001      	beq.n	8009c60 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e000      	b.n	8009c62 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3718      	adds	r7, #24
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	40023800 	.word	0x40023800

08009c70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d101      	bne.n	8009c82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e07b      	b.n	8009d7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d108      	bne.n	8009c9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c92:	d009      	beq.n	8009ca8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2200      	movs	r2, #0
 8009c98:	61da      	str	r2, [r3, #28]
 8009c9a:	e005      	b.n	8009ca8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d106      	bne.n	8009cc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f7fb ff40 	bl	8005b48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2202      	movs	r2, #2
 8009ccc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009cde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009cf0:	431a      	orrs	r2, r3
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009cfa:	431a      	orrs	r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	f003 0302 	and.w	r3, r3, #2
 8009d04:	431a      	orrs	r2, r3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	695b      	ldr	r3, [r3, #20]
 8009d0a:	f003 0301 	and.w	r3, r3, #1
 8009d0e:	431a      	orrs	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	699b      	ldr	r3, [r3, #24]
 8009d14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d18:	431a      	orrs	r2, r3
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	69db      	ldr	r3, [r3, #28]
 8009d1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009d22:	431a      	orrs	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6a1b      	ldr	r3, [r3, #32]
 8009d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d2c:	ea42 0103 	orr.w	r1, r2, r3
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d34:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	430a      	orrs	r2, r1
 8009d3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	699b      	ldr	r3, [r3, #24]
 8009d44:	0c1b      	lsrs	r3, r3, #16
 8009d46:	f003 0104 	and.w	r1, r3, #4
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d4e:	f003 0210 	and.w	r2, r3, #16
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	430a      	orrs	r2, r1
 8009d58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	69da      	ldr	r2, [r3, #28]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009d68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2201      	movs	r2, #1
 8009d74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3708      	adds	r7, #8
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b08c      	sub	sp, #48	@ 0x30
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	60f8      	str	r0, [r7, #12]
 8009d8a:	60b9      	str	r1, [r7, #8]
 8009d8c:	607a      	str	r2, [r7, #4]
 8009d8e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009d90:	2301      	movs	r3, #1
 8009d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009d94:	2300      	movs	r3, #0
 8009d96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d101      	bne.n	8009da8 <HAL_SPI_TransmitReceive+0x26>
 8009da4:	2302      	movs	r3, #2
 8009da6:	e18a      	b.n	800a0be <HAL_SPI_TransmitReceive+0x33c>
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009db0:	f7fd fb24 	bl	80073fc <HAL_GetTick>
 8009db4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009dbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009dc6:	887b      	ldrh	r3, [r7, #2]
 8009dc8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009dca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d00f      	beq.n	8009df2 <HAL_SPI_TransmitReceive+0x70>
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009dd8:	d107      	bne.n	8009dea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d103      	bne.n	8009dea <HAL_SPI_TransmitReceive+0x68>
 8009de2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009de6:	2b04      	cmp	r3, #4
 8009de8:	d003      	beq.n	8009df2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009dea:	2302      	movs	r3, #2
 8009dec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8009df0:	e15b      	b.n	800a0aa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d005      	beq.n	8009e04 <HAL_SPI_TransmitReceive+0x82>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d002      	beq.n	8009e04 <HAL_SPI_TransmitReceive+0x82>
 8009dfe:	887b      	ldrh	r3, [r7, #2]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d103      	bne.n	8009e0c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8009e0a:	e14e      	b.n	800a0aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	2b04      	cmp	r3, #4
 8009e16:	d003      	beq.n	8009e20 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2205      	movs	r2, #5
 8009e1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2200      	movs	r2, #0
 8009e24:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	887a      	ldrh	r2, [r7, #2]
 8009e30:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	887a      	ldrh	r2, [r7, #2]
 8009e36:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	887a      	ldrh	r2, [r7, #2]
 8009e42:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	887a      	ldrh	r2, [r7, #2]
 8009e48:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e60:	2b40      	cmp	r3, #64	@ 0x40
 8009e62:	d007      	beq.n	8009e74 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e7c:	d178      	bne.n	8009f70 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d002      	beq.n	8009e8c <HAL_SPI_TransmitReceive+0x10a>
 8009e86:	8b7b      	ldrh	r3, [r7, #26]
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d166      	bne.n	8009f5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e90:	881a      	ldrh	r2, [r3, #0]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e9c:	1c9a      	adds	r2, r3, #2
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	3b01      	subs	r3, #1
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009eb0:	e053      	b.n	8009f5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	689b      	ldr	r3, [r3, #8]
 8009eb8:	f003 0302 	and.w	r3, r3, #2
 8009ebc:	2b02      	cmp	r3, #2
 8009ebe:	d11b      	bne.n	8009ef8 <HAL_SPI_TransmitReceive+0x176>
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d016      	beq.n	8009ef8 <HAL_SPI_TransmitReceive+0x176>
 8009eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d113      	bne.n	8009ef8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ed4:	881a      	ldrh	r2, [r3, #0]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ee0:	1c9a      	adds	r2, r3, #2
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	3b01      	subs	r3, #1
 8009eee:	b29a      	uxth	r2, r3
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	f003 0301 	and.w	r3, r3, #1
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d119      	bne.n	8009f3a <HAL_SPI_TransmitReceive+0x1b8>
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d014      	beq.n	8009f3a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	68da      	ldr	r2, [r3, #12]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f1a:	b292      	uxth	r2, r2
 8009f1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f22:	1c9a      	adds	r2, r3, #2
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	3b01      	subs	r3, #1
 8009f30:	b29a      	uxth	r2, r3
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f36:	2301      	movs	r3, #1
 8009f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009f3a:	f7fd fa5f 	bl	80073fc <HAL_GetTick>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f42:	1ad3      	subs	r3, r2, r3
 8009f44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d807      	bhi.n	8009f5a <HAL_SPI_TransmitReceive+0x1d8>
 8009f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f50:	d003      	beq.n	8009f5a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009f52:	2303      	movs	r3, #3
 8009f54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8009f58:	e0a7      	b.n	800a0aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d1a6      	bne.n	8009eb2 <HAL_SPI_TransmitReceive+0x130>
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d1a1      	bne.n	8009eb2 <HAL_SPI_TransmitReceive+0x130>
 8009f6e:	e07c      	b.n	800a06a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d002      	beq.n	8009f7e <HAL_SPI_TransmitReceive+0x1fc>
 8009f78:	8b7b      	ldrh	r3, [r7, #26]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d16b      	bne.n	800a056 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	330c      	adds	r3, #12
 8009f88:	7812      	ldrb	r2, [r2, #0]
 8009f8a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f90:	1c5a      	adds	r2, r3, #1
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	3b01      	subs	r3, #1
 8009f9e:	b29a      	uxth	r2, r3
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009fa4:	e057      	b.n	800a056 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	f003 0302 	and.w	r3, r3, #2
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d11c      	bne.n	8009fee <HAL_SPI_TransmitReceive+0x26c>
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d017      	beq.n	8009fee <HAL_SPI_TransmitReceive+0x26c>
 8009fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d114      	bne.n	8009fee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	330c      	adds	r3, #12
 8009fce:	7812      	ldrb	r2, [r2, #0]
 8009fd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fd6:	1c5a      	adds	r2, r3, #1
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009fea:	2300      	movs	r3, #0
 8009fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	f003 0301 	and.w	r3, r3, #1
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d119      	bne.n	800a030 <HAL_SPI_TransmitReceive+0x2ae>
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a000:	b29b      	uxth	r3, r3
 800a002:	2b00      	cmp	r3, #0
 800a004:	d014      	beq.n	800a030 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	68da      	ldr	r2, [r3, #12]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a010:	b2d2      	uxtb	r2, r2
 800a012:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a018:	1c5a      	adds	r2, r3, #1
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a022:	b29b      	uxth	r3, r3
 800a024:	3b01      	subs	r3, #1
 800a026:	b29a      	uxth	r2, r3
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a02c:	2301      	movs	r3, #1
 800a02e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a030:	f7fd f9e4 	bl	80073fc <HAL_GetTick>
 800a034:	4602      	mov	r2, r0
 800a036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a038:	1ad3      	subs	r3, r2, r3
 800a03a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d803      	bhi.n	800a048 <HAL_SPI_TransmitReceive+0x2c6>
 800a040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a042:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a046:	d102      	bne.n	800a04e <HAL_SPI_TransmitReceive+0x2cc>
 800a048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d103      	bne.n	800a056 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a04e:	2303      	movs	r3, #3
 800a050:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800a054:	e029      	b.n	800a0aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d1a2      	bne.n	8009fa6 <HAL_SPI_TransmitReceive+0x224>
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a064:	b29b      	uxth	r3, r3
 800a066:	2b00      	cmp	r3, #0
 800a068:	d19d      	bne.n	8009fa6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a06a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a06c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f000 f8b2 	bl	800a1d8 <SPI_EndRxTxTransaction>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d006      	beq.n	800a088 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2220      	movs	r2, #32
 800a084:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800a086:	e010      	b.n	800a0aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d10b      	bne.n	800a0a8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a090:	2300      	movs	r3, #0
 800a092:	617b      	str	r3, [r7, #20]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	617b      	str	r3, [r7, #20]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	617b      	str	r3, [r7, #20]
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	e000      	b.n	800a0aa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a0a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800a0ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3730      	adds	r7, #48	@ 0x30
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
	...

0800a0c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b088      	sub	sp, #32
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	603b      	str	r3, [r7, #0]
 800a0d4:	4613      	mov	r3, r2
 800a0d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a0d8:	f7fd f990 	bl	80073fc <HAL_GetTick>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e0:	1a9b      	subs	r3, r3, r2
 800a0e2:	683a      	ldr	r2, [r7, #0]
 800a0e4:	4413      	add	r3, r2
 800a0e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a0e8:	f7fd f988 	bl	80073fc <HAL_GetTick>
 800a0ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a0ee:	4b39      	ldr	r3, [pc, #228]	@ (800a1d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	015b      	lsls	r3, r3, #5
 800a0f4:	0d1b      	lsrs	r3, r3, #20
 800a0f6:	69fa      	ldr	r2, [r7, #28]
 800a0f8:	fb02 f303 	mul.w	r3, r2, r3
 800a0fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a0fe:	e054      	b.n	800a1aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a106:	d050      	beq.n	800a1aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a108:	f7fd f978 	bl	80073fc <HAL_GetTick>
 800a10c:	4602      	mov	r2, r0
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	69fa      	ldr	r2, [r7, #28]
 800a114:	429a      	cmp	r2, r3
 800a116:	d902      	bls.n	800a11e <SPI_WaitFlagStateUntilTimeout+0x56>
 800a118:	69fb      	ldr	r3, [r7, #28]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d13d      	bne.n	800a19a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	685a      	ldr	r2, [r3, #4]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a12c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a136:	d111      	bne.n	800a15c <SPI_WaitFlagStateUntilTimeout+0x94>
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a140:	d004      	beq.n	800a14c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a14a:	d107      	bne.n	800a15c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a15a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a160:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a164:	d10f      	bne.n	800a186 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a174:	601a      	str	r2, [r3, #0]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a184:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2201      	movs	r2, #1
 800a18a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2200      	movs	r2, #0
 800a192:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800a196:	2303      	movs	r3, #3
 800a198:	e017      	b.n	800a1ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d101      	bne.n	800a1a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	689a      	ldr	r2, [r3, #8]
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	4013      	ands	r3, r2
 800a1b4:	68ba      	ldr	r2, [r7, #8]
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	bf0c      	ite	eq
 800a1ba:	2301      	moveq	r3, #1
 800a1bc:	2300      	movne	r3, #0
 800a1be:	b2db      	uxtb	r3, r3
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	79fb      	ldrb	r3, [r7, #7]
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d19b      	bne.n	800a100 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3720      	adds	r7, #32
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	20000040 	.word	0x20000040

0800a1d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b088      	sub	sp, #32
 800a1dc:	af02      	add	r7, sp, #8
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a1e4:	4b1b      	ldr	r3, [pc, #108]	@ (800a254 <SPI_EndRxTxTransaction+0x7c>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a1b      	ldr	r2, [pc, #108]	@ (800a258 <SPI_EndRxTxTransaction+0x80>)
 800a1ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a1ee:	0d5b      	lsrs	r3, r3, #21
 800a1f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a1f4:	fb02 f303 	mul.w	r3, r2, r3
 800a1f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a202:	d112      	bne.n	800a22a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	9300      	str	r3, [sp, #0]
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	2200      	movs	r2, #0
 800a20c:	2180      	movs	r1, #128	@ 0x80
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	f7ff ff5a 	bl	800a0c8 <SPI_WaitFlagStateUntilTimeout>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d016      	beq.n	800a248 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a21e:	f043 0220 	orr.w	r2, r3, #32
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a226:	2303      	movs	r3, #3
 800a228:	e00f      	b.n	800a24a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d00a      	beq.n	800a246 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	3b01      	subs	r3, #1
 800a234:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a240:	2b80      	cmp	r3, #128	@ 0x80
 800a242:	d0f2      	beq.n	800a22a <SPI_EndRxTxTransaction+0x52>
 800a244:	e000      	b.n	800a248 <SPI_EndRxTxTransaction+0x70>
        break;
 800a246:	bf00      	nop
  }

  return HAL_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3718      	adds	r7, #24
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	20000040 	.word	0x20000040
 800a258:	165e9f81 	.word	0x165e9f81

0800a25c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d101      	bne.n	800a26e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	e041      	b.n	800a2f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b00      	cmp	r3, #0
 800a278:	d106      	bne.n	800a288 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f7fc fa8c 	bl	80067a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2202      	movs	r2, #2
 800a28c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	3304      	adds	r3, #4
 800a298:	4619      	mov	r1, r3
 800a29a:	4610      	mov	r0, r2
 800a29c:	f000 fc7c 	bl	800ab98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3708      	adds	r7, #8
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
	...

0800a2fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b085      	sub	sp, #20
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d001      	beq.n	800a314 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a310:	2301      	movs	r3, #1
 800a312:	e04e      	b.n	800a3b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2202      	movs	r2, #2
 800a318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	68da      	ldr	r2, [r3, #12]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f042 0201 	orr.w	r2, r2, #1
 800a32a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a23      	ldr	r2, [pc, #140]	@ (800a3c0 <HAL_TIM_Base_Start_IT+0xc4>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d022      	beq.n	800a37c <HAL_TIM_Base_Start_IT+0x80>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a33e:	d01d      	beq.n	800a37c <HAL_TIM_Base_Start_IT+0x80>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a1f      	ldr	r2, [pc, #124]	@ (800a3c4 <HAL_TIM_Base_Start_IT+0xc8>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d018      	beq.n	800a37c <HAL_TIM_Base_Start_IT+0x80>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a1e      	ldr	r2, [pc, #120]	@ (800a3c8 <HAL_TIM_Base_Start_IT+0xcc>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d013      	beq.n	800a37c <HAL_TIM_Base_Start_IT+0x80>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a1c      	ldr	r2, [pc, #112]	@ (800a3cc <HAL_TIM_Base_Start_IT+0xd0>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d00e      	beq.n	800a37c <HAL_TIM_Base_Start_IT+0x80>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a1b      	ldr	r2, [pc, #108]	@ (800a3d0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d009      	beq.n	800a37c <HAL_TIM_Base_Start_IT+0x80>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a19      	ldr	r2, [pc, #100]	@ (800a3d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d004      	beq.n	800a37c <HAL_TIM_Base_Start_IT+0x80>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a18      	ldr	r2, [pc, #96]	@ (800a3d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d111      	bne.n	800a3a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	689b      	ldr	r3, [r3, #8]
 800a382:	f003 0307 	and.w	r3, r3, #7
 800a386:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2b06      	cmp	r3, #6
 800a38c:	d010      	beq.n	800a3b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f042 0201 	orr.w	r2, r2, #1
 800a39c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a39e:	e007      	b.n	800a3b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f042 0201 	orr.w	r2, r2, #1
 800a3ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a3b0:	2300      	movs	r3, #0
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3714      	adds	r7, #20
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	40010000 	.word	0x40010000
 800a3c4:	40000400 	.word	0x40000400
 800a3c8:	40000800 	.word	0x40000800
 800a3cc:	40000c00 	.word	0x40000c00
 800a3d0:	40010400 	.word	0x40010400
 800a3d4:	40014000 	.word	0x40014000
 800a3d8:	40001800 	.word	0x40001800

0800a3dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d101      	bne.n	800a3ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	e041      	b.n	800a472 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d106      	bne.n	800a408 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 f839 	bl	800a47a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2202      	movs	r2, #2
 800a40c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	3304      	adds	r3, #4
 800a418:	4619      	mov	r1, r3
 800a41a:	4610      	mov	r0, r2
 800a41c:	f000 fbbc 	bl	800ab98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2201      	movs	r2, #1
 800a424:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2201      	movs	r2, #1
 800a42c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2201      	movs	r2, #1
 800a434:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2201      	movs	r2, #1
 800a43c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2201      	movs	r2, #1
 800a444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2201      	movs	r2, #1
 800a44c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2201      	movs	r2, #1
 800a454:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2201      	movs	r2, #1
 800a45c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2201      	movs	r2, #1
 800a464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2201      	movs	r2, #1
 800a46c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3708      	adds	r7, #8
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a47a:	b480      	push	{r7}
 800a47c:	b083      	sub	sp, #12
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a482:	bf00      	nop
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
	...

0800a490 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d109      	bne.n	800a4b4 <HAL_TIM_PWM_Start+0x24>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	bf14      	ite	ne
 800a4ac:	2301      	movne	r3, #1
 800a4ae:	2300      	moveq	r3, #0
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	e022      	b.n	800a4fa <HAL_TIM_PWM_Start+0x6a>
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	2b04      	cmp	r3, #4
 800a4b8:	d109      	bne.n	800a4ce <HAL_TIM_PWM_Start+0x3e>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	bf14      	ite	ne
 800a4c6:	2301      	movne	r3, #1
 800a4c8:	2300      	moveq	r3, #0
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	e015      	b.n	800a4fa <HAL_TIM_PWM_Start+0x6a>
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	2b08      	cmp	r3, #8
 800a4d2:	d109      	bne.n	800a4e8 <HAL_TIM_PWM_Start+0x58>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	bf14      	ite	ne
 800a4e0:	2301      	movne	r3, #1
 800a4e2:	2300      	moveq	r3, #0
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	e008      	b.n	800a4fa <HAL_TIM_PWM_Start+0x6a>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	bf14      	ite	ne
 800a4f4:	2301      	movne	r3, #1
 800a4f6:	2300      	moveq	r3, #0
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d001      	beq.n	800a502 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	e07c      	b.n	800a5fc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d104      	bne.n	800a512 <HAL_TIM_PWM_Start+0x82>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2202      	movs	r2, #2
 800a50c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a510:	e013      	b.n	800a53a <HAL_TIM_PWM_Start+0xaa>
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	2b04      	cmp	r3, #4
 800a516:	d104      	bne.n	800a522 <HAL_TIM_PWM_Start+0x92>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2202      	movs	r2, #2
 800a51c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a520:	e00b      	b.n	800a53a <HAL_TIM_PWM_Start+0xaa>
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	2b08      	cmp	r3, #8
 800a526:	d104      	bne.n	800a532 <HAL_TIM_PWM_Start+0xa2>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2202      	movs	r2, #2
 800a52c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a530:	e003      	b.n	800a53a <HAL_TIM_PWM_Start+0xaa>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2202      	movs	r2, #2
 800a536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2201      	movs	r2, #1
 800a540:	6839      	ldr	r1, [r7, #0]
 800a542:	4618      	mov	r0, r3
 800a544:	f000 fe12 	bl	800b16c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a2d      	ldr	r2, [pc, #180]	@ (800a604 <HAL_TIM_PWM_Start+0x174>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d004      	beq.n	800a55c <HAL_TIM_PWM_Start+0xcc>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a2c      	ldr	r2, [pc, #176]	@ (800a608 <HAL_TIM_PWM_Start+0x178>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d101      	bne.n	800a560 <HAL_TIM_PWM_Start+0xd0>
 800a55c:	2301      	movs	r3, #1
 800a55e:	e000      	b.n	800a562 <HAL_TIM_PWM_Start+0xd2>
 800a560:	2300      	movs	r3, #0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d007      	beq.n	800a576 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a574:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a22      	ldr	r2, [pc, #136]	@ (800a604 <HAL_TIM_PWM_Start+0x174>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d022      	beq.n	800a5c6 <HAL_TIM_PWM_Start+0x136>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a588:	d01d      	beq.n	800a5c6 <HAL_TIM_PWM_Start+0x136>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a1f      	ldr	r2, [pc, #124]	@ (800a60c <HAL_TIM_PWM_Start+0x17c>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d018      	beq.n	800a5c6 <HAL_TIM_PWM_Start+0x136>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a1d      	ldr	r2, [pc, #116]	@ (800a610 <HAL_TIM_PWM_Start+0x180>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d013      	beq.n	800a5c6 <HAL_TIM_PWM_Start+0x136>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a1c      	ldr	r2, [pc, #112]	@ (800a614 <HAL_TIM_PWM_Start+0x184>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d00e      	beq.n	800a5c6 <HAL_TIM_PWM_Start+0x136>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a16      	ldr	r2, [pc, #88]	@ (800a608 <HAL_TIM_PWM_Start+0x178>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d009      	beq.n	800a5c6 <HAL_TIM_PWM_Start+0x136>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a18      	ldr	r2, [pc, #96]	@ (800a618 <HAL_TIM_PWM_Start+0x188>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d004      	beq.n	800a5c6 <HAL_TIM_PWM_Start+0x136>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a16      	ldr	r2, [pc, #88]	@ (800a61c <HAL_TIM_PWM_Start+0x18c>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d111      	bne.n	800a5ea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	f003 0307 	and.w	r3, r3, #7
 800a5d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2b06      	cmp	r3, #6
 800a5d6:	d010      	beq.n	800a5fa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f042 0201 	orr.w	r2, r2, #1
 800a5e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5e8:	e007      	b.n	800a5fa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f042 0201 	orr.w	r2, r2, #1
 800a5f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a5fa:	2300      	movs	r3, #0
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	40010000 	.word	0x40010000
 800a608:	40010400 	.word	0x40010400
 800a60c:	40000400 	.word	0x40000400
 800a610:	40000800 	.word	0x40000800
 800a614:	40000c00 	.word	0x40000c00
 800a618:	40014000 	.word	0x40014000
 800a61c:	40001800 	.word	0x40001800

0800a620 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	691b      	ldr	r3, [r3, #16]
 800a62e:	f003 0302 	and.w	r3, r3, #2
 800a632:	2b02      	cmp	r3, #2
 800a634:	d122      	bne.n	800a67c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	f003 0302 	and.w	r3, r3, #2
 800a640:	2b02      	cmp	r3, #2
 800a642:	d11b      	bne.n	800a67c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f06f 0202 	mvn.w	r2, #2
 800a64c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2201      	movs	r2, #1
 800a652:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	699b      	ldr	r3, [r3, #24]
 800a65a:	f003 0303 	and.w	r3, r3, #3
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d003      	beq.n	800a66a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 fa7a 	bl	800ab5c <HAL_TIM_IC_CaptureCallback>
 800a668:	e005      	b.n	800a676 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 fa6c 	bl	800ab48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 fa7d 	bl	800ab70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	f003 0304 	and.w	r3, r3, #4
 800a686:	2b04      	cmp	r3, #4
 800a688:	d122      	bne.n	800a6d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	f003 0304 	and.w	r3, r3, #4
 800a694:	2b04      	cmp	r3, #4
 800a696:	d11b      	bne.n	800a6d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f06f 0204 	mvn.w	r2, #4
 800a6a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2202      	movs	r2, #2
 800a6a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	699b      	ldr	r3, [r3, #24]
 800a6ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d003      	beq.n	800a6be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 fa50 	bl	800ab5c <HAL_TIM_IC_CaptureCallback>
 800a6bc:	e005      	b.n	800a6ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 fa42 	bl	800ab48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 fa53 	bl	800ab70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	691b      	ldr	r3, [r3, #16]
 800a6d6:	f003 0308 	and.w	r3, r3, #8
 800a6da:	2b08      	cmp	r3, #8
 800a6dc:	d122      	bne.n	800a724 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	68db      	ldr	r3, [r3, #12]
 800a6e4:	f003 0308 	and.w	r3, r3, #8
 800a6e8:	2b08      	cmp	r3, #8
 800a6ea:	d11b      	bne.n	800a724 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f06f 0208 	mvn.w	r2, #8
 800a6f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2204      	movs	r2, #4
 800a6fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	69db      	ldr	r3, [r3, #28]
 800a702:	f003 0303 	and.w	r3, r3, #3
 800a706:	2b00      	cmp	r3, #0
 800a708:	d003      	beq.n	800a712 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 fa26 	bl	800ab5c <HAL_TIM_IC_CaptureCallback>
 800a710:	e005      	b.n	800a71e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 fa18 	bl	800ab48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 fa29 	bl	800ab70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	691b      	ldr	r3, [r3, #16]
 800a72a:	f003 0310 	and.w	r3, r3, #16
 800a72e:	2b10      	cmp	r3, #16
 800a730:	d122      	bne.n	800a778 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	f003 0310 	and.w	r3, r3, #16
 800a73c:	2b10      	cmp	r3, #16
 800a73e:	d11b      	bne.n	800a778 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f06f 0210 	mvn.w	r2, #16
 800a748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2208      	movs	r2, #8
 800a74e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	69db      	ldr	r3, [r3, #28]
 800a756:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d003      	beq.n	800a766 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 f9fc 	bl	800ab5c <HAL_TIM_IC_CaptureCallback>
 800a764:	e005      	b.n	800a772 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 f9ee 	bl	800ab48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 f9ff 	bl	800ab70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	691b      	ldr	r3, [r3, #16]
 800a77e:	f003 0301 	and.w	r3, r3, #1
 800a782:	2b01      	cmp	r3, #1
 800a784:	d10e      	bne.n	800a7a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	f003 0301 	and.w	r3, r3, #1
 800a790:	2b01      	cmp	r3, #1
 800a792:	d107      	bne.n	800a7a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f06f 0201 	mvn.w	r2, #1
 800a79c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 f9c8 	bl	800ab34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	691b      	ldr	r3, [r3, #16]
 800a7aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7ae:	2b80      	cmp	r3, #128	@ 0x80
 800a7b0:	d10e      	bne.n	800a7d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7bc:	2b80      	cmp	r3, #128	@ 0x80
 800a7be:	d107      	bne.n	800a7d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a7c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 fdcc 	bl	800b368 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	691b      	ldr	r3, [r3, #16]
 800a7d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7da:	2b40      	cmp	r3, #64	@ 0x40
 800a7dc:	d10e      	bne.n	800a7fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7e8:	2b40      	cmp	r3, #64	@ 0x40
 800a7ea:	d107      	bne.n	800a7fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a7f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 f9c4 	bl	800ab84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	f003 0320 	and.w	r3, r3, #32
 800a806:	2b20      	cmp	r3, #32
 800a808:	d10e      	bne.n	800a828 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	68db      	ldr	r3, [r3, #12]
 800a810:	f003 0320 	and.w	r3, r3, #32
 800a814:	2b20      	cmp	r3, #32
 800a816:	d107      	bne.n	800a828 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f06f 0220 	mvn.w	r2, #32
 800a820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 fd96 	bl	800b354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a828:	bf00      	nop
 800a82a:	3708      	adds	r7, #8
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	60b9      	str	r1, [r7, #8]
 800a83a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a842:	2b01      	cmp	r3, #1
 800a844:	d101      	bne.n	800a84a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a846:	2302      	movs	r3, #2
 800a848:	e0ac      	b.n	800a9a4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2201      	movs	r2, #1
 800a84e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2b0c      	cmp	r3, #12
 800a856:	f200 809f 	bhi.w	800a998 <HAL_TIM_PWM_ConfigChannel+0x168>
 800a85a:	a201      	add	r2, pc, #4	@ (adr r2, 800a860 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a860:	0800a895 	.word	0x0800a895
 800a864:	0800a999 	.word	0x0800a999
 800a868:	0800a999 	.word	0x0800a999
 800a86c:	0800a999 	.word	0x0800a999
 800a870:	0800a8d5 	.word	0x0800a8d5
 800a874:	0800a999 	.word	0x0800a999
 800a878:	0800a999 	.word	0x0800a999
 800a87c:	0800a999 	.word	0x0800a999
 800a880:	0800a917 	.word	0x0800a917
 800a884:	0800a999 	.word	0x0800a999
 800a888:	0800a999 	.word	0x0800a999
 800a88c:	0800a999 	.word	0x0800a999
 800a890:	0800a957 	.word	0x0800a957
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	68b9      	ldr	r1, [r7, #8]
 800a89a:	4618      	mov	r0, r3
 800a89c:	f000 fa1c 	bl	800acd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	699a      	ldr	r2, [r3, #24]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f042 0208 	orr.w	r2, r2, #8
 800a8ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	699a      	ldr	r2, [r3, #24]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f022 0204 	bic.w	r2, r2, #4
 800a8be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	6999      	ldr	r1, [r3, #24]
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	691a      	ldr	r2, [r3, #16]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	430a      	orrs	r2, r1
 800a8d0:	619a      	str	r2, [r3, #24]
      break;
 800a8d2:	e062      	b.n	800a99a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	68b9      	ldr	r1, [r7, #8]
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f000 fa6c 	bl	800adb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	699a      	ldr	r2, [r3, #24]
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a8ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	699a      	ldr	r2, [r3, #24]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a8fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	6999      	ldr	r1, [r3, #24]
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	691b      	ldr	r3, [r3, #16]
 800a90a:	021a      	lsls	r2, r3, #8
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	430a      	orrs	r2, r1
 800a912:	619a      	str	r2, [r3, #24]
      break;
 800a914:	e041      	b.n	800a99a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	68b9      	ldr	r1, [r7, #8]
 800a91c:	4618      	mov	r0, r3
 800a91e:	f000 fac1 	bl	800aea4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	69da      	ldr	r2, [r3, #28]
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f042 0208 	orr.w	r2, r2, #8
 800a930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	69da      	ldr	r2, [r3, #28]
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f022 0204 	bic.w	r2, r2, #4
 800a940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	69d9      	ldr	r1, [r3, #28]
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	691a      	ldr	r2, [r3, #16]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	430a      	orrs	r2, r1
 800a952:	61da      	str	r2, [r3, #28]
      break;
 800a954:	e021      	b.n	800a99a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	68b9      	ldr	r1, [r7, #8]
 800a95c:	4618      	mov	r0, r3
 800a95e:	f000 fb15 	bl	800af8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	69da      	ldr	r2, [r3, #28]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	69da      	ldr	r2, [r3, #28]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	69d9      	ldr	r1, [r3, #28]
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	691b      	ldr	r3, [r3, #16]
 800a98c:	021a      	lsls	r2, r3, #8
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	430a      	orrs	r2, r1
 800a994:	61da      	str	r2, [r3, #28]
      break;
 800a996:	e000      	b.n	800a99a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800a998:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3710      	adds	r7, #16
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d101      	bne.n	800a9c4 <HAL_TIM_ConfigClockSource+0x18>
 800a9c0:	2302      	movs	r3, #2
 800a9c2:	e0b3      	b.n	800ab2c <HAL_TIM_ConfigClockSource+0x180>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2202      	movs	r2, #2
 800a9d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a9e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a9ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	68fa      	ldr	r2, [r7, #12]
 800a9f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9fc:	d03e      	beq.n	800aa7c <HAL_TIM_ConfigClockSource+0xd0>
 800a9fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa02:	f200 8087 	bhi.w	800ab14 <HAL_TIM_ConfigClockSource+0x168>
 800aa06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa0a:	f000 8085 	beq.w	800ab18 <HAL_TIM_ConfigClockSource+0x16c>
 800aa0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa12:	d87f      	bhi.n	800ab14 <HAL_TIM_ConfigClockSource+0x168>
 800aa14:	2b70      	cmp	r3, #112	@ 0x70
 800aa16:	d01a      	beq.n	800aa4e <HAL_TIM_ConfigClockSource+0xa2>
 800aa18:	2b70      	cmp	r3, #112	@ 0x70
 800aa1a:	d87b      	bhi.n	800ab14 <HAL_TIM_ConfigClockSource+0x168>
 800aa1c:	2b60      	cmp	r3, #96	@ 0x60
 800aa1e:	d050      	beq.n	800aac2 <HAL_TIM_ConfigClockSource+0x116>
 800aa20:	2b60      	cmp	r3, #96	@ 0x60
 800aa22:	d877      	bhi.n	800ab14 <HAL_TIM_ConfigClockSource+0x168>
 800aa24:	2b50      	cmp	r3, #80	@ 0x50
 800aa26:	d03c      	beq.n	800aaa2 <HAL_TIM_ConfigClockSource+0xf6>
 800aa28:	2b50      	cmp	r3, #80	@ 0x50
 800aa2a:	d873      	bhi.n	800ab14 <HAL_TIM_ConfigClockSource+0x168>
 800aa2c:	2b40      	cmp	r3, #64	@ 0x40
 800aa2e:	d058      	beq.n	800aae2 <HAL_TIM_ConfigClockSource+0x136>
 800aa30:	2b40      	cmp	r3, #64	@ 0x40
 800aa32:	d86f      	bhi.n	800ab14 <HAL_TIM_ConfigClockSource+0x168>
 800aa34:	2b30      	cmp	r3, #48	@ 0x30
 800aa36:	d064      	beq.n	800ab02 <HAL_TIM_ConfigClockSource+0x156>
 800aa38:	2b30      	cmp	r3, #48	@ 0x30
 800aa3a:	d86b      	bhi.n	800ab14 <HAL_TIM_ConfigClockSource+0x168>
 800aa3c:	2b20      	cmp	r3, #32
 800aa3e:	d060      	beq.n	800ab02 <HAL_TIM_ConfigClockSource+0x156>
 800aa40:	2b20      	cmp	r3, #32
 800aa42:	d867      	bhi.n	800ab14 <HAL_TIM_ConfigClockSource+0x168>
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d05c      	beq.n	800ab02 <HAL_TIM_ConfigClockSource+0x156>
 800aa48:	2b10      	cmp	r3, #16
 800aa4a:	d05a      	beq.n	800ab02 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800aa4c:	e062      	b.n	800ab14 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6818      	ldr	r0, [r3, #0]
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	6899      	ldr	r1, [r3, #8]
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	685a      	ldr	r2, [r3, #4]
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	f000 fb65 	bl	800b12c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aa70:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	68fa      	ldr	r2, [r7, #12]
 800aa78:	609a      	str	r2, [r3, #8]
      break;
 800aa7a:	e04e      	b.n	800ab1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6818      	ldr	r0, [r3, #0]
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	6899      	ldr	r1, [r3, #8]
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	685a      	ldr	r2, [r3, #4]
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	68db      	ldr	r3, [r3, #12]
 800aa8c:	f000 fb4e 	bl	800b12c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	689a      	ldr	r2, [r3, #8]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aa9e:	609a      	str	r2, [r3, #8]
      break;
 800aaa0:	e03b      	b.n	800ab1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6818      	ldr	r0, [r3, #0]
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	6859      	ldr	r1, [r3, #4]
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	461a      	mov	r2, r3
 800aab0:	f000 fac2 	bl	800b038 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2150      	movs	r1, #80	@ 0x50
 800aaba:	4618      	mov	r0, r3
 800aabc:	f000 fb1b 	bl	800b0f6 <TIM_ITRx_SetConfig>
      break;
 800aac0:	e02b      	b.n	800ab1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6818      	ldr	r0, [r3, #0]
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	6859      	ldr	r1, [r3, #4]
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	68db      	ldr	r3, [r3, #12]
 800aace:	461a      	mov	r2, r3
 800aad0:	f000 fae1 	bl	800b096 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2160      	movs	r1, #96	@ 0x60
 800aada:	4618      	mov	r0, r3
 800aadc:	f000 fb0b 	bl	800b0f6 <TIM_ITRx_SetConfig>
      break;
 800aae0:	e01b      	b.n	800ab1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6818      	ldr	r0, [r3, #0]
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	6859      	ldr	r1, [r3, #4]
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	68db      	ldr	r3, [r3, #12]
 800aaee:	461a      	mov	r2, r3
 800aaf0:	f000 faa2 	bl	800b038 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	2140      	movs	r1, #64	@ 0x40
 800aafa:	4618      	mov	r0, r3
 800aafc:	f000 fafb 	bl	800b0f6 <TIM_ITRx_SetConfig>
      break;
 800ab00:	e00b      	b.n	800ab1a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	4610      	mov	r0, r2
 800ab0e:	f000 faf2 	bl	800b0f6 <TIM_ITRx_SetConfig>
        break;
 800ab12:	e002      	b.n	800ab1a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800ab14:	bf00      	nop
 800ab16:	e000      	b.n	800ab1a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800ab18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3710      	adds	r7, #16
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ab3c:	bf00      	nop
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab50:	bf00      	nop
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab64:	bf00      	nop
 800ab66:	370c      	adds	r7, #12
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr

0800ab70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab78:	bf00      	nop
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab8c:	bf00      	nop
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4a40      	ldr	r2, [pc, #256]	@ (800acac <TIM_Base_SetConfig+0x114>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d013      	beq.n	800abd8 <TIM_Base_SetConfig+0x40>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abb6:	d00f      	beq.n	800abd8 <TIM_Base_SetConfig+0x40>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	4a3d      	ldr	r2, [pc, #244]	@ (800acb0 <TIM_Base_SetConfig+0x118>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d00b      	beq.n	800abd8 <TIM_Base_SetConfig+0x40>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4a3c      	ldr	r2, [pc, #240]	@ (800acb4 <TIM_Base_SetConfig+0x11c>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d007      	beq.n	800abd8 <TIM_Base_SetConfig+0x40>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	4a3b      	ldr	r2, [pc, #236]	@ (800acb8 <TIM_Base_SetConfig+0x120>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d003      	beq.n	800abd8 <TIM_Base_SetConfig+0x40>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	4a3a      	ldr	r2, [pc, #232]	@ (800acbc <TIM_Base_SetConfig+0x124>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d108      	bne.n	800abea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	68fa      	ldr	r2, [r7, #12]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	4a2f      	ldr	r2, [pc, #188]	@ (800acac <TIM_Base_SetConfig+0x114>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d02b      	beq.n	800ac4a <TIM_Base_SetConfig+0xb2>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abf8:	d027      	beq.n	800ac4a <TIM_Base_SetConfig+0xb2>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4a2c      	ldr	r2, [pc, #176]	@ (800acb0 <TIM_Base_SetConfig+0x118>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d023      	beq.n	800ac4a <TIM_Base_SetConfig+0xb2>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	4a2b      	ldr	r2, [pc, #172]	@ (800acb4 <TIM_Base_SetConfig+0x11c>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d01f      	beq.n	800ac4a <TIM_Base_SetConfig+0xb2>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4a2a      	ldr	r2, [pc, #168]	@ (800acb8 <TIM_Base_SetConfig+0x120>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d01b      	beq.n	800ac4a <TIM_Base_SetConfig+0xb2>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	4a29      	ldr	r2, [pc, #164]	@ (800acbc <TIM_Base_SetConfig+0x124>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d017      	beq.n	800ac4a <TIM_Base_SetConfig+0xb2>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4a28      	ldr	r2, [pc, #160]	@ (800acc0 <TIM_Base_SetConfig+0x128>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d013      	beq.n	800ac4a <TIM_Base_SetConfig+0xb2>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4a27      	ldr	r2, [pc, #156]	@ (800acc4 <TIM_Base_SetConfig+0x12c>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d00f      	beq.n	800ac4a <TIM_Base_SetConfig+0xb2>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4a26      	ldr	r2, [pc, #152]	@ (800acc8 <TIM_Base_SetConfig+0x130>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d00b      	beq.n	800ac4a <TIM_Base_SetConfig+0xb2>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	4a25      	ldr	r2, [pc, #148]	@ (800accc <TIM_Base_SetConfig+0x134>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d007      	beq.n	800ac4a <TIM_Base_SetConfig+0xb2>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	4a24      	ldr	r2, [pc, #144]	@ (800acd0 <TIM_Base_SetConfig+0x138>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d003      	beq.n	800ac4a <TIM_Base_SetConfig+0xb2>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	4a23      	ldr	r2, [pc, #140]	@ (800acd4 <TIM_Base_SetConfig+0x13c>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d108      	bne.n	800ac5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	68db      	ldr	r3, [r3, #12]
 800ac56:	68fa      	ldr	r2, [r7, #12]
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	695b      	ldr	r3, [r3, #20]
 800ac66:	4313      	orrs	r3, r2
 800ac68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	68fa      	ldr	r2, [r7, #12]
 800ac6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	689a      	ldr	r2, [r3, #8]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	4a0a      	ldr	r2, [pc, #40]	@ (800acac <TIM_Base_SetConfig+0x114>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d003      	beq.n	800ac90 <TIM_Base_SetConfig+0xf8>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	4a0c      	ldr	r2, [pc, #48]	@ (800acbc <TIM_Base_SetConfig+0x124>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d103      	bne.n	800ac98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	691a      	ldr	r2, [r3, #16]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	615a      	str	r2, [r3, #20]
}
 800ac9e:	bf00      	nop
 800aca0:	3714      	adds	r7, #20
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr
 800acaa:	bf00      	nop
 800acac:	40010000 	.word	0x40010000
 800acb0:	40000400 	.word	0x40000400
 800acb4:	40000800 	.word	0x40000800
 800acb8:	40000c00 	.word	0x40000c00
 800acbc:	40010400 	.word	0x40010400
 800acc0:	40014000 	.word	0x40014000
 800acc4:	40014400 	.word	0x40014400
 800acc8:	40014800 	.word	0x40014800
 800accc:	40001800 	.word	0x40001800
 800acd0:	40001c00 	.word	0x40001c00
 800acd4:	40002000 	.word	0x40002000

0800acd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800acd8:	b480      	push	{r7}
 800acda:	b087      	sub	sp, #28
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6a1b      	ldr	r3, [r3, #32]
 800ace6:	f023 0201 	bic.w	r2, r3, #1
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6a1b      	ldr	r3, [r3, #32]
 800acf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	699b      	ldr	r3, [r3, #24]
 800acfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f023 0303 	bic.w	r3, r3, #3
 800ad0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	68fa      	ldr	r2, [r7, #12]
 800ad16:	4313      	orrs	r3, r2
 800ad18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	f023 0302 	bic.w	r3, r3, #2
 800ad20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	697a      	ldr	r2, [r7, #20]
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4a20      	ldr	r2, [pc, #128]	@ (800adb0 <TIM_OC1_SetConfig+0xd8>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d003      	beq.n	800ad3c <TIM_OC1_SetConfig+0x64>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a1f      	ldr	r2, [pc, #124]	@ (800adb4 <TIM_OC1_SetConfig+0xdc>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d10c      	bne.n	800ad56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	f023 0308 	bic.w	r3, r3, #8
 800ad42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	697a      	ldr	r2, [r7, #20]
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	f023 0304 	bic.w	r3, r3, #4
 800ad54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	4a15      	ldr	r2, [pc, #84]	@ (800adb0 <TIM_OC1_SetConfig+0xd8>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d003      	beq.n	800ad66 <TIM_OC1_SetConfig+0x8e>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	4a14      	ldr	r2, [pc, #80]	@ (800adb4 <TIM_OC1_SetConfig+0xdc>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d111      	bne.n	800ad8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ad6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ad74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	695b      	ldr	r3, [r3, #20]
 800ad7a:	693a      	ldr	r2, [r7, #16]
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	699b      	ldr	r3, [r3, #24]
 800ad84:	693a      	ldr	r2, [r7, #16]
 800ad86:	4313      	orrs	r3, r2
 800ad88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	693a      	ldr	r2, [r7, #16]
 800ad8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	68fa      	ldr	r2, [r7, #12]
 800ad94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	685a      	ldr	r2, [r3, #4]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	697a      	ldr	r2, [r7, #20]
 800ada2:	621a      	str	r2, [r3, #32]
}
 800ada4:	bf00      	nop
 800ada6:	371c      	adds	r7, #28
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr
 800adb0:	40010000 	.word	0x40010000
 800adb4:	40010400 	.word	0x40010400

0800adb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800adb8:	b480      	push	{r7}
 800adba:	b087      	sub	sp, #28
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6a1b      	ldr	r3, [r3, #32]
 800adc6:	f023 0210 	bic.w	r2, r3, #16
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6a1b      	ldr	r3, [r3, #32]
 800add2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	699b      	ldr	r3, [r3, #24]
 800adde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ade6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800adee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	021b      	lsls	r3, r3, #8
 800adf6:	68fa      	ldr	r2, [r7, #12]
 800adf8:	4313      	orrs	r3, r2
 800adfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	f023 0320 	bic.w	r3, r3, #32
 800ae02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	011b      	lsls	r3, r3, #4
 800ae0a:	697a      	ldr	r2, [r7, #20]
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	4a22      	ldr	r2, [pc, #136]	@ (800ae9c <TIM_OC2_SetConfig+0xe4>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d003      	beq.n	800ae20 <TIM_OC2_SetConfig+0x68>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	4a21      	ldr	r2, [pc, #132]	@ (800aea0 <TIM_OC2_SetConfig+0xe8>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d10d      	bne.n	800ae3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	011b      	lsls	r3, r3, #4
 800ae2e:	697a      	ldr	r2, [r7, #20]
 800ae30:	4313      	orrs	r3, r2
 800ae32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	4a17      	ldr	r2, [pc, #92]	@ (800ae9c <TIM_OC2_SetConfig+0xe4>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d003      	beq.n	800ae4c <TIM_OC2_SetConfig+0x94>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	4a16      	ldr	r2, [pc, #88]	@ (800aea0 <TIM_OC2_SetConfig+0xe8>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d113      	bne.n	800ae74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ae52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ae5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	695b      	ldr	r3, [r3, #20]
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	693a      	ldr	r2, [r7, #16]
 800ae64:	4313      	orrs	r3, r2
 800ae66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	699b      	ldr	r3, [r3, #24]
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	693a      	ldr	r2, [r7, #16]
 800ae70:	4313      	orrs	r3, r2
 800ae72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	693a      	ldr	r2, [r7, #16]
 800ae78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	68fa      	ldr	r2, [r7, #12]
 800ae7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	685a      	ldr	r2, [r3, #4]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	697a      	ldr	r2, [r7, #20]
 800ae8c:	621a      	str	r2, [r3, #32]
}
 800ae8e:	bf00      	nop
 800ae90:	371c      	adds	r7, #28
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	40010000 	.word	0x40010000
 800aea0:	40010400 	.word	0x40010400

0800aea4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b087      	sub	sp, #28
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6a1b      	ldr	r3, [r3, #32]
 800aeb2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6a1b      	ldr	r3, [r3, #32]
 800aebe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	69db      	ldr	r3, [r3, #28]
 800aeca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f023 0303 	bic.w	r3, r3, #3
 800aeda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	68fa      	ldr	r2, [r7, #12]
 800aee2:	4313      	orrs	r3, r2
 800aee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800aeec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	021b      	lsls	r3, r3, #8
 800aef4:	697a      	ldr	r2, [r7, #20]
 800aef6:	4313      	orrs	r3, r2
 800aef8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	4a21      	ldr	r2, [pc, #132]	@ (800af84 <TIM_OC3_SetConfig+0xe0>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d003      	beq.n	800af0a <TIM_OC3_SetConfig+0x66>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	4a20      	ldr	r2, [pc, #128]	@ (800af88 <TIM_OC3_SetConfig+0xe4>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d10d      	bne.n	800af26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800af10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	68db      	ldr	r3, [r3, #12]
 800af16:	021b      	lsls	r3, r3, #8
 800af18:	697a      	ldr	r2, [r7, #20]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800af24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	4a16      	ldr	r2, [pc, #88]	@ (800af84 <TIM_OC3_SetConfig+0xe0>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d003      	beq.n	800af36 <TIM_OC3_SetConfig+0x92>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4a15      	ldr	r2, [pc, #84]	@ (800af88 <TIM_OC3_SetConfig+0xe4>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d113      	bne.n	800af5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800af3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800af44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	695b      	ldr	r3, [r3, #20]
 800af4a:	011b      	lsls	r3, r3, #4
 800af4c:	693a      	ldr	r2, [r7, #16]
 800af4e:	4313      	orrs	r3, r2
 800af50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	699b      	ldr	r3, [r3, #24]
 800af56:	011b      	lsls	r3, r3, #4
 800af58:	693a      	ldr	r2, [r7, #16]
 800af5a:	4313      	orrs	r3, r2
 800af5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	693a      	ldr	r2, [r7, #16]
 800af62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	68fa      	ldr	r2, [r7, #12]
 800af68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	685a      	ldr	r2, [r3, #4]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	697a      	ldr	r2, [r7, #20]
 800af76:	621a      	str	r2, [r3, #32]
}
 800af78:	bf00      	nop
 800af7a:	371c      	adds	r7, #28
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr
 800af84:	40010000 	.word	0x40010000
 800af88:	40010400 	.word	0x40010400

0800af8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b087      	sub	sp, #28
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6a1b      	ldr	r3, [r3, #32]
 800af9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a1b      	ldr	r3, [r3, #32]
 800afa6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	69db      	ldr	r3, [r3, #28]
 800afb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800afba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800afc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	021b      	lsls	r3, r3, #8
 800afca:	68fa      	ldr	r2, [r7, #12]
 800afcc:	4313      	orrs	r3, r2
 800afce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800afd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	031b      	lsls	r3, r3, #12
 800afde:	693a      	ldr	r2, [r7, #16]
 800afe0:	4313      	orrs	r3, r2
 800afe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	4a12      	ldr	r2, [pc, #72]	@ (800b030 <TIM_OC4_SetConfig+0xa4>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d003      	beq.n	800aff4 <TIM_OC4_SetConfig+0x68>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	4a11      	ldr	r2, [pc, #68]	@ (800b034 <TIM_OC4_SetConfig+0xa8>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d109      	bne.n	800b008 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800affa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	695b      	ldr	r3, [r3, #20]
 800b000:	019b      	lsls	r3, r3, #6
 800b002:	697a      	ldr	r2, [r7, #20]
 800b004:	4313      	orrs	r3, r2
 800b006:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	697a      	ldr	r2, [r7, #20]
 800b00c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	68fa      	ldr	r2, [r7, #12]
 800b012:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	685a      	ldr	r2, [r3, #4]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	693a      	ldr	r2, [r7, #16]
 800b020:	621a      	str	r2, [r3, #32]
}
 800b022:	bf00      	nop
 800b024:	371c      	adds	r7, #28
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop
 800b030:	40010000 	.word	0x40010000
 800b034:	40010400 	.word	0x40010400

0800b038 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b038:	b480      	push	{r7}
 800b03a:	b087      	sub	sp, #28
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6a1b      	ldr	r3, [r3, #32]
 800b048:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	6a1b      	ldr	r3, [r3, #32]
 800b04e:	f023 0201 	bic.w	r2, r3, #1
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	699b      	ldr	r3, [r3, #24]
 800b05a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b062:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	011b      	lsls	r3, r3, #4
 800b068:	693a      	ldr	r2, [r7, #16]
 800b06a:	4313      	orrs	r3, r2
 800b06c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	f023 030a 	bic.w	r3, r3, #10
 800b074:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b076:	697a      	ldr	r2, [r7, #20]
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	693a      	ldr	r2, [r7, #16]
 800b082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	697a      	ldr	r2, [r7, #20]
 800b088:	621a      	str	r2, [r3, #32]
}
 800b08a:	bf00      	nop
 800b08c:	371c      	adds	r7, #28
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr

0800b096 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b096:	b480      	push	{r7}
 800b098:	b087      	sub	sp, #28
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	60f8      	str	r0, [r7, #12]
 800b09e:	60b9      	str	r1, [r7, #8]
 800b0a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	6a1b      	ldr	r3, [r3, #32]
 800b0a6:	f023 0210 	bic.w	r2, r3, #16
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	699b      	ldr	r3, [r3, #24]
 800b0b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	6a1b      	ldr	r3, [r3, #32]
 800b0b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b0c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	031b      	lsls	r3, r3, #12
 800b0c6:	697a      	ldr	r2, [r7, #20]
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b0d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	011b      	lsls	r3, r3, #4
 800b0d8:	693a      	ldr	r2, [r7, #16]
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	697a      	ldr	r2, [r7, #20]
 800b0e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	693a      	ldr	r2, [r7, #16]
 800b0e8:	621a      	str	r2, [r3, #32]
}
 800b0ea:	bf00      	nop
 800b0ec:	371c      	adds	r7, #28
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr

0800b0f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b0f6:	b480      	push	{r7}
 800b0f8:	b085      	sub	sp, #20
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	689b      	ldr	r3, [r3, #8]
 800b104:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b10c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b10e:	683a      	ldr	r2, [r7, #0]
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	4313      	orrs	r3, r2
 800b114:	f043 0307 	orr.w	r3, r3, #7
 800b118:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	68fa      	ldr	r2, [r7, #12]
 800b11e:	609a      	str	r2, [r3, #8]
}
 800b120:	bf00      	nop
 800b122:	3714      	adds	r7, #20
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr

0800b12c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b087      	sub	sp, #28
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	607a      	str	r2, [r7, #4]
 800b138:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b146:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	021a      	lsls	r2, r3, #8
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	431a      	orrs	r2, r3
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	4313      	orrs	r3, r2
 800b154:	697a      	ldr	r2, [r7, #20]
 800b156:	4313      	orrs	r3, r2
 800b158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	697a      	ldr	r2, [r7, #20]
 800b15e:	609a      	str	r2, [r3, #8]
}
 800b160:	bf00      	nop
 800b162:	371c      	adds	r7, #28
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr

0800b16c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b087      	sub	sp, #28
 800b170:	af00      	add	r7, sp, #0
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	60b9      	str	r1, [r7, #8]
 800b176:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	f003 031f 	and.w	r3, r3, #31
 800b17e:	2201      	movs	r2, #1
 800b180:	fa02 f303 	lsl.w	r3, r2, r3
 800b184:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	6a1a      	ldr	r2, [r3, #32]
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	43db      	mvns	r3, r3
 800b18e:	401a      	ands	r2, r3
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	6a1a      	ldr	r2, [r3, #32]
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	f003 031f 	and.w	r3, r3, #31
 800b19e:	6879      	ldr	r1, [r7, #4]
 800b1a0:	fa01 f303 	lsl.w	r3, r1, r3
 800b1a4:	431a      	orrs	r2, r3
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	621a      	str	r2, [r3, #32]
}
 800b1aa:	bf00      	nop
 800b1ac:	371c      	adds	r7, #28
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr
	...

0800b1b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b085      	sub	sp, #20
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d101      	bne.n	800b1d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b1cc:	2302      	movs	r3, #2
 800b1ce:	e05a      	b.n	800b286 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2202      	movs	r2, #2
 800b1dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	68fa      	ldr	r2, [r7, #12]
 800b1fe:	4313      	orrs	r3, r2
 800b200:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	68fa      	ldr	r2, [r7, #12]
 800b208:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4a21      	ldr	r2, [pc, #132]	@ (800b294 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d022      	beq.n	800b25a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b21c:	d01d      	beq.n	800b25a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4a1d      	ldr	r2, [pc, #116]	@ (800b298 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d018      	beq.n	800b25a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4a1b      	ldr	r2, [pc, #108]	@ (800b29c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d013      	beq.n	800b25a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4a1a      	ldr	r2, [pc, #104]	@ (800b2a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d00e      	beq.n	800b25a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a18      	ldr	r2, [pc, #96]	@ (800b2a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d009      	beq.n	800b25a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a17      	ldr	r2, [pc, #92]	@ (800b2a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d004      	beq.n	800b25a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4a15      	ldr	r2, [pc, #84]	@ (800b2ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d10c      	bne.n	800b274 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b260:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	68ba      	ldr	r2, [r7, #8]
 800b268:	4313      	orrs	r3, r2
 800b26a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	68ba      	ldr	r2, [r7, #8]
 800b272:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2201      	movs	r2, #1
 800b278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b284:	2300      	movs	r3, #0
}
 800b286:	4618      	mov	r0, r3
 800b288:	3714      	adds	r7, #20
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr
 800b292:	bf00      	nop
 800b294:	40010000 	.word	0x40010000
 800b298:	40000400 	.word	0x40000400
 800b29c:	40000800 	.word	0x40000800
 800b2a0:	40000c00 	.word	0x40000c00
 800b2a4:	40010400 	.word	0x40010400
 800b2a8:	40014000 	.word	0x40014000
 800b2ac:	40001800 	.word	0x40001800

0800b2b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b085      	sub	sp, #20
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d101      	bne.n	800b2cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b2c8:	2302      	movs	r3, #2
 800b2ca:	e03d      	b.n	800b348 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	68db      	ldr	r3, [r3, #12]
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4313      	orrs	r3, r2
 800b30a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	691b      	ldr	r3, [r3, #16]
 800b316:	4313      	orrs	r3, r2
 800b318:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	695b      	ldr	r3, [r3, #20]
 800b324:	4313      	orrs	r3, r2
 800b326:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	69db      	ldr	r3, [r3, #28]
 800b332:	4313      	orrs	r3, r2
 800b334:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	68fa      	ldr	r2, [r7, #12]
 800b33c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3714      	adds	r7, #20
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr

0800b354 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b354:	b480      	push	{r7}
 800b356:	b083      	sub	sp, #12
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b35c:	bf00      	nop
 800b35e:	370c      	adds	r7, #12
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b368:	b480      	push	{r7}
 800b36a:	b083      	sub	sp, #12
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b370:	bf00      	nop
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b082      	sub	sp, #8
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d101      	bne.n	800b38e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b38a:	2301      	movs	r3, #1
 800b38c:	e03f      	b.n	800b40e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b394:	b2db      	uxtb	r3, r3
 800b396:	2b00      	cmp	r3, #0
 800b398:	d106      	bne.n	800b3a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2200      	movs	r2, #0
 800b39e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f7fb fa88 	bl	80068b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2224      	movs	r2, #36	@ 0x24
 800b3ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	68da      	ldr	r2, [r3, #12]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b3be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f000 fc7b 	bl	800bcbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	691a      	ldr	r2, [r3, #16]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b3d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	695a      	ldr	r2, [r3, #20]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b3e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	68da      	ldr	r2, [r3, #12]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b3f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2220      	movs	r2, #32
 800b400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2220      	movs	r2, #32
 800b408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800b40c:	2300      	movs	r3, #0
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3708      	adds	r7, #8
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}

0800b416 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b416:	b580      	push	{r7, lr}
 800b418:	b08a      	sub	sp, #40	@ 0x28
 800b41a:	af02      	add	r7, sp, #8
 800b41c:	60f8      	str	r0, [r7, #12]
 800b41e:	60b9      	str	r1, [r7, #8]
 800b420:	603b      	str	r3, [r7, #0]
 800b422:	4613      	mov	r3, r2
 800b424:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b426:	2300      	movs	r3, #0
 800b428:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b430:	b2db      	uxtb	r3, r3
 800b432:	2b20      	cmp	r3, #32
 800b434:	d17c      	bne.n	800b530 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d002      	beq.n	800b442 <HAL_UART_Transmit+0x2c>
 800b43c:	88fb      	ldrh	r3, [r7, #6]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d101      	bne.n	800b446 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b442:	2301      	movs	r3, #1
 800b444:	e075      	b.n	800b532 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	d101      	bne.n	800b454 <HAL_UART_Transmit+0x3e>
 800b450:	2302      	movs	r3, #2
 800b452:	e06e      	b.n	800b532 <HAL_UART_Transmit+0x11c>
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2201      	movs	r2, #1
 800b458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2200      	movs	r2, #0
 800b460:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2221      	movs	r2, #33	@ 0x21
 800b466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b46a:	f7fb ffc7 	bl	80073fc <HAL_GetTick>
 800b46e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	88fa      	ldrh	r2, [r7, #6]
 800b474:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	88fa      	ldrh	r2, [r7, #6]
 800b47a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	689b      	ldr	r3, [r3, #8]
 800b480:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b484:	d108      	bne.n	800b498 <HAL_UART_Transmit+0x82>
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	691b      	ldr	r3, [r3, #16]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d104      	bne.n	800b498 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b48e:	2300      	movs	r3, #0
 800b490:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	61bb      	str	r3, [r7, #24]
 800b496:	e003      	b.n	800b4a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b49c:	2300      	movs	r3, #0
 800b49e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800b4a8:	e02a      	b.n	800b500 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	9300      	str	r3, [sp, #0]
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	2180      	movs	r1, #128	@ 0x80
 800b4b4:	68f8      	ldr	r0, [r7, #12]
 800b4b6:	f000 fa3d 	bl	800b934 <UART_WaitOnFlagUntilTimeout>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d001      	beq.n	800b4c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b4c0:	2303      	movs	r3, #3
 800b4c2:	e036      	b.n	800b532 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b4c4:	69fb      	ldr	r3, [r7, #28]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d10b      	bne.n	800b4e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b4ca:	69bb      	ldr	r3, [r7, #24]
 800b4cc:	881b      	ldrh	r3, [r3, #0]
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b4d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b4da:	69bb      	ldr	r3, [r7, #24]
 800b4dc:	3302      	adds	r3, #2
 800b4de:	61bb      	str	r3, [r7, #24]
 800b4e0:	e007      	b.n	800b4f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b4e2:	69fb      	ldr	r3, [r7, #28]
 800b4e4:	781a      	ldrb	r2, [r3, #0]
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	3b01      	subs	r3, #1
 800b4fa:	b29a      	uxth	r2, r3
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b504:	b29b      	uxth	r3, r3
 800b506:	2b00      	cmp	r3, #0
 800b508:	d1cf      	bne.n	800b4aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	9300      	str	r3, [sp, #0]
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	2200      	movs	r2, #0
 800b512:	2140      	movs	r1, #64	@ 0x40
 800b514:	68f8      	ldr	r0, [r7, #12]
 800b516:	f000 fa0d 	bl	800b934 <UART_WaitOnFlagUntilTimeout>
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d001      	beq.n	800b524 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b520:	2303      	movs	r3, #3
 800b522:	e006      	b.n	800b532 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2220      	movs	r2, #32
 800b528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800b52c:	2300      	movs	r3, #0
 800b52e:	e000      	b.n	800b532 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b530:	2302      	movs	r3, #2
  }
}
 800b532:	4618      	mov	r0, r3
 800b534:	3720      	adds	r7, #32
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}

0800b53a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b53a:	b580      	push	{r7, lr}
 800b53c:	b084      	sub	sp, #16
 800b53e:	af00      	add	r7, sp, #0
 800b540:	60f8      	str	r0, [r7, #12]
 800b542:	60b9      	str	r1, [r7, #8]
 800b544:	4613      	mov	r3, r2
 800b546:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	2b20      	cmp	r3, #32
 800b552:	d11d      	bne.n	800b590 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d002      	beq.n	800b560 <HAL_UART_Receive_IT+0x26>
 800b55a:	88fb      	ldrh	r3, [r7, #6]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d101      	bne.n	800b564 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b560:	2301      	movs	r3, #1
 800b562:	e016      	b.n	800b592 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b56a:	2b01      	cmp	r3, #1
 800b56c:	d101      	bne.n	800b572 <HAL_UART_Receive_IT+0x38>
 800b56e:	2302      	movs	r3, #2
 800b570:	e00f      	b.n	800b592 <HAL_UART_Receive_IT+0x58>
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2201      	movs	r2, #1
 800b576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2200      	movs	r2, #0
 800b57e:	631a      	str	r2, [r3, #48]	@ 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800b580:	88fb      	ldrh	r3, [r7, #6]
 800b582:	461a      	mov	r2, r3
 800b584:	68b9      	ldr	r1, [r7, #8]
 800b586:	68f8      	ldr	r0, [r7, #12]
 800b588:	f000 fa1e 	bl	800b9c8 <UART_Start_Receive_IT>
 800b58c:	4603      	mov	r3, r0
 800b58e:	e000      	b.n	800b592 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b590:	2302      	movs	r3, #2
  }
}
 800b592:	4618      	mov	r0, r3
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
	...

0800b59c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b08a      	sub	sp, #40	@ 0x28
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	695b      	ldr	r3, [r3, #20]
 800b5ba:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5c6:	f003 030f 	and.w	r3, r3, #15
 800b5ca:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800b5cc:	69bb      	ldr	r3, [r7, #24]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d10d      	bne.n	800b5ee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5d4:	f003 0320 	and.w	r3, r3, #32
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d008      	beq.n	800b5ee <HAL_UART_IRQHandler+0x52>
 800b5dc:	6a3b      	ldr	r3, [r7, #32]
 800b5de:	f003 0320 	and.w	r3, r3, #32
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d003      	beq.n	800b5ee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 fad1 	bl	800bb8e <UART_Receive_IT>
      return;
 800b5ec:	e17c      	b.n	800b8e8 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b5ee:	69bb      	ldr	r3, [r7, #24]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	f000 80b1 	beq.w	800b758 <HAL_UART_IRQHandler+0x1bc>
 800b5f6:	69fb      	ldr	r3, [r7, #28]
 800b5f8:	f003 0301 	and.w	r3, r3, #1
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d105      	bne.n	800b60c <HAL_UART_IRQHandler+0x70>
 800b600:	6a3b      	ldr	r3, [r7, #32]
 800b602:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b606:	2b00      	cmp	r3, #0
 800b608:	f000 80a6 	beq.w	800b758 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b60e:	f003 0301 	and.w	r3, r3, #1
 800b612:	2b00      	cmp	r3, #0
 800b614:	d00a      	beq.n	800b62c <HAL_UART_IRQHandler+0x90>
 800b616:	6a3b      	ldr	r3, [r7, #32]
 800b618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d005      	beq.n	800b62c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b624:	f043 0201 	orr.w	r2, r3, #1
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b62e:	f003 0304 	and.w	r3, r3, #4
 800b632:	2b00      	cmp	r3, #0
 800b634:	d00a      	beq.n	800b64c <HAL_UART_IRQHandler+0xb0>
 800b636:	69fb      	ldr	r3, [r7, #28]
 800b638:	f003 0301 	and.w	r3, r3, #1
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d005      	beq.n	800b64c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b644:	f043 0202 	orr.w	r2, r3, #2
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64e:	f003 0302 	and.w	r3, r3, #2
 800b652:	2b00      	cmp	r3, #0
 800b654:	d00a      	beq.n	800b66c <HAL_UART_IRQHandler+0xd0>
 800b656:	69fb      	ldr	r3, [r7, #28]
 800b658:	f003 0301 	and.w	r3, r3, #1
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d005      	beq.n	800b66c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b664:	f043 0204 	orr.w	r2, r3, #4
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800b66c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b66e:	f003 0308 	and.w	r3, r3, #8
 800b672:	2b00      	cmp	r3, #0
 800b674:	d00f      	beq.n	800b696 <HAL_UART_IRQHandler+0xfa>
 800b676:	6a3b      	ldr	r3, [r7, #32]
 800b678:	f003 0320 	and.w	r3, r3, #32
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d104      	bne.n	800b68a <HAL_UART_IRQHandler+0xee>
 800b680:	69fb      	ldr	r3, [r7, #28]
 800b682:	f003 0301 	and.w	r3, r3, #1
 800b686:	2b00      	cmp	r3, #0
 800b688:	d005      	beq.n	800b696 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b68e:	f043 0208 	orr.w	r2, r3, #8
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	f000 811f 	beq.w	800b8de <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a2:	f003 0320 	and.w	r3, r3, #32
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d007      	beq.n	800b6ba <HAL_UART_IRQHandler+0x11e>
 800b6aa:	6a3b      	ldr	r3, [r7, #32]
 800b6ac:	f003 0320 	and.w	r3, r3, #32
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d002      	beq.n	800b6ba <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 fa6a 	bl	800bb8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	695b      	ldr	r3, [r3, #20]
 800b6c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6c4:	2b40      	cmp	r3, #64	@ 0x40
 800b6c6:	bf0c      	ite	eq
 800b6c8:	2301      	moveq	r3, #1
 800b6ca:	2300      	movne	r3, #0
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6d4:	f003 0308 	and.w	r3, r3, #8
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d102      	bne.n	800b6e2 <HAL_UART_IRQHandler+0x146>
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d031      	beq.n	800b746 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 f9aa 	bl	800ba3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	695b      	ldr	r3, [r3, #20]
 800b6ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6f2:	2b40      	cmp	r3, #64	@ 0x40
 800b6f4:	d123      	bne.n	800b73e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	695a      	ldr	r2, [r3, #20]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b704:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d013      	beq.n	800b736 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b712:	4a77      	ldr	r2, [pc, #476]	@ (800b8f0 <HAL_UART_IRQHandler+0x354>)
 800b714:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7fd fa87 	bl	8008c2e <HAL_DMA_Abort_IT>
 800b720:	4603      	mov	r3, r0
 800b722:	2b00      	cmp	r3, #0
 800b724:	d016      	beq.n	800b754 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b72a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b72c:	687a      	ldr	r2, [r7, #4]
 800b72e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b730:	4610      	mov	r0, r2
 800b732:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b734:	e00e      	b.n	800b754 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 f8e6 	bl	800b908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b73c:	e00a      	b.n	800b754 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 f8e2 	bl	800b908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b744:	e006      	b.n	800b754 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 f8de 	bl	800b908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2200      	movs	r2, #0
 800b750:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800b752:	e0c4      	b.n	800b8de <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b754:	bf00      	nop
    return;
 800b756:	e0c2      	b.n	800b8de <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	f040 80a2 	bne.w	800b8a6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800b762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b764:	f003 0310 	and.w	r3, r3, #16
 800b768:	2b00      	cmp	r3, #0
 800b76a:	f000 809c 	beq.w	800b8a6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800b76e:	6a3b      	ldr	r3, [r7, #32]
 800b770:	f003 0310 	and.w	r3, r3, #16
 800b774:	2b00      	cmp	r3, #0
 800b776:	f000 8096 	beq.w	800b8a6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b77a:	2300      	movs	r3, #0
 800b77c:	60fb      	str	r3, [r7, #12]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	60fb      	str	r3, [r7, #12]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	60fb      	str	r3, [r7, #12]
 800b78e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	695b      	ldr	r3, [r3, #20]
 800b796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b79a:	2b40      	cmp	r3, #64	@ 0x40
 800b79c:	d14f      	bne.n	800b83e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800b7a8:	8a3b      	ldrh	r3, [r7, #16]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	f000 8099 	beq.w	800b8e2 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b7b4:	8a3a      	ldrh	r2, [r7, #16]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	f080 8093 	bcs.w	800b8e2 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	8a3a      	ldrh	r2, [r7, #16]
 800b7c0:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7c6:	69db      	ldr	r3, [r3, #28]
 800b7c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7cc:	d02b      	beq.n	800b826 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	68da      	ldr	r2, [r3, #12]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b7dc:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	695a      	ldr	r2, [r3, #20]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f022 0201 	bic.w	r2, r2, #1
 800b7ec:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	695a      	ldr	r2, [r3, #20]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b7fc:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2220      	movs	r2, #32
 800b802:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2200      	movs	r2, #0
 800b80a:	631a      	str	r2, [r3, #48]	@ 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	68da      	ldr	r2, [r3, #12]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f022 0210 	bic.w	r2, r2, #16
 800b81a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b820:	4618      	mov	r0, r3
 800b822:	f7fd f994 	bl	8008b4e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b82e:	b29b      	uxth	r3, r3
 800b830:	1ad3      	subs	r3, r2, r3
 800b832:	b29b      	uxth	r3, r3
 800b834:	4619      	mov	r1, r3
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 f870 	bl	800b91c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b83c:	e051      	b.n	800b8e2 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b846:	b29b      	uxth	r3, r3
 800b848:	1ad3      	subs	r3, r2, r3
 800b84a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b850:	b29b      	uxth	r3, r3
 800b852:	2b00      	cmp	r3, #0
 800b854:	d047      	beq.n	800b8e6 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800b856:	8a7b      	ldrh	r3, [r7, #18]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d044      	beq.n	800b8e6 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	68da      	ldr	r2, [r3, #12]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 800b86a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	695a      	ldr	r2, [r3, #20]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f022 0201 	bic.w	r2, r2, #1
 800b87a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2220      	movs	r2, #32
 800b880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2200      	movs	r2, #0
 800b888:	631a      	str	r2, [r3, #48]	@ 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	68da      	ldr	r2, [r3, #12]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f022 0210 	bic.w	r2, r2, #16
 800b898:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b89a:	8a7b      	ldrh	r3, [r7, #18]
 800b89c:	4619      	mov	r1, r3
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 f83c 	bl	800b91c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b8a4:	e01f      	b.n	800b8e6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d008      	beq.n	800b8c2 <HAL_UART_IRQHandler+0x326>
 800b8b0:	6a3b      	ldr	r3, [r7, #32]
 800b8b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d003      	beq.n	800b8c2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 f8ff 	bl	800babe <UART_Transmit_IT>
    return;
 800b8c0:	e012      	b.n	800b8e8 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d00d      	beq.n	800b8e8 <HAL_UART_IRQHandler+0x34c>
 800b8cc:	6a3b      	ldr	r3, [r7, #32]
 800b8ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d008      	beq.n	800b8e8 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f000 f941 	bl	800bb5e <UART_EndTransmit_IT>
    return;
 800b8dc:	e004      	b.n	800b8e8 <HAL_UART_IRQHandler+0x34c>
    return;
 800b8de:	bf00      	nop
 800b8e0:	e002      	b.n	800b8e8 <HAL_UART_IRQHandler+0x34c>
      return;
 800b8e2:	bf00      	nop
 800b8e4:	e000      	b.n	800b8e8 <HAL_UART_IRQHandler+0x34c>
      return;
 800b8e6:	bf00      	nop
  }
}
 800b8e8:	3728      	adds	r7, #40	@ 0x28
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	0800ba97 	.word	0x0800ba97

0800b8f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b8fc:	bf00      	nop
 800b8fe:	370c      	adds	r7, #12
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr

0800b908 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b908:	b480      	push	{r7}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b910:	bf00      	nop
 800b912:	370c      	adds	r7, #12
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr

0800b91c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b083      	sub	sp, #12
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	460b      	mov	r3, r1
 800b926:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b928:	bf00      	nop
 800b92a:	370c      	adds	r7, #12
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr

0800b934 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	60b9      	str	r1, [r7, #8]
 800b93e:	603b      	str	r3, [r7, #0]
 800b940:	4613      	mov	r3, r2
 800b942:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b944:	e02c      	b.n	800b9a0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b946:	69bb      	ldr	r3, [r7, #24]
 800b948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b94c:	d028      	beq.n	800b9a0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b94e:	69bb      	ldr	r3, [r7, #24]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d007      	beq.n	800b964 <UART_WaitOnFlagUntilTimeout+0x30>
 800b954:	f7fb fd52 	bl	80073fc <HAL_GetTick>
 800b958:	4602      	mov	r2, r0
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	1ad3      	subs	r3, r2, r3
 800b95e:	69ba      	ldr	r2, [r7, #24]
 800b960:	429a      	cmp	r2, r3
 800b962:	d21d      	bcs.n	800b9a0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	68da      	ldr	r2, [r3, #12]
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800b972:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	695a      	ldr	r2, [r3, #20]
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f022 0201 	bic.w	r2, r2, #1
 800b982:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2220      	movs	r2, #32
 800b988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2220      	movs	r2, #32
 800b990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2200      	movs	r2, #0
 800b998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800b99c:	2303      	movs	r3, #3
 800b99e:	e00f      	b.n	800b9c0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	4013      	ands	r3, r2
 800b9aa:	68ba      	ldr	r2, [r7, #8]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	bf0c      	ite	eq
 800b9b0:	2301      	moveq	r3, #1
 800b9b2:	2300      	movne	r3, #0
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	79fb      	ldrb	r3, [r7, #7]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d0c3      	beq.n	800b946 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b9be:	2300      	movs	r3, #0
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3710      	adds	r7, #16
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b085      	sub	sp, #20
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	60f8      	str	r0, [r7, #12]
 800b9d0:	60b9      	str	r1, [r7, #8]
 800b9d2:	4613      	mov	r3, r2
 800b9d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	68ba      	ldr	r2, [r7, #8]
 800b9da:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	88fa      	ldrh	r2, [r7, #6]
 800b9e0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	88fa      	ldrh	r2, [r7, #6]
 800b9e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2222      	movs	r2, #34	@ 0x22
 800b9f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	68da      	ldr	r2, [r3, #12]
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ba0c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	695a      	ldr	r2, [r3, #20]
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f042 0201 	orr.w	r2, r2, #1
 800ba1c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	68da      	ldr	r2, [r3, #12]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f042 0220 	orr.w	r2, r2, #32
 800ba2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ba2e:	2300      	movs	r3, #0
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3714      	adds	r7, #20
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr

0800ba3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b083      	sub	sp, #12
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	68da      	ldr	r2, [r3, #12]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 800ba52:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	695a      	ldr	r2, [r3, #20]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f022 0201 	bic.w	r2, r2, #1
 800ba62:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	d107      	bne.n	800ba7c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	68da      	ldr	r2, [r3, #12]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f022 0210 	bic.w	r2, r2, #16
 800ba7a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2220      	movs	r2, #32
 800ba80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2200      	movs	r2, #0
 800ba88:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ba8a:	bf00      	nop
 800ba8c:	370c      	adds	r7, #12
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba94:	4770      	bx	lr

0800ba96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b084      	sub	sp, #16
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baa2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2200      	movs	r2, #0
 800baa8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2200      	movs	r2, #0
 800baae:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bab0:	68f8      	ldr	r0, [r7, #12]
 800bab2:	f7ff ff29 	bl	800b908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bab6:	bf00      	nop
 800bab8:	3710      	adds	r7, #16
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800babe:	b480      	push	{r7}
 800bac0:	b085      	sub	sp, #20
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	2b21      	cmp	r3, #33	@ 0x21
 800bad0:	d13e      	bne.n	800bb50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	689b      	ldr	r3, [r3, #8]
 800bad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bada:	d114      	bne.n	800bb06 <UART_Transmit_IT+0x48>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	691b      	ldr	r3, [r3, #16]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d110      	bne.n	800bb06 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6a1b      	ldr	r3, [r3, #32]
 800bae8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	881b      	ldrh	r3, [r3, #0]
 800baee:	461a      	mov	r2, r3
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800baf8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6a1b      	ldr	r3, [r3, #32]
 800bafe:	1c9a      	adds	r2, r3, #2
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	621a      	str	r2, [r3, #32]
 800bb04:	e008      	b.n	800bb18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6a1b      	ldr	r3, [r3, #32]
 800bb0a:	1c59      	adds	r1, r3, #1
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	6211      	str	r1, [r2, #32]
 800bb10:	781a      	ldrb	r2, [r3, #0]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	3b01      	subs	r3, #1
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	4619      	mov	r1, r3
 800bb26:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d10f      	bne.n	800bb4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	68da      	ldr	r2, [r3, #12]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bb3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	68da      	ldr	r2, [r3, #12]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bb4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	e000      	b.n	800bb52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bb50:	2302      	movs	r3, #2
  }
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3714      	adds	r7, #20
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr

0800bb5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b082      	sub	sp, #8
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	68da      	ldr	r2, [r3, #12]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bb74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2220      	movs	r2, #32
 800bb7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f7ff feb8 	bl	800b8f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bb84:	2300      	movs	r3, #0
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3708      	adds	r7, #8
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}

0800bb8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bb8e:	b580      	push	{r7, lr}
 800bb90:	b084      	sub	sp, #16
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	2b22      	cmp	r3, #34	@ 0x22
 800bba0:	f040 8087 	bne.w	800bcb2 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	689b      	ldr	r3, [r3, #8]
 800bba8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bbac:	d117      	bne.n	800bbde <UART_Receive_IT+0x50>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	691b      	ldr	r3, [r3, #16]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d113      	bne.n	800bbde <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbbe:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbcc:	b29a      	uxth	r2, r3
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbd6:	1c9a      	adds	r2, r3, #2
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	629a      	str	r2, [r3, #40]	@ 0x28
 800bbdc:	e026      	b.n	800bc2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbe2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	689b      	ldr	r3, [r3, #8]
 800bbec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bbf0:	d007      	beq.n	800bc02 <UART_Receive_IT+0x74>
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	689b      	ldr	r3, [r3, #8]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d10a      	bne.n	800bc10 <UART_Receive_IT+0x82>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	691b      	ldr	r3, [r3, #16]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d106      	bne.n	800bc10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	b2da      	uxtb	r2, r3
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	701a      	strb	r2, [r3, #0]
 800bc0e:	e008      	b.n	800bc22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	685b      	ldr	r3, [r3, #4]
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc1c:	b2da      	uxtb	r2, r3
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc26:	1c5a      	adds	r2, r3, #1
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	3b01      	subs	r3, #1
 800bc34:	b29b      	uxth	r3, r3
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	4619      	mov	r1, r3
 800bc3a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d136      	bne.n	800bcae <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	68da      	ldr	r2, [r3, #12]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f022 0220 	bic.w	r2, r2, #32
 800bc4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	68da      	ldr	r2, [r3, #12]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bc5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	695a      	ldr	r2, [r3, #20]
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f022 0201 	bic.w	r2, r2, #1
 800bc6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2220      	movs	r2, #32
 800bc74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d10e      	bne.n	800bc9e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	68da      	ldr	r2, [r3, #12]
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f022 0210 	bic.w	r2, r2, #16
 800bc8e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bc94:	4619      	mov	r1, r3
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f7ff fe40 	bl	800b91c <HAL_UARTEx_RxEventCallback>
 800bc9c:	e002      	b.n	800bca4 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f7fa fe6c 	bl	800697c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2200      	movs	r2, #0
 800bca8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_OK;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	e002      	b.n	800bcb4 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	e000      	b.n	800bcb4 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800bcb2:	2302      	movs	r3, #2
  }
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3710      	adds	r7, #16
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bcbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bcc0:	b0c0      	sub	sp, #256	@ 0x100
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bcc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	691b      	ldr	r3, [r3, #16]
 800bcd0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800bcd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcd8:	68d9      	ldr	r1, [r3, #12]
 800bcda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcde:	681a      	ldr	r2, [r3, #0]
 800bce0:	ea40 0301 	orr.w	r3, r0, r1
 800bce4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcea:	689a      	ldr	r2, [r3, #8]
 800bcec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcf0:	691b      	ldr	r3, [r3, #16]
 800bcf2:	431a      	orrs	r2, r3
 800bcf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcf8:	695b      	ldr	r3, [r3, #20]
 800bcfa:	431a      	orrs	r2, r3
 800bcfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd00:	69db      	ldr	r3, [r3, #28]
 800bd02:	4313      	orrs	r3, r2
 800bd04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bd08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	68db      	ldr	r3, [r3, #12]
 800bd10:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800bd14:	f021 010c 	bic.w	r1, r1, #12
 800bd18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bd22:	430b      	orrs	r3, r1
 800bd24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bd26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	695b      	ldr	r3, [r3, #20]
 800bd2e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800bd32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd36:	6999      	ldr	r1, [r3, #24]
 800bd38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd3c:	681a      	ldr	r2, [r3, #0]
 800bd3e:	ea40 0301 	orr.w	r3, r0, r1
 800bd42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bd44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	4b8f      	ldr	r3, [pc, #572]	@ (800bf88 <UART_SetConfig+0x2cc>)
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d005      	beq.n	800bd5c <UART_SetConfig+0xa0>
 800bd50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd54:	681a      	ldr	r2, [r3, #0]
 800bd56:	4b8d      	ldr	r3, [pc, #564]	@ (800bf8c <UART_SetConfig+0x2d0>)
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d104      	bne.n	800bd66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bd5c:	f7fd faa6 	bl	80092ac <HAL_RCC_GetPCLK2Freq>
 800bd60:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800bd64:	e003      	b.n	800bd6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bd66:	f7fd fa8d 	bl	8009284 <HAL_RCC_GetPCLK1Freq>
 800bd6a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd72:	69db      	ldr	r3, [r3, #28]
 800bd74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bd78:	f040 810c 	bne.w	800bf94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bd7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bd80:	2200      	movs	r2, #0
 800bd82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bd86:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800bd8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800bd8e:	4622      	mov	r2, r4
 800bd90:	462b      	mov	r3, r5
 800bd92:	1891      	adds	r1, r2, r2
 800bd94:	65b9      	str	r1, [r7, #88]	@ 0x58
 800bd96:	415b      	adcs	r3, r3
 800bd98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bd9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800bd9e:	4621      	mov	r1, r4
 800bda0:	eb12 0801 	adds.w	r8, r2, r1
 800bda4:	4629      	mov	r1, r5
 800bda6:	eb43 0901 	adc.w	r9, r3, r1
 800bdaa:	f04f 0200 	mov.w	r2, #0
 800bdae:	f04f 0300 	mov.w	r3, #0
 800bdb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bdb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bdba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bdbe:	4690      	mov	r8, r2
 800bdc0:	4699      	mov	r9, r3
 800bdc2:	4623      	mov	r3, r4
 800bdc4:	eb18 0303 	adds.w	r3, r8, r3
 800bdc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bdcc:	462b      	mov	r3, r5
 800bdce:	eb49 0303 	adc.w	r3, r9, r3
 800bdd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bdd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	2200      	movs	r2, #0
 800bdde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bde2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800bde6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bdea:	460b      	mov	r3, r1
 800bdec:	18db      	adds	r3, r3, r3
 800bdee:	653b      	str	r3, [r7, #80]	@ 0x50
 800bdf0:	4613      	mov	r3, r2
 800bdf2:	eb42 0303 	adc.w	r3, r2, r3
 800bdf6:	657b      	str	r3, [r7, #84]	@ 0x54
 800bdf8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800bdfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800be00:	f7f4 ff72 	bl	8000ce8 <__aeabi_uldivmod>
 800be04:	4602      	mov	r2, r0
 800be06:	460b      	mov	r3, r1
 800be08:	4b61      	ldr	r3, [pc, #388]	@ (800bf90 <UART_SetConfig+0x2d4>)
 800be0a:	fba3 2302 	umull	r2, r3, r3, r2
 800be0e:	095b      	lsrs	r3, r3, #5
 800be10:	011c      	lsls	r4, r3, #4
 800be12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800be16:	2200      	movs	r2, #0
 800be18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800be1c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800be20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800be24:	4642      	mov	r2, r8
 800be26:	464b      	mov	r3, r9
 800be28:	1891      	adds	r1, r2, r2
 800be2a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800be2c:	415b      	adcs	r3, r3
 800be2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800be34:	4641      	mov	r1, r8
 800be36:	eb12 0a01 	adds.w	sl, r2, r1
 800be3a:	4649      	mov	r1, r9
 800be3c:	eb43 0b01 	adc.w	fp, r3, r1
 800be40:	f04f 0200 	mov.w	r2, #0
 800be44:	f04f 0300 	mov.w	r3, #0
 800be48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800be4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800be50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800be54:	4692      	mov	sl, r2
 800be56:	469b      	mov	fp, r3
 800be58:	4643      	mov	r3, r8
 800be5a:	eb1a 0303 	adds.w	r3, sl, r3
 800be5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800be62:	464b      	mov	r3, r9
 800be64:	eb4b 0303 	adc.w	r3, fp, r3
 800be68:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800be6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800be78:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800be7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800be80:	460b      	mov	r3, r1
 800be82:	18db      	adds	r3, r3, r3
 800be84:	643b      	str	r3, [r7, #64]	@ 0x40
 800be86:	4613      	mov	r3, r2
 800be88:	eb42 0303 	adc.w	r3, r2, r3
 800be8c:	647b      	str	r3, [r7, #68]	@ 0x44
 800be8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800be92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800be96:	f7f4 ff27 	bl	8000ce8 <__aeabi_uldivmod>
 800be9a:	4602      	mov	r2, r0
 800be9c:	460b      	mov	r3, r1
 800be9e:	4611      	mov	r1, r2
 800bea0:	4b3b      	ldr	r3, [pc, #236]	@ (800bf90 <UART_SetConfig+0x2d4>)
 800bea2:	fba3 2301 	umull	r2, r3, r3, r1
 800bea6:	095b      	lsrs	r3, r3, #5
 800bea8:	2264      	movs	r2, #100	@ 0x64
 800beaa:	fb02 f303 	mul.w	r3, r2, r3
 800beae:	1acb      	subs	r3, r1, r3
 800beb0:	00db      	lsls	r3, r3, #3
 800beb2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800beb6:	4b36      	ldr	r3, [pc, #216]	@ (800bf90 <UART_SetConfig+0x2d4>)
 800beb8:	fba3 2302 	umull	r2, r3, r3, r2
 800bebc:	095b      	lsrs	r3, r3, #5
 800bebe:	005b      	lsls	r3, r3, #1
 800bec0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800bec4:	441c      	add	r4, r3
 800bec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800beca:	2200      	movs	r2, #0
 800becc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bed0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800bed4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800bed8:	4642      	mov	r2, r8
 800beda:	464b      	mov	r3, r9
 800bedc:	1891      	adds	r1, r2, r2
 800bede:	63b9      	str	r1, [r7, #56]	@ 0x38
 800bee0:	415b      	adcs	r3, r3
 800bee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bee4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bee8:	4641      	mov	r1, r8
 800beea:	1851      	adds	r1, r2, r1
 800beec:	6339      	str	r1, [r7, #48]	@ 0x30
 800beee:	4649      	mov	r1, r9
 800bef0:	414b      	adcs	r3, r1
 800bef2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bef4:	f04f 0200 	mov.w	r2, #0
 800bef8:	f04f 0300 	mov.w	r3, #0
 800befc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800bf00:	4659      	mov	r1, fp
 800bf02:	00cb      	lsls	r3, r1, #3
 800bf04:	4651      	mov	r1, sl
 800bf06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bf0a:	4651      	mov	r1, sl
 800bf0c:	00ca      	lsls	r2, r1, #3
 800bf0e:	4610      	mov	r0, r2
 800bf10:	4619      	mov	r1, r3
 800bf12:	4603      	mov	r3, r0
 800bf14:	4642      	mov	r2, r8
 800bf16:	189b      	adds	r3, r3, r2
 800bf18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bf1c:	464b      	mov	r3, r9
 800bf1e:	460a      	mov	r2, r1
 800bf20:	eb42 0303 	adc.w	r3, r2, r3
 800bf24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bf28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bf34:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800bf38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	18db      	adds	r3, r3, r3
 800bf40:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf42:	4613      	mov	r3, r2
 800bf44:	eb42 0303 	adc.w	r3, r2, r3
 800bf48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800bf4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800bf52:	f7f4 fec9 	bl	8000ce8 <__aeabi_uldivmod>
 800bf56:	4602      	mov	r2, r0
 800bf58:	460b      	mov	r3, r1
 800bf5a:	4b0d      	ldr	r3, [pc, #52]	@ (800bf90 <UART_SetConfig+0x2d4>)
 800bf5c:	fba3 1302 	umull	r1, r3, r3, r2
 800bf60:	095b      	lsrs	r3, r3, #5
 800bf62:	2164      	movs	r1, #100	@ 0x64
 800bf64:	fb01 f303 	mul.w	r3, r1, r3
 800bf68:	1ad3      	subs	r3, r2, r3
 800bf6a:	00db      	lsls	r3, r3, #3
 800bf6c:	3332      	adds	r3, #50	@ 0x32
 800bf6e:	4a08      	ldr	r2, [pc, #32]	@ (800bf90 <UART_SetConfig+0x2d4>)
 800bf70:	fba2 2303 	umull	r2, r3, r2, r3
 800bf74:	095b      	lsrs	r3, r3, #5
 800bf76:	f003 0207 	and.w	r2, r3, #7
 800bf7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4422      	add	r2, r4
 800bf82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bf84:	e106      	b.n	800c194 <UART_SetConfig+0x4d8>
 800bf86:	bf00      	nop
 800bf88:	40011000 	.word	0x40011000
 800bf8c:	40011400 	.word	0x40011400
 800bf90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bf94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bf9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800bfa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800bfa6:	4642      	mov	r2, r8
 800bfa8:	464b      	mov	r3, r9
 800bfaa:	1891      	adds	r1, r2, r2
 800bfac:	6239      	str	r1, [r7, #32]
 800bfae:	415b      	adcs	r3, r3
 800bfb0:	627b      	str	r3, [r7, #36]	@ 0x24
 800bfb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bfb6:	4641      	mov	r1, r8
 800bfb8:	1854      	adds	r4, r2, r1
 800bfba:	4649      	mov	r1, r9
 800bfbc:	eb43 0501 	adc.w	r5, r3, r1
 800bfc0:	f04f 0200 	mov.w	r2, #0
 800bfc4:	f04f 0300 	mov.w	r3, #0
 800bfc8:	00eb      	lsls	r3, r5, #3
 800bfca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bfce:	00e2      	lsls	r2, r4, #3
 800bfd0:	4614      	mov	r4, r2
 800bfd2:	461d      	mov	r5, r3
 800bfd4:	4643      	mov	r3, r8
 800bfd6:	18e3      	adds	r3, r4, r3
 800bfd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bfdc:	464b      	mov	r3, r9
 800bfde:	eb45 0303 	adc.w	r3, r5, r3
 800bfe2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bfe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	2200      	movs	r2, #0
 800bfee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bff2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bff6:	f04f 0200 	mov.w	r2, #0
 800bffa:	f04f 0300 	mov.w	r3, #0
 800bffe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c002:	4629      	mov	r1, r5
 800c004:	008b      	lsls	r3, r1, #2
 800c006:	4621      	mov	r1, r4
 800c008:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c00c:	4621      	mov	r1, r4
 800c00e:	008a      	lsls	r2, r1, #2
 800c010:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c014:	f7f4 fe68 	bl	8000ce8 <__aeabi_uldivmod>
 800c018:	4602      	mov	r2, r0
 800c01a:	460b      	mov	r3, r1
 800c01c:	4b60      	ldr	r3, [pc, #384]	@ (800c1a0 <UART_SetConfig+0x4e4>)
 800c01e:	fba3 2302 	umull	r2, r3, r3, r2
 800c022:	095b      	lsrs	r3, r3, #5
 800c024:	011c      	lsls	r4, r3, #4
 800c026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c02a:	2200      	movs	r2, #0
 800c02c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c030:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c034:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c038:	4642      	mov	r2, r8
 800c03a:	464b      	mov	r3, r9
 800c03c:	1891      	adds	r1, r2, r2
 800c03e:	61b9      	str	r1, [r7, #24]
 800c040:	415b      	adcs	r3, r3
 800c042:	61fb      	str	r3, [r7, #28]
 800c044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c048:	4641      	mov	r1, r8
 800c04a:	1851      	adds	r1, r2, r1
 800c04c:	6139      	str	r1, [r7, #16]
 800c04e:	4649      	mov	r1, r9
 800c050:	414b      	adcs	r3, r1
 800c052:	617b      	str	r3, [r7, #20]
 800c054:	f04f 0200 	mov.w	r2, #0
 800c058:	f04f 0300 	mov.w	r3, #0
 800c05c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c060:	4659      	mov	r1, fp
 800c062:	00cb      	lsls	r3, r1, #3
 800c064:	4651      	mov	r1, sl
 800c066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c06a:	4651      	mov	r1, sl
 800c06c:	00ca      	lsls	r2, r1, #3
 800c06e:	4610      	mov	r0, r2
 800c070:	4619      	mov	r1, r3
 800c072:	4603      	mov	r3, r0
 800c074:	4642      	mov	r2, r8
 800c076:	189b      	adds	r3, r3, r2
 800c078:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c07c:	464b      	mov	r3, r9
 800c07e:	460a      	mov	r2, r1
 800c080:	eb42 0303 	adc.w	r3, r2, r3
 800c084:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	2200      	movs	r2, #0
 800c090:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c092:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c094:	f04f 0200 	mov.w	r2, #0
 800c098:	f04f 0300 	mov.w	r3, #0
 800c09c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c0a0:	4649      	mov	r1, r9
 800c0a2:	008b      	lsls	r3, r1, #2
 800c0a4:	4641      	mov	r1, r8
 800c0a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c0aa:	4641      	mov	r1, r8
 800c0ac:	008a      	lsls	r2, r1, #2
 800c0ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c0b2:	f7f4 fe19 	bl	8000ce8 <__aeabi_uldivmod>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	4611      	mov	r1, r2
 800c0bc:	4b38      	ldr	r3, [pc, #224]	@ (800c1a0 <UART_SetConfig+0x4e4>)
 800c0be:	fba3 2301 	umull	r2, r3, r3, r1
 800c0c2:	095b      	lsrs	r3, r3, #5
 800c0c4:	2264      	movs	r2, #100	@ 0x64
 800c0c6:	fb02 f303 	mul.w	r3, r2, r3
 800c0ca:	1acb      	subs	r3, r1, r3
 800c0cc:	011b      	lsls	r3, r3, #4
 800c0ce:	3332      	adds	r3, #50	@ 0x32
 800c0d0:	4a33      	ldr	r2, [pc, #204]	@ (800c1a0 <UART_SetConfig+0x4e4>)
 800c0d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c0d6:	095b      	lsrs	r3, r3, #5
 800c0d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c0dc:	441c      	add	r4, r3
 800c0de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	673b      	str	r3, [r7, #112]	@ 0x70
 800c0e6:	677a      	str	r2, [r7, #116]	@ 0x74
 800c0e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c0ec:	4642      	mov	r2, r8
 800c0ee:	464b      	mov	r3, r9
 800c0f0:	1891      	adds	r1, r2, r2
 800c0f2:	60b9      	str	r1, [r7, #8]
 800c0f4:	415b      	adcs	r3, r3
 800c0f6:	60fb      	str	r3, [r7, #12]
 800c0f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c0fc:	4641      	mov	r1, r8
 800c0fe:	1851      	adds	r1, r2, r1
 800c100:	6039      	str	r1, [r7, #0]
 800c102:	4649      	mov	r1, r9
 800c104:	414b      	adcs	r3, r1
 800c106:	607b      	str	r3, [r7, #4]
 800c108:	f04f 0200 	mov.w	r2, #0
 800c10c:	f04f 0300 	mov.w	r3, #0
 800c110:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c114:	4659      	mov	r1, fp
 800c116:	00cb      	lsls	r3, r1, #3
 800c118:	4651      	mov	r1, sl
 800c11a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c11e:	4651      	mov	r1, sl
 800c120:	00ca      	lsls	r2, r1, #3
 800c122:	4610      	mov	r0, r2
 800c124:	4619      	mov	r1, r3
 800c126:	4603      	mov	r3, r0
 800c128:	4642      	mov	r2, r8
 800c12a:	189b      	adds	r3, r3, r2
 800c12c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c12e:	464b      	mov	r3, r9
 800c130:	460a      	mov	r2, r1
 800c132:	eb42 0303 	adc.w	r3, r2, r3
 800c136:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	2200      	movs	r2, #0
 800c140:	663b      	str	r3, [r7, #96]	@ 0x60
 800c142:	667a      	str	r2, [r7, #100]	@ 0x64
 800c144:	f04f 0200 	mov.w	r2, #0
 800c148:	f04f 0300 	mov.w	r3, #0
 800c14c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c150:	4649      	mov	r1, r9
 800c152:	008b      	lsls	r3, r1, #2
 800c154:	4641      	mov	r1, r8
 800c156:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c15a:	4641      	mov	r1, r8
 800c15c:	008a      	lsls	r2, r1, #2
 800c15e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c162:	f7f4 fdc1 	bl	8000ce8 <__aeabi_uldivmod>
 800c166:	4602      	mov	r2, r0
 800c168:	460b      	mov	r3, r1
 800c16a:	4b0d      	ldr	r3, [pc, #52]	@ (800c1a0 <UART_SetConfig+0x4e4>)
 800c16c:	fba3 1302 	umull	r1, r3, r3, r2
 800c170:	095b      	lsrs	r3, r3, #5
 800c172:	2164      	movs	r1, #100	@ 0x64
 800c174:	fb01 f303 	mul.w	r3, r1, r3
 800c178:	1ad3      	subs	r3, r2, r3
 800c17a:	011b      	lsls	r3, r3, #4
 800c17c:	3332      	adds	r3, #50	@ 0x32
 800c17e:	4a08      	ldr	r2, [pc, #32]	@ (800c1a0 <UART_SetConfig+0x4e4>)
 800c180:	fba2 2303 	umull	r2, r3, r2, r3
 800c184:	095b      	lsrs	r3, r3, #5
 800c186:	f003 020f 	and.w	r2, r3, #15
 800c18a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4422      	add	r2, r4
 800c192:	609a      	str	r2, [r3, #8]
}
 800c194:	bf00      	nop
 800c196:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c19a:	46bd      	mov	sp, r7
 800c19c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c1a0:	51eb851f 	.word	0x51eb851f

0800c1a4 <atof>:
 800c1a4:	2100      	movs	r1, #0
 800c1a6:	f000 be07 	b.w	800cdb8 <strtod>

0800c1aa <atoi>:
 800c1aa:	220a      	movs	r2, #10
 800c1ac:	2100      	movs	r1, #0
 800c1ae:	f000 be89 	b.w	800cec4 <strtol>

0800c1b2 <sulp>:
 800c1b2:	b570      	push	{r4, r5, r6, lr}
 800c1b4:	4604      	mov	r4, r0
 800c1b6:	460d      	mov	r5, r1
 800c1b8:	ec45 4b10 	vmov	d0, r4, r5
 800c1bc:	4616      	mov	r6, r2
 800c1be:	f003 fbff 	bl	800f9c0 <__ulp>
 800c1c2:	ec51 0b10 	vmov	r0, r1, d0
 800c1c6:	b17e      	cbz	r6, 800c1e8 <sulp+0x36>
 800c1c8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c1cc:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	dd09      	ble.n	800c1e8 <sulp+0x36>
 800c1d4:	051b      	lsls	r3, r3, #20
 800c1d6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c1da:	2400      	movs	r4, #0
 800c1dc:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c1e0:	4622      	mov	r2, r4
 800c1e2:	462b      	mov	r3, r5
 800c1e4:	f7f4 fa38 	bl	8000658 <__aeabi_dmul>
 800c1e8:	ec41 0b10 	vmov	d0, r0, r1
 800c1ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c1f0 <_strtod_l>:
 800c1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f4:	b09f      	sub	sp, #124	@ 0x7c
 800c1f6:	460c      	mov	r4, r1
 800c1f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	921a      	str	r2, [sp, #104]	@ 0x68
 800c1fe:	9005      	str	r0, [sp, #20]
 800c200:	f04f 0a00 	mov.w	sl, #0
 800c204:	f04f 0b00 	mov.w	fp, #0
 800c208:	460a      	mov	r2, r1
 800c20a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c20c:	7811      	ldrb	r1, [r2, #0]
 800c20e:	292b      	cmp	r1, #43	@ 0x2b
 800c210:	d04a      	beq.n	800c2a8 <_strtod_l+0xb8>
 800c212:	d838      	bhi.n	800c286 <_strtod_l+0x96>
 800c214:	290d      	cmp	r1, #13
 800c216:	d832      	bhi.n	800c27e <_strtod_l+0x8e>
 800c218:	2908      	cmp	r1, #8
 800c21a:	d832      	bhi.n	800c282 <_strtod_l+0x92>
 800c21c:	2900      	cmp	r1, #0
 800c21e:	d03b      	beq.n	800c298 <_strtod_l+0xa8>
 800c220:	2200      	movs	r2, #0
 800c222:	920e      	str	r2, [sp, #56]	@ 0x38
 800c224:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c226:	782a      	ldrb	r2, [r5, #0]
 800c228:	2a30      	cmp	r2, #48	@ 0x30
 800c22a:	f040 80b2 	bne.w	800c392 <_strtod_l+0x1a2>
 800c22e:	786a      	ldrb	r2, [r5, #1]
 800c230:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c234:	2a58      	cmp	r2, #88	@ 0x58
 800c236:	d16e      	bne.n	800c316 <_strtod_l+0x126>
 800c238:	9302      	str	r3, [sp, #8]
 800c23a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c23c:	9301      	str	r3, [sp, #4]
 800c23e:	ab1a      	add	r3, sp, #104	@ 0x68
 800c240:	9300      	str	r3, [sp, #0]
 800c242:	4a8f      	ldr	r2, [pc, #572]	@ (800c480 <_strtod_l+0x290>)
 800c244:	9805      	ldr	r0, [sp, #20]
 800c246:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c248:	a919      	add	r1, sp, #100	@ 0x64
 800c24a:	f002 fcb3 	bl	800ebb4 <__gethex>
 800c24e:	f010 060f 	ands.w	r6, r0, #15
 800c252:	4604      	mov	r4, r0
 800c254:	d005      	beq.n	800c262 <_strtod_l+0x72>
 800c256:	2e06      	cmp	r6, #6
 800c258:	d128      	bne.n	800c2ac <_strtod_l+0xbc>
 800c25a:	3501      	adds	r5, #1
 800c25c:	2300      	movs	r3, #0
 800c25e:	9519      	str	r5, [sp, #100]	@ 0x64
 800c260:	930e      	str	r3, [sp, #56]	@ 0x38
 800c262:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c264:	2b00      	cmp	r3, #0
 800c266:	f040 858e 	bne.w	800cd86 <_strtod_l+0xb96>
 800c26a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c26c:	b1cb      	cbz	r3, 800c2a2 <_strtod_l+0xb2>
 800c26e:	4652      	mov	r2, sl
 800c270:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c274:	ec43 2b10 	vmov	d0, r2, r3
 800c278:	b01f      	add	sp, #124	@ 0x7c
 800c27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c27e:	2920      	cmp	r1, #32
 800c280:	d1ce      	bne.n	800c220 <_strtod_l+0x30>
 800c282:	3201      	adds	r2, #1
 800c284:	e7c1      	b.n	800c20a <_strtod_l+0x1a>
 800c286:	292d      	cmp	r1, #45	@ 0x2d
 800c288:	d1ca      	bne.n	800c220 <_strtod_l+0x30>
 800c28a:	2101      	movs	r1, #1
 800c28c:	910e      	str	r1, [sp, #56]	@ 0x38
 800c28e:	1c51      	adds	r1, r2, #1
 800c290:	9119      	str	r1, [sp, #100]	@ 0x64
 800c292:	7852      	ldrb	r2, [r2, #1]
 800c294:	2a00      	cmp	r2, #0
 800c296:	d1c5      	bne.n	800c224 <_strtod_l+0x34>
 800c298:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c29a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	f040 8570 	bne.w	800cd82 <_strtod_l+0xb92>
 800c2a2:	4652      	mov	r2, sl
 800c2a4:	465b      	mov	r3, fp
 800c2a6:	e7e5      	b.n	800c274 <_strtod_l+0x84>
 800c2a8:	2100      	movs	r1, #0
 800c2aa:	e7ef      	b.n	800c28c <_strtod_l+0x9c>
 800c2ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c2ae:	b13a      	cbz	r2, 800c2c0 <_strtod_l+0xd0>
 800c2b0:	2135      	movs	r1, #53	@ 0x35
 800c2b2:	a81c      	add	r0, sp, #112	@ 0x70
 800c2b4:	f003 fc7e 	bl	800fbb4 <__copybits>
 800c2b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c2ba:	9805      	ldr	r0, [sp, #20]
 800c2bc:	f003 f854 	bl	800f368 <_Bfree>
 800c2c0:	3e01      	subs	r6, #1
 800c2c2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c2c4:	2e04      	cmp	r6, #4
 800c2c6:	d806      	bhi.n	800c2d6 <_strtod_l+0xe6>
 800c2c8:	e8df f006 	tbb	[pc, r6]
 800c2cc:	201d0314 	.word	0x201d0314
 800c2d0:	14          	.byte	0x14
 800c2d1:	00          	.byte	0x00
 800c2d2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c2d6:	05e1      	lsls	r1, r4, #23
 800c2d8:	bf48      	it	mi
 800c2da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c2de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c2e2:	0d1b      	lsrs	r3, r3, #20
 800c2e4:	051b      	lsls	r3, r3, #20
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d1bb      	bne.n	800c262 <_strtod_l+0x72>
 800c2ea:	f001 fcdb 	bl	800dca4 <__errno>
 800c2ee:	2322      	movs	r3, #34	@ 0x22
 800c2f0:	6003      	str	r3, [r0, #0]
 800c2f2:	e7b6      	b.n	800c262 <_strtod_l+0x72>
 800c2f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c2f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c2fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c300:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c304:	e7e7      	b.n	800c2d6 <_strtod_l+0xe6>
 800c306:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c488 <_strtod_l+0x298>
 800c30a:	e7e4      	b.n	800c2d6 <_strtod_l+0xe6>
 800c30c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c310:	f04f 3aff 	mov.w	sl, #4294967295
 800c314:	e7df      	b.n	800c2d6 <_strtod_l+0xe6>
 800c316:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c318:	1c5a      	adds	r2, r3, #1
 800c31a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c31c:	785b      	ldrb	r3, [r3, #1]
 800c31e:	2b30      	cmp	r3, #48	@ 0x30
 800c320:	d0f9      	beq.n	800c316 <_strtod_l+0x126>
 800c322:	2b00      	cmp	r3, #0
 800c324:	d09d      	beq.n	800c262 <_strtod_l+0x72>
 800c326:	2301      	movs	r3, #1
 800c328:	2700      	movs	r7, #0
 800c32a:	9308      	str	r3, [sp, #32]
 800c32c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c32e:	930c      	str	r3, [sp, #48]	@ 0x30
 800c330:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c332:	46b9      	mov	r9, r7
 800c334:	220a      	movs	r2, #10
 800c336:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c338:	7805      	ldrb	r5, [r0, #0]
 800c33a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c33e:	b2d9      	uxtb	r1, r3
 800c340:	2909      	cmp	r1, #9
 800c342:	d928      	bls.n	800c396 <_strtod_l+0x1a6>
 800c344:	494f      	ldr	r1, [pc, #316]	@ (800c484 <_strtod_l+0x294>)
 800c346:	2201      	movs	r2, #1
 800c348:	f001 fc50 	bl	800dbec <strncmp>
 800c34c:	2800      	cmp	r0, #0
 800c34e:	d032      	beq.n	800c3b6 <_strtod_l+0x1c6>
 800c350:	2000      	movs	r0, #0
 800c352:	462a      	mov	r2, r5
 800c354:	900a      	str	r0, [sp, #40]	@ 0x28
 800c356:	464d      	mov	r5, r9
 800c358:	4603      	mov	r3, r0
 800c35a:	2a65      	cmp	r2, #101	@ 0x65
 800c35c:	d001      	beq.n	800c362 <_strtod_l+0x172>
 800c35e:	2a45      	cmp	r2, #69	@ 0x45
 800c360:	d114      	bne.n	800c38c <_strtod_l+0x19c>
 800c362:	b91d      	cbnz	r5, 800c36c <_strtod_l+0x17c>
 800c364:	9a08      	ldr	r2, [sp, #32]
 800c366:	4302      	orrs	r2, r0
 800c368:	d096      	beq.n	800c298 <_strtod_l+0xa8>
 800c36a:	2500      	movs	r5, #0
 800c36c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c36e:	1c62      	adds	r2, r4, #1
 800c370:	9219      	str	r2, [sp, #100]	@ 0x64
 800c372:	7862      	ldrb	r2, [r4, #1]
 800c374:	2a2b      	cmp	r2, #43	@ 0x2b
 800c376:	d07a      	beq.n	800c46e <_strtod_l+0x27e>
 800c378:	2a2d      	cmp	r2, #45	@ 0x2d
 800c37a:	d07e      	beq.n	800c47a <_strtod_l+0x28a>
 800c37c:	f04f 0c00 	mov.w	ip, #0
 800c380:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c384:	2909      	cmp	r1, #9
 800c386:	f240 8085 	bls.w	800c494 <_strtod_l+0x2a4>
 800c38a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c38c:	f04f 0800 	mov.w	r8, #0
 800c390:	e0a5      	b.n	800c4de <_strtod_l+0x2ee>
 800c392:	2300      	movs	r3, #0
 800c394:	e7c8      	b.n	800c328 <_strtod_l+0x138>
 800c396:	f1b9 0f08 	cmp.w	r9, #8
 800c39a:	bfd8      	it	le
 800c39c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800c39e:	f100 0001 	add.w	r0, r0, #1
 800c3a2:	bfda      	itte	le
 800c3a4:	fb02 3301 	mlale	r3, r2, r1, r3
 800c3a8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800c3aa:	fb02 3707 	mlagt	r7, r2, r7, r3
 800c3ae:	f109 0901 	add.w	r9, r9, #1
 800c3b2:	9019      	str	r0, [sp, #100]	@ 0x64
 800c3b4:	e7bf      	b.n	800c336 <_strtod_l+0x146>
 800c3b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3b8:	1c5a      	adds	r2, r3, #1
 800c3ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800c3bc:	785a      	ldrb	r2, [r3, #1]
 800c3be:	f1b9 0f00 	cmp.w	r9, #0
 800c3c2:	d03b      	beq.n	800c43c <_strtod_l+0x24c>
 800c3c4:	900a      	str	r0, [sp, #40]	@ 0x28
 800c3c6:	464d      	mov	r5, r9
 800c3c8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c3cc:	2b09      	cmp	r3, #9
 800c3ce:	d912      	bls.n	800c3f6 <_strtod_l+0x206>
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	e7c2      	b.n	800c35a <_strtod_l+0x16a>
 800c3d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3d6:	1c5a      	adds	r2, r3, #1
 800c3d8:	9219      	str	r2, [sp, #100]	@ 0x64
 800c3da:	785a      	ldrb	r2, [r3, #1]
 800c3dc:	3001      	adds	r0, #1
 800c3de:	2a30      	cmp	r2, #48	@ 0x30
 800c3e0:	d0f8      	beq.n	800c3d4 <_strtod_l+0x1e4>
 800c3e2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c3e6:	2b08      	cmp	r3, #8
 800c3e8:	f200 84d2 	bhi.w	800cd90 <_strtod_l+0xba0>
 800c3ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3ee:	900a      	str	r0, [sp, #40]	@ 0x28
 800c3f0:	2000      	movs	r0, #0
 800c3f2:	930c      	str	r3, [sp, #48]	@ 0x30
 800c3f4:	4605      	mov	r5, r0
 800c3f6:	3a30      	subs	r2, #48	@ 0x30
 800c3f8:	f100 0301 	add.w	r3, r0, #1
 800c3fc:	d018      	beq.n	800c430 <_strtod_l+0x240>
 800c3fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c400:	4419      	add	r1, r3
 800c402:	910a      	str	r1, [sp, #40]	@ 0x28
 800c404:	462e      	mov	r6, r5
 800c406:	f04f 0e0a 	mov.w	lr, #10
 800c40a:	1c71      	adds	r1, r6, #1
 800c40c:	eba1 0c05 	sub.w	ip, r1, r5
 800c410:	4563      	cmp	r3, ip
 800c412:	dc15      	bgt.n	800c440 <_strtod_l+0x250>
 800c414:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c418:	182b      	adds	r3, r5, r0
 800c41a:	2b08      	cmp	r3, #8
 800c41c:	f105 0501 	add.w	r5, r5, #1
 800c420:	4405      	add	r5, r0
 800c422:	dc1a      	bgt.n	800c45a <_strtod_l+0x26a>
 800c424:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c426:	230a      	movs	r3, #10
 800c428:	fb03 2301 	mla	r3, r3, r1, r2
 800c42c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c42e:	2300      	movs	r3, #0
 800c430:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c432:	1c51      	adds	r1, r2, #1
 800c434:	9119      	str	r1, [sp, #100]	@ 0x64
 800c436:	7852      	ldrb	r2, [r2, #1]
 800c438:	4618      	mov	r0, r3
 800c43a:	e7c5      	b.n	800c3c8 <_strtod_l+0x1d8>
 800c43c:	4648      	mov	r0, r9
 800c43e:	e7ce      	b.n	800c3de <_strtod_l+0x1ee>
 800c440:	2e08      	cmp	r6, #8
 800c442:	dc05      	bgt.n	800c450 <_strtod_l+0x260>
 800c444:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c446:	fb0e f606 	mul.w	r6, lr, r6
 800c44a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800c44c:	460e      	mov	r6, r1
 800c44e:	e7dc      	b.n	800c40a <_strtod_l+0x21a>
 800c450:	2910      	cmp	r1, #16
 800c452:	bfd8      	it	le
 800c454:	fb0e f707 	mulle.w	r7, lr, r7
 800c458:	e7f8      	b.n	800c44c <_strtod_l+0x25c>
 800c45a:	2b0f      	cmp	r3, #15
 800c45c:	bfdc      	itt	le
 800c45e:	230a      	movle	r3, #10
 800c460:	fb03 2707 	mlale	r7, r3, r7, r2
 800c464:	e7e3      	b.n	800c42e <_strtod_l+0x23e>
 800c466:	2300      	movs	r3, #0
 800c468:	930a      	str	r3, [sp, #40]	@ 0x28
 800c46a:	2301      	movs	r3, #1
 800c46c:	e77a      	b.n	800c364 <_strtod_l+0x174>
 800c46e:	f04f 0c00 	mov.w	ip, #0
 800c472:	1ca2      	adds	r2, r4, #2
 800c474:	9219      	str	r2, [sp, #100]	@ 0x64
 800c476:	78a2      	ldrb	r2, [r4, #2]
 800c478:	e782      	b.n	800c380 <_strtod_l+0x190>
 800c47a:	f04f 0c01 	mov.w	ip, #1
 800c47e:	e7f8      	b.n	800c472 <_strtod_l+0x282>
 800c480:	0801206c 	.word	0x0801206c
 800c484:	08011e84 	.word	0x08011e84
 800c488:	7ff00000 	.word	0x7ff00000
 800c48c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c48e:	1c51      	adds	r1, r2, #1
 800c490:	9119      	str	r1, [sp, #100]	@ 0x64
 800c492:	7852      	ldrb	r2, [r2, #1]
 800c494:	2a30      	cmp	r2, #48	@ 0x30
 800c496:	d0f9      	beq.n	800c48c <_strtod_l+0x29c>
 800c498:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c49c:	2908      	cmp	r1, #8
 800c49e:	f63f af75 	bhi.w	800c38c <_strtod_l+0x19c>
 800c4a2:	3a30      	subs	r2, #48	@ 0x30
 800c4a4:	9209      	str	r2, [sp, #36]	@ 0x24
 800c4a6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c4a8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c4aa:	f04f 080a 	mov.w	r8, #10
 800c4ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c4b0:	1c56      	adds	r6, r2, #1
 800c4b2:	9619      	str	r6, [sp, #100]	@ 0x64
 800c4b4:	7852      	ldrb	r2, [r2, #1]
 800c4b6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c4ba:	f1be 0f09 	cmp.w	lr, #9
 800c4be:	d939      	bls.n	800c534 <_strtod_l+0x344>
 800c4c0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c4c2:	1a76      	subs	r6, r6, r1
 800c4c4:	2e08      	cmp	r6, #8
 800c4c6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c4ca:	dc03      	bgt.n	800c4d4 <_strtod_l+0x2e4>
 800c4cc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c4ce:	4588      	cmp	r8, r1
 800c4d0:	bfa8      	it	ge
 800c4d2:	4688      	movge	r8, r1
 800c4d4:	f1bc 0f00 	cmp.w	ip, #0
 800c4d8:	d001      	beq.n	800c4de <_strtod_l+0x2ee>
 800c4da:	f1c8 0800 	rsb	r8, r8, #0
 800c4de:	2d00      	cmp	r5, #0
 800c4e0:	d14e      	bne.n	800c580 <_strtod_l+0x390>
 800c4e2:	9908      	ldr	r1, [sp, #32]
 800c4e4:	4308      	orrs	r0, r1
 800c4e6:	f47f aebc 	bne.w	800c262 <_strtod_l+0x72>
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	f47f aed4 	bne.w	800c298 <_strtod_l+0xa8>
 800c4f0:	2a69      	cmp	r2, #105	@ 0x69
 800c4f2:	d028      	beq.n	800c546 <_strtod_l+0x356>
 800c4f4:	dc25      	bgt.n	800c542 <_strtod_l+0x352>
 800c4f6:	2a49      	cmp	r2, #73	@ 0x49
 800c4f8:	d025      	beq.n	800c546 <_strtod_l+0x356>
 800c4fa:	2a4e      	cmp	r2, #78	@ 0x4e
 800c4fc:	f47f aecc 	bne.w	800c298 <_strtod_l+0xa8>
 800c500:	499a      	ldr	r1, [pc, #616]	@ (800c76c <_strtod_l+0x57c>)
 800c502:	a819      	add	r0, sp, #100	@ 0x64
 800c504:	f002 fd78 	bl	800eff8 <__match>
 800c508:	2800      	cmp	r0, #0
 800c50a:	f43f aec5 	beq.w	800c298 <_strtod_l+0xa8>
 800c50e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	2b28      	cmp	r3, #40	@ 0x28
 800c514:	d12e      	bne.n	800c574 <_strtod_l+0x384>
 800c516:	4996      	ldr	r1, [pc, #600]	@ (800c770 <_strtod_l+0x580>)
 800c518:	aa1c      	add	r2, sp, #112	@ 0x70
 800c51a:	a819      	add	r0, sp, #100	@ 0x64
 800c51c:	f002 fd80 	bl	800f020 <__hexnan>
 800c520:	2805      	cmp	r0, #5
 800c522:	d127      	bne.n	800c574 <_strtod_l+0x384>
 800c524:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c526:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c52a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c52e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c532:	e696      	b.n	800c262 <_strtod_l+0x72>
 800c534:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c536:	fb08 2101 	mla	r1, r8, r1, r2
 800c53a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c53e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c540:	e7b5      	b.n	800c4ae <_strtod_l+0x2be>
 800c542:	2a6e      	cmp	r2, #110	@ 0x6e
 800c544:	e7da      	b.n	800c4fc <_strtod_l+0x30c>
 800c546:	498b      	ldr	r1, [pc, #556]	@ (800c774 <_strtod_l+0x584>)
 800c548:	a819      	add	r0, sp, #100	@ 0x64
 800c54a:	f002 fd55 	bl	800eff8 <__match>
 800c54e:	2800      	cmp	r0, #0
 800c550:	f43f aea2 	beq.w	800c298 <_strtod_l+0xa8>
 800c554:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c556:	4988      	ldr	r1, [pc, #544]	@ (800c778 <_strtod_l+0x588>)
 800c558:	3b01      	subs	r3, #1
 800c55a:	a819      	add	r0, sp, #100	@ 0x64
 800c55c:	9319      	str	r3, [sp, #100]	@ 0x64
 800c55e:	f002 fd4b 	bl	800eff8 <__match>
 800c562:	b910      	cbnz	r0, 800c56a <_strtod_l+0x37a>
 800c564:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c566:	3301      	adds	r3, #1
 800c568:	9319      	str	r3, [sp, #100]	@ 0x64
 800c56a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800c788 <_strtod_l+0x598>
 800c56e:	f04f 0a00 	mov.w	sl, #0
 800c572:	e676      	b.n	800c262 <_strtod_l+0x72>
 800c574:	4881      	ldr	r0, [pc, #516]	@ (800c77c <_strtod_l+0x58c>)
 800c576:	f001 fbd3 	bl	800dd20 <nan>
 800c57a:	ec5b ab10 	vmov	sl, fp, d0
 800c57e:	e670      	b.n	800c262 <_strtod_l+0x72>
 800c580:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c582:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c584:	eba8 0303 	sub.w	r3, r8, r3
 800c588:	f1b9 0f00 	cmp.w	r9, #0
 800c58c:	bf08      	it	eq
 800c58e:	46a9      	moveq	r9, r5
 800c590:	2d10      	cmp	r5, #16
 800c592:	9309      	str	r3, [sp, #36]	@ 0x24
 800c594:	462c      	mov	r4, r5
 800c596:	bfa8      	it	ge
 800c598:	2410      	movge	r4, #16
 800c59a:	f7f3 ffe3 	bl	8000564 <__aeabi_ui2d>
 800c59e:	2d09      	cmp	r5, #9
 800c5a0:	4682      	mov	sl, r0
 800c5a2:	468b      	mov	fp, r1
 800c5a4:	dc13      	bgt.n	800c5ce <_strtod_l+0x3de>
 800c5a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	f43f ae5a 	beq.w	800c262 <_strtod_l+0x72>
 800c5ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5b0:	dd78      	ble.n	800c6a4 <_strtod_l+0x4b4>
 800c5b2:	2b16      	cmp	r3, #22
 800c5b4:	dc5f      	bgt.n	800c676 <_strtod_l+0x486>
 800c5b6:	4972      	ldr	r1, [pc, #456]	@ (800c780 <_strtod_l+0x590>)
 800c5b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c5bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5c0:	4652      	mov	r2, sl
 800c5c2:	465b      	mov	r3, fp
 800c5c4:	f7f4 f848 	bl	8000658 <__aeabi_dmul>
 800c5c8:	4682      	mov	sl, r0
 800c5ca:	468b      	mov	fp, r1
 800c5cc:	e649      	b.n	800c262 <_strtod_l+0x72>
 800c5ce:	4b6c      	ldr	r3, [pc, #432]	@ (800c780 <_strtod_l+0x590>)
 800c5d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c5d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c5d8:	f7f4 f83e 	bl	8000658 <__aeabi_dmul>
 800c5dc:	4682      	mov	sl, r0
 800c5de:	4638      	mov	r0, r7
 800c5e0:	468b      	mov	fp, r1
 800c5e2:	f7f3 ffbf 	bl	8000564 <__aeabi_ui2d>
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	4650      	mov	r0, sl
 800c5ec:	4659      	mov	r1, fp
 800c5ee:	f7f3 fe7d 	bl	80002ec <__adddf3>
 800c5f2:	2d0f      	cmp	r5, #15
 800c5f4:	4682      	mov	sl, r0
 800c5f6:	468b      	mov	fp, r1
 800c5f8:	ddd5      	ble.n	800c5a6 <_strtod_l+0x3b6>
 800c5fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5fc:	1b2c      	subs	r4, r5, r4
 800c5fe:	441c      	add	r4, r3
 800c600:	2c00      	cmp	r4, #0
 800c602:	f340 8093 	ble.w	800c72c <_strtod_l+0x53c>
 800c606:	f014 030f 	ands.w	r3, r4, #15
 800c60a:	d00a      	beq.n	800c622 <_strtod_l+0x432>
 800c60c:	495c      	ldr	r1, [pc, #368]	@ (800c780 <_strtod_l+0x590>)
 800c60e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c612:	4652      	mov	r2, sl
 800c614:	465b      	mov	r3, fp
 800c616:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c61a:	f7f4 f81d 	bl	8000658 <__aeabi_dmul>
 800c61e:	4682      	mov	sl, r0
 800c620:	468b      	mov	fp, r1
 800c622:	f034 040f 	bics.w	r4, r4, #15
 800c626:	d073      	beq.n	800c710 <_strtod_l+0x520>
 800c628:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c62c:	dd49      	ble.n	800c6c2 <_strtod_l+0x4d2>
 800c62e:	2400      	movs	r4, #0
 800c630:	46a0      	mov	r8, r4
 800c632:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c634:	46a1      	mov	r9, r4
 800c636:	9a05      	ldr	r2, [sp, #20]
 800c638:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800c788 <_strtod_l+0x598>
 800c63c:	2322      	movs	r3, #34	@ 0x22
 800c63e:	6013      	str	r3, [r2, #0]
 800c640:	f04f 0a00 	mov.w	sl, #0
 800c644:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c646:	2b00      	cmp	r3, #0
 800c648:	f43f ae0b 	beq.w	800c262 <_strtod_l+0x72>
 800c64c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c64e:	9805      	ldr	r0, [sp, #20]
 800c650:	f002 fe8a 	bl	800f368 <_Bfree>
 800c654:	9805      	ldr	r0, [sp, #20]
 800c656:	4649      	mov	r1, r9
 800c658:	f002 fe86 	bl	800f368 <_Bfree>
 800c65c:	9805      	ldr	r0, [sp, #20]
 800c65e:	4641      	mov	r1, r8
 800c660:	f002 fe82 	bl	800f368 <_Bfree>
 800c664:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c666:	9805      	ldr	r0, [sp, #20]
 800c668:	f002 fe7e 	bl	800f368 <_Bfree>
 800c66c:	9805      	ldr	r0, [sp, #20]
 800c66e:	4621      	mov	r1, r4
 800c670:	f002 fe7a 	bl	800f368 <_Bfree>
 800c674:	e5f5      	b.n	800c262 <_strtod_l+0x72>
 800c676:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c678:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c67c:	4293      	cmp	r3, r2
 800c67e:	dbbc      	blt.n	800c5fa <_strtod_l+0x40a>
 800c680:	4c3f      	ldr	r4, [pc, #252]	@ (800c780 <_strtod_l+0x590>)
 800c682:	f1c5 050f 	rsb	r5, r5, #15
 800c686:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c68a:	4652      	mov	r2, sl
 800c68c:	465b      	mov	r3, fp
 800c68e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c692:	f7f3 ffe1 	bl	8000658 <__aeabi_dmul>
 800c696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c698:	1b5d      	subs	r5, r3, r5
 800c69a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c69e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c6a2:	e78f      	b.n	800c5c4 <_strtod_l+0x3d4>
 800c6a4:	3316      	adds	r3, #22
 800c6a6:	dba8      	blt.n	800c5fa <_strtod_l+0x40a>
 800c6a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6aa:	eba3 0808 	sub.w	r8, r3, r8
 800c6ae:	4b34      	ldr	r3, [pc, #208]	@ (800c780 <_strtod_l+0x590>)
 800c6b0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c6b4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c6b8:	4650      	mov	r0, sl
 800c6ba:	4659      	mov	r1, fp
 800c6bc:	f7f4 f8f6 	bl	80008ac <__aeabi_ddiv>
 800c6c0:	e782      	b.n	800c5c8 <_strtod_l+0x3d8>
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	4f2f      	ldr	r7, [pc, #188]	@ (800c784 <_strtod_l+0x594>)
 800c6c6:	1124      	asrs	r4, r4, #4
 800c6c8:	4650      	mov	r0, sl
 800c6ca:	4659      	mov	r1, fp
 800c6cc:	461e      	mov	r6, r3
 800c6ce:	2c01      	cmp	r4, #1
 800c6d0:	dc21      	bgt.n	800c716 <_strtod_l+0x526>
 800c6d2:	b10b      	cbz	r3, 800c6d8 <_strtod_l+0x4e8>
 800c6d4:	4682      	mov	sl, r0
 800c6d6:	468b      	mov	fp, r1
 800c6d8:	492a      	ldr	r1, [pc, #168]	@ (800c784 <_strtod_l+0x594>)
 800c6da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c6de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c6e2:	4652      	mov	r2, sl
 800c6e4:	465b      	mov	r3, fp
 800c6e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6ea:	f7f3 ffb5 	bl	8000658 <__aeabi_dmul>
 800c6ee:	4b26      	ldr	r3, [pc, #152]	@ (800c788 <_strtod_l+0x598>)
 800c6f0:	460a      	mov	r2, r1
 800c6f2:	400b      	ands	r3, r1
 800c6f4:	4925      	ldr	r1, [pc, #148]	@ (800c78c <_strtod_l+0x59c>)
 800c6f6:	428b      	cmp	r3, r1
 800c6f8:	4682      	mov	sl, r0
 800c6fa:	d898      	bhi.n	800c62e <_strtod_l+0x43e>
 800c6fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c700:	428b      	cmp	r3, r1
 800c702:	bf86      	itte	hi
 800c704:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800c790 <_strtod_l+0x5a0>
 800c708:	f04f 3aff 	movhi.w	sl, #4294967295
 800c70c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c710:	2300      	movs	r3, #0
 800c712:	9308      	str	r3, [sp, #32]
 800c714:	e076      	b.n	800c804 <_strtod_l+0x614>
 800c716:	07e2      	lsls	r2, r4, #31
 800c718:	d504      	bpl.n	800c724 <_strtod_l+0x534>
 800c71a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c71e:	f7f3 ff9b 	bl	8000658 <__aeabi_dmul>
 800c722:	2301      	movs	r3, #1
 800c724:	3601      	adds	r6, #1
 800c726:	1064      	asrs	r4, r4, #1
 800c728:	3708      	adds	r7, #8
 800c72a:	e7d0      	b.n	800c6ce <_strtod_l+0x4de>
 800c72c:	d0f0      	beq.n	800c710 <_strtod_l+0x520>
 800c72e:	4264      	negs	r4, r4
 800c730:	f014 020f 	ands.w	r2, r4, #15
 800c734:	d00a      	beq.n	800c74c <_strtod_l+0x55c>
 800c736:	4b12      	ldr	r3, [pc, #72]	@ (800c780 <_strtod_l+0x590>)
 800c738:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c73c:	4650      	mov	r0, sl
 800c73e:	4659      	mov	r1, fp
 800c740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c744:	f7f4 f8b2 	bl	80008ac <__aeabi_ddiv>
 800c748:	4682      	mov	sl, r0
 800c74a:	468b      	mov	fp, r1
 800c74c:	1124      	asrs	r4, r4, #4
 800c74e:	d0df      	beq.n	800c710 <_strtod_l+0x520>
 800c750:	2c1f      	cmp	r4, #31
 800c752:	dd1f      	ble.n	800c794 <_strtod_l+0x5a4>
 800c754:	2400      	movs	r4, #0
 800c756:	46a0      	mov	r8, r4
 800c758:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c75a:	46a1      	mov	r9, r4
 800c75c:	9a05      	ldr	r2, [sp, #20]
 800c75e:	2322      	movs	r3, #34	@ 0x22
 800c760:	f04f 0a00 	mov.w	sl, #0
 800c764:	f04f 0b00 	mov.w	fp, #0
 800c768:	6013      	str	r3, [r2, #0]
 800c76a:	e76b      	b.n	800c644 <_strtod_l+0x454>
 800c76c:	08011e93 	.word	0x08011e93
 800c770:	08012058 	.word	0x08012058
 800c774:	08011e8b 	.word	0x08011e8b
 800c778:	08011ec5 	.word	0x08011ec5
 800c77c:	08012054 	.word	0x08012054
 800c780:	080121e0 	.word	0x080121e0
 800c784:	080121b8 	.word	0x080121b8
 800c788:	7ff00000 	.word	0x7ff00000
 800c78c:	7ca00000 	.word	0x7ca00000
 800c790:	7fefffff 	.word	0x7fefffff
 800c794:	f014 0310 	ands.w	r3, r4, #16
 800c798:	bf18      	it	ne
 800c79a:	236a      	movne	r3, #106	@ 0x6a
 800c79c:	4ea9      	ldr	r6, [pc, #676]	@ (800ca44 <_strtod_l+0x854>)
 800c79e:	9308      	str	r3, [sp, #32]
 800c7a0:	4650      	mov	r0, sl
 800c7a2:	4659      	mov	r1, fp
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	07e7      	lsls	r7, r4, #31
 800c7a8:	d504      	bpl.n	800c7b4 <_strtod_l+0x5c4>
 800c7aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c7ae:	f7f3 ff53 	bl	8000658 <__aeabi_dmul>
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	1064      	asrs	r4, r4, #1
 800c7b6:	f106 0608 	add.w	r6, r6, #8
 800c7ba:	d1f4      	bne.n	800c7a6 <_strtod_l+0x5b6>
 800c7bc:	b10b      	cbz	r3, 800c7c2 <_strtod_l+0x5d2>
 800c7be:	4682      	mov	sl, r0
 800c7c0:	468b      	mov	fp, r1
 800c7c2:	9b08      	ldr	r3, [sp, #32]
 800c7c4:	b1b3      	cbz	r3, 800c7f4 <_strtod_l+0x604>
 800c7c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c7ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	4659      	mov	r1, fp
 800c7d2:	dd0f      	ble.n	800c7f4 <_strtod_l+0x604>
 800c7d4:	2b1f      	cmp	r3, #31
 800c7d6:	dd56      	ble.n	800c886 <_strtod_l+0x696>
 800c7d8:	2b34      	cmp	r3, #52	@ 0x34
 800c7da:	bfde      	ittt	le
 800c7dc:	f04f 33ff 	movle.w	r3, #4294967295
 800c7e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c7e4:	4093      	lslle	r3, r2
 800c7e6:	f04f 0a00 	mov.w	sl, #0
 800c7ea:	bfcc      	ite	gt
 800c7ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c7f0:	ea03 0b01 	andle.w	fp, r3, r1
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	4650      	mov	r0, sl
 800c7fa:	4659      	mov	r1, fp
 800c7fc:	f7f4 f994 	bl	8000b28 <__aeabi_dcmpeq>
 800c800:	2800      	cmp	r0, #0
 800c802:	d1a7      	bne.n	800c754 <_strtod_l+0x564>
 800c804:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c806:	9300      	str	r3, [sp, #0]
 800c808:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c80a:	9805      	ldr	r0, [sp, #20]
 800c80c:	462b      	mov	r3, r5
 800c80e:	464a      	mov	r2, r9
 800c810:	f002 fe12 	bl	800f438 <__s2b>
 800c814:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c816:	2800      	cmp	r0, #0
 800c818:	f43f af09 	beq.w	800c62e <_strtod_l+0x43e>
 800c81c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c81e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c820:	2a00      	cmp	r2, #0
 800c822:	eba3 0308 	sub.w	r3, r3, r8
 800c826:	bfa8      	it	ge
 800c828:	2300      	movge	r3, #0
 800c82a:	9312      	str	r3, [sp, #72]	@ 0x48
 800c82c:	2400      	movs	r4, #0
 800c82e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c832:	9316      	str	r3, [sp, #88]	@ 0x58
 800c834:	46a0      	mov	r8, r4
 800c836:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c838:	9805      	ldr	r0, [sp, #20]
 800c83a:	6859      	ldr	r1, [r3, #4]
 800c83c:	f002 fd54 	bl	800f2e8 <_Balloc>
 800c840:	4681      	mov	r9, r0
 800c842:	2800      	cmp	r0, #0
 800c844:	f43f aef7 	beq.w	800c636 <_strtod_l+0x446>
 800c848:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c84a:	691a      	ldr	r2, [r3, #16]
 800c84c:	3202      	adds	r2, #2
 800c84e:	f103 010c 	add.w	r1, r3, #12
 800c852:	0092      	lsls	r2, r2, #2
 800c854:	300c      	adds	r0, #12
 800c856:	f001 fa52 	bl	800dcfe <memcpy>
 800c85a:	ec4b ab10 	vmov	d0, sl, fp
 800c85e:	9805      	ldr	r0, [sp, #20]
 800c860:	aa1c      	add	r2, sp, #112	@ 0x70
 800c862:	a91b      	add	r1, sp, #108	@ 0x6c
 800c864:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c868:	f003 f91a 	bl	800faa0 <__d2b>
 800c86c:	901a      	str	r0, [sp, #104]	@ 0x68
 800c86e:	2800      	cmp	r0, #0
 800c870:	f43f aee1 	beq.w	800c636 <_strtod_l+0x446>
 800c874:	9805      	ldr	r0, [sp, #20]
 800c876:	2101      	movs	r1, #1
 800c878:	f002 fe74 	bl	800f564 <__i2b>
 800c87c:	4680      	mov	r8, r0
 800c87e:	b948      	cbnz	r0, 800c894 <_strtod_l+0x6a4>
 800c880:	f04f 0800 	mov.w	r8, #0
 800c884:	e6d7      	b.n	800c636 <_strtod_l+0x446>
 800c886:	f04f 32ff 	mov.w	r2, #4294967295
 800c88a:	fa02 f303 	lsl.w	r3, r2, r3
 800c88e:	ea03 0a0a 	and.w	sl, r3, sl
 800c892:	e7af      	b.n	800c7f4 <_strtod_l+0x604>
 800c894:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c896:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c898:	2d00      	cmp	r5, #0
 800c89a:	bfab      	itete	ge
 800c89c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c89e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c8a0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c8a2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c8a4:	bfac      	ite	ge
 800c8a6:	18ef      	addge	r7, r5, r3
 800c8a8:	1b5e      	sublt	r6, r3, r5
 800c8aa:	9b08      	ldr	r3, [sp, #32]
 800c8ac:	1aed      	subs	r5, r5, r3
 800c8ae:	4415      	add	r5, r2
 800c8b0:	4b65      	ldr	r3, [pc, #404]	@ (800ca48 <_strtod_l+0x858>)
 800c8b2:	3d01      	subs	r5, #1
 800c8b4:	429d      	cmp	r5, r3
 800c8b6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c8ba:	da50      	bge.n	800c95e <_strtod_l+0x76e>
 800c8bc:	1b5b      	subs	r3, r3, r5
 800c8be:	2b1f      	cmp	r3, #31
 800c8c0:	eba2 0203 	sub.w	r2, r2, r3
 800c8c4:	f04f 0101 	mov.w	r1, #1
 800c8c8:	dc3d      	bgt.n	800c946 <_strtod_l+0x756>
 800c8ca:	fa01 f303 	lsl.w	r3, r1, r3
 800c8ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	9310      	str	r3, [sp, #64]	@ 0x40
 800c8d4:	18bd      	adds	r5, r7, r2
 800c8d6:	9b08      	ldr	r3, [sp, #32]
 800c8d8:	42af      	cmp	r7, r5
 800c8da:	4416      	add	r6, r2
 800c8dc:	441e      	add	r6, r3
 800c8de:	463b      	mov	r3, r7
 800c8e0:	bfa8      	it	ge
 800c8e2:	462b      	movge	r3, r5
 800c8e4:	42b3      	cmp	r3, r6
 800c8e6:	bfa8      	it	ge
 800c8e8:	4633      	movge	r3, r6
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	bfc2      	ittt	gt
 800c8ee:	1aed      	subgt	r5, r5, r3
 800c8f0:	1af6      	subgt	r6, r6, r3
 800c8f2:	1aff      	subgt	r7, r7, r3
 800c8f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	dd16      	ble.n	800c928 <_strtod_l+0x738>
 800c8fa:	4641      	mov	r1, r8
 800c8fc:	9805      	ldr	r0, [sp, #20]
 800c8fe:	461a      	mov	r2, r3
 800c900:	f002 fee8 	bl	800f6d4 <__pow5mult>
 800c904:	4680      	mov	r8, r0
 800c906:	2800      	cmp	r0, #0
 800c908:	d0ba      	beq.n	800c880 <_strtod_l+0x690>
 800c90a:	4601      	mov	r1, r0
 800c90c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c90e:	9805      	ldr	r0, [sp, #20]
 800c910:	f002 fe3e 	bl	800f590 <__multiply>
 800c914:	900a      	str	r0, [sp, #40]	@ 0x28
 800c916:	2800      	cmp	r0, #0
 800c918:	f43f ae8d 	beq.w	800c636 <_strtod_l+0x446>
 800c91c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c91e:	9805      	ldr	r0, [sp, #20]
 800c920:	f002 fd22 	bl	800f368 <_Bfree>
 800c924:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c926:	931a      	str	r3, [sp, #104]	@ 0x68
 800c928:	2d00      	cmp	r5, #0
 800c92a:	dc1d      	bgt.n	800c968 <_strtod_l+0x778>
 800c92c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c92e:	2b00      	cmp	r3, #0
 800c930:	dd23      	ble.n	800c97a <_strtod_l+0x78a>
 800c932:	4649      	mov	r1, r9
 800c934:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c936:	9805      	ldr	r0, [sp, #20]
 800c938:	f002 fecc 	bl	800f6d4 <__pow5mult>
 800c93c:	4681      	mov	r9, r0
 800c93e:	b9e0      	cbnz	r0, 800c97a <_strtod_l+0x78a>
 800c940:	f04f 0900 	mov.w	r9, #0
 800c944:	e677      	b.n	800c636 <_strtod_l+0x446>
 800c946:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c94a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c94e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c952:	35e2      	adds	r5, #226	@ 0xe2
 800c954:	fa01 f305 	lsl.w	r3, r1, r5
 800c958:	9310      	str	r3, [sp, #64]	@ 0x40
 800c95a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c95c:	e7ba      	b.n	800c8d4 <_strtod_l+0x6e4>
 800c95e:	2300      	movs	r3, #0
 800c960:	9310      	str	r3, [sp, #64]	@ 0x40
 800c962:	2301      	movs	r3, #1
 800c964:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c966:	e7b5      	b.n	800c8d4 <_strtod_l+0x6e4>
 800c968:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c96a:	9805      	ldr	r0, [sp, #20]
 800c96c:	462a      	mov	r2, r5
 800c96e:	f002 ff0b 	bl	800f788 <__lshift>
 800c972:	901a      	str	r0, [sp, #104]	@ 0x68
 800c974:	2800      	cmp	r0, #0
 800c976:	d1d9      	bne.n	800c92c <_strtod_l+0x73c>
 800c978:	e65d      	b.n	800c636 <_strtod_l+0x446>
 800c97a:	2e00      	cmp	r6, #0
 800c97c:	dd07      	ble.n	800c98e <_strtod_l+0x79e>
 800c97e:	4649      	mov	r1, r9
 800c980:	9805      	ldr	r0, [sp, #20]
 800c982:	4632      	mov	r2, r6
 800c984:	f002 ff00 	bl	800f788 <__lshift>
 800c988:	4681      	mov	r9, r0
 800c98a:	2800      	cmp	r0, #0
 800c98c:	d0d8      	beq.n	800c940 <_strtod_l+0x750>
 800c98e:	2f00      	cmp	r7, #0
 800c990:	dd08      	ble.n	800c9a4 <_strtod_l+0x7b4>
 800c992:	4641      	mov	r1, r8
 800c994:	9805      	ldr	r0, [sp, #20]
 800c996:	463a      	mov	r2, r7
 800c998:	f002 fef6 	bl	800f788 <__lshift>
 800c99c:	4680      	mov	r8, r0
 800c99e:	2800      	cmp	r0, #0
 800c9a0:	f43f ae49 	beq.w	800c636 <_strtod_l+0x446>
 800c9a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c9a6:	9805      	ldr	r0, [sp, #20]
 800c9a8:	464a      	mov	r2, r9
 800c9aa:	f002 ff75 	bl	800f898 <__mdiff>
 800c9ae:	4604      	mov	r4, r0
 800c9b0:	2800      	cmp	r0, #0
 800c9b2:	f43f ae40 	beq.w	800c636 <_strtod_l+0x446>
 800c9b6:	68c3      	ldr	r3, [r0, #12]
 800c9b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	60c3      	str	r3, [r0, #12]
 800c9be:	4641      	mov	r1, r8
 800c9c0:	f002 ff4e 	bl	800f860 <__mcmp>
 800c9c4:	2800      	cmp	r0, #0
 800c9c6:	da45      	bge.n	800ca54 <_strtod_l+0x864>
 800c9c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9ca:	ea53 030a 	orrs.w	r3, r3, sl
 800c9ce:	d16b      	bne.n	800caa8 <_strtod_l+0x8b8>
 800c9d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d167      	bne.n	800caa8 <_strtod_l+0x8b8>
 800c9d8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c9dc:	0d1b      	lsrs	r3, r3, #20
 800c9de:	051b      	lsls	r3, r3, #20
 800c9e0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c9e4:	d960      	bls.n	800caa8 <_strtod_l+0x8b8>
 800c9e6:	6963      	ldr	r3, [r4, #20]
 800c9e8:	b913      	cbnz	r3, 800c9f0 <_strtod_l+0x800>
 800c9ea:	6923      	ldr	r3, [r4, #16]
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	dd5b      	ble.n	800caa8 <_strtod_l+0x8b8>
 800c9f0:	4621      	mov	r1, r4
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	9805      	ldr	r0, [sp, #20]
 800c9f6:	f002 fec7 	bl	800f788 <__lshift>
 800c9fa:	4641      	mov	r1, r8
 800c9fc:	4604      	mov	r4, r0
 800c9fe:	f002 ff2f 	bl	800f860 <__mcmp>
 800ca02:	2800      	cmp	r0, #0
 800ca04:	dd50      	ble.n	800caa8 <_strtod_l+0x8b8>
 800ca06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ca0a:	9a08      	ldr	r2, [sp, #32]
 800ca0c:	0d1b      	lsrs	r3, r3, #20
 800ca0e:	051b      	lsls	r3, r3, #20
 800ca10:	2a00      	cmp	r2, #0
 800ca12:	d06a      	beq.n	800caea <_strtod_l+0x8fa>
 800ca14:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ca18:	d867      	bhi.n	800caea <_strtod_l+0x8fa>
 800ca1a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ca1e:	f67f ae9d 	bls.w	800c75c <_strtod_l+0x56c>
 800ca22:	4b0a      	ldr	r3, [pc, #40]	@ (800ca4c <_strtod_l+0x85c>)
 800ca24:	4650      	mov	r0, sl
 800ca26:	4659      	mov	r1, fp
 800ca28:	2200      	movs	r2, #0
 800ca2a:	f7f3 fe15 	bl	8000658 <__aeabi_dmul>
 800ca2e:	4b08      	ldr	r3, [pc, #32]	@ (800ca50 <_strtod_l+0x860>)
 800ca30:	400b      	ands	r3, r1
 800ca32:	4682      	mov	sl, r0
 800ca34:	468b      	mov	fp, r1
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	f47f ae08 	bne.w	800c64c <_strtod_l+0x45c>
 800ca3c:	9a05      	ldr	r2, [sp, #20]
 800ca3e:	2322      	movs	r3, #34	@ 0x22
 800ca40:	6013      	str	r3, [r2, #0]
 800ca42:	e603      	b.n	800c64c <_strtod_l+0x45c>
 800ca44:	08012080 	.word	0x08012080
 800ca48:	fffffc02 	.word	0xfffffc02
 800ca4c:	39500000 	.word	0x39500000
 800ca50:	7ff00000 	.word	0x7ff00000
 800ca54:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ca58:	d165      	bne.n	800cb26 <_strtod_l+0x936>
 800ca5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ca5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca60:	b35a      	cbz	r2, 800caba <_strtod_l+0x8ca>
 800ca62:	4a9f      	ldr	r2, [pc, #636]	@ (800cce0 <_strtod_l+0xaf0>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d12b      	bne.n	800cac0 <_strtod_l+0x8d0>
 800ca68:	9b08      	ldr	r3, [sp, #32]
 800ca6a:	4651      	mov	r1, sl
 800ca6c:	b303      	cbz	r3, 800cab0 <_strtod_l+0x8c0>
 800ca6e:	4b9d      	ldr	r3, [pc, #628]	@ (800cce4 <_strtod_l+0xaf4>)
 800ca70:	465a      	mov	r2, fp
 800ca72:	4013      	ands	r3, r2
 800ca74:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ca78:	f04f 32ff 	mov.w	r2, #4294967295
 800ca7c:	d81b      	bhi.n	800cab6 <_strtod_l+0x8c6>
 800ca7e:	0d1b      	lsrs	r3, r3, #20
 800ca80:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ca84:	fa02 f303 	lsl.w	r3, r2, r3
 800ca88:	4299      	cmp	r1, r3
 800ca8a:	d119      	bne.n	800cac0 <_strtod_l+0x8d0>
 800ca8c:	4b96      	ldr	r3, [pc, #600]	@ (800cce8 <_strtod_l+0xaf8>)
 800ca8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d102      	bne.n	800ca9a <_strtod_l+0x8aa>
 800ca94:	3101      	adds	r1, #1
 800ca96:	f43f adce 	beq.w	800c636 <_strtod_l+0x446>
 800ca9a:	4b92      	ldr	r3, [pc, #584]	@ (800cce4 <_strtod_l+0xaf4>)
 800ca9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ca9e:	401a      	ands	r2, r3
 800caa0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800caa4:	f04f 0a00 	mov.w	sl, #0
 800caa8:	9b08      	ldr	r3, [sp, #32]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d1b9      	bne.n	800ca22 <_strtod_l+0x832>
 800caae:	e5cd      	b.n	800c64c <_strtod_l+0x45c>
 800cab0:	f04f 33ff 	mov.w	r3, #4294967295
 800cab4:	e7e8      	b.n	800ca88 <_strtod_l+0x898>
 800cab6:	4613      	mov	r3, r2
 800cab8:	e7e6      	b.n	800ca88 <_strtod_l+0x898>
 800caba:	ea53 030a 	orrs.w	r3, r3, sl
 800cabe:	d0a2      	beq.n	800ca06 <_strtod_l+0x816>
 800cac0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cac2:	b1db      	cbz	r3, 800cafc <_strtod_l+0x90c>
 800cac4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cac6:	4213      	tst	r3, r2
 800cac8:	d0ee      	beq.n	800caa8 <_strtod_l+0x8b8>
 800caca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cacc:	9a08      	ldr	r2, [sp, #32]
 800cace:	4650      	mov	r0, sl
 800cad0:	4659      	mov	r1, fp
 800cad2:	b1bb      	cbz	r3, 800cb04 <_strtod_l+0x914>
 800cad4:	f7ff fb6d 	bl	800c1b2 <sulp>
 800cad8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cadc:	ec53 2b10 	vmov	r2, r3, d0
 800cae0:	f7f3 fc04 	bl	80002ec <__adddf3>
 800cae4:	4682      	mov	sl, r0
 800cae6:	468b      	mov	fp, r1
 800cae8:	e7de      	b.n	800caa8 <_strtod_l+0x8b8>
 800caea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800caee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800caf2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800caf6:	f04f 3aff 	mov.w	sl, #4294967295
 800cafa:	e7d5      	b.n	800caa8 <_strtod_l+0x8b8>
 800cafc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cafe:	ea13 0f0a 	tst.w	r3, sl
 800cb02:	e7e1      	b.n	800cac8 <_strtod_l+0x8d8>
 800cb04:	f7ff fb55 	bl	800c1b2 <sulp>
 800cb08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb0c:	ec53 2b10 	vmov	r2, r3, d0
 800cb10:	f7f3 fbea 	bl	80002e8 <__aeabi_dsub>
 800cb14:	2200      	movs	r2, #0
 800cb16:	2300      	movs	r3, #0
 800cb18:	4682      	mov	sl, r0
 800cb1a:	468b      	mov	fp, r1
 800cb1c:	f7f4 f804 	bl	8000b28 <__aeabi_dcmpeq>
 800cb20:	2800      	cmp	r0, #0
 800cb22:	d0c1      	beq.n	800caa8 <_strtod_l+0x8b8>
 800cb24:	e61a      	b.n	800c75c <_strtod_l+0x56c>
 800cb26:	4641      	mov	r1, r8
 800cb28:	4620      	mov	r0, r4
 800cb2a:	f003 f811 	bl	800fb50 <__ratio>
 800cb2e:	ec57 6b10 	vmov	r6, r7, d0
 800cb32:	2200      	movs	r2, #0
 800cb34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cb38:	4630      	mov	r0, r6
 800cb3a:	4639      	mov	r1, r7
 800cb3c:	f7f4 f808 	bl	8000b50 <__aeabi_dcmple>
 800cb40:	2800      	cmp	r0, #0
 800cb42:	d06f      	beq.n	800cc24 <_strtod_l+0xa34>
 800cb44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d17a      	bne.n	800cc40 <_strtod_l+0xa50>
 800cb4a:	f1ba 0f00 	cmp.w	sl, #0
 800cb4e:	d158      	bne.n	800cc02 <_strtod_l+0xa12>
 800cb50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d15a      	bne.n	800cc10 <_strtod_l+0xa20>
 800cb5a:	4b64      	ldr	r3, [pc, #400]	@ (800ccec <_strtod_l+0xafc>)
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	4630      	mov	r0, r6
 800cb60:	4639      	mov	r1, r7
 800cb62:	f7f3 ffeb 	bl	8000b3c <__aeabi_dcmplt>
 800cb66:	2800      	cmp	r0, #0
 800cb68:	d159      	bne.n	800cc1e <_strtod_l+0xa2e>
 800cb6a:	4630      	mov	r0, r6
 800cb6c:	4639      	mov	r1, r7
 800cb6e:	4b60      	ldr	r3, [pc, #384]	@ (800ccf0 <_strtod_l+0xb00>)
 800cb70:	2200      	movs	r2, #0
 800cb72:	f7f3 fd71 	bl	8000658 <__aeabi_dmul>
 800cb76:	4606      	mov	r6, r0
 800cb78:	460f      	mov	r7, r1
 800cb7a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800cb7e:	9606      	str	r6, [sp, #24]
 800cb80:	9307      	str	r3, [sp, #28]
 800cb82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cb86:	4d57      	ldr	r5, [pc, #348]	@ (800cce4 <_strtod_l+0xaf4>)
 800cb88:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cb8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb8e:	401d      	ands	r5, r3
 800cb90:	4b58      	ldr	r3, [pc, #352]	@ (800ccf4 <_strtod_l+0xb04>)
 800cb92:	429d      	cmp	r5, r3
 800cb94:	f040 80b2 	bne.w	800ccfc <_strtod_l+0xb0c>
 800cb98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb9a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cb9e:	ec4b ab10 	vmov	d0, sl, fp
 800cba2:	f002 ff0d 	bl	800f9c0 <__ulp>
 800cba6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cbaa:	ec51 0b10 	vmov	r0, r1, d0
 800cbae:	f7f3 fd53 	bl	8000658 <__aeabi_dmul>
 800cbb2:	4652      	mov	r2, sl
 800cbb4:	465b      	mov	r3, fp
 800cbb6:	f7f3 fb99 	bl	80002ec <__adddf3>
 800cbba:	460b      	mov	r3, r1
 800cbbc:	4949      	ldr	r1, [pc, #292]	@ (800cce4 <_strtod_l+0xaf4>)
 800cbbe:	4a4e      	ldr	r2, [pc, #312]	@ (800ccf8 <_strtod_l+0xb08>)
 800cbc0:	4019      	ands	r1, r3
 800cbc2:	4291      	cmp	r1, r2
 800cbc4:	4682      	mov	sl, r0
 800cbc6:	d942      	bls.n	800cc4e <_strtod_l+0xa5e>
 800cbc8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cbca:	4b47      	ldr	r3, [pc, #284]	@ (800cce8 <_strtod_l+0xaf8>)
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d103      	bne.n	800cbd8 <_strtod_l+0x9e8>
 800cbd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	f43f ad2f 	beq.w	800c636 <_strtod_l+0x446>
 800cbd8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cce8 <_strtod_l+0xaf8>
 800cbdc:	f04f 3aff 	mov.w	sl, #4294967295
 800cbe0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cbe2:	9805      	ldr	r0, [sp, #20]
 800cbe4:	f002 fbc0 	bl	800f368 <_Bfree>
 800cbe8:	9805      	ldr	r0, [sp, #20]
 800cbea:	4649      	mov	r1, r9
 800cbec:	f002 fbbc 	bl	800f368 <_Bfree>
 800cbf0:	9805      	ldr	r0, [sp, #20]
 800cbf2:	4641      	mov	r1, r8
 800cbf4:	f002 fbb8 	bl	800f368 <_Bfree>
 800cbf8:	9805      	ldr	r0, [sp, #20]
 800cbfa:	4621      	mov	r1, r4
 800cbfc:	f002 fbb4 	bl	800f368 <_Bfree>
 800cc00:	e619      	b.n	800c836 <_strtod_l+0x646>
 800cc02:	f1ba 0f01 	cmp.w	sl, #1
 800cc06:	d103      	bne.n	800cc10 <_strtod_l+0xa20>
 800cc08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	f43f ada6 	beq.w	800c75c <_strtod_l+0x56c>
 800cc10:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ccc0 <_strtod_l+0xad0>
 800cc14:	4f35      	ldr	r7, [pc, #212]	@ (800ccec <_strtod_l+0xafc>)
 800cc16:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cc1a:	2600      	movs	r6, #0
 800cc1c:	e7b1      	b.n	800cb82 <_strtod_l+0x992>
 800cc1e:	4f34      	ldr	r7, [pc, #208]	@ (800ccf0 <_strtod_l+0xb00>)
 800cc20:	2600      	movs	r6, #0
 800cc22:	e7aa      	b.n	800cb7a <_strtod_l+0x98a>
 800cc24:	4b32      	ldr	r3, [pc, #200]	@ (800ccf0 <_strtod_l+0xb00>)
 800cc26:	4630      	mov	r0, r6
 800cc28:	4639      	mov	r1, r7
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	f7f3 fd14 	bl	8000658 <__aeabi_dmul>
 800cc30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc32:	4606      	mov	r6, r0
 800cc34:	460f      	mov	r7, r1
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d09f      	beq.n	800cb7a <_strtod_l+0x98a>
 800cc3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cc3e:	e7a0      	b.n	800cb82 <_strtod_l+0x992>
 800cc40:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ccc8 <_strtod_l+0xad8>
 800cc44:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cc48:	ec57 6b17 	vmov	r6, r7, d7
 800cc4c:	e799      	b.n	800cb82 <_strtod_l+0x992>
 800cc4e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cc52:	9b08      	ldr	r3, [sp, #32]
 800cc54:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d1c1      	bne.n	800cbe0 <_strtod_l+0x9f0>
 800cc5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cc60:	0d1b      	lsrs	r3, r3, #20
 800cc62:	051b      	lsls	r3, r3, #20
 800cc64:	429d      	cmp	r5, r3
 800cc66:	d1bb      	bne.n	800cbe0 <_strtod_l+0x9f0>
 800cc68:	4630      	mov	r0, r6
 800cc6a:	4639      	mov	r1, r7
 800cc6c:	f7f4 f854 	bl	8000d18 <__aeabi_d2lz>
 800cc70:	f7f3 fcc4 	bl	80005fc <__aeabi_l2d>
 800cc74:	4602      	mov	r2, r0
 800cc76:	460b      	mov	r3, r1
 800cc78:	4630      	mov	r0, r6
 800cc7a:	4639      	mov	r1, r7
 800cc7c:	f7f3 fb34 	bl	80002e8 <__aeabi_dsub>
 800cc80:	460b      	mov	r3, r1
 800cc82:	4602      	mov	r2, r0
 800cc84:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cc88:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cc8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc8e:	ea46 060a 	orr.w	r6, r6, sl
 800cc92:	431e      	orrs	r6, r3
 800cc94:	d06f      	beq.n	800cd76 <_strtod_l+0xb86>
 800cc96:	a30e      	add	r3, pc, #56	@ (adr r3, 800ccd0 <_strtod_l+0xae0>)
 800cc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc9c:	f7f3 ff4e 	bl	8000b3c <__aeabi_dcmplt>
 800cca0:	2800      	cmp	r0, #0
 800cca2:	f47f acd3 	bne.w	800c64c <_strtod_l+0x45c>
 800cca6:	a30c      	add	r3, pc, #48	@ (adr r3, 800ccd8 <_strtod_l+0xae8>)
 800cca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ccb0:	f7f3 ff62 	bl	8000b78 <__aeabi_dcmpgt>
 800ccb4:	2800      	cmp	r0, #0
 800ccb6:	d093      	beq.n	800cbe0 <_strtod_l+0x9f0>
 800ccb8:	e4c8      	b.n	800c64c <_strtod_l+0x45c>
 800ccba:	bf00      	nop
 800ccbc:	f3af 8000 	nop.w
 800ccc0:	00000000 	.word	0x00000000
 800ccc4:	bff00000 	.word	0xbff00000
 800ccc8:	00000000 	.word	0x00000000
 800cccc:	3ff00000 	.word	0x3ff00000
 800ccd0:	94a03595 	.word	0x94a03595
 800ccd4:	3fdfffff 	.word	0x3fdfffff
 800ccd8:	35afe535 	.word	0x35afe535
 800ccdc:	3fe00000 	.word	0x3fe00000
 800cce0:	000fffff 	.word	0x000fffff
 800cce4:	7ff00000 	.word	0x7ff00000
 800cce8:	7fefffff 	.word	0x7fefffff
 800ccec:	3ff00000 	.word	0x3ff00000
 800ccf0:	3fe00000 	.word	0x3fe00000
 800ccf4:	7fe00000 	.word	0x7fe00000
 800ccf8:	7c9fffff 	.word	0x7c9fffff
 800ccfc:	9b08      	ldr	r3, [sp, #32]
 800ccfe:	b323      	cbz	r3, 800cd4a <_strtod_l+0xb5a>
 800cd00:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cd04:	d821      	bhi.n	800cd4a <_strtod_l+0xb5a>
 800cd06:	a328      	add	r3, pc, #160	@ (adr r3, 800cda8 <_strtod_l+0xbb8>)
 800cd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd0c:	4630      	mov	r0, r6
 800cd0e:	4639      	mov	r1, r7
 800cd10:	f7f3 ff1e 	bl	8000b50 <__aeabi_dcmple>
 800cd14:	b1a0      	cbz	r0, 800cd40 <_strtod_l+0xb50>
 800cd16:	4639      	mov	r1, r7
 800cd18:	4630      	mov	r0, r6
 800cd1a:	f7f3 ff75 	bl	8000c08 <__aeabi_d2uiz>
 800cd1e:	2801      	cmp	r0, #1
 800cd20:	bf38      	it	cc
 800cd22:	2001      	movcc	r0, #1
 800cd24:	f7f3 fc1e 	bl	8000564 <__aeabi_ui2d>
 800cd28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd2a:	4606      	mov	r6, r0
 800cd2c:	460f      	mov	r7, r1
 800cd2e:	b9fb      	cbnz	r3, 800cd70 <_strtod_l+0xb80>
 800cd30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cd34:	9014      	str	r0, [sp, #80]	@ 0x50
 800cd36:	9315      	str	r3, [sp, #84]	@ 0x54
 800cd38:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cd3c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cd40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cd42:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cd46:	1b5b      	subs	r3, r3, r5
 800cd48:	9311      	str	r3, [sp, #68]	@ 0x44
 800cd4a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cd4e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cd52:	f002 fe35 	bl	800f9c0 <__ulp>
 800cd56:	4650      	mov	r0, sl
 800cd58:	ec53 2b10 	vmov	r2, r3, d0
 800cd5c:	4659      	mov	r1, fp
 800cd5e:	f7f3 fc7b 	bl	8000658 <__aeabi_dmul>
 800cd62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cd66:	f7f3 fac1 	bl	80002ec <__adddf3>
 800cd6a:	4682      	mov	sl, r0
 800cd6c:	468b      	mov	fp, r1
 800cd6e:	e770      	b.n	800cc52 <_strtod_l+0xa62>
 800cd70:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cd74:	e7e0      	b.n	800cd38 <_strtod_l+0xb48>
 800cd76:	a30e      	add	r3, pc, #56	@ (adr r3, 800cdb0 <_strtod_l+0xbc0>)
 800cd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7c:	f7f3 fede 	bl	8000b3c <__aeabi_dcmplt>
 800cd80:	e798      	b.n	800ccb4 <_strtod_l+0xac4>
 800cd82:	2300      	movs	r3, #0
 800cd84:	930e      	str	r3, [sp, #56]	@ 0x38
 800cd86:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cd88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd8a:	6013      	str	r3, [r2, #0]
 800cd8c:	f7ff ba6d 	b.w	800c26a <_strtod_l+0x7a>
 800cd90:	2a65      	cmp	r2, #101	@ 0x65
 800cd92:	f43f ab68 	beq.w	800c466 <_strtod_l+0x276>
 800cd96:	2a45      	cmp	r2, #69	@ 0x45
 800cd98:	f43f ab65 	beq.w	800c466 <_strtod_l+0x276>
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	f7ff bba0 	b.w	800c4e2 <_strtod_l+0x2f2>
 800cda2:	bf00      	nop
 800cda4:	f3af 8000 	nop.w
 800cda8:	ffc00000 	.word	0xffc00000
 800cdac:	41dfffff 	.word	0x41dfffff
 800cdb0:	94a03595 	.word	0x94a03595
 800cdb4:	3fcfffff 	.word	0x3fcfffff

0800cdb8 <strtod>:
 800cdb8:	460a      	mov	r2, r1
 800cdba:	4601      	mov	r1, r0
 800cdbc:	4802      	ldr	r0, [pc, #8]	@ (800cdc8 <strtod+0x10>)
 800cdbe:	4b03      	ldr	r3, [pc, #12]	@ (800cdcc <strtod+0x14>)
 800cdc0:	6800      	ldr	r0, [r0, #0]
 800cdc2:	f7ff ba15 	b.w	800c1f0 <_strtod_l>
 800cdc6:	bf00      	nop
 800cdc8:	200001c4 	.word	0x200001c4
 800cdcc:	20000058 	.word	0x20000058

0800cdd0 <_strtol_l.isra.0>:
 800cdd0:	2b24      	cmp	r3, #36	@ 0x24
 800cdd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdd6:	4686      	mov	lr, r0
 800cdd8:	4690      	mov	r8, r2
 800cdda:	d801      	bhi.n	800cde0 <_strtol_l.isra.0+0x10>
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d106      	bne.n	800cdee <_strtol_l.isra.0+0x1e>
 800cde0:	f000 ff60 	bl	800dca4 <__errno>
 800cde4:	2316      	movs	r3, #22
 800cde6:	6003      	str	r3, [r0, #0]
 800cde8:	2000      	movs	r0, #0
 800cdea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdee:	4834      	ldr	r0, [pc, #208]	@ (800cec0 <_strtol_l.isra.0+0xf0>)
 800cdf0:	460d      	mov	r5, r1
 800cdf2:	462a      	mov	r2, r5
 800cdf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cdf8:	5d06      	ldrb	r6, [r0, r4]
 800cdfa:	f016 0608 	ands.w	r6, r6, #8
 800cdfe:	d1f8      	bne.n	800cdf2 <_strtol_l.isra.0+0x22>
 800ce00:	2c2d      	cmp	r4, #45	@ 0x2d
 800ce02:	d110      	bne.n	800ce26 <_strtol_l.isra.0+0x56>
 800ce04:	782c      	ldrb	r4, [r5, #0]
 800ce06:	2601      	movs	r6, #1
 800ce08:	1c95      	adds	r5, r2, #2
 800ce0a:	f033 0210 	bics.w	r2, r3, #16
 800ce0e:	d115      	bne.n	800ce3c <_strtol_l.isra.0+0x6c>
 800ce10:	2c30      	cmp	r4, #48	@ 0x30
 800ce12:	d10d      	bne.n	800ce30 <_strtol_l.isra.0+0x60>
 800ce14:	782a      	ldrb	r2, [r5, #0]
 800ce16:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ce1a:	2a58      	cmp	r2, #88	@ 0x58
 800ce1c:	d108      	bne.n	800ce30 <_strtol_l.isra.0+0x60>
 800ce1e:	786c      	ldrb	r4, [r5, #1]
 800ce20:	3502      	adds	r5, #2
 800ce22:	2310      	movs	r3, #16
 800ce24:	e00a      	b.n	800ce3c <_strtol_l.isra.0+0x6c>
 800ce26:	2c2b      	cmp	r4, #43	@ 0x2b
 800ce28:	bf04      	itt	eq
 800ce2a:	782c      	ldrbeq	r4, [r5, #0]
 800ce2c:	1c95      	addeq	r5, r2, #2
 800ce2e:	e7ec      	b.n	800ce0a <_strtol_l.isra.0+0x3a>
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d1f6      	bne.n	800ce22 <_strtol_l.isra.0+0x52>
 800ce34:	2c30      	cmp	r4, #48	@ 0x30
 800ce36:	bf14      	ite	ne
 800ce38:	230a      	movne	r3, #10
 800ce3a:	2308      	moveq	r3, #8
 800ce3c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ce40:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ce44:	2200      	movs	r2, #0
 800ce46:	fbbc f9f3 	udiv	r9, ip, r3
 800ce4a:	4610      	mov	r0, r2
 800ce4c:	fb03 ca19 	mls	sl, r3, r9, ip
 800ce50:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ce54:	2f09      	cmp	r7, #9
 800ce56:	d80f      	bhi.n	800ce78 <_strtol_l.isra.0+0xa8>
 800ce58:	463c      	mov	r4, r7
 800ce5a:	42a3      	cmp	r3, r4
 800ce5c:	dd1b      	ble.n	800ce96 <_strtol_l.isra.0+0xc6>
 800ce5e:	1c57      	adds	r7, r2, #1
 800ce60:	d007      	beq.n	800ce72 <_strtol_l.isra.0+0xa2>
 800ce62:	4581      	cmp	r9, r0
 800ce64:	d314      	bcc.n	800ce90 <_strtol_l.isra.0+0xc0>
 800ce66:	d101      	bne.n	800ce6c <_strtol_l.isra.0+0x9c>
 800ce68:	45a2      	cmp	sl, r4
 800ce6a:	db11      	blt.n	800ce90 <_strtol_l.isra.0+0xc0>
 800ce6c:	fb00 4003 	mla	r0, r0, r3, r4
 800ce70:	2201      	movs	r2, #1
 800ce72:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce76:	e7eb      	b.n	800ce50 <_strtol_l.isra.0+0x80>
 800ce78:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ce7c:	2f19      	cmp	r7, #25
 800ce7e:	d801      	bhi.n	800ce84 <_strtol_l.isra.0+0xb4>
 800ce80:	3c37      	subs	r4, #55	@ 0x37
 800ce82:	e7ea      	b.n	800ce5a <_strtol_l.isra.0+0x8a>
 800ce84:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ce88:	2f19      	cmp	r7, #25
 800ce8a:	d804      	bhi.n	800ce96 <_strtol_l.isra.0+0xc6>
 800ce8c:	3c57      	subs	r4, #87	@ 0x57
 800ce8e:	e7e4      	b.n	800ce5a <_strtol_l.isra.0+0x8a>
 800ce90:	f04f 32ff 	mov.w	r2, #4294967295
 800ce94:	e7ed      	b.n	800ce72 <_strtol_l.isra.0+0xa2>
 800ce96:	1c53      	adds	r3, r2, #1
 800ce98:	d108      	bne.n	800ceac <_strtol_l.isra.0+0xdc>
 800ce9a:	2322      	movs	r3, #34	@ 0x22
 800ce9c:	f8ce 3000 	str.w	r3, [lr]
 800cea0:	4660      	mov	r0, ip
 800cea2:	f1b8 0f00 	cmp.w	r8, #0
 800cea6:	d0a0      	beq.n	800cdea <_strtol_l.isra.0+0x1a>
 800cea8:	1e69      	subs	r1, r5, #1
 800ceaa:	e006      	b.n	800ceba <_strtol_l.isra.0+0xea>
 800ceac:	b106      	cbz	r6, 800ceb0 <_strtol_l.isra.0+0xe0>
 800ceae:	4240      	negs	r0, r0
 800ceb0:	f1b8 0f00 	cmp.w	r8, #0
 800ceb4:	d099      	beq.n	800cdea <_strtol_l.isra.0+0x1a>
 800ceb6:	2a00      	cmp	r2, #0
 800ceb8:	d1f6      	bne.n	800cea8 <_strtol_l.isra.0+0xd8>
 800ceba:	f8c8 1000 	str.w	r1, [r8]
 800cebe:	e794      	b.n	800cdea <_strtol_l.isra.0+0x1a>
 800cec0:	080120a9 	.word	0x080120a9

0800cec4 <strtol>:
 800cec4:	4613      	mov	r3, r2
 800cec6:	460a      	mov	r2, r1
 800cec8:	4601      	mov	r1, r0
 800ceca:	4802      	ldr	r0, [pc, #8]	@ (800ced4 <strtol+0x10>)
 800cecc:	6800      	ldr	r0, [r0, #0]
 800cece:	f7ff bf7f 	b.w	800cdd0 <_strtol_l.isra.0>
 800ced2:	bf00      	nop
 800ced4:	200001c4 	.word	0x200001c4

0800ced8 <__cvt>:
 800ced8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cedc:	ec57 6b10 	vmov	r6, r7, d0
 800cee0:	2f00      	cmp	r7, #0
 800cee2:	460c      	mov	r4, r1
 800cee4:	4619      	mov	r1, r3
 800cee6:	463b      	mov	r3, r7
 800cee8:	bfbb      	ittet	lt
 800ceea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ceee:	461f      	movlt	r7, r3
 800cef0:	2300      	movge	r3, #0
 800cef2:	232d      	movlt	r3, #45	@ 0x2d
 800cef4:	700b      	strb	r3, [r1, #0]
 800cef6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cef8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cefc:	4691      	mov	r9, r2
 800cefe:	f023 0820 	bic.w	r8, r3, #32
 800cf02:	bfbc      	itt	lt
 800cf04:	4632      	movlt	r2, r6
 800cf06:	4616      	movlt	r6, r2
 800cf08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cf0c:	d005      	beq.n	800cf1a <__cvt+0x42>
 800cf0e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cf12:	d100      	bne.n	800cf16 <__cvt+0x3e>
 800cf14:	3401      	adds	r4, #1
 800cf16:	2102      	movs	r1, #2
 800cf18:	e000      	b.n	800cf1c <__cvt+0x44>
 800cf1a:	2103      	movs	r1, #3
 800cf1c:	ab03      	add	r3, sp, #12
 800cf1e:	9301      	str	r3, [sp, #4]
 800cf20:	ab02      	add	r3, sp, #8
 800cf22:	9300      	str	r3, [sp, #0]
 800cf24:	ec47 6b10 	vmov	d0, r6, r7
 800cf28:	4653      	mov	r3, sl
 800cf2a:	4622      	mov	r2, r4
 800cf2c:	f000 ffc0 	bl	800deb0 <_dtoa_r>
 800cf30:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cf34:	4605      	mov	r5, r0
 800cf36:	d119      	bne.n	800cf6c <__cvt+0x94>
 800cf38:	f019 0f01 	tst.w	r9, #1
 800cf3c:	d00e      	beq.n	800cf5c <__cvt+0x84>
 800cf3e:	eb00 0904 	add.w	r9, r0, r4
 800cf42:	2200      	movs	r2, #0
 800cf44:	2300      	movs	r3, #0
 800cf46:	4630      	mov	r0, r6
 800cf48:	4639      	mov	r1, r7
 800cf4a:	f7f3 fded 	bl	8000b28 <__aeabi_dcmpeq>
 800cf4e:	b108      	cbz	r0, 800cf54 <__cvt+0x7c>
 800cf50:	f8cd 900c 	str.w	r9, [sp, #12]
 800cf54:	2230      	movs	r2, #48	@ 0x30
 800cf56:	9b03      	ldr	r3, [sp, #12]
 800cf58:	454b      	cmp	r3, r9
 800cf5a:	d31e      	bcc.n	800cf9a <__cvt+0xc2>
 800cf5c:	9b03      	ldr	r3, [sp, #12]
 800cf5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf60:	1b5b      	subs	r3, r3, r5
 800cf62:	4628      	mov	r0, r5
 800cf64:	6013      	str	r3, [r2, #0]
 800cf66:	b004      	add	sp, #16
 800cf68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cf70:	eb00 0904 	add.w	r9, r0, r4
 800cf74:	d1e5      	bne.n	800cf42 <__cvt+0x6a>
 800cf76:	7803      	ldrb	r3, [r0, #0]
 800cf78:	2b30      	cmp	r3, #48	@ 0x30
 800cf7a:	d10a      	bne.n	800cf92 <__cvt+0xba>
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	2300      	movs	r3, #0
 800cf80:	4630      	mov	r0, r6
 800cf82:	4639      	mov	r1, r7
 800cf84:	f7f3 fdd0 	bl	8000b28 <__aeabi_dcmpeq>
 800cf88:	b918      	cbnz	r0, 800cf92 <__cvt+0xba>
 800cf8a:	f1c4 0401 	rsb	r4, r4, #1
 800cf8e:	f8ca 4000 	str.w	r4, [sl]
 800cf92:	f8da 3000 	ldr.w	r3, [sl]
 800cf96:	4499      	add	r9, r3
 800cf98:	e7d3      	b.n	800cf42 <__cvt+0x6a>
 800cf9a:	1c59      	adds	r1, r3, #1
 800cf9c:	9103      	str	r1, [sp, #12]
 800cf9e:	701a      	strb	r2, [r3, #0]
 800cfa0:	e7d9      	b.n	800cf56 <__cvt+0x7e>

0800cfa2 <__exponent>:
 800cfa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfa4:	2900      	cmp	r1, #0
 800cfa6:	bfba      	itte	lt
 800cfa8:	4249      	neglt	r1, r1
 800cfaa:	232d      	movlt	r3, #45	@ 0x2d
 800cfac:	232b      	movge	r3, #43	@ 0x2b
 800cfae:	2909      	cmp	r1, #9
 800cfb0:	7002      	strb	r2, [r0, #0]
 800cfb2:	7043      	strb	r3, [r0, #1]
 800cfb4:	dd29      	ble.n	800d00a <__exponent+0x68>
 800cfb6:	f10d 0307 	add.w	r3, sp, #7
 800cfba:	461d      	mov	r5, r3
 800cfbc:	270a      	movs	r7, #10
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	fbb1 f6f7 	udiv	r6, r1, r7
 800cfc4:	fb07 1416 	mls	r4, r7, r6, r1
 800cfc8:	3430      	adds	r4, #48	@ 0x30
 800cfca:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cfce:	460c      	mov	r4, r1
 800cfd0:	2c63      	cmp	r4, #99	@ 0x63
 800cfd2:	f103 33ff 	add.w	r3, r3, #4294967295
 800cfd6:	4631      	mov	r1, r6
 800cfd8:	dcf1      	bgt.n	800cfbe <__exponent+0x1c>
 800cfda:	3130      	adds	r1, #48	@ 0x30
 800cfdc:	1e94      	subs	r4, r2, #2
 800cfde:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cfe2:	1c41      	adds	r1, r0, #1
 800cfe4:	4623      	mov	r3, r4
 800cfe6:	42ab      	cmp	r3, r5
 800cfe8:	d30a      	bcc.n	800d000 <__exponent+0x5e>
 800cfea:	f10d 0309 	add.w	r3, sp, #9
 800cfee:	1a9b      	subs	r3, r3, r2
 800cff0:	42ac      	cmp	r4, r5
 800cff2:	bf88      	it	hi
 800cff4:	2300      	movhi	r3, #0
 800cff6:	3302      	adds	r3, #2
 800cff8:	4403      	add	r3, r0
 800cffa:	1a18      	subs	r0, r3, r0
 800cffc:	b003      	add	sp, #12
 800cffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d000:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d004:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d008:	e7ed      	b.n	800cfe6 <__exponent+0x44>
 800d00a:	2330      	movs	r3, #48	@ 0x30
 800d00c:	3130      	adds	r1, #48	@ 0x30
 800d00e:	7083      	strb	r3, [r0, #2]
 800d010:	70c1      	strb	r1, [r0, #3]
 800d012:	1d03      	adds	r3, r0, #4
 800d014:	e7f1      	b.n	800cffa <__exponent+0x58>
	...

0800d018 <_printf_float>:
 800d018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d01c:	b08d      	sub	sp, #52	@ 0x34
 800d01e:	460c      	mov	r4, r1
 800d020:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d024:	4616      	mov	r6, r2
 800d026:	461f      	mov	r7, r3
 800d028:	4605      	mov	r5, r0
 800d02a:	f000 fdf1 	bl	800dc10 <_localeconv_r>
 800d02e:	6803      	ldr	r3, [r0, #0]
 800d030:	9304      	str	r3, [sp, #16]
 800d032:	4618      	mov	r0, r3
 800d034:	f7f3 f94c 	bl	80002d0 <strlen>
 800d038:	2300      	movs	r3, #0
 800d03a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d03c:	f8d8 3000 	ldr.w	r3, [r8]
 800d040:	9005      	str	r0, [sp, #20]
 800d042:	3307      	adds	r3, #7
 800d044:	f023 0307 	bic.w	r3, r3, #7
 800d048:	f103 0208 	add.w	r2, r3, #8
 800d04c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d050:	f8d4 b000 	ldr.w	fp, [r4]
 800d054:	f8c8 2000 	str.w	r2, [r8]
 800d058:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d05c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d060:	9307      	str	r3, [sp, #28]
 800d062:	f8cd 8018 	str.w	r8, [sp, #24]
 800d066:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d06a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d06e:	4b9c      	ldr	r3, [pc, #624]	@ (800d2e0 <_printf_float+0x2c8>)
 800d070:	f04f 32ff 	mov.w	r2, #4294967295
 800d074:	f7f3 fd8a 	bl	8000b8c <__aeabi_dcmpun>
 800d078:	bb70      	cbnz	r0, 800d0d8 <_printf_float+0xc0>
 800d07a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d07e:	4b98      	ldr	r3, [pc, #608]	@ (800d2e0 <_printf_float+0x2c8>)
 800d080:	f04f 32ff 	mov.w	r2, #4294967295
 800d084:	f7f3 fd64 	bl	8000b50 <__aeabi_dcmple>
 800d088:	bb30      	cbnz	r0, 800d0d8 <_printf_float+0xc0>
 800d08a:	2200      	movs	r2, #0
 800d08c:	2300      	movs	r3, #0
 800d08e:	4640      	mov	r0, r8
 800d090:	4649      	mov	r1, r9
 800d092:	f7f3 fd53 	bl	8000b3c <__aeabi_dcmplt>
 800d096:	b110      	cbz	r0, 800d09e <_printf_float+0x86>
 800d098:	232d      	movs	r3, #45	@ 0x2d
 800d09a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d09e:	4a91      	ldr	r2, [pc, #580]	@ (800d2e4 <_printf_float+0x2cc>)
 800d0a0:	4b91      	ldr	r3, [pc, #580]	@ (800d2e8 <_printf_float+0x2d0>)
 800d0a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d0a6:	bf8c      	ite	hi
 800d0a8:	4690      	movhi	r8, r2
 800d0aa:	4698      	movls	r8, r3
 800d0ac:	2303      	movs	r3, #3
 800d0ae:	6123      	str	r3, [r4, #16]
 800d0b0:	f02b 0304 	bic.w	r3, fp, #4
 800d0b4:	6023      	str	r3, [r4, #0]
 800d0b6:	f04f 0900 	mov.w	r9, #0
 800d0ba:	9700      	str	r7, [sp, #0]
 800d0bc:	4633      	mov	r3, r6
 800d0be:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d0c0:	4621      	mov	r1, r4
 800d0c2:	4628      	mov	r0, r5
 800d0c4:	f000 f9d2 	bl	800d46c <_printf_common>
 800d0c8:	3001      	adds	r0, #1
 800d0ca:	f040 808d 	bne.w	800d1e8 <_printf_float+0x1d0>
 800d0ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d0d2:	b00d      	add	sp, #52	@ 0x34
 800d0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0d8:	4642      	mov	r2, r8
 800d0da:	464b      	mov	r3, r9
 800d0dc:	4640      	mov	r0, r8
 800d0de:	4649      	mov	r1, r9
 800d0e0:	f7f3 fd54 	bl	8000b8c <__aeabi_dcmpun>
 800d0e4:	b140      	cbz	r0, 800d0f8 <_printf_float+0xe0>
 800d0e6:	464b      	mov	r3, r9
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	bfbc      	itt	lt
 800d0ec:	232d      	movlt	r3, #45	@ 0x2d
 800d0ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d0f2:	4a7e      	ldr	r2, [pc, #504]	@ (800d2ec <_printf_float+0x2d4>)
 800d0f4:	4b7e      	ldr	r3, [pc, #504]	@ (800d2f0 <_printf_float+0x2d8>)
 800d0f6:	e7d4      	b.n	800d0a2 <_printf_float+0x8a>
 800d0f8:	6863      	ldr	r3, [r4, #4]
 800d0fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d0fe:	9206      	str	r2, [sp, #24]
 800d100:	1c5a      	adds	r2, r3, #1
 800d102:	d13b      	bne.n	800d17c <_printf_float+0x164>
 800d104:	2306      	movs	r3, #6
 800d106:	6063      	str	r3, [r4, #4]
 800d108:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d10c:	2300      	movs	r3, #0
 800d10e:	6022      	str	r2, [r4, #0]
 800d110:	9303      	str	r3, [sp, #12]
 800d112:	ab0a      	add	r3, sp, #40	@ 0x28
 800d114:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d118:	ab09      	add	r3, sp, #36	@ 0x24
 800d11a:	9300      	str	r3, [sp, #0]
 800d11c:	6861      	ldr	r1, [r4, #4]
 800d11e:	ec49 8b10 	vmov	d0, r8, r9
 800d122:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d126:	4628      	mov	r0, r5
 800d128:	f7ff fed6 	bl	800ced8 <__cvt>
 800d12c:	9b06      	ldr	r3, [sp, #24]
 800d12e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d130:	2b47      	cmp	r3, #71	@ 0x47
 800d132:	4680      	mov	r8, r0
 800d134:	d129      	bne.n	800d18a <_printf_float+0x172>
 800d136:	1cc8      	adds	r0, r1, #3
 800d138:	db02      	blt.n	800d140 <_printf_float+0x128>
 800d13a:	6863      	ldr	r3, [r4, #4]
 800d13c:	4299      	cmp	r1, r3
 800d13e:	dd41      	ble.n	800d1c4 <_printf_float+0x1ac>
 800d140:	f1aa 0a02 	sub.w	sl, sl, #2
 800d144:	fa5f fa8a 	uxtb.w	sl, sl
 800d148:	3901      	subs	r1, #1
 800d14a:	4652      	mov	r2, sl
 800d14c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d150:	9109      	str	r1, [sp, #36]	@ 0x24
 800d152:	f7ff ff26 	bl	800cfa2 <__exponent>
 800d156:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d158:	1813      	adds	r3, r2, r0
 800d15a:	2a01      	cmp	r2, #1
 800d15c:	4681      	mov	r9, r0
 800d15e:	6123      	str	r3, [r4, #16]
 800d160:	dc02      	bgt.n	800d168 <_printf_float+0x150>
 800d162:	6822      	ldr	r2, [r4, #0]
 800d164:	07d2      	lsls	r2, r2, #31
 800d166:	d501      	bpl.n	800d16c <_printf_float+0x154>
 800d168:	3301      	adds	r3, #1
 800d16a:	6123      	str	r3, [r4, #16]
 800d16c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d170:	2b00      	cmp	r3, #0
 800d172:	d0a2      	beq.n	800d0ba <_printf_float+0xa2>
 800d174:	232d      	movs	r3, #45	@ 0x2d
 800d176:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d17a:	e79e      	b.n	800d0ba <_printf_float+0xa2>
 800d17c:	9a06      	ldr	r2, [sp, #24]
 800d17e:	2a47      	cmp	r2, #71	@ 0x47
 800d180:	d1c2      	bne.n	800d108 <_printf_float+0xf0>
 800d182:	2b00      	cmp	r3, #0
 800d184:	d1c0      	bne.n	800d108 <_printf_float+0xf0>
 800d186:	2301      	movs	r3, #1
 800d188:	e7bd      	b.n	800d106 <_printf_float+0xee>
 800d18a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d18e:	d9db      	bls.n	800d148 <_printf_float+0x130>
 800d190:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d194:	d118      	bne.n	800d1c8 <_printf_float+0x1b0>
 800d196:	2900      	cmp	r1, #0
 800d198:	6863      	ldr	r3, [r4, #4]
 800d19a:	dd0b      	ble.n	800d1b4 <_printf_float+0x19c>
 800d19c:	6121      	str	r1, [r4, #16]
 800d19e:	b913      	cbnz	r3, 800d1a6 <_printf_float+0x18e>
 800d1a0:	6822      	ldr	r2, [r4, #0]
 800d1a2:	07d0      	lsls	r0, r2, #31
 800d1a4:	d502      	bpl.n	800d1ac <_printf_float+0x194>
 800d1a6:	3301      	adds	r3, #1
 800d1a8:	440b      	add	r3, r1
 800d1aa:	6123      	str	r3, [r4, #16]
 800d1ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d1ae:	f04f 0900 	mov.w	r9, #0
 800d1b2:	e7db      	b.n	800d16c <_printf_float+0x154>
 800d1b4:	b913      	cbnz	r3, 800d1bc <_printf_float+0x1a4>
 800d1b6:	6822      	ldr	r2, [r4, #0]
 800d1b8:	07d2      	lsls	r2, r2, #31
 800d1ba:	d501      	bpl.n	800d1c0 <_printf_float+0x1a8>
 800d1bc:	3302      	adds	r3, #2
 800d1be:	e7f4      	b.n	800d1aa <_printf_float+0x192>
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	e7f2      	b.n	800d1aa <_printf_float+0x192>
 800d1c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d1c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1ca:	4299      	cmp	r1, r3
 800d1cc:	db05      	blt.n	800d1da <_printf_float+0x1c2>
 800d1ce:	6823      	ldr	r3, [r4, #0]
 800d1d0:	6121      	str	r1, [r4, #16]
 800d1d2:	07d8      	lsls	r0, r3, #31
 800d1d4:	d5ea      	bpl.n	800d1ac <_printf_float+0x194>
 800d1d6:	1c4b      	adds	r3, r1, #1
 800d1d8:	e7e7      	b.n	800d1aa <_printf_float+0x192>
 800d1da:	2900      	cmp	r1, #0
 800d1dc:	bfd4      	ite	le
 800d1de:	f1c1 0202 	rsble	r2, r1, #2
 800d1e2:	2201      	movgt	r2, #1
 800d1e4:	4413      	add	r3, r2
 800d1e6:	e7e0      	b.n	800d1aa <_printf_float+0x192>
 800d1e8:	6823      	ldr	r3, [r4, #0]
 800d1ea:	055a      	lsls	r2, r3, #21
 800d1ec:	d407      	bmi.n	800d1fe <_printf_float+0x1e6>
 800d1ee:	6923      	ldr	r3, [r4, #16]
 800d1f0:	4642      	mov	r2, r8
 800d1f2:	4631      	mov	r1, r6
 800d1f4:	4628      	mov	r0, r5
 800d1f6:	47b8      	blx	r7
 800d1f8:	3001      	adds	r0, #1
 800d1fa:	d12b      	bne.n	800d254 <_printf_float+0x23c>
 800d1fc:	e767      	b.n	800d0ce <_printf_float+0xb6>
 800d1fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d202:	f240 80dd 	bls.w	800d3c0 <_printf_float+0x3a8>
 800d206:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d20a:	2200      	movs	r2, #0
 800d20c:	2300      	movs	r3, #0
 800d20e:	f7f3 fc8b 	bl	8000b28 <__aeabi_dcmpeq>
 800d212:	2800      	cmp	r0, #0
 800d214:	d033      	beq.n	800d27e <_printf_float+0x266>
 800d216:	4a37      	ldr	r2, [pc, #220]	@ (800d2f4 <_printf_float+0x2dc>)
 800d218:	2301      	movs	r3, #1
 800d21a:	4631      	mov	r1, r6
 800d21c:	4628      	mov	r0, r5
 800d21e:	47b8      	blx	r7
 800d220:	3001      	adds	r0, #1
 800d222:	f43f af54 	beq.w	800d0ce <_printf_float+0xb6>
 800d226:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d22a:	4543      	cmp	r3, r8
 800d22c:	db02      	blt.n	800d234 <_printf_float+0x21c>
 800d22e:	6823      	ldr	r3, [r4, #0]
 800d230:	07d8      	lsls	r0, r3, #31
 800d232:	d50f      	bpl.n	800d254 <_printf_float+0x23c>
 800d234:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d238:	4631      	mov	r1, r6
 800d23a:	4628      	mov	r0, r5
 800d23c:	47b8      	blx	r7
 800d23e:	3001      	adds	r0, #1
 800d240:	f43f af45 	beq.w	800d0ce <_printf_float+0xb6>
 800d244:	f04f 0900 	mov.w	r9, #0
 800d248:	f108 38ff 	add.w	r8, r8, #4294967295
 800d24c:	f104 0a1a 	add.w	sl, r4, #26
 800d250:	45c8      	cmp	r8, r9
 800d252:	dc09      	bgt.n	800d268 <_printf_float+0x250>
 800d254:	6823      	ldr	r3, [r4, #0]
 800d256:	079b      	lsls	r3, r3, #30
 800d258:	f100 8103 	bmi.w	800d462 <_printf_float+0x44a>
 800d25c:	68e0      	ldr	r0, [r4, #12]
 800d25e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d260:	4298      	cmp	r0, r3
 800d262:	bfb8      	it	lt
 800d264:	4618      	movlt	r0, r3
 800d266:	e734      	b.n	800d0d2 <_printf_float+0xba>
 800d268:	2301      	movs	r3, #1
 800d26a:	4652      	mov	r2, sl
 800d26c:	4631      	mov	r1, r6
 800d26e:	4628      	mov	r0, r5
 800d270:	47b8      	blx	r7
 800d272:	3001      	adds	r0, #1
 800d274:	f43f af2b 	beq.w	800d0ce <_printf_float+0xb6>
 800d278:	f109 0901 	add.w	r9, r9, #1
 800d27c:	e7e8      	b.n	800d250 <_printf_float+0x238>
 800d27e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d280:	2b00      	cmp	r3, #0
 800d282:	dc39      	bgt.n	800d2f8 <_printf_float+0x2e0>
 800d284:	4a1b      	ldr	r2, [pc, #108]	@ (800d2f4 <_printf_float+0x2dc>)
 800d286:	2301      	movs	r3, #1
 800d288:	4631      	mov	r1, r6
 800d28a:	4628      	mov	r0, r5
 800d28c:	47b8      	blx	r7
 800d28e:	3001      	adds	r0, #1
 800d290:	f43f af1d 	beq.w	800d0ce <_printf_float+0xb6>
 800d294:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d298:	ea59 0303 	orrs.w	r3, r9, r3
 800d29c:	d102      	bne.n	800d2a4 <_printf_float+0x28c>
 800d29e:	6823      	ldr	r3, [r4, #0]
 800d2a0:	07d9      	lsls	r1, r3, #31
 800d2a2:	d5d7      	bpl.n	800d254 <_printf_float+0x23c>
 800d2a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2a8:	4631      	mov	r1, r6
 800d2aa:	4628      	mov	r0, r5
 800d2ac:	47b8      	blx	r7
 800d2ae:	3001      	adds	r0, #1
 800d2b0:	f43f af0d 	beq.w	800d0ce <_printf_float+0xb6>
 800d2b4:	f04f 0a00 	mov.w	sl, #0
 800d2b8:	f104 0b1a 	add.w	fp, r4, #26
 800d2bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2be:	425b      	negs	r3, r3
 800d2c0:	4553      	cmp	r3, sl
 800d2c2:	dc01      	bgt.n	800d2c8 <_printf_float+0x2b0>
 800d2c4:	464b      	mov	r3, r9
 800d2c6:	e793      	b.n	800d1f0 <_printf_float+0x1d8>
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	465a      	mov	r2, fp
 800d2cc:	4631      	mov	r1, r6
 800d2ce:	4628      	mov	r0, r5
 800d2d0:	47b8      	blx	r7
 800d2d2:	3001      	adds	r0, #1
 800d2d4:	f43f aefb 	beq.w	800d0ce <_printf_float+0xb6>
 800d2d8:	f10a 0a01 	add.w	sl, sl, #1
 800d2dc:	e7ee      	b.n	800d2bc <_printf_float+0x2a4>
 800d2de:	bf00      	nop
 800d2e0:	7fefffff 	.word	0x7fefffff
 800d2e4:	08011e8a 	.word	0x08011e8a
 800d2e8:	08011e86 	.word	0x08011e86
 800d2ec:	08011e92 	.word	0x08011e92
 800d2f0:	08011e8e 	.word	0x08011e8e
 800d2f4:	08011e96 	.word	0x08011e96
 800d2f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d2fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d2fe:	4553      	cmp	r3, sl
 800d300:	bfa8      	it	ge
 800d302:	4653      	movge	r3, sl
 800d304:	2b00      	cmp	r3, #0
 800d306:	4699      	mov	r9, r3
 800d308:	dc36      	bgt.n	800d378 <_printf_float+0x360>
 800d30a:	f04f 0b00 	mov.w	fp, #0
 800d30e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d312:	f104 021a 	add.w	r2, r4, #26
 800d316:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d318:	9306      	str	r3, [sp, #24]
 800d31a:	eba3 0309 	sub.w	r3, r3, r9
 800d31e:	455b      	cmp	r3, fp
 800d320:	dc31      	bgt.n	800d386 <_printf_float+0x36e>
 800d322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d324:	459a      	cmp	sl, r3
 800d326:	dc3a      	bgt.n	800d39e <_printf_float+0x386>
 800d328:	6823      	ldr	r3, [r4, #0]
 800d32a:	07da      	lsls	r2, r3, #31
 800d32c:	d437      	bmi.n	800d39e <_printf_float+0x386>
 800d32e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d330:	ebaa 0903 	sub.w	r9, sl, r3
 800d334:	9b06      	ldr	r3, [sp, #24]
 800d336:	ebaa 0303 	sub.w	r3, sl, r3
 800d33a:	4599      	cmp	r9, r3
 800d33c:	bfa8      	it	ge
 800d33e:	4699      	movge	r9, r3
 800d340:	f1b9 0f00 	cmp.w	r9, #0
 800d344:	dc33      	bgt.n	800d3ae <_printf_float+0x396>
 800d346:	f04f 0800 	mov.w	r8, #0
 800d34a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d34e:	f104 0b1a 	add.w	fp, r4, #26
 800d352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d354:	ebaa 0303 	sub.w	r3, sl, r3
 800d358:	eba3 0309 	sub.w	r3, r3, r9
 800d35c:	4543      	cmp	r3, r8
 800d35e:	f77f af79 	ble.w	800d254 <_printf_float+0x23c>
 800d362:	2301      	movs	r3, #1
 800d364:	465a      	mov	r2, fp
 800d366:	4631      	mov	r1, r6
 800d368:	4628      	mov	r0, r5
 800d36a:	47b8      	blx	r7
 800d36c:	3001      	adds	r0, #1
 800d36e:	f43f aeae 	beq.w	800d0ce <_printf_float+0xb6>
 800d372:	f108 0801 	add.w	r8, r8, #1
 800d376:	e7ec      	b.n	800d352 <_printf_float+0x33a>
 800d378:	4642      	mov	r2, r8
 800d37a:	4631      	mov	r1, r6
 800d37c:	4628      	mov	r0, r5
 800d37e:	47b8      	blx	r7
 800d380:	3001      	adds	r0, #1
 800d382:	d1c2      	bne.n	800d30a <_printf_float+0x2f2>
 800d384:	e6a3      	b.n	800d0ce <_printf_float+0xb6>
 800d386:	2301      	movs	r3, #1
 800d388:	4631      	mov	r1, r6
 800d38a:	4628      	mov	r0, r5
 800d38c:	9206      	str	r2, [sp, #24]
 800d38e:	47b8      	blx	r7
 800d390:	3001      	adds	r0, #1
 800d392:	f43f ae9c 	beq.w	800d0ce <_printf_float+0xb6>
 800d396:	9a06      	ldr	r2, [sp, #24]
 800d398:	f10b 0b01 	add.w	fp, fp, #1
 800d39c:	e7bb      	b.n	800d316 <_printf_float+0x2fe>
 800d39e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3a2:	4631      	mov	r1, r6
 800d3a4:	4628      	mov	r0, r5
 800d3a6:	47b8      	blx	r7
 800d3a8:	3001      	adds	r0, #1
 800d3aa:	d1c0      	bne.n	800d32e <_printf_float+0x316>
 800d3ac:	e68f      	b.n	800d0ce <_printf_float+0xb6>
 800d3ae:	9a06      	ldr	r2, [sp, #24]
 800d3b0:	464b      	mov	r3, r9
 800d3b2:	4442      	add	r2, r8
 800d3b4:	4631      	mov	r1, r6
 800d3b6:	4628      	mov	r0, r5
 800d3b8:	47b8      	blx	r7
 800d3ba:	3001      	adds	r0, #1
 800d3bc:	d1c3      	bne.n	800d346 <_printf_float+0x32e>
 800d3be:	e686      	b.n	800d0ce <_printf_float+0xb6>
 800d3c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d3c4:	f1ba 0f01 	cmp.w	sl, #1
 800d3c8:	dc01      	bgt.n	800d3ce <_printf_float+0x3b6>
 800d3ca:	07db      	lsls	r3, r3, #31
 800d3cc:	d536      	bpl.n	800d43c <_printf_float+0x424>
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	4642      	mov	r2, r8
 800d3d2:	4631      	mov	r1, r6
 800d3d4:	4628      	mov	r0, r5
 800d3d6:	47b8      	blx	r7
 800d3d8:	3001      	adds	r0, #1
 800d3da:	f43f ae78 	beq.w	800d0ce <_printf_float+0xb6>
 800d3de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3e2:	4631      	mov	r1, r6
 800d3e4:	4628      	mov	r0, r5
 800d3e6:	47b8      	blx	r7
 800d3e8:	3001      	adds	r0, #1
 800d3ea:	f43f ae70 	beq.w	800d0ce <_printf_float+0xb6>
 800d3ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d3fa:	f7f3 fb95 	bl	8000b28 <__aeabi_dcmpeq>
 800d3fe:	b9c0      	cbnz	r0, 800d432 <_printf_float+0x41a>
 800d400:	4653      	mov	r3, sl
 800d402:	f108 0201 	add.w	r2, r8, #1
 800d406:	4631      	mov	r1, r6
 800d408:	4628      	mov	r0, r5
 800d40a:	47b8      	blx	r7
 800d40c:	3001      	adds	r0, #1
 800d40e:	d10c      	bne.n	800d42a <_printf_float+0x412>
 800d410:	e65d      	b.n	800d0ce <_printf_float+0xb6>
 800d412:	2301      	movs	r3, #1
 800d414:	465a      	mov	r2, fp
 800d416:	4631      	mov	r1, r6
 800d418:	4628      	mov	r0, r5
 800d41a:	47b8      	blx	r7
 800d41c:	3001      	adds	r0, #1
 800d41e:	f43f ae56 	beq.w	800d0ce <_printf_float+0xb6>
 800d422:	f108 0801 	add.w	r8, r8, #1
 800d426:	45d0      	cmp	r8, sl
 800d428:	dbf3      	blt.n	800d412 <_printf_float+0x3fa>
 800d42a:	464b      	mov	r3, r9
 800d42c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d430:	e6df      	b.n	800d1f2 <_printf_float+0x1da>
 800d432:	f04f 0800 	mov.w	r8, #0
 800d436:	f104 0b1a 	add.w	fp, r4, #26
 800d43a:	e7f4      	b.n	800d426 <_printf_float+0x40e>
 800d43c:	2301      	movs	r3, #1
 800d43e:	4642      	mov	r2, r8
 800d440:	e7e1      	b.n	800d406 <_printf_float+0x3ee>
 800d442:	2301      	movs	r3, #1
 800d444:	464a      	mov	r2, r9
 800d446:	4631      	mov	r1, r6
 800d448:	4628      	mov	r0, r5
 800d44a:	47b8      	blx	r7
 800d44c:	3001      	adds	r0, #1
 800d44e:	f43f ae3e 	beq.w	800d0ce <_printf_float+0xb6>
 800d452:	f108 0801 	add.w	r8, r8, #1
 800d456:	68e3      	ldr	r3, [r4, #12]
 800d458:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d45a:	1a5b      	subs	r3, r3, r1
 800d45c:	4543      	cmp	r3, r8
 800d45e:	dcf0      	bgt.n	800d442 <_printf_float+0x42a>
 800d460:	e6fc      	b.n	800d25c <_printf_float+0x244>
 800d462:	f04f 0800 	mov.w	r8, #0
 800d466:	f104 0919 	add.w	r9, r4, #25
 800d46a:	e7f4      	b.n	800d456 <_printf_float+0x43e>

0800d46c <_printf_common>:
 800d46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d470:	4616      	mov	r6, r2
 800d472:	4698      	mov	r8, r3
 800d474:	688a      	ldr	r2, [r1, #8]
 800d476:	690b      	ldr	r3, [r1, #16]
 800d478:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d47c:	4293      	cmp	r3, r2
 800d47e:	bfb8      	it	lt
 800d480:	4613      	movlt	r3, r2
 800d482:	6033      	str	r3, [r6, #0]
 800d484:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d488:	4607      	mov	r7, r0
 800d48a:	460c      	mov	r4, r1
 800d48c:	b10a      	cbz	r2, 800d492 <_printf_common+0x26>
 800d48e:	3301      	adds	r3, #1
 800d490:	6033      	str	r3, [r6, #0]
 800d492:	6823      	ldr	r3, [r4, #0]
 800d494:	0699      	lsls	r1, r3, #26
 800d496:	bf42      	ittt	mi
 800d498:	6833      	ldrmi	r3, [r6, #0]
 800d49a:	3302      	addmi	r3, #2
 800d49c:	6033      	strmi	r3, [r6, #0]
 800d49e:	6825      	ldr	r5, [r4, #0]
 800d4a0:	f015 0506 	ands.w	r5, r5, #6
 800d4a4:	d106      	bne.n	800d4b4 <_printf_common+0x48>
 800d4a6:	f104 0a19 	add.w	sl, r4, #25
 800d4aa:	68e3      	ldr	r3, [r4, #12]
 800d4ac:	6832      	ldr	r2, [r6, #0]
 800d4ae:	1a9b      	subs	r3, r3, r2
 800d4b0:	42ab      	cmp	r3, r5
 800d4b2:	dc26      	bgt.n	800d502 <_printf_common+0x96>
 800d4b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d4b8:	6822      	ldr	r2, [r4, #0]
 800d4ba:	3b00      	subs	r3, #0
 800d4bc:	bf18      	it	ne
 800d4be:	2301      	movne	r3, #1
 800d4c0:	0692      	lsls	r2, r2, #26
 800d4c2:	d42b      	bmi.n	800d51c <_printf_common+0xb0>
 800d4c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d4c8:	4641      	mov	r1, r8
 800d4ca:	4638      	mov	r0, r7
 800d4cc:	47c8      	blx	r9
 800d4ce:	3001      	adds	r0, #1
 800d4d0:	d01e      	beq.n	800d510 <_printf_common+0xa4>
 800d4d2:	6823      	ldr	r3, [r4, #0]
 800d4d4:	6922      	ldr	r2, [r4, #16]
 800d4d6:	f003 0306 	and.w	r3, r3, #6
 800d4da:	2b04      	cmp	r3, #4
 800d4dc:	bf02      	ittt	eq
 800d4de:	68e5      	ldreq	r5, [r4, #12]
 800d4e0:	6833      	ldreq	r3, [r6, #0]
 800d4e2:	1aed      	subeq	r5, r5, r3
 800d4e4:	68a3      	ldr	r3, [r4, #8]
 800d4e6:	bf0c      	ite	eq
 800d4e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4ec:	2500      	movne	r5, #0
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	bfc4      	itt	gt
 800d4f2:	1a9b      	subgt	r3, r3, r2
 800d4f4:	18ed      	addgt	r5, r5, r3
 800d4f6:	2600      	movs	r6, #0
 800d4f8:	341a      	adds	r4, #26
 800d4fa:	42b5      	cmp	r5, r6
 800d4fc:	d11a      	bne.n	800d534 <_printf_common+0xc8>
 800d4fe:	2000      	movs	r0, #0
 800d500:	e008      	b.n	800d514 <_printf_common+0xa8>
 800d502:	2301      	movs	r3, #1
 800d504:	4652      	mov	r2, sl
 800d506:	4641      	mov	r1, r8
 800d508:	4638      	mov	r0, r7
 800d50a:	47c8      	blx	r9
 800d50c:	3001      	adds	r0, #1
 800d50e:	d103      	bne.n	800d518 <_printf_common+0xac>
 800d510:	f04f 30ff 	mov.w	r0, #4294967295
 800d514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d518:	3501      	adds	r5, #1
 800d51a:	e7c6      	b.n	800d4aa <_printf_common+0x3e>
 800d51c:	18e1      	adds	r1, r4, r3
 800d51e:	1c5a      	adds	r2, r3, #1
 800d520:	2030      	movs	r0, #48	@ 0x30
 800d522:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d526:	4422      	add	r2, r4
 800d528:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d52c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d530:	3302      	adds	r3, #2
 800d532:	e7c7      	b.n	800d4c4 <_printf_common+0x58>
 800d534:	2301      	movs	r3, #1
 800d536:	4622      	mov	r2, r4
 800d538:	4641      	mov	r1, r8
 800d53a:	4638      	mov	r0, r7
 800d53c:	47c8      	blx	r9
 800d53e:	3001      	adds	r0, #1
 800d540:	d0e6      	beq.n	800d510 <_printf_common+0xa4>
 800d542:	3601      	adds	r6, #1
 800d544:	e7d9      	b.n	800d4fa <_printf_common+0x8e>
	...

0800d548 <_printf_i>:
 800d548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d54c:	7e0f      	ldrb	r7, [r1, #24]
 800d54e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d550:	2f78      	cmp	r7, #120	@ 0x78
 800d552:	4691      	mov	r9, r2
 800d554:	4680      	mov	r8, r0
 800d556:	460c      	mov	r4, r1
 800d558:	469a      	mov	sl, r3
 800d55a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d55e:	d807      	bhi.n	800d570 <_printf_i+0x28>
 800d560:	2f62      	cmp	r7, #98	@ 0x62
 800d562:	d80a      	bhi.n	800d57a <_printf_i+0x32>
 800d564:	2f00      	cmp	r7, #0
 800d566:	f000 80d1 	beq.w	800d70c <_printf_i+0x1c4>
 800d56a:	2f58      	cmp	r7, #88	@ 0x58
 800d56c:	f000 80b8 	beq.w	800d6e0 <_printf_i+0x198>
 800d570:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d574:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d578:	e03a      	b.n	800d5f0 <_printf_i+0xa8>
 800d57a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d57e:	2b15      	cmp	r3, #21
 800d580:	d8f6      	bhi.n	800d570 <_printf_i+0x28>
 800d582:	a101      	add	r1, pc, #4	@ (adr r1, 800d588 <_printf_i+0x40>)
 800d584:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d588:	0800d5e1 	.word	0x0800d5e1
 800d58c:	0800d5f5 	.word	0x0800d5f5
 800d590:	0800d571 	.word	0x0800d571
 800d594:	0800d571 	.word	0x0800d571
 800d598:	0800d571 	.word	0x0800d571
 800d59c:	0800d571 	.word	0x0800d571
 800d5a0:	0800d5f5 	.word	0x0800d5f5
 800d5a4:	0800d571 	.word	0x0800d571
 800d5a8:	0800d571 	.word	0x0800d571
 800d5ac:	0800d571 	.word	0x0800d571
 800d5b0:	0800d571 	.word	0x0800d571
 800d5b4:	0800d6f3 	.word	0x0800d6f3
 800d5b8:	0800d61f 	.word	0x0800d61f
 800d5bc:	0800d6ad 	.word	0x0800d6ad
 800d5c0:	0800d571 	.word	0x0800d571
 800d5c4:	0800d571 	.word	0x0800d571
 800d5c8:	0800d715 	.word	0x0800d715
 800d5cc:	0800d571 	.word	0x0800d571
 800d5d0:	0800d61f 	.word	0x0800d61f
 800d5d4:	0800d571 	.word	0x0800d571
 800d5d8:	0800d571 	.word	0x0800d571
 800d5dc:	0800d6b5 	.word	0x0800d6b5
 800d5e0:	6833      	ldr	r3, [r6, #0]
 800d5e2:	1d1a      	adds	r2, r3, #4
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	6032      	str	r2, [r6, #0]
 800d5e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d5ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	e09c      	b.n	800d72e <_printf_i+0x1e6>
 800d5f4:	6833      	ldr	r3, [r6, #0]
 800d5f6:	6820      	ldr	r0, [r4, #0]
 800d5f8:	1d19      	adds	r1, r3, #4
 800d5fa:	6031      	str	r1, [r6, #0]
 800d5fc:	0606      	lsls	r6, r0, #24
 800d5fe:	d501      	bpl.n	800d604 <_printf_i+0xbc>
 800d600:	681d      	ldr	r5, [r3, #0]
 800d602:	e003      	b.n	800d60c <_printf_i+0xc4>
 800d604:	0645      	lsls	r5, r0, #25
 800d606:	d5fb      	bpl.n	800d600 <_printf_i+0xb8>
 800d608:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d60c:	2d00      	cmp	r5, #0
 800d60e:	da03      	bge.n	800d618 <_printf_i+0xd0>
 800d610:	232d      	movs	r3, #45	@ 0x2d
 800d612:	426d      	negs	r5, r5
 800d614:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d618:	4858      	ldr	r0, [pc, #352]	@ (800d77c <_printf_i+0x234>)
 800d61a:	230a      	movs	r3, #10
 800d61c:	e011      	b.n	800d642 <_printf_i+0xfa>
 800d61e:	6821      	ldr	r1, [r4, #0]
 800d620:	6833      	ldr	r3, [r6, #0]
 800d622:	0608      	lsls	r0, r1, #24
 800d624:	f853 5b04 	ldr.w	r5, [r3], #4
 800d628:	d402      	bmi.n	800d630 <_printf_i+0xe8>
 800d62a:	0649      	lsls	r1, r1, #25
 800d62c:	bf48      	it	mi
 800d62e:	b2ad      	uxthmi	r5, r5
 800d630:	2f6f      	cmp	r7, #111	@ 0x6f
 800d632:	4852      	ldr	r0, [pc, #328]	@ (800d77c <_printf_i+0x234>)
 800d634:	6033      	str	r3, [r6, #0]
 800d636:	bf14      	ite	ne
 800d638:	230a      	movne	r3, #10
 800d63a:	2308      	moveq	r3, #8
 800d63c:	2100      	movs	r1, #0
 800d63e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d642:	6866      	ldr	r6, [r4, #4]
 800d644:	60a6      	str	r6, [r4, #8]
 800d646:	2e00      	cmp	r6, #0
 800d648:	db05      	blt.n	800d656 <_printf_i+0x10e>
 800d64a:	6821      	ldr	r1, [r4, #0]
 800d64c:	432e      	orrs	r6, r5
 800d64e:	f021 0104 	bic.w	r1, r1, #4
 800d652:	6021      	str	r1, [r4, #0]
 800d654:	d04b      	beq.n	800d6ee <_printf_i+0x1a6>
 800d656:	4616      	mov	r6, r2
 800d658:	fbb5 f1f3 	udiv	r1, r5, r3
 800d65c:	fb03 5711 	mls	r7, r3, r1, r5
 800d660:	5dc7      	ldrb	r7, [r0, r7]
 800d662:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d666:	462f      	mov	r7, r5
 800d668:	42bb      	cmp	r3, r7
 800d66a:	460d      	mov	r5, r1
 800d66c:	d9f4      	bls.n	800d658 <_printf_i+0x110>
 800d66e:	2b08      	cmp	r3, #8
 800d670:	d10b      	bne.n	800d68a <_printf_i+0x142>
 800d672:	6823      	ldr	r3, [r4, #0]
 800d674:	07df      	lsls	r7, r3, #31
 800d676:	d508      	bpl.n	800d68a <_printf_i+0x142>
 800d678:	6923      	ldr	r3, [r4, #16]
 800d67a:	6861      	ldr	r1, [r4, #4]
 800d67c:	4299      	cmp	r1, r3
 800d67e:	bfde      	ittt	le
 800d680:	2330      	movle	r3, #48	@ 0x30
 800d682:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d686:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d68a:	1b92      	subs	r2, r2, r6
 800d68c:	6122      	str	r2, [r4, #16]
 800d68e:	f8cd a000 	str.w	sl, [sp]
 800d692:	464b      	mov	r3, r9
 800d694:	aa03      	add	r2, sp, #12
 800d696:	4621      	mov	r1, r4
 800d698:	4640      	mov	r0, r8
 800d69a:	f7ff fee7 	bl	800d46c <_printf_common>
 800d69e:	3001      	adds	r0, #1
 800d6a0:	d14a      	bne.n	800d738 <_printf_i+0x1f0>
 800d6a2:	f04f 30ff 	mov.w	r0, #4294967295
 800d6a6:	b004      	add	sp, #16
 800d6a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6ac:	6823      	ldr	r3, [r4, #0]
 800d6ae:	f043 0320 	orr.w	r3, r3, #32
 800d6b2:	6023      	str	r3, [r4, #0]
 800d6b4:	4832      	ldr	r0, [pc, #200]	@ (800d780 <_printf_i+0x238>)
 800d6b6:	2778      	movs	r7, #120	@ 0x78
 800d6b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d6bc:	6823      	ldr	r3, [r4, #0]
 800d6be:	6831      	ldr	r1, [r6, #0]
 800d6c0:	061f      	lsls	r7, r3, #24
 800d6c2:	f851 5b04 	ldr.w	r5, [r1], #4
 800d6c6:	d402      	bmi.n	800d6ce <_printf_i+0x186>
 800d6c8:	065f      	lsls	r7, r3, #25
 800d6ca:	bf48      	it	mi
 800d6cc:	b2ad      	uxthmi	r5, r5
 800d6ce:	6031      	str	r1, [r6, #0]
 800d6d0:	07d9      	lsls	r1, r3, #31
 800d6d2:	bf44      	itt	mi
 800d6d4:	f043 0320 	orrmi.w	r3, r3, #32
 800d6d8:	6023      	strmi	r3, [r4, #0]
 800d6da:	b11d      	cbz	r5, 800d6e4 <_printf_i+0x19c>
 800d6dc:	2310      	movs	r3, #16
 800d6de:	e7ad      	b.n	800d63c <_printf_i+0xf4>
 800d6e0:	4826      	ldr	r0, [pc, #152]	@ (800d77c <_printf_i+0x234>)
 800d6e2:	e7e9      	b.n	800d6b8 <_printf_i+0x170>
 800d6e4:	6823      	ldr	r3, [r4, #0]
 800d6e6:	f023 0320 	bic.w	r3, r3, #32
 800d6ea:	6023      	str	r3, [r4, #0]
 800d6ec:	e7f6      	b.n	800d6dc <_printf_i+0x194>
 800d6ee:	4616      	mov	r6, r2
 800d6f0:	e7bd      	b.n	800d66e <_printf_i+0x126>
 800d6f2:	6833      	ldr	r3, [r6, #0]
 800d6f4:	6825      	ldr	r5, [r4, #0]
 800d6f6:	6961      	ldr	r1, [r4, #20]
 800d6f8:	1d18      	adds	r0, r3, #4
 800d6fa:	6030      	str	r0, [r6, #0]
 800d6fc:	062e      	lsls	r6, r5, #24
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	d501      	bpl.n	800d706 <_printf_i+0x1be>
 800d702:	6019      	str	r1, [r3, #0]
 800d704:	e002      	b.n	800d70c <_printf_i+0x1c4>
 800d706:	0668      	lsls	r0, r5, #25
 800d708:	d5fb      	bpl.n	800d702 <_printf_i+0x1ba>
 800d70a:	8019      	strh	r1, [r3, #0]
 800d70c:	2300      	movs	r3, #0
 800d70e:	6123      	str	r3, [r4, #16]
 800d710:	4616      	mov	r6, r2
 800d712:	e7bc      	b.n	800d68e <_printf_i+0x146>
 800d714:	6833      	ldr	r3, [r6, #0]
 800d716:	1d1a      	adds	r2, r3, #4
 800d718:	6032      	str	r2, [r6, #0]
 800d71a:	681e      	ldr	r6, [r3, #0]
 800d71c:	6862      	ldr	r2, [r4, #4]
 800d71e:	2100      	movs	r1, #0
 800d720:	4630      	mov	r0, r6
 800d722:	f7f2 fd85 	bl	8000230 <memchr>
 800d726:	b108      	cbz	r0, 800d72c <_printf_i+0x1e4>
 800d728:	1b80      	subs	r0, r0, r6
 800d72a:	6060      	str	r0, [r4, #4]
 800d72c:	6863      	ldr	r3, [r4, #4]
 800d72e:	6123      	str	r3, [r4, #16]
 800d730:	2300      	movs	r3, #0
 800d732:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d736:	e7aa      	b.n	800d68e <_printf_i+0x146>
 800d738:	6923      	ldr	r3, [r4, #16]
 800d73a:	4632      	mov	r2, r6
 800d73c:	4649      	mov	r1, r9
 800d73e:	4640      	mov	r0, r8
 800d740:	47d0      	blx	sl
 800d742:	3001      	adds	r0, #1
 800d744:	d0ad      	beq.n	800d6a2 <_printf_i+0x15a>
 800d746:	6823      	ldr	r3, [r4, #0]
 800d748:	079b      	lsls	r3, r3, #30
 800d74a:	d413      	bmi.n	800d774 <_printf_i+0x22c>
 800d74c:	68e0      	ldr	r0, [r4, #12]
 800d74e:	9b03      	ldr	r3, [sp, #12]
 800d750:	4298      	cmp	r0, r3
 800d752:	bfb8      	it	lt
 800d754:	4618      	movlt	r0, r3
 800d756:	e7a6      	b.n	800d6a6 <_printf_i+0x15e>
 800d758:	2301      	movs	r3, #1
 800d75a:	4632      	mov	r2, r6
 800d75c:	4649      	mov	r1, r9
 800d75e:	4640      	mov	r0, r8
 800d760:	47d0      	blx	sl
 800d762:	3001      	adds	r0, #1
 800d764:	d09d      	beq.n	800d6a2 <_printf_i+0x15a>
 800d766:	3501      	adds	r5, #1
 800d768:	68e3      	ldr	r3, [r4, #12]
 800d76a:	9903      	ldr	r1, [sp, #12]
 800d76c:	1a5b      	subs	r3, r3, r1
 800d76e:	42ab      	cmp	r3, r5
 800d770:	dcf2      	bgt.n	800d758 <_printf_i+0x210>
 800d772:	e7eb      	b.n	800d74c <_printf_i+0x204>
 800d774:	2500      	movs	r5, #0
 800d776:	f104 0619 	add.w	r6, r4, #25
 800d77a:	e7f5      	b.n	800d768 <_printf_i+0x220>
 800d77c:	08011e98 	.word	0x08011e98
 800d780:	08011ea9 	.word	0x08011ea9

0800d784 <std>:
 800d784:	2300      	movs	r3, #0
 800d786:	b510      	push	{r4, lr}
 800d788:	4604      	mov	r4, r0
 800d78a:	e9c0 3300 	strd	r3, r3, [r0]
 800d78e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d792:	6083      	str	r3, [r0, #8]
 800d794:	8181      	strh	r1, [r0, #12]
 800d796:	6643      	str	r3, [r0, #100]	@ 0x64
 800d798:	81c2      	strh	r2, [r0, #14]
 800d79a:	6183      	str	r3, [r0, #24]
 800d79c:	4619      	mov	r1, r3
 800d79e:	2208      	movs	r2, #8
 800d7a0:	305c      	adds	r0, #92	@ 0x5c
 800d7a2:	f000 fa1b 	bl	800dbdc <memset>
 800d7a6:	4b0d      	ldr	r3, [pc, #52]	@ (800d7dc <std+0x58>)
 800d7a8:	6263      	str	r3, [r4, #36]	@ 0x24
 800d7aa:	4b0d      	ldr	r3, [pc, #52]	@ (800d7e0 <std+0x5c>)
 800d7ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d7ae:	4b0d      	ldr	r3, [pc, #52]	@ (800d7e4 <std+0x60>)
 800d7b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d7b2:	4b0d      	ldr	r3, [pc, #52]	@ (800d7e8 <std+0x64>)
 800d7b4:	6323      	str	r3, [r4, #48]	@ 0x30
 800d7b6:	4b0d      	ldr	r3, [pc, #52]	@ (800d7ec <std+0x68>)
 800d7b8:	6224      	str	r4, [r4, #32]
 800d7ba:	429c      	cmp	r4, r3
 800d7bc:	d006      	beq.n	800d7cc <std+0x48>
 800d7be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d7c2:	4294      	cmp	r4, r2
 800d7c4:	d002      	beq.n	800d7cc <std+0x48>
 800d7c6:	33d0      	adds	r3, #208	@ 0xd0
 800d7c8:	429c      	cmp	r4, r3
 800d7ca:	d105      	bne.n	800d7d8 <std+0x54>
 800d7cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d7d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7d4:	f000 ba90 	b.w	800dcf8 <__retarget_lock_init_recursive>
 800d7d8:	bd10      	pop	{r4, pc}
 800d7da:	bf00      	nop
 800d7dc:	0800da2d 	.word	0x0800da2d
 800d7e0:	0800da4f 	.word	0x0800da4f
 800d7e4:	0800da87 	.word	0x0800da87
 800d7e8:	0800daab 	.word	0x0800daab
 800d7ec:	2000aa28 	.word	0x2000aa28

0800d7f0 <stdio_exit_handler>:
 800d7f0:	4a02      	ldr	r2, [pc, #8]	@ (800d7fc <stdio_exit_handler+0xc>)
 800d7f2:	4903      	ldr	r1, [pc, #12]	@ (800d800 <stdio_exit_handler+0x10>)
 800d7f4:	4803      	ldr	r0, [pc, #12]	@ (800d804 <stdio_exit_handler+0x14>)
 800d7f6:	f000 b869 	b.w	800d8cc <_fwalk_sglue>
 800d7fa:	bf00      	nop
 800d7fc:	2000004c 	.word	0x2000004c
 800d800:	08010291 	.word	0x08010291
 800d804:	200001c8 	.word	0x200001c8

0800d808 <cleanup_stdio>:
 800d808:	6841      	ldr	r1, [r0, #4]
 800d80a:	4b0c      	ldr	r3, [pc, #48]	@ (800d83c <cleanup_stdio+0x34>)
 800d80c:	4299      	cmp	r1, r3
 800d80e:	b510      	push	{r4, lr}
 800d810:	4604      	mov	r4, r0
 800d812:	d001      	beq.n	800d818 <cleanup_stdio+0x10>
 800d814:	f002 fd3c 	bl	8010290 <_fflush_r>
 800d818:	68a1      	ldr	r1, [r4, #8]
 800d81a:	4b09      	ldr	r3, [pc, #36]	@ (800d840 <cleanup_stdio+0x38>)
 800d81c:	4299      	cmp	r1, r3
 800d81e:	d002      	beq.n	800d826 <cleanup_stdio+0x1e>
 800d820:	4620      	mov	r0, r4
 800d822:	f002 fd35 	bl	8010290 <_fflush_r>
 800d826:	68e1      	ldr	r1, [r4, #12]
 800d828:	4b06      	ldr	r3, [pc, #24]	@ (800d844 <cleanup_stdio+0x3c>)
 800d82a:	4299      	cmp	r1, r3
 800d82c:	d004      	beq.n	800d838 <cleanup_stdio+0x30>
 800d82e:	4620      	mov	r0, r4
 800d830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d834:	f002 bd2c 	b.w	8010290 <_fflush_r>
 800d838:	bd10      	pop	{r4, pc}
 800d83a:	bf00      	nop
 800d83c:	2000aa28 	.word	0x2000aa28
 800d840:	2000aa90 	.word	0x2000aa90
 800d844:	2000aaf8 	.word	0x2000aaf8

0800d848 <global_stdio_init.part.0>:
 800d848:	b510      	push	{r4, lr}
 800d84a:	4b0b      	ldr	r3, [pc, #44]	@ (800d878 <global_stdio_init.part.0+0x30>)
 800d84c:	4c0b      	ldr	r4, [pc, #44]	@ (800d87c <global_stdio_init.part.0+0x34>)
 800d84e:	4a0c      	ldr	r2, [pc, #48]	@ (800d880 <global_stdio_init.part.0+0x38>)
 800d850:	601a      	str	r2, [r3, #0]
 800d852:	4620      	mov	r0, r4
 800d854:	2200      	movs	r2, #0
 800d856:	2104      	movs	r1, #4
 800d858:	f7ff ff94 	bl	800d784 <std>
 800d85c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d860:	2201      	movs	r2, #1
 800d862:	2109      	movs	r1, #9
 800d864:	f7ff ff8e 	bl	800d784 <std>
 800d868:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d86c:	2202      	movs	r2, #2
 800d86e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d872:	2112      	movs	r1, #18
 800d874:	f7ff bf86 	b.w	800d784 <std>
 800d878:	2000ab60 	.word	0x2000ab60
 800d87c:	2000aa28 	.word	0x2000aa28
 800d880:	0800d7f1 	.word	0x0800d7f1

0800d884 <__sfp_lock_acquire>:
 800d884:	4801      	ldr	r0, [pc, #4]	@ (800d88c <__sfp_lock_acquire+0x8>)
 800d886:	f000 ba38 	b.w	800dcfa <__retarget_lock_acquire_recursive>
 800d88a:	bf00      	nop
 800d88c:	2000ab69 	.word	0x2000ab69

0800d890 <__sfp_lock_release>:
 800d890:	4801      	ldr	r0, [pc, #4]	@ (800d898 <__sfp_lock_release+0x8>)
 800d892:	f000 ba33 	b.w	800dcfc <__retarget_lock_release_recursive>
 800d896:	bf00      	nop
 800d898:	2000ab69 	.word	0x2000ab69

0800d89c <__sinit>:
 800d89c:	b510      	push	{r4, lr}
 800d89e:	4604      	mov	r4, r0
 800d8a0:	f7ff fff0 	bl	800d884 <__sfp_lock_acquire>
 800d8a4:	6a23      	ldr	r3, [r4, #32]
 800d8a6:	b11b      	cbz	r3, 800d8b0 <__sinit+0x14>
 800d8a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8ac:	f7ff bff0 	b.w	800d890 <__sfp_lock_release>
 800d8b0:	4b04      	ldr	r3, [pc, #16]	@ (800d8c4 <__sinit+0x28>)
 800d8b2:	6223      	str	r3, [r4, #32]
 800d8b4:	4b04      	ldr	r3, [pc, #16]	@ (800d8c8 <__sinit+0x2c>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d1f5      	bne.n	800d8a8 <__sinit+0xc>
 800d8bc:	f7ff ffc4 	bl	800d848 <global_stdio_init.part.0>
 800d8c0:	e7f2      	b.n	800d8a8 <__sinit+0xc>
 800d8c2:	bf00      	nop
 800d8c4:	0800d809 	.word	0x0800d809
 800d8c8:	2000ab60 	.word	0x2000ab60

0800d8cc <_fwalk_sglue>:
 800d8cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8d0:	4607      	mov	r7, r0
 800d8d2:	4688      	mov	r8, r1
 800d8d4:	4614      	mov	r4, r2
 800d8d6:	2600      	movs	r6, #0
 800d8d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d8dc:	f1b9 0901 	subs.w	r9, r9, #1
 800d8e0:	d505      	bpl.n	800d8ee <_fwalk_sglue+0x22>
 800d8e2:	6824      	ldr	r4, [r4, #0]
 800d8e4:	2c00      	cmp	r4, #0
 800d8e6:	d1f7      	bne.n	800d8d8 <_fwalk_sglue+0xc>
 800d8e8:	4630      	mov	r0, r6
 800d8ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8ee:	89ab      	ldrh	r3, [r5, #12]
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	d907      	bls.n	800d904 <_fwalk_sglue+0x38>
 800d8f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	d003      	beq.n	800d904 <_fwalk_sglue+0x38>
 800d8fc:	4629      	mov	r1, r5
 800d8fe:	4638      	mov	r0, r7
 800d900:	47c0      	blx	r8
 800d902:	4306      	orrs	r6, r0
 800d904:	3568      	adds	r5, #104	@ 0x68
 800d906:	e7e9      	b.n	800d8dc <_fwalk_sglue+0x10>

0800d908 <iprintf>:
 800d908:	b40f      	push	{r0, r1, r2, r3}
 800d90a:	b507      	push	{r0, r1, r2, lr}
 800d90c:	4906      	ldr	r1, [pc, #24]	@ (800d928 <iprintf+0x20>)
 800d90e:	ab04      	add	r3, sp, #16
 800d910:	6808      	ldr	r0, [r1, #0]
 800d912:	f853 2b04 	ldr.w	r2, [r3], #4
 800d916:	6881      	ldr	r1, [r0, #8]
 800d918:	9301      	str	r3, [sp, #4]
 800d91a:	f002 fb1d 	bl	800ff58 <_vfiprintf_r>
 800d91e:	b003      	add	sp, #12
 800d920:	f85d eb04 	ldr.w	lr, [sp], #4
 800d924:	b004      	add	sp, #16
 800d926:	4770      	bx	lr
 800d928:	200001c4 	.word	0x200001c4

0800d92c <_puts_r>:
 800d92c:	6a03      	ldr	r3, [r0, #32]
 800d92e:	b570      	push	{r4, r5, r6, lr}
 800d930:	6884      	ldr	r4, [r0, #8]
 800d932:	4605      	mov	r5, r0
 800d934:	460e      	mov	r6, r1
 800d936:	b90b      	cbnz	r3, 800d93c <_puts_r+0x10>
 800d938:	f7ff ffb0 	bl	800d89c <__sinit>
 800d93c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d93e:	07db      	lsls	r3, r3, #31
 800d940:	d405      	bmi.n	800d94e <_puts_r+0x22>
 800d942:	89a3      	ldrh	r3, [r4, #12]
 800d944:	0598      	lsls	r0, r3, #22
 800d946:	d402      	bmi.n	800d94e <_puts_r+0x22>
 800d948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d94a:	f000 f9d6 	bl	800dcfa <__retarget_lock_acquire_recursive>
 800d94e:	89a3      	ldrh	r3, [r4, #12]
 800d950:	0719      	lsls	r1, r3, #28
 800d952:	d502      	bpl.n	800d95a <_puts_r+0x2e>
 800d954:	6923      	ldr	r3, [r4, #16]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d135      	bne.n	800d9c6 <_puts_r+0x9a>
 800d95a:	4621      	mov	r1, r4
 800d95c:	4628      	mov	r0, r5
 800d95e:	f000 f8e7 	bl	800db30 <__swsetup_r>
 800d962:	b380      	cbz	r0, 800d9c6 <_puts_r+0x9a>
 800d964:	f04f 35ff 	mov.w	r5, #4294967295
 800d968:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d96a:	07da      	lsls	r2, r3, #31
 800d96c:	d405      	bmi.n	800d97a <_puts_r+0x4e>
 800d96e:	89a3      	ldrh	r3, [r4, #12]
 800d970:	059b      	lsls	r3, r3, #22
 800d972:	d402      	bmi.n	800d97a <_puts_r+0x4e>
 800d974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d976:	f000 f9c1 	bl	800dcfc <__retarget_lock_release_recursive>
 800d97a:	4628      	mov	r0, r5
 800d97c:	bd70      	pop	{r4, r5, r6, pc}
 800d97e:	2b00      	cmp	r3, #0
 800d980:	da04      	bge.n	800d98c <_puts_r+0x60>
 800d982:	69a2      	ldr	r2, [r4, #24]
 800d984:	429a      	cmp	r2, r3
 800d986:	dc17      	bgt.n	800d9b8 <_puts_r+0x8c>
 800d988:	290a      	cmp	r1, #10
 800d98a:	d015      	beq.n	800d9b8 <_puts_r+0x8c>
 800d98c:	6823      	ldr	r3, [r4, #0]
 800d98e:	1c5a      	adds	r2, r3, #1
 800d990:	6022      	str	r2, [r4, #0]
 800d992:	7019      	strb	r1, [r3, #0]
 800d994:	68a3      	ldr	r3, [r4, #8]
 800d996:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d99a:	3b01      	subs	r3, #1
 800d99c:	60a3      	str	r3, [r4, #8]
 800d99e:	2900      	cmp	r1, #0
 800d9a0:	d1ed      	bne.n	800d97e <_puts_r+0x52>
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	da11      	bge.n	800d9ca <_puts_r+0x9e>
 800d9a6:	4622      	mov	r2, r4
 800d9a8:	210a      	movs	r1, #10
 800d9aa:	4628      	mov	r0, r5
 800d9ac:	f000 f881 	bl	800dab2 <__swbuf_r>
 800d9b0:	3001      	adds	r0, #1
 800d9b2:	d0d7      	beq.n	800d964 <_puts_r+0x38>
 800d9b4:	250a      	movs	r5, #10
 800d9b6:	e7d7      	b.n	800d968 <_puts_r+0x3c>
 800d9b8:	4622      	mov	r2, r4
 800d9ba:	4628      	mov	r0, r5
 800d9bc:	f000 f879 	bl	800dab2 <__swbuf_r>
 800d9c0:	3001      	adds	r0, #1
 800d9c2:	d1e7      	bne.n	800d994 <_puts_r+0x68>
 800d9c4:	e7ce      	b.n	800d964 <_puts_r+0x38>
 800d9c6:	3e01      	subs	r6, #1
 800d9c8:	e7e4      	b.n	800d994 <_puts_r+0x68>
 800d9ca:	6823      	ldr	r3, [r4, #0]
 800d9cc:	1c5a      	adds	r2, r3, #1
 800d9ce:	6022      	str	r2, [r4, #0]
 800d9d0:	220a      	movs	r2, #10
 800d9d2:	701a      	strb	r2, [r3, #0]
 800d9d4:	e7ee      	b.n	800d9b4 <_puts_r+0x88>
	...

0800d9d8 <puts>:
 800d9d8:	4b02      	ldr	r3, [pc, #8]	@ (800d9e4 <puts+0xc>)
 800d9da:	4601      	mov	r1, r0
 800d9dc:	6818      	ldr	r0, [r3, #0]
 800d9de:	f7ff bfa5 	b.w	800d92c <_puts_r>
 800d9e2:	bf00      	nop
 800d9e4:	200001c4 	.word	0x200001c4

0800d9e8 <siprintf>:
 800d9e8:	b40e      	push	{r1, r2, r3}
 800d9ea:	b510      	push	{r4, lr}
 800d9ec:	b09d      	sub	sp, #116	@ 0x74
 800d9ee:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d9f0:	9002      	str	r0, [sp, #8]
 800d9f2:	9006      	str	r0, [sp, #24]
 800d9f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d9f8:	480a      	ldr	r0, [pc, #40]	@ (800da24 <siprintf+0x3c>)
 800d9fa:	9107      	str	r1, [sp, #28]
 800d9fc:	9104      	str	r1, [sp, #16]
 800d9fe:	490a      	ldr	r1, [pc, #40]	@ (800da28 <siprintf+0x40>)
 800da00:	f853 2b04 	ldr.w	r2, [r3], #4
 800da04:	9105      	str	r1, [sp, #20]
 800da06:	2400      	movs	r4, #0
 800da08:	a902      	add	r1, sp, #8
 800da0a:	6800      	ldr	r0, [r0, #0]
 800da0c:	9301      	str	r3, [sp, #4]
 800da0e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800da10:	f002 f97c 	bl	800fd0c <_svfiprintf_r>
 800da14:	9b02      	ldr	r3, [sp, #8]
 800da16:	701c      	strb	r4, [r3, #0]
 800da18:	b01d      	add	sp, #116	@ 0x74
 800da1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da1e:	b003      	add	sp, #12
 800da20:	4770      	bx	lr
 800da22:	bf00      	nop
 800da24:	200001c4 	.word	0x200001c4
 800da28:	ffff0208 	.word	0xffff0208

0800da2c <__sread>:
 800da2c:	b510      	push	{r4, lr}
 800da2e:	460c      	mov	r4, r1
 800da30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da34:	f000 f912 	bl	800dc5c <_read_r>
 800da38:	2800      	cmp	r0, #0
 800da3a:	bfab      	itete	ge
 800da3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800da3e:	89a3      	ldrhlt	r3, [r4, #12]
 800da40:	181b      	addge	r3, r3, r0
 800da42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800da46:	bfac      	ite	ge
 800da48:	6563      	strge	r3, [r4, #84]	@ 0x54
 800da4a:	81a3      	strhlt	r3, [r4, #12]
 800da4c:	bd10      	pop	{r4, pc}

0800da4e <__swrite>:
 800da4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da52:	461f      	mov	r7, r3
 800da54:	898b      	ldrh	r3, [r1, #12]
 800da56:	05db      	lsls	r3, r3, #23
 800da58:	4605      	mov	r5, r0
 800da5a:	460c      	mov	r4, r1
 800da5c:	4616      	mov	r6, r2
 800da5e:	d505      	bpl.n	800da6c <__swrite+0x1e>
 800da60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da64:	2302      	movs	r3, #2
 800da66:	2200      	movs	r2, #0
 800da68:	f000 f8e6 	bl	800dc38 <_lseek_r>
 800da6c:	89a3      	ldrh	r3, [r4, #12]
 800da6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800da76:	81a3      	strh	r3, [r4, #12]
 800da78:	4632      	mov	r2, r6
 800da7a:	463b      	mov	r3, r7
 800da7c:	4628      	mov	r0, r5
 800da7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da82:	f000 b8fd 	b.w	800dc80 <_write_r>

0800da86 <__sseek>:
 800da86:	b510      	push	{r4, lr}
 800da88:	460c      	mov	r4, r1
 800da8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da8e:	f000 f8d3 	bl	800dc38 <_lseek_r>
 800da92:	1c43      	adds	r3, r0, #1
 800da94:	89a3      	ldrh	r3, [r4, #12]
 800da96:	bf15      	itete	ne
 800da98:	6560      	strne	r0, [r4, #84]	@ 0x54
 800da9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800da9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800daa2:	81a3      	strheq	r3, [r4, #12]
 800daa4:	bf18      	it	ne
 800daa6:	81a3      	strhne	r3, [r4, #12]
 800daa8:	bd10      	pop	{r4, pc}

0800daaa <__sclose>:
 800daaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daae:	f000 b8b3 	b.w	800dc18 <_close_r>

0800dab2 <__swbuf_r>:
 800dab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dab4:	460e      	mov	r6, r1
 800dab6:	4614      	mov	r4, r2
 800dab8:	4605      	mov	r5, r0
 800daba:	b118      	cbz	r0, 800dac4 <__swbuf_r+0x12>
 800dabc:	6a03      	ldr	r3, [r0, #32]
 800dabe:	b90b      	cbnz	r3, 800dac4 <__swbuf_r+0x12>
 800dac0:	f7ff feec 	bl	800d89c <__sinit>
 800dac4:	69a3      	ldr	r3, [r4, #24]
 800dac6:	60a3      	str	r3, [r4, #8]
 800dac8:	89a3      	ldrh	r3, [r4, #12]
 800daca:	071a      	lsls	r2, r3, #28
 800dacc:	d501      	bpl.n	800dad2 <__swbuf_r+0x20>
 800dace:	6923      	ldr	r3, [r4, #16]
 800dad0:	b943      	cbnz	r3, 800dae4 <__swbuf_r+0x32>
 800dad2:	4621      	mov	r1, r4
 800dad4:	4628      	mov	r0, r5
 800dad6:	f000 f82b 	bl	800db30 <__swsetup_r>
 800dada:	b118      	cbz	r0, 800dae4 <__swbuf_r+0x32>
 800dadc:	f04f 37ff 	mov.w	r7, #4294967295
 800dae0:	4638      	mov	r0, r7
 800dae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dae4:	6823      	ldr	r3, [r4, #0]
 800dae6:	6922      	ldr	r2, [r4, #16]
 800dae8:	1a98      	subs	r0, r3, r2
 800daea:	6963      	ldr	r3, [r4, #20]
 800daec:	b2f6      	uxtb	r6, r6
 800daee:	4283      	cmp	r3, r0
 800daf0:	4637      	mov	r7, r6
 800daf2:	dc05      	bgt.n	800db00 <__swbuf_r+0x4e>
 800daf4:	4621      	mov	r1, r4
 800daf6:	4628      	mov	r0, r5
 800daf8:	f002 fbca 	bl	8010290 <_fflush_r>
 800dafc:	2800      	cmp	r0, #0
 800dafe:	d1ed      	bne.n	800dadc <__swbuf_r+0x2a>
 800db00:	68a3      	ldr	r3, [r4, #8]
 800db02:	3b01      	subs	r3, #1
 800db04:	60a3      	str	r3, [r4, #8]
 800db06:	6823      	ldr	r3, [r4, #0]
 800db08:	1c5a      	adds	r2, r3, #1
 800db0a:	6022      	str	r2, [r4, #0]
 800db0c:	701e      	strb	r6, [r3, #0]
 800db0e:	6962      	ldr	r2, [r4, #20]
 800db10:	1c43      	adds	r3, r0, #1
 800db12:	429a      	cmp	r2, r3
 800db14:	d004      	beq.n	800db20 <__swbuf_r+0x6e>
 800db16:	89a3      	ldrh	r3, [r4, #12]
 800db18:	07db      	lsls	r3, r3, #31
 800db1a:	d5e1      	bpl.n	800dae0 <__swbuf_r+0x2e>
 800db1c:	2e0a      	cmp	r6, #10
 800db1e:	d1df      	bne.n	800dae0 <__swbuf_r+0x2e>
 800db20:	4621      	mov	r1, r4
 800db22:	4628      	mov	r0, r5
 800db24:	f002 fbb4 	bl	8010290 <_fflush_r>
 800db28:	2800      	cmp	r0, #0
 800db2a:	d0d9      	beq.n	800dae0 <__swbuf_r+0x2e>
 800db2c:	e7d6      	b.n	800dadc <__swbuf_r+0x2a>
	...

0800db30 <__swsetup_r>:
 800db30:	b538      	push	{r3, r4, r5, lr}
 800db32:	4b29      	ldr	r3, [pc, #164]	@ (800dbd8 <__swsetup_r+0xa8>)
 800db34:	4605      	mov	r5, r0
 800db36:	6818      	ldr	r0, [r3, #0]
 800db38:	460c      	mov	r4, r1
 800db3a:	b118      	cbz	r0, 800db44 <__swsetup_r+0x14>
 800db3c:	6a03      	ldr	r3, [r0, #32]
 800db3e:	b90b      	cbnz	r3, 800db44 <__swsetup_r+0x14>
 800db40:	f7ff feac 	bl	800d89c <__sinit>
 800db44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db48:	0719      	lsls	r1, r3, #28
 800db4a:	d422      	bmi.n	800db92 <__swsetup_r+0x62>
 800db4c:	06da      	lsls	r2, r3, #27
 800db4e:	d407      	bmi.n	800db60 <__swsetup_r+0x30>
 800db50:	2209      	movs	r2, #9
 800db52:	602a      	str	r2, [r5, #0]
 800db54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db58:	81a3      	strh	r3, [r4, #12]
 800db5a:	f04f 30ff 	mov.w	r0, #4294967295
 800db5e:	e033      	b.n	800dbc8 <__swsetup_r+0x98>
 800db60:	0758      	lsls	r0, r3, #29
 800db62:	d512      	bpl.n	800db8a <__swsetup_r+0x5a>
 800db64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db66:	b141      	cbz	r1, 800db7a <__swsetup_r+0x4a>
 800db68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800db6c:	4299      	cmp	r1, r3
 800db6e:	d002      	beq.n	800db76 <__swsetup_r+0x46>
 800db70:	4628      	mov	r0, r5
 800db72:	f000 ff6d 	bl	800ea50 <_free_r>
 800db76:	2300      	movs	r3, #0
 800db78:	6363      	str	r3, [r4, #52]	@ 0x34
 800db7a:	89a3      	ldrh	r3, [r4, #12]
 800db7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800db80:	81a3      	strh	r3, [r4, #12]
 800db82:	2300      	movs	r3, #0
 800db84:	6063      	str	r3, [r4, #4]
 800db86:	6923      	ldr	r3, [r4, #16]
 800db88:	6023      	str	r3, [r4, #0]
 800db8a:	89a3      	ldrh	r3, [r4, #12]
 800db8c:	f043 0308 	orr.w	r3, r3, #8
 800db90:	81a3      	strh	r3, [r4, #12]
 800db92:	6923      	ldr	r3, [r4, #16]
 800db94:	b94b      	cbnz	r3, 800dbaa <__swsetup_r+0x7a>
 800db96:	89a3      	ldrh	r3, [r4, #12]
 800db98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800db9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dba0:	d003      	beq.n	800dbaa <__swsetup_r+0x7a>
 800dba2:	4621      	mov	r1, r4
 800dba4:	4628      	mov	r0, r5
 800dba6:	f002 fbc1 	bl	801032c <__smakebuf_r>
 800dbaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbae:	f013 0201 	ands.w	r2, r3, #1
 800dbb2:	d00a      	beq.n	800dbca <__swsetup_r+0x9a>
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	60a2      	str	r2, [r4, #8]
 800dbb8:	6962      	ldr	r2, [r4, #20]
 800dbba:	4252      	negs	r2, r2
 800dbbc:	61a2      	str	r2, [r4, #24]
 800dbbe:	6922      	ldr	r2, [r4, #16]
 800dbc0:	b942      	cbnz	r2, 800dbd4 <__swsetup_r+0xa4>
 800dbc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dbc6:	d1c5      	bne.n	800db54 <__swsetup_r+0x24>
 800dbc8:	bd38      	pop	{r3, r4, r5, pc}
 800dbca:	0799      	lsls	r1, r3, #30
 800dbcc:	bf58      	it	pl
 800dbce:	6962      	ldrpl	r2, [r4, #20]
 800dbd0:	60a2      	str	r2, [r4, #8]
 800dbd2:	e7f4      	b.n	800dbbe <__swsetup_r+0x8e>
 800dbd4:	2000      	movs	r0, #0
 800dbd6:	e7f7      	b.n	800dbc8 <__swsetup_r+0x98>
 800dbd8:	200001c4 	.word	0x200001c4

0800dbdc <memset>:
 800dbdc:	4402      	add	r2, r0
 800dbde:	4603      	mov	r3, r0
 800dbe0:	4293      	cmp	r3, r2
 800dbe2:	d100      	bne.n	800dbe6 <memset+0xa>
 800dbe4:	4770      	bx	lr
 800dbe6:	f803 1b01 	strb.w	r1, [r3], #1
 800dbea:	e7f9      	b.n	800dbe0 <memset+0x4>

0800dbec <strncmp>:
 800dbec:	b510      	push	{r4, lr}
 800dbee:	b16a      	cbz	r2, 800dc0c <strncmp+0x20>
 800dbf0:	3901      	subs	r1, #1
 800dbf2:	1884      	adds	r4, r0, r2
 800dbf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbf8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dbfc:	429a      	cmp	r2, r3
 800dbfe:	d103      	bne.n	800dc08 <strncmp+0x1c>
 800dc00:	42a0      	cmp	r0, r4
 800dc02:	d001      	beq.n	800dc08 <strncmp+0x1c>
 800dc04:	2a00      	cmp	r2, #0
 800dc06:	d1f5      	bne.n	800dbf4 <strncmp+0x8>
 800dc08:	1ad0      	subs	r0, r2, r3
 800dc0a:	bd10      	pop	{r4, pc}
 800dc0c:	4610      	mov	r0, r2
 800dc0e:	e7fc      	b.n	800dc0a <strncmp+0x1e>

0800dc10 <_localeconv_r>:
 800dc10:	4800      	ldr	r0, [pc, #0]	@ (800dc14 <_localeconv_r+0x4>)
 800dc12:	4770      	bx	lr
 800dc14:	20000148 	.word	0x20000148

0800dc18 <_close_r>:
 800dc18:	b538      	push	{r3, r4, r5, lr}
 800dc1a:	4d06      	ldr	r5, [pc, #24]	@ (800dc34 <_close_r+0x1c>)
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	4604      	mov	r4, r0
 800dc20:	4608      	mov	r0, r1
 800dc22:	602b      	str	r3, [r5, #0]
 800dc24:	f7f8 fc8e 	bl	8006544 <_close>
 800dc28:	1c43      	adds	r3, r0, #1
 800dc2a:	d102      	bne.n	800dc32 <_close_r+0x1a>
 800dc2c:	682b      	ldr	r3, [r5, #0]
 800dc2e:	b103      	cbz	r3, 800dc32 <_close_r+0x1a>
 800dc30:	6023      	str	r3, [r4, #0]
 800dc32:	bd38      	pop	{r3, r4, r5, pc}
 800dc34:	2000ab64 	.word	0x2000ab64

0800dc38 <_lseek_r>:
 800dc38:	b538      	push	{r3, r4, r5, lr}
 800dc3a:	4d07      	ldr	r5, [pc, #28]	@ (800dc58 <_lseek_r+0x20>)
 800dc3c:	4604      	mov	r4, r0
 800dc3e:	4608      	mov	r0, r1
 800dc40:	4611      	mov	r1, r2
 800dc42:	2200      	movs	r2, #0
 800dc44:	602a      	str	r2, [r5, #0]
 800dc46:	461a      	mov	r2, r3
 800dc48:	f7f8 fca3 	bl	8006592 <_lseek>
 800dc4c:	1c43      	adds	r3, r0, #1
 800dc4e:	d102      	bne.n	800dc56 <_lseek_r+0x1e>
 800dc50:	682b      	ldr	r3, [r5, #0]
 800dc52:	b103      	cbz	r3, 800dc56 <_lseek_r+0x1e>
 800dc54:	6023      	str	r3, [r4, #0]
 800dc56:	bd38      	pop	{r3, r4, r5, pc}
 800dc58:	2000ab64 	.word	0x2000ab64

0800dc5c <_read_r>:
 800dc5c:	b538      	push	{r3, r4, r5, lr}
 800dc5e:	4d07      	ldr	r5, [pc, #28]	@ (800dc7c <_read_r+0x20>)
 800dc60:	4604      	mov	r4, r0
 800dc62:	4608      	mov	r0, r1
 800dc64:	4611      	mov	r1, r2
 800dc66:	2200      	movs	r2, #0
 800dc68:	602a      	str	r2, [r5, #0]
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	f7f8 fc31 	bl	80064d2 <_read>
 800dc70:	1c43      	adds	r3, r0, #1
 800dc72:	d102      	bne.n	800dc7a <_read_r+0x1e>
 800dc74:	682b      	ldr	r3, [r5, #0]
 800dc76:	b103      	cbz	r3, 800dc7a <_read_r+0x1e>
 800dc78:	6023      	str	r3, [r4, #0]
 800dc7a:	bd38      	pop	{r3, r4, r5, pc}
 800dc7c:	2000ab64 	.word	0x2000ab64

0800dc80 <_write_r>:
 800dc80:	b538      	push	{r3, r4, r5, lr}
 800dc82:	4d07      	ldr	r5, [pc, #28]	@ (800dca0 <_write_r+0x20>)
 800dc84:	4604      	mov	r4, r0
 800dc86:	4608      	mov	r0, r1
 800dc88:	4611      	mov	r1, r2
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	602a      	str	r2, [r5, #0]
 800dc8e:	461a      	mov	r2, r3
 800dc90:	f7f8 fc3c 	bl	800650c <_write>
 800dc94:	1c43      	adds	r3, r0, #1
 800dc96:	d102      	bne.n	800dc9e <_write_r+0x1e>
 800dc98:	682b      	ldr	r3, [r5, #0]
 800dc9a:	b103      	cbz	r3, 800dc9e <_write_r+0x1e>
 800dc9c:	6023      	str	r3, [r4, #0]
 800dc9e:	bd38      	pop	{r3, r4, r5, pc}
 800dca0:	2000ab64 	.word	0x2000ab64

0800dca4 <__errno>:
 800dca4:	4b01      	ldr	r3, [pc, #4]	@ (800dcac <__errno+0x8>)
 800dca6:	6818      	ldr	r0, [r3, #0]
 800dca8:	4770      	bx	lr
 800dcaa:	bf00      	nop
 800dcac:	200001c4 	.word	0x200001c4

0800dcb0 <__libc_init_array>:
 800dcb0:	b570      	push	{r4, r5, r6, lr}
 800dcb2:	4d0d      	ldr	r5, [pc, #52]	@ (800dce8 <__libc_init_array+0x38>)
 800dcb4:	4c0d      	ldr	r4, [pc, #52]	@ (800dcec <__libc_init_array+0x3c>)
 800dcb6:	1b64      	subs	r4, r4, r5
 800dcb8:	10a4      	asrs	r4, r4, #2
 800dcba:	2600      	movs	r6, #0
 800dcbc:	42a6      	cmp	r6, r4
 800dcbe:	d109      	bne.n	800dcd4 <__libc_init_array+0x24>
 800dcc0:	4d0b      	ldr	r5, [pc, #44]	@ (800dcf0 <__libc_init_array+0x40>)
 800dcc2:	4c0c      	ldr	r4, [pc, #48]	@ (800dcf4 <__libc_init_array+0x44>)
 800dcc4:	f002 ffb0 	bl	8010c28 <_init>
 800dcc8:	1b64      	subs	r4, r4, r5
 800dcca:	10a4      	asrs	r4, r4, #2
 800dccc:	2600      	movs	r6, #0
 800dcce:	42a6      	cmp	r6, r4
 800dcd0:	d105      	bne.n	800dcde <__libc_init_array+0x2e>
 800dcd2:	bd70      	pop	{r4, r5, r6, pc}
 800dcd4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcd8:	4798      	blx	r3
 800dcda:	3601      	adds	r6, #1
 800dcdc:	e7ee      	b.n	800dcbc <__libc_init_array+0xc>
 800dcde:	f855 3b04 	ldr.w	r3, [r5], #4
 800dce2:	4798      	blx	r3
 800dce4:	3601      	adds	r6, #1
 800dce6:	e7f2      	b.n	800dcce <__libc_init_array+0x1e>
 800dce8:	080122e8 	.word	0x080122e8
 800dcec:	080122e8 	.word	0x080122e8
 800dcf0:	080122e8 	.word	0x080122e8
 800dcf4:	080122ec 	.word	0x080122ec

0800dcf8 <__retarget_lock_init_recursive>:
 800dcf8:	4770      	bx	lr

0800dcfa <__retarget_lock_acquire_recursive>:
 800dcfa:	4770      	bx	lr

0800dcfc <__retarget_lock_release_recursive>:
 800dcfc:	4770      	bx	lr

0800dcfe <memcpy>:
 800dcfe:	440a      	add	r2, r1
 800dd00:	4291      	cmp	r1, r2
 800dd02:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd06:	d100      	bne.n	800dd0a <memcpy+0xc>
 800dd08:	4770      	bx	lr
 800dd0a:	b510      	push	{r4, lr}
 800dd0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd10:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd14:	4291      	cmp	r1, r2
 800dd16:	d1f9      	bne.n	800dd0c <memcpy+0xe>
 800dd18:	bd10      	pop	{r4, pc}
 800dd1a:	0000      	movs	r0, r0
 800dd1c:	0000      	movs	r0, r0
	...

0800dd20 <nan>:
 800dd20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800dd28 <nan+0x8>
 800dd24:	4770      	bx	lr
 800dd26:	bf00      	nop
 800dd28:	00000000 	.word	0x00000000
 800dd2c:	7ff80000 	.word	0x7ff80000

0800dd30 <modff>:
 800dd30:	b538      	push	{r3, r4, r5, lr}
 800dd32:	ee10 4a10 	vmov	r4, s0
 800dd36:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 800dd3a:	3b7f      	subs	r3, #127	@ 0x7f
 800dd3c:	2b16      	cmp	r3, #22
 800dd3e:	ed2d 8b02 	vpush	{d8}
 800dd42:	4605      	mov	r5, r0
 800dd44:	eeb0 8a40 	vmov.f32	s16, s0
 800dd48:	dc1d      	bgt.n	800dd86 <modff+0x56>
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	da07      	bge.n	800dd5e <modff+0x2e>
 800dd4e:	f004 4400 	and.w	r4, r4, #2147483648	@ 0x80000000
 800dd52:	6004      	str	r4, [r0, #0]
 800dd54:	eeb0 0a48 	vmov.f32	s0, s16
 800dd58:	ecbd 8b02 	vpop	{d8}
 800dd5c:	bd38      	pop	{r3, r4, r5, pc}
 800dd5e:	4a0f      	ldr	r2, [pc, #60]	@ (800dd9c <modff+0x6c>)
 800dd60:	fa42 f303 	asr.w	r3, r2, r3
 800dd64:	421c      	tst	r4, r3
 800dd66:	d106      	bne.n	800dd76 <modff+0x46>
 800dd68:	ed85 0a00 	vstr	s0, [r5]
 800dd6c:	f004 4300 	and.w	r3, r4, #2147483648	@ 0x80000000
 800dd70:	ee08 3a10 	vmov	s16, r3
 800dd74:	e7ee      	b.n	800dd54 <modff+0x24>
 800dd76:	ea24 0403 	bic.w	r4, r4, r3
 800dd7a:	ee07 4a90 	vmov	s15, r4
 800dd7e:	6004      	str	r4, [r0, #0]
 800dd80:	ee30 8a67 	vsub.f32	s16, s0, s15
 800dd84:	e7e6      	b.n	800dd54 <modff+0x24>
 800dd86:	ed80 0a00 	vstr	s0, [r0]
 800dd8a:	f002 fb57 	bl	801043c <__fpclassifyf>
 800dd8e:	2800      	cmp	r0, #0
 800dd90:	d1ec      	bne.n	800dd6c <modff+0x3c>
 800dd92:	ee38 8a08 	vadd.f32	s16, s16, s16
 800dd96:	ed85 8a00 	vstr	s16, [r5]
 800dd9a:	e7db      	b.n	800dd54 <modff+0x24>
 800dd9c:	007fffff 	.word	0x007fffff

0800dda0 <quorem>:
 800dda0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dda4:	6903      	ldr	r3, [r0, #16]
 800dda6:	690c      	ldr	r4, [r1, #16]
 800dda8:	42a3      	cmp	r3, r4
 800ddaa:	4607      	mov	r7, r0
 800ddac:	db7e      	blt.n	800deac <quorem+0x10c>
 800ddae:	3c01      	subs	r4, #1
 800ddb0:	f101 0814 	add.w	r8, r1, #20
 800ddb4:	00a3      	lsls	r3, r4, #2
 800ddb6:	f100 0514 	add.w	r5, r0, #20
 800ddba:	9300      	str	r3, [sp, #0]
 800ddbc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ddc0:	9301      	str	r3, [sp, #4]
 800ddc2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ddc6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ddca:	3301      	adds	r3, #1
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ddd2:	fbb2 f6f3 	udiv	r6, r2, r3
 800ddd6:	d32e      	bcc.n	800de36 <quorem+0x96>
 800ddd8:	f04f 0a00 	mov.w	sl, #0
 800dddc:	46c4      	mov	ip, r8
 800ddde:	46ae      	mov	lr, r5
 800dde0:	46d3      	mov	fp, sl
 800dde2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dde6:	b298      	uxth	r0, r3
 800dde8:	fb06 a000 	mla	r0, r6, r0, sl
 800ddec:	0c02      	lsrs	r2, r0, #16
 800ddee:	0c1b      	lsrs	r3, r3, #16
 800ddf0:	fb06 2303 	mla	r3, r6, r3, r2
 800ddf4:	f8de 2000 	ldr.w	r2, [lr]
 800ddf8:	b280      	uxth	r0, r0
 800ddfa:	b292      	uxth	r2, r2
 800ddfc:	1a12      	subs	r2, r2, r0
 800ddfe:	445a      	add	r2, fp
 800de00:	f8de 0000 	ldr.w	r0, [lr]
 800de04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de08:	b29b      	uxth	r3, r3
 800de0a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800de0e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800de12:	b292      	uxth	r2, r2
 800de14:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800de18:	45e1      	cmp	r9, ip
 800de1a:	f84e 2b04 	str.w	r2, [lr], #4
 800de1e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800de22:	d2de      	bcs.n	800dde2 <quorem+0x42>
 800de24:	9b00      	ldr	r3, [sp, #0]
 800de26:	58eb      	ldr	r3, [r5, r3]
 800de28:	b92b      	cbnz	r3, 800de36 <quorem+0x96>
 800de2a:	9b01      	ldr	r3, [sp, #4]
 800de2c:	3b04      	subs	r3, #4
 800de2e:	429d      	cmp	r5, r3
 800de30:	461a      	mov	r2, r3
 800de32:	d32f      	bcc.n	800de94 <quorem+0xf4>
 800de34:	613c      	str	r4, [r7, #16]
 800de36:	4638      	mov	r0, r7
 800de38:	f001 fd12 	bl	800f860 <__mcmp>
 800de3c:	2800      	cmp	r0, #0
 800de3e:	db25      	blt.n	800de8c <quorem+0xec>
 800de40:	4629      	mov	r1, r5
 800de42:	2000      	movs	r0, #0
 800de44:	f858 2b04 	ldr.w	r2, [r8], #4
 800de48:	f8d1 c000 	ldr.w	ip, [r1]
 800de4c:	fa1f fe82 	uxth.w	lr, r2
 800de50:	fa1f f38c 	uxth.w	r3, ip
 800de54:	eba3 030e 	sub.w	r3, r3, lr
 800de58:	4403      	add	r3, r0
 800de5a:	0c12      	lsrs	r2, r2, #16
 800de5c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800de60:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800de64:	b29b      	uxth	r3, r3
 800de66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de6a:	45c1      	cmp	r9, r8
 800de6c:	f841 3b04 	str.w	r3, [r1], #4
 800de70:	ea4f 4022 	mov.w	r0, r2, asr #16
 800de74:	d2e6      	bcs.n	800de44 <quorem+0xa4>
 800de76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de7e:	b922      	cbnz	r2, 800de8a <quorem+0xea>
 800de80:	3b04      	subs	r3, #4
 800de82:	429d      	cmp	r5, r3
 800de84:	461a      	mov	r2, r3
 800de86:	d30b      	bcc.n	800dea0 <quorem+0x100>
 800de88:	613c      	str	r4, [r7, #16]
 800de8a:	3601      	adds	r6, #1
 800de8c:	4630      	mov	r0, r6
 800de8e:	b003      	add	sp, #12
 800de90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de94:	6812      	ldr	r2, [r2, #0]
 800de96:	3b04      	subs	r3, #4
 800de98:	2a00      	cmp	r2, #0
 800de9a:	d1cb      	bne.n	800de34 <quorem+0x94>
 800de9c:	3c01      	subs	r4, #1
 800de9e:	e7c6      	b.n	800de2e <quorem+0x8e>
 800dea0:	6812      	ldr	r2, [r2, #0]
 800dea2:	3b04      	subs	r3, #4
 800dea4:	2a00      	cmp	r2, #0
 800dea6:	d1ef      	bne.n	800de88 <quorem+0xe8>
 800dea8:	3c01      	subs	r4, #1
 800deaa:	e7ea      	b.n	800de82 <quorem+0xe2>
 800deac:	2000      	movs	r0, #0
 800deae:	e7ee      	b.n	800de8e <quorem+0xee>

0800deb0 <_dtoa_r>:
 800deb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deb4:	69c7      	ldr	r7, [r0, #28]
 800deb6:	b097      	sub	sp, #92	@ 0x5c
 800deb8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800debc:	ec55 4b10 	vmov	r4, r5, d0
 800dec0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800dec2:	9107      	str	r1, [sp, #28]
 800dec4:	4681      	mov	r9, r0
 800dec6:	920c      	str	r2, [sp, #48]	@ 0x30
 800dec8:	9311      	str	r3, [sp, #68]	@ 0x44
 800deca:	b97f      	cbnz	r7, 800deec <_dtoa_r+0x3c>
 800decc:	2010      	movs	r0, #16
 800dece:	f001 f943 	bl	800f158 <malloc>
 800ded2:	4602      	mov	r2, r0
 800ded4:	f8c9 001c 	str.w	r0, [r9, #28]
 800ded8:	b920      	cbnz	r0, 800dee4 <_dtoa_r+0x34>
 800deda:	4ba9      	ldr	r3, [pc, #676]	@ (800e180 <_dtoa_r+0x2d0>)
 800dedc:	21ef      	movs	r1, #239	@ 0xef
 800dede:	48a9      	ldr	r0, [pc, #676]	@ (800e184 <_dtoa_r+0x2d4>)
 800dee0:	f002 fac8 	bl	8010474 <__assert_func>
 800dee4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dee8:	6007      	str	r7, [r0, #0]
 800deea:	60c7      	str	r7, [r0, #12]
 800deec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800def0:	6819      	ldr	r1, [r3, #0]
 800def2:	b159      	cbz	r1, 800df0c <_dtoa_r+0x5c>
 800def4:	685a      	ldr	r2, [r3, #4]
 800def6:	604a      	str	r2, [r1, #4]
 800def8:	2301      	movs	r3, #1
 800defa:	4093      	lsls	r3, r2
 800defc:	608b      	str	r3, [r1, #8]
 800defe:	4648      	mov	r0, r9
 800df00:	f001 fa32 	bl	800f368 <_Bfree>
 800df04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800df08:	2200      	movs	r2, #0
 800df0a:	601a      	str	r2, [r3, #0]
 800df0c:	1e2b      	subs	r3, r5, #0
 800df0e:	bfb9      	ittee	lt
 800df10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800df14:	9305      	strlt	r3, [sp, #20]
 800df16:	2300      	movge	r3, #0
 800df18:	6033      	strge	r3, [r6, #0]
 800df1a:	9f05      	ldr	r7, [sp, #20]
 800df1c:	4b9a      	ldr	r3, [pc, #616]	@ (800e188 <_dtoa_r+0x2d8>)
 800df1e:	bfbc      	itt	lt
 800df20:	2201      	movlt	r2, #1
 800df22:	6032      	strlt	r2, [r6, #0]
 800df24:	43bb      	bics	r3, r7
 800df26:	d112      	bne.n	800df4e <_dtoa_r+0x9e>
 800df28:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800df2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800df2e:	6013      	str	r3, [r2, #0]
 800df30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800df34:	4323      	orrs	r3, r4
 800df36:	f000 855a 	beq.w	800e9ee <_dtoa_r+0xb3e>
 800df3a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800df3c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800e19c <_dtoa_r+0x2ec>
 800df40:	2b00      	cmp	r3, #0
 800df42:	f000 855c 	beq.w	800e9fe <_dtoa_r+0xb4e>
 800df46:	f10a 0303 	add.w	r3, sl, #3
 800df4a:	f000 bd56 	b.w	800e9fa <_dtoa_r+0xb4a>
 800df4e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800df52:	2200      	movs	r2, #0
 800df54:	ec51 0b17 	vmov	r0, r1, d7
 800df58:	2300      	movs	r3, #0
 800df5a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800df5e:	f7f2 fde3 	bl	8000b28 <__aeabi_dcmpeq>
 800df62:	4680      	mov	r8, r0
 800df64:	b158      	cbz	r0, 800df7e <_dtoa_r+0xce>
 800df66:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800df68:	2301      	movs	r3, #1
 800df6a:	6013      	str	r3, [r2, #0]
 800df6c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800df6e:	b113      	cbz	r3, 800df76 <_dtoa_r+0xc6>
 800df70:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800df72:	4b86      	ldr	r3, [pc, #536]	@ (800e18c <_dtoa_r+0x2dc>)
 800df74:	6013      	str	r3, [r2, #0]
 800df76:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800e1a0 <_dtoa_r+0x2f0>
 800df7a:	f000 bd40 	b.w	800e9fe <_dtoa_r+0xb4e>
 800df7e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800df82:	aa14      	add	r2, sp, #80	@ 0x50
 800df84:	a915      	add	r1, sp, #84	@ 0x54
 800df86:	4648      	mov	r0, r9
 800df88:	f001 fd8a 	bl	800faa0 <__d2b>
 800df8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800df90:	9002      	str	r0, [sp, #8]
 800df92:	2e00      	cmp	r6, #0
 800df94:	d078      	beq.n	800e088 <_dtoa_r+0x1d8>
 800df96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df98:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800df9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dfa0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dfa4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800dfa8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800dfac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	4b76      	ldr	r3, [pc, #472]	@ (800e190 <_dtoa_r+0x2e0>)
 800dfb6:	f7f2 f997 	bl	80002e8 <__aeabi_dsub>
 800dfba:	a36b      	add	r3, pc, #428	@ (adr r3, 800e168 <_dtoa_r+0x2b8>)
 800dfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc0:	f7f2 fb4a 	bl	8000658 <__aeabi_dmul>
 800dfc4:	a36a      	add	r3, pc, #424	@ (adr r3, 800e170 <_dtoa_r+0x2c0>)
 800dfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfca:	f7f2 f98f 	bl	80002ec <__adddf3>
 800dfce:	4604      	mov	r4, r0
 800dfd0:	4630      	mov	r0, r6
 800dfd2:	460d      	mov	r5, r1
 800dfd4:	f7f2 fad6 	bl	8000584 <__aeabi_i2d>
 800dfd8:	a367      	add	r3, pc, #412	@ (adr r3, 800e178 <_dtoa_r+0x2c8>)
 800dfda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfde:	f7f2 fb3b 	bl	8000658 <__aeabi_dmul>
 800dfe2:	4602      	mov	r2, r0
 800dfe4:	460b      	mov	r3, r1
 800dfe6:	4620      	mov	r0, r4
 800dfe8:	4629      	mov	r1, r5
 800dfea:	f7f2 f97f 	bl	80002ec <__adddf3>
 800dfee:	4604      	mov	r4, r0
 800dff0:	460d      	mov	r5, r1
 800dff2:	f7f2 fde1 	bl	8000bb8 <__aeabi_d2iz>
 800dff6:	2200      	movs	r2, #0
 800dff8:	4607      	mov	r7, r0
 800dffa:	2300      	movs	r3, #0
 800dffc:	4620      	mov	r0, r4
 800dffe:	4629      	mov	r1, r5
 800e000:	f7f2 fd9c 	bl	8000b3c <__aeabi_dcmplt>
 800e004:	b140      	cbz	r0, 800e018 <_dtoa_r+0x168>
 800e006:	4638      	mov	r0, r7
 800e008:	f7f2 fabc 	bl	8000584 <__aeabi_i2d>
 800e00c:	4622      	mov	r2, r4
 800e00e:	462b      	mov	r3, r5
 800e010:	f7f2 fd8a 	bl	8000b28 <__aeabi_dcmpeq>
 800e014:	b900      	cbnz	r0, 800e018 <_dtoa_r+0x168>
 800e016:	3f01      	subs	r7, #1
 800e018:	2f16      	cmp	r7, #22
 800e01a:	d852      	bhi.n	800e0c2 <_dtoa_r+0x212>
 800e01c:	4b5d      	ldr	r3, [pc, #372]	@ (800e194 <_dtoa_r+0x2e4>)
 800e01e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e026:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e02a:	f7f2 fd87 	bl	8000b3c <__aeabi_dcmplt>
 800e02e:	2800      	cmp	r0, #0
 800e030:	d049      	beq.n	800e0c6 <_dtoa_r+0x216>
 800e032:	3f01      	subs	r7, #1
 800e034:	2300      	movs	r3, #0
 800e036:	9310      	str	r3, [sp, #64]	@ 0x40
 800e038:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e03a:	1b9b      	subs	r3, r3, r6
 800e03c:	1e5a      	subs	r2, r3, #1
 800e03e:	bf45      	ittet	mi
 800e040:	f1c3 0301 	rsbmi	r3, r3, #1
 800e044:	9300      	strmi	r3, [sp, #0]
 800e046:	2300      	movpl	r3, #0
 800e048:	2300      	movmi	r3, #0
 800e04a:	9206      	str	r2, [sp, #24]
 800e04c:	bf54      	ite	pl
 800e04e:	9300      	strpl	r3, [sp, #0]
 800e050:	9306      	strmi	r3, [sp, #24]
 800e052:	2f00      	cmp	r7, #0
 800e054:	db39      	blt.n	800e0ca <_dtoa_r+0x21a>
 800e056:	9b06      	ldr	r3, [sp, #24]
 800e058:	970d      	str	r7, [sp, #52]	@ 0x34
 800e05a:	443b      	add	r3, r7
 800e05c:	9306      	str	r3, [sp, #24]
 800e05e:	2300      	movs	r3, #0
 800e060:	9308      	str	r3, [sp, #32]
 800e062:	9b07      	ldr	r3, [sp, #28]
 800e064:	2b09      	cmp	r3, #9
 800e066:	d863      	bhi.n	800e130 <_dtoa_r+0x280>
 800e068:	2b05      	cmp	r3, #5
 800e06a:	bfc4      	itt	gt
 800e06c:	3b04      	subgt	r3, #4
 800e06e:	9307      	strgt	r3, [sp, #28]
 800e070:	9b07      	ldr	r3, [sp, #28]
 800e072:	f1a3 0302 	sub.w	r3, r3, #2
 800e076:	bfcc      	ite	gt
 800e078:	2400      	movgt	r4, #0
 800e07a:	2401      	movle	r4, #1
 800e07c:	2b03      	cmp	r3, #3
 800e07e:	d863      	bhi.n	800e148 <_dtoa_r+0x298>
 800e080:	e8df f003 	tbb	[pc, r3]
 800e084:	2b375452 	.word	0x2b375452
 800e088:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e08c:	441e      	add	r6, r3
 800e08e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e092:	2b20      	cmp	r3, #32
 800e094:	bfc1      	itttt	gt
 800e096:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e09a:	409f      	lslgt	r7, r3
 800e09c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e0a0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e0a4:	bfd6      	itet	le
 800e0a6:	f1c3 0320 	rsble	r3, r3, #32
 800e0aa:	ea47 0003 	orrgt.w	r0, r7, r3
 800e0ae:	fa04 f003 	lslle.w	r0, r4, r3
 800e0b2:	f7f2 fa57 	bl	8000564 <__aeabi_ui2d>
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e0bc:	3e01      	subs	r6, #1
 800e0be:	9212      	str	r2, [sp, #72]	@ 0x48
 800e0c0:	e776      	b.n	800dfb0 <_dtoa_r+0x100>
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	e7b7      	b.n	800e036 <_dtoa_r+0x186>
 800e0c6:	9010      	str	r0, [sp, #64]	@ 0x40
 800e0c8:	e7b6      	b.n	800e038 <_dtoa_r+0x188>
 800e0ca:	9b00      	ldr	r3, [sp, #0]
 800e0cc:	1bdb      	subs	r3, r3, r7
 800e0ce:	9300      	str	r3, [sp, #0]
 800e0d0:	427b      	negs	r3, r7
 800e0d2:	9308      	str	r3, [sp, #32]
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	930d      	str	r3, [sp, #52]	@ 0x34
 800e0d8:	e7c3      	b.n	800e062 <_dtoa_r+0x1b2>
 800e0da:	2301      	movs	r3, #1
 800e0dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e0e0:	eb07 0b03 	add.w	fp, r7, r3
 800e0e4:	f10b 0301 	add.w	r3, fp, #1
 800e0e8:	2b01      	cmp	r3, #1
 800e0ea:	9303      	str	r3, [sp, #12]
 800e0ec:	bfb8      	it	lt
 800e0ee:	2301      	movlt	r3, #1
 800e0f0:	e006      	b.n	800e100 <_dtoa_r+0x250>
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	dd28      	ble.n	800e14e <_dtoa_r+0x29e>
 800e0fc:	469b      	mov	fp, r3
 800e0fe:	9303      	str	r3, [sp, #12]
 800e100:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e104:	2100      	movs	r1, #0
 800e106:	2204      	movs	r2, #4
 800e108:	f102 0514 	add.w	r5, r2, #20
 800e10c:	429d      	cmp	r5, r3
 800e10e:	d926      	bls.n	800e15e <_dtoa_r+0x2ae>
 800e110:	6041      	str	r1, [r0, #4]
 800e112:	4648      	mov	r0, r9
 800e114:	f001 f8e8 	bl	800f2e8 <_Balloc>
 800e118:	4682      	mov	sl, r0
 800e11a:	2800      	cmp	r0, #0
 800e11c:	d142      	bne.n	800e1a4 <_dtoa_r+0x2f4>
 800e11e:	4b1e      	ldr	r3, [pc, #120]	@ (800e198 <_dtoa_r+0x2e8>)
 800e120:	4602      	mov	r2, r0
 800e122:	f240 11af 	movw	r1, #431	@ 0x1af
 800e126:	e6da      	b.n	800dede <_dtoa_r+0x2e>
 800e128:	2300      	movs	r3, #0
 800e12a:	e7e3      	b.n	800e0f4 <_dtoa_r+0x244>
 800e12c:	2300      	movs	r3, #0
 800e12e:	e7d5      	b.n	800e0dc <_dtoa_r+0x22c>
 800e130:	2401      	movs	r4, #1
 800e132:	2300      	movs	r3, #0
 800e134:	9307      	str	r3, [sp, #28]
 800e136:	9409      	str	r4, [sp, #36]	@ 0x24
 800e138:	f04f 3bff 	mov.w	fp, #4294967295
 800e13c:	2200      	movs	r2, #0
 800e13e:	f8cd b00c 	str.w	fp, [sp, #12]
 800e142:	2312      	movs	r3, #18
 800e144:	920c      	str	r2, [sp, #48]	@ 0x30
 800e146:	e7db      	b.n	800e100 <_dtoa_r+0x250>
 800e148:	2301      	movs	r3, #1
 800e14a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e14c:	e7f4      	b.n	800e138 <_dtoa_r+0x288>
 800e14e:	f04f 0b01 	mov.w	fp, #1
 800e152:	f8cd b00c 	str.w	fp, [sp, #12]
 800e156:	465b      	mov	r3, fp
 800e158:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e15c:	e7d0      	b.n	800e100 <_dtoa_r+0x250>
 800e15e:	3101      	adds	r1, #1
 800e160:	0052      	lsls	r2, r2, #1
 800e162:	e7d1      	b.n	800e108 <_dtoa_r+0x258>
 800e164:	f3af 8000 	nop.w
 800e168:	636f4361 	.word	0x636f4361
 800e16c:	3fd287a7 	.word	0x3fd287a7
 800e170:	8b60c8b3 	.word	0x8b60c8b3
 800e174:	3fc68a28 	.word	0x3fc68a28
 800e178:	509f79fb 	.word	0x509f79fb
 800e17c:	3fd34413 	.word	0x3fd34413
 800e180:	08011ecf 	.word	0x08011ecf
 800e184:	08011ee6 	.word	0x08011ee6
 800e188:	7ff00000 	.word	0x7ff00000
 800e18c:	08011e97 	.word	0x08011e97
 800e190:	3ff80000 	.word	0x3ff80000
 800e194:	080121e0 	.word	0x080121e0
 800e198:	08011f3e 	.word	0x08011f3e
 800e19c:	08011ecb 	.word	0x08011ecb
 800e1a0:	08011e96 	.word	0x08011e96
 800e1a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e1a8:	6018      	str	r0, [r3, #0]
 800e1aa:	9b03      	ldr	r3, [sp, #12]
 800e1ac:	2b0e      	cmp	r3, #14
 800e1ae:	f200 80a1 	bhi.w	800e2f4 <_dtoa_r+0x444>
 800e1b2:	2c00      	cmp	r4, #0
 800e1b4:	f000 809e 	beq.w	800e2f4 <_dtoa_r+0x444>
 800e1b8:	2f00      	cmp	r7, #0
 800e1ba:	dd33      	ble.n	800e224 <_dtoa_r+0x374>
 800e1bc:	4b9c      	ldr	r3, [pc, #624]	@ (800e430 <_dtoa_r+0x580>)
 800e1be:	f007 020f 	and.w	r2, r7, #15
 800e1c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e1c6:	ed93 7b00 	vldr	d7, [r3]
 800e1ca:	05f8      	lsls	r0, r7, #23
 800e1cc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e1d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e1d4:	d516      	bpl.n	800e204 <_dtoa_r+0x354>
 800e1d6:	4b97      	ldr	r3, [pc, #604]	@ (800e434 <_dtoa_r+0x584>)
 800e1d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e1dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e1e0:	f7f2 fb64 	bl	80008ac <__aeabi_ddiv>
 800e1e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e1e8:	f004 040f 	and.w	r4, r4, #15
 800e1ec:	2603      	movs	r6, #3
 800e1ee:	4d91      	ldr	r5, [pc, #580]	@ (800e434 <_dtoa_r+0x584>)
 800e1f0:	b954      	cbnz	r4, 800e208 <_dtoa_r+0x358>
 800e1f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e1f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e1fa:	f7f2 fb57 	bl	80008ac <__aeabi_ddiv>
 800e1fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e202:	e028      	b.n	800e256 <_dtoa_r+0x3a6>
 800e204:	2602      	movs	r6, #2
 800e206:	e7f2      	b.n	800e1ee <_dtoa_r+0x33e>
 800e208:	07e1      	lsls	r1, r4, #31
 800e20a:	d508      	bpl.n	800e21e <_dtoa_r+0x36e>
 800e20c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e210:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e214:	f7f2 fa20 	bl	8000658 <__aeabi_dmul>
 800e218:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e21c:	3601      	adds	r6, #1
 800e21e:	1064      	asrs	r4, r4, #1
 800e220:	3508      	adds	r5, #8
 800e222:	e7e5      	b.n	800e1f0 <_dtoa_r+0x340>
 800e224:	f000 80af 	beq.w	800e386 <_dtoa_r+0x4d6>
 800e228:	427c      	negs	r4, r7
 800e22a:	4b81      	ldr	r3, [pc, #516]	@ (800e430 <_dtoa_r+0x580>)
 800e22c:	4d81      	ldr	r5, [pc, #516]	@ (800e434 <_dtoa_r+0x584>)
 800e22e:	f004 020f 	and.w	r2, r4, #15
 800e232:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e23a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e23e:	f7f2 fa0b 	bl	8000658 <__aeabi_dmul>
 800e242:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e246:	1124      	asrs	r4, r4, #4
 800e248:	2300      	movs	r3, #0
 800e24a:	2602      	movs	r6, #2
 800e24c:	2c00      	cmp	r4, #0
 800e24e:	f040 808f 	bne.w	800e370 <_dtoa_r+0x4c0>
 800e252:	2b00      	cmp	r3, #0
 800e254:	d1d3      	bne.n	800e1fe <_dtoa_r+0x34e>
 800e256:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e258:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	f000 8094 	beq.w	800e38a <_dtoa_r+0x4da>
 800e262:	4b75      	ldr	r3, [pc, #468]	@ (800e438 <_dtoa_r+0x588>)
 800e264:	2200      	movs	r2, #0
 800e266:	4620      	mov	r0, r4
 800e268:	4629      	mov	r1, r5
 800e26a:	f7f2 fc67 	bl	8000b3c <__aeabi_dcmplt>
 800e26e:	2800      	cmp	r0, #0
 800e270:	f000 808b 	beq.w	800e38a <_dtoa_r+0x4da>
 800e274:	9b03      	ldr	r3, [sp, #12]
 800e276:	2b00      	cmp	r3, #0
 800e278:	f000 8087 	beq.w	800e38a <_dtoa_r+0x4da>
 800e27c:	f1bb 0f00 	cmp.w	fp, #0
 800e280:	dd34      	ble.n	800e2ec <_dtoa_r+0x43c>
 800e282:	4620      	mov	r0, r4
 800e284:	4b6d      	ldr	r3, [pc, #436]	@ (800e43c <_dtoa_r+0x58c>)
 800e286:	2200      	movs	r2, #0
 800e288:	4629      	mov	r1, r5
 800e28a:	f7f2 f9e5 	bl	8000658 <__aeabi_dmul>
 800e28e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e292:	f107 38ff 	add.w	r8, r7, #4294967295
 800e296:	3601      	adds	r6, #1
 800e298:	465c      	mov	r4, fp
 800e29a:	4630      	mov	r0, r6
 800e29c:	f7f2 f972 	bl	8000584 <__aeabi_i2d>
 800e2a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e2a4:	f7f2 f9d8 	bl	8000658 <__aeabi_dmul>
 800e2a8:	4b65      	ldr	r3, [pc, #404]	@ (800e440 <_dtoa_r+0x590>)
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	f7f2 f81e 	bl	80002ec <__adddf3>
 800e2b0:	4605      	mov	r5, r0
 800e2b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e2b6:	2c00      	cmp	r4, #0
 800e2b8:	d16a      	bne.n	800e390 <_dtoa_r+0x4e0>
 800e2ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e2be:	4b61      	ldr	r3, [pc, #388]	@ (800e444 <_dtoa_r+0x594>)
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	f7f2 f811 	bl	80002e8 <__aeabi_dsub>
 800e2c6:	4602      	mov	r2, r0
 800e2c8:	460b      	mov	r3, r1
 800e2ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e2ce:	462a      	mov	r2, r5
 800e2d0:	4633      	mov	r3, r6
 800e2d2:	f7f2 fc51 	bl	8000b78 <__aeabi_dcmpgt>
 800e2d6:	2800      	cmp	r0, #0
 800e2d8:	f040 8298 	bne.w	800e80c <_dtoa_r+0x95c>
 800e2dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e2e0:	462a      	mov	r2, r5
 800e2e2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e2e6:	f7f2 fc29 	bl	8000b3c <__aeabi_dcmplt>
 800e2ea:	bb38      	cbnz	r0, 800e33c <_dtoa_r+0x48c>
 800e2ec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e2f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e2f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	f2c0 8157 	blt.w	800e5aa <_dtoa_r+0x6fa>
 800e2fc:	2f0e      	cmp	r7, #14
 800e2fe:	f300 8154 	bgt.w	800e5aa <_dtoa_r+0x6fa>
 800e302:	4b4b      	ldr	r3, [pc, #300]	@ (800e430 <_dtoa_r+0x580>)
 800e304:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e308:	ed93 7b00 	vldr	d7, [r3]
 800e30c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e30e:	2b00      	cmp	r3, #0
 800e310:	ed8d 7b00 	vstr	d7, [sp]
 800e314:	f280 80e5 	bge.w	800e4e2 <_dtoa_r+0x632>
 800e318:	9b03      	ldr	r3, [sp, #12]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	f300 80e1 	bgt.w	800e4e2 <_dtoa_r+0x632>
 800e320:	d10c      	bne.n	800e33c <_dtoa_r+0x48c>
 800e322:	4b48      	ldr	r3, [pc, #288]	@ (800e444 <_dtoa_r+0x594>)
 800e324:	2200      	movs	r2, #0
 800e326:	ec51 0b17 	vmov	r0, r1, d7
 800e32a:	f7f2 f995 	bl	8000658 <__aeabi_dmul>
 800e32e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e332:	f7f2 fc17 	bl	8000b64 <__aeabi_dcmpge>
 800e336:	2800      	cmp	r0, #0
 800e338:	f000 8266 	beq.w	800e808 <_dtoa_r+0x958>
 800e33c:	2400      	movs	r4, #0
 800e33e:	4625      	mov	r5, r4
 800e340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e342:	4656      	mov	r6, sl
 800e344:	ea6f 0803 	mvn.w	r8, r3
 800e348:	2700      	movs	r7, #0
 800e34a:	4621      	mov	r1, r4
 800e34c:	4648      	mov	r0, r9
 800e34e:	f001 f80b 	bl	800f368 <_Bfree>
 800e352:	2d00      	cmp	r5, #0
 800e354:	f000 80bd 	beq.w	800e4d2 <_dtoa_r+0x622>
 800e358:	b12f      	cbz	r7, 800e366 <_dtoa_r+0x4b6>
 800e35a:	42af      	cmp	r7, r5
 800e35c:	d003      	beq.n	800e366 <_dtoa_r+0x4b6>
 800e35e:	4639      	mov	r1, r7
 800e360:	4648      	mov	r0, r9
 800e362:	f001 f801 	bl	800f368 <_Bfree>
 800e366:	4629      	mov	r1, r5
 800e368:	4648      	mov	r0, r9
 800e36a:	f000 fffd 	bl	800f368 <_Bfree>
 800e36e:	e0b0      	b.n	800e4d2 <_dtoa_r+0x622>
 800e370:	07e2      	lsls	r2, r4, #31
 800e372:	d505      	bpl.n	800e380 <_dtoa_r+0x4d0>
 800e374:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e378:	f7f2 f96e 	bl	8000658 <__aeabi_dmul>
 800e37c:	3601      	adds	r6, #1
 800e37e:	2301      	movs	r3, #1
 800e380:	1064      	asrs	r4, r4, #1
 800e382:	3508      	adds	r5, #8
 800e384:	e762      	b.n	800e24c <_dtoa_r+0x39c>
 800e386:	2602      	movs	r6, #2
 800e388:	e765      	b.n	800e256 <_dtoa_r+0x3a6>
 800e38a:	9c03      	ldr	r4, [sp, #12]
 800e38c:	46b8      	mov	r8, r7
 800e38e:	e784      	b.n	800e29a <_dtoa_r+0x3ea>
 800e390:	4b27      	ldr	r3, [pc, #156]	@ (800e430 <_dtoa_r+0x580>)
 800e392:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e394:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e398:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e39c:	4454      	add	r4, sl
 800e39e:	2900      	cmp	r1, #0
 800e3a0:	d054      	beq.n	800e44c <_dtoa_r+0x59c>
 800e3a2:	4929      	ldr	r1, [pc, #164]	@ (800e448 <_dtoa_r+0x598>)
 800e3a4:	2000      	movs	r0, #0
 800e3a6:	f7f2 fa81 	bl	80008ac <__aeabi_ddiv>
 800e3aa:	4633      	mov	r3, r6
 800e3ac:	462a      	mov	r2, r5
 800e3ae:	f7f1 ff9b 	bl	80002e8 <__aeabi_dsub>
 800e3b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e3b6:	4656      	mov	r6, sl
 800e3b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e3bc:	f7f2 fbfc 	bl	8000bb8 <__aeabi_d2iz>
 800e3c0:	4605      	mov	r5, r0
 800e3c2:	f7f2 f8df 	bl	8000584 <__aeabi_i2d>
 800e3c6:	4602      	mov	r2, r0
 800e3c8:	460b      	mov	r3, r1
 800e3ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e3ce:	f7f1 ff8b 	bl	80002e8 <__aeabi_dsub>
 800e3d2:	3530      	adds	r5, #48	@ 0x30
 800e3d4:	4602      	mov	r2, r0
 800e3d6:	460b      	mov	r3, r1
 800e3d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e3dc:	f806 5b01 	strb.w	r5, [r6], #1
 800e3e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e3e4:	f7f2 fbaa 	bl	8000b3c <__aeabi_dcmplt>
 800e3e8:	2800      	cmp	r0, #0
 800e3ea:	d172      	bne.n	800e4d2 <_dtoa_r+0x622>
 800e3ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3f0:	4911      	ldr	r1, [pc, #68]	@ (800e438 <_dtoa_r+0x588>)
 800e3f2:	2000      	movs	r0, #0
 800e3f4:	f7f1 ff78 	bl	80002e8 <__aeabi_dsub>
 800e3f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e3fc:	f7f2 fb9e 	bl	8000b3c <__aeabi_dcmplt>
 800e400:	2800      	cmp	r0, #0
 800e402:	f040 80b4 	bne.w	800e56e <_dtoa_r+0x6be>
 800e406:	42a6      	cmp	r6, r4
 800e408:	f43f af70 	beq.w	800e2ec <_dtoa_r+0x43c>
 800e40c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e410:	4b0a      	ldr	r3, [pc, #40]	@ (800e43c <_dtoa_r+0x58c>)
 800e412:	2200      	movs	r2, #0
 800e414:	f7f2 f920 	bl	8000658 <__aeabi_dmul>
 800e418:	4b08      	ldr	r3, [pc, #32]	@ (800e43c <_dtoa_r+0x58c>)
 800e41a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e41e:	2200      	movs	r2, #0
 800e420:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e424:	f7f2 f918 	bl	8000658 <__aeabi_dmul>
 800e428:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e42c:	e7c4      	b.n	800e3b8 <_dtoa_r+0x508>
 800e42e:	bf00      	nop
 800e430:	080121e0 	.word	0x080121e0
 800e434:	080121b8 	.word	0x080121b8
 800e438:	3ff00000 	.word	0x3ff00000
 800e43c:	40240000 	.word	0x40240000
 800e440:	401c0000 	.word	0x401c0000
 800e444:	40140000 	.word	0x40140000
 800e448:	3fe00000 	.word	0x3fe00000
 800e44c:	4631      	mov	r1, r6
 800e44e:	4628      	mov	r0, r5
 800e450:	f7f2 f902 	bl	8000658 <__aeabi_dmul>
 800e454:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e458:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e45a:	4656      	mov	r6, sl
 800e45c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e460:	f7f2 fbaa 	bl	8000bb8 <__aeabi_d2iz>
 800e464:	4605      	mov	r5, r0
 800e466:	f7f2 f88d 	bl	8000584 <__aeabi_i2d>
 800e46a:	4602      	mov	r2, r0
 800e46c:	460b      	mov	r3, r1
 800e46e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e472:	f7f1 ff39 	bl	80002e8 <__aeabi_dsub>
 800e476:	3530      	adds	r5, #48	@ 0x30
 800e478:	f806 5b01 	strb.w	r5, [r6], #1
 800e47c:	4602      	mov	r2, r0
 800e47e:	460b      	mov	r3, r1
 800e480:	42a6      	cmp	r6, r4
 800e482:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e486:	f04f 0200 	mov.w	r2, #0
 800e48a:	d124      	bne.n	800e4d6 <_dtoa_r+0x626>
 800e48c:	4baf      	ldr	r3, [pc, #700]	@ (800e74c <_dtoa_r+0x89c>)
 800e48e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e492:	f7f1 ff2b 	bl	80002ec <__adddf3>
 800e496:	4602      	mov	r2, r0
 800e498:	460b      	mov	r3, r1
 800e49a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e49e:	f7f2 fb6b 	bl	8000b78 <__aeabi_dcmpgt>
 800e4a2:	2800      	cmp	r0, #0
 800e4a4:	d163      	bne.n	800e56e <_dtoa_r+0x6be>
 800e4a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e4aa:	49a8      	ldr	r1, [pc, #672]	@ (800e74c <_dtoa_r+0x89c>)
 800e4ac:	2000      	movs	r0, #0
 800e4ae:	f7f1 ff1b 	bl	80002e8 <__aeabi_dsub>
 800e4b2:	4602      	mov	r2, r0
 800e4b4:	460b      	mov	r3, r1
 800e4b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e4ba:	f7f2 fb3f 	bl	8000b3c <__aeabi_dcmplt>
 800e4be:	2800      	cmp	r0, #0
 800e4c0:	f43f af14 	beq.w	800e2ec <_dtoa_r+0x43c>
 800e4c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e4c6:	1e73      	subs	r3, r6, #1
 800e4c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e4ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e4ce:	2b30      	cmp	r3, #48	@ 0x30
 800e4d0:	d0f8      	beq.n	800e4c4 <_dtoa_r+0x614>
 800e4d2:	4647      	mov	r7, r8
 800e4d4:	e03b      	b.n	800e54e <_dtoa_r+0x69e>
 800e4d6:	4b9e      	ldr	r3, [pc, #632]	@ (800e750 <_dtoa_r+0x8a0>)
 800e4d8:	f7f2 f8be 	bl	8000658 <__aeabi_dmul>
 800e4dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e4e0:	e7bc      	b.n	800e45c <_dtoa_r+0x5ac>
 800e4e2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e4e6:	4656      	mov	r6, sl
 800e4e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	4629      	mov	r1, r5
 800e4f0:	f7f2 f9dc 	bl	80008ac <__aeabi_ddiv>
 800e4f4:	f7f2 fb60 	bl	8000bb8 <__aeabi_d2iz>
 800e4f8:	4680      	mov	r8, r0
 800e4fa:	f7f2 f843 	bl	8000584 <__aeabi_i2d>
 800e4fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e502:	f7f2 f8a9 	bl	8000658 <__aeabi_dmul>
 800e506:	4602      	mov	r2, r0
 800e508:	460b      	mov	r3, r1
 800e50a:	4620      	mov	r0, r4
 800e50c:	4629      	mov	r1, r5
 800e50e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e512:	f7f1 fee9 	bl	80002e8 <__aeabi_dsub>
 800e516:	f806 4b01 	strb.w	r4, [r6], #1
 800e51a:	9d03      	ldr	r5, [sp, #12]
 800e51c:	eba6 040a 	sub.w	r4, r6, sl
 800e520:	42a5      	cmp	r5, r4
 800e522:	4602      	mov	r2, r0
 800e524:	460b      	mov	r3, r1
 800e526:	d133      	bne.n	800e590 <_dtoa_r+0x6e0>
 800e528:	f7f1 fee0 	bl	80002ec <__adddf3>
 800e52c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e530:	4604      	mov	r4, r0
 800e532:	460d      	mov	r5, r1
 800e534:	f7f2 fb20 	bl	8000b78 <__aeabi_dcmpgt>
 800e538:	b9c0      	cbnz	r0, 800e56c <_dtoa_r+0x6bc>
 800e53a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e53e:	4620      	mov	r0, r4
 800e540:	4629      	mov	r1, r5
 800e542:	f7f2 faf1 	bl	8000b28 <__aeabi_dcmpeq>
 800e546:	b110      	cbz	r0, 800e54e <_dtoa_r+0x69e>
 800e548:	f018 0f01 	tst.w	r8, #1
 800e54c:	d10e      	bne.n	800e56c <_dtoa_r+0x6bc>
 800e54e:	9902      	ldr	r1, [sp, #8]
 800e550:	4648      	mov	r0, r9
 800e552:	f000 ff09 	bl	800f368 <_Bfree>
 800e556:	2300      	movs	r3, #0
 800e558:	7033      	strb	r3, [r6, #0]
 800e55a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e55c:	3701      	adds	r7, #1
 800e55e:	601f      	str	r7, [r3, #0]
 800e560:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e562:	2b00      	cmp	r3, #0
 800e564:	f000 824b 	beq.w	800e9fe <_dtoa_r+0xb4e>
 800e568:	601e      	str	r6, [r3, #0]
 800e56a:	e248      	b.n	800e9fe <_dtoa_r+0xb4e>
 800e56c:	46b8      	mov	r8, r7
 800e56e:	4633      	mov	r3, r6
 800e570:	461e      	mov	r6, r3
 800e572:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e576:	2a39      	cmp	r2, #57	@ 0x39
 800e578:	d106      	bne.n	800e588 <_dtoa_r+0x6d8>
 800e57a:	459a      	cmp	sl, r3
 800e57c:	d1f8      	bne.n	800e570 <_dtoa_r+0x6c0>
 800e57e:	2230      	movs	r2, #48	@ 0x30
 800e580:	f108 0801 	add.w	r8, r8, #1
 800e584:	f88a 2000 	strb.w	r2, [sl]
 800e588:	781a      	ldrb	r2, [r3, #0]
 800e58a:	3201      	adds	r2, #1
 800e58c:	701a      	strb	r2, [r3, #0]
 800e58e:	e7a0      	b.n	800e4d2 <_dtoa_r+0x622>
 800e590:	4b6f      	ldr	r3, [pc, #444]	@ (800e750 <_dtoa_r+0x8a0>)
 800e592:	2200      	movs	r2, #0
 800e594:	f7f2 f860 	bl	8000658 <__aeabi_dmul>
 800e598:	2200      	movs	r2, #0
 800e59a:	2300      	movs	r3, #0
 800e59c:	4604      	mov	r4, r0
 800e59e:	460d      	mov	r5, r1
 800e5a0:	f7f2 fac2 	bl	8000b28 <__aeabi_dcmpeq>
 800e5a4:	2800      	cmp	r0, #0
 800e5a6:	d09f      	beq.n	800e4e8 <_dtoa_r+0x638>
 800e5a8:	e7d1      	b.n	800e54e <_dtoa_r+0x69e>
 800e5aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e5ac:	2a00      	cmp	r2, #0
 800e5ae:	f000 80ea 	beq.w	800e786 <_dtoa_r+0x8d6>
 800e5b2:	9a07      	ldr	r2, [sp, #28]
 800e5b4:	2a01      	cmp	r2, #1
 800e5b6:	f300 80cd 	bgt.w	800e754 <_dtoa_r+0x8a4>
 800e5ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e5bc:	2a00      	cmp	r2, #0
 800e5be:	f000 80c1 	beq.w	800e744 <_dtoa_r+0x894>
 800e5c2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e5c6:	9c08      	ldr	r4, [sp, #32]
 800e5c8:	9e00      	ldr	r6, [sp, #0]
 800e5ca:	9a00      	ldr	r2, [sp, #0]
 800e5cc:	441a      	add	r2, r3
 800e5ce:	9200      	str	r2, [sp, #0]
 800e5d0:	9a06      	ldr	r2, [sp, #24]
 800e5d2:	2101      	movs	r1, #1
 800e5d4:	441a      	add	r2, r3
 800e5d6:	4648      	mov	r0, r9
 800e5d8:	9206      	str	r2, [sp, #24]
 800e5da:	f000 ffc3 	bl	800f564 <__i2b>
 800e5de:	4605      	mov	r5, r0
 800e5e0:	b166      	cbz	r6, 800e5fc <_dtoa_r+0x74c>
 800e5e2:	9b06      	ldr	r3, [sp, #24]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	dd09      	ble.n	800e5fc <_dtoa_r+0x74c>
 800e5e8:	42b3      	cmp	r3, r6
 800e5ea:	9a00      	ldr	r2, [sp, #0]
 800e5ec:	bfa8      	it	ge
 800e5ee:	4633      	movge	r3, r6
 800e5f0:	1ad2      	subs	r2, r2, r3
 800e5f2:	9200      	str	r2, [sp, #0]
 800e5f4:	9a06      	ldr	r2, [sp, #24]
 800e5f6:	1af6      	subs	r6, r6, r3
 800e5f8:	1ad3      	subs	r3, r2, r3
 800e5fa:	9306      	str	r3, [sp, #24]
 800e5fc:	9b08      	ldr	r3, [sp, #32]
 800e5fe:	b30b      	cbz	r3, 800e644 <_dtoa_r+0x794>
 800e600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e602:	2b00      	cmp	r3, #0
 800e604:	f000 80c6 	beq.w	800e794 <_dtoa_r+0x8e4>
 800e608:	2c00      	cmp	r4, #0
 800e60a:	f000 80c0 	beq.w	800e78e <_dtoa_r+0x8de>
 800e60e:	4629      	mov	r1, r5
 800e610:	4622      	mov	r2, r4
 800e612:	4648      	mov	r0, r9
 800e614:	f001 f85e 	bl	800f6d4 <__pow5mult>
 800e618:	9a02      	ldr	r2, [sp, #8]
 800e61a:	4601      	mov	r1, r0
 800e61c:	4605      	mov	r5, r0
 800e61e:	4648      	mov	r0, r9
 800e620:	f000 ffb6 	bl	800f590 <__multiply>
 800e624:	9902      	ldr	r1, [sp, #8]
 800e626:	4680      	mov	r8, r0
 800e628:	4648      	mov	r0, r9
 800e62a:	f000 fe9d 	bl	800f368 <_Bfree>
 800e62e:	9b08      	ldr	r3, [sp, #32]
 800e630:	1b1b      	subs	r3, r3, r4
 800e632:	9308      	str	r3, [sp, #32]
 800e634:	f000 80b1 	beq.w	800e79a <_dtoa_r+0x8ea>
 800e638:	9a08      	ldr	r2, [sp, #32]
 800e63a:	4641      	mov	r1, r8
 800e63c:	4648      	mov	r0, r9
 800e63e:	f001 f849 	bl	800f6d4 <__pow5mult>
 800e642:	9002      	str	r0, [sp, #8]
 800e644:	2101      	movs	r1, #1
 800e646:	4648      	mov	r0, r9
 800e648:	f000 ff8c 	bl	800f564 <__i2b>
 800e64c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e64e:	4604      	mov	r4, r0
 800e650:	2b00      	cmp	r3, #0
 800e652:	f000 81d8 	beq.w	800ea06 <_dtoa_r+0xb56>
 800e656:	461a      	mov	r2, r3
 800e658:	4601      	mov	r1, r0
 800e65a:	4648      	mov	r0, r9
 800e65c:	f001 f83a 	bl	800f6d4 <__pow5mult>
 800e660:	9b07      	ldr	r3, [sp, #28]
 800e662:	2b01      	cmp	r3, #1
 800e664:	4604      	mov	r4, r0
 800e666:	f300 809f 	bgt.w	800e7a8 <_dtoa_r+0x8f8>
 800e66a:	9b04      	ldr	r3, [sp, #16]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	f040 8097 	bne.w	800e7a0 <_dtoa_r+0x8f0>
 800e672:	9b05      	ldr	r3, [sp, #20]
 800e674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e678:	2b00      	cmp	r3, #0
 800e67a:	f040 8093 	bne.w	800e7a4 <_dtoa_r+0x8f4>
 800e67e:	9b05      	ldr	r3, [sp, #20]
 800e680:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e684:	0d1b      	lsrs	r3, r3, #20
 800e686:	051b      	lsls	r3, r3, #20
 800e688:	b133      	cbz	r3, 800e698 <_dtoa_r+0x7e8>
 800e68a:	9b00      	ldr	r3, [sp, #0]
 800e68c:	3301      	adds	r3, #1
 800e68e:	9300      	str	r3, [sp, #0]
 800e690:	9b06      	ldr	r3, [sp, #24]
 800e692:	3301      	adds	r3, #1
 800e694:	9306      	str	r3, [sp, #24]
 800e696:	2301      	movs	r3, #1
 800e698:	9308      	str	r3, [sp, #32]
 800e69a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	f000 81b8 	beq.w	800ea12 <_dtoa_r+0xb62>
 800e6a2:	6923      	ldr	r3, [r4, #16]
 800e6a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e6a8:	6918      	ldr	r0, [r3, #16]
 800e6aa:	f000 ff0f 	bl	800f4cc <__hi0bits>
 800e6ae:	f1c0 0020 	rsb	r0, r0, #32
 800e6b2:	9b06      	ldr	r3, [sp, #24]
 800e6b4:	4418      	add	r0, r3
 800e6b6:	f010 001f 	ands.w	r0, r0, #31
 800e6ba:	f000 8082 	beq.w	800e7c2 <_dtoa_r+0x912>
 800e6be:	f1c0 0320 	rsb	r3, r0, #32
 800e6c2:	2b04      	cmp	r3, #4
 800e6c4:	dd73      	ble.n	800e7ae <_dtoa_r+0x8fe>
 800e6c6:	9b00      	ldr	r3, [sp, #0]
 800e6c8:	f1c0 001c 	rsb	r0, r0, #28
 800e6cc:	4403      	add	r3, r0
 800e6ce:	9300      	str	r3, [sp, #0]
 800e6d0:	9b06      	ldr	r3, [sp, #24]
 800e6d2:	4403      	add	r3, r0
 800e6d4:	4406      	add	r6, r0
 800e6d6:	9306      	str	r3, [sp, #24]
 800e6d8:	9b00      	ldr	r3, [sp, #0]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	dd05      	ble.n	800e6ea <_dtoa_r+0x83a>
 800e6de:	9902      	ldr	r1, [sp, #8]
 800e6e0:	461a      	mov	r2, r3
 800e6e2:	4648      	mov	r0, r9
 800e6e4:	f001 f850 	bl	800f788 <__lshift>
 800e6e8:	9002      	str	r0, [sp, #8]
 800e6ea:	9b06      	ldr	r3, [sp, #24]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	dd05      	ble.n	800e6fc <_dtoa_r+0x84c>
 800e6f0:	4621      	mov	r1, r4
 800e6f2:	461a      	mov	r2, r3
 800e6f4:	4648      	mov	r0, r9
 800e6f6:	f001 f847 	bl	800f788 <__lshift>
 800e6fa:	4604      	mov	r4, r0
 800e6fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d061      	beq.n	800e7c6 <_dtoa_r+0x916>
 800e702:	9802      	ldr	r0, [sp, #8]
 800e704:	4621      	mov	r1, r4
 800e706:	f001 f8ab 	bl	800f860 <__mcmp>
 800e70a:	2800      	cmp	r0, #0
 800e70c:	da5b      	bge.n	800e7c6 <_dtoa_r+0x916>
 800e70e:	2300      	movs	r3, #0
 800e710:	9902      	ldr	r1, [sp, #8]
 800e712:	220a      	movs	r2, #10
 800e714:	4648      	mov	r0, r9
 800e716:	f000 fe49 	bl	800f3ac <__multadd>
 800e71a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e71c:	9002      	str	r0, [sp, #8]
 800e71e:	f107 38ff 	add.w	r8, r7, #4294967295
 800e722:	2b00      	cmp	r3, #0
 800e724:	f000 8177 	beq.w	800ea16 <_dtoa_r+0xb66>
 800e728:	4629      	mov	r1, r5
 800e72a:	2300      	movs	r3, #0
 800e72c:	220a      	movs	r2, #10
 800e72e:	4648      	mov	r0, r9
 800e730:	f000 fe3c 	bl	800f3ac <__multadd>
 800e734:	f1bb 0f00 	cmp.w	fp, #0
 800e738:	4605      	mov	r5, r0
 800e73a:	dc6f      	bgt.n	800e81c <_dtoa_r+0x96c>
 800e73c:	9b07      	ldr	r3, [sp, #28]
 800e73e:	2b02      	cmp	r3, #2
 800e740:	dc49      	bgt.n	800e7d6 <_dtoa_r+0x926>
 800e742:	e06b      	b.n	800e81c <_dtoa_r+0x96c>
 800e744:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e746:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e74a:	e73c      	b.n	800e5c6 <_dtoa_r+0x716>
 800e74c:	3fe00000 	.word	0x3fe00000
 800e750:	40240000 	.word	0x40240000
 800e754:	9b03      	ldr	r3, [sp, #12]
 800e756:	1e5c      	subs	r4, r3, #1
 800e758:	9b08      	ldr	r3, [sp, #32]
 800e75a:	42a3      	cmp	r3, r4
 800e75c:	db09      	blt.n	800e772 <_dtoa_r+0x8c2>
 800e75e:	1b1c      	subs	r4, r3, r4
 800e760:	9b03      	ldr	r3, [sp, #12]
 800e762:	2b00      	cmp	r3, #0
 800e764:	f6bf af30 	bge.w	800e5c8 <_dtoa_r+0x718>
 800e768:	9b00      	ldr	r3, [sp, #0]
 800e76a:	9a03      	ldr	r2, [sp, #12]
 800e76c:	1a9e      	subs	r6, r3, r2
 800e76e:	2300      	movs	r3, #0
 800e770:	e72b      	b.n	800e5ca <_dtoa_r+0x71a>
 800e772:	9b08      	ldr	r3, [sp, #32]
 800e774:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e776:	9408      	str	r4, [sp, #32]
 800e778:	1ae3      	subs	r3, r4, r3
 800e77a:	441a      	add	r2, r3
 800e77c:	9e00      	ldr	r6, [sp, #0]
 800e77e:	9b03      	ldr	r3, [sp, #12]
 800e780:	920d      	str	r2, [sp, #52]	@ 0x34
 800e782:	2400      	movs	r4, #0
 800e784:	e721      	b.n	800e5ca <_dtoa_r+0x71a>
 800e786:	9c08      	ldr	r4, [sp, #32]
 800e788:	9e00      	ldr	r6, [sp, #0]
 800e78a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e78c:	e728      	b.n	800e5e0 <_dtoa_r+0x730>
 800e78e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e792:	e751      	b.n	800e638 <_dtoa_r+0x788>
 800e794:	9a08      	ldr	r2, [sp, #32]
 800e796:	9902      	ldr	r1, [sp, #8]
 800e798:	e750      	b.n	800e63c <_dtoa_r+0x78c>
 800e79a:	f8cd 8008 	str.w	r8, [sp, #8]
 800e79e:	e751      	b.n	800e644 <_dtoa_r+0x794>
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	e779      	b.n	800e698 <_dtoa_r+0x7e8>
 800e7a4:	9b04      	ldr	r3, [sp, #16]
 800e7a6:	e777      	b.n	800e698 <_dtoa_r+0x7e8>
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	9308      	str	r3, [sp, #32]
 800e7ac:	e779      	b.n	800e6a2 <_dtoa_r+0x7f2>
 800e7ae:	d093      	beq.n	800e6d8 <_dtoa_r+0x828>
 800e7b0:	9a00      	ldr	r2, [sp, #0]
 800e7b2:	331c      	adds	r3, #28
 800e7b4:	441a      	add	r2, r3
 800e7b6:	9200      	str	r2, [sp, #0]
 800e7b8:	9a06      	ldr	r2, [sp, #24]
 800e7ba:	441a      	add	r2, r3
 800e7bc:	441e      	add	r6, r3
 800e7be:	9206      	str	r2, [sp, #24]
 800e7c0:	e78a      	b.n	800e6d8 <_dtoa_r+0x828>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	e7f4      	b.n	800e7b0 <_dtoa_r+0x900>
 800e7c6:	9b03      	ldr	r3, [sp, #12]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	46b8      	mov	r8, r7
 800e7cc:	dc20      	bgt.n	800e810 <_dtoa_r+0x960>
 800e7ce:	469b      	mov	fp, r3
 800e7d0:	9b07      	ldr	r3, [sp, #28]
 800e7d2:	2b02      	cmp	r3, #2
 800e7d4:	dd1e      	ble.n	800e814 <_dtoa_r+0x964>
 800e7d6:	f1bb 0f00 	cmp.w	fp, #0
 800e7da:	f47f adb1 	bne.w	800e340 <_dtoa_r+0x490>
 800e7de:	4621      	mov	r1, r4
 800e7e0:	465b      	mov	r3, fp
 800e7e2:	2205      	movs	r2, #5
 800e7e4:	4648      	mov	r0, r9
 800e7e6:	f000 fde1 	bl	800f3ac <__multadd>
 800e7ea:	4601      	mov	r1, r0
 800e7ec:	4604      	mov	r4, r0
 800e7ee:	9802      	ldr	r0, [sp, #8]
 800e7f0:	f001 f836 	bl	800f860 <__mcmp>
 800e7f4:	2800      	cmp	r0, #0
 800e7f6:	f77f ada3 	ble.w	800e340 <_dtoa_r+0x490>
 800e7fa:	4656      	mov	r6, sl
 800e7fc:	2331      	movs	r3, #49	@ 0x31
 800e7fe:	f806 3b01 	strb.w	r3, [r6], #1
 800e802:	f108 0801 	add.w	r8, r8, #1
 800e806:	e59f      	b.n	800e348 <_dtoa_r+0x498>
 800e808:	9c03      	ldr	r4, [sp, #12]
 800e80a:	46b8      	mov	r8, r7
 800e80c:	4625      	mov	r5, r4
 800e80e:	e7f4      	b.n	800e7fa <_dtoa_r+0x94a>
 800e810:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e816:	2b00      	cmp	r3, #0
 800e818:	f000 8101 	beq.w	800ea1e <_dtoa_r+0xb6e>
 800e81c:	2e00      	cmp	r6, #0
 800e81e:	dd05      	ble.n	800e82c <_dtoa_r+0x97c>
 800e820:	4629      	mov	r1, r5
 800e822:	4632      	mov	r2, r6
 800e824:	4648      	mov	r0, r9
 800e826:	f000 ffaf 	bl	800f788 <__lshift>
 800e82a:	4605      	mov	r5, r0
 800e82c:	9b08      	ldr	r3, [sp, #32]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d05c      	beq.n	800e8ec <_dtoa_r+0xa3c>
 800e832:	6869      	ldr	r1, [r5, #4]
 800e834:	4648      	mov	r0, r9
 800e836:	f000 fd57 	bl	800f2e8 <_Balloc>
 800e83a:	4606      	mov	r6, r0
 800e83c:	b928      	cbnz	r0, 800e84a <_dtoa_r+0x99a>
 800e83e:	4b82      	ldr	r3, [pc, #520]	@ (800ea48 <_dtoa_r+0xb98>)
 800e840:	4602      	mov	r2, r0
 800e842:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e846:	f7ff bb4a 	b.w	800dede <_dtoa_r+0x2e>
 800e84a:	692a      	ldr	r2, [r5, #16]
 800e84c:	3202      	adds	r2, #2
 800e84e:	0092      	lsls	r2, r2, #2
 800e850:	f105 010c 	add.w	r1, r5, #12
 800e854:	300c      	adds	r0, #12
 800e856:	f7ff fa52 	bl	800dcfe <memcpy>
 800e85a:	2201      	movs	r2, #1
 800e85c:	4631      	mov	r1, r6
 800e85e:	4648      	mov	r0, r9
 800e860:	f000 ff92 	bl	800f788 <__lshift>
 800e864:	f10a 0301 	add.w	r3, sl, #1
 800e868:	9300      	str	r3, [sp, #0]
 800e86a:	eb0a 030b 	add.w	r3, sl, fp
 800e86e:	9308      	str	r3, [sp, #32]
 800e870:	9b04      	ldr	r3, [sp, #16]
 800e872:	f003 0301 	and.w	r3, r3, #1
 800e876:	462f      	mov	r7, r5
 800e878:	9306      	str	r3, [sp, #24]
 800e87a:	4605      	mov	r5, r0
 800e87c:	9b00      	ldr	r3, [sp, #0]
 800e87e:	9802      	ldr	r0, [sp, #8]
 800e880:	4621      	mov	r1, r4
 800e882:	f103 3bff 	add.w	fp, r3, #4294967295
 800e886:	f7ff fa8b 	bl	800dda0 <quorem>
 800e88a:	4603      	mov	r3, r0
 800e88c:	3330      	adds	r3, #48	@ 0x30
 800e88e:	9003      	str	r0, [sp, #12]
 800e890:	4639      	mov	r1, r7
 800e892:	9802      	ldr	r0, [sp, #8]
 800e894:	9309      	str	r3, [sp, #36]	@ 0x24
 800e896:	f000 ffe3 	bl	800f860 <__mcmp>
 800e89a:	462a      	mov	r2, r5
 800e89c:	9004      	str	r0, [sp, #16]
 800e89e:	4621      	mov	r1, r4
 800e8a0:	4648      	mov	r0, r9
 800e8a2:	f000 fff9 	bl	800f898 <__mdiff>
 800e8a6:	68c2      	ldr	r2, [r0, #12]
 800e8a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8aa:	4606      	mov	r6, r0
 800e8ac:	bb02      	cbnz	r2, 800e8f0 <_dtoa_r+0xa40>
 800e8ae:	4601      	mov	r1, r0
 800e8b0:	9802      	ldr	r0, [sp, #8]
 800e8b2:	f000 ffd5 	bl	800f860 <__mcmp>
 800e8b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8b8:	4602      	mov	r2, r0
 800e8ba:	4631      	mov	r1, r6
 800e8bc:	4648      	mov	r0, r9
 800e8be:	920c      	str	r2, [sp, #48]	@ 0x30
 800e8c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8c2:	f000 fd51 	bl	800f368 <_Bfree>
 800e8c6:	9b07      	ldr	r3, [sp, #28]
 800e8c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e8ca:	9e00      	ldr	r6, [sp, #0]
 800e8cc:	ea42 0103 	orr.w	r1, r2, r3
 800e8d0:	9b06      	ldr	r3, [sp, #24]
 800e8d2:	4319      	orrs	r1, r3
 800e8d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8d6:	d10d      	bne.n	800e8f4 <_dtoa_r+0xa44>
 800e8d8:	2b39      	cmp	r3, #57	@ 0x39
 800e8da:	d027      	beq.n	800e92c <_dtoa_r+0xa7c>
 800e8dc:	9a04      	ldr	r2, [sp, #16]
 800e8de:	2a00      	cmp	r2, #0
 800e8e0:	dd01      	ble.n	800e8e6 <_dtoa_r+0xa36>
 800e8e2:	9b03      	ldr	r3, [sp, #12]
 800e8e4:	3331      	adds	r3, #49	@ 0x31
 800e8e6:	f88b 3000 	strb.w	r3, [fp]
 800e8ea:	e52e      	b.n	800e34a <_dtoa_r+0x49a>
 800e8ec:	4628      	mov	r0, r5
 800e8ee:	e7b9      	b.n	800e864 <_dtoa_r+0x9b4>
 800e8f0:	2201      	movs	r2, #1
 800e8f2:	e7e2      	b.n	800e8ba <_dtoa_r+0xa0a>
 800e8f4:	9904      	ldr	r1, [sp, #16]
 800e8f6:	2900      	cmp	r1, #0
 800e8f8:	db04      	blt.n	800e904 <_dtoa_r+0xa54>
 800e8fa:	9807      	ldr	r0, [sp, #28]
 800e8fc:	4301      	orrs	r1, r0
 800e8fe:	9806      	ldr	r0, [sp, #24]
 800e900:	4301      	orrs	r1, r0
 800e902:	d120      	bne.n	800e946 <_dtoa_r+0xa96>
 800e904:	2a00      	cmp	r2, #0
 800e906:	ddee      	ble.n	800e8e6 <_dtoa_r+0xa36>
 800e908:	9902      	ldr	r1, [sp, #8]
 800e90a:	9300      	str	r3, [sp, #0]
 800e90c:	2201      	movs	r2, #1
 800e90e:	4648      	mov	r0, r9
 800e910:	f000 ff3a 	bl	800f788 <__lshift>
 800e914:	4621      	mov	r1, r4
 800e916:	9002      	str	r0, [sp, #8]
 800e918:	f000 ffa2 	bl	800f860 <__mcmp>
 800e91c:	2800      	cmp	r0, #0
 800e91e:	9b00      	ldr	r3, [sp, #0]
 800e920:	dc02      	bgt.n	800e928 <_dtoa_r+0xa78>
 800e922:	d1e0      	bne.n	800e8e6 <_dtoa_r+0xa36>
 800e924:	07da      	lsls	r2, r3, #31
 800e926:	d5de      	bpl.n	800e8e6 <_dtoa_r+0xa36>
 800e928:	2b39      	cmp	r3, #57	@ 0x39
 800e92a:	d1da      	bne.n	800e8e2 <_dtoa_r+0xa32>
 800e92c:	2339      	movs	r3, #57	@ 0x39
 800e92e:	f88b 3000 	strb.w	r3, [fp]
 800e932:	4633      	mov	r3, r6
 800e934:	461e      	mov	r6, r3
 800e936:	3b01      	subs	r3, #1
 800e938:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e93c:	2a39      	cmp	r2, #57	@ 0x39
 800e93e:	d04e      	beq.n	800e9de <_dtoa_r+0xb2e>
 800e940:	3201      	adds	r2, #1
 800e942:	701a      	strb	r2, [r3, #0]
 800e944:	e501      	b.n	800e34a <_dtoa_r+0x49a>
 800e946:	2a00      	cmp	r2, #0
 800e948:	dd03      	ble.n	800e952 <_dtoa_r+0xaa2>
 800e94a:	2b39      	cmp	r3, #57	@ 0x39
 800e94c:	d0ee      	beq.n	800e92c <_dtoa_r+0xa7c>
 800e94e:	3301      	adds	r3, #1
 800e950:	e7c9      	b.n	800e8e6 <_dtoa_r+0xa36>
 800e952:	9a00      	ldr	r2, [sp, #0]
 800e954:	9908      	ldr	r1, [sp, #32]
 800e956:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e95a:	428a      	cmp	r2, r1
 800e95c:	d028      	beq.n	800e9b0 <_dtoa_r+0xb00>
 800e95e:	9902      	ldr	r1, [sp, #8]
 800e960:	2300      	movs	r3, #0
 800e962:	220a      	movs	r2, #10
 800e964:	4648      	mov	r0, r9
 800e966:	f000 fd21 	bl	800f3ac <__multadd>
 800e96a:	42af      	cmp	r7, r5
 800e96c:	9002      	str	r0, [sp, #8]
 800e96e:	f04f 0300 	mov.w	r3, #0
 800e972:	f04f 020a 	mov.w	r2, #10
 800e976:	4639      	mov	r1, r7
 800e978:	4648      	mov	r0, r9
 800e97a:	d107      	bne.n	800e98c <_dtoa_r+0xadc>
 800e97c:	f000 fd16 	bl	800f3ac <__multadd>
 800e980:	4607      	mov	r7, r0
 800e982:	4605      	mov	r5, r0
 800e984:	9b00      	ldr	r3, [sp, #0]
 800e986:	3301      	adds	r3, #1
 800e988:	9300      	str	r3, [sp, #0]
 800e98a:	e777      	b.n	800e87c <_dtoa_r+0x9cc>
 800e98c:	f000 fd0e 	bl	800f3ac <__multadd>
 800e990:	4629      	mov	r1, r5
 800e992:	4607      	mov	r7, r0
 800e994:	2300      	movs	r3, #0
 800e996:	220a      	movs	r2, #10
 800e998:	4648      	mov	r0, r9
 800e99a:	f000 fd07 	bl	800f3ac <__multadd>
 800e99e:	4605      	mov	r5, r0
 800e9a0:	e7f0      	b.n	800e984 <_dtoa_r+0xad4>
 800e9a2:	f1bb 0f00 	cmp.w	fp, #0
 800e9a6:	bfcc      	ite	gt
 800e9a8:	465e      	movgt	r6, fp
 800e9aa:	2601      	movle	r6, #1
 800e9ac:	4456      	add	r6, sl
 800e9ae:	2700      	movs	r7, #0
 800e9b0:	9902      	ldr	r1, [sp, #8]
 800e9b2:	9300      	str	r3, [sp, #0]
 800e9b4:	2201      	movs	r2, #1
 800e9b6:	4648      	mov	r0, r9
 800e9b8:	f000 fee6 	bl	800f788 <__lshift>
 800e9bc:	4621      	mov	r1, r4
 800e9be:	9002      	str	r0, [sp, #8]
 800e9c0:	f000 ff4e 	bl	800f860 <__mcmp>
 800e9c4:	2800      	cmp	r0, #0
 800e9c6:	dcb4      	bgt.n	800e932 <_dtoa_r+0xa82>
 800e9c8:	d102      	bne.n	800e9d0 <_dtoa_r+0xb20>
 800e9ca:	9b00      	ldr	r3, [sp, #0]
 800e9cc:	07db      	lsls	r3, r3, #31
 800e9ce:	d4b0      	bmi.n	800e932 <_dtoa_r+0xa82>
 800e9d0:	4633      	mov	r3, r6
 800e9d2:	461e      	mov	r6, r3
 800e9d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e9d8:	2a30      	cmp	r2, #48	@ 0x30
 800e9da:	d0fa      	beq.n	800e9d2 <_dtoa_r+0xb22>
 800e9dc:	e4b5      	b.n	800e34a <_dtoa_r+0x49a>
 800e9de:	459a      	cmp	sl, r3
 800e9e0:	d1a8      	bne.n	800e934 <_dtoa_r+0xa84>
 800e9e2:	2331      	movs	r3, #49	@ 0x31
 800e9e4:	f108 0801 	add.w	r8, r8, #1
 800e9e8:	f88a 3000 	strb.w	r3, [sl]
 800e9ec:	e4ad      	b.n	800e34a <_dtoa_r+0x49a>
 800e9ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e9f0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ea4c <_dtoa_r+0xb9c>
 800e9f4:	b11b      	cbz	r3, 800e9fe <_dtoa_r+0xb4e>
 800e9f6:	f10a 0308 	add.w	r3, sl, #8
 800e9fa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e9fc:	6013      	str	r3, [r2, #0]
 800e9fe:	4650      	mov	r0, sl
 800ea00:	b017      	add	sp, #92	@ 0x5c
 800ea02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea06:	9b07      	ldr	r3, [sp, #28]
 800ea08:	2b01      	cmp	r3, #1
 800ea0a:	f77f ae2e 	ble.w	800e66a <_dtoa_r+0x7ba>
 800ea0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ea10:	9308      	str	r3, [sp, #32]
 800ea12:	2001      	movs	r0, #1
 800ea14:	e64d      	b.n	800e6b2 <_dtoa_r+0x802>
 800ea16:	f1bb 0f00 	cmp.w	fp, #0
 800ea1a:	f77f aed9 	ble.w	800e7d0 <_dtoa_r+0x920>
 800ea1e:	4656      	mov	r6, sl
 800ea20:	9802      	ldr	r0, [sp, #8]
 800ea22:	4621      	mov	r1, r4
 800ea24:	f7ff f9bc 	bl	800dda0 <quorem>
 800ea28:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ea2c:	f806 3b01 	strb.w	r3, [r6], #1
 800ea30:	eba6 020a 	sub.w	r2, r6, sl
 800ea34:	4593      	cmp	fp, r2
 800ea36:	ddb4      	ble.n	800e9a2 <_dtoa_r+0xaf2>
 800ea38:	9902      	ldr	r1, [sp, #8]
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	220a      	movs	r2, #10
 800ea3e:	4648      	mov	r0, r9
 800ea40:	f000 fcb4 	bl	800f3ac <__multadd>
 800ea44:	9002      	str	r0, [sp, #8]
 800ea46:	e7eb      	b.n	800ea20 <_dtoa_r+0xb70>
 800ea48:	08011f3e 	.word	0x08011f3e
 800ea4c:	08011ec2 	.word	0x08011ec2

0800ea50 <_free_r>:
 800ea50:	b538      	push	{r3, r4, r5, lr}
 800ea52:	4605      	mov	r5, r0
 800ea54:	2900      	cmp	r1, #0
 800ea56:	d041      	beq.n	800eadc <_free_r+0x8c>
 800ea58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea5c:	1f0c      	subs	r4, r1, #4
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	bfb8      	it	lt
 800ea62:	18e4      	addlt	r4, r4, r3
 800ea64:	f000 fc34 	bl	800f2d0 <__malloc_lock>
 800ea68:	4a1d      	ldr	r2, [pc, #116]	@ (800eae0 <_free_r+0x90>)
 800ea6a:	6813      	ldr	r3, [r2, #0]
 800ea6c:	b933      	cbnz	r3, 800ea7c <_free_r+0x2c>
 800ea6e:	6063      	str	r3, [r4, #4]
 800ea70:	6014      	str	r4, [r2, #0]
 800ea72:	4628      	mov	r0, r5
 800ea74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea78:	f000 bc30 	b.w	800f2dc <__malloc_unlock>
 800ea7c:	42a3      	cmp	r3, r4
 800ea7e:	d908      	bls.n	800ea92 <_free_r+0x42>
 800ea80:	6820      	ldr	r0, [r4, #0]
 800ea82:	1821      	adds	r1, r4, r0
 800ea84:	428b      	cmp	r3, r1
 800ea86:	bf01      	itttt	eq
 800ea88:	6819      	ldreq	r1, [r3, #0]
 800ea8a:	685b      	ldreq	r3, [r3, #4]
 800ea8c:	1809      	addeq	r1, r1, r0
 800ea8e:	6021      	streq	r1, [r4, #0]
 800ea90:	e7ed      	b.n	800ea6e <_free_r+0x1e>
 800ea92:	461a      	mov	r2, r3
 800ea94:	685b      	ldr	r3, [r3, #4]
 800ea96:	b10b      	cbz	r3, 800ea9c <_free_r+0x4c>
 800ea98:	42a3      	cmp	r3, r4
 800ea9a:	d9fa      	bls.n	800ea92 <_free_r+0x42>
 800ea9c:	6811      	ldr	r1, [r2, #0]
 800ea9e:	1850      	adds	r0, r2, r1
 800eaa0:	42a0      	cmp	r0, r4
 800eaa2:	d10b      	bne.n	800eabc <_free_r+0x6c>
 800eaa4:	6820      	ldr	r0, [r4, #0]
 800eaa6:	4401      	add	r1, r0
 800eaa8:	1850      	adds	r0, r2, r1
 800eaaa:	4283      	cmp	r3, r0
 800eaac:	6011      	str	r1, [r2, #0]
 800eaae:	d1e0      	bne.n	800ea72 <_free_r+0x22>
 800eab0:	6818      	ldr	r0, [r3, #0]
 800eab2:	685b      	ldr	r3, [r3, #4]
 800eab4:	6053      	str	r3, [r2, #4]
 800eab6:	4408      	add	r0, r1
 800eab8:	6010      	str	r0, [r2, #0]
 800eaba:	e7da      	b.n	800ea72 <_free_r+0x22>
 800eabc:	d902      	bls.n	800eac4 <_free_r+0x74>
 800eabe:	230c      	movs	r3, #12
 800eac0:	602b      	str	r3, [r5, #0]
 800eac2:	e7d6      	b.n	800ea72 <_free_r+0x22>
 800eac4:	6820      	ldr	r0, [r4, #0]
 800eac6:	1821      	adds	r1, r4, r0
 800eac8:	428b      	cmp	r3, r1
 800eaca:	bf04      	itt	eq
 800eacc:	6819      	ldreq	r1, [r3, #0]
 800eace:	685b      	ldreq	r3, [r3, #4]
 800ead0:	6063      	str	r3, [r4, #4]
 800ead2:	bf04      	itt	eq
 800ead4:	1809      	addeq	r1, r1, r0
 800ead6:	6021      	streq	r1, [r4, #0]
 800ead8:	6054      	str	r4, [r2, #4]
 800eada:	e7ca      	b.n	800ea72 <_free_r+0x22>
 800eadc:	bd38      	pop	{r3, r4, r5, pc}
 800eade:	bf00      	nop
 800eae0:	2000ab70 	.word	0x2000ab70

0800eae4 <rshift>:
 800eae4:	6903      	ldr	r3, [r0, #16]
 800eae6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800eaea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eaee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800eaf2:	f100 0414 	add.w	r4, r0, #20
 800eaf6:	dd45      	ble.n	800eb84 <rshift+0xa0>
 800eaf8:	f011 011f 	ands.w	r1, r1, #31
 800eafc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800eb00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800eb04:	d10c      	bne.n	800eb20 <rshift+0x3c>
 800eb06:	f100 0710 	add.w	r7, r0, #16
 800eb0a:	4629      	mov	r1, r5
 800eb0c:	42b1      	cmp	r1, r6
 800eb0e:	d334      	bcc.n	800eb7a <rshift+0x96>
 800eb10:	1a9b      	subs	r3, r3, r2
 800eb12:	009b      	lsls	r3, r3, #2
 800eb14:	1eea      	subs	r2, r5, #3
 800eb16:	4296      	cmp	r6, r2
 800eb18:	bf38      	it	cc
 800eb1a:	2300      	movcc	r3, #0
 800eb1c:	4423      	add	r3, r4
 800eb1e:	e015      	b.n	800eb4c <rshift+0x68>
 800eb20:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800eb24:	f1c1 0820 	rsb	r8, r1, #32
 800eb28:	40cf      	lsrs	r7, r1
 800eb2a:	f105 0e04 	add.w	lr, r5, #4
 800eb2e:	46a1      	mov	r9, r4
 800eb30:	4576      	cmp	r6, lr
 800eb32:	46f4      	mov	ip, lr
 800eb34:	d815      	bhi.n	800eb62 <rshift+0x7e>
 800eb36:	1a9a      	subs	r2, r3, r2
 800eb38:	0092      	lsls	r2, r2, #2
 800eb3a:	3a04      	subs	r2, #4
 800eb3c:	3501      	adds	r5, #1
 800eb3e:	42ae      	cmp	r6, r5
 800eb40:	bf38      	it	cc
 800eb42:	2200      	movcc	r2, #0
 800eb44:	18a3      	adds	r3, r4, r2
 800eb46:	50a7      	str	r7, [r4, r2]
 800eb48:	b107      	cbz	r7, 800eb4c <rshift+0x68>
 800eb4a:	3304      	adds	r3, #4
 800eb4c:	1b1a      	subs	r2, r3, r4
 800eb4e:	42a3      	cmp	r3, r4
 800eb50:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800eb54:	bf08      	it	eq
 800eb56:	2300      	moveq	r3, #0
 800eb58:	6102      	str	r2, [r0, #16]
 800eb5a:	bf08      	it	eq
 800eb5c:	6143      	streq	r3, [r0, #20]
 800eb5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb62:	f8dc c000 	ldr.w	ip, [ip]
 800eb66:	fa0c fc08 	lsl.w	ip, ip, r8
 800eb6a:	ea4c 0707 	orr.w	r7, ip, r7
 800eb6e:	f849 7b04 	str.w	r7, [r9], #4
 800eb72:	f85e 7b04 	ldr.w	r7, [lr], #4
 800eb76:	40cf      	lsrs	r7, r1
 800eb78:	e7da      	b.n	800eb30 <rshift+0x4c>
 800eb7a:	f851 cb04 	ldr.w	ip, [r1], #4
 800eb7e:	f847 cf04 	str.w	ip, [r7, #4]!
 800eb82:	e7c3      	b.n	800eb0c <rshift+0x28>
 800eb84:	4623      	mov	r3, r4
 800eb86:	e7e1      	b.n	800eb4c <rshift+0x68>

0800eb88 <__hexdig_fun>:
 800eb88:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800eb8c:	2b09      	cmp	r3, #9
 800eb8e:	d802      	bhi.n	800eb96 <__hexdig_fun+0xe>
 800eb90:	3820      	subs	r0, #32
 800eb92:	b2c0      	uxtb	r0, r0
 800eb94:	4770      	bx	lr
 800eb96:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800eb9a:	2b05      	cmp	r3, #5
 800eb9c:	d801      	bhi.n	800eba2 <__hexdig_fun+0x1a>
 800eb9e:	3847      	subs	r0, #71	@ 0x47
 800eba0:	e7f7      	b.n	800eb92 <__hexdig_fun+0xa>
 800eba2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800eba6:	2b05      	cmp	r3, #5
 800eba8:	d801      	bhi.n	800ebae <__hexdig_fun+0x26>
 800ebaa:	3827      	subs	r0, #39	@ 0x27
 800ebac:	e7f1      	b.n	800eb92 <__hexdig_fun+0xa>
 800ebae:	2000      	movs	r0, #0
 800ebb0:	4770      	bx	lr
	...

0800ebb4 <__gethex>:
 800ebb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebb8:	b085      	sub	sp, #20
 800ebba:	468a      	mov	sl, r1
 800ebbc:	9302      	str	r3, [sp, #8]
 800ebbe:	680b      	ldr	r3, [r1, #0]
 800ebc0:	9001      	str	r0, [sp, #4]
 800ebc2:	4690      	mov	r8, r2
 800ebc4:	1c9c      	adds	r4, r3, #2
 800ebc6:	46a1      	mov	r9, r4
 800ebc8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ebcc:	2830      	cmp	r0, #48	@ 0x30
 800ebce:	d0fa      	beq.n	800ebc6 <__gethex+0x12>
 800ebd0:	eba9 0303 	sub.w	r3, r9, r3
 800ebd4:	f1a3 0b02 	sub.w	fp, r3, #2
 800ebd8:	f7ff ffd6 	bl	800eb88 <__hexdig_fun>
 800ebdc:	4605      	mov	r5, r0
 800ebde:	2800      	cmp	r0, #0
 800ebe0:	d168      	bne.n	800ecb4 <__gethex+0x100>
 800ebe2:	49a0      	ldr	r1, [pc, #640]	@ (800ee64 <__gethex+0x2b0>)
 800ebe4:	2201      	movs	r2, #1
 800ebe6:	4648      	mov	r0, r9
 800ebe8:	f7ff f800 	bl	800dbec <strncmp>
 800ebec:	4607      	mov	r7, r0
 800ebee:	2800      	cmp	r0, #0
 800ebf0:	d167      	bne.n	800ecc2 <__gethex+0x10e>
 800ebf2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ebf6:	4626      	mov	r6, r4
 800ebf8:	f7ff ffc6 	bl	800eb88 <__hexdig_fun>
 800ebfc:	2800      	cmp	r0, #0
 800ebfe:	d062      	beq.n	800ecc6 <__gethex+0x112>
 800ec00:	4623      	mov	r3, r4
 800ec02:	7818      	ldrb	r0, [r3, #0]
 800ec04:	2830      	cmp	r0, #48	@ 0x30
 800ec06:	4699      	mov	r9, r3
 800ec08:	f103 0301 	add.w	r3, r3, #1
 800ec0c:	d0f9      	beq.n	800ec02 <__gethex+0x4e>
 800ec0e:	f7ff ffbb 	bl	800eb88 <__hexdig_fun>
 800ec12:	fab0 f580 	clz	r5, r0
 800ec16:	096d      	lsrs	r5, r5, #5
 800ec18:	f04f 0b01 	mov.w	fp, #1
 800ec1c:	464a      	mov	r2, r9
 800ec1e:	4616      	mov	r6, r2
 800ec20:	3201      	adds	r2, #1
 800ec22:	7830      	ldrb	r0, [r6, #0]
 800ec24:	f7ff ffb0 	bl	800eb88 <__hexdig_fun>
 800ec28:	2800      	cmp	r0, #0
 800ec2a:	d1f8      	bne.n	800ec1e <__gethex+0x6a>
 800ec2c:	498d      	ldr	r1, [pc, #564]	@ (800ee64 <__gethex+0x2b0>)
 800ec2e:	2201      	movs	r2, #1
 800ec30:	4630      	mov	r0, r6
 800ec32:	f7fe ffdb 	bl	800dbec <strncmp>
 800ec36:	2800      	cmp	r0, #0
 800ec38:	d13f      	bne.n	800ecba <__gethex+0x106>
 800ec3a:	b944      	cbnz	r4, 800ec4e <__gethex+0x9a>
 800ec3c:	1c74      	adds	r4, r6, #1
 800ec3e:	4622      	mov	r2, r4
 800ec40:	4616      	mov	r6, r2
 800ec42:	3201      	adds	r2, #1
 800ec44:	7830      	ldrb	r0, [r6, #0]
 800ec46:	f7ff ff9f 	bl	800eb88 <__hexdig_fun>
 800ec4a:	2800      	cmp	r0, #0
 800ec4c:	d1f8      	bne.n	800ec40 <__gethex+0x8c>
 800ec4e:	1ba4      	subs	r4, r4, r6
 800ec50:	00a7      	lsls	r7, r4, #2
 800ec52:	7833      	ldrb	r3, [r6, #0]
 800ec54:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ec58:	2b50      	cmp	r3, #80	@ 0x50
 800ec5a:	d13e      	bne.n	800ecda <__gethex+0x126>
 800ec5c:	7873      	ldrb	r3, [r6, #1]
 800ec5e:	2b2b      	cmp	r3, #43	@ 0x2b
 800ec60:	d033      	beq.n	800ecca <__gethex+0x116>
 800ec62:	2b2d      	cmp	r3, #45	@ 0x2d
 800ec64:	d034      	beq.n	800ecd0 <__gethex+0x11c>
 800ec66:	1c71      	adds	r1, r6, #1
 800ec68:	2400      	movs	r4, #0
 800ec6a:	7808      	ldrb	r0, [r1, #0]
 800ec6c:	f7ff ff8c 	bl	800eb88 <__hexdig_fun>
 800ec70:	1e43      	subs	r3, r0, #1
 800ec72:	b2db      	uxtb	r3, r3
 800ec74:	2b18      	cmp	r3, #24
 800ec76:	d830      	bhi.n	800ecda <__gethex+0x126>
 800ec78:	f1a0 0210 	sub.w	r2, r0, #16
 800ec7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ec80:	f7ff ff82 	bl	800eb88 <__hexdig_fun>
 800ec84:	f100 3cff 	add.w	ip, r0, #4294967295
 800ec88:	fa5f fc8c 	uxtb.w	ip, ip
 800ec8c:	f1bc 0f18 	cmp.w	ip, #24
 800ec90:	f04f 030a 	mov.w	r3, #10
 800ec94:	d91e      	bls.n	800ecd4 <__gethex+0x120>
 800ec96:	b104      	cbz	r4, 800ec9a <__gethex+0xe6>
 800ec98:	4252      	negs	r2, r2
 800ec9a:	4417      	add	r7, r2
 800ec9c:	f8ca 1000 	str.w	r1, [sl]
 800eca0:	b1ed      	cbz	r5, 800ecde <__gethex+0x12a>
 800eca2:	f1bb 0f00 	cmp.w	fp, #0
 800eca6:	bf0c      	ite	eq
 800eca8:	2506      	moveq	r5, #6
 800ecaa:	2500      	movne	r5, #0
 800ecac:	4628      	mov	r0, r5
 800ecae:	b005      	add	sp, #20
 800ecb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecb4:	2500      	movs	r5, #0
 800ecb6:	462c      	mov	r4, r5
 800ecb8:	e7b0      	b.n	800ec1c <__gethex+0x68>
 800ecba:	2c00      	cmp	r4, #0
 800ecbc:	d1c7      	bne.n	800ec4e <__gethex+0x9a>
 800ecbe:	4627      	mov	r7, r4
 800ecc0:	e7c7      	b.n	800ec52 <__gethex+0x9e>
 800ecc2:	464e      	mov	r6, r9
 800ecc4:	462f      	mov	r7, r5
 800ecc6:	2501      	movs	r5, #1
 800ecc8:	e7c3      	b.n	800ec52 <__gethex+0x9e>
 800ecca:	2400      	movs	r4, #0
 800eccc:	1cb1      	adds	r1, r6, #2
 800ecce:	e7cc      	b.n	800ec6a <__gethex+0xb6>
 800ecd0:	2401      	movs	r4, #1
 800ecd2:	e7fb      	b.n	800eccc <__gethex+0x118>
 800ecd4:	fb03 0002 	mla	r0, r3, r2, r0
 800ecd8:	e7ce      	b.n	800ec78 <__gethex+0xc4>
 800ecda:	4631      	mov	r1, r6
 800ecdc:	e7de      	b.n	800ec9c <__gethex+0xe8>
 800ecde:	eba6 0309 	sub.w	r3, r6, r9
 800ece2:	3b01      	subs	r3, #1
 800ece4:	4629      	mov	r1, r5
 800ece6:	2b07      	cmp	r3, #7
 800ece8:	dc0a      	bgt.n	800ed00 <__gethex+0x14c>
 800ecea:	9801      	ldr	r0, [sp, #4]
 800ecec:	f000 fafc 	bl	800f2e8 <_Balloc>
 800ecf0:	4604      	mov	r4, r0
 800ecf2:	b940      	cbnz	r0, 800ed06 <__gethex+0x152>
 800ecf4:	4b5c      	ldr	r3, [pc, #368]	@ (800ee68 <__gethex+0x2b4>)
 800ecf6:	4602      	mov	r2, r0
 800ecf8:	21e4      	movs	r1, #228	@ 0xe4
 800ecfa:	485c      	ldr	r0, [pc, #368]	@ (800ee6c <__gethex+0x2b8>)
 800ecfc:	f001 fbba 	bl	8010474 <__assert_func>
 800ed00:	3101      	adds	r1, #1
 800ed02:	105b      	asrs	r3, r3, #1
 800ed04:	e7ef      	b.n	800ece6 <__gethex+0x132>
 800ed06:	f100 0a14 	add.w	sl, r0, #20
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	4655      	mov	r5, sl
 800ed0e:	469b      	mov	fp, r3
 800ed10:	45b1      	cmp	r9, r6
 800ed12:	d337      	bcc.n	800ed84 <__gethex+0x1d0>
 800ed14:	f845 bb04 	str.w	fp, [r5], #4
 800ed18:	eba5 050a 	sub.w	r5, r5, sl
 800ed1c:	10ad      	asrs	r5, r5, #2
 800ed1e:	6125      	str	r5, [r4, #16]
 800ed20:	4658      	mov	r0, fp
 800ed22:	f000 fbd3 	bl	800f4cc <__hi0bits>
 800ed26:	016d      	lsls	r5, r5, #5
 800ed28:	f8d8 6000 	ldr.w	r6, [r8]
 800ed2c:	1a2d      	subs	r5, r5, r0
 800ed2e:	42b5      	cmp	r5, r6
 800ed30:	dd54      	ble.n	800eddc <__gethex+0x228>
 800ed32:	1bad      	subs	r5, r5, r6
 800ed34:	4629      	mov	r1, r5
 800ed36:	4620      	mov	r0, r4
 800ed38:	f000 ff5f 	bl	800fbfa <__any_on>
 800ed3c:	4681      	mov	r9, r0
 800ed3e:	b178      	cbz	r0, 800ed60 <__gethex+0x1ac>
 800ed40:	1e6b      	subs	r3, r5, #1
 800ed42:	1159      	asrs	r1, r3, #5
 800ed44:	f003 021f 	and.w	r2, r3, #31
 800ed48:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ed4c:	f04f 0901 	mov.w	r9, #1
 800ed50:	fa09 f202 	lsl.w	r2, r9, r2
 800ed54:	420a      	tst	r2, r1
 800ed56:	d003      	beq.n	800ed60 <__gethex+0x1ac>
 800ed58:	454b      	cmp	r3, r9
 800ed5a:	dc36      	bgt.n	800edca <__gethex+0x216>
 800ed5c:	f04f 0902 	mov.w	r9, #2
 800ed60:	4629      	mov	r1, r5
 800ed62:	4620      	mov	r0, r4
 800ed64:	f7ff febe 	bl	800eae4 <rshift>
 800ed68:	442f      	add	r7, r5
 800ed6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ed6e:	42bb      	cmp	r3, r7
 800ed70:	da42      	bge.n	800edf8 <__gethex+0x244>
 800ed72:	9801      	ldr	r0, [sp, #4]
 800ed74:	4621      	mov	r1, r4
 800ed76:	f000 faf7 	bl	800f368 <_Bfree>
 800ed7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	6013      	str	r3, [r2, #0]
 800ed80:	25a3      	movs	r5, #163	@ 0xa3
 800ed82:	e793      	b.n	800ecac <__gethex+0xf8>
 800ed84:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ed88:	2a2e      	cmp	r2, #46	@ 0x2e
 800ed8a:	d012      	beq.n	800edb2 <__gethex+0x1fe>
 800ed8c:	2b20      	cmp	r3, #32
 800ed8e:	d104      	bne.n	800ed9a <__gethex+0x1e6>
 800ed90:	f845 bb04 	str.w	fp, [r5], #4
 800ed94:	f04f 0b00 	mov.w	fp, #0
 800ed98:	465b      	mov	r3, fp
 800ed9a:	7830      	ldrb	r0, [r6, #0]
 800ed9c:	9303      	str	r3, [sp, #12]
 800ed9e:	f7ff fef3 	bl	800eb88 <__hexdig_fun>
 800eda2:	9b03      	ldr	r3, [sp, #12]
 800eda4:	f000 000f 	and.w	r0, r0, #15
 800eda8:	4098      	lsls	r0, r3
 800edaa:	ea4b 0b00 	orr.w	fp, fp, r0
 800edae:	3304      	adds	r3, #4
 800edb0:	e7ae      	b.n	800ed10 <__gethex+0x15c>
 800edb2:	45b1      	cmp	r9, r6
 800edb4:	d8ea      	bhi.n	800ed8c <__gethex+0x1d8>
 800edb6:	492b      	ldr	r1, [pc, #172]	@ (800ee64 <__gethex+0x2b0>)
 800edb8:	9303      	str	r3, [sp, #12]
 800edba:	2201      	movs	r2, #1
 800edbc:	4630      	mov	r0, r6
 800edbe:	f7fe ff15 	bl	800dbec <strncmp>
 800edc2:	9b03      	ldr	r3, [sp, #12]
 800edc4:	2800      	cmp	r0, #0
 800edc6:	d1e1      	bne.n	800ed8c <__gethex+0x1d8>
 800edc8:	e7a2      	b.n	800ed10 <__gethex+0x15c>
 800edca:	1ea9      	subs	r1, r5, #2
 800edcc:	4620      	mov	r0, r4
 800edce:	f000 ff14 	bl	800fbfa <__any_on>
 800edd2:	2800      	cmp	r0, #0
 800edd4:	d0c2      	beq.n	800ed5c <__gethex+0x1a8>
 800edd6:	f04f 0903 	mov.w	r9, #3
 800edda:	e7c1      	b.n	800ed60 <__gethex+0x1ac>
 800eddc:	da09      	bge.n	800edf2 <__gethex+0x23e>
 800edde:	1b75      	subs	r5, r6, r5
 800ede0:	4621      	mov	r1, r4
 800ede2:	9801      	ldr	r0, [sp, #4]
 800ede4:	462a      	mov	r2, r5
 800ede6:	f000 fccf 	bl	800f788 <__lshift>
 800edea:	1b7f      	subs	r7, r7, r5
 800edec:	4604      	mov	r4, r0
 800edee:	f100 0a14 	add.w	sl, r0, #20
 800edf2:	f04f 0900 	mov.w	r9, #0
 800edf6:	e7b8      	b.n	800ed6a <__gethex+0x1b6>
 800edf8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800edfc:	42bd      	cmp	r5, r7
 800edfe:	dd6f      	ble.n	800eee0 <__gethex+0x32c>
 800ee00:	1bed      	subs	r5, r5, r7
 800ee02:	42ae      	cmp	r6, r5
 800ee04:	dc34      	bgt.n	800ee70 <__gethex+0x2bc>
 800ee06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ee0a:	2b02      	cmp	r3, #2
 800ee0c:	d022      	beq.n	800ee54 <__gethex+0x2a0>
 800ee0e:	2b03      	cmp	r3, #3
 800ee10:	d024      	beq.n	800ee5c <__gethex+0x2a8>
 800ee12:	2b01      	cmp	r3, #1
 800ee14:	d115      	bne.n	800ee42 <__gethex+0x28e>
 800ee16:	42ae      	cmp	r6, r5
 800ee18:	d113      	bne.n	800ee42 <__gethex+0x28e>
 800ee1a:	2e01      	cmp	r6, #1
 800ee1c:	d10b      	bne.n	800ee36 <__gethex+0x282>
 800ee1e:	9a02      	ldr	r2, [sp, #8]
 800ee20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ee24:	6013      	str	r3, [r2, #0]
 800ee26:	2301      	movs	r3, #1
 800ee28:	6123      	str	r3, [r4, #16]
 800ee2a:	f8ca 3000 	str.w	r3, [sl]
 800ee2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee30:	2562      	movs	r5, #98	@ 0x62
 800ee32:	601c      	str	r4, [r3, #0]
 800ee34:	e73a      	b.n	800ecac <__gethex+0xf8>
 800ee36:	1e71      	subs	r1, r6, #1
 800ee38:	4620      	mov	r0, r4
 800ee3a:	f000 fede 	bl	800fbfa <__any_on>
 800ee3e:	2800      	cmp	r0, #0
 800ee40:	d1ed      	bne.n	800ee1e <__gethex+0x26a>
 800ee42:	9801      	ldr	r0, [sp, #4]
 800ee44:	4621      	mov	r1, r4
 800ee46:	f000 fa8f 	bl	800f368 <_Bfree>
 800ee4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	6013      	str	r3, [r2, #0]
 800ee50:	2550      	movs	r5, #80	@ 0x50
 800ee52:	e72b      	b.n	800ecac <__gethex+0xf8>
 800ee54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d1f3      	bne.n	800ee42 <__gethex+0x28e>
 800ee5a:	e7e0      	b.n	800ee1e <__gethex+0x26a>
 800ee5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d1dd      	bne.n	800ee1e <__gethex+0x26a>
 800ee62:	e7ee      	b.n	800ee42 <__gethex+0x28e>
 800ee64:	08011e84 	.word	0x08011e84
 800ee68:	08011f3e 	.word	0x08011f3e
 800ee6c:	08011f4f 	.word	0x08011f4f
 800ee70:	1e6f      	subs	r7, r5, #1
 800ee72:	f1b9 0f00 	cmp.w	r9, #0
 800ee76:	d130      	bne.n	800eeda <__gethex+0x326>
 800ee78:	b127      	cbz	r7, 800ee84 <__gethex+0x2d0>
 800ee7a:	4639      	mov	r1, r7
 800ee7c:	4620      	mov	r0, r4
 800ee7e:	f000 febc 	bl	800fbfa <__any_on>
 800ee82:	4681      	mov	r9, r0
 800ee84:	117a      	asrs	r2, r7, #5
 800ee86:	2301      	movs	r3, #1
 800ee88:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ee8c:	f007 071f 	and.w	r7, r7, #31
 800ee90:	40bb      	lsls	r3, r7
 800ee92:	4213      	tst	r3, r2
 800ee94:	4629      	mov	r1, r5
 800ee96:	4620      	mov	r0, r4
 800ee98:	bf18      	it	ne
 800ee9a:	f049 0902 	orrne.w	r9, r9, #2
 800ee9e:	f7ff fe21 	bl	800eae4 <rshift>
 800eea2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800eea6:	1b76      	subs	r6, r6, r5
 800eea8:	2502      	movs	r5, #2
 800eeaa:	f1b9 0f00 	cmp.w	r9, #0
 800eeae:	d047      	beq.n	800ef40 <__gethex+0x38c>
 800eeb0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eeb4:	2b02      	cmp	r3, #2
 800eeb6:	d015      	beq.n	800eee4 <__gethex+0x330>
 800eeb8:	2b03      	cmp	r3, #3
 800eeba:	d017      	beq.n	800eeec <__gethex+0x338>
 800eebc:	2b01      	cmp	r3, #1
 800eebe:	d109      	bne.n	800eed4 <__gethex+0x320>
 800eec0:	f019 0f02 	tst.w	r9, #2
 800eec4:	d006      	beq.n	800eed4 <__gethex+0x320>
 800eec6:	f8da 3000 	ldr.w	r3, [sl]
 800eeca:	ea49 0903 	orr.w	r9, r9, r3
 800eece:	f019 0f01 	tst.w	r9, #1
 800eed2:	d10e      	bne.n	800eef2 <__gethex+0x33e>
 800eed4:	f045 0510 	orr.w	r5, r5, #16
 800eed8:	e032      	b.n	800ef40 <__gethex+0x38c>
 800eeda:	f04f 0901 	mov.w	r9, #1
 800eede:	e7d1      	b.n	800ee84 <__gethex+0x2d0>
 800eee0:	2501      	movs	r5, #1
 800eee2:	e7e2      	b.n	800eeaa <__gethex+0x2f6>
 800eee4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eee6:	f1c3 0301 	rsb	r3, r3, #1
 800eeea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800eeec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d0f0      	beq.n	800eed4 <__gethex+0x320>
 800eef2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800eef6:	f104 0314 	add.w	r3, r4, #20
 800eefa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800eefe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ef02:	f04f 0c00 	mov.w	ip, #0
 800ef06:	4618      	mov	r0, r3
 800ef08:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef0c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ef10:	d01b      	beq.n	800ef4a <__gethex+0x396>
 800ef12:	3201      	adds	r2, #1
 800ef14:	6002      	str	r2, [r0, #0]
 800ef16:	2d02      	cmp	r5, #2
 800ef18:	f104 0314 	add.w	r3, r4, #20
 800ef1c:	d13c      	bne.n	800ef98 <__gethex+0x3e4>
 800ef1e:	f8d8 2000 	ldr.w	r2, [r8]
 800ef22:	3a01      	subs	r2, #1
 800ef24:	42b2      	cmp	r2, r6
 800ef26:	d109      	bne.n	800ef3c <__gethex+0x388>
 800ef28:	1171      	asrs	r1, r6, #5
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ef30:	f006 061f 	and.w	r6, r6, #31
 800ef34:	fa02 f606 	lsl.w	r6, r2, r6
 800ef38:	421e      	tst	r6, r3
 800ef3a:	d13a      	bne.n	800efb2 <__gethex+0x3fe>
 800ef3c:	f045 0520 	orr.w	r5, r5, #32
 800ef40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef42:	601c      	str	r4, [r3, #0]
 800ef44:	9b02      	ldr	r3, [sp, #8]
 800ef46:	601f      	str	r7, [r3, #0]
 800ef48:	e6b0      	b.n	800ecac <__gethex+0xf8>
 800ef4a:	4299      	cmp	r1, r3
 800ef4c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ef50:	d8d9      	bhi.n	800ef06 <__gethex+0x352>
 800ef52:	68a3      	ldr	r3, [r4, #8]
 800ef54:	459b      	cmp	fp, r3
 800ef56:	db17      	blt.n	800ef88 <__gethex+0x3d4>
 800ef58:	6861      	ldr	r1, [r4, #4]
 800ef5a:	9801      	ldr	r0, [sp, #4]
 800ef5c:	3101      	adds	r1, #1
 800ef5e:	f000 f9c3 	bl	800f2e8 <_Balloc>
 800ef62:	4681      	mov	r9, r0
 800ef64:	b918      	cbnz	r0, 800ef6e <__gethex+0x3ba>
 800ef66:	4b1a      	ldr	r3, [pc, #104]	@ (800efd0 <__gethex+0x41c>)
 800ef68:	4602      	mov	r2, r0
 800ef6a:	2184      	movs	r1, #132	@ 0x84
 800ef6c:	e6c5      	b.n	800ecfa <__gethex+0x146>
 800ef6e:	6922      	ldr	r2, [r4, #16]
 800ef70:	3202      	adds	r2, #2
 800ef72:	f104 010c 	add.w	r1, r4, #12
 800ef76:	0092      	lsls	r2, r2, #2
 800ef78:	300c      	adds	r0, #12
 800ef7a:	f7fe fec0 	bl	800dcfe <memcpy>
 800ef7e:	4621      	mov	r1, r4
 800ef80:	9801      	ldr	r0, [sp, #4]
 800ef82:	f000 f9f1 	bl	800f368 <_Bfree>
 800ef86:	464c      	mov	r4, r9
 800ef88:	6923      	ldr	r3, [r4, #16]
 800ef8a:	1c5a      	adds	r2, r3, #1
 800ef8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ef90:	6122      	str	r2, [r4, #16]
 800ef92:	2201      	movs	r2, #1
 800ef94:	615a      	str	r2, [r3, #20]
 800ef96:	e7be      	b.n	800ef16 <__gethex+0x362>
 800ef98:	6922      	ldr	r2, [r4, #16]
 800ef9a:	455a      	cmp	r2, fp
 800ef9c:	dd0b      	ble.n	800efb6 <__gethex+0x402>
 800ef9e:	2101      	movs	r1, #1
 800efa0:	4620      	mov	r0, r4
 800efa2:	f7ff fd9f 	bl	800eae4 <rshift>
 800efa6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800efaa:	3701      	adds	r7, #1
 800efac:	42bb      	cmp	r3, r7
 800efae:	f6ff aee0 	blt.w	800ed72 <__gethex+0x1be>
 800efb2:	2501      	movs	r5, #1
 800efb4:	e7c2      	b.n	800ef3c <__gethex+0x388>
 800efb6:	f016 061f 	ands.w	r6, r6, #31
 800efba:	d0fa      	beq.n	800efb2 <__gethex+0x3fe>
 800efbc:	4453      	add	r3, sl
 800efbe:	f1c6 0620 	rsb	r6, r6, #32
 800efc2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800efc6:	f000 fa81 	bl	800f4cc <__hi0bits>
 800efca:	42b0      	cmp	r0, r6
 800efcc:	dbe7      	blt.n	800ef9e <__gethex+0x3ea>
 800efce:	e7f0      	b.n	800efb2 <__gethex+0x3fe>
 800efd0:	08011f3e 	.word	0x08011f3e

0800efd4 <L_shift>:
 800efd4:	f1c2 0208 	rsb	r2, r2, #8
 800efd8:	0092      	lsls	r2, r2, #2
 800efda:	b570      	push	{r4, r5, r6, lr}
 800efdc:	f1c2 0620 	rsb	r6, r2, #32
 800efe0:	6843      	ldr	r3, [r0, #4]
 800efe2:	6804      	ldr	r4, [r0, #0]
 800efe4:	fa03 f506 	lsl.w	r5, r3, r6
 800efe8:	432c      	orrs	r4, r5
 800efea:	40d3      	lsrs	r3, r2
 800efec:	6004      	str	r4, [r0, #0]
 800efee:	f840 3f04 	str.w	r3, [r0, #4]!
 800eff2:	4288      	cmp	r0, r1
 800eff4:	d3f4      	bcc.n	800efe0 <L_shift+0xc>
 800eff6:	bd70      	pop	{r4, r5, r6, pc}

0800eff8 <__match>:
 800eff8:	b530      	push	{r4, r5, lr}
 800effa:	6803      	ldr	r3, [r0, #0]
 800effc:	3301      	adds	r3, #1
 800effe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f002:	b914      	cbnz	r4, 800f00a <__match+0x12>
 800f004:	6003      	str	r3, [r0, #0]
 800f006:	2001      	movs	r0, #1
 800f008:	bd30      	pop	{r4, r5, pc}
 800f00a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f00e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f012:	2d19      	cmp	r5, #25
 800f014:	bf98      	it	ls
 800f016:	3220      	addls	r2, #32
 800f018:	42a2      	cmp	r2, r4
 800f01a:	d0f0      	beq.n	800effe <__match+0x6>
 800f01c:	2000      	movs	r0, #0
 800f01e:	e7f3      	b.n	800f008 <__match+0x10>

0800f020 <__hexnan>:
 800f020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f024:	680b      	ldr	r3, [r1, #0]
 800f026:	6801      	ldr	r1, [r0, #0]
 800f028:	115e      	asrs	r6, r3, #5
 800f02a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f02e:	f013 031f 	ands.w	r3, r3, #31
 800f032:	b087      	sub	sp, #28
 800f034:	bf18      	it	ne
 800f036:	3604      	addne	r6, #4
 800f038:	2500      	movs	r5, #0
 800f03a:	1f37      	subs	r7, r6, #4
 800f03c:	4682      	mov	sl, r0
 800f03e:	4690      	mov	r8, r2
 800f040:	9301      	str	r3, [sp, #4]
 800f042:	f846 5c04 	str.w	r5, [r6, #-4]
 800f046:	46b9      	mov	r9, r7
 800f048:	463c      	mov	r4, r7
 800f04a:	9502      	str	r5, [sp, #8]
 800f04c:	46ab      	mov	fp, r5
 800f04e:	784a      	ldrb	r2, [r1, #1]
 800f050:	1c4b      	adds	r3, r1, #1
 800f052:	9303      	str	r3, [sp, #12]
 800f054:	b342      	cbz	r2, 800f0a8 <__hexnan+0x88>
 800f056:	4610      	mov	r0, r2
 800f058:	9105      	str	r1, [sp, #20]
 800f05a:	9204      	str	r2, [sp, #16]
 800f05c:	f7ff fd94 	bl	800eb88 <__hexdig_fun>
 800f060:	2800      	cmp	r0, #0
 800f062:	d151      	bne.n	800f108 <__hexnan+0xe8>
 800f064:	9a04      	ldr	r2, [sp, #16]
 800f066:	9905      	ldr	r1, [sp, #20]
 800f068:	2a20      	cmp	r2, #32
 800f06a:	d818      	bhi.n	800f09e <__hexnan+0x7e>
 800f06c:	9b02      	ldr	r3, [sp, #8]
 800f06e:	459b      	cmp	fp, r3
 800f070:	dd13      	ble.n	800f09a <__hexnan+0x7a>
 800f072:	454c      	cmp	r4, r9
 800f074:	d206      	bcs.n	800f084 <__hexnan+0x64>
 800f076:	2d07      	cmp	r5, #7
 800f078:	dc04      	bgt.n	800f084 <__hexnan+0x64>
 800f07a:	462a      	mov	r2, r5
 800f07c:	4649      	mov	r1, r9
 800f07e:	4620      	mov	r0, r4
 800f080:	f7ff ffa8 	bl	800efd4 <L_shift>
 800f084:	4544      	cmp	r4, r8
 800f086:	d952      	bls.n	800f12e <__hexnan+0x10e>
 800f088:	2300      	movs	r3, #0
 800f08a:	f1a4 0904 	sub.w	r9, r4, #4
 800f08e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f092:	f8cd b008 	str.w	fp, [sp, #8]
 800f096:	464c      	mov	r4, r9
 800f098:	461d      	mov	r5, r3
 800f09a:	9903      	ldr	r1, [sp, #12]
 800f09c:	e7d7      	b.n	800f04e <__hexnan+0x2e>
 800f09e:	2a29      	cmp	r2, #41	@ 0x29
 800f0a0:	d157      	bne.n	800f152 <__hexnan+0x132>
 800f0a2:	3102      	adds	r1, #2
 800f0a4:	f8ca 1000 	str.w	r1, [sl]
 800f0a8:	f1bb 0f00 	cmp.w	fp, #0
 800f0ac:	d051      	beq.n	800f152 <__hexnan+0x132>
 800f0ae:	454c      	cmp	r4, r9
 800f0b0:	d206      	bcs.n	800f0c0 <__hexnan+0xa0>
 800f0b2:	2d07      	cmp	r5, #7
 800f0b4:	dc04      	bgt.n	800f0c0 <__hexnan+0xa0>
 800f0b6:	462a      	mov	r2, r5
 800f0b8:	4649      	mov	r1, r9
 800f0ba:	4620      	mov	r0, r4
 800f0bc:	f7ff ff8a 	bl	800efd4 <L_shift>
 800f0c0:	4544      	cmp	r4, r8
 800f0c2:	d936      	bls.n	800f132 <__hexnan+0x112>
 800f0c4:	f1a8 0204 	sub.w	r2, r8, #4
 800f0c8:	4623      	mov	r3, r4
 800f0ca:	f853 1b04 	ldr.w	r1, [r3], #4
 800f0ce:	f842 1f04 	str.w	r1, [r2, #4]!
 800f0d2:	429f      	cmp	r7, r3
 800f0d4:	d2f9      	bcs.n	800f0ca <__hexnan+0xaa>
 800f0d6:	1b3b      	subs	r3, r7, r4
 800f0d8:	f023 0303 	bic.w	r3, r3, #3
 800f0dc:	3304      	adds	r3, #4
 800f0de:	3401      	adds	r4, #1
 800f0e0:	3e03      	subs	r6, #3
 800f0e2:	42b4      	cmp	r4, r6
 800f0e4:	bf88      	it	hi
 800f0e6:	2304      	movhi	r3, #4
 800f0e8:	4443      	add	r3, r8
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	f843 2b04 	str.w	r2, [r3], #4
 800f0f0:	429f      	cmp	r7, r3
 800f0f2:	d2fb      	bcs.n	800f0ec <__hexnan+0xcc>
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	b91b      	cbnz	r3, 800f100 <__hexnan+0xe0>
 800f0f8:	4547      	cmp	r7, r8
 800f0fa:	d128      	bne.n	800f14e <__hexnan+0x12e>
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	603b      	str	r3, [r7, #0]
 800f100:	2005      	movs	r0, #5
 800f102:	b007      	add	sp, #28
 800f104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f108:	3501      	adds	r5, #1
 800f10a:	2d08      	cmp	r5, #8
 800f10c:	f10b 0b01 	add.w	fp, fp, #1
 800f110:	dd06      	ble.n	800f120 <__hexnan+0x100>
 800f112:	4544      	cmp	r4, r8
 800f114:	d9c1      	bls.n	800f09a <__hexnan+0x7a>
 800f116:	2300      	movs	r3, #0
 800f118:	f844 3c04 	str.w	r3, [r4, #-4]
 800f11c:	2501      	movs	r5, #1
 800f11e:	3c04      	subs	r4, #4
 800f120:	6822      	ldr	r2, [r4, #0]
 800f122:	f000 000f 	and.w	r0, r0, #15
 800f126:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f12a:	6020      	str	r0, [r4, #0]
 800f12c:	e7b5      	b.n	800f09a <__hexnan+0x7a>
 800f12e:	2508      	movs	r5, #8
 800f130:	e7b3      	b.n	800f09a <__hexnan+0x7a>
 800f132:	9b01      	ldr	r3, [sp, #4]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d0dd      	beq.n	800f0f4 <__hexnan+0xd4>
 800f138:	f1c3 0320 	rsb	r3, r3, #32
 800f13c:	f04f 32ff 	mov.w	r2, #4294967295
 800f140:	40da      	lsrs	r2, r3
 800f142:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f146:	4013      	ands	r3, r2
 800f148:	f846 3c04 	str.w	r3, [r6, #-4]
 800f14c:	e7d2      	b.n	800f0f4 <__hexnan+0xd4>
 800f14e:	3f04      	subs	r7, #4
 800f150:	e7d0      	b.n	800f0f4 <__hexnan+0xd4>
 800f152:	2004      	movs	r0, #4
 800f154:	e7d5      	b.n	800f102 <__hexnan+0xe2>
	...

0800f158 <malloc>:
 800f158:	4b02      	ldr	r3, [pc, #8]	@ (800f164 <malloc+0xc>)
 800f15a:	4601      	mov	r1, r0
 800f15c:	6818      	ldr	r0, [r3, #0]
 800f15e:	f000 b825 	b.w	800f1ac <_malloc_r>
 800f162:	bf00      	nop
 800f164:	200001c4 	.word	0x200001c4

0800f168 <sbrk_aligned>:
 800f168:	b570      	push	{r4, r5, r6, lr}
 800f16a:	4e0f      	ldr	r6, [pc, #60]	@ (800f1a8 <sbrk_aligned+0x40>)
 800f16c:	460c      	mov	r4, r1
 800f16e:	6831      	ldr	r1, [r6, #0]
 800f170:	4605      	mov	r5, r0
 800f172:	b911      	cbnz	r1, 800f17a <sbrk_aligned+0x12>
 800f174:	f001 f952 	bl	801041c <_sbrk_r>
 800f178:	6030      	str	r0, [r6, #0]
 800f17a:	4621      	mov	r1, r4
 800f17c:	4628      	mov	r0, r5
 800f17e:	f001 f94d 	bl	801041c <_sbrk_r>
 800f182:	1c43      	adds	r3, r0, #1
 800f184:	d103      	bne.n	800f18e <sbrk_aligned+0x26>
 800f186:	f04f 34ff 	mov.w	r4, #4294967295
 800f18a:	4620      	mov	r0, r4
 800f18c:	bd70      	pop	{r4, r5, r6, pc}
 800f18e:	1cc4      	adds	r4, r0, #3
 800f190:	f024 0403 	bic.w	r4, r4, #3
 800f194:	42a0      	cmp	r0, r4
 800f196:	d0f8      	beq.n	800f18a <sbrk_aligned+0x22>
 800f198:	1a21      	subs	r1, r4, r0
 800f19a:	4628      	mov	r0, r5
 800f19c:	f001 f93e 	bl	801041c <_sbrk_r>
 800f1a0:	3001      	adds	r0, #1
 800f1a2:	d1f2      	bne.n	800f18a <sbrk_aligned+0x22>
 800f1a4:	e7ef      	b.n	800f186 <sbrk_aligned+0x1e>
 800f1a6:	bf00      	nop
 800f1a8:	2000ab6c 	.word	0x2000ab6c

0800f1ac <_malloc_r>:
 800f1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1b0:	1ccd      	adds	r5, r1, #3
 800f1b2:	f025 0503 	bic.w	r5, r5, #3
 800f1b6:	3508      	adds	r5, #8
 800f1b8:	2d0c      	cmp	r5, #12
 800f1ba:	bf38      	it	cc
 800f1bc:	250c      	movcc	r5, #12
 800f1be:	2d00      	cmp	r5, #0
 800f1c0:	4606      	mov	r6, r0
 800f1c2:	db01      	blt.n	800f1c8 <_malloc_r+0x1c>
 800f1c4:	42a9      	cmp	r1, r5
 800f1c6:	d904      	bls.n	800f1d2 <_malloc_r+0x26>
 800f1c8:	230c      	movs	r3, #12
 800f1ca:	6033      	str	r3, [r6, #0]
 800f1cc:	2000      	movs	r0, #0
 800f1ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f2a8 <_malloc_r+0xfc>
 800f1d6:	f000 f87b 	bl	800f2d0 <__malloc_lock>
 800f1da:	f8d8 3000 	ldr.w	r3, [r8]
 800f1de:	461c      	mov	r4, r3
 800f1e0:	bb44      	cbnz	r4, 800f234 <_malloc_r+0x88>
 800f1e2:	4629      	mov	r1, r5
 800f1e4:	4630      	mov	r0, r6
 800f1e6:	f7ff ffbf 	bl	800f168 <sbrk_aligned>
 800f1ea:	1c43      	adds	r3, r0, #1
 800f1ec:	4604      	mov	r4, r0
 800f1ee:	d158      	bne.n	800f2a2 <_malloc_r+0xf6>
 800f1f0:	f8d8 4000 	ldr.w	r4, [r8]
 800f1f4:	4627      	mov	r7, r4
 800f1f6:	2f00      	cmp	r7, #0
 800f1f8:	d143      	bne.n	800f282 <_malloc_r+0xd6>
 800f1fa:	2c00      	cmp	r4, #0
 800f1fc:	d04b      	beq.n	800f296 <_malloc_r+0xea>
 800f1fe:	6823      	ldr	r3, [r4, #0]
 800f200:	4639      	mov	r1, r7
 800f202:	4630      	mov	r0, r6
 800f204:	eb04 0903 	add.w	r9, r4, r3
 800f208:	f001 f908 	bl	801041c <_sbrk_r>
 800f20c:	4581      	cmp	r9, r0
 800f20e:	d142      	bne.n	800f296 <_malloc_r+0xea>
 800f210:	6821      	ldr	r1, [r4, #0]
 800f212:	1a6d      	subs	r5, r5, r1
 800f214:	4629      	mov	r1, r5
 800f216:	4630      	mov	r0, r6
 800f218:	f7ff ffa6 	bl	800f168 <sbrk_aligned>
 800f21c:	3001      	adds	r0, #1
 800f21e:	d03a      	beq.n	800f296 <_malloc_r+0xea>
 800f220:	6823      	ldr	r3, [r4, #0]
 800f222:	442b      	add	r3, r5
 800f224:	6023      	str	r3, [r4, #0]
 800f226:	f8d8 3000 	ldr.w	r3, [r8]
 800f22a:	685a      	ldr	r2, [r3, #4]
 800f22c:	bb62      	cbnz	r2, 800f288 <_malloc_r+0xdc>
 800f22e:	f8c8 7000 	str.w	r7, [r8]
 800f232:	e00f      	b.n	800f254 <_malloc_r+0xa8>
 800f234:	6822      	ldr	r2, [r4, #0]
 800f236:	1b52      	subs	r2, r2, r5
 800f238:	d420      	bmi.n	800f27c <_malloc_r+0xd0>
 800f23a:	2a0b      	cmp	r2, #11
 800f23c:	d917      	bls.n	800f26e <_malloc_r+0xc2>
 800f23e:	1961      	adds	r1, r4, r5
 800f240:	42a3      	cmp	r3, r4
 800f242:	6025      	str	r5, [r4, #0]
 800f244:	bf18      	it	ne
 800f246:	6059      	strne	r1, [r3, #4]
 800f248:	6863      	ldr	r3, [r4, #4]
 800f24a:	bf08      	it	eq
 800f24c:	f8c8 1000 	streq.w	r1, [r8]
 800f250:	5162      	str	r2, [r4, r5]
 800f252:	604b      	str	r3, [r1, #4]
 800f254:	4630      	mov	r0, r6
 800f256:	f000 f841 	bl	800f2dc <__malloc_unlock>
 800f25a:	f104 000b 	add.w	r0, r4, #11
 800f25e:	1d23      	adds	r3, r4, #4
 800f260:	f020 0007 	bic.w	r0, r0, #7
 800f264:	1ac2      	subs	r2, r0, r3
 800f266:	bf1c      	itt	ne
 800f268:	1a1b      	subne	r3, r3, r0
 800f26a:	50a3      	strne	r3, [r4, r2]
 800f26c:	e7af      	b.n	800f1ce <_malloc_r+0x22>
 800f26e:	6862      	ldr	r2, [r4, #4]
 800f270:	42a3      	cmp	r3, r4
 800f272:	bf0c      	ite	eq
 800f274:	f8c8 2000 	streq.w	r2, [r8]
 800f278:	605a      	strne	r2, [r3, #4]
 800f27a:	e7eb      	b.n	800f254 <_malloc_r+0xa8>
 800f27c:	4623      	mov	r3, r4
 800f27e:	6864      	ldr	r4, [r4, #4]
 800f280:	e7ae      	b.n	800f1e0 <_malloc_r+0x34>
 800f282:	463c      	mov	r4, r7
 800f284:	687f      	ldr	r7, [r7, #4]
 800f286:	e7b6      	b.n	800f1f6 <_malloc_r+0x4a>
 800f288:	461a      	mov	r2, r3
 800f28a:	685b      	ldr	r3, [r3, #4]
 800f28c:	42a3      	cmp	r3, r4
 800f28e:	d1fb      	bne.n	800f288 <_malloc_r+0xdc>
 800f290:	2300      	movs	r3, #0
 800f292:	6053      	str	r3, [r2, #4]
 800f294:	e7de      	b.n	800f254 <_malloc_r+0xa8>
 800f296:	230c      	movs	r3, #12
 800f298:	6033      	str	r3, [r6, #0]
 800f29a:	4630      	mov	r0, r6
 800f29c:	f000 f81e 	bl	800f2dc <__malloc_unlock>
 800f2a0:	e794      	b.n	800f1cc <_malloc_r+0x20>
 800f2a2:	6005      	str	r5, [r0, #0]
 800f2a4:	e7d6      	b.n	800f254 <_malloc_r+0xa8>
 800f2a6:	bf00      	nop
 800f2a8:	2000ab70 	.word	0x2000ab70

0800f2ac <__ascii_mbtowc>:
 800f2ac:	b082      	sub	sp, #8
 800f2ae:	b901      	cbnz	r1, 800f2b2 <__ascii_mbtowc+0x6>
 800f2b0:	a901      	add	r1, sp, #4
 800f2b2:	b142      	cbz	r2, 800f2c6 <__ascii_mbtowc+0x1a>
 800f2b4:	b14b      	cbz	r3, 800f2ca <__ascii_mbtowc+0x1e>
 800f2b6:	7813      	ldrb	r3, [r2, #0]
 800f2b8:	600b      	str	r3, [r1, #0]
 800f2ba:	7812      	ldrb	r2, [r2, #0]
 800f2bc:	1e10      	subs	r0, r2, #0
 800f2be:	bf18      	it	ne
 800f2c0:	2001      	movne	r0, #1
 800f2c2:	b002      	add	sp, #8
 800f2c4:	4770      	bx	lr
 800f2c6:	4610      	mov	r0, r2
 800f2c8:	e7fb      	b.n	800f2c2 <__ascii_mbtowc+0x16>
 800f2ca:	f06f 0001 	mvn.w	r0, #1
 800f2ce:	e7f8      	b.n	800f2c2 <__ascii_mbtowc+0x16>

0800f2d0 <__malloc_lock>:
 800f2d0:	4801      	ldr	r0, [pc, #4]	@ (800f2d8 <__malloc_lock+0x8>)
 800f2d2:	f7fe bd12 	b.w	800dcfa <__retarget_lock_acquire_recursive>
 800f2d6:	bf00      	nop
 800f2d8:	2000ab68 	.word	0x2000ab68

0800f2dc <__malloc_unlock>:
 800f2dc:	4801      	ldr	r0, [pc, #4]	@ (800f2e4 <__malloc_unlock+0x8>)
 800f2de:	f7fe bd0d 	b.w	800dcfc <__retarget_lock_release_recursive>
 800f2e2:	bf00      	nop
 800f2e4:	2000ab68 	.word	0x2000ab68

0800f2e8 <_Balloc>:
 800f2e8:	b570      	push	{r4, r5, r6, lr}
 800f2ea:	69c6      	ldr	r6, [r0, #28]
 800f2ec:	4604      	mov	r4, r0
 800f2ee:	460d      	mov	r5, r1
 800f2f0:	b976      	cbnz	r6, 800f310 <_Balloc+0x28>
 800f2f2:	2010      	movs	r0, #16
 800f2f4:	f7ff ff30 	bl	800f158 <malloc>
 800f2f8:	4602      	mov	r2, r0
 800f2fa:	61e0      	str	r0, [r4, #28]
 800f2fc:	b920      	cbnz	r0, 800f308 <_Balloc+0x20>
 800f2fe:	4b18      	ldr	r3, [pc, #96]	@ (800f360 <_Balloc+0x78>)
 800f300:	4818      	ldr	r0, [pc, #96]	@ (800f364 <_Balloc+0x7c>)
 800f302:	216b      	movs	r1, #107	@ 0x6b
 800f304:	f001 f8b6 	bl	8010474 <__assert_func>
 800f308:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f30c:	6006      	str	r6, [r0, #0]
 800f30e:	60c6      	str	r6, [r0, #12]
 800f310:	69e6      	ldr	r6, [r4, #28]
 800f312:	68f3      	ldr	r3, [r6, #12]
 800f314:	b183      	cbz	r3, 800f338 <_Balloc+0x50>
 800f316:	69e3      	ldr	r3, [r4, #28]
 800f318:	68db      	ldr	r3, [r3, #12]
 800f31a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f31e:	b9b8      	cbnz	r0, 800f350 <_Balloc+0x68>
 800f320:	2101      	movs	r1, #1
 800f322:	fa01 f605 	lsl.w	r6, r1, r5
 800f326:	1d72      	adds	r2, r6, #5
 800f328:	0092      	lsls	r2, r2, #2
 800f32a:	4620      	mov	r0, r4
 800f32c:	f001 f8c0 	bl	80104b0 <_calloc_r>
 800f330:	b160      	cbz	r0, 800f34c <_Balloc+0x64>
 800f332:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f336:	e00e      	b.n	800f356 <_Balloc+0x6e>
 800f338:	2221      	movs	r2, #33	@ 0x21
 800f33a:	2104      	movs	r1, #4
 800f33c:	4620      	mov	r0, r4
 800f33e:	f001 f8b7 	bl	80104b0 <_calloc_r>
 800f342:	69e3      	ldr	r3, [r4, #28]
 800f344:	60f0      	str	r0, [r6, #12]
 800f346:	68db      	ldr	r3, [r3, #12]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d1e4      	bne.n	800f316 <_Balloc+0x2e>
 800f34c:	2000      	movs	r0, #0
 800f34e:	bd70      	pop	{r4, r5, r6, pc}
 800f350:	6802      	ldr	r2, [r0, #0]
 800f352:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f356:	2300      	movs	r3, #0
 800f358:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f35c:	e7f7      	b.n	800f34e <_Balloc+0x66>
 800f35e:	bf00      	nop
 800f360:	08011ecf 	.word	0x08011ecf
 800f364:	08011faf 	.word	0x08011faf

0800f368 <_Bfree>:
 800f368:	b570      	push	{r4, r5, r6, lr}
 800f36a:	69c6      	ldr	r6, [r0, #28]
 800f36c:	4605      	mov	r5, r0
 800f36e:	460c      	mov	r4, r1
 800f370:	b976      	cbnz	r6, 800f390 <_Bfree+0x28>
 800f372:	2010      	movs	r0, #16
 800f374:	f7ff fef0 	bl	800f158 <malloc>
 800f378:	4602      	mov	r2, r0
 800f37a:	61e8      	str	r0, [r5, #28]
 800f37c:	b920      	cbnz	r0, 800f388 <_Bfree+0x20>
 800f37e:	4b09      	ldr	r3, [pc, #36]	@ (800f3a4 <_Bfree+0x3c>)
 800f380:	4809      	ldr	r0, [pc, #36]	@ (800f3a8 <_Bfree+0x40>)
 800f382:	218f      	movs	r1, #143	@ 0x8f
 800f384:	f001 f876 	bl	8010474 <__assert_func>
 800f388:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f38c:	6006      	str	r6, [r0, #0]
 800f38e:	60c6      	str	r6, [r0, #12]
 800f390:	b13c      	cbz	r4, 800f3a2 <_Bfree+0x3a>
 800f392:	69eb      	ldr	r3, [r5, #28]
 800f394:	6862      	ldr	r2, [r4, #4]
 800f396:	68db      	ldr	r3, [r3, #12]
 800f398:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f39c:	6021      	str	r1, [r4, #0]
 800f39e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f3a2:	bd70      	pop	{r4, r5, r6, pc}
 800f3a4:	08011ecf 	.word	0x08011ecf
 800f3a8:	08011faf 	.word	0x08011faf

0800f3ac <__multadd>:
 800f3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3b0:	690d      	ldr	r5, [r1, #16]
 800f3b2:	4607      	mov	r7, r0
 800f3b4:	460c      	mov	r4, r1
 800f3b6:	461e      	mov	r6, r3
 800f3b8:	f101 0c14 	add.w	ip, r1, #20
 800f3bc:	2000      	movs	r0, #0
 800f3be:	f8dc 3000 	ldr.w	r3, [ip]
 800f3c2:	b299      	uxth	r1, r3
 800f3c4:	fb02 6101 	mla	r1, r2, r1, r6
 800f3c8:	0c1e      	lsrs	r6, r3, #16
 800f3ca:	0c0b      	lsrs	r3, r1, #16
 800f3cc:	fb02 3306 	mla	r3, r2, r6, r3
 800f3d0:	b289      	uxth	r1, r1
 800f3d2:	3001      	adds	r0, #1
 800f3d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f3d8:	4285      	cmp	r5, r0
 800f3da:	f84c 1b04 	str.w	r1, [ip], #4
 800f3de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f3e2:	dcec      	bgt.n	800f3be <__multadd+0x12>
 800f3e4:	b30e      	cbz	r6, 800f42a <__multadd+0x7e>
 800f3e6:	68a3      	ldr	r3, [r4, #8]
 800f3e8:	42ab      	cmp	r3, r5
 800f3ea:	dc19      	bgt.n	800f420 <__multadd+0x74>
 800f3ec:	6861      	ldr	r1, [r4, #4]
 800f3ee:	4638      	mov	r0, r7
 800f3f0:	3101      	adds	r1, #1
 800f3f2:	f7ff ff79 	bl	800f2e8 <_Balloc>
 800f3f6:	4680      	mov	r8, r0
 800f3f8:	b928      	cbnz	r0, 800f406 <__multadd+0x5a>
 800f3fa:	4602      	mov	r2, r0
 800f3fc:	4b0c      	ldr	r3, [pc, #48]	@ (800f430 <__multadd+0x84>)
 800f3fe:	480d      	ldr	r0, [pc, #52]	@ (800f434 <__multadd+0x88>)
 800f400:	21ba      	movs	r1, #186	@ 0xba
 800f402:	f001 f837 	bl	8010474 <__assert_func>
 800f406:	6922      	ldr	r2, [r4, #16]
 800f408:	3202      	adds	r2, #2
 800f40a:	f104 010c 	add.w	r1, r4, #12
 800f40e:	0092      	lsls	r2, r2, #2
 800f410:	300c      	adds	r0, #12
 800f412:	f7fe fc74 	bl	800dcfe <memcpy>
 800f416:	4621      	mov	r1, r4
 800f418:	4638      	mov	r0, r7
 800f41a:	f7ff ffa5 	bl	800f368 <_Bfree>
 800f41e:	4644      	mov	r4, r8
 800f420:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f424:	3501      	adds	r5, #1
 800f426:	615e      	str	r6, [r3, #20]
 800f428:	6125      	str	r5, [r4, #16]
 800f42a:	4620      	mov	r0, r4
 800f42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f430:	08011f3e 	.word	0x08011f3e
 800f434:	08011faf 	.word	0x08011faf

0800f438 <__s2b>:
 800f438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f43c:	460c      	mov	r4, r1
 800f43e:	4615      	mov	r5, r2
 800f440:	461f      	mov	r7, r3
 800f442:	2209      	movs	r2, #9
 800f444:	3308      	adds	r3, #8
 800f446:	4606      	mov	r6, r0
 800f448:	fb93 f3f2 	sdiv	r3, r3, r2
 800f44c:	2100      	movs	r1, #0
 800f44e:	2201      	movs	r2, #1
 800f450:	429a      	cmp	r2, r3
 800f452:	db09      	blt.n	800f468 <__s2b+0x30>
 800f454:	4630      	mov	r0, r6
 800f456:	f7ff ff47 	bl	800f2e8 <_Balloc>
 800f45a:	b940      	cbnz	r0, 800f46e <__s2b+0x36>
 800f45c:	4602      	mov	r2, r0
 800f45e:	4b19      	ldr	r3, [pc, #100]	@ (800f4c4 <__s2b+0x8c>)
 800f460:	4819      	ldr	r0, [pc, #100]	@ (800f4c8 <__s2b+0x90>)
 800f462:	21d3      	movs	r1, #211	@ 0xd3
 800f464:	f001 f806 	bl	8010474 <__assert_func>
 800f468:	0052      	lsls	r2, r2, #1
 800f46a:	3101      	adds	r1, #1
 800f46c:	e7f0      	b.n	800f450 <__s2b+0x18>
 800f46e:	9b08      	ldr	r3, [sp, #32]
 800f470:	6143      	str	r3, [r0, #20]
 800f472:	2d09      	cmp	r5, #9
 800f474:	f04f 0301 	mov.w	r3, #1
 800f478:	6103      	str	r3, [r0, #16]
 800f47a:	dd16      	ble.n	800f4aa <__s2b+0x72>
 800f47c:	f104 0909 	add.w	r9, r4, #9
 800f480:	46c8      	mov	r8, r9
 800f482:	442c      	add	r4, r5
 800f484:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f488:	4601      	mov	r1, r0
 800f48a:	3b30      	subs	r3, #48	@ 0x30
 800f48c:	220a      	movs	r2, #10
 800f48e:	4630      	mov	r0, r6
 800f490:	f7ff ff8c 	bl	800f3ac <__multadd>
 800f494:	45a0      	cmp	r8, r4
 800f496:	d1f5      	bne.n	800f484 <__s2b+0x4c>
 800f498:	f1a5 0408 	sub.w	r4, r5, #8
 800f49c:	444c      	add	r4, r9
 800f49e:	1b2d      	subs	r5, r5, r4
 800f4a0:	1963      	adds	r3, r4, r5
 800f4a2:	42bb      	cmp	r3, r7
 800f4a4:	db04      	blt.n	800f4b0 <__s2b+0x78>
 800f4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4aa:	340a      	adds	r4, #10
 800f4ac:	2509      	movs	r5, #9
 800f4ae:	e7f6      	b.n	800f49e <__s2b+0x66>
 800f4b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f4b4:	4601      	mov	r1, r0
 800f4b6:	3b30      	subs	r3, #48	@ 0x30
 800f4b8:	220a      	movs	r2, #10
 800f4ba:	4630      	mov	r0, r6
 800f4bc:	f7ff ff76 	bl	800f3ac <__multadd>
 800f4c0:	e7ee      	b.n	800f4a0 <__s2b+0x68>
 800f4c2:	bf00      	nop
 800f4c4:	08011f3e 	.word	0x08011f3e
 800f4c8:	08011faf 	.word	0x08011faf

0800f4cc <__hi0bits>:
 800f4cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	bf36      	itet	cc
 800f4d4:	0403      	lslcc	r3, r0, #16
 800f4d6:	2000      	movcs	r0, #0
 800f4d8:	2010      	movcc	r0, #16
 800f4da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f4de:	bf3c      	itt	cc
 800f4e0:	021b      	lslcc	r3, r3, #8
 800f4e2:	3008      	addcc	r0, #8
 800f4e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f4e8:	bf3c      	itt	cc
 800f4ea:	011b      	lslcc	r3, r3, #4
 800f4ec:	3004      	addcc	r0, #4
 800f4ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4f2:	bf3c      	itt	cc
 800f4f4:	009b      	lslcc	r3, r3, #2
 800f4f6:	3002      	addcc	r0, #2
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	db05      	blt.n	800f508 <__hi0bits+0x3c>
 800f4fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f500:	f100 0001 	add.w	r0, r0, #1
 800f504:	bf08      	it	eq
 800f506:	2020      	moveq	r0, #32
 800f508:	4770      	bx	lr

0800f50a <__lo0bits>:
 800f50a:	6803      	ldr	r3, [r0, #0]
 800f50c:	4602      	mov	r2, r0
 800f50e:	f013 0007 	ands.w	r0, r3, #7
 800f512:	d00b      	beq.n	800f52c <__lo0bits+0x22>
 800f514:	07d9      	lsls	r1, r3, #31
 800f516:	d421      	bmi.n	800f55c <__lo0bits+0x52>
 800f518:	0798      	lsls	r0, r3, #30
 800f51a:	bf49      	itett	mi
 800f51c:	085b      	lsrmi	r3, r3, #1
 800f51e:	089b      	lsrpl	r3, r3, #2
 800f520:	2001      	movmi	r0, #1
 800f522:	6013      	strmi	r3, [r2, #0]
 800f524:	bf5c      	itt	pl
 800f526:	6013      	strpl	r3, [r2, #0]
 800f528:	2002      	movpl	r0, #2
 800f52a:	4770      	bx	lr
 800f52c:	b299      	uxth	r1, r3
 800f52e:	b909      	cbnz	r1, 800f534 <__lo0bits+0x2a>
 800f530:	0c1b      	lsrs	r3, r3, #16
 800f532:	2010      	movs	r0, #16
 800f534:	b2d9      	uxtb	r1, r3
 800f536:	b909      	cbnz	r1, 800f53c <__lo0bits+0x32>
 800f538:	3008      	adds	r0, #8
 800f53a:	0a1b      	lsrs	r3, r3, #8
 800f53c:	0719      	lsls	r1, r3, #28
 800f53e:	bf04      	itt	eq
 800f540:	091b      	lsreq	r3, r3, #4
 800f542:	3004      	addeq	r0, #4
 800f544:	0799      	lsls	r1, r3, #30
 800f546:	bf04      	itt	eq
 800f548:	089b      	lsreq	r3, r3, #2
 800f54a:	3002      	addeq	r0, #2
 800f54c:	07d9      	lsls	r1, r3, #31
 800f54e:	d403      	bmi.n	800f558 <__lo0bits+0x4e>
 800f550:	085b      	lsrs	r3, r3, #1
 800f552:	f100 0001 	add.w	r0, r0, #1
 800f556:	d003      	beq.n	800f560 <__lo0bits+0x56>
 800f558:	6013      	str	r3, [r2, #0]
 800f55a:	4770      	bx	lr
 800f55c:	2000      	movs	r0, #0
 800f55e:	4770      	bx	lr
 800f560:	2020      	movs	r0, #32
 800f562:	4770      	bx	lr

0800f564 <__i2b>:
 800f564:	b510      	push	{r4, lr}
 800f566:	460c      	mov	r4, r1
 800f568:	2101      	movs	r1, #1
 800f56a:	f7ff febd 	bl	800f2e8 <_Balloc>
 800f56e:	4602      	mov	r2, r0
 800f570:	b928      	cbnz	r0, 800f57e <__i2b+0x1a>
 800f572:	4b05      	ldr	r3, [pc, #20]	@ (800f588 <__i2b+0x24>)
 800f574:	4805      	ldr	r0, [pc, #20]	@ (800f58c <__i2b+0x28>)
 800f576:	f240 1145 	movw	r1, #325	@ 0x145
 800f57a:	f000 ff7b 	bl	8010474 <__assert_func>
 800f57e:	2301      	movs	r3, #1
 800f580:	6144      	str	r4, [r0, #20]
 800f582:	6103      	str	r3, [r0, #16]
 800f584:	bd10      	pop	{r4, pc}
 800f586:	bf00      	nop
 800f588:	08011f3e 	.word	0x08011f3e
 800f58c:	08011faf 	.word	0x08011faf

0800f590 <__multiply>:
 800f590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f594:	4617      	mov	r7, r2
 800f596:	690a      	ldr	r2, [r1, #16]
 800f598:	693b      	ldr	r3, [r7, #16]
 800f59a:	429a      	cmp	r2, r3
 800f59c:	bfa8      	it	ge
 800f59e:	463b      	movge	r3, r7
 800f5a0:	4689      	mov	r9, r1
 800f5a2:	bfa4      	itt	ge
 800f5a4:	460f      	movge	r7, r1
 800f5a6:	4699      	movge	r9, r3
 800f5a8:	693d      	ldr	r5, [r7, #16]
 800f5aa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	6879      	ldr	r1, [r7, #4]
 800f5b2:	eb05 060a 	add.w	r6, r5, sl
 800f5b6:	42b3      	cmp	r3, r6
 800f5b8:	b085      	sub	sp, #20
 800f5ba:	bfb8      	it	lt
 800f5bc:	3101      	addlt	r1, #1
 800f5be:	f7ff fe93 	bl	800f2e8 <_Balloc>
 800f5c2:	b930      	cbnz	r0, 800f5d2 <__multiply+0x42>
 800f5c4:	4602      	mov	r2, r0
 800f5c6:	4b41      	ldr	r3, [pc, #260]	@ (800f6cc <__multiply+0x13c>)
 800f5c8:	4841      	ldr	r0, [pc, #260]	@ (800f6d0 <__multiply+0x140>)
 800f5ca:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f5ce:	f000 ff51 	bl	8010474 <__assert_func>
 800f5d2:	f100 0414 	add.w	r4, r0, #20
 800f5d6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f5da:	4623      	mov	r3, r4
 800f5dc:	2200      	movs	r2, #0
 800f5de:	4573      	cmp	r3, lr
 800f5e0:	d320      	bcc.n	800f624 <__multiply+0x94>
 800f5e2:	f107 0814 	add.w	r8, r7, #20
 800f5e6:	f109 0114 	add.w	r1, r9, #20
 800f5ea:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f5ee:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f5f2:	9302      	str	r3, [sp, #8]
 800f5f4:	1beb      	subs	r3, r5, r7
 800f5f6:	3b15      	subs	r3, #21
 800f5f8:	f023 0303 	bic.w	r3, r3, #3
 800f5fc:	3304      	adds	r3, #4
 800f5fe:	3715      	adds	r7, #21
 800f600:	42bd      	cmp	r5, r7
 800f602:	bf38      	it	cc
 800f604:	2304      	movcc	r3, #4
 800f606:	9301      	str	r3, [sp, #4]
 800f608:	9b02      	ldr	r3, [sp, #8]
 800f60a:	9103      	str	r1, [sp, #12]
 800f60c:	428b      	cmp	r3, r1
 800f60e:	d80c      	bhi.n	800f62a <__multiply+0x9a>
 800f610:	2e00      	cmp	r6, #0
 800f612:	dd03      	ble.n	800f61c <__multiply+0x8c>
 800f614:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d055      	beq.n	800f6c8 <__multiply+0x138>
 800f61c:	6106      	str	r6, [r0, #16]
 800f61e:	b005      	add	sp, #20
 800f620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f624:	f843 2b04 	str.w	r2, [r3], #4
 800f628:	e7d9      	b.n	800f5de <__multiply+0x4e>
 800f62a:	f8b1 a000 	ldrh.w	sl, [r1]
 800f62e:	f1ba 0f00 	cmp.w	sl, #0
 800f632:	d01f      	beq.n	800f674 <__multiply+0xe4>
 800f634:	46c4      	mov	ip, r8
 800f636:	46a1      	mov	r9, r4
 800f638:	2700      	movs	r7, #0
 800f63a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f63e:	f8d9 3000 	ldr.w	r3, [r9]
 800f642:	fa1f fb82 	uxth.w	fp, r2
 800f646:	b29b      	uxth	r3, r3
 800f648:	fb0a 330b 	mla	r3, sl, fp, r3
 800f64c:	443b      	add	r3, r7
 800f64e:	f8d9 7000 	ldr.w	r7, [r9]
 800f652:	0c12      	lsrs	r2, r2, #16
 800f654:	0c3f      	lsrs	r7, r7, #16
 800f656:	fb0a 7202 	mla	r2, sl, r2, r7
 800f65a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800f65e:	b29b      	uxth	r3, r3
 800f660:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f664:	4565      	cmp	r5, ip
 800f666:	f849 3b04 	str.w	r3, [r9], #4
 800f66a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800f66e:	d8e4      	bhi.n	800f63a <__multiply+0xaa>
 800f670:	9b01      	ldr	r3, [sp, #4]
 800f672:	50e7      	str	r7, [r4, r3]
 800f674:	9b03      	ldr	r3, [sp, #12]
 800f676:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f67a:	3104      	adds	r1, #4
 800f67c:	f1b9 0f00 	cmp.w	r9, #0
 800f680:	d020      	beq.n	800f6c4 <__multiply+0x134>
 800f682:	6823      	ldr	r3, [r4, #0]
 800f684:	4647      	mov	r7, r8
 800f686:	46a4      	mov	ip, r4
 800f688:	f04f 0a00 	mov.w	sl, #0
 800f68c:	f8b7 b000 	ldrh.w	fp, [r7]
 800f690:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800f694:	fb09 220b 	mla	r2, r9, fp, r2
 800f698:	4452      	add	r2, sl
 800f69a:	b29b      	uxth	r3, r3
 800f69c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f6a0:	f84c 3b04 	str.w	r3, [ip], #4
 800f6a4:	f857 3b04 	ldr.w	r3, [r7], #4
 800f6a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f6ac:	f8bc 3000 	ldrh.w	r3, [ip]
 800f6b0:	fb09 330a 	mla	r3, r9, sl, r3
 800f6b4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800f6b8:	42bd      	cmp	r5, r7
 800f6ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f6be:	d8e5      	bhi.n	800f68c <__multiply+0xfc>
 800f6c0:	9a01      	ldr	r2, [sp, #4]
 800f6c2:	50a3      	str	r3, [r4, r2]
 800f6c4:	3404      	adds	r4, #4
 800f6c6:	e79f      	b.n	800f608 <__multiply+0x78>
 800f6c8:	3e01      	subs	r6, #1
 800f6ca:	e7a1      	b.n	800f610 <__multiply+0x80>
 800f6cc:	08011f3e 	.word	0x08011f3e
 800f6d0:	08011faf 	.word	0x08011faf

0800f6d4 <__pow5mult>:
 800f6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6d8:	4615      	mov	r5, r2
 800f6da:	f012 0203 	ands.w	r2, r2, #3
 800f6de:	4607      	mov	r7, r0
 800f6e0:	460e      	mov	r6, r1
 800f6e2:	d007      	beq.n	800f6f4 <__pow5mult+0x20>
 800f6e4:	4c25      	ldr	r4, [pc, #148]	@ (800f77c <__pow5mult+0xa8>)
 800f6e6:	3a01      	subs	r2, #1
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f6ee:	f7ff fe5d 	bl	800f3ac <__multadd>
 800f6f2:	4606      	mov	r6, r0
 800f6f4:	10ad      	asrs	r5, r5, #2
 800f6f6:	d03d      	beq.n	800f774 <__pow5mult+0xa0>
 800f6f8:	69fc      	ldr	r4, [r7, #28]
 800f6fa:	b97c      	cbnz	r4, 800f71c <__pow5mult+0x48>
 800f6fc:	2010      	movs	r0, #16
 800f6fe:	f7ff fd2b 	bl	800f158 <malloc>
 800f702:	4602      	mov	r2, r0
 800f704:	61f8      	str	r0, [r7, #28]
 800f706:	b928      	cbnz	r0, 800f714 <__pow5mult+0x40>
 800f708:	4b1d      	ldr	r3, [pc, #116]	@ (800f780 <__pow5mult+0xac>)
 800f70a:	481e      	ldr	r0, [pc, #120]	@ (800f784 <__pow5mult+0xb0>)
 800f70c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f710:	f000 feb0 	bl	8010474 <__assert_func>
 800f714:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f718:	6004      	str	r4, [r0, #0]
 800f71a:	60c4      	str	r4, [r0, #12]
 800f71c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f720:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f724:	b94c      	cbnz	r4, 800f73a <__pow5mult+0x66>
 800f726:	f240 2171 	movw	r1, #625	@ 0x271
 800f72a:	4638      	mov	r0, r7
 800f72c:	f7ff ff1a 	bl	800f564 <__i2b>
 800f730:	2300      	movs	r3, #0
 800f732:	f8c8 0008 	str.w	r0, [r8, #8]
 800f736:	4604      	mov	r4, r0
 800f738:	6003      	str	r3, [r0, #0]
 800f73a:	f04f 0900 	mov.w	r9, #0
 800f73e:	07eb      	lsls	r3, r5, #31
 800f740:	d50a      	bpl.n	800f758 <__pow5mult+0x84>
 800f742:	4631      	mov	r1, r6
 800f744:	4622      	mov	r2, r4
 800f746:	4638      	mov	r0, r7
 800f748:	f7ff ff22 	bl	800f590 <__multiply>
 800f74c:	4631      	mov	r1, r6
 800f74e:	4680      	mov	r8, r0
 800f750:	4638      	mov	r0, r7
 800f752:	f7ff fe09 	bl	800f368 <_Bfree>
 800f756:	4646      	mov	r6, r8
 800f758:	106d      	asrs	r5, r5, #1
 800f75a:	d00b      	beq.n	800f774 <__pow5mult+0xa0>
 800f75c:	6820      	ldr	r0, [r4, #0]
 800f75e:	b938      	cbnz	r0, 800f770 <__pow5mult+0x9c>
 800f760:	4622      	mov	r2, r4
 800f762:	4621      	mov	r1, r4
 800f764:	4638      	mov	r0, r7
 800f766:	f7ff ff13 	bl	800f590 <__multiply>
 800f76a:	6020      	str	r0, [r4, #0]
 800f76c:	f8c0 9000 	str.w	r9, [r0]
 800f770:	4604      	mov	r4, r0
 800f772:	e7e4      	b.n	800f73e <__pow5mult+0x6a>
 800f774:	4630      	mov	r0, r6
 800f776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f77a:	bf00      	nop
 800f77c:	080121ac 	.word	0x080121ac
 800f780:	08011ecf 	.word	0x08011ecf
 800f784:	08011faf 	.word	0x08011faf

0800f788 <__lshift>:
 800f788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f78c:	460c      	mov	r4, r1
 800f78e:	6849      	ldr	r1, [r1, #4]
 800f790:	6923      	ldr	r3, [r4, #16]
 800f792:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f796:	68a3      	ldr	r3, [r4, #8]
 800f798:	4607      	mov	r7, r0
 800f79a:	4691      	mov	r9, r2
 800f79c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f7a0:	f108 0601 	add.w	r6, r8, #1
 800f7a4:	42b3      	cmp	r3, r6
 800f7a6:	db0b      	blt.n	800f7c0 <__lshift+0x38>
 800f7a8:	4638      	mov	r0, r7
 800f7aa:	f7ff fd9d 	bl	800f2e8 <_Balloc>
 800f7ae:	4605      	mov	r5, r0
 800f7b0:	b948      	cbnz	r0, 800f7c6 <__lshift+0x3e>
 800f7b2:	4602      	mov	r2, r0
 800f7b4:	4b28      	ldr	r3, [pc, #160]	@ (800f858 <__lshift+0xd0>)
 800f7b6:	4829      	ldr	r0, [pc, #164]	@ (800f85c <__lshift+0xd4>)
 800f7b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f7bc:	f000 fe5a 	bl	8010474 <__assert_func>
 800f7c0:	3101      	adds	r1, #1
 800f7c2:	005b      	lsls	r3, r3, #1
 800f7c4:	e7ee      	b.n	800f7a4 <__lshift+0x1c>
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	f100 0114 	add.w	r1, r0, #20
 800f7cc:	f100 0210 	add.w	r2, r0, #16
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	4553      	cmp	r3, sl
 800f7d4:	db33      	blt.n	800f83e <__lshift+0xb6>
 800f7d6:	6920      	ldr	r0, [r4, #16]
 800f7d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f7dc:	f104 0314 	add.w	r3, r4, #20
 800f7e0:	f019 091f 	ands.w	r9, r9, #31
 800f7e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f7e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f7ec:	d02b      	beq.n	800f846 <__lshift+0xbe>
 800f7ee:	f1c9 0e20 	rsb	lr, r9, #32
 800f7f2:	468a      	mov	sl, r1
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	6818      	ldr	r0, [r3, #0]
 800f7f8:	fa00 f009 	lsl.w	r0, r0, r9
 800f7fc:	4310      	orrs	r0, r2
 800f7fe:	f84a 0b04 	str.w	r0, [sl], #4
 800f802:	f853 2b04 	ldr.w	r2, [r3], #4
 800f806:	459c      	cmp	ip, r3
 800f808:	fa22 f20e 	lsr.w	r2, r2, lr
 800f80c:	d8f3      	bhi.n	800f7f6 <__lshift+0x6e>
 800f80e:	ebac 0304 	sub.w	r3, ip, r4
 800f812:	3b15      	subs	r3, #21
 800f814:	f023 0303 	bic.w	r3, r3, #3
 800f818:	3304      	adds	r3, #4
 800f81a:	f104 0015 	add.w	r0, r4, #21
 800f81e:	4560      	cmp	r0, ip
 800f820:	bf88      	it	hi
 800f822:	2304      	movhi	r3, #4
 800f824:	50ca      	str	r2, [r1, r3]
 800f826:	b10a      	cbz	r2, 800f82c <__lshift+0xa4>
 800f828:	f108 0602 	add.w	r6, r8, #2
 800f82c:	3e01      	subs	r6, #1
 800f82e:	4638      	mov	r0, r7
 800f830:	612e      	str	r6, [r5, #16]
 800f832:	4621      	mov	r1, r4
 800f834:	f7ff fd98 	bl	800f368 <_Bfree>
 800f838:	4628      	mov	r0, r5
 800f83a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f83e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f842:	3301      	adds	r3, #1
 800f844:	e7c5      	b.n	800f7d2 <__lshift+0x4a>
 800f846:	3904      	subs	r1, #4
 800f848:	f853 2b04 	ldr.w	r2, [r3], #4
 800f84c:	f841 2f04 	str.w	r2, [r1, #4]!
 800f850:	459c      	cmp	ip, r3
 800f852:	d8f9      	bhi.n	800f848 <__lshift+0xc0>
 800f854:	e7ea      	b.n	800f82c <__lshift+0xa4>
 800f856:	bf00      	nop
 800f858:	08011f3e 	.word	0x08011f3e
 800f85c:	08011faf 	.word	0x08011faf

0800f860 <__mcmp>:
 800f860:	690a      	ldr	r2, [r1, #16]
 800f862:	4603      	mov	r3, r0
 800f864:	6900      	ldr	r0, [r0, #16]
 800f866:	1a80      	subs	r0, r0, r2
 800f868:	b530      	push	{r4, r5, lr}
 800f86a:	d10e      	bne.n	800f88a <__mcmp+0x2a>
 800f86c:	3314      	adds	r3, #20
 800f86e:	3114      	adds	r1, #20
 800f870:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f874:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f878:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f87c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f880:	4295      	cmp	r5, r2
 800f882:	d003      	beq.n	800f88c <__mcmp+0x2c>
 800f884:	d205      	bcs.n	800f892 <__mcmp+0x32>
 800f886:	f04f 30ff 	mov.w	r0, #4294967295
 800f88a:	bd30      	pop	{r4, r5, pc}
 800f88c:	42a3      	cmp	r3, r4
 800f88e:	d3f3      	bcc.n	800f878 <__mcmp+0x18>
 800f890:	e7fb      	b.n	800f88a <__mcmp+0x2a>
 800f892:	2001      	movs	r0, #1
 800f894:	e7f9      	b.n	800f88a <__mcmp+0x2a>
	...

0800f898 <__mdiff>:
 800f898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f89c:	4689      	mov	r9, r1
 800f89e:	4606      	mov	r6, r0
 800f8a0:	4611      	mov	r1, r2
 800f8a2:	4648      	mov	r0, r9
 800f8a4:	4614      	mov	r4, r2
 800f8a6:	f7ff ffdb 	bl	800f860 <__mcmp>
 800f8aa:	1e05      	subs	r5, r0, #0
 800f8ac:	d112      	bne.n	800f8d4 <__mdiff+0x3c>
 800f8ae:	4629      	mov	r1, r5
 800f8b0:	4630      	mov	r0, r6
 800f8b2:	f7ff fd19 	bl	800f2e8 <_Balloc>
 800f8b6:	4602      	mov	r2, r0
 800f8b8:	b928      	cbnz	r0, 800f8c6 <__mdiff+0x2e>
 800f8ba:	4b3f      	ldr	r3, [pc, #252]	@ (800f9b8 <__mdiff+0x120>)
 800f8bc:	f240 2137 	movw	r1, #567	@ 0x237
 800f8c0:	483e      	ldr	r0, [pc, #248]	@ (800f9bc <__mdiff+0x124>)
 800f8c2:	f000 fdd7 	bl	8010474 <__assert_func>
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f8cc:	4610      	mov	r0, r2
 800f8ce:	b003      	add	sp, #12
 800f8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8d4:	bfbc      	itt	lt
 800f8d6:	464b      	movlt	r3, r9
 800f8d8:	46a1      	movlt	r9, r4
 800f8da:	4630      	mov	r0, r6
 800f8dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f8e0:	bfba      	itte	lt
 800f8e2:	461c      	movlt	r4, r3
 800f8e4:	2501      	movlt	r5, #1
 800f8e6:	2500      	movge	r5, #0
 800f8e8:	f7ff fcfe 	bl	800f2e8 <_Balloc>
 800f8ec:	4602      	mov	r2, r0
 800f8ee:	b918      	cbnz	r0, 800f8f8 <__mdiff+0x60>
 800f8f0:	4b31      	ldr	r3, [pc, #196]	@ (800f9b8 <__mdiff+0x120>)
 800f8f2:	f240 2145 	movw	r1, #581	@ 0x245
 800f8f6:	e7e3      	b.n	800f8c0 <__mdiff+0x28>
 800f8f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f8fc:	6926      	ldr	r6, [r4, #16]
 800f8fe:	60c5      	str	r5, [r0, #12]
 800f900:	f109 0310 	add.w	r3, r9, #16
 800f904:	f109 0514 	add.w	r5, r9, #20
 800f908:	f104 0e14 	add.w	lr, r4, #20
 800f90c:	f100 0b14 	add.w	fp, r0, #20
 800f910:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f914:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f918:	9301      	str	r3, [sp, #4]
 800f91a:	46d9      	mov	r9, fp
 800f91c:	f04f 0c00 	mov.w	ip, #0
 800f920:	9b01      	ldr	r3, [sp, #4]
 800f922:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f926:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f92a:	9301      	str	r3, [sp, #4]
 800f92c:	fa1f f38a 	uxth.w	r3, sl
 800f930:	4619      	mov	r1, r3
 800f932:	b283      	uxth	r3, r0
 800f934:	1acb      	subs	r3, r1, r3
 800f936:	0c00      	lsrs	r0, r0, #16
 800f938:	4463      	add	r3, ip
 800f93a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f93e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f942:	b29b      	uxth	r3, r3
 800f944:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f948:	4576      	cmp	r6, lr
 800f94a:	f849 3b04 	str.w	r3, [r9], #4
 800f94e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f952:	d8e5      	bhi.n	800f920 <__mdiff+0x88>
 800f954:	1b33      	subs	r3, r6, r4
 800f956:	3b15      	subs	r3, #21
 800f958:	f023 0303 	bic.w	r3, r3, #3
 800f95c:	3415      	adds	r4, #21
 800f95e:	3304      	adds	r3, #4
 800f960:	42a6      	cmp	r6, r4
 800f962:	bf38      	it	cc
 800f964:	2304      	movcc	r3, #4
 800f966:	441d      	add	r5, r3
 800f968:	445b      	add	r3, fp
 800f96a:	461e      	mov	r6, r3
 800f96c:	462c      	mov	r4, r5
 800f96e:	4544      	cmp	r4, r8
 800f970:	d30e      	bcc.n	800f990 <__mdiff+0xf8>
 800f972:	f108 0103 	add.w	r1, r8, #3
 800f976:	1b49      	subs	r1, r1, r5
 800f978:	f021 0103 	bic.w	r1, r1, #3
 800f97c:	3d03      	subs	r5, #3
 800f97e:	45a8      	cmp	r8, r5
 800f980:	bf38      	it	cc
 800f982:	2100      	movcc	r1, #0
 800f984:	440b      	add	r3, r1
 800f986:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f98a:	b191      	cbz	r1, 800f9b2 <__mdiff+0x11a>
 800f98c:	6117      	str	r7, [r2, #16]
 800f98e:	e79d      	b.n	800f8cc <__mdiff+0x34>
 800f990:	f854 1b04 	ldr.w	r1, [r4], #4
 800f994:	46e6      	mov	lr, ip
 800f996:	0c08      	lsrs	r0, r1, #16
 800f998:	fa1c fc81 	uxtah	ip, ip, r1
 800f99c:	4471      	add	r1, lr
 800f99e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f9a2:	b289      	uxth	r1, r1
 800f9a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f9a8:	f846 1b04 	str.w	r1, [r6], #4
 800f9ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f9b0:	e7dd      	b.n	800f96e <__mdiff+0xd6>
 800f9b2:	3f01      	subs	r7, #1
 800f9b4:	e7e7      	b.n	800f986 <__mdiff+0xee>
 800f9b6:	bf00      	nop
 800f9b8:	08011f3e 	.word	0x08011f3e
 800f9bc:	08011faf 	.word	0x08011faf

0800f9c0 <__ulp>:
 800f9c0:	b082      	sub	sp, #8
 800f9c2:	ed8d 0b00 	vstr	d0, [sp]
 800f9c6:	9a01      	ldr	r2, [sp, #4]
 800f9c8:	4b0f      	ldr	r3, [pc, #60]	@ (800fa08 <__ulp+0x48>)
 800f9ca:	4013      	ands	r3, r2
 800f9cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	dc08      	bgt.n	800f9e6 <__ulp+0x26>
 800f9d4:	425b      	negs	r3, r3
 800f9d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f9da:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f9de:	da04      	bge.n	800f9ea <__ulp+0x2a>
 800f9e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f9e4:	4113      	asrs	r3, r2
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	e008      	b.n	800f9fc <__ulp+0x3c>
 800f9ea:	f1a2 0314 	sub.w	r3, r2, #20
 800f9ee:	2b1e      	cmp	r3, #30
 800f9f0:	bfda      	itte	le
 800f9f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f9f6:	40da      	lsrle	r2, r3
 800f9f8:	2201      	movgt	r2, #1
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	4619      	mov	r1, r3
 800f9fe:	4610      	mov	r0, r2
 800fa00:	ec41 0b10 	vmov	d0, r0, r1
 800fa04:	b002      	add	sp, #8
 800fa06:	4770      	bx	lr
 800fa08:	7ff00000 	.word	0x7ff00000

0800fa0c <__b2d>:
 800fa0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa10:	6906      	ldr	r6, [r0, #16]
 800fa12:	f100 0814 	add.w	r8, r0, #20
 800fa16:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fa1a:	1f37      	subs	r7, r6, #4
 800fa1c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fa20:	4610      	mov	r0, r2
 800fa22:	f7ff fd53 	bl	800f4cc <__hi0bits>
 800fa26:	f1c0 0320 	rsb	r3, r0, #32
 800fa2a:	280a      	cmp	r0, #10
 800fa2c:	600b      	str	r3, [r1, #0]
 800fa2e:	491b      	ldr	r1, [pc, #108]	@ (800fa9c <__b2d+0x90>)
 800fa30:	dc15      	bgt.n	800fa5e <__b2d+0x52>
 800fa32:	f1c0 0c0b 	rsb	ip, r0, #11
 800fa36:	fa22 f30c 	lsr.w	r3, r2, ip
 800fa3a:	45b8      	cmp	r8, r7
 800fa3c:	ea43 0501 	orr.w	r5, r3, r1
 800fa40:	bf34      	ite	cc
 800fa42:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fa46:	2300      	movcs	r3, #0
 800fa48:	3015      	adds	r0, #21
 800fa4a:	fa02 f000 	lsl.w	r0, r2, r0
 800fa4e:	fa23 f30c 	lsr.w	r3, r3, ip
 800fa52:	4303      	orrs	r3, r0
 800fa54:	461c      	mov	r4, r3
 800fa56:	ec45 4b10 	vmov	d0, r4, r5
 800fa5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa5e:	45b8      	cmp	r8, r7
 800fa60:	bf3a      	itte	cc
 800fa62:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fa66:	f1a6 0708 	subcc.w	r7, r6, #8
 800fa6a:	2300      	movcs	r3, #0
 800fa6c:	380b      	subs	r0, #11
 800fa6e:	d012      	beq.n	800fa96 <__b2d+0x8a>
 800fa70:	f1c0 0120 	rsb	r1, r0, #32
 800fa74:	fa23 f401 	lsr.w	r4, r3, r1
 800fa78:	4082      	lsls	r2, r0
 800fa7a:	4322      	orrs	r2, r4
 800fa7c:	4547      	cmp	r7, r8
 800fa7e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800fa82:	bf8c      	ite	hi
 800fa84:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fa88:	2200      	movls	r2, #0
 800fa8a:	4083      	lsls	r3, r0
 800fa8c:	40ca      	lsrs	r2, r1
 800fa8e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800fa92:	4313      	orrs	r3, r2
 800fa94:	e7de      	b.n	800fa54 <__b2d+0x48>
 800fa96:	ea42 0501 	orr.w	r5, r2, r1
 800fa9a:	e7db      	b.n	800fa54 <__b2d+0x48>
 800fa9c:	3ff00000 	.word	0x3ff00000

0800faa0 <__d2b>:
 800faa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800faa4:	460f      	mov	r7, r1
 800faa6:	2101      	movs	r1, #1
 800faa8:	ec59 8b10 	vmov	r8, r9, d0
 800faac:	4616      	mov	r6, r2
 800faae:	f7ff fc1b 	bl	800f2e8 <_Balloc>
 800fab2:	4604      	mov	r4, r0
 800fab4:	b930      	cbnz	r0, 800fac4 <__d2b+0x24>
 800fab6:	4602      	mov	r2, r0
 800fab8:	4b23      	ldr	r3, [pc, #140]	@ (800fb48 <__d2b+0xa8>)
 800faba:	4824      	ldr	r0, [pc, #144]	@ (800fb4c <__d2b+0xac>)
 800fabc:	f240 310f 	movw	r1, #783	@ 0x30f
 800fac0:	f000 fcd8 	bl	8010474 <__assert_func>
 800fac4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fac8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800facc:	b10d      	cbz	r5, 800fad2 <__d2b+0x32>
 800face:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fad2:	9301      	str	r3, [sp, #4]
 800fad4:	f1b8 0300 	subs.w	r3, r8, #0
 800fad8:	d023      	beq.n	800fb22 <__d2b+0x82>
 800fada:	4668      	mov	r0, sp
 800fadc:	9300      	str	r3, [sp, #0]
 800fade:	f7ff fd14 	bl	800f50a <__lo0bits>
 800fae2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fae6:	b1d0      	cbz	r0, 800fb1e <__d2b+0x7e>
 800fae8:	f1c0 0320 	rsb	r3, r0, #32
 800faec:	fa02 f303 	lsl.w	r3, r2, r3
 800faf0:	430b      	orrs	r3, r1
 800faf2:	40c2      	lsrs	r2, r0
 800faf4:	6163      	str	r3, [r4, #20]
 800faf6:	9201      	str	r2, [sp, #4]
 800faf8:	9b01      	ldr	r3, [sp, #4]
 800fafa:	61a3      	str	r3, [r4, #24]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	bf0c      	ite	eq
 800fb00:	2201      	moveq	r2, #1
 800fb02:	2202      	movne	r2, #2
 800fb04:	6122      	str	r2, [r4, #16]
 800fb06:	b1a5      	cbz	r5, 800fb32 <__d2b+0x92>
 800fb08:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fb0c:	4405      	add	r5, r0
 800fb0e:	603d      	str	r5, [r7, #0]
 800fb10:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fb14:	6030      	str	r0, [r6, #0]
 800fb16:	4620      	mov	r0, r4
 800fb18:	b003      	add	sp, #12
 800fb1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb1e:	6161      	str	r1, [r4, #20]
 800fb20:	e7ea      	b.n	800faf8 <__d2b+0x58>
 800fb22:	a801      	add	r0, sp, #4
 800fb24:	f7ff fcf1 	bl	800f50a <__lo0bits>
 800fb28:	9b01      	ldr	r3, [sp, #4]
 800fb2a:	6163      	str	r3, [r4, #20]
 800fb2c:	3020      	adds	r0, #32
 800fb2e:	2201      	movs	r2, #1
 800fb30:	e7e8      	b.n	800fb04 <__d2b+0x64>
 800fb32:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fb36:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fb3a:	6038      	str	r0, [r7, #0]
 800fb3c:	6918      	ldr	r0, [r3, #16]
 800fb3e:	f7ff fcc5 	bl	800f4cc <__hi0bits>
 800fb42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fb46:	e7e5      	b.n	800fb14 <__d2b+0x74>
 800fb48:	08011f3e 	.word	0x08011f3e
 800fb4c:	08011faf 	.word	0x08011faf

0800fb50 <__ratio>:
 800fb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb54:	b085      	sub	sp, #20
 800fb56:	e9cd 1000 	strd	r1, r0, [sp]
 800fb5a:	a902      	add	r1, sp, #8
 800fb5c:	f7ff ff56 	bl	800fa0c <__b2d>
 800fb60:	9800      	ldr	r0, [sp, #0]
 800fb62:	a903      	add	r1, sp, #12
 800fb64:	ec55 4b10 	vmov	r4, r5, d0
 800fb68:	f7ff ff50 	bl	800fa0c <__b2d>
 800fb6c:	9b01      	ldr	r3, [sp, #4]
 800fb6e:	6919      	ldr	r1, [r3, #16]
 800fb70:	9b00      	ldr	r3, [sp, #0]
 800fb72:	691b      	ldr	r3, [r3, #16]
 800fb74:	1ac9      	subs	r1, r1, r3
 800fb76:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fb7a:	1a9b      	subs	r3, r3, r2
 800fb7c:	ec5b ab10 	vmov	sl, fp, d0
 800fb80:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	bfce      	itee	gt
 800fb88:	462a      	movgt	r2, r5
 800fb8a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fb8e:	465a      	movle	r2, fp
 800fb90:	462f      	mov	r7, r5
 800fb92:	46d9      	mov	r9, fp
 800fb94:	bfcc      	ite	gt
 800fb96:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fb9a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800fb9e:	464b      	mov	r3, r9
 800fba0:	4652      	mov	r2, sl
 800fba2:	4620      	mov	r0, r4
 800fba4:	4639      	mov	r1, r7
 800fba6:	f7f0 fe81 	bl	80008ac <__aeabi_ddiv>
 800fbaa:	ec41 0b10 	vmov	d0, r0, r1
 800fbae:	b005      	add	sp, #20
 800fbb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fbb4 <__copybits>:
 800fbb4:	3901      	subs	r1, #1
 800fbb6:	b570      	push	{r4, r5, r6, lr}
 800fbb8:	1149      	asrs	r1, r1, #5
 800fbba:	6914      	ldr	r4, [r2, #16]
 800fbbc:	3101      	adds	r1, #1
 800fbbe:	f102 0314 	add.w	r3, r2, #20
 800fbc2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fbc6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fbca:	1f05      	subs	r5, r0, #4
 800fbcc:	42a3      	cmp	r3, r4
 800fbce:	d30c      	bcc.n	800fbea <__copybits+0x36>
 800fbd0:	1aa3      	subs	r3, r4, r2
 800fbd2:	3b11      	subs	r3, #17
 800fbd4:	f023 0303 	bic.w	r3, r3, #3
 800fbd8:	3211      	adds	r2, #17
 800fbda:	42a2      	cmp	r2, r4
 800fbdc:	bf88      	it	hi
 800fbde:	2300      	movhi	r3, #0
 800fbe0:	4418      	add	r0, r3
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	4288      	cmp	r0, r1
 800fbe6:	d305      	bcc.n	800fbf4 <__copybits+0x40>
 800fbe8:	bd70      	pop	{r4, r5, r6, pc}
 800fbea:	f853 6b04 	ldr.w	r6, [r3], #4
 800fbee:	f845 6f04 	str.w	r6, [r5, #4]!
 800fbf2:	e7eb      	b.n	800fbcc <__copybits+0x18>
 800fbf4:	f840 3b04 	str.w	r3, [r0], #4
 800fbf8:	e7f4      	b.n	800fbe4 <__copybits+0x30>

0800fbfa <__any_on>:
 800fbfa:	f100 0214 	add.w	r2, r0, #20
 800fbfe:	6900      	ldr	r0, [r0, #16]
 800fc00:	114b      	asrs	r3, r1, #5
 800fc02:	4298      	cmp	r0, r3
 800fc04:	b510      	push	{r4, lr}
 800fc06:	db11      	blt.n	800fc2c <__any_on+0x32>
 800fc08:	dd0a      	ble.n	800fc20 <__any_on+0x26>
 800fc0a:	f011 011f 	ands.w	r1, r1, #31
 800fc0e:	d007      	beq.n	800fc20 <__any_on+0x26>
 800fc10:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fc14:	fa24 f001 	lsr.w	r0, r4, r1
 800fc18:	fa00 f101 	lsl.w	r1, r0, r1
 800fc1c:	428c      	cmp	r4, r1
 800fc1e:	d10b      	bne.n	800fc38 <__any_on+0x3e>
 800fc20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fc24:	4293      	cmp	r3, r2
 800fc26:	d803      	bhi.n	800fc30 <__any_on+0x36>
 800fc28:	2000      	movs	r0, #0
 800fc2a:	bd10      	pop	{r4, pc}
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	e7f7      	b.n	800fc20 <__any_on+0x26>
 800fc30:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fc34:	2900      	cmp	r1, #0
 800fc36:	d0f5      	beq.n	800fc24 <__any_on+0x2a>
 800fc38:	2001      	movs	r0, #1
 800fc3a:	e7f6      	b.n	800fc2a <__any_on+0x30>

0800fc3c <__ascii_wctomb>:
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	4608      	mov	r0, r1
 800fc40:	b141      	cbz	r1, 800fc54 <__ascii_wctomb+0x18>
 800fc42:	2aff      	cmp	r2, #255	@ 0xff
 800fc44:	d904      	bls.n	800fc50 <__ascii_wctomb+0x14>
 800fc46:	228a      	movs	r2, #138	@ 0x8a
 800fc48:	601a      	str	r2, [r3, #0]
 800fc4a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc4e:	4770      	bx	lr
 800fc50:	700a      	strb	r2, [r1, #0]
 800fc52:	2001      	movs	r0, #1
 800fc54:	4770      	bx	lr

0800fc56 <__ssputs_r>:
 800fc56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc5a:	688e      	ldr	r6, [r1, #8]
 800fc5c:	461f      	mov	r7, r3
 800fc5e:	42be      	cmp	r6, r7
 800fc60:	680b      	ldr	r3, [r1, #0]
 800fc62:	4682      	mov	sl, r0
 800fc64:	460c      	mov	r4, r1
 800fc66:	4690      	mov	r8, r2
 800fc68:	d82d      	bhi.n	800fcc6 <__ssputs_r+0x70>
 800fc6a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fc6e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fc72:	d026      	beq.n	800fcc2 <__ssputs_r+0x6c>
 800fc74:	6965      	ldr	r5, [r4, #20]
 800fc76:	6909      	ldr	r1, [r1, #16]
 800fc78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc7c:	eba3 0901 	sub.w	r9, r3, r1
 800fc80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc84:	1c7b      	adds	r3, r7, #1
 800fc86:	444b      	add	r3, r9
 800fc88:	106d      	asrs	r5, r5, #1
 800fc8a:	429d      	cmp	r5, r3
 800fc8c:	bf38      	it	cc
 800fc8e:	461d      	movcc	r5, r3
 800fc90:	0553      	lsls	r3, r2, #21
 800fc92:	d527      	bpl.n	800fce4 <__ssputs_r+0x8e>
 800fc94:	4629      	mov	r1, r5
 800fc96:	f7ff fa89 	bl	800f1ac <_malloc_r>
 800fc9a:	4606      	mov	r6, r0
 800fc9c:	b360      	cbz	r0, 800fcf8 <__ssputs_r+0xa2>
 800fc9e:	6921      	ldr	r1, [r4, #16]
 800fca0:	464a      	mov	r2, r9
 800fca2:	f7fe f82c 	bl	800dcfe <memcpy>
 800fca6:	89a3      	ldrh	r3, [r4, #12]
 800fca8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fcac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fcb0:	81a3      	strh	r3, [r4, #12]
 800fcb2:	6126      	str	r6, [r4, #16]
 800fcb4:	6165      	str	r5, [r4, #20]
 800fcb6:	444e      	add	r6, r9
 800fcb8:	eba5 0509 	sub.w	r5, r5, r9
 800fcbc:	6026      	str	r6, [r4, #0]
 800fcbe:	60a5      	str	r5, [r4, #8]
 800fcc0:	463e      	mov	r6, r7
 800fcc2:	42be      	cmp	r6, r7
 800fcc4:	d900      	bls.n	800fcc8 <__ssputs_r+0x72>
 800fcc6:	463e      	mov	r6, r7
 800fcc8:	6820      	ldr	r0, [r4, #0]
 800fcca:	4632      	mov	r2, r6
 800fccc:	4641      	mov	r1, r8
 800fcce:	f000 fb69 	bl	80103a4 <memmove>
 800fcd2:	68a3      	ldr	r3, [r4, #8]
 800fcd4:	1b9b      	subs	r3, r3, r6
 800fcd6:	60a3      	str	r3, [r4, #8]
 800fcd8:	6823      	ldr	r3, [r4, #0]
 800fcda:	4433      	add	r3, r6
 800fcdc:	6023      	str	r3, [r4, #0]
 800fcde:	2000      	movs	r0, #0
 800fce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fce4:	462a      	mov	r2, r5
 800fce6:	f000 fbf7 	bl	80104d8 <_realloc_r>
 800fcea:	4606      	mov	r6, r0
 800fcec:	2800      	cmp	r0, #0
 800fcee:	d1e0      	bne.n	800fcb2 <__ssputs_r+0x5c>
 800fcf0:	6921      	ldr	r1, [r4, #16]
 800fcf2:	4650      	mov	r0, sl
 800fcf4:	f7fe feac 	bl	800ea50 <_free_r>
 800fcf8:	230c      	movs	r3, #12
 800fcfa:	f8ca 3000 	str.w	r3, [sl]
 800fcfe:	89a3      	ldrh	r3, [r4, #12]
 800fd00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd04:	81a3      	strh	r3, [r4, #12]
 800fd06:	f04f 30ff 	mov.w	r0, #4294967295
 800fd0a:	e7e9      	b.n	800fce0 <__ssputs_r+0x8a>

0800fd0c <_svfiprintf_r>:
 800fd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd10:	4698      	mov	r8, r3
 800fd12:	898b      	ldrh	r3, [r1, #12]
 800fd14:	061b      	lsls	r3, r3, #24
 800fd16:	b09d      	sub	sp, #116	@ 0x74
 800fd18:	4607      	mov	r7, r0
 800fd1a:	460d      	mov	r5, r1
 800fd1c:	4614      	mov	r4, r2
 800fd1e:	d510      	bpl.n	800fd42 <_svfiprintf_r+0x36>
 800fd20:	690b      	ldr	r3, [r1, #16]
 800fd22:	b973      	cbnz	r3, 800fd42 <_svfiprintf_r+0x36>
 800fd24:	2140      	movs	r1, #64	@ 0x40
 800fd26:	f7ff fa41 	bl	800f1ac <_malloc_r>
 800fd2a:	6028      	str	r0, [r5, #0]
 800fd2c:	6128      	str	r0, [r5, #16]
 800fd2e:	b930      	cbnz	r0, 800fd3e <_svfiprintf_r+0x32>
 800fd30:	230c      	movs	r3, #12
 800fd32:	603b      	str	r3, [r7, #0]
 800fd34:	f04f 30ff 	mov.w	r0, #4294967295
 800fd38:	b01d      	add	sp, #116	@ 0x74
 800fd3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd3e:	2340      	movs	r3, #64	@ 0x40
 800fd40:	616b      	str	r3, [r5, #20]
 800fd42:	2300      	movs	r3, #0
 800fd44:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd46:	2320      	movs	r3, #32
 800fd48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fd4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd50:	2330      	movs	r3, #48	@ 0x30
 800fd52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fef0 <_svfiprintf_r+0x1e4>
 800fd56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fd5a:	f04f 0901 	mov.w	r9, #1
 800fd5e:	4623      	mov	r3, r4
 800fd60:	469a      	mov	sl, r3
 800fd62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd66:	b10a      	cbz	r2, 800fd6c <_svfiprintf_r+0x60>
 800fd68:	2a25      	cmp	r2, #37	@ 0x25
 800fd6a:	d1f9      	bne.n	800fd60 <_svfiprintf_r+0x54>
 800fd6c:	ebba 0b04 	subs.w	fp, sl, r4
 800fd70:	d00b      	beq.n	800fd8a <_svfiprintf_r+0x7e>
 800fd72:	465b      	mov	r3, fp
 800fd74:	4622      	mov	r2, r4
 800fd76:	4629      	mov	r1, r5
 800fd78:	4638      	mov	r0, r7
 800fd7a:	f7ff ff6c 	bl	800fc56 <__ssputs_r>
 800fd7e:	3001      	adds	r0, #1
 800fd80:	f000 80a7 	beq.w	800fed2 <_svfiprintf_r+0x1c6>
 800fd84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd86:	445a      	add	r2, fp
 800fd88:	9209      	str	r2, [sp, #36]	@ 0x24
 800fd8a:	f89a 3000 	ldrb.w	r3, [sl]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	f000 809f 	beq.w	800fed2 <_svfiprintf_r+0x1c6>
 800fd94:	2300      	movs	r3, #0
 800fd96:	f04f 32ff 	mov.w	r2, #4294967295
 800fd9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd9e:	f10a 0a01 	add.w	sl, sl, #1
 800fda2:	9304      	str	r3, [sp, #16]
 800fda4:	9307      	str	r3, [sp, #28]
 800fda6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fdaa:	931a      	str	r3, [sp, #104]	@ 0x68
 800fdac:	4654      	mov	r4, sl
 800fdae:	2205      	movs	r2, #5
 800fdb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdb4:	484e      	ldr	r0, [pc, #312]	@ (800fef0 <_svfiprintf_r+0x1e4>)
 800fdb6:	f7f0 fa3b 	bl	8000230 <memchr>
 800fdba:	9a04      	ldr	r2, [sp, #16]
 800fdbc:	b9d8      	cbnz	r0, 800fdf6 <_svfiprintf_r+0xea>
 800fdbe:	06d0      	lsls	r0, r2, #27
 800fdc0:	bf44      	itt	mi
 800fdc2:	2320      	movmi	r3, #32
 800fdc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fdc8:	0711      	lsls	r1, r2, #28
 800fdca:	bf44      	itt	mi
 800fdcc:	232b      	movmi	r3, #43	@ 0x2b
 800fdce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fdd2:	f89a 3000 	ldrb.w	r3, [sl]
 800fdd6:	2b2a      	cmp	r3, #42	@ 0x2a
 800fdd8:	d015      	beq.n	800fe06 <_svfiprintf_r+0xfa>
 800fdda:	9a07      	ldr	r2, [sp, #28]
 800fddc:	4654      	mov	r4, sl
 800fdde:	2000      	movs	r0, #0
 800fde0:	f04f 0c0a 	mov.w	ip, #10
 800fde4:	4621      	mov	r1, r4
 800fde6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fdea:	3b30      	subs	r3, #48	@ 0x30
 800fdec:	2b09      	cmp	r3, #9
 800fdee:	d94b      	bls.n	800fe88 <_svfiprintf_r+0x17c>
 800fdf0:	b1b0      	cbz	r0, 800fe20 <_svfiprintf_r+0x114>
 800fdf2:	9207      	str	r2, [sp, #28]
 800fdf4:	e014      	b.n	800fe20 <_svfiprintf_r+0x114>
 800fdf6:	eba0 0308 	sub.w	r3, r0, r8
 800fdfa:	fa09 f303 	lsl.w	r3, r9, r3
 800fdfe:	4313      	orrs	r3, r2
 800fe00:	9304      	str	r3, [sp, #16]
 800fe02:	46a2      	mov	sl, r4
 800fe04:	e7d2      	b.n	800fdac <_svfiprintf_r+0xa0>
 800fe06:	9b03      	ldr	r3, [sp, #12]
 800fe08:	1d19      	adds	r1, r3, #4
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	9103      	str	r1, [sp, #12]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	bfbb      	ittet	lt
 800fe12:	425b      	neglt	r3, r3
 800fe14:	f042 0202 	orrlt.w	r2, r2, #2
 800fe18:	9307      	strge	r3, [sp, #28]
 800fe1a:	9307      	strlt	r3, [sp, #28]
 800fe1c:	bfb8      	it	lt
 800fe1e:	9204      	strlt	r2, [sp, #16]
 800fe20:	7823      	ldrb	r3, [r4, #0]
 800fe22:	2b2e      	cmp	r3, #46	@ 0x2e
 800fe24:	d10a      	bne.n	800fe3c <_svfiprintf_r+0x130>
 800fe26:	7863      	ldrb	r3, [r4, #1]
 800fe28:	2b2a      	cmp	r3, #42	@ 0x2a
 800fe2a:	d132      	bne.n	800fe92 <_svfiprintf_r+0x186>
 800fe2c:	9b03      	ldr	r3, [sp, #12]
 800fe2e:	1d1a      	adds	r2, r3, #4
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	9203      	str	r2, [sp, #12]
 800fe34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fe38:	3402      	adds	r4, #2
 800fe3a:	9305      	str	r3, [sp, #20]
 800fe3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ff00 <_svfiprintf_r+0x1f4>
 800fe40:	7821      	ldrb	r1, [r4, #0]
 800fe42:	2203      	movs	r2, #3
 800fe44:	4650      	mov	r0, sl
 800fe46:	f7f0 f9f3 	bl	8000230 <memchr>
 800fe4a:	b138      	cbz	r0, 800fe5c <_svfiprintf_r+0x150>
 800fe4c:	9b04      	ldr	r3, [sp, #16]
 800fe4e:	eba0 000a 	sub.w	r0, r0, sl
 800fe52:	2240      	movs	r2, #64	@ 0x40
 800fe54:	4082      	lsls	r2, r0
 800fe56:	4313      	orrs	r3, r2
 800fe58:	3401      	adds	r4, #1
 800fe5a:	9304      	str	r3, [sp, #16]
 800fe5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe60:	4824      	ldr	r0, [pc, #144]	@ (800fef4 <_svfiprintf_r+0x1e8>)
 800fe62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fe66:	2206      	movs	r2, #6
 800fe68:	f7f0 f9e2 	bl	8000230 <memchr>
 800fe6c:	2800      	cmp	r0, #0
 800fe6e:	d036      	beq.n	800fede <_svfiprintf_r+0x1d2>
 800fe70:	4b21      	ldr	r3, [pc, #132]	@ (800fef8 <_svfiprintf_r+0x1ec>)
 800fe72:	bb1b      	cbnz	r3, 800febc <_svfiprintf_r+0x1b0>
 800fe74:	9b03      	ldr	r3, [sp, #12]
 800fe76:	3307      	adds	r3, #7
 800fe78:	f023 0307 	bic.w	r3, r3, #7
 800fe7c:	3308      	adds	r3, #8
 800fe7e:	9303      	str	r3, [sp, #12]
 800fe80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe82:	4433      	add	r3, r6
 800fe84:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe86:	e76a      	b.n	800fd5e <_svfiprintf_r+0x52>
 800fe88:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe8c:	460c      	mov	r4, r1
 800fe8e:	2001      	movs	r0, #1
 800fe90:	e7a8      	b.n	800fde4 <_svfiprintf_r+0xd8>
 800fe92:	2300      	movs	r3, #0
 800fe94:	3401      	adds	r4, #1
 800fe96:	9305      	str	r3, [sp, #20]
 800fe98:	4619      	mov	r1, r3
 800fe9a:	f04f 0c0a 	mov.w	ip, #10
 800fe9e:	4620      	mov	r0, r4
 800fea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fea4:	3a30      	subs	r2, #48	@ 0x30
 800fea6:	2a09      	cmp	r2, #9
 800fea8:	d903      	bls.n	800feb2 <_svfiprintf_r+0x1a6>
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d0c6      	beq.n	800fe3c <_svfiprintf_r+0x130>
 800feae:	9105      	str	r1, [sp, #20]
 800feb0:	e7c4      	b.n	800fe3c <_svfiprintf_r+0x130>
 800feb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800feb6:	4604      	mov	r4, r0
 800feb8:	2301      	movs	r3, #1
 800feba:	e7f0      	b.n	800fe9e <_svfiprintf_r+0x192>
 800febc:	ab03      	add	r3, sp, #12
 800febe:	9300      	str	r3, [sp, #0]
 800fec0:	462a      	mov	r2, r5
 800fec2:	4b0e      	ldr	r3, [pc, #56]	@ (800fefc <_svfiprintf_r+0x1f0>)
 800fec4:	a904      	add	r1, sp, #16
 800fec6:	4638      	mov	r0, r7
 800fec8:	f7fd f8a6 	bl	800d018 <_printf_float>
 800fecc:	1c42      	adds	r2, r0, #1
 800fece:	4606      	mov	r6, r0
 800fed0:	d1d6      	bne.n	800fe80 <_svfiprintf_r+0x174>
 800fed2:	89ab      	ldrh	r3, [r5, #12]
 800fed4:	065b      	lsls	r3, r3, #25
 800fed6:	f53f af2d 	bmi.w	800fd34 <_svfiprintf_r+0x28>
 800feda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fedc:	e72c      	b.n	800fd38 <_svfiprintf_r+0x2c>
 800fede:	ab03      	add	r3, sp, #12
 800fee0:	9300      	str	r3, [sp, #0]
 800fee2:	462a      	mov	r2, r5
 800fee4:	4b05      	ldr	r3, [pc, #20]	@ (800fefc <_svfiprintf_r+0x1f0>)
 800fee6:	a904      	add	r1, sp, #16
 800fee8:	4638      	mov	r0, r7
 800feea:	f7fd fb2d 	bl	800d548 <_printf_i>
 800feee:	e7ed      	b.n	800fecc <_svfiprintf_r+0x1c0>
 800fef0:	08012008 	.word	0x08012008
 800fef4:	08012012 	.word	0x08012012
 800fef8:	0800d019 	.word	0x0800d019
 800fefc:	0800fc57 	.word	0x0800fc57
 800ff00:	0801200e 	.word	0x0801200e

0800ff04 <__sfputc_r>:
 800ff04:	6893      	ldr	r3, [r2, #8]
 800ff06:	3b01      	subs	r3, #1
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	b410      	push	{r4}
 800ff0c:	6093      	str	r3, [r2, #8]
 800ff0e:	da08      	bge.n	800ff22 <__sfputc_r+0x1e>
 800ff10:	6994      	ldr	r4, [r2, #24]
 800ff12:	42a3      	cmp	r3, r4
 800ff14:	db01      	blt.n	800ff1a <__sfputc_r+0x16>
 800ff16:	290a      	cmp	r1, #10
 800ff18:	d103      	bne.n	800ff22 <__sfputc_r+0x1e>
 800ff1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff1e:	f7fd bdc8 	b.w	800dab2 <__swbuf_r>
 800ff22:	6813      	ldr	r3, [r2, #0]
 800ff24:	1c58      	adds	r0, r3, #1
 800ff26:	6010      	str	r0, [r2, #0]
 800ff28:	7019      	strb	r1, [r3, #0]
 800ff2a:	4608      	mov	r0, r1
 800ff2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff30:	4770      	bx	lr

0800ff32 <__sfputs_r>:
 800ff32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff34:	4606      	mov	r6, r0
 800ff36:	460f      	mov	r7, r1
 800ff38:	4614      	mov	r4, r2
 800ff3a:	18d5      	adds	r5, r2, r3
 800ff3c:	42ac      	cmp	r4, r5
 800ff3e:	d101      	bne.n	800ff44 <__sfputs_r+0x12>
 800ff40:	2000      	movs	r0, #0
 800ff42:	e007      	b.n	800ff54 <__sfputs_r+0x22>
 800ff44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff48:	463a      	mov	r2, r7
 800ff4a:	4630      	mov	r0, r6
 800ff4c:	f7ff ffda 	bl	800ff04 <__sfputc_r>
 800ff50:	1c43      	adds	r3, r0, #1
 800ff52:	d1f3      	bne.n	800ff3c <__sfputs_r+0xa>
 800ff54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ff58 <_vfiprintf_r>:
 800ff58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff5c:	460d      	mov	r5, r1
 800ff5e:	b09d      	sub	sp, #116	@ 0x74
 800ff60:	4614      	mov	r4, r2
 800ff62:	4698      	mov	r8, r3
 800ff64:	4606      	mov	r6, r0
 800ff66:	b118      	cbz	r0, 800ff70 <_vfiprintf_r+0x18>
 800ff68:	6a03      	ldr	r3, [r0, #32]
 800ff6a:	b90b      	cbnz	r3, 800ff70 <_vfiprintf_r+0x18>
 800ff6c:	f7fd fc96 	bl	800d89c <__sinit>
 800ff70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ff72:	07d9      	lsls	r1, r3, #31
 800ff74:	d405      	bmi.n	800ff82 <_vfiprintf_r+0x2a>
 800ff76:	89ab      	ldrh	r3, [r5, #12]
 800ff78:	059a      	lsls	r2, r3, #22
 800ff7a:	d402      	bmi.n	800ff82 <_vfiprintf_r+0x2a>
 800ff7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ff7e:	f7fd febc 	bl	800dcfa <__retarget_lock_acquire_recursive>
 800ff82:	89ab      	ldrh	r3, [r5, #12]
 800ff84:	071b      	lsls	r3, r3, #28
 800ff86:	d501      	bpl.n	800ff8c <_vfiprintf_r+0x34>
 800ff88:	692b      	ldr	r3, [r5, #16]
 800ff8a:	b99b      	cbnz	r3, 800ffb4 <_vfiprintf_r+0x5c>
 800ff8c:	4629      	mov	r1, r5
 800ff8e:	4630      	mov	r0, r6
 800ff90:	f7fd fdce 	bl	800db30 <__swsetup_r>
 800ff94:	b170      	cbz	r0, 800ffb4 <_vfiprintf_r+0x5c>
 800ff96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ff98:	07dc      	lsls	r4, r3, #31
 800ff9a:	d504      	bpl.n	800ffa6 <_vfiprintf_r+0x4e>
 800ff9c:	f04f 30ff 	mov.w	r0, #4294967295
 800ffa0:	b01d      	add	sp, #116	@ 0x74
 800ffa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffa6:	89ab      	ldrh	r3, [r5, #12]
 800ffa8:	0598      	lsls	r0, r3, #22
 800ffaa:	d4f7      	bmi.n	800ff9c <_vfiprintf_r+0x44>
 800ffac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ffae:	f7fd fea5 	bl	800dcfc <__retarget_lock_release_recursive>
 800ffb2:	e7f3      	b.n	800ff9c <_vfiprintf_r+0x44>
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800ffb8:	2320      	movs	r3, #32
 800ffba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ffbe:	f8cd 800c 	str.w	r8, [sp, #12]
 800ffc2:	2330      	movs	r3, #48	@ 0x30
 800ffc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010174 <_vfiprintf_r+0x21c>
 800ffc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ffcc:	f04f 0901 	mov.w	r9, #1
 800ffd0:	4623      	mov	r3, r4
 800ffd2:	469a      	mov	sl, r3
 800ffd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffd8:	b10a      	cbz	r2, 800ffde <_vfiprintf_r+0x86>
 800ffda:	2a25      	cmp	r2, #37	@ 0x25
 800ffdc:	d1f9      	bne.n	800ffd2 <_vfiprintf_r+0x7a>
 800ffde:	ebba 0b04 	subs.w	fp, sl, r4
 800ffe2:	d00b      	beq.n	800fffc <_vfiprintf_r+0xa4>
 800ffe4:	465b      	mov	r3, fp
 800ffe6:	4622      	mov	r2, r4
 800ffe8:	4629      	mov	r1, r5
 800ffea:	4630      	mov	r0, r6
 800ffec:	f7ff ffa1 	bl	800ff32 <__sfputs_r>
 800fff0:	3001      	adds	r0, #1
 800fff2:	f000 80a7 	beq.w	8010144 <_vfiprintf_r+0x1ec>
 800fff6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fff8:	445a      	add	r2, fp
 800fffa:	9209      	str	r2, [sp, #36]	@ 0x24
 800fffc:	f89a 3000 	ldrb.w	r3, [sl]
 8010000:	2b00      	cmp	r3, #0
 8010002:	f000 809f 	beq.w	8010144 <_vfiprintf_r+0x1ec>
 8010006:	2300      	movs	r3, #0
 8010008:	f04f 32ff 	mov.w	r2, #4294967295
 801000c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010010:	f10a 0a01 	add.w	sl, sl, #1
 8010014:	9304      	str	r3, [sp, #16]
 8010016:	9307      	str	r3, [sp, #28]
 8010018:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801001c:	931a      	str	r3, [sp, #104]	@ 0x68
 801001e:	4654      	mov	r4, sl
 8010020:	2205      	movs	r2, #5
 8010022:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010026:	4853      	ldr	r0, [pc, #332]	@ (8010174 <_vfiprintf_r+0x21c>)
 8010028:	f7f0 f902 	bl	8000230 <memchr>
 801002c:	9a04      	ldr	r2, [sp, #16]
 801002e:	b9d8      	cbnz	r0, 8010068 <_vfiprintf_r+0x110>
 8010030:	06d1      	lsls	r1, r2, #27
 8010032:	bf44      	itt	mi
 8010034:	2320      	movmi	r3, #32
 8010036:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801003a:	0713      	lsls	r3, r2, #28
 801003c:	bf44      	itt	mi
 801003e:	232b      	movmi	r3, #43	@ 0x2b
 8010040:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010044:	f89a 3000 	ldrb.w	r3, [sl]
 8010048:	2b2a      	cmp	r3, #42	@ 0x2a
 801004a:	d015      	beq.n	8010078 <_vfiprintf_r+0x120>
 801004c:	9a07      	ldr	r2, [sp, #28]
 801004e:	4654      	mov	r4, sl
 8010050:	2000      	movs	r0, #0
 8010052:	f04f 0c0a 	mov.w	ip, #10
 8010056:	4621      	mov	r1, r4
 8010058:	f811 3b01 	ldrb.w	r3, [r1], #1
 801005c:	3b30      	subs	r3, #48	@ 0x30
 801005e:	2b09      	cmp	r3, #9
 8010060:	d94b      	bls.n	80100fa <_vfiprintf_r+0x1a2>
 8010062:	b1b0      	cbz	r0, 8010092 <_vfiprintf_r+0x13a>
 8010064:	9207      	str	r2, [sp, #28]
 8010066:	e014      	b.n	8010092 <_vfiprintf_r+0x13a>
 8010068:	eba0 0308 	sub.w	r3, r0, r8
 801006c:	fa09 f303 	lsl.w	r3, r9, r3
 8010070:	4313      	orrs	r3, r2
 8010072:	9304      	str	r3, [sp, #16]
 8010074:	46a2      	mov	sl, r4
 8010076:	e7d2      	b.n	801001e <_vfiprintf_r+0xc6>
 8010078:	9b03      	ldr	r3, [sp, #12]
 801007a:	1d19      	adds	r1, r3, #4
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	9103      	str	r1, [sp, #12]
 8010080:	2b00      	cmp	r3, #0
 8010082:	bfbb      	ittet	lt
 8010084:	425b      	neglt	r3, r3
 8010086:	f042 0202 	orrlt.w	r2, r2, #2
 801008a:	9307      	strge	r3, [sp, #28]
 801008c:	9307      	strlt	r3, [sp, #28]
 801008e:	bfb8      	it	lt
 8010090:	9204      	strlt	r2, [sp, #16]
 8010092:	7823      	ldrb	r3, [r4, #0]
 8010094:	2b2e      	cmp	r3, #46	@ 0x2e
 8010096:	d10a      	bne.n	80100ae <_vfiprintf_r+0x156>
 8010098:	7863      	ldrb	r3, [r4, #1]
 801009a:	2b2a      	cmp	r3, #42	@ 0x2a
 801009c:	d132      	bne.n	8010104 <_vfiprintf_r+0x1ac>
 801009e:	9b03      	ldr	r3, [sp, #12]
 80100a0:	1d1a      	adds	r2, r3, #4
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	9203      	str	r2, [sp, #12]
 80100a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80100aa:	3402      	adds	r4, #2
 80100ac:	9305      	str	r3, [sp, #20]
 80100ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010184 <_vfiprintf_r+0x22c>
 80100b2:	7821      	ldrb	r1, [r4, #0]
 80100b4:	2203      	movs	r2, #3
 80100b6:	4650      	mov	r0, sl
 80100b8:	f7f0 f8ba 	bl	8000230 <memchr>
 80100bc:	b138      	cbz	r0, 80100ce <_vfiprintf_r+0x176>
 80100be:	9b04      	ldr	r3, [sp, #16]
 80100c0:	eba0 000a 	sub.w	r0, r0, sl
 80100c4:	2240      	movs	r2, #64	@ 0x40
 80100c6:	4082      	lsls	r2, r0
 80100c8:	4313      	orrs	r3, r2
 80100ca:	3401      	adds	r4, #1
 80100cc:	9304      	str	r3, [sp, #16]
 80100ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100d2:	4829      	ldr	r0, [pc, #164]	@ (8010178 <_vfiprintf_r+0x220>)
 80100d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80100d8:	2206      	movs	r2, #6
 80100da:	f7f0 f8a9 	bl	8000230 <memchr>
 80100de:	2800      	cmp	r0, #0
 80100e0:	d03f      	beq.n	8010162 <_vfiprintf_r+0x20a>
 80100e2:	4b26      	ldr	r3, [pc, #152]	@ (801017c <_vfiprintf_r+0x224>)
 80100e4:	bb1b      	cbnz	r3, 801012e <_vfiprintf_r+0x1d6>
 80100e6:	9b03      	ldr	r3, [sp, #12]
 80100e8:	3307      	adds	r3, #7
 80100ea:	f023 0307 	bic.w	r3, r3, #7
 80100ee:	3308      	adds	r3, #8
 80100f0:	9303      	str	r3, [sp, #12]
 80100f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100f4:	443b      	add	r3, r7
 80100f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80100f8:	e76a      	b.n	800ffd0 <_vfiprintf_r+0x78>
 80100fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80100fe:	460c      	mov	r4, r1
 8010100:	2001      	movs	r0, #1
 8010102:	e7a8      	b.n	8010056 <_vfiprintf_r+0xfe>
 8010104:	2300      	movs	r3, #0
 8010106:	3401      	adds	r4, #1
 8010108:	9305      	str	r3, [sp, #20]
 801010a:	4619      	mov	r1, r3
 801010c:	f04f 0c0a 	mov.w	ip, #10
 8010110:	4620      	mov	r0, r4
 8010112:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010116:	3a30      	subs	r2, #48	@ 0x30
 8010118:	2a09      	cmp	r2, #9
 801011a:	d903      	bls.n	8010124 <_vfiprintf_r+0x1cc>
 801011c:	2b00      	cmp	r3, #0
 801011e:	d0c6      	beq.n	80100ae <_vfiprintf_r+0x156>
 8010120:	9105      	str	r1, [sp, #20]
 8010122:	e7c4      	b.n	80100ae <_vfiprintf_r+0x156>
 8010124:	fb0c 2101 	mla	r1, ip, r1, r2
 8010128:	4604      	mov	r4, r0
 801012a:	2301      	movs	r3, #1
 801012c:	e7f0      	b.n	8010110 <_vfiprintf_r+0x1b8>
 801012e:	ab03      	add	r3, sp, #12
 8010130:	9300      	str	r3, [sp, #0]
 8010132:	462a      	mov	r2, r5
 8010134:	4b12      	ldr	r3, [pc, #72]	@ (8010180 <_vfiprintf_r+0x228>)
 8010136:	a904      	add	r1, sp, #16
 8010138:	4630      	mov	r0, r6
 801013a:	f7fc ff6d 	bl	800d018 <_printf_float>
 801013e:	4607      	mov	r7, r0
 8010140:	1c78      	adds	r0, r7, #1
 8010142:	d1d6      	bne.n	80100f2 <_vfiprintf_r+0x19a>
 8010144:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010146:	07d9      	lsls	r1, r3, #31
 8010148:	d405      	bmi.n	8010156 <_vfiprintf_r+0x1fe>
 801014a:	89ab      	ldrh	r3, [r5, #12]
 801014c:	059a      	lsls	r2, r3, #22
 801014e:	d402      	bmi.n	8010156 <_vfiprintf_r+0x1fe>
 8010150:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010152:	f7fd fdd3 	bl	800dcfc <__retarget_lock_release_recursive>
 8010156:	89ab      	ldrh	r3, [r5, #12]
 8010158:	065b      	lsls	r3, r3, #25
 801015a:	f53f af1f 	bmi.w	800ff9c <_vfiprintf_r+0x44>
 801015e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010160:	e71e      	b.n	800ffa0 <_vfiprintf_r+0x48>
 8010162:	ab03      	add	r3, sp, #12
 8010164:	9300      	str	r3, [sp, #0]
 8010166:	462a      	mov	r2, r5
 8010168:	4b05      	ldr	r3, [pc, #20]	@ (8010180 <_vfiprintf_r+0x228>)
 801016a:	a904      	add	r1, sp, #16
 801016c:	4630      	mov	r0, r6
 801016e:	f7fd f9eb 	bl	800d548 <_printf_i>
 8010172:	e7e4      	b.n	801013e <_vfiprintf_r+0x1e6>
 8010174:	08012008 	.word	0x08012008
 8010178:	08012012 	.word	0x08012012
 801017c:	0800d019 	.word	0x0800d019
 8010180:	0800ff33 	.word	0x0800ff33
 8010184:	0801200e 	.word	0x0801200e

08010188 <__sflush_r>:
 8010188:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801018c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010190:	0716      	lsls	r6, r2, #28
 8010192:	4605      	mov	r5, r0
 8010194:	460c      	mov	r4, r1
 8010196:	d454      	bmi.n	8010242 <__sflush_r+0xba>
 8010198:	684b      	ldr	r3, [r1, #4]
 801019a:	2b00      	cmp	r3, #0
 801019c:	dc02      	bgt.n	80101a4 <__sflush_r+0x1c>
 801019e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	dd48      	ble.n	8010236 <__sflush_r+0xae>
 80101a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80101a6:	2e00      	cmp	r6, #0
 80101a8:	d045      	beq.n	8010236 <__sflush_r+0xae>
 80101aa:	2300      	movs	r3, #0
 80101ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80101b0:	682f      	ldr	r7, [r5, #0]
 80101b2:	6a21      	ldr	r1, [r4, #32]
 80101b4:	602b      	str	r3, [r5, #0]
 80101b6:	d030      	beq.n	801021a <__sflush_r+0x92>
 80101b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80101ba:	89a3      	ldrh	r3, [r4, #12]
 80101bc:	0759      	lsls	r1, r3, #29
 80101be:	d505      	bpl.n	80101cc <__sflush_r+0x44>
 80101c0:	6863      	ldr	r3, [r4, #4]
 80101c2:	1ad2      	subs	r2, r2, r3
 80101c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80101c6:	b10b      	cbz	r3, 80101cc <__sflush_r+0x44>
 80101c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80101ca:	1ad2      	subs	r2, r2, r3
 80101cc:	2300      	movs	r3, #0
 80101ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80101d0:	6a21      	ldr	r1, [r4, #32]
 80101d2:	4628      	mov	r0, r5
 80101d4:	47b0      	blx	r6
 80101d6:	1c43      	adds	r3, r0, #1
 80101d8:	89a3      	ldrh	r3, [r4, #12]
 80101da:	d106      	bne.n	80101ea <__sflush_r+0x62>
 80101dc:	6829      	ldr	r1, [r5, #0]
 80101de:	291d      	cmp	r1, #29
 80101e0:	d82b      	bhi.n	801023a <__sflush_r+0xb2>
 80101e2:	4a2a      	ldr	r2, [pc, #168]	@ (801028c <__sflush_r+0x104>)
 80101e4:	40ca      	lsrs	r2, r1
 80101e6:	07d6      	lsls	r6, r2, #31
 80101e8:	d527      	bpl.n	801023a <__sflush_r+0xb2>
 80101ea:	2200      	movs	r2, #0
 80101ec:	6062      	str	r2, [r4, #4]
 80101ee:	04d9      	lsls	r1, r3, #19
 80101f0:	6922      	ldr	r2, [r4, #16]
 80101f2:	6022      	str	r2, [r4, #0]
 80101f4:	d504      	bpl.n	8010200 <__sflush_r+0x78>
 80101f6:	1c42      	adds	r2, r0, #1
 80101f8:	d101      	bne.n	80101fe <__sflush_r+0x76>
 80101fa:	682b      	ldr	r3, [r5, #0]
 80101fc:	b903      	cbnz	r3, 8010200 <__sflush_r+0x78>
 80101fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8010200:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010202:	602f      	str	r7, [r5, #0]
 8010204:	b1b9      	cbz	r1, 8010236 <__sflush_r+0xae>
 8010206:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801020a:	4299      	cmp	r1, r3
 801020c:	d002      	beq.n	8010214 <__sflush_r+0x8c>
 801020e:	4628      	mov	r0, r5
 8010210:	f7fe fc1e 	bl	800ea50 <_free_r>
 8010214:	2300      	movs	r3, #0
 8010216:	6363      	str	r3, [r4, #52]	@ 0x34
 8010218:	e00d      	b.n	8010236 <__sflush_r+0xae>
 801021a:	2301      	movs	r3, #1
 801021c:	4628      	mov	r0, r5
 801021e:	47b0      	blx	r6
 8010220:	4602      	mov	r2, r0
 8010222:	1c50      	adds	r0, r2, #1
 8010224:	d1c9      	bne.n	80101ba <__sflush_r+0x32>
 8010226:	682b      	ldr	r3, [r5, #0]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d0c6      	beq.n	80101ba <__sflush_r+0x32>
 801022c:	2b1d      	cmp	r3, #29
 801022e:	d001      	beq.n	8010234 <__sflush_r+0xac>
 8010230:	2b16      	cmp	r3, #22
 8010232:	d11e      	bne.n	8010272 <__sflush_r+0xea>
 8010234:	602f      	str	r7, [r5, #0]
 8010236:	2000      	movs	r0, #0
 8010238:	e022      	b.n	8010280 <__sflush_r+0xf8>
 801023a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801023e:	b21b      	sxth	r3, r3
 8010240:	e01b      	b.n	801027a <__sflush_r+0xf2>
 8010242:	690f      	ldr	r7, [r1, #16]
 8010244:	2f00      	cmp	r7, #0
 8010246:	d0f6      	beq.n	8010236 <__sflush_r+0xae>
 8010248:	0793      	lsls	r3, r2, #30
 801024a:	680e      	ldr	r6, [r1, #0]
 801024c:	bf08      	it	eq
 801024e:	694b      	ldreq	r3, [r1, #20]
 8010250:	600f      	str	r7, [r1, #0]
 8010252:	bf18      	it	ne
 8010254:	2300      	movne	r3, #0
 8010256:	eba6 0807 	sub.w	r8, r6, r7
 801025a:	608b      	str	r3, [r1, #8]
 801025c:	f1b8 0f00 	cmp.w	r8, #0
 8010260:	dde9      	ble.n	8010236 <__sflush_r+0xae>
 8010262:	6a21      	ldr	r1, [r4, #32]
 8010264:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010266:	4643      	mov	r3, r8
 8010268:	463a      	mov	r2, r7
 801026a:	4628      	mov	r0, r5
 801026c:	47b0      	blx	r6
 801026e:	2800      	cmp	r0, #0
 8010270:	dc08      	bgt.n	8010284 <__sflush_r+0xfc>
 8010272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801027a:	81a3      	strh	r3, [r4, #12]
 801027c:	f04f 30ff 	mov.w	r0, #4294967295
 8010280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010284:	4407      	add	r7, r0
 8010286:	eba8 0800 	sub.w	r8, r8, r0
 801028a:	e7e7      	b.n	801025c <__sflush_r+0xd4>
 801028c:	20400001 	.word	0x20400001

08010290 <_fflush_r>:
 8010290:	b538      	push	{r3, r4, r5, lr}
 8010292:	690b      	ldr	r3, [r1, #16]
 8010294:	4605      	mov	r5, r0
 8010296:	460c      	mov	r4, r1
 8010298:	b913      	cbnz	r3, 80102a0 <_fflush_r+0x10>
 801029a:	2500      	movs	r5, #0
 801029c:	4628      	mov	r0, r5
 801029e:	bd38      	pop	{r3, r4, r5, pc}
 80102a0:	b118      	cbz	r0, 80102aa <_fflush_r+0x1a>
 80102a2:	6a03      	ldr	r3, [r0, #32]
 80102a4:	b90b      	cbnz	r3, 80102aa <_fflush_r+0x1a>
 80102a6:	f7fd faf9 	bl	800d89c <__sinit>
 80102aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d0f3      	beq.n	801029a <_fflush_r+0xa>
 80102b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80102b4:	07d0      	lsls	r0, r2, #31
 80102b6:	d404      	bmi.n	80102c2 <_fflush_r+0x32>
 80102b8:	0599      	lsls	r1, r3, #22
 80102ba:	d402      	bmi.n	80102c2 <_fflush_r+0x32>
 80102bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80102be:	f7fd fd1c 	bl	800dcfa <__retarget_lock_acquire_recursive>
 80102c2:	4628      	mov	r0, r5
 80102c4:	4621      	mov	r1, r4
 80102c6:	f7ff ff5f 	bl	8010188 <__sflush_r>
 80102ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80102cc:	07da      	lsls	r2, r3, #31
 80102ce:	4605      	mov	r5, r0
 80102d0:	d4e4      	bmi.n	801029c <_fflush_r+0xc>
 80102d2:	89a3      	ldrh	r3, [r4, #12]
 80102d4:	059b      	lsls	r3, r3, #22
 80102d6:	d4e1      	bmi.n	801029c <_fflush_r+0xc>
 80102d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80102da:	f7fd fd0f 	bl	800dcfc <__retarget_lock_release_recursive>
 80102de:	e7dd      	b.n	801029c <_fflush_r+0xc>

080102e0 <__swhatbuf_r>:
 80102e0:	b570      	push	{r4, r5, r6, lr}
 80102e2:	460c      	mov	r4, r1
 80102e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102e8:	2900      	cmp	r1, #0
 80102ea:	b096      	sub	sp, #88	@ 0x58
 80102ec:	4615      	mov	r5, r2
 80102ee:	461e      	mov	r6, r3
 80102f0:	da0d      	bge.n	801030e <__swhatbuf_r+0x2e>
 80102f2:	89a3      	ldrh	r3, [r4, #12]
 80102f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80102f8:	f04f 0100 	mov.w	r1, #0
 80102fc:	bf14      	ite	ne
 80102fe:	2340      	movne	r3, #64	@ 0x40
 8010300:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010304:	2000      	movs	r0, #0
 8010306:	6031      	str	r1, [r6, #0]
 8010308:	602b      	str	r3, [r5, #0]
 801030a:	b016      	add	sp, #88	@ 0x58
 801030c:	bd70      	pop	{r4, r5, r6, pc}
 801030e:	466a      	mov	r2, sp
 8010310:	f000 f862 	bl	80103d8 <_fstat_r>
 8010314:	2800      	cmp	r0, #0
 8010316:	dbec      	blt.n	80102f2 <__swhatbuf_r+0x12>
 8010318:	9901      	ldr	r1, [sp, #4]
 801031a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801031e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010322:	4259      	negs	r1, r3
 8010324:	4159      	adcs	r1, r3
 8010326:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801032a:	e7eb      	b.n	8010304 <__swhatbuf_r+0x24>

0801032c <__smakebuf_r>:
 801032c:	898b      	ldrh	r3, [r1, #12]
 801032e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010330:	079d      	lsls	r5, r3, #30
 8010332:	4606      	mov	r6, r0
 8010334:	460c      	mov	r4, r1
 8010336:	d507      	bpl.n	8010348 <__smakebuf_r+0x1c>
 8010338:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801033c:	6023      	str	r3, [r4, #0]
 801033e:	6123      	str	r3, [r4, #16]
 8010340:	2301      	movs	r3, #1
 8010342:	6163      	str	r3, [r4, #20]
 8010344:	b003      	add	sp, #12
 8010346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010348:	ab01      	add	r3, sp, #4
 801034a:	466a      	mov	r2, sp
 801034c:	f7ff ffc8 	bl	80102e0 <__swhatbuf_r>
 8010350:	9f00      	ldr	r7, [sp, #0]
 8010352:	4605      	mov	r5, r0
 8010354:	4639      	mov	r1, r7
 8010356:	4630      	mov	r0, r6
 8010358:	f7fe ff28 	bl	800f1ac <_malloc_r>
 801035c:	b948      	cbnz	r0, 8010372 <__smakebuf_r+0x46>
 801035e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010362:	059a      	lsls	r2, r3, #22
 8010364:	d4ee      	bmi.n	8010344 <__smakebuf_r+0x18>
 8010366:	f023 0303 	bic.w	r3, r3, #3
 801036a:	f043 0302 	orr.w	r3, r3, #2
 801036e:	81a3      	strh	r3, [r4, #12]
 8010370:	e7e2      	b.n	8010338 <__smakebuf_r+0xc>
 8010372:	89a3      	ldrh	r3, [r4, #12]
 8010374:	6020      	str	r0, [r4, #0]
 8010376:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801037a:	81a3      	strh	r3, [r4, #12]
 801037c:	9b01      	ldr	r3, [sp, #4]
 801037e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010382:	b15b      	cbz	r3, 801039c <__smakebuf_r+0x70>
 8010384:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010388:	4630      	mov	r0, r6
 801038a:	f000 f837 	bl	80103fc <_isatty_r>
 801038e:	b128      	cbz	r0, 801039c <__smakebuf_r+0x70>
 8010390:	89a3      	ldrh	r3, [r4, #12]
 8010392:	f023 0303 	bic.w	r3, r3, #3
 8010396:	f043 0301 	orr.w	r3, r3, #1
 801039a:	81a3      	strh	r3, [r4, #12]
 801039c:	89a3      	ldrh	r3, [r4, #12]
 801039e:	431d      	orrs	r5, r3
 80103a0:	81a5      	strh	r5, [r4, #12]
 80103a2:	e7cf      	b.n	8010344 <__smakebuf_r+0x18>

080103a4 <memmove>:
 80103a4:	4288      	cmp	r0, r1
 80103a6:	b510      	push	{r4, lr}
 80103a8:	eb01 0402 	add.w	r4, r1, r2
 80103ac:	d902      	bls.n	80103b4 <memmove+0x10>
 80103ae:	4284      	cmp	r4, r0
 80103b0:	4623      	mov	r3, r4
 80103b2:	d807      	bhi.n	80103c4 <memmove+0x20>
 80103b4:	1e43      	subs	r3, r0, #1
 80103b6:	42a1      	cmp	r1, r4
 80103b8:	d008      	beq.n	80103cc <memmove+0x28>
 80103ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80103be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80103c2:	e7f8      	b.n	80103b6 <memmove+0x12>
 80103c4:	4402      	add	r2, r0
 80103c6:	4601      	mov	r1, r0
 80103c8:	428a      	cmp	r2, r1
 80103ca:	d100      	bne.n	80103ce <memmove+0x2a>
 80103cc:	bd10      	pop	{r4, pc}
 80103ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80103d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80103d6:	e7f7      	b.n	80103c8 <memmove+0x24>

080103d8 <_fstat_r>:
 80103d8:	b538      	push	{r3, r4, r5, lr}
 80103da:	4d07      	ldr	r5, [pc, #28]	@ (80103f8 <_fstat_r+0x20>)
 80103dc:	2300      	movs	r3, #0
 80103de:	4604      	mov	r4, r0
 80103e0:	4608      	mov	r0, r1
 80103e2:	4611      	mov	r1, r2
 80103e4:	602b      	str	r3, [r5, #0]
 80103e6:	f7f6 f8b9 	bl	800655c <_fstat>
 80103ea:	1c43      	adds	r3, r0, #1
 80103ec:	d102      	bne.n	80103f4 <_fstat_r+0x1c>
 80103ee:	682b      	ldr	r3, [r5, #0]
 80103f0:	b103      	cbz	r3, 80103f4 <_fstat_r+0x1c>
 80103f2:	6023      	str	r3, [r4, #0]
 80103f4:	bd38      	pop	{r3, r4, r5, pc}
 80103f6:	bf00      	nop
 80103f8:	2000ab64 	.word	0x2000ab64

080103fc <_isatty_r>:
 80103fc:	b538      	push	{r3, r4, r5, lr}
 80103fe:	4d06      	ldr	r5, [pc, #24]	@ (8010418 <_isatty_r+0x1c>)
 8010400:	2300      	movs	r3, #0
 8010402:	4604      	mov	r4, r0
 8010404:	4608      	mov	r0, r1
 8010406:	602b      	str	r3, [r5, #0]
 8010408:	f7f6 f8b8 	bl	800657c <_isatty>
 801040c:	1c43      	adds	r3, r0, #1
 801040e:	d102      	bne.n	8010416 <_isatty_r+0x1a>
 8010410:	682b      	ldr	r3, [r5, #0]
 8010412:	b103      	cbz	r3, 8010416 <_isatty_r+0x1a>
 8010414:	6023      	str	r3, [r4, #0]
 8010416:	bd38      	pop	{r3, r4, r5, pc}
 8010418:	2000ab64 	.word	0x2000ab64

0801041c <_sbrk_r>:
 801041c:	b538      	push	{r3, r4, r5, lr}
 801041e:	4d06      	ldr	r5, [pc, #24]	@ (8010438 <_sbrk_r+0x1c>)
 8010420:	2300      	movs	r3, #0
 8010422:	4604      	mov	r4, r0
 8010424:	4608      	mov	r0, r1
 8010426:	602b      	str	r3, [r5, #0]
 8010428:	f7f6 f8c0 	bl	80065ac <_sbrk>
 801042c:	1c43      	adds	r3, r0, #1
 801042e:	d102      	bne.n	8010436 <_sbrk_r+0x1a>
 8010430:	682b      	ldr	r3, [r5, #0]
 8010432:	b103      	cbz	r3, 8010436 <_sbrk_r+0x1a>
 8010434:	6023      	str	r3, [r4, #0]
 8010436:	bd38      	pop	{r3, r4, r5, pc}
 8010438:	2000ab64 	.word	0x2000ab64

0801043c <__fpclassifyf>:
 801043c:	ee10 3a10 	vmov	r3, s0
 8010440:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8010444:	d00d      	beq.n	8010462 <__fpclassifyf+0x26>
 8010446:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 801044a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 801044e:	d30a      	bcc.n	8010466 <__fpclassifyf+0x2a>
 8010450:	4b07      	ldr	r3, [pc, #28]	@ (8010470 <__fpclassifyf+0x34>)
 8010452:	1e42      	subs	r2, r0, #1
 8010454:	429a      	cmp	r2, r3
 8010456:	d908      	bls.n	801046a <__fpclassifyf+0x2e>
 8010458:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 801045c:	4258      	negs	r0, r3
 801045e:	4158      	adcs	r0, r3
 8010460:	4770      	bx	lr
 8010462:	2002      	movs	r0, #2
 8010464:	4770      	bx	lr
 8010466:	2004      	movs	r0, #4
 8010468:	4770      	bx	lr
 801046a:	2003      	movs	r0, #3
 801046c:	4770      	bx	lr
 801046e:	bf00      	nop
 8010470:	007ffffe 	.word	0x007ffffe

08010474 <__assert_func>:
 8010474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010476:	4614      	mov	r4, r2
 8010478:	461a      	mov	r2, r3
 801047a:	4b09      	ldr	r3, [pc, #36]	@ (80104a0 <__assert_func+0x2c>)
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	4605      	mov	r5, r0
 8010480:	68d8      	ldr	r0, [r3, #12]
 8010482:	b14c      	cbz	r4, 8010498 <__assert_func+0x24>
 8010484:	4b07      	ldr	r3, [pc, #28]	@ (80104a4 <__assert_func+0x30>)
 8010486:	9100      	str	r1, [sp, #0]
 8010488:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801048c:	4906      	ldr	r1, [pc, #24]	@ (80104a8 <__assert_func+0x34>)
 801048e:	462b      	mov	r3, r5
 8010490:	f000 f850 	bl	8010534 <fiprintf>
 8010494:	f000 f860 	bl	8010558 <abort>
 8010498:	4b04      	ldr	r3, [pc, #16]	@ (80104ac <__assert_func+0x38>)
 801049a:	461c      	mov	r4, r3
 801049c:	e7f3      	b.n	8010486 <__assert_func+0x12>
 801049e:	bf00      	nop
 80104a0:	200001c4 	.word	0x200001c4
 80104a4:	08012019 	.word	0x08012019
 80104a8:	08012026 	.word	0x08012026
 80104ac:	08012054 	.word	0x08012054

080104b0 <_calloc_r>:
 80104b0:	b570      	push	{r4, r5, r6, lr}
 80104b2:	fba1 5402 	umull	r5, r4, r1, r2
 80104b6:	b934      	cbnz	r4, 80104c6 <_calloc_r+0x16>
 80104b8:	4629      	mov	r1, r5
 80104ba:	f7fe fe77 	bl	800f1ac <_malloc_r>
 80104be:	4606      	mov	r6, r0
 80104c0:	b928      	cbnz	r0, 80104ce <_calloc_r+0x1e>
 80104c2:	4630      	mov	r0, r6
 80104c4:	bd70      	pop	{r4, r5, r6, pc}
 80104c6:	220c      	movs	r2, #12
 80104c8:	6002      	str	r2, [r0, #0]
 80104ca:	2600      	movs	r6, #0
 80104cc:	e7f9      	b.n	80104c2 <_calloc_r+0x12>
 80104ce:	462a      	mov	r2, r5
 80104d0:	4621      	mov	r1, r4
 80104d2:	f7fd fb83 	bl	800dbdc <memset>
 80104d6:	e7f4      	b.n	80104c2 <_calloc_r+0x12>

080104d8 <_realloc_r>:
 80104d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104dc:	4607      	mov	r7, r0
 80104de:	4614      	mov	r4, r2
 80104e0:	460d      	mov	r5, r1
 80104e2:	b921      	cbnz	r1, 80104ee <_realloc_r+0x16>
 80104e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104e8:	4611      	mov	r1, r2
 80104ea:	f7fe be5f 	b.w	800f1ac <_malloc_r>
 80104ee:	b92a      	cbnz	r2, 80104fc <_realloc_r+0x24>
 80104f0:	f7fe faae 	bl	800ea50 <_free_r>
 80104f4:	4625      	mov	r5, r4
 80104f6:	4628      	mov	r0, r5
 80104f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104fc:	f000 f833 	bl	8010566 <_malloc_usable_size_r>
 8010500:	4284      	cmp	r4, r0
 8010502:	4606      	mov	r6, r0
 8010504:	d802      	bhi.n	801050c <_realloc_r+0x34>
 8010506:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801050a:	d8f4      	bhi.n	80104f6 <_realloc_r+0x1e>
 801050c:	4621      	mov	r1, r4
 801050e:	4638      	mov	r0, r7
 8010510:	f7fe fe4c 	bl	800f1ac <_malloc_r>
 8010514:	4680      	mov	r8, r0
 8010516:	b908      	cbnz	r0, 801051c <_realloc_r+0x44>
 8010518:	4645      	mov	r5, r8
 801051a:	e7ec      	b.n	80104f6 <_realloc_r+0x1e>
 801051c:	42b4      	cmp	r4, r6
 801051e:	4622      	mov	r2, r4
 8010520:	4629      	mov	r1, r5
 8010522:	bf28      	it	cs
 8010524:	4632      	movcs	r2, r6
 8010526:	f7fd fbea 	bl	800dcfe <memcpy>
 801052a:	4629      	mov	r1, r5
 801052c:	4638      	mov	r0, r7
 801052e:	f7fe fa8f 	bl	800ea50 <_free_r>
 8010532:	e7f1      	b.n	8010518 <_realloc_r+0x40>

08010534 <fiprintf>:
 8010534:	b40e      	push	{r1, r2, r3}
 8010536:	b503      	push	{r0, r1, lr}
 8010538:	4601      	mov	r1, r0
 801053a:	ab03      	add	r3, sp, #12
 801053c:	4805      	ldr	r0, [pc, #20]	@ (8010554 <fiprintf+0x20>)
 801053e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010542:	6800      	ldr	r0, [r0, #0]
 8010544:	9301      	str	r3, [sp, #4]
 8010546:	f7ff fd07 	bl	800ff58 <_vfiprintf_r>
 801054a:	b002      	add	sp, #8
 801054c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010550:	b003      	add	sp, #12
 8010552:	4770      	bx	lr
 8010554:	200001c4 	.word	0x200001c4

08010558 <abort>:
 8010558:	b508      	push	{r3, lr}
 801055a:	2006      	movs	r0, #6
 801055c:	f000 f834 	bl	80105c8 <raise>
 8010560:	2001      	movs	r0, #1
 8010562:	f7f5 ffab 	bl	80064bc <_exit>

08010566 <_malloc_usable_size_r>:
 8010566:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801056a:	1f18      	subs	r0, r3, #4
 801056c:	2b00      	cmp	r3, #0
 801056e:	bfbc      	itt	lt
 8010570:	580b      	ldrlt	r3, [r1, r0]
 8010572:	18c0      	addlt	r0, r0, r3
 8010574:	4770      	bx	lr

08010576 <_raise_r>:
 8010576:	291f      	cmp	r1, #31
 8010578:	b538      	push	{r3, r4, r5, lr}
 801057a:	4605      	mov	r5, r0
 801057c:	460c      	mov	r4, r1
 801057e:	d904      	bls.n	801058a <_raise_r+0x14>
 8010580:	2316      	movs	r3, #22
 8010582:	6003      	str	r3, [r0, #0]
 8010584:	f04f 30ff 	mov.w	r0, #4294967295
 8010588:	bd38      	pop	{r3, r4, r5, pc}
 801058a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801058c:	b112      	cbz	r2, 8010594 <_raise_r+0x1e>
 801058e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010592:	b94b      	cbnz	r3, 80105a8 <_raise_r+0x32>
 8010594:	4628      	mov	r0, r5
 8010596:	f000 f831 	bl	80105fc <_getpid_r>
 801059a:	4622      	mov	r2, r4
 801059c:	4601      	mov	r1, r0
 801059e:	4628      	mov	r0, r5
 80105a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105a4:	f000 b818 	b.w	80105d8 <_kill_r>
 80105a8:	2b01      	cmp	r3, #1
 80105aa:	d00a      	beq.n	80105c2 <_raise_r+0x4c>
 80105ac:	1c59      	adds	r1, r3, #1
 80105ae:	d103      	bne.n	80105b8 <_raise_r+0x42>
 80105b0:	2316      	movs	r3, #22
 80105b2:	6003      	str	r3, [r0, #0]
 80105b4:	2001      	movs	r0, #1
 80105b6:	e7e7      	b.n	8010588 <_raise_r+0x12>
 80105b8:	2100      	movs	r1, #0
 80105ba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80105be:	4620      	mov	r0, r4
 80105c0:	4798      	blx	r3
 80105c2:	2000      	movs	r0, #0
 80105c4:	e7e0      	b.n	8010588 <_raise_r+0x12>
	...

080105c8 <raise>:
 80105c8:	4b02      	ldr	r3, [pc, #8]	@ (80105d4 <raise+0xc>)
 80105ca:	4601      	mov	r1, r0
 80105cc:	6818      	ldr	r0, [r3, #0]
 80105ce:	f7ff bfd2 	b.w	8010576 <_raise_r>
 80105d2:	bf00      	nop
 80105d4:	200001c4 	.word	0x200001c4

080105d8 <_kill_r>:
 80105d8:	b538      	push	{r3, r4, r5, lr}
 80105da:	4d07      	ldr	r5, [pc, #28]	@ (80105f8 <_kill_r+0x20>)
 80105dc:	2300      	movs	r3, #0
 80105de:	4604      	mov	r4, r0
 80105e0:	4608      	mov	r0, r1
 80105e2:	4611      	mov	r1, r2
 80105e4:	602b      	str	r3, [r5, #0]
 80105e6:	f7f5 ff59 	bl	800649c <_kill>
 80105ea:	1c43      	adds	r3, r0, #1
 80105ec:	d102      	bne.n	80105f4 <_kill_r+0x1c>
 80105ee:	682b      	ldr	r3, [r5, #0]
 80105f0:	b103      	cbz	r3, 80105f4 <_kill_r+0x1c>
 80105f2:	6023      	str	r3, [r4, #0]
 80105f4:	bd38      	pop	{r3, r4, r5, pc}
 80105f6:	bf00      	nop
 80105f8:	2000ab64 	.word	0x2000ab64

080105fc <_getpid_r>:
 80105fc:	f7f5 bf46 	b.w	800648c <_getpid>

08010600 <exp>:
 8010600:	b538      	push	{r3, r4, r5, lr}
 8010602:	ed2d 8b02 	vpush	{d8}
 8010606:	ec55 4b10 	vmov	r4, r5, d0
 801060a:	f000 f8d5 	bl	80107b8 <__ieee754_exp>
 801060e:	eeb0 8a40 	vmov.f32	s16, s0
 8010612:	eef0 8a60 	vmov.f32	s17, s1
 8010616:	ec45 4b10 	vmov	d0, r4, r5
 801061a:	f000 f877 	bl	801070c <finite>
 801061e:	b168      	cbz	r0, 801063c <exp+0x3c>
 8010620:	a317      	add	r3, pc, #92	@ (adr r3, 8010680 <exp+0x80>)
 8010622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010626:	4620      	mov	r0, r4
 8010628:	4629      	mov	r1, r5
 801062a:	f7f0 faa5 	bl	8000b78 <__aeabi_dcmpgt>
 801062e:	b160      	cbz	r0, 801064a <exp+0x4a>
 8010630:	f7fd fb38 	bl	800dca4 <__errno>
 8010634:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 8010670 <exp+0x70>
 8010638:	2322      	movs	r3, #34	@ 0x22
 801063a:	6003      	str	r3, [r0, #0]
 801063c:	eeb0 0a48 	vmov.f32	s0, s16
 8010640:	eef0 0a68 	vmov.f32	s1, s17
 8010644:	ecbd 8b02 	vpop	{d8}
 8010648:	bd38      	pop	{r3, r4, r5, pc}
 801064a:	a30f      	add	r3, pc, #60	@ (adr r3, 8010688 <exp+0x88>)
 801064c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010650:	4620      	mov	r0, r4
 8010652:	4629      	mov	r1, r5
 8010654:	f7f0 fa72 	bl	8000b3c <__aeabi_dcmplt>
 8010658:	2800      	cmp	r0, #0
 801065a:	d0ef      	beq.n	801063c <exp+0x3c>
 801065c:	f7fd fb22 	bl	800dca4 <__errno>
 8010660:	2322      	movs	r3, #34	@ 0x22
 8010662:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 8010678 <exp+0x78>
 8010666:	6003      	str	r3, [r0, #0]
 8010668:	e7e8      	b.n	801063c <exp+0x3c>
 801066a:	bf00      	nop
 801066c:	f3af 8000 	nop.w
 8010670:	00000000 	.word	0x00000000
 8010674:	7ff00000 	.word	0x7ff00000
	...
 8010680:	fefa39ef 	.word	0xfefa39ef
 8010684:	40862e42 	.word	0x40862e42
 8010688:	d52d3051 	.word	0xd52d3051
 801068c:	c0874910 	.word	0xc0874910

08010690 <fmodf>:
 8010690:	b508      	push	{r3, lr}
 8010692:	ed2d 8b02 	vpush	{d8}
 8010696:	eef0 8a40 	vmov.f32	s17, s0
 801069a:	eeb0 8a60 	vmov.f32	s16, s1
 801069e:	f000 fa05 	bl	8010aac <__ieee754_fmodf>
 80106a2:	eef4 8a48 	vcmp.f32	s17, s16
 80106a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106aa:	d60c      	bvs.n	80106c6 <fmodf+0x36>
 80106ac:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80106cc <fmodf+0x3c>
 80106b0:	eeb4 8a68 	vcmp.f32	s16, s17
 80106b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106b8:	d105      	bne.n	80106c6 <fmodf+0x36>
 80106ba:	f7fd faf3 	bl	800dca4 <__errno>
 80106be:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80106c2:	2321      	movs	r3, #33	@ 0x21
 80106c4:	6003      	str	r3, [r0, #0]
 80106c6:	ecbd 8b02 	vpop	{d8}
 80106ca:	bd08      	pop	{r3, pc}
 80106cc:	00000000 	.word	0x00000000

080106d0 <sqrtf>:
 80106d0:	b508      	push	{r3, lr}
 80106d2:	ed2d 8b02 	vpush	{d8}
 80106d6:	eeb0 8a40 	vmov.f32	s16, s0
 80106da:	f000 f822 	bl	8010722 <__ieee754_sqrtf>
 80106de:	eeb4 8a48 	vcmp.f32	s16, s16
 80106e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106e6:	d60c      	bvs.n	8010702 <sqrtf+0x32>
 80106e8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8010708 <sqrtf+0x38>
 80106ec:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80106f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106f4:	d505      	bpl.n	8010702 <sqrtf+0x32>
 80106f6:	f7fd fad5 	bl	800dca4 <__errno>
 80106fa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80106fe:	2321      	movs	r3, #33	@ 0x21
 8010700:	6003      	str	r3, [r0, #0]
 8010702:	ecbd 8b02 	vpop	{d8}
 8010706:	bd08      	pop	{r3, pc}
 8010708:	00000000 	.word	0x00000000

0801070c <finite>:
 801070c:	b082      	sub	sp, #8
 801070e:	ed8d 0b00 	vstr	d0, [sp]
 8010712:	9801      	ldr	r0, [sp, #4]
 8010714:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8010718:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801071c:	0fc0      	lsrs	r0, r0, #31
 801071e:	b002      	add	sp, #8
 8010720:	4770      	bx	lr

08010722 <__ieee754_sqrtf>:
 8010722:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010726:	4770      	bx	lr

08010728 <round>:
 8010728:	ec51 0b10 	vmov	r0, r1, d0
 801072c:	b570      	push	{r4, r5, r6, lr}
 801072e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8010732:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8010736:	2a13      	cmp	r2, #19
 8010738:	460b      	mov	r3, r1
 801073a:	4605      	mov	r5, r0
 801073c:	dc1b      	bgt.n	8010776 <round+0x4e>
 801073e:	2a00      	cmp	r2, #0
 8010740:	da0b      	bge.n	801075a <round+0x32>
 8010742:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8010746:	3201      	adds	r2, #1
 8010748:	bf04      	itt	eq
 801074a:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 801074e:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8010752:	2200      	movs	r2, #0
 8010754:	4619      	mov	r1, r3
 8010756:	4610      	mov	r0, r2
 8010758:	e015      	b.n	8010786 <round+0x5e>
 801075a:	4c15      	ldr	r4, [pc, #84]	@ (80107b0 <round+0x88>)
 801075c:	4114      	asrs	r4, r2
 801075e:	ea04 0601 	and.w	r6, r4, r1
 8010762:	4306      	orrs	r6, r0
 8010764:	d00f      	beq.n	8010786 <round+0x5e>
 8010766:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 801076a:	fa41 f202 	asr.w	r2, r1, r2
 801076e:	4413      	add	r3, r2
 8010770:	ea23 0304 	bic.w	r3, r3, r4
 8010774:	e7ed      	b.n	8010752 <round+0x2a>
 8010776:	2a33      	cmp	r2, #51	@ 0x33
 8010778:	dd08      	ble.n	801078c <round+0x64>
 801077a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801077e:	d102      	bne.n	8010786 <round+0x5e>
 8010780:	4602      	mov	r2, r0
 8010782:	f7ef fdb3 	bl	80002ec <__adddf3>
 8010786:	ec41 0b10 	vmov	d0, r0, r1
 801078a:	bd70      	pop	{r4, r5, r6, pc}
 801078c:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8010790:	f04f 34ff 	mov.w	r4, #4294967295
 8010794:	40f4      	lsrs	r4, r6
 8010796:	4204      	tst	r4, r0
 8010798:	d0f5      	beq.n	8010786 <round+0x5e>
 801079a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 801079e:	2201      	movs	r2, #1
 80107a0:	408a      	lsls	r2, r1
 80107a2:	1952      	adds	r2, r2, r5
 80107a4:	bf28      	it	cs
 80107a6:	3301      	addcs	r3, #1
 80107a8:	ea22 0204 	bic.w	r2, r2, r4
 80107ac:	e7d2      	b.n	8010754 <round+0x2c>
 80107ae:	bf00      	nop
 80107b0:	000fffff 	.word	0x000fffff
 80107b4:	00000000 	.word	0x00000000

080107b8 <__ieee754_exp>:
 80107b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80107bc:	ec55 4b10 	vmov	r4, r5, d0
 80107c0:	49b1      	ldr	r1, [pc, #708]	@ (8010a88 <__ieee754_exp+0x2d0>)
 80107c2:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80107c6:	428a      	cmp	r2, r1
 80107c8:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80107cc:	d936      	bls.n	801083c <__ieee754_exp+0x84>
 80107ce:	49af      	ldr	r1, [pc, #700]	@ (8010a8c <__ieee754_exp+0x2d4>)
 80107d0:	428a      	cmp	r2, r1
 80107d2:	d914      	bls.n	80107fe <__ieee754_exp+0x46>
 80107d4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80107d8:	4323      	orrs	r3, r4
 80107da:	4622      	mov	r2, r4
 80107dc:	d007      	beq.n	80107ee <__ieee754_exp+0x36>
 80107de:	462b      	mov	r3, r5
 80107e0:	4620      	mov	r0, r4
 80107e2:	4629      	mov	r1, r5
 80107e4:	f7ef fd82 	bl	80002ec <__adddf3>
 80107e8:	4604      	mov	r4, r0
 80107ea:	460d      	mov	r5, r1
 80107ec:	e002      	b.n	80107f4 <__ieee754_exp+0x3c>
 80107ee:	2e00      	cmp	r6, #0
 80107f0:	f040 8118 	bne.w	8010a24 <__ieee754_exp+0x26c>
 80107f4:	ec45 4b10 	vmov	d0, r4, r5
 80107f8:	b004      	add	sp, #16
 80107fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107fe:	a38c      	add	r3, pc, #560	@ (adr r3, 8010a30 <__ieee754_exp+0x278>)
 8010800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010804:	4620      	mov	r0, r4
 8010806:	4629      	mov	r1, r5
 8010808:	f7f0 f9b6 	bl	8000b78 <__aeabi_dcmpgt>
 801080c:	4607      	mov	r7, r0
 801080e:	b128      	cbz	r0, 801081c <__ieee754_exp+0x64>
 8010810:	2000      	movs	r0, #0
 8010812:	b004      	add	sp, #16
 8010814:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010818:	f000 b9fe 	b.w	8010c18 <__math_oflow>
 801081c:	a386      	add	r3, pc, #536	@ (adr r3, 8010a38 <__ieee754_exp+0x280>)
 801081e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010822:	4620      	mov	r0, r4
 8010824:	4629      	mov	r1, r5
 8010826:	f7f0 f989 	bl	8000b3c <__aeabi_dcmplt>
 801082a:	2800      	cmp	r0, #0
 801082c:	f000 8087 	beq.w	801093e <__ieee754_exp+0x186>
 8010830:	4638      	mov	r0, r7
 8010832:	b004      	add	sp, #16
 8010834:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010838:	f000 b9e6 	b.w	8010c08 <__math_uflow>
 801083c:	4b94      	ldr	r3, [pc, #592]	@ (8010a90 <__ieee754_exp+0x2d8>)
 801083e:	429a      	cmp	r2, r3
 8010840:	f240 80a9 	bls.w	8010996 <__ieee754_exp+0x1de>
 8010844:	4b93      	ldr	r3, [pc, #588]	@ (8010a94 <__ieee754_exp+0x2dc>)
 8010846:	429a      	cmp	r2, r3
 8010848:	d879      	bhi.n	801093e <__ieee754_exp+0x186>
 801084a:	4b93      	ldr	r3, [pc, #588]	@ (8010a98 <__ieee754_exp+0x2e0>)
 801084c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010854:	4620      	mov	r0, r4
 8010856:	4629      	mov	r1, r5
 8010858:	f7ef fd46 	bl	80002e8 <__aeabi_dsub>
 801085c:	4b8f      	ldr	r3, [pc, #572]	@ (8010a9c <__ieee754_exp+0x2e4>)
 801085e:	00f7      	lsls	r7, r6, #3
 8010860:	443b      	add	r3, r7
 8010862:	ed93 7b00 	vldr	d7, [r3]
 8010866:	ed8d 7b00 	vstr	d7, [sp]
 801086a:	f086 0a01 	eor.w	sl, r6, #1
 801086e:	4680      	mov	r8, r0
 8010870:	4689      	mov	r9, r1
 8010872:	ebaa 0a06 	sub.w	sl, sl, r6
 8010876:	e9dd 2300 	ldrd	r2, r3, [sp]
 801087a:	4640      	mov	r0, r8
 801087c:	4649      	mov	r1, r9
 801087e:	f7ef fd33 	bl	80002e8 <__aeabi_dsub>
 8010882:	4604      	mov	r4, r0
 8010884:	460d      	mov	r5, r1
 8010886:	4622      	mov	r2, r4
 8010888:	462b      	mov	r3, r5
 801088a:	4620      	mov	r0, r4
 801088c:	4629      	mov	r1, r5
 801088e:	f7ef fee3 	bl	8000658 <__aeabi_dmul>
 8010892:	a36b      	add	r3, pc, #428	@ (adr r3, 8010a40 <__ieee754_exp+0x288>)
 8010894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010898:	4606      	mov	r6, r0
 801089a:	460f      	mov	r7, r1
 801089c:	f7ef fedc 	bl	8000658 <__aeabi_dmul>
 80108a0:	a369      	add	r3, pc, #420	@ (adr r3, 8010a48 <__ieee754_exp+0x290>)
 80108a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a6:	f7ef fd1f 	bl	80002e8 <__aeabi_dsub>
 80108aa:	4632      	mov	r2, r6
 80108ac:	463b      	mov	r3, r7
 80108ae:	f7ef fed3 	bl	8000658 <__aeabi_dmul>
 80108b2:	a367      	add	r3, pc, #412	@ (adr r3, 8010a50 <__ieee754_exp+0x298>)
 80108b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108b8:	f7ef fd18 	bl	80002ec <__adddf3>
 80108bc:	4632      	mov	r2, r6
 80108be:	463b      	mov	r3, r7
 80108c0:	f7ef feca 	bl	8000658 <__aeabi_dmul>
 80108c4:	a364      	add	r3, pc, #400	@ (adr r3, 8010a58 <__ieee754_exp+0x2a0>)
 80108c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ca:	f7ef fd0d 	bl	80002e8 <__aeabi_dsub>
 80108ce:	4632      	mov	r2, r6
 80108d0:	463b      	mov	r3, r7
 80108d2:	f7ef fec1 	bl	8000658 <__aeabi_dmul>
 80108d6:	a362      	add	r3, pc, #392	@ (adr r3, 8010a60 <__ieee754_exp+0x2a8>)
 80108d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108dc:	f7ef fd06 	bl	80002ec <__adddf3>
 80108e0:	4632      	mov	r2, r6
 80108e2:	463b      	mov	r3, r7
 80108e4:	f7ef feb8 	bl	8000658 <__aeabi_dmul>
 80108e8:	4602      	mov	r2, r0
 80108ea:	460b      	mov	r3, r1
 80108ec:	4620      	mov	r0, r4
 80108ee:	4629      	mov	r1, r5
 80108f0:	f7ef fcfa 	bl	80002e8 <__aeabi_dsub>
 80108f4:	4602      	mov	r2, r0
 80108f6:	460b      	mov	r3, r1
 80108f8:	4606      	mov	r6, r0
 80108fa:	460f      	mov	r7, r1
 80108fc:	4620      	mov	r0, r4
 80108fe:	4629      	mov	r1, r5
 8010900:	f7ef feaa 	bl	8000658 <__aeabi_dmul>
 8010904:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010908:	f1ba 0f00 	cmp.w	sl, #0
 801090c:	d15c      	bne.n	80109c8 <__ieee754_exp+0x210>
 801090e:	2200      	movs	r2, #0
 8010910:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010914:	4630      	mov	r0, r6
 8010916:	4639      	mov	r1, r7
 8010918:	f7ef fce6 	bl	80002e8 <__aeabi_dsub>
 801091c:	4602      	mov	r2, r0
 801091e:	460b      	mov	r3, r1
 8010920:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010924:	f7ef ffc2 	bl	80008ac <__aeabi_ddiv>
 8010928:	4622      	mov	r2, r4
 801092a:	462b      	mov	r3, r5
 801092c:	f7ef fcdc 	bl	80002e8 <__aeabi_dsub>
 8010930:	4602      	mov	r2, r0
 8010932:	460b      	mov	r3, r1
 8010934:	2000      	movs	r0, #0
 8010936:	495a      	ldr	r1, [pc, #360]	@ (8010aa0 <__ieee754_exp+0x2e8>)
 8010938:	f7ef fcd6 	bl	80002e8 <__aeabi_dsub>
 801093c:	e754      	b.n	80107e8 <__ieee754_exp+0x30>
 801093e:	4b59      	ldr	r3, [pc, #356]	@ (8010aa4 <__ieee754_exp+0x2ec>)
 8010940:	4620      	mov	r0, r4
 8010942:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8010946:	4629      	mov	r1, r5
 8010948:	a347      	add	r3, pc, #284	@ (adr r3, 8010a68 <__ieee754_exp+0x2b0>)
 801094a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801094e:	f7ef fe83 	bl	8000658 <__aeabi_dmul>
 8010952:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010956:	f7ef fcc9 	bl	80002ec <__adddf3>
 801095a:	f7f0 f92d 	bl	8000bb8 <__aeabi_d2iz>
 801095e:	4682      	mov	sl, r0
 8010960:	f7ef fe10 	bl	8000584 <__aeabi_i2d>
 8010964:	a342      	add	r3, pc, #264	@ (adr r3, 8010a70 <__ieee754_exp+0x2b8>)
 8010966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801096a:	4606      	mov	r6, r0
 801096c:	460f      	mov	r7, r1
 801096e:	f7ef fe73 	bl	8000658 <__aeabi_dmul>
 8010972:	4602      	mov	r2, r0
 8010974:	460b      	mov	r3, r1
 8010976:	4620      	mov	r0, r4
 8010978:	4629      	mov	r1, r5
 801097a:	f7ef fcb5 	bl	80002e8 <__aeabi_dsub>
 801097e:	a33e      	add	r3, pc, #248	@ (adr r3, 8010a78 <__ieee754_exp+0x2c0>)
 8010980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010984:	4680      	mov	r8, r0
 8010986:	4689      	mov	r9, r1
 8010988:	4630      	mov	r0, r6
 801098a:	4639      	mov	r1, r7
 801098c:	f7ef fe64 	bl	8000658 <__aeabi_dmul>
 8010990:	e9cd 0100 	strd	r0, r1, [sp]
 8010994:	e76f      	b.n	8010876 <__ieee754_exp+0xbe>
 8010996:	4b44      	ldr	r3, [pc, #272]	@ (8010aa8 <__ieee754_exp+0x2f0>)
 8010998:	429a      	cmp	r2, r3
 801099a:	d810      	bhi.n	80109be <__ieee754_exp+0x206>
 801099c:	a338      	add	r3, pc, #224	@ (adr r3, 8010a80 <__ieee754_exp+0x2c8>)
 801099e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109a2:	4620      	mov	r0, r4
 80109a4:	4629      	mov	r1, r5
 80109a6:	f7ef fca1 	bl	80002ec <__adddf3>
 80109aa:	4b3d      	ldr	r3, [pc, #244]	@ (8010aa0 <__ieee754_exp+0x2e8>)
 80109ac:	2200      	movs	r2, #0
 80109ae:	f7f0 f8e3 	bl	8000b78 <__aeabi_dcmpgt>
 80109b2:	b138      	cbz	r0, 80109c4 <__ieee754_exp+0x20c>
 80109b4:	4b3a      	ldr	r3, [pc, #232]	@ (8010aa0 <__ieee754_exp+0x2e8>)
 80109b6:	2200      	movs	r2, #0
 80109b8:	4620      	mov	r0, r4
 80109ba:	4629      	mov	r1, r5
 80109bc:	e712      	b.n	80107e4 <__ieee754_exp+0x2c>
 80109be:	f04f 0a00 	mov.w	sl, #0
 80109c2:	e760      	b.n	8010886 <__ieee754_exp+0xce>
 80109c4:	4682      	mov	sl, r0
 80109c6:	e75e      	b.n	8010886 <__ieee754_exp+0xce>
 80109c8:	4632      	mov	r2, r6
 80109ca:	463b      	mov	r3, r7
 80109cc:	2000      	movs	r0, #0
 80109ce:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80109d2:	f7ef fc89 	bl	80002e8 <__aeabi_dsub>
 80109d6:	4602      	mov	r2, r0
 80109d8:	460b      	mov	r3, r1
 80109da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109de:	f7ef ff65 	bl	80008ac <__aeabi_ddiv>
 80109e2:	4602      	mov	r2, r0
 80109e4:	460b      	mov	r3, r1
 80109e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80109ea:	f7ef fc7d 	bl	80002e8 <__aeabi_dsub>
 80109ee:	4642      	mov	r2, r8
 80109f0:	464b      	mov	r3, r9
 80109f2:	f7ef fc79 	bl	80002e8 <__aeabi_dsub>
 80109f6:	4602      	mov	r2, r0
 80109f8:	460b      	mov	r3, r1
 80109fa:	2000      	movs	r0, #0
 80109fc:	4928      	ldr	r1, [pc, #160]	@ (8010aa0 <__ieee754_exp+0x2e8>)
 80109fe:	f7ef fc73 	bl	80002e8 <__aeabi_dsub>
 8010a02:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 8010a06:	4592      	cmp	sl, r2
 8010a08:	db02      	blt.n	8010a10 <__ieee754_exp+0x258>
 8010a0a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8010a0e:	e6eb      	b.n	80107e8 <__ieee754_exp+0x30>
 8010a10:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 8010a14:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8010a18:	2200      	movs	r2, #0
 8010a1a:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 8010a1e:	f7ef fe1b 	bl	8000658 <__aeabi_dmul>
 8010a22:	e6e1      	b.n	80107e8 <__ieee754_exp+0x30>
 8010a24:	2400      	movs	r4, #0
 8010a26:	2500      	movs	r5, #0
 8010a28:	e6e4      	b.n	80107f4 <__ieee754_exp+0x3c>
 8010a2a:	bf00      	nop
 8010a2c:	f3af 8000 	nop.w
 8010a30:	fefa39ef 	.word	0xfefa39ef
 8010a34:	40862e42 	.word	0x40862e42
 8010a38:	d52d3051 	.word	0xd52d3051
 8010a3c:	c0874910 	.word	0xc0874910
 8010a40:	72bea4d0 	.word	0x72bea4d0
 8010a44:	3e663769 	.word	0x3e663769
 8010a48:	c5d26bf1 	.word	0xc5d26bf1
 8010a4c:	3ebbbd41 	.word	0x3ebbbd41
 8010a50:	af25de2c 	.word	0xaf25de2c
 8010a54:	3f11566a 	.word	0x3f11566a
 8010a58:	16bebd93 	.word	0x16bebd93
 8010a5c:	3f66c16c 	.word	0x3f66c16c
 8010a60:	5555553e 	.word	0x5555553e
 8010a64:	3fc55555 	.word	0x3fc55555
 8010a68:	652b82fe 	.word	0x652b82fe
 8010a6c:	3ff71547 	.word	0x3ff71547
 8010a70:	fee00000 	.word	0xfee00000
 8010a74:	3fe62e42 	.word	0x3fe62e42
 8010a78:	35793c76 	.word	0x35793c76
 8010a7c:	3dea39ef 	.word	0x3dea39ef
 8010a80:	8800759c 	.word	0x8800759c
 8010a84:	7e37e43c 	.word	0x7e37e43c
 8010a88:	40862e41 	.word	0x40862e41
 8010a8c:	7fefffff 	.word	0x7fefffff
 8010a90:	3fd62e42 	.word	0x3fd62e42
 8010a94:	3ff0a2b1 	.word	0x3ff0a2b1
 8010a98:	080122b8 	.word	0x080122b8
 8010a9c:	080122a8 	.word	0x080122a8
 8010aa0:	3ff00000 	.word	0x3ff00000
 8010aa4:	080122c8 	.word	0x080122c8
 8010aa8:	3defffff 	.word	0x3defffff

08010aac <__ieee754_fmodf>:
 8010aac:	b570      	push	{r4, r5, r6, lr}
 8010aae:	ee10 6a90 	vmov	r6, s1
 8010ab2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8010ab6:	1e5a      	subs	r2, r3, #1
 8010ab8:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8010abc:	d206      	bcs.n	8010acc <__ieee754_fmodf+0x20>
 8010abe:	ee10 4a10 	vmov	r4, s0
 8010ac2:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 8010ac6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010aca:	d304      	bcc.n	8010ad6 <__ieee754_fmodf+0x2a>
 8010acc:	ee60 0a20 	vmul.f32	s1, s0, s1
 8010ad0:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8010ad4:	bd70      	pop	{r4, r5, r6, pc}
 8010ad6:	4299      	cmp	r1, r3
 8010ad8:	dbfc      	blt.n	8010ad4 <__ieee754_fmodf+0x28>
 8010ada:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 8010ade:	d105      	bne.n	8010aec <__ieee754_fmodf+0x40>
 8010ae0:	4b32      	ldr	r3, [pc, #200]	@ (8010bac <__ieee754_fmodf+0x100>)
 8010ae2:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 8010ae6:	ed93 0a00 	vldr	s0, [r3]
 8010aea:	e7f3      	b.n	8010ad4 <__ieee754_fmodf+0x28>
 8010aec:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8010af0:	d146      	bne.n	8010b80 <__ieee754_fmodf+0xd4>
 8010af2:	020a      	lsls	r2, r1, #8
 8010af4:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 8010af8:	2a00      	cmp	r2, #0
 8010afa:	dc3e      	bgt.n	8010b7a <__ieee754_fmodf+0xce>
 8010afc:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8010b00:	bf01      	itttt	eq
 8010b02:	021a      	lsleq	r2, r3, #8
 8010b04:	fab2 f282 	clzeq	r2, r2
 8010b08:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 8010b0c:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 8010b10:	bf16      	itet	ne
 8010b12:	15da      	asrne	r2, r3, #23
 8010b14:	3282      	addeq	r2, #130	@ 0x82
 8010b16:	3a7f      	subne	r2, #127	@ 0x7f
 8010b18:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 8010b1c:	bfbb      	ittet	lt
 8010b1e:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8010b22:	1a24      	sublt	r4, r4, r0
 8010b24:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 8010b28:	40a1      	lsllt	r1, r4
 8010b2a:	bfa8      	it	ge
 8010b2c:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 8010b30:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8010b34:	bfb5      	itete	lt
 8010b36:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8010b3a:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 8010b3e:	1aa4      	sublt	r4, r4, r2
 8010b40:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 8010b44:	bfb8      	it	lt
 8010b46:	fa03 f404 	lsllt.w	r4, r3, r4
 8010b4a:	1a80      	subs	r0, r0, r2
 8010b4c:	1b0b      	subs	r3, r1, r4
 8010b4e:	b9d0      	cbnz	r0, 8010b86 <__ieee754_fmodf+0xda>
 8010b50:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8010b54:	bf28      	it	cs
 8010b56:	460b      	movcs	r3, r1
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d0c1      	beq.n	8010ae0 <__ieee754_fmodf+0x34>
 8010b5c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010b60:	db19      	blt.n	8010b96 <__ieee754_fmodf+0xea>
 8010b62:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8010b66:	db19      	blt.n	8010b9c <__ieee754_fmodf+0xf0>
 8010b68:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8010b6c:	327f      	adds	r2, #127	@ 0x7f
 8010b6e:	432b      	orrs	r3, r5
 8010b70:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8010b74:	ee00 3a10 	vmov	s0, r3
 8010b78:	e7ac      	b.n	8010ad4 <__ieee754_fmodf+0x28>
 8010b7a:	3801      	subs	r0, #1
 8010b7c:	0052      	lsls	r2, r2, #1
 8010b7e:	e7bb      	b.n	8010af8 <__ieee754_fmodf+0x4c>
 8010b80:	15c8      	asrs	r0, r1, #23
 8010b82:	387f      	subs	r0, #127	@ 0x7f
 8010b84:	e7ba      	b.n	8010afc <__ieee754_fmodf+0x50>
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	da02      	bge.n	8010b90 <__ieee754_fmodf+0xe4>
 8010b8a:	0049      	lsls	r1, r1, #1
 8010b8c:	3801      	subs	r0, #1
 8010b8e:	e7dd      	b.n	8010b4c <__ieee754_fmodf+0xa0>
 8010b90:	d0a6      	beq.n	8010ae0 <__ieee754_fmodf+0x34>
 8010b92:	0059      	lsls	r1, r3, #1
 8010b94:	e7fa      	b.n	8010b8c <__ieee754_fmodf+0xe0>
 8010b96:	005b      	lsls	r3, r3, #1
 8010b98:	3a01      	subs	r2, #1
 8010b9a:	e7df      	b.n	8010b5c <__ieee754_fmodf+0xb0>
 8010b9c:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 8010ba0:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8010ba4:	3282      	adds	r2, #130	@ 0x82
 8010ba6:	4113      	asrs	r3, r2
 8010ba8:	432b      	orrs	r3, r5
 8010baa:	e7e3      	b.n	8010b74 <__ieee754_fmodf+0xc8>
 8010bac:	080122d8 	.word	0x080122d8

08010bb0 <with_errno>:
 8010bb0:	b510      	push	{r4, lr}
 8010bb2:	ed2d 8b02 	vpush	{d8}
 8010bb6:	eeb0 8a40 	vmov.f32	s16, s0
 8010bba:	eef0 8a60 	vmov.f32	s17, s1
 8010bbe:	4604      	mov	r4, r0
 8010bc0:	f7fd f870 	bl	800dca4 <__errno>
 8010bc4:	eeb0 0a48 	vmov.f32	s0, s16
 8010bc8:	eef0 0a68 	vmov.f32	s1, s17
 8010bcc:	ecbd 8b02 	vpop	{d8}
 8010bd0:	6004      	str	r4, [r0, #0]
 8010bd2:	bd10      	pop	{r4, pc}

08010bd4 <xflow>:
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	b507      	push	{r0, r1, r2, lr}
 8010bd8:	ec51 0b10 	vmov	r0, r1, d0
 8010bdc:	b183      	cbz	r3, 8010c00 <xflow+0x2c>
 8010bde:	4602      	mov	r2, r0
 8010be0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010be4:	e9cd 2300 	strd	r2, r3, [sp]
 8010be8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010bec:	f7ef fd34 	bl	8000658 <__aeabi_dmul>
 8010bf0:	ec41 0b10 	vmov	d0, r0, r1
 8010bf4:	2022      	movs	r0, #34	@ 0x22
 8010bf6:	b003      	add	sp, #12
 8010bf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010bfc:	f7ff bfd8 	b.w	8010bb0 <with_errno>
 8010c00:	4602      	mov	r2, r0
 8010c02:	460b      	mov	r3, r1
 8010c04:	e7ee      	b.n	8010be4 <xflow+0x10>
	...

08010c08 <__math_uflow>:
 8010c08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010c10 <__math_uflow+0x8>
 8010c0c:	f7ff bfe2 	b.w	8010bd4 <xflow>
 8010c10:	00000000 	.word	0x00000000
 8010c14:	10000000 	.word	0x10000000

08010c18 <__math_oflow>:
 8010c18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010c20 <__math_oflow+0x8>
 8010c1c:	f7ff bfda 	b.w	8010bd4 <xflow>
 8010c20:	00000000 	.word	0x00000000
 8010c24:	70000000 	.word	0x70000000

08010c28 <_init>:
 8010c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c2a:	bf00      	nop
 8010c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c2e:	bc08      	pop	{r3}
 8010c30:	469e      	mov	lr, r3
 8010c32:	4770      	bx	lr

08010c34 <_fini>:
 8010c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c36:	bf00      	nop
 8010c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c3a:	bc08      	pop	{r3}
 8010c3c:	469e      	mov	lr, r3
 8010c3e:	4770      	bx	lr
